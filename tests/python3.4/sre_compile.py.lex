(LIT "Internal support module for sre")
(NEWLINE)
(KEYWORD import)
(ID "_sre")
(NEWLINE)
(KEYWORD import)
(ID "sre_parse")
(NEWLINE)
(KEYWORD from)
(ID "sre_constants")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "_sre")
(KEYWORD import)
(ID "MAXREPEAT")
(NEWLINE)
(KEYWORD assert)
(ID "_sre")
(PUNCT ".")
(ID "MAGIC")
(PUNCT "==")
(ID "MAGIC")
(PUNCT ",")
(LIT "SRE module mismatch")
(NEWLINE)
(KEYWORD if)
(ID "_sre")
(PUNCT ".")
(ID "CODESIZE")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "MAXCODE")
(PUNCT "=")
(LIT 65535)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "MAXCODE")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(DEDENT)
(ID "_LITERAL_CODES")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(ID "LITERAL")
(PUNCT ",")
(ID "NOT_LITERAL")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_REPEATING_CODES")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(ID "REPEAT")
(PUNCT ",")
(ID "MIN_REPEAT")
(PUNCT ",")
(ID "MAX_REPEAT")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_SUCCESS_CODES")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(ID "SUCCESS")
(PUNCT ",")
(ID "FAILURE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_ASSERT_CODES")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(ID "ASSERT")
(PUNCT ",")
(ID "ASSERT_NOT")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_equivalences")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(LIT 105)
(PUNCT ",")
(LIT 305)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 115)
(PUNCT ",")
(LIT 383)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 181)
(PUNCT ",")
(LIT 956)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 837)
(PUNCT ",")
(LIT 953)
(PUNCT ",")
(LIT 8126)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 912)
(PUNCT ",")
(LIT 8147)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 944)
(PUNCT ",")
(LIT 8163)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 946)
(PUNCT ",")
(LIT 976)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 949)
(PUNCT ",")
(LIT 1013)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 952)
(PUNCT ",")
(LIT 977)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 954)
(PUNCT ",")
(LIT 1008)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 960)
(PUNCT ",")
(LIT 982)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 961)
(PUNCT ",")
(LIT 1009)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 962)
(PUNCT ",")
(LIT 963)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 966)
(PUNCT ",")
(LIT 981)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 7777)
(PUNCT ",")
(LIT 7835)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 64261)
(PUNCT ",")
(LIT 64262)
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "_ignorecase_fixes")
(PUNCT "=")
(PUNCT "{")
(ID "i")
(PUNCT ":")
(ID "tuple")
(PUNCT "(")
(ID "j")
(KEYWORD for)
(ID "j")
(KEYWORD in)
(ID "t")
(KEYWORD if)
(ID "i")
(PUNCT "!=")
(ID "j")
(PUNCT ")")
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "_equivalences")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "t")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "=")
(ID "code")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "_len")
(PUNCT "=")
(ID "len")
(NEWLINE)
(ID "LITERAL_CODES")
(PUNCT "=")
(ID "_LITERAL_CODES")
(NEWLINE)
(ID "REPEATING_CODES")
(PUNCT "=")
(ID "_REPEATING_CODES")
(NEWLINE)
(ID "SUCCESS_CODES")
(PUNCT "=")
(ID "_SUCCESS_CODES")
(NEWLINE)
(ID "ASSERT_CODES")
(PUNCT "=")
(ID "_ASSERT_CODES")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_IGNORECASE")
(KEYWORD and)
(KEYWORD not)
(PUNCT "(")
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_LOCALE")
(PUNCT ")")
(KEYWORD and)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_UNICODE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fixes")
(PUNCT "=")
(ID "_ignorecase_fixes")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fixes")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "op")
(PUNCT ",")
(ID "av")
(KEYWORD in)
(ID "pattern")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "op")
(KEYWORD in)
(ID "LITERAL_CODES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_IGNORECASE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lo")
(PUNCT "=")
(ID "_sre")
(PUNCT ".")
(ID "getlower")
(PUNCT "(")
(ID "av")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fixes")
(KEYWORD and)
(ID "lo")
(KEYWORD in)
(ID "fixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "IN_IGNORE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "NOT_LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "NEGATE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(PUNCT "(")
(ID "lo")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "fixes")
(PUNCT "[")
(ID "lo")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "LITERAL")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "FAILURE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "OP_IGNORE")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "lo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "IN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_IGNORECASE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "OP_IGNORE")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "fixup")
(PUNCT "(")
(ID "literal")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_sre")
(PUNCT ".")
(ID "getlower")
(PUNCT "(")
(ID "literal")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "fixup")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "_compile_charset")
(PUNCT "(")
(ID "av")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "fixup")
(PUNCT ",")
(ID "fixes")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "ANY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_DOTALL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "ANY_ALL")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "ANY")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD in)
(ID "REPEATING_CODES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_TEMPLATE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error")
(PUNCT "(")
(LIT "internal: unsupported template operator")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_simple")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(KEYWORD and)
(ID "op")
(KEYWORD is)
(KEYWORD not)
(ID "REPEAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "MAX_REPEAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "REPEAT_ONE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "MIN_REPEAT_ONE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "SUCCESS")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "REPEAT")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "MAX_REPEAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "MAX_UNTIL")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "MIN_UNTIL")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "SUBPATTERN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "MARK")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "MARK")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "*")
(LIT 2)
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD in)
(ID "SUCCESS_CODES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD in)
(ID "ASSERT_CODES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT "=")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "getwidth")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lo")
(PUNCT "!=")
(ID "hi")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error")
(PUNCT "(")
(LIT "look-behind requires fixed-width pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "lo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "SUCCESS")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "CALL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "SUCCESS")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "AT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_MULTILINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "av")
(PUNCT "=")
(ID "AT_MULTILINE")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "av")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_LOCALE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "av")
(PUNCT "=")
(ID "AT_LOCALE")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "av")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_UNICODE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "av")
(PUNCT "=")
(ID "AT_UNICODE")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "av")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "ATCODES")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "BRANCH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "tail")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "tailappend")
(PUNCT "=")
(ID "tail")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD for)
(ID "av")
(KEYWORD in)
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "JUMP")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "tailappend")
(PUNCT "(")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "tail")
(KEYWORD in)
(ID "tail")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "[")
(ID "tail")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "tail")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "CATEGORY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_LOCALE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "av")
(PUNCT "=")
(ID "CH_LOCALE")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_UNICODE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "av")
(PUNCT "=")
(ID "CH_UNICODE")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "CHCODES")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "GROUPREF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_IGNORECASE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "OP_IGNORE")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "GROUPREF_EXISTS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "skipyes")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "av")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "JUMP")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skipno")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skipyes")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skipyes")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "[")
(ID "skipno")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skipno")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "[")
(ID "skipyes")
(PUNCT "]")
(PUNCT "=")
(ID "_len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skipyes")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unsupported operand type")
(PUNCT ",")
(ID "op")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_compile_charset")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "fixup")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fixes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "=")
(ID "code")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD for)
(ID "op")
(PUNCT ",")
(ID "av")
(KEYWORD in)
(ID "_optimize_charset")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "fixup")
(PUNCT ",")
(ID "fixes")
(PUNCT ",")
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_UNICODE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "op")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "NEGATE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "RANGE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "CHARSET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "BIGCHARSET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "CATEGORY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_LOCALE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "CHCODES")
(PUNCT "[")
(ID "CH_LOCALE")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_UNICODE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "CHCODES")
(PUNCT "[")
(ID "CH_UNICODE")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "CHCODES")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error")
(PUNCT "(")
(LIT "internal: unsupported set operator")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "FAILURE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_optimize_charset")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "fixup")
(PUNCT ",")
(ID "fixes")
(PUNCT ",")
(ID "isunicode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "tail")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "charmap")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "op")
(PUNCT ",")
(ID "av")
(KEYWORD in)
(ID "charset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fixup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "fixup")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(ID "charmap")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "fixes")
(KEYWORD and)
(ID "i")
(KEYWORD in)
(ID "fixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "fixes")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charmap")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charmap")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "RANGE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "range")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fixup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "map")
(PUNCT "(")
(ID "fixup")
(PUNCT ",")
(ID "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fixup")
(KEYWORD and)
(ID "fixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charmap")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "i")
(KEYWORD in)
(ID "fixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "fixes")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charmap")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charmap")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "NEGATE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "charmap")
(PUNCT ")")
(PUNCT "==")
(LIT 256)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charmap")
(PUNCT "+=")
(LIT #"\0")
(PUNCT "*")
(LIT 65280)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fixup")
(KEYWORD and)
(ID "isunicode")
(KEYWORD and)
(ID "op")
(KEYWORD is)
(ID "RANGE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT "=")
(ID "av")
(NEWLINE)
(ID "ranges")
(PUNCT "=")
(PUNCT "[")
(ID "av")
(PUNCT "]")
(NEWLINE)
(ID "_fixup_range")
(PUNCT "(")
(ID "max")
(PUNCT "(")
(LIT 65536)
(PUNCT ",")
(ID "lo")
(PUNCT ")")
(PUNCT ",")
(ID "min")
(PUNCT "(")
(LIT 73727)
(PUNCT ",")
(ID "hi")
(PUNCT ")")
(PUNCT ",")
(ID "ranges")
(PUNCT ",")
(ID "fixup")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "lo")
(PUNCT ",")
(ID "hi")
(KEYWORD in)
(ID "ranges")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lo")
(PUNCT "==")
(ID "hi")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "LITERAL")
(PUNCT ",")
(ID "hi")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "RANGE")
(PUNCT ",")
(PUNCT "(")
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "runs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "q")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "charmap")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "q")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "runs")
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "runs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "q")
(PUNCT "=")
(ID "charmap")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "q")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "runs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "charmap")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "runs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "q")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "runs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(PUNCT ",")
(ID "q")
(KEYWORD in)
(ID "runs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "q")
(PUNCT "-")
(ID "p")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "LITERAL")
(PUNCT ",")
(ID "p")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "RANGE")
(PUNCT ",")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "q")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "out")
(PUNCT "+=")
(ID "tail")
(NEWLINE)
(KEYWORD if)
(ID "fixup")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "out")
(PUNCT ")")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "out")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "charset")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "charmap")
(PUNCT ")")
(PUNCT "==")
(LIT 256)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "_mk_bitmap")
(PUNCT "(")
(ID "charmap")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "CHARSET")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT "+=")
(ID "tail")
(NEWLINE)
(KEYWORD return)
(ID "out")
(NEWLINE)
(DEDENT)
(ID "charmap")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "charmap")
(PUNCT ")")
(NEWLINE)
(ID "comps")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "mapping")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(NEWLINE)
(ID "block")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 65536)
(PUNCT ",")
(LIT 256)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "charmap")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 256)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "chunk")
(KEYWORD in)
(ID "comps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mapping")
(PUNCT "[")
(ID "i")
(PUNCT "//")
(LIT 256)
(PUNCT "]")
(PUNCT "=")
(ID "comps")
(PUNCT "[")
(ID "chunk")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mapping")
(PUNCT "[")
(ID "i")
(PUNCT "//")
(LIT 256)
(PUNCT "]")
(PUNCT "=")
(ID "comps")
(PUNCT "[")
(ID "chunk")
(PUNCT "]")
(PUNCT "=")
(ID "block")
(NEWLINE)
(ID "block")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "data")
(PUNCT "+=")
(ID "chunk")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "_mk_bitmap")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "block")
(PUNCT "]")
(PUNCT "+")
(ID "_bytes_to_codes")
(PUNCT "(")
(ID "mapping")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "BIGCHARSET")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT "+=")
(ID "tail")
(NEWLINE)
(KEYWORD return)
(ID "out")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_fixup_range")
(PUNCT "(")
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT ",")
(ID "ranges")
(PUNCT ",")
(ID "fixup")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "map")
(PUNCT "(")
(ID "fixup")
(PUNCT ",")
(ID "range")
(PUNCT "(")
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(PUNCT "(")
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT ")")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "ranges")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(ID "lo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "l")
(PUNCT "==")
(ID "lo")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ranges")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "hi")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ranges")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "i")
(PUNCT ">")
(ID "hi")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(ID "hi")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ranges")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "lo")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ranges")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_CODEBITS")
(PUNCT "=")
(ID "_sre")
(PUNCT ".")
(ID "CODESIZE")
(PUNCT "*")
(LIT 8)
(NEWLINE)
(ID "_BITS_TRANS")
(PUNCT "=")
(LIT #"0")
(PUNCT "+")
(LIT #"1")
(PUNCT "*")
(LIT 255)
(NEWLINE)
(KEYWORD def)
(ID "_mk_bitmap")
(PUNCT "(")
(ID "bits")
(PUNCT ",")
(ID "_CODEBITS")
(PUNCT "=")
(ID "_CODEBITS")
(PUNCT ",")
(ID "_int")
(PUNCT "=")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "bits")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "_BITS_TRANS")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "_int")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(ID "_CODEBITS")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(ID "_CODEBITS")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_bytes_to_codes")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ".")
(ID "cast")
(PUNCT "(")
(LIT "I")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "a")
(PUNCT ".")
(ID "itemsize")
(PUNCT "==")
(ID "_sre")
(PUNCT ".")
(ID "CODESIZE")
(NEWLINE)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT "*")
(ID "a")
(PUNCT ".")
(ID "itemsize")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "a")
(PUNCT ".")
(ID "tolist")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_simple")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT "=")
(ID "av")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "getwidth")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "lo")
(PUNCT "==")
(ID "hi")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "av")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(ID "SUBPATTERN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_generate_overlap_table")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Generate an overlap table for the following prefix.\n    An overlap table is a table of the same size as the prefix which\n    informs about the potential self-overlap for each index in the prefix:\n    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n      prefix[0:k]\n    ")
(NEWLINE)
(ID "table")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idx")
(PUNCT "=")
(ID "table")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "prefix")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "!=")
(ID "prefix")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "idx")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "table")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "idx")
(PUNCT "=")
(ID "table")
(PUNCT "[")
(ID "idx")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "table")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "idx")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "table")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_compile_info")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lo")
(PUNCT ",")
(ID "hi")
(PUNCT "=")
(ID "pattern")
(PUNCT ".")
(ID "getwidth")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lo")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "prefix")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "prefixappend")
(PUNCT "=")
(ID "prefix")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "prefix_skip")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "charset")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "charsetappend")
(PUNCT "=")
(ID "charset")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "flags")
(PUNCT "&")
(ID "SRE_FLAG_IGNORECASE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "op")
(PUNCT ",")
(ID "av")
(KEYWORD in)
(ID "pattern")
(PUNCT ".")
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT "==")
(ID "prefix_skip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix_skip")
(PUNCT "=")
(ID "prefix_skip")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "prefixappend")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "SUBPATTERN")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT "=")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefixappend")
(PUNCT "(")
(ID "av")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "prefix")
(KEYWORD and)
(ID "pattern")
(PUNCT ".")
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT "=")
(ID "pattern")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "SUBPATTERN")
(KEYWORD and)
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT "=")
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charsetappend")
(PUNCT "(")
(PUNCT "(")
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "BRANCH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "cappend")
(PUNCT "=")
(ID "c")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cappend")
(PUNCT "(")
(PUNCT "(")
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "c")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "BRANCH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "cappend")
(PUNCT "=")
(ID "c")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "av")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "op")
(KEYWORD is)
(ID "LITERAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cappend")
(PUNCT "(")
(PUNCT "(")
(ID "op")
(PUNCT ",")
(ID "av")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "c")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "op")
(KEYWORD is)
(ID "IN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "av")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "emit")
(PUNCT "=")
(ID "code")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "INFO")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skip")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ";")
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "mask")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mask")
(PUNCT "=")
(ID "SRE_INFO_PREFIX")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT "==")
(ID "prefix_skip")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "pattern")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mask")
(PUNCT "=")
(ID "mask")
(PUNCT "+")
(ID "SRE_INFO_LITERAL")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "charset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mask")
(PUNCT "=")
(ID "mask")
(PUNCT "+")
(ID "SRE_INFO_CHARSET")
(NEWLINE)
(DEDENT)
(ID "emit")
(PUNCT "(")
(ID "mask")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lo")
(PUNCT "<")
(ID "MAXCODE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "lo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "MAXCODE")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "prefix")
(PUNCT "[")
(PUNCT ":")
(ID "MAXCODE")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hi")
(PUNCT "<")
(ID "MAXCODE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "hi")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "emit")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "emit")
(PUNCT "(")
(ID "prefix_skip")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "_generate_overlap_table")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "charset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_compile_charset")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT "[")
(ID "skip")
(PUNCT "]")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "-")
(ID "skip")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isstring")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_code")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ".")
(ID "flags")
(PUNCT "|")
(ID "flags")
(NEWLINE)
(ID "code")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "_compile_info")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "p")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "_compile")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "p")
(PUNCT ".")
(ID "data")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "OPCODES")
(PUNCT "[")
(ID "SUCCESS")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "code")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isstring")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern")
(PUNCT "=")
(ID "p")
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "sre_parse")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT "=")
(ID "_code")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ".")
(ID "groups")
(PUNCT ">")
(LIT 100)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "sorry, but this version only supports 100 named groups")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "groupindex")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ".")
(ID "groupdict")
(NEWLINE)
(ID "indexgroup")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "*")
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ".")
(ID "groups")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "i")
(KEYWORD in)
(ID "groupindex")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indexgroup")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "k")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_sre")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT "|")
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ".")
(ID "flags")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ".")
(ID "groups")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "groupindex")
(PUNCT ",")
(ID "indexgroup")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
