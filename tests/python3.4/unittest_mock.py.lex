(ID "__all__")
(PUNCT "=")
(PUNCT "(")
(LIT "Mock")
(PUNCT ",")
(LIT "MagicMock")
(PUNCT ",")
(LIT "patch")
(PUNCT ",")
(LIT "sentinel")
(PUNCT ",")
(LIT "DEFAULT")
(PUNCT ",")
(LIT "ANY")
(PUNCT ",")
(LIT "call")
(PUNCT ",")
(LIT "create_autospec")
(PUNCT ",")
(LIT "FILTER_DIR")
(PUNCT ",")
(LIT "NonCallableMock")
(PUNCT ",")
(LIT "NonCallableMagicMock")
(PUNCT ",")
(LIT "mock_open")
(PUNCT ",")
(LIT "PropertyMock")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "1.0")
(NEWLINE)
(KEYWORD import)
(ID "inspect")
(NEWLINE)
(KEYWORD import)
(ID "pprint")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "functools")
(KEYWORD import)
(ID "wraps")
(PUNCT ",")
(ID "partial")
(NEWLINE)
(ID "BaseExceptions")
(PUNCT "=")
(PUNCT "(")
(ID "BaseException")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "java")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "java")
(NEWLINE)
(ID "BaseExceptions")
(PUNCT "=")
(PUNCT "(")
(ID "BaseException")
(PUNCT ",")
(ID "java")
(PUNCT ".")
(ID "lang")
(PUNCT ".")
(ID "Throwable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "FILTER_DIR")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "_safe_super")
(PUNCT "=")
(ID "super")
(NEWLINE)
(KEYWORD def)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "issubclass")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(ID "NonCallableMock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_exception")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "BaseExceptions")
(PUNCT ")")
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "BaseExceptions")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_slotted")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__slots__")
(PUNCT "=")
(PUNCT "[")
(LIT "a")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "DescriptorTypes")
(PUNCT "=")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "_slotted")
(PUNCT ".")
(ID "a")
(PUNCT ")")
(PUNCT ",")
(ID "property")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_get_signature_object")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "as_instance")
(PUNCT ",")
(ID "eat_self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Given an arbitrary, possibly callable object, try to create a suitable\n    signature object.\n    Return a (reduced func, signature) tuple, or None.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "as_instance")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__init__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "eat_self")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "FunctionTypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__call__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "eat_self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig_func")
(PUNCT "=")
(ID "partial")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig_func")
(PUNCT "=")
(ID "func")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "func")
(PUNCT ",")
(ID "inspect")
(PUNCT ".")
(ID "signature")
(PUNCT "(")
(ID "sig_func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_signature")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "mock")
(PUNCT ",")
(ID "skipfirst")
(PUNCT ",")
(ID "instance")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_get_signature_object")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "instance")
(PUNCT ",")
(ID "skipfirst")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "func")
(PUNCT ",")
(ID "sig")
(PUNCT "=")
(ID "sig")
(NEWLINE)
(KEYWORD def)
(ID "checksig")
(PUNCT "(")
(ID "_mock_self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_copy_func_details")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "checksig")
(PUNCT ")")
(NEWLINE)
(ID "type")
(PUNCT "(")
(ID "mock")
(PUNCT ")")
(PUNCT ".")
(ID "_mock_check_sig")
(PUNCT "=")
(ID "checksig")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_copy_func_details")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "funcopy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "__name__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "__text_signature__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__text_signature__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "__module__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__module__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "__defaults__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__defaults__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "__kwdefaults__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__kwdefaults__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_callable")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__call__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_list")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_instance_callable")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Given an object, return True if the object is callable.\n    For classes, return True if instances would be callable.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__call__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "obj")
(PUNCT ".")
(ID "__mro__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__call__")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set_signature")
(PUNCT "(")
(ID "mock")
(PUNCT ",")
(ID "original")
(PUNCT ",")
(ID "instance")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_callable")
(PUNCT "(")
(ID "original")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "skipfirst")
(PUNCT "=")
(ID "isinstance")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "_get_signature_object")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "instance")
(PUNCT ",")
(ID "skipfirst")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "func")
(PUNCT ",")
(ID "sig")
(PUNCT "=")
(ID "result")
(NEWLINE)
(KEYWORD def)
(ID "checksig")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_copy_func_details")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "checksig")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "original")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "funcopy")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT "=")
(PUNCT "{")
(LIT "_checksig_")
(PUNCT ":")
(ID "checksig")
(PUNCT ",")
(LIT "mock")
(PUNCT ":")
(ID "mock")
(PUNCT "}")
(NEWLINE)
(ID "src")
(PUNCT "=")
(LIT "def %s(*args, **kwargs):\n    _checksig_(*args, **kwargs)\n    return mock(*args, **kwargs)")
(PUNCT "%")
(ID "name")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(NEWLINE)
(ID "funcopy")
(PUNCT "=")
(ID "context")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(ID "_setup_func")
(PUNCT "(")
(ID "funcopy")
(PUNCT ",")
(ID "mock")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "funcopy")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setup_func")
(PUNCT "(")
(ID "funcopy")
(PUNCT ",")
(ID "mock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "mock")
(PUNCT "=")
(ID "mock")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "mock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assert_called_with")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mock")
(PUNCT ".")
(ID "assert_called_with")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assert_called_once_with")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mock")
(PUNCT ".")
(ID "assert_called_once_with")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assert_has_calls")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mock")
(PUNCT ".")
(ID "assert_has_calls")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assert_any_call")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mock")
(PUNCT ".")
(ID "assert_any_call")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset_mock")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcopy")
(PUNCT ".")
(ID "method_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "mock_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "reset_mock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ret")
(PUNCT "=")
(ID "funcopy")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(KEYWORD if)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "ret")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "ret")
(KEYWORD is)
(ID "mock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret")
(PUNCT ".")
(ID "reset_mock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "funcopy")
(PUNCT ".")
(ID "called")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "call_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "call_args")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "call_args_list")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "method_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "mock_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "mock")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "mock")
(PUNCT ".")
(ID "side_effect")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "=")
(ID "mock")
(PUNCT ".")
(ID "_mock_children")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "assert_called_with")
(PUNCT "=")
(ID "assert_called_with")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "assert_called_once_with")
(PUNCT "=")
(ID "assert_called_once_with")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "assert_has_calls")
(PUNCT "=")
(ID "assert_has_calls")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "assert_any_call")
(PUNCT "=")
(ID "assert_any_call")
(NEWLINE)
(ID "funcopy")
(PUNCT ".")
(ID "reset_mock")
(PUNCT "=")
(ID "reset_mock")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_delegate")
(PUNCT "=")
(ID "funcopy")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_magic")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "__%s__")
(PUNCT "%")
(ID "name")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_SentinelObject")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A unique, named, sentinel object.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "sentinel.%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_Sentinel")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Access attributes to return a named object, usable as a sentinel.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sentinels")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "__bases__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sentinels")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_SentinelObject")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "sentinel")
(PUNCT "=")
(ID "_Sentinel")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "DEFAULT")
(PUNCT "=")
(ID "sentinel")
(PUNCT ".")
(ID "DEFAULT")
(NEWLINE)
(ID "_missing")
(PUNCT "=")
(ID "sentinel")
(PUNCT ".")
(ID "MISSING")
(NEWLINE)
(ID "_deleted")
(PUNCT "=")
(ID "sentinel")
(PUNCT ".")
(ID "DELETED")
(NEWLINE)
(KEYWORD def)
(ID "_copy")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(ID "dict")
(PUNCT ",")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ",")
(ID "set")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(ID "_allowed_names")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(LIT "return_value")
(PUNCT ",")
(LIT "_mock_return_value")
(PUNCT ",")
(LIT "side_effect")
(PUNCT ",")
(LIT "_mock_side_effect")
(PUNCT ",")
(LIT "_mock_parent")
(PUNCT ",")
(LIT "_mock_new_parent")
(PUNCT ",")
(LIT "_mock_name")
(PUNCT ",")
(LIT "_mock_new_name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_delegating_property")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_allowed_names")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "_the_name")
(PUNCT "=")
(LIT "_mock_")
(PUNCT "+")
(ID "name")
(NEWLINE)
(KEYWORD def)
(ID "_get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "_the_name")
(PUNCT "=")
(ID "_the_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "_the_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "_the_name")
(PUNCT "=")
(ID "_the_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(ID "_the_name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "property")
(PUNCT "(")
(ID "_get")
(PUNCT ",")
(ID "_set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_CallList")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT ".")
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "len_value")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "len_self")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len_value")
(PUNCT ">")
(ID "len_self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len_self")
(PUNCT "-")
(ID "len_value")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub_list")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(ID "len_value")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "sub_list")
(PUNCT "==")
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "pprint")
(PUNCT ".")
(ID "pformat")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_and_set_parent")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "new_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "_mock_name")
(KEYWORD or)
(ID "value")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "_mock_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "_mock_new_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "_parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(KEYWORD while)
(ID "_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_parent")
(KEYWORD is)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "_parent")
(PUNCT "=")
(ID "_parent")
(PUNCT ".")
(ID "_mock_new_parent")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "new_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT ".")
(ID "_mock_new_parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "=")
(ID "new_name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT ".")
(ID "_mock_parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "_mock_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_MockIter")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "obj")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Base")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_mock_return_value")
(PUNCT "=")
(ID "DEFAULT")
(NEWLINE)
(ID "_mock_side_effect")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NonCallableMock")
(PUNCT "(")
(ID "Base")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A non-callable version of `Mock`")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "cls")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(LIT "__doc__")
(PUNCT ":")
(ID "cls")
(PUNCT ".")
(ID "__doc__")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "instance")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "new")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "instance")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "wraps")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_spec_state")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "_new_parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_spec_as_instance")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "_eat_self")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_new_parent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_new_parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(DEDENT)
(ID "__dict__")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_parent")
(PUNCT "]")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_name")
(PUNCT "]")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_new_name")
(PUNCT "]")
(PUNCT "=")
(ID "_new_name")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_new_parent")
(PUNCT "]")
(PUNCT "=")
(ID "_new_parent")
(NEWLINE)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(ID "spec_set")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_eat_self")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_eat_self")
(PUNCT "=")
(ID "parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_mock_add_spec")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "_spec_as_instance")
(PUNCT ",")
(ID "_eat_self")
(PUNCT ")")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_children")
(PUNCT "]")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_wraps")
(PUNCT "]")
(PUNCT "=")
(ID "wraps")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_delegate")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_called")
(PUNCT "]")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_call_args")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_call_count")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_call_args_list")
(PUNCT "]")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_mock_calls")
(PUNCT "]")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "method_calls")
(PUNCT "]")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "configure_mock")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_safe_super")
(PUNCT "(")
(ID "NonCallableMock")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "wraps")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "_spec_state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "attach_mock")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mock")
(PUNCT ",")
(ID "attribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Attach a mock as an attribute of this one, replacing its name and\n        parent. Calls to the attached mock will be recorded in the\n        `method_calls` and `mock_calls` attributes of this one.")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_parent")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_new_parent")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "mock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mock_add_spec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_add_spec")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mock_add_spec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "_spec_as_instance")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "_eat_self")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_spec_class")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_spec_signature")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "_is_list")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_spec_class")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_spec_class")
(PUNCT "=")
(ID "_get_class")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "_get_signature_object")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "_spec_as_instance")
(PUNCT ",")
(ID "_eat_self")
(PUNCT ")")
(NEWLINE)
(ID "_spec_signature")
(PUNCT "=")
(ID "res")
(KEYWORD and)
(ID "res")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "dir")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__dict__")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_spec_class")
(PUNCT "]")
(PUNCT "=")
(ID "_spec_class")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_spec_set")
(PUNCT "]")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_spec_signature")
(PUNCT "]")
(PUNCT "=")
(ID "_spec_signature")
(NEWLINE)
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_methods")
(PUNCT "]")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__get_return_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_return_value")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ret")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_child_mock")
(PUNCT "(")
(ID "_new_parent")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(LIT "()")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "ret")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ret")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__set_return_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mock_return_value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "_check_and_set_parent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__return_value_doc")
(PUNCT "=")
(LIT "The value to be returned when the mock is called.")
(NEWLINE)
(ID "return_value")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "__get_return_value")
(PUNCT ",")
(ID "__set_return_value")
(PUNCT ",")
(ID "__return_value_doc")
(PUNCT ")")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_spec_class")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_spec_class")
(NEWLINE)
(DEDENT)
(ID "called")
(PUNCT "=")
(ID "_delegating_property")
(PUNCT "(")
(LIT "called")
(PUNCT ")")
(NEWLINE)
(ID "call_count")
(PUNCT "=")
(ID "_delegating_property")
(PUNCT "(")
(LIT "call_count")
(PUNCT ")")
(NEWLINE)
(ID "call_args")
(PUNCT "=")
(ID "_delegating_property")
(PUNCT "(")
(LIT "call_args")
(PUNCT ")")
(NEWLINE)
(ID "call_args_list")
(PUNCT "=")
(ID "_delegating_property")
(PUNCT "(")
(LIT "call_args_list")
(PUNCT ")")
(NEWLINE)
(ID "mock_calls")
(PUNCT "=")
(ID "_delegating_property")
(PUNCT "(")
(LIT "mock_calls")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__get_side_effect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delegated")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(NEWLINE)
(KEYWORD if)
(ID "delegated")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_mock_side_effect")
(NEWLINE)
(DEDENT)
(ID "sf")
(PUNCT "=")
(ID "delegated")
(PUNCT ".")
(ID "side_effect")
(NEWLINE)
(KEYWORD if)
(ID "sf")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "sf")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "sf")
(PUNCT ",")
(ID "_MockIter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sf")
(PUNCT "=")
(ID "_MockIter")
(PUNCT "(")
(ID "sf")
(PUNCT ")")
(NEWLINE)
(ID "delegated")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "sf")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "sf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__set_side_effect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_try_iter")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "delegated")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_delegate")
(NEWLINE)
(KEYWORD if)
(ID "delegated")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mock_side_effect")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delegated")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "side_effect")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "__get_side_effect")
(PUNCT ",")
(ID "__set_side_effect")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "reset_mock")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Restore the mock object to its initial state.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "called")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_args")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mock_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_args_list")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "method_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "child")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "child")
(PUNCT ",")
(ID "_SpecState")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "child")
(PUNCT ".")
(ID "reset_mock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_return_value")
(NEWLINE)
(KEYWORD if)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "ret")
(PUNCT ")")
(KEYWORD and)
(ID "ret")
(KEYWORD is)
(KEYWORD not)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret")
(PUNCT ".")
(ID "reset_mock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "configure_mock")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set attributes on the mock through keyword arguments.\n\n        Attributes plus return values and side effects can be set on child\n        mocks using standard dot notation and unpacking a dictionary in the\n        method call:\n\n        >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\n        >>> mock.configure_mock(**attrs)")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "kwargs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "entry")
(PUNCT ":")
(ID "entry")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "arg")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "final")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "final")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "_mock_methods")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD or)
(ID "name")
(KEYWORD in)
(ID "_all_magics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Mock object has no attribute %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "_is_magic")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(ID "_deleted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "result")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wraps")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_mock_wraps")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wraps")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_mock_wraps")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_child_mock")
(PUNCT "(")
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "wraps")
(PUNCT "=")
(ID "wraps")
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "_new_parent")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "_SpecState")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "create_autospec")
(PUNCT "(")
(ID "result")
(PUNCT ".")
(ID "spec")
(PUNCT ",")
(ID "result")
(PUNCT ".")
(ID "spec_set")
(PUNCT ",")
(ID "result")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(ID "result")
(PUNCT ".")
(ID "parent")
(PUNCT ",")
(ID "result")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name_list")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "]")
(NEWLINE)
(ID "_parent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_new_parent")
(NEWLINE)
(ID "last")
(PUNCT "=")
(ID "self")
(NEWLINE)
(ID "dot")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(KEYWORD if)
(ID "_name_list")
(PUNCT "==")
(PUNCT "[")
(LIT "()")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dot")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last")
(PUNCT "=")
(ID "_parent")
(NEWLINE)
(ID "_name_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_parent")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "+")
(ID "dot")
(PUNCT ")")
(NEWLINE)
(ID "dot")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(KEYWORD if)
(ID "_parent")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "==")
(LIT "()")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dot")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "_parent")
(PUNCT "=")
(ID "_parent")
(PUNCT ".")
(ID "_mock_new_parent")
(NEWLINE)
(KEYWORD if)
(ID "id")
(PUNCT "(")
(ID "_parent")
(PUNCT ")")
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "_parent")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_name_list")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "_name_list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_first")
(PUNCT "=")
(ID "last")
(PUNCT ".")
(ID "_mock_name")
(KEYWORD or)
(LIT "mock")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "_name_list")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_name_list")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "()")
(PUNCT ",")
(LIT "().")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_first")
(PUNCT "+=")
(LIT ".")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_name_list")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "_first")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_name_list")
(PUNCT ")")
(NEWLINE)
(ID "name_string")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "mock")
(PUNCT ",")
(LIT "mock.")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name_string")
(PUNCT "=")
(LIT " name=%r")
(PUNCT "%")
(ID "name")
(NEWLINE)
(DEDENT)
(ID "spec_string")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_spec_class")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec_string")
(PUNCT "=")
(LIT " spec=%r")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_spec_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec_string")
(PUNCT "=")
(LIT " spec_set=%r")
(NEWLINE)
(DEDENT)
(ID "spec_string")
(PUNCT "=")
(ID "spec_string")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_spec_class")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "<%s%s%s id='%s'>")
(PUNCT "%")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "name_string")
(PUNCT ",")
(ID "spec_string")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__dir__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Filter the output of `dir(mock)` to only useful members.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "FILTER_DIR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "object")
(PUNCT ".")
(ID "__dir__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "extras")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "from_type")
(PUNCT "=")
(ID "dir")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "from_dict")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(ID "from_type")
(PUNCT "=")
(PUNCT "[")
(ID "e")
(KEYWORD for)
(ID "e")
(KEYWORD in)
(ID "from_type")
(KEYWORD if)
(KEYWORD not)
(ID "e")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "from_dict")
(PUNCT "=")
(PUNCT "[")
(ID "e")
(KEYWORD for)
(ID "e")
(KEYWORD in)
(ID "from_dict")
(KEYWORD if)
(KEYWORD not)
(ID "e")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(KEYWORD or)
(ID "_is_magic")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "sorted")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "extras")
(PUNCT "+")
(ID "from_type")
(PUNCT "+")
(ID "from_dict")
(PUNCT "+")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "_allowed_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "object")
(PUNCT ".")
(ID "__setattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_spec_set")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD and)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Mock object has no attribute '%s'")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "name")
(KEYWORD in)
(ID "_unsupported_magics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "Attempting to set unsupported magic method %r.")
(PUNCT "%")
(ID "name")
(NEWLINE)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "name")
(KEYWORD in)
(ID "_all_magics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Mock object has no attribute '%s'")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "_get_method")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "original")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "value")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ":")
(ID "original")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_check_and_set_parent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "name")
(PUNCT "==")
(LIT "__class__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_spec_class")
(PUNCT "=")
(ID "value")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_check_and_set_parent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "object")
(PUNCT ".")
(ID "__setattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__delattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "_all_magics")
(KEYWORD and)
(ID "name")
(KEYWORD in)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delattr")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT ".")
(ID "__delattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_missing")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(ID "_deleted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(ID "_missing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "_deleted")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_mock_call_signature")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_name")
(KEYWORD or)
(LIT "mock")
(NEWLINE)
(KEYWORD return)
(ID "_format_call_signature")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_mock_failure_message")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "Expected call: %s\nActual call: %s")
(NEWLINE)
(ID "expected_string")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_mock_call_signature")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "call_args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "call_args")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "call_args")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "call_args")
(PUNCT "=")
(ID "call_args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "actual_string")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_mock_call_signature")
(PUNCT "(")
(PUNCT "*")
(ID "call_args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "message")
(PUNCT "%")
(PUNCT "(")
(ID "expected_string")
(PUNCT ",")
(ID "actual_string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_call_matcher")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "_call")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Given a call (or simply a (args, kwargs) tuple), return a\n        comparison key suitable for matching with other calls.\n        This is a best effort method which relies on the spec's signature,\n        if available, or falls back on the arguments themselves.\n        ")
(NEWLINE)
(ID "sig")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_spec_signature")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "_call")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "_call")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "_call")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "name")
(PUNCT ",")
(ID "sig")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "e")
(PUNCT ".")
(ID "with_traceback")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_call")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assert_called_with")
(PUNCT "(")
(ID "_mock_self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "assert that the mock was called with the specified arguments.\n\n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.")
(NEWLINE)
(ID "self")
(PUNCT "=")
(ID "_mock_self")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "call_args")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expected")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_mock_call_signature")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "Expected call: %s\nNot called")
(PUNCT "%")
(PUNCT "(")
(ID "expected")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_error_message")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_mock_failure_message")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "msg")
(NEWLINE)
(DEDENT)
(ID "expected")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_matcher")
(PUNCT "(")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "actual")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_matcher")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "call_args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "expected")
(PUNCT "!=")
(ID "actual")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cause")
(PUNCT "=")
(ID "expected")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "expected")
(PUNCT ",")
(ID "Exception")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(ID "_error_message")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(ID "cause")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assert_called_once_with")
(PUNCT "(")
(ID "_mock_self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "assert that the mock was called exactly once and with the specified\n        arguments.")
(NEWLINE)
(ID "self")
(PUNCT "=")
(ID "_mock_self")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "call_count")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "Expected '%s' to be called once. Called %s times.")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_mock_name")
(KEYWORD or)
(LIT "mock")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "call_count")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "assert_called_with")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assert_has_calls")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "calls")
(PUNCT ",")
(ID "any_order")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "assert the mock has been called with the specified calls.\n        The `mock_calls` list is checked for the calls.\n\n        If `any_order` is False (the default) then the calls must be\n        sequential. There can be extra calls before or after the\n        specified calls.\n\n        If `any_order` is True then the calls can be in any order, but\n        they must all appear in `mock_calls`.")
(NEWLINE)
(ID "expected")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_call_matcher")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "calls")
(PUNCT "]")
(NEWLINE)
(ID "cause")
(PUNCT "=")
(ID "expected")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "expected")
(PUNCT ",")
(ID "Exception")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(ID "all_calls")
(PUNCT "=")
(ID "_CallList")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_call_matcher")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "mock_calls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "any_order")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "expected")
(KEYWORD not)
(KEYWORD in)
(ID "all_calls")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "Calls not found.\nExpected: %r\n")
(LIT "Actual: %r")
(PUNCT "%")
(PUNCT "(")
(ID "calls")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "mock_calls")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(ID "cause")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "all_calls")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "all_calls")
(PUNCT ")")
(NEWLINE)
(ID "not_found")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "kall")
(KEYWORD in)
(ID "expected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "all_calls")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "kall")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "not_found")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "kall")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "not_found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "%r not all found in call list")
(PUNCT "%")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "not_found")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(ID "cause")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assert_any_call")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "assert the mock has been called with the specified arguments.\n\n        The assert passes if the mock has *ever* been called, unlike\n        `assert_called_with` and `assert_called_once_with` that only pass if\n        the call is the most recent one.")
(NEWLINE)
(ID "expected")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_matcher")
(PUNCT "(")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "actual")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_call_matcher")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "call_args_list")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "expected")
(KEYWORD not)
(KEYWORD in)
(ID "actual")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cause")
(PUNCT "=")
(ID "expected")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "expected")
(PUNCT ",")
(ID "Exception")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(ID "expected_string")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_mock_call_signature")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "%s call not found")
(PUNCT "%")
(ID "expected_string")
(PUNCT ")")
(KEYWORD from)
(ID "cause")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_child_mock")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create the child mocks for attributes and return value.\n        By default child mocks will be the same type as the parent.\n        Subclasses of Mock may want to override this to customize the way\n        child mocks are made.\n\n        For non-callable mocks the callable variant will be used (rather than\n        any custom subclass).")
(NEWLINE)
(ID "_type")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "issubclass")
(PUNCT "(")
(ID "_type")
(PUNCT ",")
(ID "CallableMixin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "_type")
(PUNCT ",")
(ID "NonCallableMagicMock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "MagicMock")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "issubclass")
(PUNCT "(")
(ID "_type")
(PUNCT ",")
(ID "NonCallableMock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "Mock")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "_type")
(PUNCT ".")
(ID "__mro__")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "klass")
(PUNCT "(")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_try_iter")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_is_exception")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_callable")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "CallableMixin")
(PUNCT "(")
(ID "Base")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "side_effect")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "return_value")
(PUNCT "=")
(ID "DEFAULT")
(PUNCT ",")
(ID "wraps")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_spec_state")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "_new_parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "_mock_return_value")
(PUNCT "]")
(PUNCT "=")
(ID "return_value")
(NEWLINE)
(ID "_safe_super")
(PUNCT "(")
(ID "CallableMixin")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "wraps")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "_spec_state")
(PUNCT ",")
(ID "_new_name")
(PUNCT ",")
(ID "_new_parent")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "side_effect")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mock_check_sig")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "_mock_self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_mock_self")
(PUNCT ".")
(ID "_mock_check_sig")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_mock_self")
(PUNCT ".")
(ID "_mock_call")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mock_call")
(PUNCT "(")
(ID "_mock_self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "=")
(ID "_mock_self")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "called")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "_new_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_new_name")
(NEWLINE)
(ID "_new_parent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_new_parent")
(NEWLINE)
(ID "_call")
(PUNCT "=")
(ID "_Call")
(PUNCT "(")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ",")
(ID "two")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_args")
(PUNCT "=")
(ID "_call")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_args_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_call")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mock_calls")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_Call")
(PUNCT "(")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "seen")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "skip_next_dot")
(PUNCT "=")
(ID "_new_name")
(PUNCT "==")
(LIT "()")
(NEWLINE)
(ID "do_method_calls")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_mock_name")
(NEWLINE)
(KEYWORD while)
(ID "_new_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_mock_call")
(PUNCT "=")
(ID "_Call")
(PUNCT "(")
(PUNCT "(")
(ID "_new_name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_new_parent")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dot")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(KEYWORD if)
(ID "skip_next_dot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dot")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "skip_next_dot")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "_new_parent")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "==")
(LIT "()")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip_next_dot")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "_new_name")
(PUNCT "=")
(ID "_new_parent")
(PUNCT ".")
(ID "_mock_new_name")
(PUNCT "+")
(ID "dot")
(PUNCT "+")
(ID "_new_name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "do_method_calls")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_new_name")
(PUNCT "==")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_method_call")
(PUNCT "=")
(ID "this_mock_call")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_method_call")
(PUNCT "=")
(ID "_Call")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_new_parent")
(PUNCT ".")
(ID "method_calls")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "this_method_call")
(PUNCT ")")
(NEWLINE)
(ID "do_method_calls")
(PUNCT "=")
(ID "_new_parent")
(PUNCT ".")
(ID "_mock_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "do_method_calls")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "_new_parent")
(PUNCT ".")
(ID "_mock_name")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_new_parent")
(PUNCT ".")
(ID "mock_calls")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "this_mock_call")
(PUNCT ")")
(NEWLINE)
(ID "_new_parent")
(PUNCT "=")
(ID "_new_parent")
(PUNCT ".")
(ID "_mock_new_parent")
(NEWLINE)
(ID "_new_parent_id")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "_new_parent")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_new_parent_id")
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "_new_parent_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ret_val")
(PUNCT "=")
(ID "DEFAULT")
(NEWLINE)
(ID "effect")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "side_effect")
(NEWLINE)
(KEYWORD if)
(ID "effect")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_is_exception")
(PUNCT "(")
(ID "effect")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "effect")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_callable")
(PUNCT "(")
(ID "effect")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "effect")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_is_exception")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "ret_val")
(PUNCT "=")
(ID "effect")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_mock_wraps")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_mock_return_value")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_mock_wraps")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ret_val")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret_val")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ret_val")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Mock")
(PUNCT "(")
(ID "CallableMixin")
(PUNCT ",")
(ID "NonCallableMock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Create a new `Mock` object. `Mock` takes several optional arguments\n    that specify the behaviour of the Mock object:\n\n    * `spec`: This can be either a list of strings or an existing object (a\n      class or instance) that acts as the specification for the mock object. If\n      you pass in an object then a list of strings is formed by calling dir on\n      the object (excluding unsupported magic attributes and methods). Accessing\n      any attribute not in this list will raise an `AttributeError`.\n\n      If `spec` is an object (rather than a list of strings) then\n      `mock.__class__` returns the class of the spec object. This allows mocks\n      to pass `isinstance` tests.\n\n    * `spec_set`: A stricter variant of `spec`. If used, attempting to *set*\n      or get an attribute on the mock that isn't on the object passed as\n      `spec_set` will raise an `AttributeError`.\n\n    * `side_effect`: A function to be called whenever the Mock is called. See\n      the `side_effect` attribute. Useful for raising exceptions or\n      dynamically changing return values. The function is called with the same\n      arguments as the mock, and unless it returns `DEFAULT`, the return\n      value of this function is used as the return value.\n\n      If `side_effect` is an iterable then each call to the mock will return\n      the next value from the iterable. If any of the members of the iterable\n      are exceptions they will be raised instead of returned.\n\n    * `return_value`: The value returned when the mock is called. By default\n      this is a new Mock (created on first access). See the\n      `return_value` attribute.\n\n    * `wraps`: Item for the mock object to wrap. If `wraps` is not None then\n      calling the Mock will pass the call through to the wrapped object\n      (returning the real result). Attribute access on the mock will return a\n      Mock object that wraps the corresponding attribute of the wrapped object\n      (so attempting to access an attribute that doesn't exist will raise an\n      `AttributeError`).\n\n      If the mock has an explicit `return_value` set then calls are not passed\n      to the wrapped object and the `return_value` is returned instead.\n\n    * `name`: If the mock has a name then it will be used in the repr of the\n      mock. This can be useful for debugging. The name is propagated to child\n      mocks.\n\n    Mocks can also be called with arbitrary keyword arguments. These will be\n    used to set attributes on the mock after it is created.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dot_lookup")
(PUNCT "(")
(ID "thing")
(PUNCT ",")
(ID "comp")
(PUNCT ",")
(ID "import_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "thing")
(PUNCT ",")
(ID "comp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "import_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "thing")
(PUNCT ",")
(ID "comp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_importer")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "components")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "import_path")
(PUNCT "=")
(ID "components")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "thing")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(ID "import_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "comp")
(KEYWORD in)
(ID "components")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "import_path")
(PUNCT "+=")
(LIT ".%s")
(PUNCT "%")
(ID "comp")
(NEWLINE)
(ID "thing")
(PUNCT "=")
(ID "_dot_lookup")
(PUNCT "(")
(ID "thing")
(PUNCT ",")
(ID "comp")
(PUNCT ",")
(ID "import_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "thing")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_started")
(PUNCT "(")
(ID "patcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hasattr")
(PUNCT "(")
(ID "patcher")
(PUNCT ",")
(LIT "is_local")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_patch")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attribute_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_active_patches")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "getter")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "create")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "autospec")
(PUNCT ",")
(ID "new_callable")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "new_callable")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "new")
(KEYWORD is)
(KEYWORD not)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Cannot use 'new' and 'new_callable' together")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "autospec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Cannot use 'autospec' and 'new_callable' together")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "getter")
(PUNCT "=")
(ID "getter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT "=")
(ID "attribute")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "new")
(PUNCT "=")
(ID "new")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "new_callable")
(PUNCT "=")
(ID "new_callable")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "create")
(PUNCT "=")
(ID "create")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "has_local")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spec_set")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "autospec")
(PUNCT "=")
(ID "autospec")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "kwargs")
(PUNCT "=")
(ID "kwargs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "additional_patchers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "patcher")
(PUNCT "=")
(ID "_patch")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getter")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "new")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "create")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "spec_set")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "autospec")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "new_callable")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "patcher")
(PUNCT ".")
(ID "attribute_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "attribute_name")
(NEWLINE)
(ID "patcher")
(PUNCT ".")
(ID "additional_patchers")
(PUNCT "=")
(PUNCT "[")
(ID "p")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "additional_patchers")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "patcher")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "decorate_class")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "decorate_callable")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decorate_class")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "attr")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "patch")
(PUNCT ".")
(ID "TEST_PREFIX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "attr_value")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "attr_value")
(PUNCT ",")
(LIT "__call__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "patcher")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "patcher")
(PUNCT "(")
(ID "attr_value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "klass")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decorate_callable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(LIT "patchings")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT ".")
(ID "patchings")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "func")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "wraps")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "patched")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "keywargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "entered_patchers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "exc_info")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "patching")
(KEYWORD in)
(ID "patched")
(PUNCT ".")
(ID "patchings")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "patching")
(PUNCT ".")
(ID "__enter__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "entered_patchers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "patching")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "patching")
(PUNCT ".")
(ID "attribute_name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keywargs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "patching")
(PUNCT ".")
(ID "new")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "args")
(PUNCT "+=")
(ID "tuple")
(PUNCT "(")
(ID "extra_args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "keywargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "patching")
(KEYWORD not)
(KEYWORD in)
(ID "entered_patchers")
(KEYWORD and)
(ID "_is_started")
(PUNCT "(")
(ID "patching")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entered_patchers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "patching")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "exc_info")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "patching")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "entered_patchers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "patching")
(PUNCT ".")
(ID "__exit__")
(PUNCT "(")
(PUNCT "*")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "patched")
(PUNCT ".")
(ID "patchings")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "patched")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_original")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "attribute")
(NEWLINE)
(ID "original")
(PUNCT "=")
(ID "DEFAULT")
(NEWLINE)
(ID "local")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "KeyError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "DEFAULT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "local")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "create")
(KEYWORD and)
(ID "original")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "%s does not have the attribute %r")
(PUNCT "%")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "original")
(PUNCT ",")
(ID "local")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Perform the patch.")
(NEWLINE)
(ID "new")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "new")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "spec_set")
(NEWLINE)
(ID "autospec")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "autospec")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "kwargs")
(NEWLINE)
(ID "new_callable")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "new_callable")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec_set")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "autospec")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "autospec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "autospec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't specify spec and autospec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "autospec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(KEYWORD and)
(ID "spec_set")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(KEYWORD True)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't provide explicit spec_set *and* spec or autospec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "original")
(PUNCT ",")
(ID "local")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_original")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "new")
(KEYWORD is)
(ID "DEFAULT")
(KEYWORD and)
(ID "autospec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inherit")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "original")
(NEWLINE)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec_set")
(PUNCT "=")
(ID "original")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec_set")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "spec_set")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec_set")
(PUNCT "=")
(ID "original")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "spec_set")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "original")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't use 'spec' with create=True")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inherit")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "Klass")
(PUNCT "=")
(ID "MagicMock")
(NEWLINE)
(ID "_kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "new_callable")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Klass")
(PUNCT "=")
(ID "new_callable")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "spec_set")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_spec")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_spec")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_is_list")
(PUNCT "(")
(ID "this_spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "not_callable")
(PUNCT "=")
(LIT "__call__")
(KEYWORD not)
(KEYWORD in)
(ID "this_spec")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "not_callable")
(PUNCT "=")
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "this_spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "not_callable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Klass")
(PUNCT "=")
(ID "NonCallableMagicMock")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "[")
(LIT "spec")
(PUNCT "]")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "[")
(LIT "spec_set")
(PUNCT "]")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "Klass")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "Klass")
(PUNCT ",")
(ID "NonCallableMock")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "attribute")
(NEWLINE)
(DEDENT)
(ID "_kwargs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "Klass")
(PUNCT "(")
(PUNCT "**")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "inherit")
(KEYWORD and)
(ID "_is_instance_mock")
(PUNCT "(")
(ID "new")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_spec")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(KEYWORD if)
(ID "spec_set")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_spec")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "_is_list")
(PUNCT "(")
(ID "this_spec")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "_instance_callable")
(PUNCT "(")
(ID "this_spec")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Klass")
(PUNCT "=")
(ID "NonCallableMagicMock")
(NEWLINE)
(DEDENT)
(ID "_kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "name")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "Klass")
(PUNCT "(")
(ID "_new_parent")
(PUNCT "=")
(ID "new")
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(LIT "()")
(PUNCT ",")
(PUNCT "**")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "autospec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "new")
(KEYWORD is)
(KEYWORD not)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "autospec creates the mock for you. Can't specify ")
(LIT "autospec and new.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "original")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't use 'autospec' with create=True")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "spec_set")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "spec_set")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "autospec")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "autospec")
(PUNCT "=")
(ID "original")
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT "=")
(ID "create_autospec")
(PUNCT "(")
(ID "autospec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(ID "spec_set")
(PUNCT ",")
(ID "_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't pass kwargs to a mock we aren't creating")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "new_attr")
(PUNCT "=")
(ID "new")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "temp_original")
(PUNCT "=")
(ID "original")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "is_local")
(PUNCT "=")
(ID "local")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ",")
(ID "new_attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "attribute_name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_args")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "new")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_args")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "attribute_name")
(PUNCT "]")
(PUNCT "=")
(ID "new")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "patching")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "additional_patchers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "patching")
(PUNCT ".")
(ID "__enter__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "patching")
(PUNCT ".")
(ID "new")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_args")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "extra_args")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "new")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "exc_info")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Undo the patch.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_is_started")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "stop called on unstarted patcher")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_local")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "temp_original")
(KEYWORD is)
(KEYWORD not)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "temp_original")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "create")
(KEYWORD and)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "attribute")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "temp_original")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "temp_original")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "is_local")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "target")
(NEWLINE)
(KEYWORD for)
(ID "patcher")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "additional_patchers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_is_started")
(PUNCT "(")
(ID "patcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "patcher")
(PUNCT ".")
(ID "__exit__")
(PUNCT "(")
(PUNCT "*")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "start")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Activate a patch, returning any created mock.")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__enter__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_active_patches")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop an active patch.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_active_patches")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__exit__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_target")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT ",")
(ID "attribute")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "rsplit")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Need a valid target to patch. You supplied: %r")
(PUNCT "%")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "getter")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "_importer")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "getter")
(PUNCT ",")
(ID "attribute")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_patch_object")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT "=")
(ID "DEFAULT")
(PUNCT ",")
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "create")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "autospec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "new_callable")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    patch the named member (`attribute`) on an object (`target`) with a mock\n    object.\n\n    `patch.object` can be used as a decorator, class decorator or a context\n    manager. Arguments `new`, `spec`, `create`, `spec_set`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. Like\n    `patch`, `patch.object` takes arbitrary keyword arguments for configuring\n    the mock object it creates.\n\n    When used as a class decorator `patch.object` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    ")
(NEWLINE)
(ID "getter")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "target")
(NEWLINE)
(KEYWORD return)
(ID "_patch")
(PUNCT "(")
(ID "getter")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "create")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "autospec")
(PUNCT ",")
(ID "new_callable")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_patch_multiple")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "create")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "autospec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "new_callable")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Perform multiple patches in a single call. It takes the object to be\n    patched (either as an object or a string to fetch the object by importing)\n    and keyword arguments for the patches::\n\n        with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):\n            ...\n\n    Use `DEFAULT` as the value if you want `patch.multiple` to create\n    mocks for you. In this case the created mocks are passed into a decorated\n    function by keyword, and a dictionary is returned when `patch.multiple` is\n    used as a context manager.\n\n    `patch.multiple` can be used as a decorator, class decorator or a context\n    manager. The arguments `spec`, `spec_set`, `create`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. These\n    arguments will be applied to *all* patches done by `patch.multiple`.\n\n    When used as a class decorator `patch.multiple` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(KEYWORD is)
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getter")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "_importer")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getter")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "target")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Must supply at least one keyword argument with patch.multiple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "items")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "kwargs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT "=")
(ID "items")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "patcher")
(PUNCT "=")
(ID "_patch")
(PUNCT "(")
(ID "getter")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "create")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "autospec")
(PUNCT ",")
(ID "new_callable")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "patcher")
(PUNCT ".")
(ID "attribute_name")
(PUNCT "=")
(ID "attribute")
(NEWLINE)
(KEYWORD for)
(ID "attribute")
(PUNCT ",")
(ID "new")
(KEYWORD in)
(ID "items")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_patcher")
(PUNCT "=")
(ID "_patch")
(PUNCT "(")
(ID "getter")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "create")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "autospec")
(PUNCT ",")
(ID "new_callable")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "this_patcher")
(PUNCT ".")
(ID "attribute_name")
(PUNCT "=")
(ID "attribute")
(NEWLINE)
(ID "patcher")
(PUNCT ".")
(ID "additional_patchers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "this_patcher")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "patcher")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "patch")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "new")
(PUNCT "=")
(ID "DEFAULT")
(PUNCT ",")
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "create")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "autospec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "new_callable")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    `patch` acts as a function decorator, class decorator or a context\n    manager. Inside the body of the function or with statement, the `target`\n    is patched with a `new` object. When the function/with statement exits\n    the patch is undone.\n\n    If `new` is omitted, then the target is replaced with a\n    `MagicMock`. If `patch` is used as a decorator and `new` is\n    omitted, the created mock is passed in as an extra argument to the\n    decorated function. If `patch` is used as a context manager the created\n    mock is returned by the context manager.\n\n    `target` should be a string in the form `'package.module.ClassName'`. The\n    `target` is imported and the specified object replaced with the `new`\n    object, so the `target` must be importable from the environment you are\n    calling `patch` from. The target is imported when the decorated function\n    is executed, not at decoration time.\n\n    The `spec` and `spec_set` keyword arguments are passed to the `MagicMock`\n    if patch is creating one for you.\n\n    In addition you can pass `spec=True` or `spec_set=True`, which causes\n    patch to pass in the object being mocked as the spec/spec_set object.\n\n    `new_callable` allows you to specify a different class, or callable object,\n    that will be called to create the `new` object. By default `MagicMock` is\n    used.\n\n    A more powerful form of `spec` is `autospec`. If you set `autospec=True`\n    then the mock with be created with a spec from the object being replaced.\n    All attributes of the mock will also have the spec of the corresponding\n    attribute of the object being replaced. Methods and functions being\n    mocked will have their arguments checked and will raise a `TypeError` if\n    they are called with the wrong signature. For mocks replacing a class,\n    their return value (the 'instance') will have the same spec as the class.\n\n    Instead of `autospec=True` you can pass `autospec=some_object` to use an\n    arbitrary object as the spec instead of the one being replaced.\n\n    By default `patch` will fail to replace attributes that don't exist. If\n    you pass in `create=True`, and the attribute doesn't exist, patch will\n    create the attribute for you when the patched function is called, and\n    delete it again afterwards. This is useful for writing tests against\n    attributes that your production code creates at runtime. It is off by\n    default because it can be dangerous. With it switched on you can write\n    passing tests against APIs that don't actually exist!\n\n    Patch can be used as a `TestCase` class decorator. It works by\n    decorating each test method in the class. This reduces the boilerplate\n    code when your test methods share a common patchings set. `patch` finds\n    tests by looking for method names that start with `patch.TEST_PREFIX`.\n    By default this is `test`, which matches the way `unittest` finds tests.\n    You can specify an alternative prefix by setting `patch.TEST_PREFIX`.\n\n    Patch can be used as a context manager, with the with statement. Here the\n    patching applies to the indented block after the with statement. If you\n    use \"as\" then the patched object will be bound to the name after the\n    \"as\"; very useful if `patch` is creating a mock object for you.\n\n    `patch` takes arbitrary keyword arguments. These will be passed to\n    the `Mock` (or `new_callable`) on construction.\n\n    `patch.dict(...)`, `patch.multiple(...)` and `patch.object(...)` are\n    available for alternate use-cases.\n    ")
(NEWLINE)
(ID "getter")
(PUNCT ",")
(ID "attribute")
(PUNCT "=")
(ID "_get_target")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_patch")
(PUNCT "(")
(ID "getter")
(PUNCT ",")
(ID "attribute")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "create")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "autospec")
(PUNCT ",")
(ID "new_callable")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_patch_dict")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Patch a dictionary, or dictionary like object, and restore the dictionary\n    to its original state after the test.\n\n    `in_dict` can be a dictionary or a mapping like container. If it is a\n    mapping then it must at least support getting, setting and deleting items\n    plus iterating over keys.\n\n    `in_dict` can also be a string specifying the name of the dictionary, which\n    will then be fetched by importing it.\n\n    `values` can be a dictionary of values to set in the dictionary. `values`\n    can also be an iterable of `(key, value)` pairs.\n\n    If `clear` is True then the dictionary will be cleared before the new\n    values are set.\n\n    `patch.dict` can also be called with arbitrary keyword arguments to set\n    values in the dictionary::\n\n        with patch.dict('sys.modules', mymodule=Mock(), other_module=Mock()):\n            ...\n\n    `patch.dict` can be used as a context manager, decorator or class\n    decorator. When used as a class decorator `patch.dict` honours\n    `patch.TEST_PREFIX` for choosing which methods to wrap.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "in_dict")
(PUNCT ",")
(ID "values")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "clear")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "in_dict")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT "=")
(ID "_importer")
(PUNCT "(")
(ID "in_dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "in_dict")
(PUNCT "=")
(ID "in_dict")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "values")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "values")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "values")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT "=")
(ID "clear")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_original")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "decorate_class")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "wraps")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_inner")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_patch_dict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "f")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_unpatch_dict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_inner")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decorate_class")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attr_value")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "attr")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "patch")
(PUNCT ".")
(ID "TEST_PREFIX")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "attr_value")
(PUNCT ",")
(LIT "__call__")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "decorator")
(PUNCT "=")
(ID "_patch_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "in_dict")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "values")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT ")")
(NEWLINE)
(ID "decorated")
(PUNCT "=")
(ID "decorator")
(PUNCT "(")
(ID "attr_value")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "decorated")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "klass")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Patch the dict.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_patch_dict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_patch_dict")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "values")
(NEWLINE)
(ID "in_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "in_dict")
(NEWLINE)
(ID "clear")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "clear")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original")
(PUNCT "=")
(ID "in_dict")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "in_dict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "in_dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_original")
(PUNCT "=")
(ID "original")
(NEWLINE)
(KEYWORD if)
(ID "clear")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_clear_dict")
(PUNCT "(")
(ID "in_dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "values")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "values")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_unpatch_dict")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "in_dict")
(NEWLINE)
(ID "original")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_original")
(NEWLINE)
(ID "_clear_dict")
(PUNCT "(")
(ID "in_dict")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "original")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "original")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "original")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unpatch the dict.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_unpatch_dict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "start")
(PUNCT "=")
(ID "__enter__")
(NEWLINE)
(ID "stop")
(PUNCT "=")
(ID "__exit__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_clear_dict")
(PUNCT "(")
(ID "in_dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "in_dict")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keys")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "in_dict")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "in_dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_patch_stopall")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop all active patches. LIFO to unroll nested patches.")
(NEWLINE)
(KEYWORD for)
(ID "patch")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "_patch")
(PUNCT ".")
(ID "_active_patches")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "patch")
(PUNCT ".")
(ID "stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "patch")
(PUNCT ".")
(ID "object")
(PUNCT "=")
(ID "_patch_object")
(NEWLINE)
(ID "patch")
(PUNCT ".")
(ID "dict")
(PUNCT "=")
(ID "_patch_dict")
(NEWLINE)
(ID "patch")
(PUNCT ".")
(ID "multiple")
(PUNCT "=")
(ID "_patch_multiple")
(NEWLINE)
(ID "patch")
(PUNCT ".")
(ID "stopall")
(PUNCT "=")
(ID "_patch_stopall")
(NEWLINE)
(ID "patch")
(PUNCT ".")
(ID "TEST_PREFIX")
(PUNCT "=")
(LIT "test")
(NEWLINE)
(ID "magic_methods")
(PUNCT "=")
(PUNCT "(")
(LIT "lt le gt ge eq ne ")
(LIT "getitem setitem delitem ")
(LIT "len contains iter ")
(LIT "hash str sizeof ")
(LIT "enter exit ")
(LIT "divmod neg pos abs invert ")
(LIT "complex int float index ")
(LIT "trunc floor ceil ")
(LIT "bool next ")
(PUNCT ")")
(NEWLINE)
(ID "numerics")
(PUNCT "=")
(PUNCT "(")
(LIT "add sub mul div floordiv mod lshift rshift and xor or pow truediv")
(PUNCT ")")
(NEWLINE)
(ID "inplace")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(LIT "i%s")
(PUNCT "%")
(ID "n")
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "numerics")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(LIT "r%s")
(PUNCT "%")
(ID "n")
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "numerics")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_non_defaults")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(LIT "__%s__")
(PUNCT "%")
(ID "method")
(KEYWORD for)
(ID "method")
(KEYWORD in)
(PUNCT "[")
(LIT "get")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(LIT "reversed")
(PUNCT ",")
(LIT "missing")
(PUNCT ",")
(LIT "reduce")
(PUNCT ",")
(LIT "reduce_ex")
(PUNCT ",")
(LIT "getinitargs")
(PUNCT ",")
(LIT "getnewargs")
(PUNCT ",")
(LIT "getstate")
(PUNCT ",")
(LIT "setstate")
(PUNCT ",")
(LIT "getformat")
(PUNCT ",")
(LIT "setformat")
(PUNCT ",")
(LIT "repr")
(PUNCT ",")
(LIT "dir")
(PUNCT ",")
(LIT "subclasses")
(PUNCT ",")
(LIT "format")
(PUNCT ",")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_get_method")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turns a callable object (like a mock) into a real function")
(NEWLINE)
(KEYWORD def)
(ID "method")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "method")
(PUNCT ".")
(ID "__name__")
(PUNCT "=")
(ID "name")
(NEWLINE)
(KEYWORD return)
(ID "method")
(NEWLINE)
(DEDENT)
(ID "_magics")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(LIT "__%s__")
(PUNCT "%")
(ID "method")
(KEYWORD for)
(ID "method")
(KEYWORD in)
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "magic_methods")
(PUNCT ",")
(ID "numerics")
(PUNCT ",")
(ID "inplace")
(PUNCT ",")
(ID "right")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_all_magics")
(PUNCT "=")
(ID "_magics")
(PUNCT "|")
(ID "_non_defaults")
(NEWLINE)
(ID "_unsupported_magics")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(LIT "__getattr__")
(PUNCT ",")
(LIT "__setattr__")
(PUNCT ",")
(LIT "__init__")
(PUNCT ",")
(LIT "__new__")
(PUNCT ",")
(LIT "__prepare__")
(LIT "__instancecheck__")
(PUNCT ",")
(LIT "__subclasscheck__")
(PUNCT ",")
(LIT "__del__")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_calculate_return_value")
(PUNCT "=")
(PUNCT "{")
(LIT "__hash__")
(PUNCT ":")
(KEYWORD lambda)
(ID "self")
(PUNCT ":")
(ID "object")
(PUNCT ".")
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(LIT "__str__")
(PUNCT ":")
(KEYWORD lambda)
(ID "self")
(PUNCT ":")
(ID "object")
(PUNCT ".")
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(LIT "__sizeof__")
(PUNCT ":")
(KEYWORD lambda)
(ID "self")
(PUNCT ":")
(ID "object")
(PUNCT ".")
(ID "__sizeof__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_return_values")
(PUNCT "=")
(PUNCT "{")
(LIT "__lt__")
(PUNCT ":")
(ID "NotImplemented")
(PUNCT ",")
(LIT "__gt__")
(PUNCT ":")
(ID "NotImplemented")
(PUNCT ",")
(LIT "__le__")
(PUNCT ":")
(ID "NotImplemented")
(PUNCT ",")
(LIT "__ge__")
(PUNCT ":")
(ID "NotImplemented")
(PUNCT ",")
(LIT "__int__")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "__contains__")
(PUNCT ":")
(KEYWORD False)
(PUNCT ",")
(LIT "__len__")
(PUNCT ":")
(LIT 0)
(PUNCT ",")
(LIT "__exit__")
(PUNCT ":")
(KEYWORD False)
(PUNCT ",")
(LIT "__complex__")
(PUNCT ":")
(LIT 0+1i)
(PUNCT ",")
(LIT "__float__")
(PUNCT ":")
(LIT 1.0)
(PUNCT ",")
(LIT "__bool__")
(PUNCT ":")
(KEYWORD True)
(PUNCT ",")
(LIT "__index__")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_get_eq")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret_val")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT ".")
(ID "_mock_return_value")
(NEWLINE)
(KEYWORD if)
(ID "ret_val")
(KEYWORD is)
(KEYWORD not)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ret_val")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(KEYWORD is)
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "__eq__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_ne")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__ne__")
(PUNCT ".")
(ID "_mock_return_value")
(KEYWORD is)
(KEYWORD not)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "DEFAULT")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(KEYWORD is)
(KEYWORD not)
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "__ne__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_iter")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret_val")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__iter__")
(PUNCT ".")
(ID "_mock_return_value")
(NEWLINE)
(KEYWORD if)
(ID "ret_val")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "ret_val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "__iter__")
(NEWLINE)
(DEDENT)
(ID "_side_effect_methods")
(PUNCT "=")
(PUNCT "{")
(LIT "__eq__")
(PUNCT ":")
(ID "_get_eq")
(PUNCT ",")
(LIT "__ne__")
(PUNCT ":")
(ID "_get_ne")
(PUNCT ",")
(LIT "__iter__")
(PUNCT ":")
(ID "_get_iter")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_set_return_value")
(PUNCT "(")
(ID "mock")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fixed")
(PUNCT "=")
(ID "_return_values")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "DEFAULT")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fixed")
(KEYWORD is)
(KEYWORD not)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "fixed")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "return_calulator")
(PUNCT "=")
(ID "_calculate_return_value")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "return_calulator")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "return_value")
(PUNCT "=")
(ID "return_calulator")
(PUNCT "(")
(ID "mock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "return_value")
(PUNCT "=")
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "method")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "return_value")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "side_effector")
(PUNCT "=")
(ID "_side_effect_methods")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "side_effector")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "side_effector")
(PUNCT "(")
(ID "mock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MagicMixin")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_safe_super")
(PUNCT "(")
(ID "MagicMixin")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_set_magics")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mock_set_magics")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "these_magics")
(PUNCT "=")
(ID "_magics")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "these_magics")
(PUNCT "=")
(ID "_magics")
(PUNCT ".")
(ID "intersection")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_mock_methods")
(PUNCT ")")
(NEWLINE)
(ID "remove_magics")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "remove_magics")
(PUNCT "=")
(ID "_magics")
(PUNCT "-")
(ID "these_magics")
(NEWLINE)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "remove_magics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "entry")
(KEYWORD in)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "these_magics")
(PUNCT "=")
(ID "these_magics")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(ID "_type")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "these_magics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "_type")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "MagicProxy")
(PUNCT "(")
(ID "entry")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NonCallableMagicMock")
(PUNCT "(")
(ID "MagicMixin")
(PUNCT ",")
(ID "NonCallableMock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A version of `MagicMock` that isn't callable.")
(NEWLINE)
(KEYWORD def)
(ID "mock_add_spec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_add_spec")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_set_magics")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MagicMock")
(PUNCT "(")
(ID "MagicMixin")
(PUNCT ",")
(ID "Mock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    MagicMock is a subclass of Mock with default implementations\n    of most of the magic methods. You can use MagicMock without having to\n    configure the magic methods yourself.\n\n    If you use the `spec` or `spec_set` arguments then *only* magic\n    methods that exist in the spec will be created.\n\n    Attributes and the return value of a `MagicMock` will also be `MagicMocks`.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "mock_add_spec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_add_spec")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mock_set_magics")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MagicProxy")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "create_mock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "m")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_mock")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entry")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "parent")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "parent")
(PUNCT ".")
(ID "_get_child_mock")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(ID "entry")
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(ID "entry")
(PUNCT ",")
(ID "_new_parent")
(PUNCT "=")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "m")
(PUNCT ")")
(NEWLINE)
(ID "_set_return_value")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "m")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "m")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__get__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "_type")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "create_mock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ANY")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A helper object that compares equal to everything.")
(NEWLINE)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<ANY>")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ANY")
(PUNCT "=")
(ID "_ANY")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_format_call_signature")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "%s(%%s)")
(PUNCT "%")
(ID "name")
(NEWLINE)
(ID "formatted_args")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "args_string")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "repr")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "kwargs_string")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(LIT "%s=%r")
(PUNCT "%")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "kwargs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "args_string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted_args")
(PUNCT "=")
(ID "args_string")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kwargs_string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "formatted_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted_args")
(PUNCT "+=")
(LIT ", ")
(NEWLINE)
(DEDENT)
(ID "formatted_args")
(PUNCT "+=")
(ID "kwargs_string")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "message")
(PUNCT "%")
(ID "formatted_args")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Call")
(PUNCT "(")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A tuple for holding the results of a call to a mock, either in the form\n    `(args, kwargs)` or `(name, args, kwargs)`.\n\n    If args or kwargs are empty then a call tuple will compare equal to\n    a tuple without those values. This makes comparisons less verbose::\n\n        _Call(('name', (), {})) == ('name',)\n        _Call(('name', (1,), {})) == ('name', (1,))\n        _Call(((), {'a': 'b'})) == ({'a': 'b'},)\n\n    The `_Call` object provides a useful shortcut for comparing with call::\n\n        _Call(((1, 2), {'a': 3})) == call(1, 2, a=3)\n        _Call(('foo', (1, 2), {'a': 3})) == call.foo(1, 2, a=3)\n\n    If the _Call has no name then it will match any name.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "two")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "from_kall")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_len")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_len")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_len")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT "=")
(ID "value")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "first")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "second")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "second")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "=")
(ID "second")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "first")
(PUNCT ",")
(ID "second")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "_len")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT ",")
(PUNCT "=")
(ID "value")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "two")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "two")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "from_kall")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "from_kall")
(PUNCT "=")
(ID "from_kall")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "other")
(KEYWORD is)
(ID "ANY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len_other")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self_name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self_args")
(PUNCT ",")
(ID "self_kwargs")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self_name")
(PUNCT ",")
(ID "self_args")
(PUNCT ",")
(ID "self_kwargs")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(ID "other_name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "len_other")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len_other")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_name")
(PUNCT ",")
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT "=")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len_other")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT ",")
(PUNCT "=")
(ID "other")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_args")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "other_kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_name")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "other_kwargs")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT "=")
(ID "other")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_name")
(PUNCT "=")
(ID "first")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "second")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT "=")
(ID "second")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "second")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT "=")
(ID "first")
(PUNCT ",")
(ID "second")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self_name")
(KEYWORD and)
(ID "other_name")
(PUNCT "!=")
(ID "self_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "other_args")
(PUNCT ",")
(ID "other_kwargs")
(PUNCT ")")
(PUNCT "==")
(PUNCT "(")
(ID "self_args")
(PUNCT ",")
(ID "self_kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_Call")
(PUNCT "(")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "+")
(LIT "()")
(NEWLINE)
(KEYWORD return)
(ID "_Call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_Call")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(ID "attr")
(PUNCT ",")
(ID "from_kall")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_Call")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "from_kall")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "from_kall")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(KEYWORD or)
(LIT "call")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "()")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "call%s")
(PUNCT "%")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "call")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "call")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "()")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "call.%s")
(PUNCT "%")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "call%s")
(PUNCT "%")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_format_call_signature")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "For a call object that represents multiple calls, `call_list`\n        returns a list of all the intermediate calls as well as the\n        final call.")
(NEWLINE)
(ID "vals")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "thing")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD while)
(ID "thing")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "thing")
(PUNCT ".")
(ID "from_kall")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vals")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "thing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "thing")
(PUNCT "=")
(ID "thing")
(PUNCT ".")
(ID "parent")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_CallList")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "vals")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "call")
(PUNCT "=")
(ID "_Call")
(PUNCT "(")
(ID "from_kall")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "create_autospec")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "instance")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "_parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a mock object using another object as a spec. Attributes on the\n    mock will use the corresponding attribute on the `spec` object as their\n    spec.\n\n    Functions or methods being mocked will have their arguments checked\n    to check that they are called with the correct signature.\n\n    If `spec_set` is True then attempting to set attributes that don't exist\n    on the spec object will raise an `AttributeError`.\n\n    If a class is used as a spec then the return value of the mock (the\n    instance of the class) will have the same spec. You can use a class as the\n    spec for an instance object by passing `instance=True`. The returned mock\n    will only be callable if instances of the mock are callable.\n\n    `create_autospec` also takes arbitrary keyword arguments that are passed to\n    the constructor of the created mock.")
(NEWLINE)
(KEYWORD if)
(ID "_is_list")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "is_type")
(PUNCT "=")
(ID "isinstance")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(ID "_kwargs")
(PUNCT "=")
(PUNCT "{")
(LIT "spec")
(PUNCT ":")
(ID "spec")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "spec_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "=")
(PUNCT "{")
(LIT "spec_set")
(PUNCT ":")
(ID "spec")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_kwargs")
(KEYWORD and)
(ID "instance")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "[")
(LIT "_spec_as_instance")
(PUNCT "]")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "_kwargs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "Klass")
(PUNCT "=")
(ID "MagicMock")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(KEYWORD in)
(ID "DescriptorTypes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "_callable")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Klass")
(PUNCT "=")
(ID "NonCallableMagicMock")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "is_type")
(KEYWORD and)
(ID "instance")
(KEYWORD and)
(KEYWORD not)
(ID "_instance_callable")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Klass")
(PUNCT "=")
(ID "NonCallableMagicMock")
(NEWLINE)
(DEDENT)
(ID "_name")
(PUNCT "=")
(ID "_kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(ID "_name")
(PUNCT ")")
(NEWLINE)
(ID "_new_name")
(PUNCT "=")
(ID "_name")
(NEWLINE)
(KEYWORD if)
(ID "_parent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_new_name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "mock")
(PUNCT "=")
(ID "Klass")
(PUNCT "(")
(ID "parent")
(PUNCT "=")
(ID "_parent")
(PUNCT ",")
(ID "_new_parent")
(PUNCT "=")
(ID "_parent")
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(ID "_new_name")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "_name")
(PUNCT ",")
(PUNCT "**")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "FunctionTypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mock")
(PUNCT "=")
(ID "_set_signature")
(PUNCT "(")
(ID "mock")
(PUNCT ",")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_check_signature")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "mock")
(PUNCT ",")
(ID "is_type")
(PUNCT ",")
(ID "instance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "instance")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_parent")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "_name")
(PUNCT "]")
(PUNCT "=")
(ID "mock")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "is_type")
(KEYWORD and)
(KEYWORD not)
(ID "instance")
(KEYWORD and)
(LIT "return_value")
(KEYWORD not)
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mock")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "create_autospec")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "instance")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "_name")
(PUNCT "=")
(LIT "()")
(PUNCT ",")
(ID "_parent")
(PUNCT "=")
(ID "mock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_is_magic")
(PUNCT "(")
(ID "entry")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "kwargs")
(PUNCT "=")
(PUNCT "{")
(LIT "spec")
(PUNCT ":")
(ID "original")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "spec_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "=")
(PUNCT "{")
(LIT "spec_set")
(PUNCT ":")
(ID "original")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "FunctionTypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "_SpecState")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "spec_set")
(PUNCT ",")
(ID "mock")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "instance")
(PUNCT ")")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "entry")
(PUNCT "]")
(PUNCT "=")
(ID "new")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "mock")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "FunctionTypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "mock")
(PUNCT ".")
(ID "mock")
(NEWLINE)
(DEDENT)
(ID "skipfirst")
(PUNCT "=")
(ID "_must_skip")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "is_type")
(PUNCT ")")
(NEWLINE)
(ID "kwargs")
(PUNCT "[")
(LIT "_eat_self")
(PUNCT "]")
(PUNCT "=")
(ID "skipfirst")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "MagicMock")
(PUNCT "(")
(ID "parent")
(PUNCT "=")
(ID "parent")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "entry")
(PUNCT ",")
(ID "_new_name")
(PUNCT "=")
(ID "entry")
(PUNCT ",")
(ID "_new_parent")
(PUNCT "=")
(ID "parent")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "_mock_children")
(PUNCT "[")
(ID "entry")
(PUNCT "]")
(PUNCT "=")
(ID "new")
(NEWLINE)
(ID "_check_signature")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "skipfirst")
(PUNCT "=")
(ID "skipfirst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "new")
(PUNCT ",")
(ID "FunctionTypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "mock")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "new")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "mock")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_must_skip")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "is_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Return whether we should skip the first argument on spec's `entry`\n    attribute.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "entry")
(KEYWORD in)
(ID "getattr")
(PUNCT "(")
(ID "spec")
(PUNCT ",")
(LIT "__dict__")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "klass")
(KEYWORD in)
(ID "spec")
(PUNCT ".")
(ID "__mro__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "klass")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "entry")
(PUNCT ",")
(ID "DEFAULT")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(ID "DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(PUNCT "(")
(ID "staticmethod")
(PUNCT ",")
(ID "classmethod")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "__get__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(ID "MethodWrapperTypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "is_type")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "is_type")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_class")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_SpecState")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "spec_set")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ids")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "instance")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ids")
(PUNCT "=")
(ID "ids")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spec_set")
(PUNCT "=")
(ID "spec_set")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT "=")
(ID "instance")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "FunctionTypes")
(PUNCT "=")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "create_autospec")
(PUNCT ")")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "ANY")
(PUNCT ".")
(ID "__eq__")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "MethodWrapperTypes")
(PUNCT "=")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "ANY")
(PUNCT ".")
(ID "__eq__")
(PUNCT ".")
(ID "__get__")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "file_spec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_iterate_read_data")
(PUNCT "(")
(ID "read_data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data_as_list")
(PUNCT "=")
(PUNCT "[")
(LIT "{}\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(KEYWORD for)
(ID "l")
(KEYWORD in)
(ID "read_data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "data_as_list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data_as_list")
(PUNCT "=")
(ID "data_as_list")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data_as_list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "data_as_list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "data_as_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "line")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "mock_open")
(PUNCT "(")
(ID "mock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "read_data")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A helper function to create a mock to replace the use of `open`. It works\n    for `open` called directly or used as a context manager.\n\n    The `mock` argument is the mock object to configure. If `None` (the\n    default) then a `MagicMock` will be created for you, with the API limited\n    to methods or attributes available on standard file handles.\n\n    `read_data` is a string for the `read` methoddline`, and `readlines` of the\n    file handle to return.  This is an empty string by default.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "_readlines_side_effect")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "readlines")
(PUNCT ".")
(ID "return_value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "handle")
(PUNCT ".")
(ID "readlines")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "_data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_side_effect")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "read")
(PUNCT ".")
(ID "return_value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "handle")
(PUNCT ".")
(ID "read")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_readline_side_effect")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "readline")
(PUNCT ".")
(ID "return_value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "handle")
(PUNCT ".")
(ID "readline")
(PUNCT ".")
(ID "return_value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "_data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "line")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD global)
(ID "file_spec")
(NEWLINE)
(KEYWORD if)
(ID "file_spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_io")
(NEWLINE)
(ID "file_spec")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "dir")
(PUNCT "(")
(ID "_io")
(PUNCT ".")
(ID "TextIOWrapper")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "union")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "dir")
(PUNCT "(")
(ID "_io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mock")
(PUNCT "=")
(ID "MagicMock")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(LIT "open")
(PUNCT ",")
(ID "spec")
(PUNCT "=")
(ID "open")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "handle")
(PUNCT "=")
(ID "MagicMock")
(PUNCT "(")
(ID "spec")
(PUNCT "=")
(ID "file_spec")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "__enter__")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "handle")
(NEWLINE)
(ID "_data")
(PUNCT "=")
(ID "_iterate_read_data")
(PUNCT "(")
(ID "read_data")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "write")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "read")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "readline")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "readlines")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "read")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "_read_side_effect")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "readline")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "_readline_side_effect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "readlines")
(PUNCT ".")
(ID "side_effect")
(PUNCT "=")
(ID "_readlines_side_effect")
(NEWLINE)
(ID "mock")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(ID "handle")
(NEWLINE)
(KEYWORD return)
(ID "mock")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "PropertyMock")
(PUNCT "(")
(ID "Mock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A mock intended to be used as a property, or other descriptor, on a class.\n    `PropertyMock` provides `__get__` and `__set__` methods so you can specify\n    a return value when it is fetched.\n\n    Fetching a `PropertyMock` instance from an object calls the mock, with\n    no args. Setting it calls the mock with the value being set.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "_get_child_mock")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "MagicMock")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__get__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "obj_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__set__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
