(LIT "program/module to trace Python program or function execution\n\nSample use, command line:\n  trace.py -c -f counts --ignore-dir '$prefix' spam.py eggs\n  trace.py -t --ignore-dir '$prefix' spam.py eggs\n  trace.py --trackcalls spam.py eggs\n\nSample use, programmatically\n  import sys\n\n  # create a Trace object, telling it what to ignore, and whether to\n  # do tracing or line-counting or both.\n  tracer = trace.Trace(ignoredirs=[sys.base_prefix, sys.base_exec_prefix,],\n                       trace=0, count=1)\n  # run the new command using the given tracer\n  tracer.run('main()')\n  # make a report, placing output in /tmp\n  r = tracer.results()\n  r.write_results(show_missing=True, coverdir=\"/tmp\")\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Trace")
(PUNCT ",")
(LIT "CoverageResults")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "linecache")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD import)
(ID "tokenize")
(NEWLINE)
(KEYWORD import)
(ID "inspect")
(NEWLINE)
(KEYWORD import)
(ID "gc")
(NEWLINE)
(KEYWORD import)
(ID "dis")
(NEWLINE)
(KEYWORD import)
(ID "pickle")
(NEWLINE)
(KEYWORD from)
(ID "warnings")
(KEYWORD import)
(ID "warn")
(KEYWORD as)
(ID "_warn")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "time")
(KEYWORD import)
(ID "monotonic")
(KEYWORD as)
(ID "_time")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "time")
(KEYWORD import)
(ID "time")
(KEYWORD as)
(ID "_time")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_settrace")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "settrace")
(NEWLINE)
(KEYWORD def)
(ID "_unsettrace")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_settrace")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "threading")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_unsettrace")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "threading")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_usage")
(PUNCT "(")
(ID "outfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Usage: %s [OPTIONS] <file> [ARGS]\n\nMeta-options:\n--help                Display this help then exit.\n--version             Output version information then exit.\n\nOtherwise, exactly one of the following three options must be given:\n-t, --trace           Print each line to sys.stdout before it is executed.\n-c, --count           Count the number of times each line is executed\n                      and write the counts to <module>.cover for each\n                      module executed, in the module's directory.\n                      See also `--coverdir', `--file', `--no-report' below.\n-l, --listfuncs       Keep track of which functions are executed at least\n                      once and write the results to sys.stdout after the\n                      program exits.\n-T, --trackcalls      Keep track of caller/called pairs and write the\n                      results to sys.stdout after the program exits.\n-r, --report          Generate a report from a counts file; do not execute\n                      any code.  `--file' must specify the results file to\n                      read, which must have been created in a previous run\n                      with `--count --file=FILE'.\n\nModifiers:\n-f, --file=<file>     File to accumulate counts over several runs.\n-R, --no-report       Do not generate the coverage report files.\n                      Useful if you want to accumulate over several runs.\n-C, --coverdir=<dir>  Directory where the report files.  The coverage\n                      report for <package>.<module> is written to file\n                      <dir>/<package>/<module>.cover.\n-m, --missing         Annotate executable lines that were not executed\n                      with '>>>>>> '.\n-s, --summary         Write a brief summary on stdout for each file.\n                      (Can only be used with --count or --report.)\n-g, --timing          Prefix each line with the time since the program started.\n                      Only used while tracing.\n\nFilters, may be repeated multiple times:\n--ignore-module=<mod> Ignore the given module(s) and its submodules\n                      (if it is a package).  Accepts comma separated\n                      list of module names\n--ignore-dir=<dir>    Ignore files in the given directory (multiple\n                      directories can be joined by os.pathsep).\n")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "PRAGMA_NOCOVER")
(PUNCT "=")
(LIT "#pragma NO COVER")
(NEWLINE)
(ID "rx_blank")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\s*(#.*)?$")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_Ignore")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "modules")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mods")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(ID "modules")
(KEYWORD else)
(ID "set")
(PUNCT "(")
(ID "modules")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dirs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(KEYWORD if)
(KEYWORD not)
(ID "dirs")
(KEYWORD else)
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "dirs")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "=")
(PUNCT "{")
(LIT "<string>")
(PUNCT ":")
(LIT 1)
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "names")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "modulename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "modulename")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "modulename")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mods")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "mod")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mods")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "modulename")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "mod")
(PUNCT "+")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "d")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_ignore")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_modname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a plausible module name for the patch.")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "filename")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_fullmodname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a plausible module name for the path.")
(NEWLINE)
(ID "comparepath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normcase")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "longest")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normcase")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "comparepath")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(KEYWORD and)
(ID "comparepath")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT "]")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ">")
(ID "len")
(PUNCT "(")
(ID "longest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "longest")
(PUNCT "=")
(ID "dir")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "longest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "longest")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "path")
(NEWLINE)
(DEDENT)
(ID "drive")
(PUNCT ",")
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "base")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "altsep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "base")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "altsep")
(PUNCT ",")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "filename")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CoverageResults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "counts")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "calledfuncs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "infile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "callers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "outfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT "=")
(ID "counts")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "counts")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "counter")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(PUNCT "=")
(ID "calledfuncs")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT "=")
(ID "callers")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "callers")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT "=")
(ID "infile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "outfile")
(PUNCT "=")
(ID "outfile")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts")
(PUNCT ",")
(ID "calledfuncs")
(PUNCT ",")
(ID "callers")
(PUNCT "=")
(ID "pickle")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "counts")
(PUNCT ",")
(ID "calledfuncs")
(PUNCT ",")
(ID "callers")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT "Skipping counts file %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_ignored_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the filename does not refer to a file\n        we want to have reported.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "filename")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "<")
(PUNCT ")")
(KEYWORD and)
(ID "filename")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ">")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Merge in the data from another CoverageResults")
(NEWLINE)
(ID "counts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "counts")
(NEWLINE)
(ID "calledfuncs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(NEWLINE)
(ID "callers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "callers")
(NEWLINE)
(ID "other_counts")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "counts")
(NEWLINE)
(ID "other_calledfuncs")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "calledfuncs")
(NEWLINE)
(ID "other_callers")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "callers")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "other_counts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "counts")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(ID "other_counts")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "other_calledfuncs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "calledfuncs")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "other_callers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callers")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write_results")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "show_missing")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "summary")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "coverdir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        @param coverdir\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "functions called:")
(PUNCT ")")
(NEWLINE)
(ID "calls")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(PUNCT ",")
(ID "modulename")
(PUNCT ",")
(ID "funcname")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "calls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT "filename: %s, modulename: %s, funcname: %s")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "modulename")
(PUNCT ",")
(ID "funcname")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "calling relationships:")
(PUNCT ")")
(NEWLINE)
(ID "lastfile")
(PUNCT "=")
(ID "lastcfile")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(PUNCT "(")
(ID "pfile")
(PUNCT ",")
(ID "pmod")
(PUNCT ",")
(ID "pfunc")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "cfile")
(PUNCT ",")
(ID "cmod")
(PUNCT ",")
(ID "cfunc")
(PUNCT ")")
(PUNCT ")")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pfile")
(PUNCT "!=")
(ID "lastfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "***")
(PUNCT ",")
(ID "pfile")
(PUNCT ",")
(LIT "***")
(PUNCT ")")
(NEWLINE)
(ID "lastfile")
(PUNCT "=")
(ID "pfile")
(NEWLINE)
(ID "lastcfile")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cfile")
(PUNCT "!=")
(ID "pfile")
(KEYWORD and)
(ID "lastcfile")
(PUNCT "!=")
(ID "cfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "  -->")
(PUNCT ",")
(ID "cfile")
(PUNCT ")")
(NEWLINE)
(ID "lastcfile")
(PUNCT "=")
(ID "cfile")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "    %s.%s -> %s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "pmod")
(PUNCT ",")
(ID "pfunc")
(PUNCT ",")
(ID "cmod")
(PUNCT ",")
(ID "cfunc")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "per_file")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(PUNCT ",")
(ID "lineno")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines_hit")
(PUNCT "=")
(ID "per_file")
(PUNCT "[")
(ID "filename")
(PUNCT "]")
(PUNCT "=")
(ID "per_file")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "lines_hit")
(PUNCT "[")
(ID "lineno")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT "[")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "sums")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "per_file")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_ignored_filename")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "filename")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT ".pyc")
(PUNCT ",")
(LIT ".pyo")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "coverdir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "modulename")
(PUNCT "=")
(ID "_modname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "coverdir")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "modulename")
(PUNCT "=")
(ID "_fullmodname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "show_missing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lnotab")
(PUNCT "=")
(ID "_find_executable_linenos")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lnotab")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "source")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "getlines")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "coverpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "modulename")
(PUNCT "+")
(LIT ".cover")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "detect_encoding")
(PUNCT "(")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "n_hits")
(PUNCT ",")
(ID "n_lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write_results_file")
(PUNCT "(")
(ID "coverpath")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "lnotab")
(PUNCT ",")
(ID "count")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "summary")
(KEYWORD and)
(ID "n_lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "percent")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(LIT 100)
(PUNCT "*")
(ID "n_hits")
(PUNCT "/")
(ID "n_lines")
(PUNCT ")")
(NEWLINE)
(ID "sums")
(PUNCT "[")
(ID "modulename")
(PUNCT "]")
(PUNCT "=")
(ID "n_lines")
(PUNCT ",")
(ID "percent")
(PUNCT ",")
(ID "modulename")
(PUNCT ",")
(ID "filename")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "summary")
(KEYWORD and)
(ID "sums")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "lines   cov%   module   (path)")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "m")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "sums")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n_lines")
(PUNCT ",")
(ID "percent")
(PUNCT ",")
(ID "modulename")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(ID "sums")
(PUNCT "[")
(ID "m")
(PUNCT "]")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%5d   %3d%%   %s   (%s)")
(PUNCT "%")
(ID "sums")
(PUNCT "[")
(ID "m")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "outfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pickle")
(PUNCT ".")
(ID "dump")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "calledfuncs")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "callers")
(PUNCT ")")
(PUNCT ",")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "outfile")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Can't save counts files because %s")
(PUNCT "%")
(ID "err")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write_results_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "lines")
(PUNCT ",")
(ID "lnotab")
(PUNCT ",")
(ID "lines_hit")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a coverage results file in path.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outfile")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT "trace: Could not open %r for writing: %s")
(LIT "- skipping")
(PUNCT "%")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 0)
(PUNCT ",")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "n_lines")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "n_hits")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "lineno")
(PUNCT ",")
(ID "line")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "lines")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lineno")
(KEYWORD in)
(ID "lines_hit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%5d: ")
(PUNCT "%")
(ID "lines_hit")
(PUNCT "[")
(ID "lineno")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "n_hits")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "n_lines")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "rx_blank")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "       ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lineno")
(KEYWORD in)
(ID "lnotab")
(KEYWORD and)
(KEYWORD not)
(ID "PRAGMA_NOCOVER")
(KEYWORD in)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT ">>>>>> ")
(PUNCT ")")
(NEWLINE)
(ID "n_lines")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "       ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "outfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "outfile")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "n_hits")
(PUNCT ",")
(ID "n_lines")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_find_lines_from_code")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict where keys are lines in the line number table.")
(NEWLINE)
(ID "linenos")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "_")
(PUNCT ",")
(ID "lineno")
(KEYWORD in)
(ID "dis")
(PUNCT ".")
(ID "findlinestarts")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lineno")
(KEYWORD not)
(KEYWORD in)
(ID "strs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linenos")
(PUNCT "[")
(ID "lineno")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "linenos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_lines")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return lineno dict for all code objects reachable from code.")
(NEWLINE)
(ID "linenos")
(PUNCT "=")
(ID "_find_lines_from_code")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "code")
(PUNCT ".")
(ID "co_consts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "inspect")
(PUNCT ".")
(ID "iscode")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linenos")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "_find_lines")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "linenos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_strings")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a dict of possible docstring positions.\n\n    The dict maps line numbers to strings.  There is an entry for\n    line that contains only a string or a part of a triple-quoted\n    string.\n    ")
(NEWLINE)
(ID "d")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "prev_ttype")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "INDENT")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tok")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "generate_tokens")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "ttype")
(PUNCT ",")
(ID "tstr")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "line")
(KEYWORD in)
(ID "tok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ttype")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "STRING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "prev_ttype")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "INDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sline")
(PUNCT ",")
(ID "scol")
(PUNCT "=")
(ID "start")
(NEWLINE)
(ID "eline")
(PUNCT ",")
(ID "ecol")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "sline")
(PUNCT ",")
(ID "eline")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "prev_ttype")
(PUNCT "=")
(ID "ttype")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_executable_linenos")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict where keys are line numbers in the line number table.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "tokenize")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prog")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "encoding")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT "Not printing coverage data for %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT "=")
(ID "compile")
(PUNCT "(")
(ID "prog")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(LIT "exec")
(PUNCT ")")
(NEWLINE)
(ID "strs")
(PUNCT "=")
(ID "_find_strings")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_find_lines")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "count")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "trace")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "countfuncs")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "countcallers")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "ignoremods")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "ignoredirs")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "infile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "outfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timing")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        @param count true iff it should count number of times each\n                     line is executed\n        @param trace true iff it should print out each line that is\n                     being counted\n        @param countfuncs true iff it should just output a list of\n                     (filename, modulename, funcname,) for functions\n                     that were called at least once;  This overrides\n                     `count' and `trace'\n        @param ignoremods a list of the names of modules to ignore\n        @param ignoredirs a list of the names of directories to ignore\n                     all of the (recursive) contents of\n        @param infile file from which to read stored counts to be\n                     added into the results\n        @param outfile file in which to write the results\n        @param timing true iff timing information be displayed\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT "=")
(ID "infile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "outfile")
(PUNCT "=")
(ID "outfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ignore")
(PUNCT "=")
(ID "_Ignore")
(PUNCT "(")
(ID "ignoremods")
(PUNCT ",")
(ID "ignoredirs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pathtobasename")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "donothing")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "trace")
(PUNCT "=")
(ID "trace")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_calledfuncs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_callers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_caller_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "start_time")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "timing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "start_time")
(PUNCT "=")
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "countcallers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "globaltrace_trackcallers")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "countfuncs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "globaltrace_countfuncs")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "trace")
(KEYWORD and)
(ID "count")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "globaltrace_lt")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "localtrace_trace_and_count")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "globaltrace_lt")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "localtrace_trace")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "count")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "globaltrace_lt")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "localtrace_count")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "donothing")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "__main__")
(NEWLINE)
(ID "dict")
(PUNCT "=")
(ID "__main__")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "runctx")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "dict")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runctx")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "globals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "globals")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "globals")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "locals")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "locals")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "donothing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_settrace")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "globals")
(PUNCT ",")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "donothing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_unsettrace")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "runfunc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "donothing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "globaltrace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "donothing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "file_module_function_of")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "code")
(PUNCT ".")
(ID "co_filename")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "modulename")
(PUNCT "=")
(ID "_modname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "modulename")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "funcname")
(PUNCT "=")
(ID "code")
(PUNCT ".")
(ID "co_name")
(NEWLINE)
(ID "clsname")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "code")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_caller_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_caller_cache")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "clsname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_caller_cache")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_caller_cache")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "funcs")
(PUNCT "=")
(PUNCT "[")
(ID "f")
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "gc")
(PUNCT ".")
(ID "get_referrers")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(KEYWORD if)
(ID "inspect")
(PUNCT ".")
(ID "isfunction")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "funcs")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dicts")
(PUNCT "=")
(PUNCT "[")
(ID "d")
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "gc")
(PUNCT ".")
(ID "get_referrers")
(PUNCT "(")
(ID "funcs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "dicts")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "classes")
(PUNCT "=")
(PUNCT "[")
(ID "c")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "gc")
(PUNCT ".")
(ID "get_referrers")
(PUNCT "(")
(ID "dicts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(LIT "__bases__")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "classes")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "clsname")
(PUNCT "=")
(ID "classes")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_caller_cache")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(PUNCT "=")
(ID "clsname")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "clsname")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcname")
(PUNCT "=")
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "clsname")
(PUNCT ",")
(ID "funcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "filename")
(PUNCT ",")
(ID "modulename")
(PUNCT ",")
(ID "funcname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "globaltrace_trackcallers")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ",")
(ID "why")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handler for call events.\n\n        Adds information about who called who to the self._callers dict.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "why")
(PUNCT "==")
(LIT "call")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file_module_function_of")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(NEWLINE)
(ID "parent_func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file_module_function_of")
(PUNCT "(")
(ID "frame")
(PUNCT ".")
(ID "f_back")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_callers")
(PUNCT "[")
(PUNCT "(")
(ID "parent_func")
(PUNCT ",")
(ID "this_func")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "globaltrace_countfuncs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ",")
(ID "why")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handler for call events.\n\n        Adds (filename, modulename, funcname) to the self._calledfuncs dict.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "why")
(PUNCT "==")
(LIT "call")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "this_func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file_module_function_of")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_calledfuncs")
(PUNCT "[")
(ID "this_func")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "globaltrace_lt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ",")
(ID "why")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handler for call events.\n\n        If the code block being entered is to be ignored, returns `None',\n        else returns self.localtrace.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "why")
(PUNCT "==")
(LIT "call")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_globals")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__file__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "modulename")
(PUNCT "=")
(ID "_modname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "modulename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ignore_it")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ignore")
(PUNCT ".")
(ID "names")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "modulename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_it")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT " --- modulename: %s, funcname: %s")
(PUNCT "%")
(PUNCT "(")
(ID "modulename")
(PUNCT ",")
(ID "code")
(PUNCT ".")
(ID "co_name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "localtrace_trace_and_count")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ",")
(ID "why")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "why")
(PUNCT "==")
(LIT "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(PUNCT ".")
(ID "co_filename")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_lineno")
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "start_time")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%.2f")
(PUNCT "%")
(PUNCT "(")
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "start_time")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%s(%d): %s")
(PUNCT "%")
(PUNCT "(")
(ID "bname")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "linecache")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "localtrace_trace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ",")
(ID "why")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "why")
(PUNCT "==")
(LIT "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(PUNCT ".")
(ID "co_filename")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_lineno")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "start_time")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%.2f")
(PUNCT "%")
(PUNCT "(")
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "start_time")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%s(%d): %s")
(PUNCT "%")
(PUNCT "(")
(ID "bname")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "linecache")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "localtrace_count")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame")
(PUNCT ",")
(ID "why")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "why")
(PUNCT "==")
(LIT "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(PUNCT ".")
(ID "co_filename")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_lineno")
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "localtrace")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "results")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "CoverageResults")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "counts")
(PUNCT ",")
(ID "infile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "outfile")
(PUNCT ",")
(ID "calledfuncs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_calledfuncs")
(PUNCT ",")
(ID "callers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_callers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_err_exit")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "argv")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "getopt")
(NEWLINE)
(KEYWORD if)
(ID "argv")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "argv")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "prog_argv")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "tcrRf:d:msC:lTg")
(PUNCT ",")
(PUNCT "[")
(LIT "help")
(PUNCT ",")
(LIT "version")
(PUNCT ",")
(LIT "trace")
(PUNCT ",")
(LIT "count")
(PUNCT ",")
(LIT "report")
(PUNCT ",")
(LIT "no-report")
(PUNCT ",")
(LIT "summary")
(PUNCT ",")
(LIT "file=")
(PUNCT ",")
(LIT "missing")
(PUNCT ",")
(LIT "ignore-module=")
(PUNCT ",")
(LIT "ignore-dir=")
(PUNCT ",")
(LIT "coverdir=")
(PUNCT ",")
(LIT "listfuncs")
(PUNCT ",")
(LIT "trackcalls")
(PUNCT ",")
(LIT "timing")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Try `%s --help' for more information\n")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "trace")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "report")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "no_report")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "counts_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "missing")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "ignore_modules")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "ignore_dirs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "coverdir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "summary")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "listfuncs")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "countcallers")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "timing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "--help")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_usage")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "--version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "trace 2.0\n")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-T")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--trackcalls")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "countcallers")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-l")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--listfuncs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "listfuncs")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-g")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--timing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-t")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "trace")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-c")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--count")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-r")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--report")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "report")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-R")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--no-report")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "no_report")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-f")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts_file")
(PUNCT "=")
(ID "val")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-m")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--missing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-C")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--coverdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "coverdir")
(PUNCT "=")
(ID "val")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-s")
(KEYWORD or)
(ID "opt")
(PUNCT "==")
(LIT "--summary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "summary")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "--ignore-module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "mod")
(KEYWORD in)
(ID "val")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ignore_modules")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "mod")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "--ignore-dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "val")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expandvars")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "$prefix")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "$exec_prefix")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "ignore_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(LIT 0)
(PUNCT ",")
(LIT "Should never get here")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "listfuncs")
(KEYWORD and)
(PUNCT "(")
(ID "count")
(KEYWORD or)
(ID "trace")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_err_exit")
(PUNCT "(")
(LIT "cannot specify both --listfuncs and (--trace or --count)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "count")
(KEYWORD or)
(ID "trace")
(KEYWORD or)
(ID "report")
(KEYWORD or)
(ID "listfuncs")
(KEYWORD or)
(ID "countcallers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_err_exit")
(PUNCT "(")
(LIT "must specify one of --trace, --count, --report, ")
(LIT "--listfuncs, or --trackcalls")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "report")
(KEYWORD and)
(ID "no_report")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_err_exit")
(PUNCT "(")
(LIT "cannot specify both --report and --no-report")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "report")
(KEYWORD and)
(KEYWORD not)
(ID "counts_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_err_exit")
(PUNCT "(")
(LIT "--report requires a --file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "no_report")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "prog_argv")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_err_exit")
(PUNCT "(")
(LIT "missing name of file to run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "report")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT "=")
(ID "CoverageResults")
(PUNCT "(")
(ID "infile")
(PUNCT "=")
(ID "counts_file")
(PUNCT ",")
(ID "outfile")
(PUNCT "=")
(ID "counts_file")
(PUNCT ")")
(NEWLINE)
(ID "results")
(PUNCT ".")
(ID "write_results")
(PUNCT "(")
(ID "missing")
(PUNCT ",")
(ID "summary")
(PUNCT "=")
(ID "summary")
(PUNCT ",")
(ID "coverdir")
(PUNCT "=")
(ID "coverdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(ID "prog_argv")
(NEWLINE)
(ID "progname")
(PUNCT "=")
(ID "prog_argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "progname")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "Trace")
(PUNCT "(")
(ID "count")
(PUNCT ",")
(ID "trace")
(PUNCT ",")
(ID "countfuncs")
(PUNCT "=")
(ID "listfuncs")
(PUNCT ",")
(ID "countcallers")
(PUNCT "=")
(ID "countcallers")
(PUNCT ",")
(ID "ignoremods")
(PUNCT "=")
(ID "ignore_modules")
(PUNCT ",")
(ID "ignoredirs")
(PUNCT "=")
(ID "ignore_dirs")
(PUNCT ",")
(ID "infile")
(PUNCT "=")
(ID "counts_file")
(PUNCT ",")
(ID "outfile")
(PUNCT "=")
(ID "counts_file")
(PUNCT ",")
(ID "timing")
(PUNCT "=")
(ID "timing")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "progname")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "compile")
(PUNCT "(")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "progname")
(PUNCT ",")
(LIT "exec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "globs")
(PUNCT "=")
(PUNCT "{")
(LIT "__file__")
(PUNCT ":")
(ID "progname")
(PUNCT ",")
(LIT "__name__")
(PUNCT ":")
(LIT "__main__")
(PUNCT ",")
(LIT "__package__")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "__cached__")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "runctx")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "globs")
(PUNCT ",")
(ID "globs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_err_exit")
(PUNCT "(")
(LIT "Cannot run file %r because: %s")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SystemExit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "results")
(PUNCT "=")
(ID "t")
(PUNCT ".")
(ID "results")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "no_report")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "write_results")
(PUNCT "(")
(ID "missing")
(PUNCT ",")
(ID "summary")
(PUNCT "=")
(ID "summary")
(PUNCT ",")
(ID "coverdir")
(PUNCT "=")
(ID "coverdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "usage")
(PUNCT "(")
(ID "outfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.usage() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "_usage")
(PUNCT "(")
(ID "outfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Ignore")
(PUNCT "(")
(ID "_Ignore")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "modules")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The class trace.Ignore is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "_Ignore")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "modules")
(PUNCT ",")
(ID "dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "modname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.modname() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_modname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fullmodname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.fullmodname() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_fullmodname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_lines_from_code")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.find_lines_from_code() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_find_lines_from_code")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_lines")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.find_lines() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_find_lines")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "strs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_strings")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.find_strings() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_find_strings")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_executable_linenos")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "The trace.find_executable_linenos() function is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_find_executable_linenos")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
