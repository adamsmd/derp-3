(LIT "Guess the MIME type of a file.\n\nThis module defines two useful functions:\n\nguess_type(url, strict=True) -- guess the MIME type and encoding of a URL.\n\nguess_extension(type, strict=True) -- guess the extension for a given MIME type.\n\nIt also contains the following, for tuning the behavior:\n\nData:\n\nknownfiles -- list of files to parse\ninited -- flag set when init() has been called\nsuffix_map -- dictionary mapping suffixes to suffixes\nencodings_map -- dictionary mapping suffixes to encodings\ntypes_map -- dictionary mapping suffixes to types\n\nFunctions:\n\ninit([files]) -- parse a list of files, default knownfiles (on Windows, the\n  default values are taken from the registry)\nread_mime_types(file) -- parse one file, return a dictionary or None\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "posixpath")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "winreg")
(KEYWORD as)
(ID "_winreg")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_winreg")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "guess_type")
(PUNCT ",")
(LIT "guess_extension")
(PUNCT ",")
(LIT "guess_all_extensions")
(PUNCT ",")
(LIT "add_type")
(PUNCT ",")
(LIT "read_mime_types")
(PUNCT ",")
(LIT "init")
(PUNCT "]")
(NEWLINE)
(ID "knownfiles")
(PUNCT "=")
(PUNCT "[")
(LIT "/etc/mime.types")
(PUNCT ",")
(LIT "/etc/httpd/mime.types")
(PUNCT ",")
(LIT "/etc/httpd/conf/mime.types")
(PUNCT ",")
(LIT "/etc/apache/mime.types")
(PUNCT ",")
(LIT "/etc/apache2/mime.types")
(PUNCT ",")
(LIT "/usr/local/etc/httpd/conf/mime.types")
(PUNCT ",")
(LIT "/usr/local/lib/netscape/mime.types")
(PUNCT ",")
(LIT "/usr/local/etc/httpd/conf/mime.types")
(PUNCT ",")
(LIT "/usr/local/etc/mime.types")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "inited")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "_db")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD class)
(ID "MimeTypes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "MIME-types datastore.\n\n    This datastore can handle information from mime.types-style files\n    and supports basic determination of MIME type from a filename or\n    URL, and can guess a reasonable extension given a MIME type.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filenames")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "inited")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "encodings_map")
(PUNCT "=")
(ID "encodings_map")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suffix_map")
(PUNCT "=")
(ID "suffix_map")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "types_map")
(PUNCT "=")
(PUNCT "(")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "types_map_inv")
(PUNCT "=")
(PUNCT "(")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "ext")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD in)
(ID "types_map")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_type")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "ext")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(PUNCT "(")
(ID "ext")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD in)
(ID "common_types")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_type")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "ext")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "add_type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "ext")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a mapping between a type and an extension.\n\n        When the extension is already known, the new\n        type will replace the old one. When the type\n        is already known the extension will be added\n        to the list of known extensions.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "types_map")
(PUNCT "[")
(ID "strict")
(PUNCT "]")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "exts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "types_map_inv")
(PUNCT "[")
(ID "strict")
(PUNCT "]")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD not)
(KEYWORD in)
(ID "exts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ext")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "guess_type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the type of a file based on its URL.\n\n        Return value is a tuple (type, encoding) where type is None if\n        the type can't be guessed (no or unknown suffix) or a string\n        of the form type/subtype, usable for a MIME Content-type\n        header; and encoding is None for no encoding or the name of\n        the program used to encode (e.g. compress or gzip).  The\n        mappings are table driven.  Encoding suffixes are case\n        sensitive; type suffixes are first tried case sensitive, then\n        case insensitive.\n\n        The suffixes .tgz, .taz and .tz (case sensitive!) are all\n        mapped to '.tar.gz'.  (This is table-driven too, using the\n        dictionary suffix_map.)\n\n        Optional `strict' argument when False adds a bunch of commonly found,\n        but non-standard types.\n        ")
(NEWLINE)
(ID "scheme")
(PUNCT ",")
(ID "url")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "splittype")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "scheme")
(PUNCT "==")
(LIT "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comma")
(PUNCT "=")
(ID "url")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "comma")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "semi")
(PUNCT "=")
(ID "url")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "comma")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "semi")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "url")
(PUNCT "[")
(PUNCT ":")
(ID "semi")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "url")
(PUNCT "[")
(PUNCT ":")
(ID "comma")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "=")
(KEYWORD in)
(ID "type")
(KEYWORD or)
(LIT "/")
(KEYWORD not)
(KEYWORD in)
(ID "type")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(LIT "text/plain")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "type")
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "suffix_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "suffix_map")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "encodings_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encodings_map")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "types_map")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "types_map")
(PUNCT "[")
(KEYWORD True)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "types_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "types_map")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(ID "types_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "types_map")
(PUNCT "[")
(ID "ext")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "strict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(ID "encoding")
(NEWLINE)
(DEDENT)
(ID "types_map")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "types_map")
(PUNCT "[")
(KEYWORD False)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "types_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "types_map")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(ID "types_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "types_map")
(PUNCT "[")
(ID "ext")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(ID "encoding")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "guess_all_extensions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the extensions for a file based on its MIME type.\n\n        Return value is a list of strings giving the possible filename\n        extensions, including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data stream,\n        but would be mapped to the MIME type `type' by guess_type().\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        ")
(NEWLINE)
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "extensions")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "types_map_inv")
(PUNCT "[")
(KEYWORD True)
(PUNCT "]")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "strict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "types_map_inv")
(PUNCT "[")
(KEYWORD False)
(PUNCT "]")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD not)
(KEYWORD in)
(ID "extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extensions")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ext")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "extensions")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "guess_extension")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the extension for a file based on its MIME type.\n\n        Return value is a string giving a filename extension,\n        including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data\n        stream, but would be mapped to the MIME type `type' by\n        guess_type().  If no extension can be guessed for `type', None\n        is returned.\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        ")
(NEWLINE)
(ID "extensions")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "guess_all_extensions")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "extensions")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Read a single mime.types-format file, specified by pathname.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "readfp")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readfp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Read a single mime.types-format file.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "words")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "words")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "words")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "type")
(PUNCT ",")
(ID "suffixes")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "words")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "suff")
(KEYWORD in)
(ID "suffixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_type")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(LIT ".")
(PUNCT "+")
(ID "suff")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read_windows_registry")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Load the MIME types database from Windows registry.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_winreg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "enum_types")
(PUNCT "(")
(ID "mimedb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctype")
(PUNCT "=")
(ID "_winreg")
(PUNCT ".")
(ID "EnumKey")
(PUNCT "(")
(ID "mimedb")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "EnvironmentError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "ctype")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD with)
(ID "_winreg")
(PUNCT ".")
(ID "OpenKey")
(PUNCT "(")
(ID "_winreg")
(PUNCT ".")
(ID "HKEY_CLASSES_ROOT")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD as)
(ID "hkcr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "subkeyname")
(KEYWORD in)
(ID "enum_types")
(PUNCT "(")
(ID "hkcr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "_winreg")
(PUNCT ".")
(ID "OpenKey")
(PUNCT "(")
(ID "hkcr")
(PUNCT ",")
(ID "subkeyname")
(PUNCT ")")
(KEYWORD as)
(ID "subkey")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "subkeyname")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "mimetype")
(PUNCT ",")
(ID "datatype")
(PUNCT "=")
(ID "_winreg")
(PUNCT ".")
(ID "QueryValueEx")
(PUNCT "(")
(ID "subkey")
(PUNCT ",")
(LIT "Content Type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "datatype")
(PUNCT "!=")
(ID "_winreg")
(PUNCT ".")
(ID "REG_SZ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "add_type")
(PUNCT "(")
(ID "mimetype")
(PUNCT ",")
(ID "subkeyname")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "EnvironmentError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "guess_type")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the type of a file based on its URL.\n\n    Return value is a tuple (type, encoding) where type is None if the\n    type can't be guessed (no or unknown suffix) or a string of the\n    form type/subtype, usable for a MIME Content-type header; and\n    encoding is None for no encoding or the name of the program used\n    to encode (e.g. compress or gzip).  The mappings are table\n    driven.  Encoding suffixes are case sensitive; type suffixes are\n    first tried case sensitive, then case insensitive.\n\n    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped\n    to \".tar.gz\".  (This is table-driven too, using the dictionary\n    suffix_map).\n\n    Optional `strict' argument when false adds a bunch of commonly found, but\n    non-standard types.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "_db")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_db")
(PUNCT ".")
(ID "guess_type")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "guess_all_extensions")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the extensions for a file based on its MIME type.\n\n    Return value is a list of strings giving the possible filename\n    extensions, including the leading dot ('.').  The extension is not\n    guaranteed to have been associated with any particular data\n    stream, but would be mapped to the MIME type `type' by\n    guess_type().  If no extension can be guessed for `type', None\n    is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "_db")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_db")
(PUNCT ".")
(ID "guess_all_extensions")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "guess_extension")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the extension for a file based on its MIME type.\n\n    Return value is a string giving a filename extension, including the\n    leading dot ('.').  The extension is not guaranteed to have been\n    associated with any particular data stream, but would be mapped to the\n    MIME type `type' by guess_type().  If no extension can be guessed for\n    `type', None is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "_db")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_db")
(PUNCT ".")
(ID "guess_extension")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_type")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "ext")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a mapping between a type and an extension.\n\n    When the extension is already known, the new\n    type will replace the old one. When the type\n    is already known the extension will be added\n    to the list of known extensions.\n\n    If strict is true, information will be added to\n    list of standard types, else to the list of non-standard\n    types.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "_db")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_db")
(PUNCT ".")
(ID "add_type")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "ext")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "init")
(PUNCT "(")
(ID "files")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "suffix_map")
(PUNCT ",")
(ID "types_map")
(PUNCT ",")
(ID "encodings_map")
(PUNCT ",")
(ID "common_types")
(NEWLINE)
(KEYWORD global)
(ID "inited")
(PUNCT ",")
(ID "_db")
(NEWLINE)
(ID "inited")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "db")
(PUNCT "=")
(ID "MimeTypes")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "files")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_winreg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "db")
(PUNCT ".")
(ID "read_windows_registry")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "files")
(PUNCT "=")
(ID "knownfiles")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "db")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "encodings_map")
(PUNCT "=")
(ID "db")
(PUNCT ".")
(ID "encodings_map")
(NEWLINE)
(ID "suffix_map")
(PUNCT "=")
(ID "db")
(PUNCT ".")
(ID "suffix_map")
(NEWLINE)
(ID "types_map")
(PUNCT "=")
(ID "db")
(PUNCT ".")
(ID "types_map")
(PUNCT "[")
(KEYWORD True)
(PUNCT "]")
(NEWLINE)
(ID "common_types")
(PUNCT "=")
(ID "db")
(PUNCT ".")
(ID "types_map")
(PUNCT "[")
(KEYWORD False)
(PUNCT "]")
(NEWLINE)
(ID "_db")
(PUNCT "=")
(ID "db")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_mime_types")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "db")
(PUNCT "=")
(ID "MimeTypes")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "db")
(PUNCT ".")
(ID "readfp")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "db")
(PUNCT ".")
(ID "types_map")
(PUNCT "[")
(KEYWORD True)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_default_mime_types")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "suffix_map")
(NEWLINE)
(KEYWORD global)
(ID "encodings_map")
(NEWLINE)
(KEYWORD global)
(ID "types_map")
(NEWLINE)
(KEYWORD global)
(ID "common_types")
(NEWLINE)
(ID "suffix_map")
(PUNCT "=")
(PUNCT "{")
(LIT ".svgz")
(PUNCT ":")
(LIT ".svg.gz")
(PUNCT ",")
(LIT ".tgz")
(PUNCT ":")
(LIT ".tar.gz")
(PUNCT ",")
(LIT ".taz")
(PUNCT ":")
(LIT ".tar.gz")
(PUNCT ",")
(LIT ".tz")
(PUNCT ":")
(LIT ".tar.gz")
(PUNCT ",")
(LIT ".tbz2")
(PUNCT ":")
(LIT ".tar.bz2")
(PUNCT ",")
(LIT ".txz")
(PUNCT ":")
(LIT ".tar.xz")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "encodings_map")
(PUNCT "=")
(PUNCT "{")
(LIT ".gz")
(PUNCT ":")
(LIT "gzip")
(PUNCT ",")
(LIT ".Z")
(PUNCT ":")
(LIT "compress")
(PUNCT ",")
(LIT ".bz2")
(PUNCT ":")
(LIT "bzip2")
(PUNCT ",")
(LIT ".xz")
(PUNCT ":")
(LIT "xz")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "types_map")
(PUNCT "=")
(PUNCT "{")
(LIT ".a")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".ai")
(PUNCT ":")
(LIT "application/postscript")
(PUNCT ",")
(LIT ".aif")
(PUNCT ":")
(LIT "audio/x-aiff")
(PUNCT ",")
(LIT ".aifc")
(PUNCT ":")
(LIT "audio/x-aiff")
(PUNCT ",")
(LIT ".aiff")
(PUNCT ":")
(LIT "audio/x-aiff")
(PUNCT ",")
(LIT ".au")
(PUNCT ":")
(LIT "audio/basic")
(PUNCT ",")
(LIT ".avi")
(PUNCT ":")
(LIT "video/x-msvideo")
(PUNCT ",")
(LIT ".bat")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".bcpio")
(PUNCT ":")
(LIT "application/x-bcpio")
(PUNCT ",")
(LIT ".bin")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".bmp")
(PUNCT ":")
(LIT "image/x-ms-bmp")
(PUNCT ",")
(LIT ".c")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".cdf")
(PUNCT ":")
(LIT "application/x-cdf")
(PUNCT ",")
(LIT ".cdf")
(PUNCT ":")
(LIT "application/x-netcdf")
(PUNCT ",")
(LIT ".cpio")
(PUNCT ":")
(LIT "application/x-cpio")
(PUNCT ",")
(LIT ".csh")
(PUNCT ":")
(LIT "application/x-csh")
(PUNCT ",")
(LIT ".css")
(PUNCT ":")
(LIT "text/css")
(PUNCT ",")
(LIT ".dll")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".doc")
(PUNCT ":")
(LIT "application/msword")
(PUNCT ",")
(LIT ".dot")
(PUNCT ":")
(LIT "application/msword")
(PUNCT ",")
(LIT ".dvi")
(PUNCT ":")
(LIT "application/x-dvi")
(PUNCT ",")
(LIT ".eml")
(PUNCT ":")
(LIT "message/rfc822")
(PUNCT ",")
(LIT ".eps")
(PUNCT ":")
(LIT "application/postscript")
(PUNCT ",")
(LIT ".etx")
(PUNCT ":")
(LIT "text/x-setext")
(PUNCT ",")
(LIT ".exe")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".gif")
(PUNCT ":")
(LIT "image/gif")
(PUNCT ",")
(LIT ".gtar")
(PUNCT ":")
(LIT "application/x-gtar")
(PUNCT ",")
(LIT ".h")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".hdf")
(PUNCT ":")
(LIT "application/x-hdf")
(PUNCT ",")
(LIT ".htm")
(PUNCT ":")
(LIT "text/html")
(PUNCT ",")
(LIT ".html")
(PUNCT ":")
(LIT "text/html")
(PUNCT ",")
(LIT ".ico")
(PUNCT ":")
(LIT "image/vnd.microsoft.icon")
(PUNCT ",")
(LIT ".ief")
(PUNCT ":")
(LIT "image/ief")
(PUNCT ",")
(LIT ".jpe")
(PUNCT ":")
(LIT "image/jpeg")
(PUNCT ",")
(LIT ".jpeg")
(PUNCT ":")
(LIT "image/jpeg")
(PUNCT ",")
(LIT ".jpg")
(PUNCT ":")
(LIT "image/jpeg")
(PUNCT ",")
(LIT ".js")
(PUNCT ":")
(LIT "application/javascript")
(PUNCT ",")
(LIT ".ksh")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".latex")
(PUNCT ":")
(LIT "application/x-latex")
(PUNCT ",")
(LIT ".m1v")
(PUNCT ":")
(LIT "video/mpeg")
(PUNCT ",")
(LIT ".m3u")
(PUNCT ":")
(LIT "application/vnd.apple.mpegurl")
(PUNCT ",")
(LIT ".m3u8")
(PUNCT ":")
(LIT "application/vnd.apple.mpegurl")
(PUNCT ",")
(LIT ".man")
(PUNCT ":")
(LIT "application/x-troff-man")
(PUNCT ",")
(LIT ".me")
(PUNCT ":")
(LIT "application/x-troff-me")
(PUNCT ",")
(LIT ".mht")
(PUNCT ":")
(LIT "message/rfc822")
(PUNCT ",")
(LIT ".mhtml")
(PUNCT ":")
(LIT "message/rfc822")
(PUNCT ",")
(LIT ".mif")
(PUNCT ":")
(LIT "application/x-mif")
(PUNCT ",")
(LIT ".mov")
(PUNCT ":")
(LIT "video/quicktime")
(PUNCT ",")
(LIT ".movie")
(PUNCT ":")
(LIT "video/x-sgi-movie")
(PUNCT ",")
(LIT ".mp2")
(PUNCT ":")
(LIT "audio/mpeg")
(PUNCT ",")
(LIT ".mp3")
(PUNCT ":")
(LIT "audio/mpeg")
(PUNCT ",")
(LIT ".mp4")
(PUNCT ":")
(LIT "video/mp4")
(PUNCT ",")
(LIT ".mpa")
(PUNCT ":")
(LIT "video/mpeg")
(PUNCT ",")
(LIT ".mpe")
(PUNCT ":")
(LIT "video/mpeg")
(PUNCT ",")
(LIT ".mpeg")
(PUNCT ":")
(LIT "video/mpeg")
(PUNCT ",")
(LIT ".mpg")
(PUNCT ":")
(LIT "video/mpeg")
(PUNCT ",")
(LIT ".ms")
(PUNCT ":")
(LIT "application/x-troff-ms")
(PUNCT ",")
(LIT ".nc")
(PUNCT ":")
(LIT "application/x-netcdf")
(PUNCT ",")
(LIT ".nws")
(PUNCT ":")
(LIT "message/rfc822")
(PUNCT ",")
(LIT ".o")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".obj")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".oda")
(PUNCT ":")
(LIT "application/oda")
(PUNCT ",")
(LIT ".p12")
(PUNCT ":")
(LIT "application/x-pkcs12")
(PUNCT ",")
(LIT ".p7c")
(PUNCT ":")
(LIT "application/pkcs7-mime")
(PUNCT ",")
(LIT ".pbm")
(PUNCT ":")
(LIT "image/x-portable-bitmap")
(PUNCT ",")
(LIT ".pdf")
(PUNCT ":")
(LIT "application/pdf")
(PUNCT ",")
(LIT ".pfx")
(PUNCT ":")
(LIT "application/x-pkcs12")
(PUNCT ",")
(LIT ".pgm")
(PUNCT ":")
(LIT "image/x-portable-graymap")
(PUNCT ",")
(LIT ".pl")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".png")
(PUNCT ":")
(LIT "image/png")
(PUNCT ",")
(LIT ".pnm")
(PUNCT ":")
(LIT "image/x-portable-anymap")
(PUNCT ",")
(LIT ".pot")
(PUNCT ":")
(LIT "application/vnd.ms-powerpoint")
(PUNCT ",")
(LIT ".ppa")
(PUNCT ":")
(LIT "application/vnd.ms-powerpoint")
(PUNCT ",")
(LIT ".ppm")
(PUNCT ":")
(LIT "image/x-portable-pixmap")
(PUNCT ",")
(LIT ".pps")
(PUNCT ":")
(LIT "application/vnd.ms-powerpoint")
(PUNCT ",")
(LIT ".ppt")
(PUNCT ":")
(LIT "application/vnd.ms-powerpoint")
(PUNCT ",")
(LIT ".ps")
(PUNCT ":")
(LIT "application/postscript")
(PUNCT ",")
(LIT ".pwz")
(PUNCT ":")
(LIT "application/vnd.ms-powerpoint")
(PUNCT ",")
(LIT ".py")
(PUNCT ":")
(LIT "text/x-python")
(PUNCT ",")
(LIT ".pyc")
(PUNCT ":")
(LIT "application/x-python-code")
(PUNCT ",")
(LIT ".pyo")
(PUNCT ":")
(LIT "application/x-python-code")
(PUNCT ",")
(LIT ".qt")
(PUNCT ":")
(LIT "video/quicktime")
(PUNCT ",")
(LIT ".ra")
(PUNCT ":")
(LIT "audio/x-pn-realaudio")
(PUNCT ",")
(LIT ".ram")
(PUNCT ":")
(LIT "application/x-pn-realaudio")
(PUNCT ",")
(LIT ".ras")
(PUNCT ":")
(LIT "image/x-cmu-raster")
(PUNCT ",")
(LIT ".rdf")
(PUNCT ":")
(LIT "application/xml")
(PUNCT ",")
(LIT ".rgb")
(PUNCT ":")
(LIT "image/x-rgb")
(PUNCT ",")
(LIT ".roff")
(PUNCT ":")
(LIT "application/x-troff")
(PUNCT ",")
(LIT ".rtx")
(PUNCT ":")
(LIT "text/richtext")
(PUNCT ",")
(LIT ".sgm")
(PUNCT ":")
(LIT "text/x-sgml")
(PUNCT ",")
(LIT ".sgml")
(PUNCT ":")
(LIT "text/x-sgml")
(PUNCT ",")
(LIT ".sh")
(PUNCT ":")
(LIT "application/x-sh")
(PUNCT ",")
(LIT ".shar")
(PUNCT ":")
(LIT "application/x-shar")
(PUNCT ",")
(LIT ".snd")
(PUNCT ":")
(LIT "audio/basic")
(PUNCT ",")
(LIT ".so")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".src")
(PUNCT ":")
(LIT "application/x-wais-source")
(PUNCT ",")
(LIT ".sv4cpio")
(PUNCT ":")
(LIT "application/x-sv4cpio")
(PUNCT ",")
(LIT ".sv4crc")
(PUNCT ":")
(LIT "application/x-sv4crc")
(PUNCT ",")
(LIT ".svg")
(PUNCT ":")
(LIT "image/svg+xml")
(PUNCT ",")
(LIT ".swf")
(PUNCT ":")
(LIT "application/x-shockwave-flash")
(PUNCT ",")
(LIT ".t")
(PUNCT ":")
(LIT "application/x-troff")
(PUNCT ",")
(LIT ".tar")
(PUNCT ":")
(LIT "application/x-tar")
(PUNCT ",")
(LIT ".tcl")
(PUNCT ":")
(LIT "application/x-tcl")
(PUNCT ",")
(LIT ".tex")
(PUNCT ":")
(LIT "application/x-tex")
(PUNCT ",")
(LIT ".texi")
(PUNCT ":")
(LIT "application/x-texinfo")
(PUNCT ",")
(LIT ".texinfo")
(PUNCT ":")
(LIT "application/x-texinfo")
(PUNCT ",")
(LIT ".tif")
(PUNCT ":")
(LIT "image/tiff")
(PUNCT ",")
(LIT ".tiff")
(PUNCT ":")
(LIT "image/tiff")
(PUNCT ",")
(LIT ".tr")
(PUNCT ":")
(LIT "application/x-troff")
(PUNCT ",")
(LIT ".tsv")
(PUNCT ":")
(LIT "text/tab-separated-values")
(PUNCT ",")
(LIT ".txt")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".ustar")
(PUNCT ":")
(LIT "application/x-ustar")
(PUNCT ",")
(LIT ".vcf")
(PUNCT ":")
(LIT "text/x-vcard")
(PUNCT ",")
(LIT ".wav")
(PUNCT ":")
(LIT "audio/x-wav")
(PUNCT ",")
(LIT ".wiz")
(PUNCT ":")
(LIT "application/msword")
(PUNCT ",")
(LIT ".wsdl")
(PUNCT ":")
(LIT "application/xml")
(PUNCT ",")
(LIT ".xbm")
(PUNCT ":")
(LIT "image/x-xbitmap")
(PUNCT ",")
(LIT ".xlb")
(PUNCT ":")
(LIT "application/vnd.ms-excel")
(PUNCT ",")
(LIT ".xls")
(PUNCT ":")
(LIT "application/excel")
(PUNCT ",")
(LIT ".xls")
(PUNCT ":")
(LIT "application/vnd.ms-excel")
(PUNCT ",")
(LIT ".xml")
(PUNCT ":")
(LIT "text/xml")
(PUNCT ",")
(LIT ".xpdl")
(PUNCT ":")
(LIT "application/xml")
(PUNCT ",")
(LIT ".xpm")
(PUNCT ":")
(LIT "image/x-xpixmap")
(PUNCT ",")
(LIT ".xsl")
(PUNCT ":")
(LIT "application/xml")
(PUNCT ",")
(LIT ".xwd")
(PUNCT ":")
(LIT "image/x-xwindowdump")
(PUNCT ",")
(LIT ".zip")
(PUNCT ":")
(LIT "application/zip")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "common_types")
(PUNCT "=")
(PUNCT "{")
(LIT ".jpg")
(PUNCT ":")
(LIT "image/jpg")
(PUNCT ",")
(LIT ".mid")
(PUNCT ":")
(LIT "audio/midi")
(PUNCT ",")
(LIT ".midi")
(PUNCT ":")
(LIT "audio/midi")
(PUNCT ",")
(LIT ".pct")
(PUNCT ":")
(LIT "image/pict")
(PUNCT ",")
(LIT ".pic")
(PUNCT ":")
(LIT "image/pict")
(PUNCT ",")
(LIT ".pict")
(PUNCT ":")
(LIT "image/pict")
(PUNCT ",")
(LIT ".rtf")
(PUNCT ":")
(LIT "application/rtf")
(PUNCT ",")
(LIT ".xul")
(PUNCT ":")
(LIT "text/xul")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "_default_mime_types")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "getopt")
(NEWLINE)
(ID "USAGE")
(PUNCT "=")
(LIT "Usage: mimetypes.py [options] type\n\nOptions:\n    --help / -h       -- print this message and exit\n    --lenient / -l    -- additionally search of some common, but non-standard\n                         types.\n    --extension / -e  -- guess extension instead of type\n\nMore than one type argument may be given.\n")
(NEWLINE)
(KEYWORD def)
(ID "usage")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "USAGE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "msg")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "hle")
(PUNCT ",")
(PUNCT "[")
(LIT "help")
(PUNCT ",")
(LIT "lenient")
(PUNCT ",")
(LIT "extension")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "usage")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "strict")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "extension")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "arg")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(KEYWORD in)
(PUNCT "(")
(LIT "-h")
(PUNCT ",")
(LIT "--help")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "usage")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opt")
(KEYWORD in)
(PUNCT "(")
(LIT "-l")
(PUNCT ",")
(LIT "--lenient")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strict")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opt")
(KEYWORD in)
(PUNCT "(")
(LIT "-e")
(PUNCT ",")
(LIT "--extension")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extension")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "gtype")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "extension")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "guess")
(PUNCT "=")
(ID "guess_extension")
(PUNCT "(")
(ID "gtype")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "guess")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "I don't know anything about type")
(PUNCT ",")
(ID "gtype")
(PUNCT ")")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "print")
(PUNCT "(")
(ID "guess")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "guess")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "guess_type")
(PUNCT "(")
(ID "gtype")
(PUNCT ",")
(ID "strict")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "guess")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "I don't know anything about type")
(PUNCT ",")
(ID "gtype")
(PUNCT ")")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "type:")
(PUNCT ",")
(ID "guess")
(PUNCT ",")
(LIT "encoding:")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
