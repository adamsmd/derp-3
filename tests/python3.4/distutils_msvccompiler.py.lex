(LIT "distutils.msvccompiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor the Microsoft Visual Studio.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsExecError")
(PUNCT ",")
(ID "DistutilsPlatformError")
(PUNCT ",")
(ID "CompileError")
(PUNCT ",")
(ID "LibError")
(PUNCT ",")
(ID "LinkError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CCompiler")
(PUNCT ",")
(ID "gen_preprocess_options")
(PUNCT ",")
(ID "gen_lib_options")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(ID "_can_read_reg")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "winreg")
(NEWLINE)
(ID "_can_read_reg")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "hkey_mod")
(PUNCT "=")
(ID "winreg")
(NEWLINE)
(ID "RegOpenKeyEx")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "OpenKeyEx")
(NEWLINE)
(ID "RegEnumKey")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "EnumKey")
(NEWLINE)
(ID "RegEnumValue")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "EnumValue")
(NEWLINE)
(ID "RegError")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "error")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "win32api")
(NEWLINE)
(KEYWORD import)
(ID "win32con")
(NEWLINE)
(ID "_can_read_reg")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "hkey_mod")
(PUNCT "=")
(ID "win32con")
(NEWLINE)
(ID "RegOpenKeyEx")
(PUNCT "=")
(ID "win32api")
(PUNCT ".")
(ID "RegOpenKeyEx")
(NEWLINE)
(ID "RegEnumKey")
(PUNCT "=")
(ID "win32api")
(PUNCT ".")
(ID "RegEnumKey")
(NEWLINE)
(ID "RegEnumValue")
(PUNCT "=")
(ID "win32api")
(PUNCT ".")
(ID "RegEnumValue")
(NEWLINE)
(ID "RegError")
(PUNCT "=")
(ID "win32api")
(PUNCT ".")
(ID "error")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Warning: Can't read registry to find the ")
(LIT "necessary compiler setting\n")
(LIT "Make sure that Python modules winreg, ")
(LIT "win32api or win32con are installed.")
(PUNCT ")")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_can_read_reg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "HKEYS")
(PUNCT "=")
(PUNCT "(")
(ID "hkey_mod")
(PUNCT ".")
(ID "HKEY_USERS")
(PUNCT ",")
(ID "hkey_mod")
(PUNCT ".")
(ID "HKEY_CURRENT_USER")
(PUNCT ",")
(ID "hkey_mod")
(PUNCT ".")
(ID "HKEY_LOCAL_MACHINE")
(PUNCT ",")
(ID "hkey_mod")
(PUNCT ".")
(ID "HKEY_CLASSES_ROOT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_keys")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of registry keys.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "L")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "RegEnumKey")
(PUNCT "(")
(ID "handle")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "L")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "L")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_values")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict of registry keys and values.\n\n    All names are converted to lowercase.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "RegEnumValue")
(PUNCT "(")
(ID "handle")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "convert_mbcs")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "convert_mbcs")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "convert_mbcs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dec")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(LIT "decode")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "dec")
(PUNCT "(")
(LIT "mbcs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MacroExpander")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "load_macros")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_macro")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "macro")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "HKEYS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "read_values")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT "[")
(LIT "$(%s)")
(PUNCT "%")
(ID "macro")
(PUNCT "]")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "load_macros")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vsbase")
(PUNCT "=")
(LIT "Software\\Microsoft\\VisualStudio\\%0.1f")
(PUNCT "%")
(ID "version")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "VCInstallDir")
(PUNCT ",")
(ID "vsbase")
(PUNCT "+")
(LIT "\\Setup\\VC")
(PUNCT ",")
(LIT "productdir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "VSInstallDir")
(PUNCT ",")
(ID "vsbase")
(PUNCT "+")
(LIT "\\Setup\\VS")
(PUNCT ",")
(LIT "productdir")
(PUNCT ")")
(NEWLINE)
(ID "net")
(PUNCT "=")
(LIT "Software\\Microsoft\\.NETFramework")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "FrameworkDir")
(PUNCT ",")
(ID "net")
(PUNCT ",")
(LIT "installroot")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "version")
(PUNCT ">")
(LIT 7.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "FrameworkSDKDir")
(PUNCT ",")
(ID "net")
(PUNCT ",")
(LIT "sdkinstallrootv1.1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "FrameworkSDKDir")
(PUNCT ",")
(ID "net")
(PUNCT ",")
(LIT "sdkinstallroot")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "Python was built with Visual Studio 2003;\nextensions must be built with a compiler than can generate compatible binaries.\nVisual Studio 2003 was not found on this system. If you have Cygwin installed,\nyou can try compiling with MingW32, by passing \"-c mingw32\" to setup.py.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(LIT "Software\\Microsoft\\NET Framework Setup\\Product")
(NEWLINE)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "HKEYS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "RegEnumKey")
(PUNCT "(")
(ID "h")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "read_values")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(LIT "%s\\%s")
(PUNCT "%")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT "[")
(LIT "$(FrameworkVersion)")
(PUNCT "]")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(LIT "version")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "sub")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_build_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the version of MSVC that was used to build Python.\n\n    For Python 2.3 and up, the version number is included in\n    sys.version.  For earlier versions, assume the compiler is MSVC 6.\n    ")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(LIT "MSC v.")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 6)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "majorVersion")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(PUNCT "-")
(LIT 6)
(NEWLINE)
(ID "minorVersion")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT "/")
(LIT 10.0)
(NEWLINE)
(KEYWORD if)
(ID "majorVersion")
(PUNCT "==")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "minorVersion")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "majorVersion")
(PUNCT ">=")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "majorVersion")
(PUNCT "+")
(ID "minorVersion")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_build_architecture")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the processor architecture.\n\n    Possible results are \"Intel\", \"Itanium\", or \"AMD64\".\n    ")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(LIT " bit (")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "Intel")
(NEWLINE)
(DEDENT)
(ID "j")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ")")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ":")
(ID "j")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "normalize_and_reduce_paths")
(PUNCT "(")
(ID "paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of normalized paths with duplicates removed.\n\n    The current order of paths is maintained.\n    ")
(NEWLINE)
(ID "reduced_paths")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "np")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "np")
(KEYWORD not)
(KEYWORD in)
(ID "reduced_paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reduced_paths")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "np")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "reduced_paths")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MSVCCompiler")
(PUNCT "(")
(ID "CCompiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Concrete class that implements an interface to Microsoft Visual C++,\n       as defined by the CCompiler abstract class.")
(NEWLINE)
(ID "compiler_type")
(PUNCT "=")
(LIT "msvc")
(NEWLINE)
(ID "executables")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_c_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".c")
(PUNCT "]")
(NEWLINE)
(ID "_cpp_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".cc")
(PUNCT ",")
(LIT ".cpp")
(PUNCT ",")
(LIT ".cxx")
(PUNCT "]")
(NEWLINE)
(ID "_rc_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".rc")
(PUNCT "]")
(NEWLINE)
(ID "_mc_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".mc")
(PUNCT "]")
(NEWLINE)
(ID "src_extensions")
(PUNCT "=")
(PUNCT "(")
(ID "_c_extensions")
(PUNCT "+")
(ID "_cpp_extensions")
(PUNCT "+")
(ID "_rc_extensions")
(PUNCT "+")
(ID "_mc_extensions")
(PUNCT ")")
(NEWLINE)
(ID "res_extension")
(PUNCT "=")
(LIT ".res")
(NEWLINE)
(ID "obj_extension")
(PUNCT "=")
(LIT ".obj")
(NEWLINE)
(ID "static_lib_extension")
(PUNCT "=")
(LIT ".lib")
(NEWLINE)
(ID "shared_lib_extension")
(PUNCT "=")
(LIT ".dll")
(NEWLINE)
(ID "static_lib_format")
(PUNCT "=")
(ID "shared_lib_format")
(PUNCT "=")
(LIT "%s%s")
(NEWLINE)
(ID "exe_extension")
(PUNCT "=")
(LIT ".exe")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CCompiler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT "=")
(ID "get_build_version")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__arch")
(PUNCT "=")
(ID "get_build_architecture")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__arch")
(PUNCT "==")
(LIT "Intel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ">=")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT "=")
(LIT "Software\\Microsoft\\VisualStudio")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__macros")
(PUNCT "=")
(ID "MacroExpander")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT "=")
(LIT "Software\\Microsoft\\Devstudio")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__product")
(PUNCT "=")
(LIT "Visual Studio version %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__version")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__product")
(PUNCT "=")
(LIT "Microsoft SDK compiler %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT "+")
(LIT 6)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "initialize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "DISTUTILS_USE_SDK")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(LIT "MSSdk")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "cl.exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "=")
(LIT "cl.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linker")
(PUNCT "=")
(LIT "link.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lib")
(PUNCT "=")
(LIT "lib.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "=")
(LIT "rc.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mc")
(PUNCT "=")
(LIT "mc.exe")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_msvc_paths")
(PUNCT "(")
(LIT "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "Python was built with %s, ")
(LIT "and extensions need to be built with the same ")
(LIT "version of the compiler, but it isn't installed.")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__product")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "cl.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linker")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "link.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lib")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "lib.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "rc.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "mc.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_path_env_var")
(PUNCT "(")
(LIT "lib")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_path_env_var")
(PUNCT "(")
(LIT "include")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "path")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT "=")
(ID "normalize_and_reduce_paths")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "path")
(PUNCT "]")
(PUNCT "=")
(LIT ";")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "preprocess_options")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__arch")
(PUNCT "==")
(LIT "Intel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compile_options")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Ox")
(PUNCT ",")
(LIT "/MD")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/GX")
(PUNCT ",")
(LIT "/DNDEBUG")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compile_options_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Od")
(PUNCT ",")
(LIT "/MDd")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/GX")
(PUNCT ",")
(LIT "/Z7")
(PUNCT ",")
(LIT "/D_DEBUG")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compile_options")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Ox")
(PUNCT ",")
(LIT "/MD")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/GS-")
(PUNCT ",")
(LIT "/DNDEBUG")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compile_options_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Od")
(PUNCT ",")
(LIT "/MDd")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/GS-")
(PUNCT ",")
(LIT "/Z7")
(PUNCT ",")
(LIT "/D_DEBUG")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_shared")
(PUNCT "=")
(PUNCT "[")
(LIT "/DLL")
(PUNCT ",")
(LIT "/nologo")
(PUNCT ",")
(LIT "/INCREMENTAL:NO")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ">=")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/DLL")
(PUNCT ",")
(LIT "/nologo")
(PUNCT ",")
(LIT "/INCREMENTAL:no")
(PUNCT ",")
(LIT "/DEBUG")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/DLL")
(PUNCT ",")
(LIT "/nologo")
(PUNCT ",")
(LIT "/INCREMENTAL:no")
(PUNCT ",")
(LIT "/pdb:None")
(PUNCT ",")
(LIT "/DEBUG")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_static")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "object_filenames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source_filenames")
(PUNCT ",")
(ID "strip_dir")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "output_dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "output_dir")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "obj_names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "src_name")
(KEYWORD in)
(ID "source_filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "src_name")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "base")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isabs")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "src_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(LIT "Don't know how to compile %s")
(PUNCT "%")
(ID "src_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "strip_dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_rc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "res_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "res_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "obj_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "obj_names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sources")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "macros")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "extra_preargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "depends")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "compile_info")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_setup_compile")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "macros")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "sources")
(PUNCT ",")
(ID "depends")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(ID "macros")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT ",")
(ID "pp_opts")
(PUNCT ",")
(ID "build")
(PUNCT "=")
(ID "compile_info")
(NEWLINE)
(ID "compile_opts")
(PUNCT "=")
(ID "extra_preargs")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "compile_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile_opts")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compile_options_debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile_opts")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compile_options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(ID "objects")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "build")
(PUNCT "[")
(ID "obj")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_c_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_opt")
(PUNCT "=")
(LIT "/Tc")
(PUNCT "+")
(ID "src")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_cpp_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_opt")
(PUNCT "=")
(LIT "/Tp")
(PUNCT "+")
(ID "src")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_rc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_opt")
(PUNCT "=")
(ID "src")
(NEWLINE)
(ID "output_opt")
(PUNCT "=")
(LIT "/fo")
(PUNCT "+")
(ID "obj")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "]")
(PUNCT "+")
(ID "pp_opts")
(PUNCT "+")
(PUNCT "[")
(ID "output_opt")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "input_opt")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(NEWLINE)
(ID "rc_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "mc")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(LIT "-h")
(PUNCT ",")
(ID "h_dir")
(PUNCT ",")
(LIT "-r")
(PUNCT ",")
(ID "rc_dir")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "src")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "rc_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "rc_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(LIT ".rc")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(LIT "/fo")
(PUNCT "+")
(ID "obj")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "rc_file")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(LIT "Don't know how to compile %s to %s")
(PUNCT "%")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "output_opt")
(PUNCT "=")
(LIT "/Fo")
(PUNCT "+")
(ID "obj")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "]")
(PUNCT "+")
(ID "compile_opts")
(PUNCT "+")
(ID "pp_opts")
(PUNCT "+")
(PUNCT "[")
(ID "input_opt")
(PUNCT ",")
(ID "output_opt")
(PUNCT "]")
(PUNCT "+")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "objects")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_static_lib")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "output_libname")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fix_object_args")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(ID "output_filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "output_libname")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_need_link")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib_args")
(PUNCT "=")
(ID "objects")
(PUNCT "+")
(PUNCT "[")
(LIT "/OUT:")
(PUNCT "+")
(ID "output_filename")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "lib")
(PUNCT "]")
(PUNCT "+")
(ID "lib_args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LibError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "skipping %s (up-to-date)")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "link")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target_desc")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "export_symbols")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "extra_preargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "build_temp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fix_object_args")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(ID "fixed_args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fix_lib_args")
(PUNCT "(")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ")")
(PUNCT "=")
(ID "fixed_args")
(NEWLINE)
(KEYWORD if)
(ID "runtime_library_dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "I don't know what to do with 'runtime_library_dirs': ")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "runtime_library_dirs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lib_opts")
(PUNCT "=")
(ID "gen_lib_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ",")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "output_dir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output_filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_need_link")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "target_desc")
(PUNCT "==")
(ID "CCompiler")
(PUNCT ".")
(ID "EXECUTABLE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "export_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "sym")
(KEYWORD in)
(PUNCT "(")
(ID "export_symbols")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "export_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/EXPORT:")
(PUNCT "+")
(ID "sym")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ld_args")
(PUNCT "=")
(PUNCT "(")
(ID "ldflags")
(PUNCT "+")
(ID "lib_opts")
(PUNCT "+")
(ID "export_opts")
(PUNCT "+")
(ID "objects")
(PUNCT "+")
(PUNCT "[")
(LIT "/OUT:")
(PUNCT "+")
(ID "output_filename")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "export_symbols")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "dll_name")
(PUNCT ",")
(ID "dll_ext")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "implib_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "objects")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "dll_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "ld_args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/IMPLIB:")
(PUNCT "+")
(ID "implib_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "extra_preargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ld_args")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "extra_preargs")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "extra_postargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ld_args")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "mkpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "linker")
(PUNCT "]")
(PUNCT "+")
(ID "ld_args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LinkError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "skipping %s (up-to-date)")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "library_dir_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "/LIBPATH:")
(PUNCT "+")
(ID "dir")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runtime_library_dir_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "don't know how to set runtime library search path for MSVC++")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "library_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lib")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "lib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_library_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "lib")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "try_names")
(PUNCT "=")
(PUNCT "[")
(ID "lib")
(PUNCT "+")
(LIT "_d")
(PUNCT ",")
(ID "lib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "try_names")
(PUNCT "=")
(PUNCT "[")
(ID "lib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "try_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "libfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "libfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "libfile")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_exe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return path to an MSVC executable program.\n\n        Tries to find the program in several places: first, one of the\n        MSVC program search paths from the registry; next, the directories\n        in the PATH environment variable.  If any of those work, return an\n        absolute path that is known to exist.  If none of them work, just\n        return the original program name, 'exe'.\n        ")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "exe")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fn")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "Path")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "exe")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fn")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "exe")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_msvc_paths")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "platform")
(PUNCT "=")
(LIT "x86")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a list of devstudio directories (include, lib or path).\n\n        Return a list of strings.  The list will be empty if unable to\n        access the registry or appropriate registry keys not found.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_can_read_reg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "+")
(LIT " dirs")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ">=")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(PUNCT "(")
(LIT "%s\\%0.1f\\VC\\VC_OBJECTS_PLATFORM_INFO\\Win32\\Directories")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(PUNCT "(")
(LIT "%s\\6.0\\Build System\\Components\\Platforms")
(LIT "\\Win32 (%s)\\Directories")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT ",")
(ID "platform")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "HKEYS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "read_values")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ">=")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__macros")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "d")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "d")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT "==")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "HKEYS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "read_values")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(LIT "%s\\6.0")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "It seems you have Visual Studio 6 installed, ")
(LIT "but the expected registry settings are not present.\n")
(LIT "You must at least run the Visual Studio GUI once ")
(LIT "so that these entries are created.")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_path_env_var")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set environment variable 'name' to an MSVC path type value.\n\n        This is equivalent to a SET command prior to execution of spawned\n        commands.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "lib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_msvc_paths")
(PUNCT "(")
(LIT "library")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_msvc_paths")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(LIT ";")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "get_build_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">=")
(LIT 8.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Importing new compiler from distutils.msvc9compiler")
(PUNCT ")")
(NEWLINE)
(ID "OldMSVCCompiler")
(PUNCT "=")
(ID "MSVCCompiler")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "msvc9compiler")
(KEYWORD import)
(ID "MSVCCompiler")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "msvc9compiler")
(KEYWORD import)
(ID "MacroExpander")
(NEWLINE)
(DEDENT)
(ENDMARKER)
