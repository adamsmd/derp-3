(LIT "IMAP4 client.\n\nBased on RFC 2060.\n\nPublic class:           IMAP4\nPublic variable:        Debug\nPublic functions:       Internaldate2tuple\n                        Int2AP\n                        ParseFlags\n                        Time2Internaldate\n")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "2.58")
(NEWLINE)
(KEYWORD import)
(ID "binascii")
(PUNCT ",")
(ID "errno")
(PUNCT ",")
(ID "random")
(PUNCT ",")
(ID "re")
(PUNCT ",")
(ID "socket")
(PUNCT ",")
(ID "subprocess")
(PUNCT ",")
(ID "sys")
(PUNCT ",")
(ID "time")
(PUNCT ",")
(ID "calendar")
(NEWLINE)
(KEYWORD from)
(ID "datetime")
(KEYWORD import)
(ID "datetime")
(PUNCT ",")
(ID "timezone")
(PUNCT ",")
(ID "timedelta")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "DEFAULT_BUFFER_SIZE")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(ID "HAVE_SSL")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "HAVE_SSL")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "IMAP4")
(PUNCT ",")
(LIT "IMAP4_stream")
(PUNCT ",")
(LIT "Internaldate2tuple")
(PUNCT ",")
(LIT "Int2AP")
(PUNCT ",")
(LIT "ParseFlags")
(PUNCT ",")
(LIT "Time2Internaldate")
(PUNCT "]")
(NEWLINE)
(ID "CRLF")
(PUNCT "=")
(LIT #"\r\n")
(NEWLINE)
(ID "Debug")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "IMAP4_PORT")
(PUNCT "=")
(LIT 143)
(NEWLINE)
(ID "IMAP4_SSL_PORT")
(PUNCT "=")
(LIT 993)
(NEWLINE)
(ID "AllowedVersions")
(PUNCT "=")
(PUNCT "(")
(LIT "IMAP4REV1")
(PUNCT ",")
(LIT "IMAP4")
(PUNCT ")")
(NEWLINE)
(ID "_MAXLINE")
(PUNCT "=")
(LIT 10000)
(NEWLINE)
(ID "Commands")
(PUNCT "=")
(PUNCT "{")
(LIT "APPEND")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "AUTHENTICATE")
(PUNCT ":")
(PUNCT "(")
(LIT "NONAUTH")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "CAPABILITY")
(PUNCT ":")
(PUNCT "(")
(LIT "NONAUTH")
(PUNCT ",")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ",")
(LIT "LOGOUT")
(PUNCT ")")
(PUNCT ",")
(LIT "CHECK")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "CLOSE")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "COPY")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "CREATE")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "DELETE")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "DELETEACL")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "EXAMINE")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "EXPUNGE")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "FETCH")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "GETACL")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "GETANNOTATION")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "GETQUOTA")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "GETQUOTAROOT")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "MYRIGHTS")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "LIST")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "LOGIN")
(PUNCT ":")
(PUNCT "(")
(LIT "NONAUTH")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "LOGOUT")
(PUNCT ":")
(PUNCT "(")
(LIT "NONAUTH")
(PUNCT ",")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ",")
(LIT "LOGOUT")
(PUNCT ")")
(PUNCT ",")
(LIT "LSUB")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "NAMESPACE")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "NOOP")
(PUNCT ":")
(PUNCT "(")
(LIT "NONAUTH")
(PUNCT ",")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ",")
(LIT "LOGOUT")
(PUNCT ")")
(PUNCT ",")
(LIT "PARTIAL")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "PROXYAUTH")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "RENAME")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "SEARCH")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "SELECT")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "SETACL")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "SETANNOTATION")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "SETQUOTA")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "SORT")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "STARTTLS")
(PUNCT ":")
(PUNCT "(")
(LIT "NONAUTH")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "STATUS")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "STORE")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "SUBSCRIBE")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(LIT "THREAD")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "UID")
(PUNCT ":")
(PUNCT "(")
(LIT "SELECTED")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "UNSUBSCRIBE")
(PUNCT ":")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "SELECTED")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "Continuation")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"\\+( (?P<data>.*))?")
(PUNCT ")")
(NEWLINE)
(ID "Flags")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #".*FLAGS \\((?P<flags>[^\\)]*)\\)")
(PUNCT ")")
(NEWLINE)
(ID "InternalDate")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #".*INTERNALDATE \"")
(LIT #"(?P<day>[ 0123][0-9])-(?P<mon>[A-Z][a-z][a-z])-(?P<year>[0-9][0-9][0-9][0-9])")
(LIT #" (?P<hour>[0-9][0-9]):(?P<min>[0-9][0-9]):(?P<sec>[0-9][0-9])")
(LIT #" (?P<zonen>[-+])(?P<zoneh>[0-9][0-9])(?P<zonem>[0-9][0-9])")
(LIT #"\"")
(PUNCT ")")
(NEWLINE)
(ID "Literal")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #".*{(?P<size>\\d+)}$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "MapCRLF")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"\\r\\n|\\r|\\n")
(PUNCT ")")
(NEWLINE)
(ID "Response_code")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"\\[(?P<type>[A-Z-]+)( (?P<data>[^\\]]*))?\\]")
(PUNCT ")")
(NEWLINE)
(ID "Untagged_response")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"\\* (?P<type>[A-Z-]+)( (?P<data>.*))?")
(PUNCT ")")
(NEWLINE)
(ID "Untagged_status")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"\\* (?P<data>\\d+) (?P<type>[A-Z-]+)( (?P<data2>.*))?")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "IMAP4")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "IMAP4 client class.\n\n    Instantiate with: IMAP4([host[, port]])\n\n            host - host's name (default: localhost);\n            port - port number (default: standard IMAP4 port).\n\n    All IMAP4rev1 commands are supported by methods of the same\n    name (in lower-case).\n\n    All arguments to commands are converted to strings, except for\n    AUTHENTICATE, and the last argument to APPEND which is passed as\n    an IMAP4 literal.  If necessary (the string contains any\n    non-printing characters or white-space and isn't enclosed with\n    either parentheses or double quotes) each string is quoted.\n    However, the 'password' argument to the LOGIN command is always\n    quoted.  If you want to avoid having an argument string quoted\n    (eg: the 'flags' argument to STORE) then enclose the string in\n    parentheses (eg: \"(\\Deleted)\").\n\n    Each command returns a tuple: (type, [data, ...]) where 'type'\n    is usually 'OK' or 'NO', and 'data' is either the text from the\n    tagged response, or untagged results from command. Each 'data'\n    is either a string, or a tuple. If a tuple, then the first part\n    is the header of the response, and the second part contains\n    the data (ie: 'literal' value).\n\n    Errors raise the exception class <instance>.error(\"<reason>\").\n    IMAP4 server errors raise <instance>.abort(\"<reason>\"),\n    which is a sub-class of 'error'. Mailbox status changes\n    from READ-WRITE to READ-ONLY raise the exception class\n    <instance>.readonly(\"<reason>\"), which is a sub-class of 'abort'.\n\n    \"error\" exceptions imply a program error.\n    \"abort\" exceptions imply the connection should be reset, and\n            the command re-tried.\n    \"readonly\" exceptions imply the command should be re-tried.\n\n    Note: to use this module, you must read the RFCs pertaining to the\n    IMAP4 protocol, as the semantics of the arguments to each IMAP4\n    command are left to the invoker, not to mention the results. Also,\n    most IMAP servers implement a sub-set of the commands available here.\n    ")
(NEWLINE)
(KEYWORD class)
(ID "error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "abort")
(PUNCT "(")
(ID "error")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "readonly")
(PUNCT "(")
(ID "abort")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "IMAP4_PORT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT "=")
(ID "Debug")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "LOGOUT")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "literal")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "continuation_response")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "is_readonly")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagnum")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tls_established")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_connect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_connect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tagpre")
(PUNCT "=")
(ID "Int2AP")
(PUNCT "(")
(ID "random")
(PUNCT ".")
(ID "randint")
(PUNCT "(")
(LIT 4096)
(PUNCT ",")
(LIT 65535)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagre")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"(?P<tag>")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "tagpre")
(PUNCT "+")
(LIT #"\\d+) (?P<type>[A-Z]+) (?P<data>.*)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cmd_log_len")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cmd_log_idx")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cmd_log")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "imaplib version %s")
(PUNCT "%")
(ID "__version__")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "new IMAP4 connection, tag=%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "tagpre")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_response")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "PREAUTH")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "AUTH")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "OK")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "NONAUTH")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_get_capabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "CAPABILITIES: %r")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "capabilities")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "version")
(KEYWORD in)
(ID "AllowedVersions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "version")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "capabilities")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "PROTOCOL_VERSION")
(PUNCT "=")
(ID "version")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "server not IMAP4 compliant")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "attr")
(KEYWORD in)
(ID "Commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Unknown IMAP4 command: '%s'")
(PUNCT "%")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_socket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "IMAP4_PORT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Setup connection to remote server on \"host:port\"\n            (default: localhost:standard IMAP4 port).\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_create_socket")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read 'size' bytes from remote.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read line from remote.")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "got more than %d bytes")
(PUNCT "%")
(ID "_MAXLINE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send data to remote.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close I/O established in \"open\".")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "SHUT_RDWR")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "ENOTCONN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "socket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return socket instance used to connect to IMAP4 server.\n\n        socket = <instance>.socket()\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "sock")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "recent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return most recent 'RECENT' responses if any exist,\n        else prompt server for an update using the 'NOOP' command.\n\n        (typ, [data]) = <instance>.recent()\n\n        'data' is None if no new messages,\n        else list of RECENT responses, most recent last.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "RECENT")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(LIT "OK")
(PUNCT ",")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dat")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "noop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return data for response 'code' if received, or None.\n\n        Old value for response 'code' is cleared.\n\n        (code, [data]) = <instance>.response(code)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ",")
(ID "code")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "date_time")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Append message to named mailbox.\n\n        (typ, [data]) = <instance>.append(mailbox, flags, date_time, message)\n\n                All args except `message' can be None.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "APPEND")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "mailbox")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox")
(PUNCT "=")
(LIT "INBOX")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "flags")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "flags")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "!=")
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(LIT "(%s)")
(PUNCT "%")
(ID "flags")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "date_time")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "date_time")
(PUNCT "=")
(ID "Time2Internaldate")
(PUNCT "(")
(ID "date_time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "date_time")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "literal")
(PUNCT "=")
(ID "MapCRLF")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "CRLF")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "date_time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "authenticate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mechanism")
(PUNCT ",")
(ID "authobject")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Authenticate command - requires response processing.\n\n        'mechanism' specifies which authentication mechanism is to\n        be used - it must appear in <instance>.capabilities in the\n        form AUTH=<mechanism>.\n\n        'authobject' must be a callable object:\n\n                data = authobject(response)\n\n        It will be called to process server continuation responses; the\n        response argument it is passed will be a bytes.  It should return bytes\n        data that will be base64 encoded and sent to the server.  It should\n        return None if the client abort response '*' should be sent instead.\n        ")
(NEWLINE)
(ID "mech")
(PUNCT "=")
(ID "mechanism")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "literal")
(PUNCT "=")
(ID "_Authenticator")
(PUNCT "(")
(ID "authobject")
(PUNCT ")")
(PUNCT ".")
(ID "process")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "AUTHENTICATE")
(PUNCT ",")
(ID "mech")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typ")
(PUNCT "!=")
(LIT "OK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "dat")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "AUTH")
(NEWLINE)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "capability")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "(typ, [data]) = <instance>.capability()\n        Fetch capabilities list from server.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "CAPABILITY")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Checkpoint mailbox on server.\n\n        (typ, [data]) = <instance>.check()\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "CHECK")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close currently selected mailbox.\n\n        Deleted messages are removed from writable mailbox.\n        This is the recommended command before 'LOGOUT'.\n\n        (typ, [data]) = <instance>.close()\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "CLOSE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "AUTH")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_set")
(PUNCT ",")
(ID "new_mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy 'message_set' messages onto end of 'new_mailbox'.\n\n        (typ, [data]) = <instance>.copy(message_set, new_mailbox)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "COPY")
(PUNCT ",")
(ID "message_set")
(PUNCT ",")
(ID "new_mailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create new mailbox.\n\n        (typ, [data]) = <instance>.create(mailbox)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "CREATE")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete old mailbox.\n\n        (typ, [data]) = <instance>.delete(mailbox)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "DELETE")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "deleteacl")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "who")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete the ACLs (remove any rights) set for who on mailbox.\n\n        (typ, [data]) = <instance>.deleteacl(mailbox, who)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "DELETEACL")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "who")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expunge")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Permanently remove deleted items from selected mailbox.\n\n        Generates 'EXPUNGE' response for each deleted message.\n\n        (typ, [data]) = <instance>.expunge()\n\n        'data' is list of 'EXPUNGE'd message numbers in order received.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "EXPUNGE")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fetch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_set")
(PUNCT ",")
(ID "message_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fetch (parts of) messages.\n\n        (typ, [data, ...]) = <instance>.fetch(message_set, message_parts)\n\n        'message_parts' should be a string of selected parts\n        enclosed in parentheses, eg: \"(UID BODY[TEXT])\".\n\n        'data' are tuples of message part envelope and data.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "FETCH")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "message_set")
(PUNCT ",")
(ID "message_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getacl")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the ACLs for a mailbox.\n\n        (typ, [data]) = <instance>.getacl(mailbox)\n        ")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "GETACL")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "ACL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getannotation")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "attribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "(typ, [data]) = <instance>.getannotation(mailbox, entry, attribute)\n        Retrieve ANNOTATIONs.")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "GETANNOTATION")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "entry")
(PUNCT ",")
(ID "attribute")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "ANNOTATION")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getquota")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "root")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the quota root's resource usage and limits.\n\n        Part of the IMAP4 QUOTA extension defined in rfc2087.\n\n        (typ, [data]) = <instance>.getquota(root)\n        ")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "GETQUOTA")
(PUNCT ",")
(ID "root")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "QUOTA")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getquotaroot")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the list of quota roots for the named mailbox.\n\n        (typ, [[QUOTAROOT responses...], [QUOTA responses]]) = <instance>.getquotaroot(mailbox)\n        ")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "GETQUOTAROOT")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "quota")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "QUOTA")
(PUNCT ")")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "quotaroot")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "QUOTAROOT")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(PUNCT "[")
(ID "quotaroot")
(PUNCT ",")
(ID "quota")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "directory")
(PUNCT "=")
(LIT "\"\"")
(PUNCT ",")
(ID "pattern")
(PUNCT "=")
(LIT "*")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "List mailbox names in directory matching pattern.\n\n        (typ, [data]) = <instance>.list(directory='\"\"', pattern='*')\n\n        'data' is list of LIST responses.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "LIST")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "directory")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Identify client using plaintext password.\n\n        (typ, [data]) = <instance>.login(user, password)\n\n        NB: 'password' will be quoted.\n        ")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "LOGIN")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_quote")
(PUNCT "(")
(ID "password")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typ")
(PUNCT "!=")
(LIT "OK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "dat")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "AUTH")
(NEWLINE)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "login_cram_md5")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Force use of CRAM-MD5 authentication.\n\n        (typ, [data]) = <instance>.login_cram_md5(user, password)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "user")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT "=")
(ID "user")
(PUNCT ",")
(ID "password")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "authenticate")
(PUNCT "(")
(LIT "CRAM-MD5")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_CRAM_MD5_AUTH")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_CRAM_MD5_AUTH")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "challenge")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Authobject to use with CRAM-MD5 authentication. ")
(NEWLINE)
(KEYWORD import)
(ID "hmac")
(NEWLINE)
(ID "pwd")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ASCII")
(PUNCT ")")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD else)
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "user")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "hmac")
(PUNCT ".")
(ID "HMAC")
(PUNCT "(")
(ID "pwd")
(PUNCT ",")
(ID "challenge")
(PUNCT ",")
(LIT "md5")
(PUNCT ")")
(PUNCT ".")
(ID "hexdigest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "logout")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shutdown connection to server.\n\n        (typ, [data]) = <instance>.logout()\n\n        Returns server 'BYE' response.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "LOGOUT")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "LOGOUT")
(PUNCT ")")
(NEWLINE)
(KEYWORD except)
(PUNCT ":")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(LIT "NO")
(PUNCT ",")
(PUNCT "[")
(LIT "%s: %s")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "BYE")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "BYE")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT "[")
(LIT "BYE")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lsub")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "directory")
(PUNCT "=")
(LIT "\"\"")
(PUNCT ",")
(ID "pattern")
(PUNCT "=")
(LIT "*")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "List 'subscribed' mailbox names in directory matching pattern.\n\n        (typ, [data, ...]) = <instance>.lsub(directory='\"\"', pattern='*')\n\n        'data' are tuples of message part envelope and data.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "LSUB")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "directory")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "myrights")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).\n\n        (typ, [data]) = <instance>.myrights(mailbox)\n        ")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "MYRIGHTS")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "MYRIGHTS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "namespace")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns IMAP namespaces ala rfc2342\n\n        (typ, [data, ...]) = <instance>.namespace()\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "NAMESPACE")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "noop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send NOOP command.\n\n        (typ, [data]) = <instance>.noop()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dump_ur")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "NOOP")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "partial")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_num")
(PUNCT ",")
(ID "message_part")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "length")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fetch truncated part of a message.\n\n        (typ, [data, ...]) = <instance>.partial(message_num, message_part, start, length)\n\n        'data' is tuple of message part envelope and data.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "PARTIAL")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "message_num")
(PUNCT ",")
(ID "message_part")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "length")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "FETCH")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxyauth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Assume authentication as \"user\".\n\n        Allows an authorised administrator to proxy into any user's\n        mailbox.\n\n        (typ, [data]) = <instance>.proxyauth(user)\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "PROXYAUTH")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "PROXYAUTH")
(PUNCT ",")
(ID "user")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "oldmailbox")
(PUNCT ",")
(ID "newmailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Rename old mailbox name to new.\n\n        (typ, [data]) = <instance>.rename(oldmailbox, newmailbox)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "RENAME")
(PUNCT ",")
(ID "oldmailbox")
(PUNCT ",")
(ID "newmailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "search")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(PUNCT "*")
(ID "criteria")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Search mailbox for matching messages.\n\n        (typ, [data]) = <instance>.search(charset, criterion, ...)\n\n        'data' is space separated list of matching message numbers.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "SEARCH")
(NEWLINE)
(KEYWORD if)
(ID "charset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "CHARSET")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(PUNCT "*")
(ID "criteria")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "criteria")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT "=")
(LIT "INBOX")
(PUNCT ",")
(ID "readonly")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Select a mailbox.\n\n        Flush all untagged responses.\n\n        (typ, [data]) = <instance>.select(mailbox='INBOX', readonly=False)\n\n        'data' is count of messages in mailbox ('EXISTS' response).\n\n        Mandated responses are ('FLAGS', 'EXISTS', 'RECENT', 'UIDVALIDITY'), so\n        other responses should be obtained via <instance>.response('FLAGS') etc.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "is_readonly")
(PUNCT "=")
(ID "readonly")
(NEWLINE)
(KEYWORD if)
(ID "readonly")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "EXAMINE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "SELECT")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typ")
(PUNCT "!=")
(LIT "OK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "AUTH")
(NEWLINE)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "SELECTED")
(NEWLINE)
(KEYWORD if)
(LIT "READ-ONLY")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(KEYWORD and)
(KEYWORD not)
(ID "readonly")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dump_ur")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "readonly")
(PUNCT "(")
(LIT "%s is not writable")
(PUNCT "%")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "EXISTS")
(PUNCT ",")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setacl")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "who")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set a mailbox acl.\n\n        (typ, [data]) = <instance>.setacl(mailbox, who, what)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "SETACL")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "who")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setannotation")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "(typ, [data]) = <instance>.setannotation(mailbox[, entry, attribute]+)\n        Set ANNOTATIONs.")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "SETANNOTATION")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "ANNOTATION")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setquota")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "limits")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the quota root's resource limits.\n\n        (typ, [data]) = <instance>.setquota(root, limits)\n        ")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "SETQUOTA")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "limits")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "QUOTA")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sort")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sort_criteria")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(PUNCT "*")
(ID "search_criteria")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "IMAP4rev1 extension SORT command.\n\n        (typ, [data]) = <instance>.sort(sort_criteria, charset, search_criteria, ...)\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "SORT")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "sort_criteria")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "sort_criteria")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "!=")
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sort_criteria")
(PUNCT "=")
(LIT "(%s)")
(PUNCT "%")
(ID "sort_criteria")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "sort_criteria")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(PUNCT "*")
(ID "search_criteria")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "starttls")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ssl_context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "STARTTLS")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "HAVE_SSL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "SSL support missing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tls_established")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "TLS session already established")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "capabilities")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "TLS not supported by server")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ssl_context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssl_context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_stdlib_context")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typ")
(PUNCT "==")
(LIT "OK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "ssl_context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tls_established")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_get_capabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Couldn't establish TLS session")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "status")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Request named status conditions for mailbox.\n\n        (typ, [data]) = <instance>.status(mailbox, names)\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "STATUS")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mailbox")
(PUNCT ",")
(ID "names")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "store")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_set")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Alters flag dispositions for messages in mailbox.\n\n        (typ, [data]) = <instance>.store(message_set, command, flags)\n        ")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "flags")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "flags")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "!=")
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(LIT "(%s)")
(PUNCT "%")
(ID "flags")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "STORE")
(PUNCT ",")
(ID "message_set")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(LIT "FETCH")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "subscribe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Subscribe to new mailbox.\n\n        (typ, [data]) = <instance>.subscribe(mailbox)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "SUBSCRIBE")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "thread")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "threading_algorithm")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(PUNCT "*")
(ID "search_criteria")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "IMAPrev1 extension THREAD command.\n\n        (type, [data]) = <instance>.thread(threading_algorithm, charset, search_criteria, ...)\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "THREAD")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "threading_algorithm")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(PUNCT "*")
(ID "search_criteria")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "uid")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute \"command arg ...\" with messages identified by UID,\n                rather than message number.\n\n        (typ, [data]) = <instance>.uid(command, arg1, arg2, ...)\n\n        Returns response appropriate to 'command'.\n        ")
(NEWLINE)
(ID "command")
(PUNCT "=")
(ID "command")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "command")
(KEYWORD in)
(ID "Commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Unknown IMAP4 UID command: %s")
(PUNCT "%")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD not)
(KEYWORD in)
(ID "Commands")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "command %s illegal in state %s, ")
(LIT "only allowed in states %s")
(PUNCT "%")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "Commands")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(LIT "UID")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "command")
(KEYWORD in)
(PUNCT "(")
(LIT "SEARCH")
(PUNCT ",")
(LIT "SORT")
(PUNCT ",")
(LIT "THREAD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "command")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "FETCH")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_untagged_response")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unsubscribe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unsubscribe from old mailbox.\n\n        (typ, [data]) = <instance>.unsubscribe(mailbox)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(LIT "UNSUBSCRIBE")
(PUNCT ",")
(ID "mailbox")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xatom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Allow simple extension commands\n                notified by server in CAPABILITY response.\n\n        Assumes command is legal in current state.\n\n        (typ, [data]) = <instance>.xatom(name, arg, ...)\n\n        Returns response appropriate to extension command `name'.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD in)
(ID "Commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Commands")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_simple_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_append_untagged")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "dat")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dat")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "ur")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "untagged_responses[%s] %s += [\"%r\"]")
(PUNCT "%")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "ur")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "typ")
(KEYWORD in)
(ID "ur")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ur")
(PUNCT "[")
(ID "typ")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dat")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ur")
(PUNCT "[")
(ID "typ")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "dat")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_bye")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bye")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "BYE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "bye")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(ID "bye")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD not)
(KEYWORD in)
(ID "Commands")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "literal")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "command %s illegal in state %s, ")
(LIT "only allowed in states %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "Commands")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "typ")
(KEYWORD in)
(PUNCT "(")
(LIT "OK")
(PUNCT ",")
(LIT "NO")
(PUNCT ",")
(LIT "BAD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "typ")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT "[")
(ID "typ")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(LIT "READ-ONLY")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_readonly")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "readonly")
(PUNCT "(")
(LIT "mailbox status changed to READ-ONLY")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tag")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_new_tag")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "tag")
(PUNCT "+")
(LIT #" ")
(PUNCT "+")
(ID "name")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "arg")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(KEYWORD continue)
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "arg")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "arg")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "+")
(LIT #" ")
(PUNCT "+")
(ID "arg")
(NEWLINE)
(DEDENT)
(ID "literal")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "literal")
(NEWLINE)
(KEYWORD if)
(ID "literal")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "literal")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "literal")
(PUNCT ")")
(KEYWORD is)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "literator")
(PUNCT "=")
(ID "literal")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "literator")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(LIT " {%s}")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "literal")
(PUNCT ")")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "> %r")
(PUNCT "%")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_log")
(PUNCT "(")
(LIT "> %r")
(PUNCT "%")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "data")
(PUNCT "+")
(ID "CRLF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "socket error: %s")
(PUNCT "%")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "literal")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tag")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_get_response")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tag")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "literator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "literal")
(PUNCT "=")
(ID "literator")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "continuation_response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "write literal size %s")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "literal")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "literal")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "CRLF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "socket error: %s")
(PUNCT "%")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "literator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "tag")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_command_complete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "tag")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "!=")
(LIT "LOGOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_check_bye")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typ")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_tagged_response")
(PUNCT "(")
(ID "tag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "self")
(PUNCT ".")
(ID "abort")
(KEYWORD as)
(ID "val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "command: %s => %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "self")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "command: %s => %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(PUNCT "!=")
(LIT "LOGOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_check_bye")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "typ")
(PUNCT "==")
(LIT "BAD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "%s command error: %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "typ")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_capabilities")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "capability")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dat")
(PUNCT "==")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "no CAPABILITY response from server")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dat")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "dat")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "dat")
(PUNCT "=")
(ID "dat")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "capabilities")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "dat")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_response")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_line")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_match")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tagre")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tag")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "tag")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "tag")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "unexpected tagged response: %s")
(PUNCT "%")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "type")
(PUNCT ")")
(NEWLINE)
(ID "typ")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(PUNCT "[")
(ID "dat")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dat2")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_match")
(PUNCT "(")
(ID "Untagged_response")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_match")
(PUNCT "(")
(ID "Untagged_status")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dat2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "data2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_match")
(PUNCT "(")
(ID "Continuation")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "continuation_response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "unexpected response: '%s'")
(PUNCT "%")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "typ")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "type")
(PUNCT ")")
(NEWLINE)
(ID "typ")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dat")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "dat")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "dat2")
(PUNCT ":")
(ID "dat")
(PUNCT "=")
(ID "dat")
(PUNCT "+")
(LIT #" ")
(PUNCT "+")
(ID "dat2")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_match")
(PUNCT "(")
(ID "Literal")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "read literal size %s")
(PUNCT "%")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_append_untagged")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(PUNCT "(")
(ID "dat")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "dat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_line")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_append_untagged")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "typ")
(KEYWORD in)
(PUNCT "(")
(LIT "OK")
(PUNCT ",")
(LIT "NO")
(PUNCT ",")
(LIT "BAD")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_match")
(PUNCT "(")
(ID "Response_code")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typ")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "type")
(PUNCT ")")
(NEWLINE)
(ID "typ")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_append_untagged")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(KEYWORD and)
(ID "typ")
(KEYWORD in)
(PUNCT "(")
(LIT "NO")
(PUNCT ",")
(LIT "BAD")
(PUNCT ",")
(LIT "BYE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "%s response: %r")
(PUNCT "%")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_tagged_response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tag")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_bye")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_get_response")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "self")
(PUNCT ".")
(ID "abort")
(KEYWORD as)
(ID "val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "print_log")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_line")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "socket error: EOF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(LIT "socket error: unterminated line: %r")
(PUNCT "%")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "< %r")
(PUNCT "%")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_log")
(PUNCT "(")
(LIT "< %r")
(PUNCT "%")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_match")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cre")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT "=")
(ID "cre")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "\tmatched r'%r' => %r")
(PUNCT "%")
(PUNCT "(")
(ID "cre")
(PUNCT ".")
(ID "pattern")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "mo")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "mo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_new_tag")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tag")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tagpre")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tagnum")
(PUNCT ")")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagnum")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tagnum")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagged_commands")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "tag")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_quote")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "arg")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(NEWLINE)
(ID "arg")
(PUNCT "=")
(ID "arg")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\\\"")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "\"")
(PUNCT "+")
(ID "arg")
(PUNCT "+")
(LIT "\"")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_simple_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_command_complete")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_command")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_untagged_response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "typ")
(PUNCT "==")
(LIT "NO")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "dat")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "untagged_responses")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "untagged_responses[%s] => %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "typ")
(PUNCT ",")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_mesg")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "secs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "secs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "secs")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tm")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%M:%S")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "secs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "  %s.%02d %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "tm")
(PUNCT ",")
(PUNCT "(")
(ID "secs")
(PUNCT "*")
(LIT 100)
(PUNCT ")")
(PUNCT "%")
(LIT 100)
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dump_ur")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "l")
(PUNCT ":")
(KEYWORD return)
(NEWLINE)
(ID "t")
(PUNCT "=")
(LIT "\n\t\t")
(NEWLINE)
(ID "l")
(PUNCT "=")
(ID "map")
(PUNCT "(")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(LIT "%s: \"%s\"")
(PUNCT "%")
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "x")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD and)
(LIT "\" \"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "l")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "untagged responses dump:%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "t")
(PUNCT ",")
(ID "t")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_log")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cmd_log")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_cmd_log_idx")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cmd_log_idx")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_cmd_log_idx")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "_cmd_log_len")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cmd_log_idx")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_log")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "last %d IMAP4 interactions:")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_cmd_log")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cmd_log_idx")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_cmd_log_len")
(NEWLINE)
(KEYWORD while)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_cmd_log")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "_cmd_log_len")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "HAVE_SSL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "IMAP4_SSL")
(PUNCT "(")
(ID "IMAP4")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "IMAP4 client class over SSL connection\n\n        Instantiate with: IMAP4_SSL([host[, port[, keyfile[, certfile[, ssl_context]]]]])\n\n                host - host's name (default: localhost);\n                port - port number (default: standard IMAP4 SSL port);\n                keyfile - PEM formatted file that contains your private key (default: None);\n                certfile - PEM formatted certificate chain file (default: None);\n                ssl_context - a SSLContext object that contains your certificate chain\n                              and private key (default: None)\n                Note: if ssl_context is provided, then parameters keyfile or\n                certfile should not be set otherwise ValueError is raised.\n\n        for more documentation see the docstring of the parent class IMAP4.\n        ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "IMAP4_SSL_PORT")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ssl_context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ssl_context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "keyfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "ssl_context and keyfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ssl_context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "certfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "ssl_context and certfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(NEWLINE)
(KEYWORD if)
(ID "ssl_context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssl_context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_stdlib_context")
(PUNCT "(")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ssl_context")
(PUNCT "=")
(ID "ssl_context")
(NEWLINE)
(ID "IMAP4")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_socket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(ID "IMAP4")
(PUNCT ".")
(ID "_create_socket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "ssl_context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "IMAP4_SSL_PORT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Setup connection to remote server on \"host:port\".\n                (default: localhost:standard IMAP4 SSL port).\n            This connection will be used by the routines:\n                read, readline, send, shutdown.\n            ")
(NEWLINE)
(ID "IMAP4")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "IMAP4_SSL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "IMAP4_stream")
(PUNCT "(")
(ID "IMAP4")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "IMAP4 client class over a stream\n\n    Instantiate with: IMAP4_stream(command)\n\n            where \"command\" is a string that can be passed to subprocess.Popen()\n\n    for more documentation see the docstring of the parent class IMAP4.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT "=")
(ID "command")
(NEWLINE)
(ID "IMAP4")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Setup a stream connection.\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "process")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "Popen")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(ID "DEFAULT_BUFFER_SIZE")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "close_fds")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writefile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "stdin")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "readfile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read 'size' bytes from remote.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "readfile")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read line from remote.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "readfile")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send data to remote.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writefile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writefile")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close I/O established in \"open\".")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "readfile")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writefile")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_Authenticator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Private class to provide en/decoding\n            for base64-based authentication conversation.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mechinst")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "mech")
(PUNCT "=")
(ID "mechinst")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "process")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mech")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ret")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "*")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "ret")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "inp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "oup")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "inp")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inp")
(PUNCT "=")
(ID "inp")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "inp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "inp")
(PUNCT ")")
(PUNCT ">")
(LIT 48)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "inp")
(PUNCT "[")
(PUNCT ":")
(LIT 48)
(PUNCT "]")
(NEWLINE)
(ID "inp")
(PUNCT "=")
(ID "inp")
(PUNCT "[")
(LIT 48)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "inp")
(NEWLINE)
(ID "inp")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "e")
(PUNCT "=")
(ID "binascii")
(PUNCT ".")
(ID "b2a_base64")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "oup")
(PUNCT "=")
(ID "oup")
(PUNCT "+")
(ID "e")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "oup")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "inp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "inp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "binascii")
(PUNCT ".")
(ID "a2b_base64")
(PUNCT "(")
(ID "inp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "Months")
(PUNCT "=")
(LIT " Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(ID "Mon2num")
(PUNCT "=")
(PUNCT "{")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(ID "n")
(PUNCT "+")
(LIT 1)
(KEYWORD for)
(ID "n")
(PUNCT ",")
(ID "s")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "Months")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "Internaldate2tuple")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse an IMAP4 INTERNALDATE string.\n\n    Return corresponding local time.  The return value is a\n    time.struct_time tuple or None if the string has wrong format.\n    ")
(NEWLINE)
(ID "mo")
(PUNCT "=")
(ID "InternalDate")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "mo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "mon")
(PUNCT "=")
(ID "Mon2num")
(PUNCT "[")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "mon")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "zonen")
(PUNCT "=")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "zonen")
(PUNCT ")")
(NEWLINE)
(ID "day")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "day")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "year")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "year")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "hour")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "hour")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "min")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "min")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sec")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "sec")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "zoneh")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "zoneh")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "zonem")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "zonem")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "zone")
(PUNCT "=")
(PUNCT "(")
(ID "zoneh")
(PUNCT "*")
(LIT 60)
(PUNCT "+")
(ID "zonem")
(PUNCT ")")
(PUNCT "*")
(LIT 60)
(NEWLINE)
(KEYWORD if)
(ID "zonen")
(PUNCT "==")
(LIT #"-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zone")
(PUNCT "=")
(PUNCT "-")
(ID "zone")
(NEWLINE)
(DEDENT)
(ID "tt")
(PUNCT "=")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hour")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "utc")
(PUNCT "=")
(ID "calendar")
(PUNCT ".")
(ID "timegm")
(PUNCT "(")
(ID "tt")
(PUNCT ")")
(PUNCT "-")
(ID "zone")
(NEWLINE)
(KEYWORD return)
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "utc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Int2AP")
(PUNCT "(")
(ID "num")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert integer to A-P string representation.")
(NEWLINE)
(ID "val")
(PUNCT "=")
(LIT #"")
(PUNCT ";")
(ID "AP")
(PUNCT "=")
(LIT #"ABCDEFGHIJKLMNOP")
(NEWLINE)
(ID "num")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "abs")
(PUNCT "(")
(ID "num")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "num")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num")
(PUNCT ",")
(ID "mod")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "num")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "val")
(PUNCT "=")
(ID "AP")
(PUNCT "[")
(ID "mod")
(PUNCT ":")
(ID "mod")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ParseFlags")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert IMAP4 flags response to python tuple.")
(NEWLINE)
(ID "mo")
(PUNCT "=")
(ID "Flags")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "mo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "flags")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Time2Internaldate")
(PUNCT "(")
(ID "date_time")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert date_time to IMAP4 INTERNALDATE representation.\n\n    Return string in form: '\"DD-Mmm-YYYY HH:MM:SS +HHMM\"'.  The\n    date_time argument can be a number (int or float) representing\n    seconds since epoch (as returned by time.time()), a 9-tuple\n    representing local time, an instance of time.struct_time (as\n    returned by time.localtime()), an aware datetime instance or a\n    double-quoted string.  In the last case, it is assumed to already\n    be in the correct format.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "date_time")
(PUNCT ",")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "fromtimestamp")
(PUNCT "(")
(ID "date_time")
(PUNCT ",")
(ID "timezone")
(PUNCT ".")
(ID "utc")
(PUNCT ")")
(PUNCT ".")
(ID "astimezone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "date_time")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gmtoff")
(PUNCT "=")
(ID "date_time")
(PUNCT ".")
(ID "tm_gmtoff")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "time")
(PUNCT ".")
(ID "daylight")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dst")
(PUNCT "=")
(ID "date_time")
(PUNCT "[")
(LIT 8)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dst")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dst")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "mktime")
(PUNCT "(")
(ID "date_time")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 8)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "gmtoff")
(PUNCT "=")
(PUNCT "-")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "timezone")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "altzone")
(PUNCT ")")
(PUNCT "[")
(ID "dst")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gmtoff")
(PUNCT "=")
(PUNCT "-")
(ID "time")
(PUNCT ".")
(ID "timezone")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "delta")
(PUNCT "=")
(ID "timedelta")
(PUNCT "(")
(ID "seconds")
(PUNCT "=")
(ID "gmtoff")
(PUNCT ")")
(NEWLINE)
(ID "dt")
(PUNCT "=")
(ID "datetime")
(PUNCT "(")
(PUNCT "*")
(ID "date_time")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ",")
(ID "tzinfo")
(PUNCT "=")
(ID "timezone")
(PUNCT "(")
(ID "delta")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "date_time")
(PUNCT ",")
(ID "datetime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "date_time")
(PUNCT ".")
(ID "tzinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "date_time must be aware")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dt")
(PUNCT "=")
(ID "date_time")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "date_time")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "date_time")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "date_time")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "==")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "date_time")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "date_time not of a known type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fmt")
(PUNCT "=")
(LIT "\"%d-{}-%Y %H:%M:%S %z\"")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "Months")
(PUNCT "[")
(ID "dt")
(PUNCT ".")
(ID "month")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "dt")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(ID "fmt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "getopt")
(PUNCT ",")
(ID "getpass")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "optlist")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "d:s:")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "optlist")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stream_command")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "optlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "-d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Debug")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opt")
(PUNCT "==")
(LIT "-s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream_command")
(PUNCT "=")
(ID "val")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "stream_command")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "USER")
(PUNCT "=")
(ID "getpass")
(PUNCT ".")
(ID "getuser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "PASSWD")
(PUNCT "=")
(ID "getpass")
(PUNCT ".")
(ID "getpass")
(PUNCT "(")
(LIT "IMAP password for %s on %s: ")
(PUNCT "%")
(PUNCT "(")
(ID "USER")
(PUNCT ",")
(ID "host")
(KEYWORD or)
(LIT "localhost")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "test_mesg")
(PUNCT "=")
(LIT "From: %(user)s@localhost%(lf)sSubject: IMAP4 test%(lf)s%(lf)sdata...%(lf)s")
(PUNCT "%")
(PUNCT "{")
(LIT "user")
(PUNCT ":")
(ID "USER")
(PUNCT ",")
(LIT "lf")
(PUNCT ":")
(LIT "\n")
(PUNCT "}")
(NEWLINE)
(ID "test_seq1")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(LIT "login")
(PUNCT ",")
(PUNCT "(")
(ID "USER")
(PUNCT ",")
(ID "PASSWD")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "create")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp/xxx 1")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "rename")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp/xxx 1")
(PUNCT ",")
(LIT "/tmp/yyy")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "CREATE")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp/yyz 2")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "append")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp/yyz 2")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "test_mesg")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "list")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp")
(PUNCT ",")
(LIT "yy*")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "select")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp/yyz 2")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "search")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "SUBJECT")
(PUNCT ",")
(LIT "test")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "fetch")
(PUNCT ",")
(PUNCT "(")
(LIT "1")
(PUNCT ",")
(LIT "(FLAGS INTERNALDATE RFC822)")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "store")
(PUNCT ",")
(PUNCT "(")
(LIT "1")
(PUNCT ",")
(LIT "FLAGS")
(PUNCT ",")
(LIT "(\\Deleted)")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "namespace")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "expunge")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "recent")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "close")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "test_seq2")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(LIT "select")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "response")
(PUNCT ",")
(PUNCT "(")
(LIT "UIDVALIDITY")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "uid")
(PUNCT ",")
(PUNCT "(")
(LIT "SEARCH")
(PUNCT ",")
(LIT "ALL")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "response")
(PUNCT ",")
(PUNCT "(")
(LIT "EXISTS")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "append")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "test_mesg")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "recent")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "logout")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "M")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "%s %s")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "M")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "M")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "%s => %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "typ")
(PUNCT ",")
(ID "dat")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typ")
(PUNCT "==")
(LIT "NO")
(PUNCT ":")
(KEYWORD raise)
(ID "dat")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "dat")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stream_command")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "M")
(PUNCT "=")
(ID "IMAP4_stream")
(PUNCT "(")
(ID "stream_command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "M")
(PUNCT "=")
(ID "IMAP4")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "M")
(PUNCT ".")
(ID "state")
(PUNCT "==")
(LIT "AUTH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test_seq1")
(PUNCT "=")
(ID "test_seq1")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "M")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "PROTOCOL_VERSION = %s")
(PUNCT "%")
(ID "M")
(PUNCT ".")
(ID "PROTOCOL_VERSION")
(PUNCT ")")
(NEWLINE)
(ID "M")
(PUNCT ".")
(ID "_mesg")
(PUNCT "(")
(LIT "CAPABILITIES = %r")
(PUNCT "%")
(PUNCT "(")
(ID "M")
(PUNCT ".")
(ID "capabilities")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(PUNCT ",")
(ID "args")
(KEYWORD in)
(ID "test_seq1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "run")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "ml")
(KEYWORD in)
(ID "run")
(PUNCT "(")
(LIT "list")
(PUNCT ",")
(PUNCT "(")
(LIT "/tmp/")
(PUNCT ",")
(LIT "yy%")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mo")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT ".*\"([^\"]+)\"$")
(PUNCT ",")
(ID "ml")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mo")
(PUNCT ":")
(ID "path")
(PUNCT "=")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "path")
(PUNCT "=")
(ID "ml")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "run")
(PUNCT "(")
(LIT "delete")
(PUNCT ",")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "cmd")
(PUNCT ",")
(ID "args")
(KEYWORD in)
(ID "test_seq2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dat")
(PUNCT "=")
(ID "run")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT "!=")
(PUNCT "(")
(LIT "uid")
(PUNCT ",")
(PUNCT "(")
(LIT "SEARCH")
(PUNCT ",")
(LIT "ALL")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "uid")
(PUNCT "=")
(ID "dat")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "uid")
(PUNCT ":")
(KEYWORD continue)
(NEWLINE)
(ID "run")
(PUNCT "(")
(LIT "uid")
(PUNCT ",")
(PUNCT "(")
(LIT "FETCH")
(PUNCT ",")
(LIT "%s")
(PUNCT "%")
(ID "uid")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "(FLAGS INTERNALDATE RFC822.SIZE RFC822.HEADER RFC822.TEXT)")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "\nAll tests OK.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\nTests failed.")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "Debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\nIf you would like to see debugging output,\ntry: %s -d5\n")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
