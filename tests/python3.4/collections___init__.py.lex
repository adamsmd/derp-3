(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "deque")
(PUNCT ",")
(LIT "defaultdict")
(PUNCT ",")
(LIT "namedtuple")
(PUNCT ",")
(LIT "UserDict")
(PUNCT ",")
(LIT "UserList")
(PUNCT ",")
(LIT "UserString")
(PUNCT ",")
(LIT "Counter")
(PUNCT ",")
(LIT "OrderedDict")
(PUNCT ",")
(LIT "ChainMap")
(PUNCT "]")
(NEWLINE)
(KEYWORD from)
(ID "_collections_abc")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD import)
(ID "_collections_abc")
(NEWLINE)
(ID "__all__")
(PUNCT "+=")
(ID "_collections_abc")
(PUNCT ".")
(ID "__all__")
(NEWLINE)
(KEYWORD from)
(ID "_collections")
(KEYWORD import)
(ID "deque")
(PUNCT ",")
(ID "defaultdict")
(NEWLINE)
(KEYWORD from)
(ID "operator")
(KEYWORD import)
(ID "itemgetter")
(KEYWORD as)
(ID "_itemgetter")
(PUNCT ",")
(ID "eq")
(KEYWORD as)
(ID "_eq")
(NEWLINE)
(KEYWORD from)
(ID "keyword")
(KEYWORD import)
(ID "iskeyword")
(KEYWORD as)
(ID "_iskeyword")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(KEYWORD as)
(ID "_sys")
(NEWLINE)
(KEYWORD import)
(ID "heapq")
(KEYWORD as)
(ID "_heapq")
(NEWLINE)
(KEYWORD from)
(ID "_weakref")
(KEYWORD import)
(ID "proxy")
(KEYWORD as)
(ID "_proxy")
(NEWLINE)
(KEYWORD from)
(ID "itertools")
(KEYWORD import)
(ID "repeat")
(KEYWORD as)
(ID "_repeat")
(PUNCT ",")
(ID "chain")
(KEYWORD as)
(ID "_chain")
(PUNCT ",")
(ID "starmap")
(KEYWORD as)
(ID "_starmap")
(NEWLINE)
(KEYWORD from)
(ID "reprlib")
(KEYWORD import)
(ID "recursive_repr")
(KEYWORD as)
(ID "_recursive_repr")
(NEWLINE)
(KEYWORD class)
(ID "_Link")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__slots__")
(PUNCT "=")
(LIT "prev")
(PUNCT ",")
(LIT "next")
(PUNCT ",")
(LIT "key")
(PUNCT ",")
(LIT "__weakref__")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "OrderedDict")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dictionary that remembers insertion order")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize an ordered dictionary.  The signature is the same as\n        regular dictionaries, but keyword arguments are not recommended because\n        their insertion order is arbitrary.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "descriptor '__init__' of 'OrderedDict' object ")
(LIT "needs an argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected at most 1 arguments, got %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__hardroot")
(PUNCT "=")
(ID "_Link")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT "=")
(ID "root")
(PUNCT "=")
(ID "_proxy")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__hardroot")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__update")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "dict_setitem")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "__setitem__")
(PUNCT ",")
(ID "proxy")
(PUNCT "=")
(ID "_proxy")
(PUNCT ",")
(ID "Link")
(PUNCT "=")
(ID "_Link")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.__setitem__(i, y) <==> od[i]=y")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "link")
(PUNCT "=")
(ID "Link")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(ID "last")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(ID "link")
(PUNCT ".")
(ID "prev")
(PUNCT ",")
(ID "link")
(PUNCT ".")
(ID "next")
(PUNCT ",")
(ID "link")
(PUNCT ".")
(ID "key")
(PUNCT "=")
(ID "last")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "key")
(NEWLINE)
(ID "last")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "link")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "proxy")
(PUNCT "(")
(ID "link")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dict_setitem")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__delitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "dict_delitem")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "__delitem__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.__delitem__(y) <==> del od[y]")
(NEWLINE)
(ID "dict_delitem")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "link")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "link_prev")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(ID "link_next")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "next")
(NEWLINE)
(ID "link_prev")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "link_next")
(NEWLINE)
(ID "link_next")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "link_prev")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.__iter__() <==> iter(od)")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(ID "curr")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "next")
(NEWLINE)
(KEYWORD while)
(ID "curr")
(KEYWORD is)
(KEYWORD not)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "curr")
(PUNCT ".")
(ID "key")
(NEWLINE)
(ID "curr")
(PUNCT "=")
(ID "curr")
(PUNCT ".")
(ID "next")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__reversed__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.__reversed__() <==> reversed(od)")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(ID "curr")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(KEYWORD while)
(ID "curr")
(KEYWORD is)
(KEYWORD not)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "curr")
(PUNCT ".")
(ID "key")
(NEWLINE)
(ID "curr")
(PUNCT "=")
(ID "curr")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.clear() -> None.  Remove all items from od.")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dict")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "popitem")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.popitem() -> (k, v), return and remove a (key, value) pair.\n        Pairs are returned in LIFO order if last is true or FIFO order if false.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "dictionary is empty")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(KEYWORD if)
(ID "last")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "link")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(ID "link_prev")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(ID "link_prev")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "link_prev")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "link")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "next")
(NEWLINE)
(ID "link_next")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "next")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "link_next")
(NEWLINE)
(ID "link_next")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "root")
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "key")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "key")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "move_to_end")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move an existing element to the end (or beginning if last==False).\n\n        Raises KeyError if the element does not exist.\n        When last=True, acts like a fast version of self[key]=self.pop(key).\n\n        ")
(NEWLINE)
(ID "link")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(ID "link_prev")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(ID "link_next")
(PUNCT "=")
(ID "link")
(PUNCT ".")
(ID "next")
(NEWLINE)
(ID "link_prev")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "link_next")
(NEWLINE)
(ID "link_next")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "link_prev")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__root")
(NEWLINE)
(KEYWORD if)
(ID "last")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "prev")
(NEWLINE)
(ID "link")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "last")
(NEWLINE)
(ID "link")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "last")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "link")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "next")
(NEWLINE)
(ID "link")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "link")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "first")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "next")
(PUNCT "=")
(ID "first")
(PUNCT ".")
(ID "prev")
(PUNCT "=")
(ID "link")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__sizeof__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sizeof")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "getsizeof")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "size")
(PUNCT "=")
(ID "sizeof")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(ID "size")
(PUNCT "+=")
(ID "sizeof")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__map")
(PUNCT ")")
(PUNCT "*")
(LIT 2)
(NEWLINE)
(ID "size")
(PUNCT "+=")
(ID "sizeof")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__hardroot")
(PUNCT ")")
(PUNCT "*")
(ID "n")
(NEWLINE)
(ID "size")
(PUNCT "+=")
(ID "sizeof")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT ")")
(PUNCT "*")
(ID "n")
(NEWLINE)
(KEYWORD return)
(ID "size")
(NEWLINE)
(DEDENT)
(ID "update")
(PUNCT "=")
(ID "__update")
(PUNCT "=")
(ID "MutableMapping")
(PUNCT ".")
(ID "update")
(NEWLINE)
(ID "keys")
(PUNCT "=")
(ID "MutableMapping")
(PUNCT ".")
(ID "keys")
(NEWLINE)
(ID "values")
(PUNCT "=")
(ID "MutableMapping")
(PUNCT ".")
(ID "values")
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "MutableMapping")
(PUNCT ".")
(ID "items")
(NEWLINE)
(ID "__ne__")
(PUNCT "=")
(ID "MutableMapping")
(PUNCT ".")
(ID "__ne__")
(NEWLINE)
(ID "__marker")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "__marker")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.pop(k[,d]) -> v, remove specified key and return the corresponding\n        value.  If key is not found, d is returned if given, otherwise KeyError\n        is raised.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "default")
(KEYWORD is)
(ID "self")
(PUNCT ".")
(ID "__marker")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setdefault")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "default")
(NEWLINE)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "_recursive_repr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.__repr__() <==> repr(od)")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s()")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s(%r)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__reduce__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return state information for pickling")
(NEWLINE)
(ID "inst_dict")
(PUNCT "=")
(ID "vars")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "vars")
(PUNCT "(")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inst_dict")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "inst_dict")
(KEYWORD or)
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.copy() -> a shallow copy of od")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromkeys")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "iterable")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S.\n        If not specified, the value defaults to None.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT "=")
(ID "cls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n        while comparison to a regular mapping is order-insensitive.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "OrderedDict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dict")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(KEYWORD and)
(ID "all")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "_eq")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dict")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_class_template")
(PUNCT "=")
(LIT "from builtins import property as _property, tuple as _tuple\nfrom operator import itemgetter as _itemgetter\nfrom collections import OrderedDict\n\nclass {typename}(tuple):\n    '{typename}({arg_list})'\n\n    __slots__ = ()\n\n    _fields = {field_names!r}\n\n    def __new__(_cls, {arg_list}):\n        'Create new instance of {typename}({arg_list})'\n        return _tuple.__new__(_cls, ({arg_list}))\n\n    @classmethod\n    def _make(cls, iterable, new=tuple.__new__, len=len):\n        'Make a new {typename} object from a sequence or iterable'\n        result = new(cls, iterable)\n        if len(result) != {num_fields:d}:\n            raise TypeError('Expected {num_fields:d} arguments, got %d' % len(result))\n        return result\n\n    def _replace(_self, **kwds):\n        'Return a new {typename} object replacing specified fields with new values'\n        result = _self._make(map(kwds.pop, {field_names!r}, _self))\n        if kwds:\n            raise ValueError('Got unexpected field names: %r' % list(kwds))\n        return result\n\n    def __repr__(self):\n        'Return a nicely formatted representation string'\n        return self.__class__.__name__ + '({repr_fmt})' % self\n\n    @property\n    def __dict__(self):\n        'A new OrderedDict mapping field names to their values'\n        return OrderedDict(zip(self._fields, self))\n\n    def _asdict(self):\n        'Return a new OrderedDict which maps field names to their values.'\n        return self.__dict__\n\n    def __getnewargs__(self):\n        'Return self as a plain tuple.  Used by copy and pickle.'\n        return tuple(self)\n\n    def __getstate__(self):\n        'Exclude the OrderedDict from pickling'\n        return None\n\n{field_defs}\n")
(NEWLINE)
(ID "_repr_template")
(PUNCT "=")
(LIT "{name}=%r")
(NEWLINE)
(ID "_field_template")
(PUNCT "=")
(LIT "    {name} = _property(_itemgetter({index:d}), doc='Alias for field number {index:d}')\n")
(NEWLINE)
(KEYWORD def)
(ID "namedtuple")
(PUNCT "(")
(ID "typename")
(PUNCT ",")
(ID "field_names")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "rename")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a new subclass of tuple with named fields.\n\n    >>> Point = namedtuple('Point', ['x', 'y'])\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessable by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "field_names")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "field_names")
(PUNCT "=")
(ID "field_names")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ",")
(PUNCT ",")
(LIT " ")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "field_names")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "field_names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "typename")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "typename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seen")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "index")
(PUNCT ",")
(ID "name")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "field_names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "name")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "_iskeyword")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD or)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(KEYWORD or)
(ID "name")
(KEYWORD in)
(ID "seen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "field_names")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(PUNCT "=")
(LIT "_%d")
(PUNCT "%")
(ID "index")
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(PUNCT "[")
(ID "typename")
(PUNCT "]")
(PUNCT "+")
(ID "field_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "!=")
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Type names and field names must be strings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Type names and field names must be valid ")
(LIT "identifiers: %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_iskeyword")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Type names and field names cannot be a ")
(LIT "keyword: %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "seen")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "field_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "rename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Field names cannot start with an underscore: ")
(LIT "%r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Encountered duplicate field name: %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "class_definition")
(PUNCT "=")
(ID "_class_template")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "typename")
(PUNCT "=")
(ID "typename")
(PUNCT ",")
(ID "field_names")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "field_names")
(PUNCT ")")
(PUNCT ",")
(ID "num_fields")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "field_names")
(PUNCT ")")
(PUNCT ",")
(ID "arg_list")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "field_names")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "repr_fmt")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_repr_template")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "field_names")
(PUNCT ")")
(PUNCT ",")
(ID "field_defs")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_field_template")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "index")
(PUNCT "=")
(ID "index")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(KEYWORD for)
(ID "index")
(PUNCT ",")
(ID "name")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "field_names")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "namespace")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "__name__")
(PUNCT "=")
(LIT "namedtuple_%s")
(PUNCT "%")
(ID "typename")
(PUNCT ")")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(ID "class_definition")
(PUNCT ",")
(ID "namespace")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "namespace")
(PUNCT "[")
(ID "typename")
(PUNCT "]")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "_source")
(PUNCT "=")
(ID "class_definition")
(NEWLINE)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "result")
(PUNCT ".")
(ID "_source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "__module__")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "_getframe")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "f_globals")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__name__")
(PUNCT ",")
(LIT "__main__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_count_elements")
(PUNCT "(")
(ID "mapping")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Tally elements from the iterable.")
(NEWLINE)
(ID "mapping_get")
(PUNCT "=")
(ID "mapping")
(PUNCT ".")
(ID "get")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mapping")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "mapping_get")
(PUNCT "(")
(ID "elem")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_collections")
(KEYWORD import)
(ID "_count_elements")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Counter")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbbbcccdde'\n    >>> sum(c.values())                 # total of all counts\n    15\n\n    >>> c['a']                          # count of letter 'a'\n    5\n    >>> for elem in 'shazam':           # update counts from an iterable\n    ...     c[elem] += 1                # by adding 1 to each element's count\n    >>> c['a']                          # now there are seven 'a'\n    7\n    >>> del c['b']                      # remove all 'b'\n    >>> c['b']                          # now there are zero 'b'\n    0\n\n    >>> d = Counter('simsalabim')       # make another counter\n    >>> c.update(d)                     # add in the second counter\n    >>> c['a']                          # now there are nine 'a'\n    9\n\n    >>> c.clear()                       # empty the counter\n    >>> c\n    Counter()\n\n    Note:  If a count is set to zero or reduced to zero, it will remain\n    in the counter until the entry is deleted or the counter is cleared:\n\n    >>> c = Counter('aaabbc')\n    >>> c['b'] -= 2                     # reduce the count of 'b' by two\n    >>> c.most_common()                 # 'b' is still in, but its count is zero\n    [('a', 3), ('c', 1), ('b', 0)]\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new, empty Counter object.  And if given, count elements\n        from an input iterable.  Or, initialize the count from another mapping\n        of elements to their counts.\n\n        >>> c = Counter()                           # a new, empty counter\n        >>> c = Counter('gallahad')                 # a new counter from an iterable\n        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping\n        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "descriptor '__init__' of 'Counter' object ")
(LIT "needs an argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected at most 1 arguments, got %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "super")
(PUNCT "(")
(ID "Counter")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__missing__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The count of elements not in the Counter is zero.")
(NEWLINE)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "most_common")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "List the n most common elements and their counts from the most\n        common to the least.  If n is None, then list all element counts.\n\n        >>> Counter('abcdeabcdabcaba').most_common(3)\n        [('a', 5), ('b', 4), ('c', 3)]\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sorted")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(ID "_itemgetter")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_heapq")
(PUNCT ".")
(ID "nlargest")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(ID "_itemgetter")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "elements")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterator over elements repeating each as many times as its count.\n\n        >>> c = Counter('ABCABC')\n        >>> sorted(c.elements())\n        ['A', 'A', 'B', 'B', 'C', 'C']\n\n        # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1\n        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})\n        >>> product = 1\n        >>> for factor in prime_factors.elements():     # loop over factors\n        ...     product *= factor                       # and multiply them\n        >>> product\n        1836\n\n        Note, if an element's count has been set to zero or is a negative\n        number, elements() will ignore it.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_chain")
(PUNCT ".")
(ID "from_iterable")
(PUNCT "(")
(ID "_starmap")
(PUNCT "(")
(ID "_repeat")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromkeys")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "iterable")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "Counter.fromkeys() is undefined.  Use Counter(iterable) instead.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "update")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like dict.update() but add counts instead of replacing them.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.update('witch')           # add elements from another iterable\n        >>> d = Counter('watch')\n        >>> c.update(d)                 # add elements from another counter\n        >>> c['h']                      # four 'h' in which, witch, and watch\n        4\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "descriptor 'update' of 'Counter' object ")
(LIT "needs an argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected at most 1 arguments, got %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iterable")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD if)
(ID "args")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "iterable")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "iterable")
(PUNCT ",")
(ID "Mapping")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self_get")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "iterable")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "count")
(PUNCT "+")
(ID "self_get")
(PUNCT "(")
(ID "elem")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(ID "Counter")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_count_elements")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "kwds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "subtract")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like dict.update() but subtracts counts instead of replacing them.\n        Counts can be reduced below zero.  Both the inputs and outputs are\n        allowed to contain zero and negative counts.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.subtract('witch')             # subtract elements from another iterable\n        >>> c.subtract(Counter('watch'))    # subtract elements from another counter\n        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch\n        0\n        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch\n        -1\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "descriptor 'subtract' of 'Counter' object ")
(LIT "needs an argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected at most 1 arguments, got %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iterable")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD if)
(ID "args")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "iterable")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self_get")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "iterable")
(PUNCT ",")
(ID "Mapping")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "iterable")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "self_get")
(PUNCT "(")
(ID "elem")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "-")
(ID "count")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "elem")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "self_get")
(PUNCT "(")
(ID "elem")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "kwds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "subtract")
(PUNCT "(")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a shallow copy.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__reduce__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(PUNCT "(")
(ID "dict")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__delitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "elem")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like dict.__delitem__() but does not raise KeyError for missing values.")
(NEWLINE)
(KEYWORD if)
(ID "elem")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__delitem__")
(PUNCT "(")
(ID "elem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s()")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(LIT "%r: %r")
(PUNCT ".")
(ID "__mod__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "most_common")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "%s({%s})")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{0}({1!r})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "dict")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__add__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add counts from two counters.\n\n        >>> Counter('abbb') + Counter('bcc')\n        Counter({'b': 4, 'c': 2, 'a': 1})\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Counter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "Counter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newcount")
(PUNCT "=")
(ID "count")
(PUNCT "+")
(ID "other")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "newcount")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "newcount")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "elem")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(KEYWORD and)
(ID "count")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "count")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__sub__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Subtract count, but keep only results with positive counts.\n\n        >>> Counter('abbbc') - Counter('bccd')\n        Counter({'b': 2, 'a': 1})\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Counter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "Counter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newcount")
(PUNCT "=")
(ID "count")
(PUNCT "-")
(ID "other")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "newcount")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "newcount")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "elem")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(KEYWORD and)
(ID "count")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(PUNCT "-")
(ID "count")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__or__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Union is the maximum of value in either of the input counters.\n\n        >>> Counter('abbb') | Counter('bcc')\n        Counter({'b': 3, 'c': 2, 'a': 1})\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Counter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "Counter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_count")
(PUNCT "=")
(ID "other")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(ID "newcount")
(PUNCT "=")
(ID "other_count")
(KEYWORD if)
(ID "count")
(PUNCT "<")
(ID "other_count")
(KEYWORD else)
(ID "count")
(NEWLINE)
(KEYWORD if)
(ID "newcount")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "newcount")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "elem")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(KEYWORD and)
(ID "count")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "count")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__and__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Intersection is the minimum of corresponding counts.\n\n        >>> Counter('abbb') & Counter('bcc')\n        Counter({'b': 1})\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Counter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "Counter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_count")
(PUNCT "=")
(ID "other")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(ID "newcount")
(PUNCT "=")
(ID "count")
(KEYWORD if)
(ID "count")
(PUNCT "<")
(ID "other_count")
(KEYWORD else)
(ID "other_count")
(NEWLINE)
(KEYWORD if)
(ID "newcount")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "newcount")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__pos__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adds an empty counter, effectively stripping negative and zero counts")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT "+")
(ID "Counter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__neg__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Subtracts from an empty counter.  Strips positive and zero counts,\n        and flips the sign on negative counts.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "Counter")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_keep_positive")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal method to strip elements with a negative or zero count")
(NEWLINE)
(ID "nonpositive")
(PUNCT "=")
(PUNCT "[")
(ID "elem")
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(ID "count")
(PUNCT ">")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(KEYWORD in)
(ID "nonpositive")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iadd__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inplace add from another counter, keeping only positive counts.\n\n        >>> c = Counter('abbb')\n        >>> c += Counter('bcc')\n        >>> c\n        Counter({'b': 4, 'c': 2, 'a': 1})\n\n        ")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "+=")
(ID "count")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_keep_positive")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__isub__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inplace subtract counter, but keep only results with positive counts.\n\n        >>> c = Counter('abbbc')\n        >>> c -= Counter('bccd')\n        >>> c\n        Counter({'b': 2, 'a': 1})\n\n        ")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "-=")
(ID "count")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_keep_positive")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ior__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inplace union is the maximum of value from either counter.\n\n        >>> c = Counter('abbb')\n        >>> c |= Counter('bcc')\n        >>> c\n        Counter({'b': 3, 'c': 2, 'a': 1})\n\n        ")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "other_count")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "other_count")
(PUNCT ">")
(ID "count")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "other_count")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_keep_positive")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iand__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inplace intersection is the minimum of corresponding counts.\n\n        >>> c = Counter('abbb')\n        >>> c &= Counter('bcc')\n        >>> c\n        Counter({'b': 1})\n\n        ")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "count")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_count")
(PUNCT "=")
(ID "other")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "other_count")
(PUNCT "<")
(ID "count")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "other_count")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_keep_positive")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ChainMap")
(PUNCT "(")
(ID "MutableMapping")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " A ChainMap groups multiple dicts (or other mappings) together\n    to create a single, updateable view.\n\n    The underlying mappings are stored in a list.  That list is public and can\n    accessed or updated using the *maps* attribute.  There is no other state.\n\n    Lookups search the underlying mappings successively until a key is found.\n    In contrast, writes, updates, and deletions only operate on the first\n    mapping.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "maps")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize a ChainMap by setting *maps* to the given mappings.\n        If no mappings are provided, a single empty dictionary is used.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "maps")
(PUNCT ")")
(KEYWORD or)
(PUNCT "[")
(PUNCT "{")
(PUNCT "}")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__missing__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "mapping")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mapping")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__missing__")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(KEYWORD else)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "union")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "union")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "any")
(PUNCT "(")
(ID "key")
(KEYWORD in)
(ID "m")
(KEYWORD for)
(ID "m")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__bool__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "any")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "_recursive_repr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{0.__class__.__name__}({1})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "repr")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromkeys")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "iterable")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a ChainMap with a single dict created from the iterable.")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "dict")
(PUNCT ".")
(ID "fromkeys")
(PUNCT "(")
(ID "iterable")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__copy__")
(PUNCT "=")
(ID "copy")
(NEWLINE)
(KEYWORD def)
(ID "new_child")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "m")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        New ChainMap with a new map followed by all previous maps. If no\n        map is provided, an empty dict is used.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "m")
(PUNCT ",")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parents")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "New ChainMap from maps[1:].")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__delitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "Key not found in the first mapping: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "popitem")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "popitem")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "No keys found in the first mapping.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "Key not found in the first mapping: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear maps[0], leaving maps[1:] intact.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UserDict")
(PUNCT "(")
(ID "MutableMapping")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dict")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "dict")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(LIT "__missing__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__missing__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(NEWLINE)
(KEYWORD def)
(ID "__delitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__class__")
(KEYWORD is)
(ID "UserDict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "UserDict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "copy")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "data")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(DEDENT)
(ID "c")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "c")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromkeys")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "iterable")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "cls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UserList")
(PUNCT "(")
(ID "MutableSequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A more or less complete user-defined wrapper around list objects.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "initlist")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "initlist")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "initlist")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "initlist")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "initlist")
(PUNCT ",")
(ID "UserList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "initlist")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "initlist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "__cast")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__le__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "__cast")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "__cast")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "__cast")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__gt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "__cast")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__ge__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "__cast")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__cast")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "other")
(PUNCT ".")
(ID "data")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UserList")
(PUNCT ")")
(KEYWORD else)
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "item")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "data")
(NEWLINE)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__setitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(NEWLINE)
(KEYWORD def)
(ID "__delitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ":")
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__add__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UserList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "other")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "list")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__radd__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UserList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "other")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "other")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iadd__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UserList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+=")
(ID "other")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+=")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+=")
(ID "list")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__mul__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "*")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__rmul__")
(PUNCT "=")
(ID "__mul__")
(NEWLINE)
(KEYWORD def)
(ID "__imul__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "*=")
(ID "n")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "remove")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "count")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "reverse")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "reverse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "sort")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UserList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "other")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UserString")
(PUNCT "(")
(ID "Sequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "seq")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "seq")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "seq")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "seq")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "seq")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__int__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__float__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "float")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__complex__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "complex")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "==")
(ID "string")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "==")
(ID "string")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "!=")
(ID "string")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "!=")
(ID "string")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "<")
(ID "string")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "<")
(ID "string")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__le__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "<=")
(ID "string")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "<=")
(ID "string")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__gt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ">")
(ID "string")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ">")
(ID "string")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ge__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ">=")
(ID "string")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ">=")
(ID "string")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "char")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "char")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "char")
(PUNCT "=")
(ID "char")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "char")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__add__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "other")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__radd__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "other")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__mul__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "*")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__rmul__")
(PUNCT "=")
(ID "__mul__")
(NEWLINE)
(KEYWORD def)
(ID "__mod__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "%")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "capitalize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "capitalize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "center")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "center")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "count")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub")
(PUNCT "=")
(ID "sub")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "errors")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "endswith")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "suffix")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expandtabs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tabsize")
(PUNCT "=")
(LIT 8)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(ID "tabsize")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub")
(PUNCT "=")
(ID "sub")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isalpha")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isalpha")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isalnum")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isalnum")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isdecimal")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isdecimal")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isdigit")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isdigit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isidentifier")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "islower")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "islower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isnumeric")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isnumeric")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isspace")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "istitle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "istitle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "isupper")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "isupper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "seq")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "ljust")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "ljust")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lower")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "lstrip")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "chars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(ID "chars")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "partition")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "old")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "maxsplit")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "old")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "old")
(PUNCT "=")
(ID "old")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "new")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "new")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "old")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "maxsplit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rfind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "UserString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub")
(PUNCT "=")
(ID "sub")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rindex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "rindex")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rjust")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "rjust")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rpartition")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rstrip")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "chars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "chars")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "split")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sep")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "maxsplit")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(ID "maxsplit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rsplit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sep")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "maxsplit")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "rsplit")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(ID "maxsplit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "splitlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keepends")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "startswith")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "strip")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "chars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(ID "chars")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "swapcase")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "swapcase")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "title")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "translate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "upper")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "zfill")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "zfill")
(PUNCT "(")
(ID "width")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
