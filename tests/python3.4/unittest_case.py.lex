(LIT "Test case implementation")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "functools")
(NEWLINE)
(KEYWORD import)
(ID "difflib")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "pprint")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "contextlib")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "result")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "util")
(KEYWORD import)
(PUNCT "(")
(ID "strclass")
(PUNCT ",")
(ID "safe_repr")
(PUNCT ",")
(ID "_count_diff_all_purpose")
(PUNCT ",")
(ID "_count_diff_hashable")
(PUNCT ",")
(ID "_common_shorten_repr")
(PUNCT ")")
(NEWLINE)
(ID "__unittest")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "DIFF_OMITTED")
(PUNCT "=")
(PUNCT "(")
(LIT "\nDiff is %s characters long. ")
(LIT "Set self.maxDiff to None to see it.")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "SkipTest")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raise this exception in a test to skip it.\n\n    Usually you can use TestCase.skipTest() or one of the skipping decorators\n    instead of raising this directly.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_ShouldStop")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The test should stop.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_UnexpectedSuccess")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The test was supposed to fail, but it didn't!\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Outcome")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "expecting_failure")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "result")
(PUNCT "=")
(ID "result")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "result_supports_subtests")
(PUNCT "=")
(ID "hasattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "addSubTest")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "success")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "skipped")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "expectedFailure")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "testPartExecutor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test_case")
(PUNCT ",")
(ID "isTest")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "old_success")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "success")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "success")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SkipTest")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "success")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "skipped")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "test_case")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "_ShouldStop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_info")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "expecting_failure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "expectedFailure")
(PUNCT "=")
(ID "exc_info")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "success")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "test_case")
(PUNCT ",")
(ID "exc_info")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "exc_info")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "result_supports_subtests")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "success")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "test_case")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "success")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "success")
(KEYWORD and)
(ID "old_success")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "skip")
(PUNCT "(")
(ID "reason")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Unconditionally skip a test.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "decorator")
(PUNCT "(")
(ID "test_item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "test_item")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "functools")
(PUNCT ".")
(ID "wraps")
(PUNCT "(")
(ID "test_item")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "skip_wrapper")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SkipTest")
(PUNCT "(")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "test_item")
(PUNCT "=")
(ID "skip_wrapper")
(NEWLINE)
(DEDENT)
(ID "test_item")
(PUNCT ".")
(ID "__unittest_skip__")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "test_item")
(PUNCT ".")
(ID "__unittest_skip_why__")
(PUNCT "=")
(ID "reason")
(NEWLINE)
(KEYWORD return)
(ID "test_item")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "decorator")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "skipIf")
(PUNCT "(")
(ID "condition")
(PUNCT ",")
(ID "reason")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Skip a test if the condition is true.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "condition")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "skip")
(PUNCT "(")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "skipUnless")
(PUNCT "(")
(ID "condition")
(PUNCT ",")
(ID "reason")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Skip a test unless the condition is true.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "condition")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "skip")
(PUNCT "(")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expectedFailure")
(PUNCT "(")
(ID "test_item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test_item")
(PUNCT ".")
(ID "__unittest_expecting_failure__")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD return)
(ID "test_item")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_BaseTestCaseContext")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test_case")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT "=")
(ID "test_case")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_raiseFailure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_AssertRaisesBaseContext")
(PUNCT "(")
(ID "_BaseTestCaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expected")
(PUNCT ",")
(ID "test_case")
(PUNCT ",")
(ID "callable_obj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "expected_regex")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_BaseTestCaseContext")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test_case")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT "=")
(ID "expected")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT "=")
(ID "test_case")
(NEWLINE)
(KEYWORD if)
(ID "callable_obj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT "=")
(ID "callable_obj")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "callable_obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "expected_regex")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expected_regex")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "expected_regex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "expected_regex")
(PUNCT "=")
(ID "expected_regex")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        If callable_obj is None, assertRaises/Warns is being used as a\n        context manager, so check for a 'msg' kwarg and return self.\n        If callable_obj is not None, call it passing args and kwargs.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "callable_obj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "msg")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callable_obj")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_AssertRaisesContext")
(PUNCT "(")
(ID "_AssertRaisesBaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A context manager used to implement TestCase.assertRaises* methods.")
(NEWLINE)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exc_type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_name")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "{} not raised by {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "exc_name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "{} not raised")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "exc_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "traceback")
(PUNCT ".")
(ID "clear_frames")
(PUNCT "(")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "issubclass")
(PUNCT "(")
(ID "exc_type")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "exception")
(PUNCT "=")
(ID "exc_value")
(PUNCT ".")
(ID "with_traceback")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "expected_regex")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "expected_regex")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "expected_regex")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "expected_regex")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "exc_value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "\"{}\" does not match \"{}\"")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "expected_regex")
(PUNCT ".")
(ID "pattern")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "exc_value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_AssertWarnsContext")
(PUNCT "(")
(ID "_AssertRaisesBaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A context manager used to implement TestCase.assertWarns* methods.")
(NEWLINE)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(LIT "__warningregistry__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT ".")
(ID "__warningregistry__")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "warnings_manager")
(PUNCT "=")
(ID "warnings")
(PUNCT ".")
(ID "catch_warnings")
(PUNCT "(")
(ID "record")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "warnings")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "warnings_manager")
(PUNCT ".")
(ID "__enter__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "simplefilter")
(PUNCT "(")
(LIT "always")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warnings_manager")
(PUNCT ".")
(ID "__exit__")
(PUNCT "(")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exc_type")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_name")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "first_matching")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "m")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "warnings")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "message")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "w")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "first_matching")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first_matching")
(PUNCT "=")
(ID "w")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expected_regex")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "expected_regex")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "=")
(ID "w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "lineno")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "first_matching")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "\"{}\" does not match \"{}\"")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expected_regex")
(PUNCT ".")
(ID "pattern")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "first_matching")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "{} not triggered by {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "exc_name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "obj_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "{} not triggered")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "exc_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_LoggingWatcher")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "namedtuple")
(PUNCT "(")
(LIT "_LoggingWatcher")
(PUNCT ",")
(PUNCT "[")
(LIT "records")
(PUNCT ",")
(LIT "output")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_CapturingHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A logging handler capturing all (raw and formatted) logging output.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "watcher")
(PUNCT "=")
(ID "_LoggingWatcher")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "watcher")
(PUNCT ".")
(ID "records")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "watcher")
(PUNCT ".")
(ID "output")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_AssertLogsContext")
(PUNCT "(")
(ID "_BaseTestCaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A context manager used to implement TestCase.assertLogs().")
(NEWLINE)
(ID "LOGGING_FORMAT")
(PUNCT "=")
(LIT "%(levelname)s:%(name)s:%(message)s")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test_case")
(PUNCT ",")
(ID "logger_name")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_BaseTestCaseContext")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test_case")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "logger_name")
(PUNCT "=")
(ID "logger_name")
(NEWLINE)
(KEYWORD if)
(ID "level")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "_nameToLevel")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "INFO")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "logger_name")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "Logger")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "logger_name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "logger_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "formatter")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "Formatter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "LOGGING_FORMAT")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT "=")
(ID "_CapturingHandler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT ".")
(ID "setFormatter")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "watcher")
(PUNCT "=")
(ID "handler")
(PUNCT ".")
(ID "watcher")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "old_handlers")
(PUNCT "=")
(ID "logger")
(PUNCT ".")
(ID "handlers")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "old_level")
(PUNCT "=")
(ID "logger")
(PUNCT ".")
(ID "level")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "old_propagate")
(PUNCT "=")
(ID "logger")
(PUNCT ".")
(ID "propagate")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "handlers")
(PUNCT "=")
(PUNCT "[")
(ID "handler")
(PUNCT "]")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "propagate")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "handler")
(PUNCT ".")
(ID "watcher")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "handlers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "old_handlers")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "propagate")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "old_propagate")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "old_level")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exc_type")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "watcher")
(PUNCT ".")
(ID "records")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raiseFailure")
(PUNCT "(")
(LIT "no logs of level {} or higher triggered on {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "getLevelName")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TestCase")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A class whose instances are single test cases.\n\n    By default, the test code itself should be placed in a method named\n    'runTest'.\n\n    If the fixture may be used for many test cases, create as\n    many test methods as are needed. When instantiating such a TestCase\n    subclass, specify in the constructor arguments the name of the test method\n    that the instance is to execute.\n\n    Test authors should subclass TestCase for their own tests. Construction\n    and deconstruction of the test's environment ('fixture') can be\n    implemented by overriding the 'setUp' and 'tearDown' methods respectively.\n\n    If it is necessary to override the __init__ method, the base class\n    __init__ method must always be called. It is important that subclasses\n    should not change the signature of their __init__ method, since instances\n    of the classes are instantiated automatically by parts of the framework\n    in order to be run.\n\n    When subclassing TestCase, you can set these attributes:\n    * failureException: determines which exception will be raised when\n        the instance's assertion methods fail; test methods raising this\n        exception will be deemed to have 'failed' rather than 'errored'.\n    * longMessage: determines whether long messages (including repr of\n        objects used in assert methods) will be printed on failure in *addition*\n        to any explicit message passed.\n    * maxDiff: sets the maximum length of a diff in failure messages\n        by assert methods using difflib. It is looked up as an instance\n        attribute so can be configured by individual tests if required.\n    ")
(NEWLINE)
(ID "failureException")
(PUNCT "=")
(ID "AssertionError")
(NEWLINE)
(ID "longMessage")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "maxDiff")
(PUNCT "=")
(LIT 80)
(PUNCT "*")
(LIT 8)
(NEWLINE)
(ID "_diffThreshold")
(PUNCT "=")
(LIT 2)
(PUNCT "**")
(LIT 16)
(NEWLINE)
(ID "_classSetupFailed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "methodName")
(PUNCT "=")
(LIT "runTest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an instance of the class that will use the named test\n           method when executed. Raises a ValueError if the instance does\n           not have a method with the specified name.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT "=")
(ID "methodName")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_testMethodDoc")
(PUNCT "=")
(LIT "No test")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "testMethod")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "methodName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "methodName")
(PUNCT "!=")
(LIT "runTest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no such test method in %s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(ID "methodName")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_testMethodDoc")
(PUNCT "=")
(ID "testMethod")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_cleanups")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_subtest")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_type_equality_funcs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "dict")
(PUNCT ",")
(LIT "assertDictEqual")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(LIT "assertListEqual")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(LIT "assertTupleEqual")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "set")
(PUNCT ",")
(LIT "assertSetEqual")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "frozenset")
(PUNCT ",")
(LIT "assertSetEqual")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(LIT "assertMultiLineEqual")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addTypeEqualityFunc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typeobj")
(PUNCT ",")
(ID "function")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a type specific assertEqual style function to compare a type.\n\n        This method is for use by TestCase subclasses that need to register\n        their own type equality functions to provide nicer error messages.\n\n        Args:\n            typeobj: The data type to call this function on when both values\n                    are of the same type in assertEqual().\n            function: The callable taking two arguments and an optional\n                    msg= argument that raises self.failureException with a\n                    useful error message when the two arguments are not equal.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_type_equality_funcs")
(PUNCT "[")
(ID "typeobj")
(PUNCT "]")
(PUNCT "=")
(ID "function")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addCleanup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "function")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a function, with arguments, to be called when the test is\n        completed. Functions added are called on a LIFO basis and are\n        called after tearDown on test failure or success.\n\n        Cleanup items are called even if setUp fails (unlike tearDown).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cleanups")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "function")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setUp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hook method for setting up the test fixture before exercising it.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tearDown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hook method for deconstructing the test fixture after testing it.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "setUpClass")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hook method for setting up class fixture before running tests in the class.")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "tearDownClass")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hook method for deconstructing the class fixture after running all tests in the class.")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "countTestCases")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "defaultTestResult")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(PUNCT ".")
(ID "TestResult")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shortDescription")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a one-line description of the test, or None if no\n        description has been provided.\n\n        The default implementation of this method returns the first line of\n        the specified test method's docstring.\n        ")
(NEWLINE)
(ID "doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_testMethodDoc")
(NEWLINE)
(KEYWORD return)
(ID "doc")
(KEYWORD and)
(ID "doc")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "strclass")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "type")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_testMethodName")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT ",")
(ID "strclass")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s testMethod=%s>")
(PUNCT "%")
(PUNCT "(")
(ID "strclass")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_addSkip")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ",")
(ID "test_case")
(PUNCT ",")
(ID "reason")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addSkip")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "addSkip")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "addSkip")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addSkip")
(PUNCT "(")
(ID "test_case")
(PUNCT ",")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "TestResult has no addSkip method, skips not reported")
(PUNCT ",")
(ID "RuntimeWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "addSuccess")
(PUNCT "(")
(ID "test_case")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "subTest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a context manager that will return the enclosed block\n        of code in a subtest identified by the optional message and\n        keyword parameters.  A failure in the subtest marks the test\n        case as failed but resumes execution at the end of the enclosed\n        block, allowing further test code to be executed.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT ".")
(ID "result_supports_subtests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_subtest")
(NEWLINE)
(KEYWORD if)
(ID "parent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params_map")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "ChainMap")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params_map")
(PUNCT "=")
(ID "parent")
(PUNCT ".")
(ID "params")
(PUNCT ".")
(ID "new_child")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_subtest")
(PUNCT "=")
(ID "_SubTest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "params_map")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT ".")
(ID "testPartExecutor")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_subtest")
(PUNCT ",")
(ID "isTest")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT ".")
(ID "success")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT ".")
(ID "result")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "result")
(PUNCT ".")
(ID "failfast")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_ShouldStop")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT ".")
(ID "expectedFailure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_ShouldStop")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_subtest")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_feedErrorsToResult")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "test")
(PUNCT ",")
(ID "exc_info")
(KEYWORD in)
(ID "errors")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "_SubTest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "addSubTest")
(PUNCT "(")
(ID "test")
(PUNCT ".")
(ID "test_case")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "exc_info")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "exc_info")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "addFailure")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "addError")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_addExpectedFailure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ",")
(ID "exc_info")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addExpectedFailure")
(PUNCT "=")
(ID "result")
(PUNCT ".")
(ID "addExpectedFailure")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "TestResult has no addExpectedFailure method, reporting as passes")
(PUNCT ",")
(ID "RuntimeWarning")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "addSuccess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addExpectedFailure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_addUnexpectedSuccess")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addUnexpectedSuccess")
(PUNCT "=")
(ID "result")
(PUNCT ".")
(ID "addUnexpectedSuccess")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "TestResult has no addUnexpectedSuccess method, reporting as failure")
(PUNCT ",")
(ID "RuntimeWarning")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_UnexpectedSuccess")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "_UnexpectedSuccess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "addFailure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addUnexpectedSuccess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_result")
(PUNCT "=")
(ID "result")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultTestResult")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "startTestRun")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "startTestRun")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "startTestRun")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startTestRun")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "startTest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "testMethod")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(LIT "__unittest_skip__")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "testMethod")
(PUNCT ",")
(LIT "__unittest_skip__")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip_why")
(PUNCT "=")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(LIT "__unittest_skip_why__")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "testMethod")
(PUNCT ",")
(LIT "__unittest_skip_why__")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_addSkip")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "skip_why")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "stopTest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "expecting_failure")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "testMethod")
(PUNCT ",")
(LIT "__unittest_expecting_failure__")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "outcome")
(PUNCT "=")
(ID "_Outcome")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT "=")
(ID "outcome")
(NEWLINE)
(KEYWORD with)
(ID "outcome")
(PUNCT ".")
(ID "testPartExecutor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "setUp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "outcome")
(PUNCT ".")
(ID "success")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outcome")
(PUNCT ".")
(ID "expecting_failure")
(PUNCT "=")
(ID "expecting_failure")
(NEWLINE)
(KEYWORD with)
(ID "outcome")
(PUNCT ".")
(ID "testPartExecutor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "isTest")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "testMethod")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "outcome")
(PUNCT ".")
(ID "expecting_failure")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD with)
(ID "outcome")
(PUNCT ".")
(ID "testPartExecutor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tearDown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "doCleanups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "test")
(PUNCT ",")
(ID "reason")
(KEYWORD in)
(ID "outcome")
(PUNCT ".")
(ID "skipped")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_addSkip")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_feedErrorsToResult")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "outcome")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "outcome")
(PUNCT ".")
(ID "success")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "expecting_failure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "outcome")
(PUNCT ".")
(ID "expectedFailure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_addExpectedFailure")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "outcome")
(PUNCT ".")
(ID "expectedFailure")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_addUnexpectedSuccess")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "addSuccess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "stopTest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "orig_result")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stopTestRun")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "stopTestRun")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stopTestRun")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stopTestRun")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "outcome")
(PUNCT ".")
(ID "errors")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "outcome")
(PUNCT ".")
(ID "expectedFailure")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_outcome")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "doCleanups")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute all cleanup functions. Normally called for you after\n        tearDown.")
(NEWLINE)
(ID "outcome")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outcome")
(KEYWORD or)
(ID "_Outcome")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_cleanups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "function")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cleanups")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "outcome")
(PUNCT ".")
(ID "testPartExecutor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "function")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "outcome")
(PUNCT ".")
(ID "success")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "debug")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the test without collecting errors in a TestResult")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setUp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testMethodName")
(PUNCT ")")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tearDown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_cleanups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "function")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cleanups")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "function")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "skipTest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "reason")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Skip this test.")
(NEWLINE)
(KEYWORD raise)
(ID "SkipTest")
(PUNCT "(")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail immediately, with the given message.")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertFalse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expr")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check that the expression is false.")
(NEWLINE)
(KEYWORD if)
(ID "expr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(LIT "%s is not false")
(PUNCT "%")
(ID "safe_repr")
(PUNCT "(")
(ID "expr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertTrue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expr")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check that the expression is true.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "expr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(LIT "%s is not true")
(PUNCT "%")
(ID "safe_repr")
(PUNCT "(")
(ID "expr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_formatMessage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Honour the longMessage attribute when generating failure messages.\n        If longMessage is False this means:\n        * Use only an explicit message if it is provided\n        * Otherwise use the standard message for the assert\n\n        If longMessage is True:\n        * Use the standard message\n        * If an explicit message is provided, plus ' : ' and the explicit message\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "longMessage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "msg")
(KEYWORD or)
(ID "standardMsg")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "msg")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "standardMsg")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s : %s")
(PUNCT "%")
(PUNCT "(")
(ID "standardMsg")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s : %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertRaises")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "excClass")
(PUNCT ",")
(ID "callableObj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail unless an exception of class excClass is raised\n           by callableObj when invoked with arguments args and keyword\n           arguments kwargs. If a different type of exception is\n           raised, it will not be caught, and the test case will be\n           deemed to have suffered an error, exactly as for an\n           unexpected exception.\n\n           If called with callableObj omitted or None, will return a\n           context object used like this::\n\n                with self.assertRaises(SomeException):\n                    do_something()\n\n           An optional keyword argument 'msg' can be provided when assertRaises\n           is used as a context object.\n\n           The context manager keeps a reference to the exception as\n           the 'exception' attribute. This allows you to inspect the\n           exception after the assertion::\n\n               with self.assertRaises(SomeException) as cm:\n                   do_something()\n               the_exception = cm.exception\n               self.assertEqual(the_exception.error_code, 3)\n        ")
(NEWLINE)
(ID "context")
(PUNCT "=")
(ID "_AssertRaisesContext")
(PUNCT "(")
(ID "excClass")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "callableObj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "context")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(LIT "assertRaises")
(PUNCT ",")
(ID "callableObj")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertWarns")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expected_warning")
(PUNCT ",")
(ID "callable_obj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail unless a warning of class warnClass is triggered\n           by callable_obj when invoked with arguments args and keyword\n           arguments kwargs.  If a different type of warning is\n           triggered, it will not be handled: depending on the other\n           warning filtering rules in effect, it might be silenced, printed\n           out, or raised as an exception.\n\n           If called with callable_obj omitted or None, will return a\n           context object used like this::\n\n                with self.assertWarns(SomeWarning):\n                    do_something()\n\n           An optional keyword argument 'msg' can be provided when assertWarns\n           is used as a context object.\n\n           The context manager keeps a reference to the first matching\n           warning as the 'warning' attribute; similarly, the 'filename'\n           and 'lineno' attributes give you information about the line\n           of Python code from which the warning was triggered.\n           This allows you to inspect the warning after the assertion::\n\n               with self.assertWarns(SomeWarning) as cm:\n                   do_something()\n               the_warning = cm.warning\n               self.assertEqual(the_warning.some_attribute, 147)\n        ")
(NEWLINE)
(ID "context")
(PUNCT "=")
(ID "_AssertWarnsContext")
(PUNCT "(")
(ID "expected_warning")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "context")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(LIT "assertWarns")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertLogs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "logger")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail unless a log message of level *level* or higher is emitted\n        on *logger_name* or its children.  If omitted, *level* defaults to\n        INFO and *logger* defaults to the root logger.\n\n        This method must be used as a context manager, and will yield\n        a recording object with two attributes: `output` and `records`.\n        At the end of the context manager, the `output` attribute will\n        be a list of the matching formatted log messages and the\n        `records` attribute will be a list of the corresponding LogRecord\n        objects.\n\n        Example::\n\n            with self.assertLogs('foo', level='INFO') as cm:\n                logging.getLogger('foo').info('first message')\n                logging.getLogger('foo.bar').error('second message')\n            self.assertEqual(cm.output, ['INFO:foo:first message',\n                                         'ERROR:foo.bar:second message'])\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_AssertLogsContext")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "logger")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getAssertEqualityFunc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a detailed comparison function for the types of the two args.\n\n        Returns: A callable accepting (first, second, msg=None) that will\n        raise a failure exception if first != second with a useful human\n        readable error message for those types.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(KEYWORD is)
(ID "type")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "asserter")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_type_equality_funcs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "asserter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "asserter")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "asserter")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "asserter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "asserter")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_baseAssertEqual")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_baseAssertEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The default assertEqual implementation, not type specific.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "first")
(PUNCT "==")
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s != %s")
(PUNCT "%")
(ID "_common_shorten_repr")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail if the two objects are unequal as determined by the '=='\n           operator.\n        ")
(NEWLINE)
(ID "assertion_func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getAssertEqualityFunc")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ")")
(NEWLINE)
(ID "assertion_func")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertNotEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail if the two objects are equal as determined by the '!='\n           operator.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "first")
(PUNCT "!=")
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(LIT "%s == %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertAlmostEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "places")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delta")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail if the two objects are unequal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is more than the given delta.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n\n           If the two objects compare equal then they will automatically\n           compare almost equal.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "first")
(PUNCT "==")
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "delta")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "places")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "specify delta or places not both")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "delta")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "abs")
(PUNCT "(")
(ID "first")
(PUNCT "-")
(ID "second")
(PUNCT ")")
(PUNCT "<=")
(ID "delta")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s != %s within %s delta")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "delta")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "places")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "places")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "round")
(PUNCT "(")
(ID "abs")
(PUNCT "(")
(ID "second")
(PUNCT "-")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "places")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s != %s within %r places")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ",")
(ID "places")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertNotAlmostEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "places")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delta")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail if the two objects are equal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is less than the given delta.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n\n           Objects that are equal automatically fail.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "delta")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "places")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "specify delta or places not both")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "delta")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "first")
(PUNCT "==")
(ID "second")
(PUNCT ")")
(KEYWORD and)
(ID "abs")
(PUNCT "(")
(ID "first")
(PUNCT "-")
(ID "second")
(PUNCT ")")
(PUNCT ">")
(ID "delta")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s == %s within %s delta")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "delta")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "places")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "places")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "first")
(PUNCT "==")
(ID "second")
(PUNCT ")")
(KEYWORD and)
(ID "round")
(PUNCT "(")
(ID "abs")
(PUNCT "(")
(ID "second")
(PUNCT "-")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "places")
(PUNCT ")")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s == %s within %r places")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ",")
(ID "places")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertSequenceEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "seq1")
(PUNCT ",")
(ID "seq2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "seq_type")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An equality assertion for ordered sequences (like lists and tuples).\n\n        For the purposes of this function, a valid ordered sequence type is one\n        which can be indexed, has a length, and has an equality operator.\n\n        Args:\n            seq1: The first sequence to compare.\n            seq2: The second sequence to compare.\n            seq_type: The expected datatype of the sequences, or None if no\n                    datatype should be enforced.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "seq_type")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seq_type_name")
(PUNCT "=")
(ID "seq_type")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "seq1")
(PUNCT ",")
(ID "seq_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(LIT "First sequence is not a %s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "seq1")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "seq2")
(PUNCT ",")
(ID "seq_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(LIT "Second sequence is not a %s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "seq2")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seq_type_name")
(PUNCT "=")
(LIT "sequence")
(NEWLINE)
(DEDENT)
(ID "differing")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len1")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "seq1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "=")
(LIT "First %s has no length.    Non-sequence?")
(PUNCT "%")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "differing")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len2")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "seq2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "=")
(LIT "Second %s has no length.    Non-sequence?")
(PUNCT "%")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "differing")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "seq1")
(PUNCT "==")
(ID "seq2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "differing")
(PUNCT "=")
(LIT "%ss differ: %s != %s\n")
(PUNCT "%")
(PUNCT "(")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ".")
(ID "capitalize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "_common_shorten_repr")
(PUNCT "(")
(ID "seq1")
(PUNCT ",")
(ID "seq2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "min")
(PUNCT "(")
(ID "len1")
(PUNCT ",")
(ID "len2")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item1")
(PUNCT "=")
(ID "seq1")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "\nUnable to index element %d of first %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "seq_type_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item2")
(PUNCT "=")
(ID "seq2")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "\nUnable to index element %d of second %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "seq_type_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "item1")
(PUNCT "!=")
(ID "item2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "\nFirst differing element %d:\n%s\n%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "item1")
(PUNCT ",")
(ID "item2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "len1")
(PUNCT "==")
(ID "len2")
(KEYWORD and)
(ID "seq_type")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "type")
(PUNCT "(")
(ID "seq1")
(PUNCT ")")
(PUNCT "!=")
(ID "type")
(PUNCT "(")
(ID "seq2")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len1")
(PUNCT ">")
(ID "len2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "\nFirst %s contains %d additional ")
(LIT "elements.\n")
(PUNCT "%")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ",")
(ID "len1")
(PUNCT "-")
(ID "len2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "First extra element %d:\n%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "len2")
(PUNCT ",")
(ID "seq1")
(PUNCT "[")
(ID "len2")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "Unable to index element %d ")
(LIT "of first %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "len2")
(PUNCT ",")
(ID "seq_type_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "len1")
(PUNCT "<")
(ID "len2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "\nSecond %s contains %d additional ")
(LIT "elements.\n")
(PUNCT "%")
(PUNCT "(")
(ID "seq_type_name")
(PUNCT ",")
(ID "len2")
(PUNCT "-")
(ID "len1")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "First extra element %d:\n%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "len1")
(PUNCT ",")
(ID "seq2")
(PUNCT "[")
(ID "len1")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differing")
(PUNCT "+=")
(PUNCT "(")
(LIT "Unable to index element %d ")
(LIT "of second %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "len1")
(PUNCT ",")
(ID "seq_type_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(ID "differing")
(NEWLINE)
(ID "diffMsg")
(PUNCT "=")
(LIT "\n")
(PUNCT "+")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "difflib")
(PUNCT ".")
(ID "ndiff")
(PUNCT "(")
(ID "pprint")
(PUNCT ".")
(ID "pformat")
(PUNCT "(")
(ID "seq1")
(PUNCT ")")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "pprint")
(PUNCT ".")
(ID "pformat")
(PUNCT "(")
(ID "seq2")
(PUNCT ")")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "standardMsg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_truncateMessage")
(PUNCT "(")
(ID "standardMsg")
(PUNCT ",")
(ID "diffMsg")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_truncateMessage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "diff")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_diff")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "maxDiff")
(NEWLINE)
(KEYWORD if)
(ID "max_diff")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "diff")
(PUNCT ")")
(PUNCT "<=")
(ID "max_diff")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "message")
(PUNCT "+")
(ID "diff")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "message")
(PUNCT "+")
(PUNCT "(")
(ID "DIFF_OMITTED")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "diff")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertListEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "list1")
(PUNCT ",")
(ID "list2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A list-specific equality assertion.\n\n        Args:\n            list1: The first list to compare.\n            list2: The second list to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "assertSequenceEqual")
(PUNCT "(")
(ID "list1")
(PUNCT ",")
(ID "list2")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "seq_type")
(PUNCT "=")
(ID "list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertTupleEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tuple1")
(PUNCT ",")
(ID "tuple2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A tuple-specific equality assertion.\n\n        Args:\n            tuple1: The first tuple to compare.\n            tuple2: The second tuple to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "assertSequenceEqual")
(PUNCT "(")
(ID "tuple1")
(PUNCT ",")
(ID "tuple2")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "seq_type")
(PUNCT "=")
(ID "tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertSetEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "set1")
(PUNCT ",")
(ID "set2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A set-specific equality assertion.\n\n        Args:\n            set1: The first set to compare.\n            set2: The second set to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n\n        assertSetEqual uses ducktyping to support different types of sets, and\n        is optimized for sets specifically (parameters must support a\n        difference method).\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "difference1")
(PUNCT "=")
(ID "set1")
(PUNCT ".")
(ID "difference")
(PUNCT "(")
(ID "set2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(LIT "invalid type when attempting set difference: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(LIT "first argument does not support set difference: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "difference2")
(PUNCT "=")
(ID "set2")
(PUNCT ".")
(ID "difference")
(PUNCT "(")
(ID "set1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(LIT "invalid type when attempting set difference: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(LIT "second argument does not support set difference: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "difference1")
(KEYWORD or)
(ID "difference2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "difference1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "Items in the first set but not the second:")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "difference1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "difference2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "Items in the second set but not the first:")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "difference2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertIn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "member")
(PUNCT ",")
(ID "container")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a in b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(ID "member")
(KEYWORD not)
(KEYWORD in)
(ID "container")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s not found in %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "member")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "container")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertNotIn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "member")
(PUNCT ",")
(ID "container")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a not in b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(ID "member")
(KEYWORD in)
(ID "container")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s unexpectedly found in %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "member")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "container")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertIs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expr1")
(PUNCT ",")
(ID "expr2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a is b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(ID "expr1")
(KEYWORD is)
(KEYWORD not)
(ID "expr2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s is not %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "expr1")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "expr2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertIsNot")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expr1")
(PUNCT ",")
(ID "expr2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a is not b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(ID "expr1")
(KEYWORD is)
(ID "expr2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "unexpectedly identical: %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "expr1")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertDictEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "d1")
(PUNCT ",")
(ID "d2")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "assertIsInstance")
(PUNCT "(")
(ID "d1")
(PUNCT ",")
(ID "dict")
(PUNCT ",")
(LIT "First argument is not a dictionary")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "assertIsInstance")
(PUNCT "(")
(ID "d2")
(PUNCT ",")
(ID "dict")
(PUNCT ",")
(LIT "Second argument is not a dictionary")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "d1")
(PUNCT "!=")
(ID "d2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s != %s")
(PUNCT "%")
(ID "_common_shorten_repr")
(PUNCT "(")
(ID "d1")
(PUNCT ",")
(ID "d2")
(PUNCT ")")
(NEWLINE)
(ID "diff")
(PUNCT "=")
(PUNCT "(")
(LIT "\n")
(PUNCT "+")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "difflib")
(PUNCT ".")
(ID "ndiff")
(PUNCT "(")
(ID "pprint")
(PUNCT ".")
(ID "pformat")
(PUNCT "(")
(ID "d1")
(PUNCT ")")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "pprint")
(PUNCT ".")
(ID "pformat")
(PUNCT "(")
(ID "d2")
(PUNCT ")")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "standardMsg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_truncateMessage")
(PUNCT "(")
(ID "standardMsg")
(PUNCT ",")
(ID "diff")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertDictContainsSubset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "subset")
(PUNCT ",")
(ID "dictionary")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Checks whether dictionary is a superset of subset.")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "assertDictContainsSubset is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ")")
(NEWLINE)
(ID "missing")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "mismatched")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "subset")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "dictionary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "!=")
(ID "dictionary")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mismatched")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "%s, expected: %s, actual: %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "dictionary")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "missing")
(KEYWORD or)
(ID "mismatched")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "missing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "Missing: %s")
(PUNCT "%")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(KEYWORD for)
(ID "m")
(KEYWORD in)
(ID "missing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mismatched")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "standardMsg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "+=")
(LIT "; ")
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "+=")
(LIT "Mismatched values: %s")
(PUNCT "%")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "mismatched")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertCountEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An unordered sequence comparison asserting that the same elements,\n        regardless of order.  If the same element occurs more than once,\n        it verifies that the elements occur the same number of times.\n\n            self.assertEqual(Counter(list(first)),\n                             Counter(list(second)))\n\n         Example:\n            - [0, 1, 1] and [1, 0, 1] compare equal.\n            - [0, 0, 1] and [0, 1] compare unequal.\n\n        ")
(NEWLINE)
(ID "first_seq")
(PUNCT ",")
(ID "second_seq")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "list")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "Counter")
(PUNCT "(")
(ID "first_seq")
(PUNCT ")")
(NEWLINE)
(ID "second")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "Counter")
(PUNCT "(")
(ID "second_seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "differences")
(PUNCT "=")
(ID "_count_diff_all_purpose")
(PUNCT "(")
(ID "first_seq")
(PUNCT ",")
(ID "second_seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "first")
(PUNCT "==")
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "differences")
(PUNCT "=")
(ID "_count_diff_hashable")
(PUNCT "(")
(ID "first_seq")
(PUNCT ",")
(ID "second_seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "differences")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "Element counts were not equal:\n")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(LIT "First has %d, Second has %d:  %r")
(PUNCT "%")
(ID "diff")
(KEYWORD for)
(ID "diff")
(KEYWORD in)
(ID "differences")
(PUNCT "]")
(NEWLINE)
(ID "diffMsg")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(ID "standardMsg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_truncateMessage")
(PUNCT "(")
(ID "standardMsg")
(PUNCT ",")
(ID "diffMsg")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertMultiLineEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Assert that two multi-line strings are equal.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "assertIsInstance")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "str")
(PUNCT ",")
(LIT "First argument is not a string")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "assertIsInstance")
(PUNCT "(")
(ID "second")
(PUNCT ",")
(ID "str")
(PUNCT ",")
(LIT "Second argument is not a string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "first")
(PUNCT "!=")
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "_diffThreshold")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "_diffThreshold")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_baseAssertEqual")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "firstlines")
(PUNCT "=")
(ID "first")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "secondlines")
(PUNCT "=")
(ID "second")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "firstlines")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "first")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ")")
(PUNCT "==")
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "firstlines")
(PUNCT "=")
(PUNCT "[")
(ID "first")
(PUNCT "+")
(LIT "\n")
(PUNCT "]")
(NEWLINE)
(ID "secondlines")
(PUNCT "=")
(PUNCT "[")
(ID "second")
(PUNCT "+")
(LIT "\n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s != %s")
(PUNCT "%")
(ID "_common_shorten_repr")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT ")")
(NEWLINE)
(ID "diff")
(PUNCT "=")
(LIT "\n")
(PUNCT "+")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "difflib")
(PUNCT ".")
(ID "ndiff")
(PUNCT "(")
(ID "firstlines")
(PUNCT ",")
(ID "secondlines")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "standardMsg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_truncateMessage")
(PUNCT "(")
(ID "standardMsg")
(PUNCT ",")
(ID "diff")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertLess")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a < b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "a")
(PUNCT "<")
(ID "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s not less than %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertLessEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a <= b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "a")
(PUNCT "<=")
(ID "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s not less than or equal to %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertGreater")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a > b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "a")
(PUNCT ">")
(ID "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s not greater than %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertGreaterEqual")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Just like self.assertTrue(a >= b), but with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "a")
(PUNCT ">=")
(ID "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s not greater than or equal to %s")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ",")
(ID "safe_repr")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertIsNone")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Same as self.assertTrue(obj is None), with a nicer default message.")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s is not None")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertIsNotNone")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Included for symmetry with assertIsNone.")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "unexpectedly None")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertIsInstance")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "cls")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Same as self.assertTrue(isinstance(obj, cls)), with a nicer\n        default message.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s is not an instance of %r")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertNotIsInstance")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "cls")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Included for symmetry with assertIsInstance.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standardMsg")
(PUNCT "=")
(LIT "%s is an instance of %r")
(PUNCT "%")
(PUNCT "(")
(ID "safe_repr")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_formatMessage")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "standardMsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertRaisesRegex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expected_exception")
(PUNCT ",")
(ID "expected_regex")
(PUNCT ",")
(ID "callable_obj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Asserts that the message in a raised exception matches a regex.\n\n        Args:\n            expected_exception: Exception class expected to be raised.\n            expected_regex: Regex (re pattern object or string) expected\n                    to be found in error message.\n            callable_obj: Function to be called.\n            msg: Optional message used in case of failure. Can only be used\n                    when assertRaisesRegex is used as a context manager.\n            args: Extra args.\n            kwargs: Extra kwargs.\n        ")
(NEWLINE)
(ID "context")
(PUNCT "=")
(ID "_AssertRaisesContext")
(PUNCT "(")
(ID "expected_exception")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ",")
(ID "expected_regex")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "context")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(LIT "assertRaisesRegex")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertWarnsRegex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expected_warning")
(PUNCT ",")
(ID "expected_regex")
(PUNCT ",")
(ID "callable_obj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Asserts that the message in a triggered warning matches a regexp.\n        Basic functioning is similar to assertWarns() with the addition\n        that only warnings whose messages also match the regular expression\n        are considered successful matches.\n\n        Args:\n            expected_warning: Warning class expected to be triggered.\n            expected_regex: Regex (re pattern object or string) expected\n                    to be found in error message.\n            callable_obj: Function to be called.\n            msg: Optional message used in case of failure. Can only be used\n                    when assertWarnsRegex is used as a context manager.\n            args: Extra args.\n            kwargs: Extra kwargs.\n        ")
(NEWLINE)
(ID "context")
(PUNCT "=")
(ID "_AssertWarnsContext")
(PUNCT "(")
(ID "expected_warning")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ",")
(ID "expected_regex")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "context")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(LIT "assertWarnsRegex")
(PUNCT ",")
(ID "callable_obj")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assertRegex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(ID "expected_regex")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail the test unless the text matches the regular expression.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "expected_regex")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "expected_regex")
(PUNCT ",")
(LIT "expected_regex must not be empty.")
(NEWLINE)
(ID "expected_regex")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "expected_regex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "expected_regex")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "msg")
(KEYWORD or)
(LIT "Regex didn't match")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "%s: %r not found in %r")
(PUNCT "%")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "expected_regex")
(PUNCT ".")
(ID "pattern")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assertNotRegex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(ID "unexpected_regex")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fail the test if the text matches the regular expression.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "unexpected_regex")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unexpected_regex")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "unexpected_regex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "match")
(PUNCT "=")
(ID "unexpected_regex")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "msg")
(KEYWORD or)
(LIT "Regex matched")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "%s: %r matches %r in %r")
(PUNCT "%")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "text")
(PUNCT "[")
(ID "match")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(ID "match")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(ID "unexpected_regex")
(PUNCT ".")
(ID "pattern")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_deprecate")
(PUNCT "(")
(ID "original_func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "deprecated_func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Please use {0} instead.")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "original_func")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "original_func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "deprecated_func")
(NEWLINE)
(DEDENT)
(ID "failUnlessEqual")
(PUNCT "=")
(ID "assertEquals")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertEqual")
(PUNCT ")")
(NEWLINE)
(ID "failIfEqual")
(PUNCT "=")
(ID "assertNotEquals")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertNotEqual")
(PUNCT ")")
(NEWLINE)
(ID "failUnlessAlmostEqual")
(PUNCT "=")
(ID "assertAlmostEquals")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertAlmostEqual")
(PUNCT ")")
(NEWLINE)
(ID "failIfAlmostEqual")
(PUNCT "=")
(ID "assertNotAlmostEquals")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertNotAlmostEqual")
(PUNCT ")")
(NEWLINE)
(ID "failUnless")
(PUNCT "=")
(ID "assert_")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertTrue")
(PUNCT ")")
(NEWLINE)
(ID "failUnlessRaises")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertRaises")
(PUNCT ")")
(NEWLINE)
(ID "failIf")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertFalse")
(PUNCT ")")
(NEWLINE)
(ID "assertRaisesRegexp")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertRaisesRegex")
(PUNCT ")")
(NEWLINE)
(ID "assertRegexpMatches")
(PUNCT "=")
(ID "_deprecate")
(PUNCT "(")
(ID "assertRegex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "FunctionTestCase")
(PUNCT "(")
(ID "TestCase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A test case that wraps a test function.\n\n    This is useful for slipping pre-existing test functions into the\n    unittest framework. Optionally, set-up and tidy-up functions can be\n    supplied. As with TestCase, the tidy-up ('tearDown') function will\n    always be called if the set-up ('setUp') function ran successfully.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "testFunc")
(PUNCT ",")
(ID "setUp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "tearDown")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "description")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(ID "FunctionTestCase")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_setUpFunc")
(PUNCT "=")
(ID "setUp")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tearDownFunc")
(PUNCT "=")
(ID "tearDown")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT "=")
(ID "testFunc")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_description")
(PUNCT "=")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setUp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_setUpFunc")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_setUpFunc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tearDown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tearDownFunc")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tearDownFunc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "runTest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_setUpFunc")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_setUpFunc")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_tearDownFunc")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_tearDownFunc")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_testFunc")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_description")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_description")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_setUpFunc")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_tearDownFunc")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_description")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "strclass")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s tec=%s>")
(PUNCT "%")
(PUNCT "(")
(ID "strclass")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shortDescription")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_description")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_description")
(NEWLINE)
(DEDENT)
(ID "doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_testFunc")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(KEYWORD return)
(ID "doc")
(KEYWORD and)
(ID "doc")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_SubTest")
(PUNCT "(")
(ID "TestCase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test_case")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_message")
(PUNCT "=")
(ID "message")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT "=")
(ID "test_case")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "params")
(PUNCT "=")
(ID "params")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "failureException")
(PUNCT "=")
(ID "test_case")
(PUNCT ".")
(ID "failureException")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runTest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "subtests cannot be run directly")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_subDescription")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_message")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "[{}]")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_message")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "params")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params_desc")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(LIT "{}={!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD for)
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "params")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "({})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "params_desc")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(KEYWORD or)
(LIT "(<subtest>)")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{} {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT ".")
(ID "id")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_subDescription")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shortDescription")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a one-line description of the subtest, or None if no\n        description has been provided.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT ".")
(ID "shortDescription")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{} {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "test_case")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_subDescription")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
