(LIT "Pattern compiler.\n\nThe grammer is taken from PatternGrammar.txt.\n\nThe compiler compiles a pattern to a pytree.*Pattern instance.\n")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Guido van Rossum <guido@python.org>")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "driver")
(PUNCT ",")
(ID "literals")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "tokenize")
(PUNCT ",")
(ID "parse")
(PUNCT ",")
(ID "grammar")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "pytree")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "pygram")
(NEWLINE)
(ID "_PATTERN_GRAMMAR_FILE")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(PUNCT ",")
(LIT "PatternGrammar.txt")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "PatternSyntaxError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tokenize_wrapper")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Tokenizes a string suppressing significant whitespace.")
(NEWLINE)
(ID "skip")
(PUNCT "=")
(PUNCT "{")
(ID "token")
(PUNCT ".")
(ID "NEWLINE")
(PUNCT ",")
(ID "token")
(PUNCT ".")
(ID "INDENT")
(PUNCT ",")
(ID "token")
(PUNCT ".")
(ID "DEDENT")
(PUNCT "}")
(NEWLINE)
(ID "tokens")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "generate_tokens")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "quintuple")
(KEYWORD in)
(ID "tokens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "line_text")
(PUNCT "=")
(ID "quintuple")
(NEWLINE)
(KEYWORD if)
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "skip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "quintuple")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PatternCompiler")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "grammar_file")
(PUNCT "=")
(ID "_PATTERN_GRAMMAR_FILE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initializer.\n\n        Takes an optional alternative filename for the pattern grammar.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "grammar")
(PUNCT "=")
(ID "driver")
(PUNCT ".")
(ID "load_grammar")
(PUNCT "(")
(ID "grammar_file")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT "=")
(ID "pygram")
(PUNCT ".")
(ID "Symbols")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "grammar")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pygrammar")
(PUNCT "=")
(ID "pygram")
(PUNCT ".")
(ID "python_grammar")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pysyms")
(PUNCT "=")
(ID "pygram")
(PUNCT ".")
(ID "python_symbols")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "driver")
(PUNCT "=")
(ID "driver")
(PUNCT ".")
(ID "Driver")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "grammar")
(PUNCT ",")
(ID "convert")
(PUNCT "=")
(ID "pattern_convert")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile_pattern")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "with_tree")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compiles a pattern string to a nested pytree.*Pattern object.")
(NEWLINE)
(ID "tokens")
(PUNCT "=")
(ID "tokenize_wrapper")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "driver")
(PUNCT ".")
(ID "parse_tokens")
(PUNCT "(")
(ID "tokens")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "parse")
(PUNCT ".")
(ID "ParseError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PatternSyntaxError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "with_tree")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(PUNCT ",")
(ID "root")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "compile_node")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compiles a node, recursively.\n\n        This is one big switch on the node type.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "Matcher")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "Alternatives")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alts")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "ch")
(PUNCT ")")
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "alts")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "alts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "WildcardPattern")
(PUNCT "(")
(PUNCT "[")
(PUNCT "[")
(ID "a")
(PUNCT "]")
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "alts")
(PUNCT "]")
(PUNCT ",")
(ID "min")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "max")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT ".")
(ID "optimize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "Alternative")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "units")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "ch")
(PUNCT ")")
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "units")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "units")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "WildcardPattern")
(PUNCT "(")
(PUNCT "[")
(ID "units")
(PUNCT "]")
(PUNCT ",")
(ID "min")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "max")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT ".")
(ID "optimize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "NegatedUnit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compile_basic")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "NegatedPattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT ".")
(ID "optimize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "Unit")
(NEWLINE)
(ID "name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "nodes")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "nodes")
(PUNCT ")")
(PUNCT ">=")
(LIT 3)
(KEYWORD and)
(ID "nodes")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "EQUAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "nodes")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(NEWLINE)
(ID "nodes")
(PUNCT "=")
(ID "nodes")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "repeat")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "nodes")
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(KEYWORD and)
(ID "nodes")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "Repeater")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "repeat")
(PUNCT "=")
(ID "nodes")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "nodes")
(PUNCT "=")
(ID "nodes")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "pattern")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compile_basic")
(PUNCT "(")
(ID "nodes")
(PUNCT ",")
(ID "repeat")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "repeat")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "repeat")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "Repeater")
(NEWLINE)
(ID "children")
(PUNCT "=")
(ID "repeat")
(PUNCT ".")
(ID "children")
(NEWLINE)
(ID "child")
(PUNCT "=")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "child")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "STAR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "min")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "max")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "HUGE")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "child")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "PLUS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "min")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "max")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "HUGE")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "child")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "LBRACE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "children")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "RBRACE")
(NEWLINE)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "children")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 5)
(PUNCT ")")
(NEWLINE)
(ID "min")
(PUNCT "=")
(ID "max")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_int")
(PUNCT "(")
(ID "children")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "children")
(PUNCT ")")
(PUNCT "==")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_int")
(PUNCT "(")
(ID "children")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "min")
(PUNCT "!=")
(LIT 1)
(KEYWORD or)
(ID "max")
(PUNCT "!=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern")
(PUNCT "=")
(ID "pattern")
(PUNCT ".")
(ID "optimize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pattern")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "WildcardPattern")
(PUNCT "(")
(PUNCT "[")
(PUNCT "[")
(ID "pattern")
(PUNCT "]")
(PUNCT "]")
(PUNCT ",")
(ID "min")
(PUNCT "=")
(ID "min")
(PUNCT ",")
(ID "max")
(PUNCT "=")
(ID "max")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pattern")
(PUNCT ".")
(ID "optimize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile_basic")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nodes")
(PUNCT ",")
(ID "repeat")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "nodes")
(PUNCT ")")
(PUNCT ">=")
(LIT 1)
(NEWLINE)
(ID "node")
(PUNCT "=")
(ID "nodes")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "STRING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "literals")
(PUNCT ".")
(ID "evalString")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "pytree")
(PUNCT ".")
(ID "LeafPattern")
(PUNCT "(")
(ID "_type_of_literal")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "NAME")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "value")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "isupper")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(KEYWORD not)
(KEYWORD in)
(ID "TOKEN_MAP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PatternSyntaxError")
(PUNCT "(")
(LIT "Invalid token: %r")
(PUNCT "%")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nodes")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PatternSyntaxError")
(PUNCT "(")
(LIT "Can't have details for token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pytree")
(PUNCT ".")
(ID "LeafPattern")
(PUNCT "(")
(ID "TOKEN_MAP")
(PUNCT "[")
(ID "value")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "==")
(LIT "any")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "value")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pysyms")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PatternSyntaxError")
(PUNCT "(")
(LIT "Invalid symbol: %r")
(PUNCT "%")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "nodes")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "content")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "nodes")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "content")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pytree")
(PUNCT ".")
(ID "NodePattern")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "content")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "value")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "nodes")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "value")
(PUNCT "==")
(LIT "[")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "repeat")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(ID "subpattern")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compile_node")
(PUNCT "(")
(ID "nodes")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "pytree")
(PUNCT ".")
(ID "WildcardPattern")
(PUNCT "(")
(PUNCT "[")
(PUNCT "[")
(ID "subpattern")
(PUNCT "]")
(PUNCT "]")
(PUNCT ",")
(ID "min")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "max")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(KEYWORD False)
(PUNCT ",")
(ID "node")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_int")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "NUMBER")
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "TOKEN_MAP")
(PUNCT "=")
(PUNCT "{")
(LIT "NAME")
(PUNCT ":")
(ID "token")
(PUNCT ".")
(ID "NAME")
(PUNCT ",")
(LIT "STRING")
(PUNCT ":")
(ID "token")
(PUNCT ".")
(ID "STRING")
(PUNCT ",")
(LIT "NUMBER")
(PUNCT ":")
(ID "token")
(PUNCT ".")
(ID "NUMBER")
(PUNCT ",")
(LIT "TOKEN")
(PUNCT ":")
(KEYWORD None)
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_type_of_literal")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "isalpha")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "NAME")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD in)
(ID "grammar")
(PUNCT ".")
(ID "opmap")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "grammar")
(PUNCT ".")
(ID "opmap")
(PUNCT "[")
(ID "value")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pattern_convert")
(PUNCT "(")
(ID "grammar")
(PUNCT ",")
(ID "raw_node_info")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Converts raw node information to a Node or Leaf instance.")
(NEWLINE)
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "context")
(PUNCT ",")
(ID "children")
(PUNCT "=")
(ID "raw_node_info")
(NEWLINE)
(KEYWORD if)
(ID "children")
(KEYWORD or)
(ID "type")
(KEYWORD in)
(ID "grammar")
(PUNCT ".")
(ID "number2symbol")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "pytree")
(PUNCT ".")
(ID "Node")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "children")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "pytree")
(PUNCT ".")
(ID "Leaf")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "compile_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "PatternCompiler")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "compile_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
