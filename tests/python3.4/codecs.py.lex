(LIT " codecs -- Python Codec Registry, API and helpers.\n\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\n")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(PUNCT ",")
(ID "sys")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_codecs")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(KEYWORD as)
(ID "why")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemError")
(PUNCT "(")
(LIT "Failed to load the builtin codecs: %s")
(PUNCT "%")
(ID "why")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "register")
(PUNCT ",")
(LIT "lookup")
(PUNCT ",")
(LIT "open")
(PUNCT ",")
(LIT "EncodedFile")
(PUNCT ",")
(LIT "BOM")
(PUNCT ",")
(LIT "BOM_BE")
(PUNCT ",")
(LIT "BOM_LE")
(PUNCT ",")
(LIT "BOM32_BE")
(PUNCT ",")
(LIT "BOM32_LE")
(PUNCT ",")
(LIT "BOM64_BE")
(PUNCT ",")
(LIT "BOM64_LE")
(PUNCT ",")
(LIT "BOM_UTF8")
(PUNCT ",")
(LIT "BOM_UTF16")
(PUNCT ",")
(LIT "BOM_UTF16_LE")
(PUNCT ",")
(LIT "BOM_UTF16_BE")
(PUNCT ",")
(LIT "BOM_UTF32")
(PUNCT ",")
(LIT "BOM_UTF32_LE")
(PUNCT ",")
(LIT "BOM_UTF32_BE")
(PUNCT ",")
(LIT "CodecInfo")
(PUNCT ",")
(LIT "Codec")
(PUNCT ",")
(LIT "IncrementalEncoder")
(PUNCT ",")
(LIT "IncrementalDecoder")
(PUNCT ",")
(LIT "StreamReader")
(PUNCT ",")
(LIT "StreamWriter")
(PUNCT ",")
(LIT "StreamReaderWriter")
(PUNCT ",")
(LIT "StreamRecoder")
(PUNCT ",")
(LIT "getencoder")
(PUNCT ",")
(LIT "getdecoder")
(PUNCT ",")
(LIT "getincrementalencoder")
(PUNCT ",")
(LIT "getincrementaldecoder")
(PUNCT ",")
(LIT "getreader")
(PUNCT ",")
(LIT "getwriter")
(PUNCT ",")
(LIT "encode")
(PUNCT ",")
(LIT "decode")
(PUNCT ",")
(LIT "iterencode")
(PUNCT ",")
(LIT "iterdecode")
(PUNCT ",")
(LIT "strict_errors")
(PUNCT ",")
(LIT "ignore_errors")
(PUNCT ",")
(LIT "replace_errors")
(PUNCT ",")
(LIT "xmlcharrefreplace_errors")
(PUNCT ",")
(LIT "backslashreplace_errors")
(PUNCT ",")
(LIT "register_error")
(PUNCT ",")
(LIT "lookup_error")
(PUNCT "]")
(NEWLINE)
(ID "BOM_UTF8")
(PUNCT "=")
(LIT #"\357\273\277")
(NEWLINE)
(ID "BOM_LE")
(PUNCT "=")
(ID "BOM_UTF16_LE")
(PUNCT "=")
(LIT #"\377\376")
(NEWLINE)
(ID "BOM_BE")
(PUNCT "=")
(ID "BOM_UTF16_BE")
(PUNCT "=")
(LIT #"\376\377")
(NEWLINE)
(ID "BOM_UTF32_LE")
(PUNCT "=")
(LIT #"\377\376\0\0")
(NEWLINE)
(ID "BOM_UTF32_BE")
(PUNCT "=")
(LIT #"\0\0\376\377")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "byteorder")
(PUNCT "==")
(LIT "little")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BOM")
(PUNCT "=")
(ID "BOM_UTF16")
(PUNCT "=")
(ID "BOM_UTF16_LE")
(NEWLINE)
(ID "BOM_UTF32")
(PUNCT "=")
(ID "BOM_UTF32_LE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BOM")
(PUNCT "=")
(ID "BOM_UTF16")
(PUNCT "=")
(ID "BOM_UTF16_BE")
(NEWLINE)
(ID "BOM_UTF32")
(PUNCT "=")
(ID "BOM_UTF32_BE")
(NEWLINE)
(DEDENT)
(ID "BOM32_LE")
(PUNCT "=")
(ID "BOM_UTF16_LE")
(NEWLINE)
(ID "BOM32_BE")
(PUNCT "=")
(ID "BOM_UTF16_BE")
(NEWLINE)
(ID "BOM64_LE")
(PUNCT "=")
(ID "BOM_UTF32_LE")
(NEWLINE)
(ID "BOM64_BE")
(PUNCT "=")
(ID "BOM_UTF32_BE")
(NEWLINE)
(KEYWORD class)
(ID "CodecInfo")
(PUNCT "(")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Codec details when looking up the codec registry")
(NEWLINE)
(ID "_is_text_encoding")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "encode")
(PUNCT ",")
(ID "decode")
(PUNCT ",")
(ID "streamreader")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "streamwriter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "incrementalencoder")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "incrementaldecoder")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "_is_text_encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "=")
(ID "tuple")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "(")
(ID "encode")
(PUNCT ",")
(ID "decode")
(PUNCT ",")
(ID "streamreader")
(PUNCT ",")
(ID "streamwriter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "=")
(ID "encode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "=")
(ID "decode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "incrementalencoder")
(PUNCT "=")
(ID "incrementalencoder")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "incrementaldecoder")
(PUNCT "=")
(ID "incrementaldecoder")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "streamwriter")
(PUNCT "=")
(ID "streamwriter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "streamreader")
(PUNCT "=")
(ID "streamreader")
(NEWLINE)
(KEYWORD if)
(ID "_is_text_encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_is_text_encoding")
(PUNCT "=")
(ID "_is_text_encoding")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s.%s object for encoding %s at 0x%x>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__module__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Codec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'surrogateescape' - replace with private code points U+DCnn.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalEncoder")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Creates an IncrementalEncoder instance.\n\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Encodes input and returns the resulting object.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Resets the encoder to the initial state.\n        ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getstate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the current state of the encoder.\n        ")
(NEWLINE)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setstate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        ")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BufferedIncrementalEncoder")
(PUNCT "(")
(ID "IncrementalEncoder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "IncrementalEncoder")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_buffer_encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT ",")
(ID "final")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "+")
(ID "input")
(NEWLINE)
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "consumed")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_buffer_encode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ",")
(ID "final")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "consumed")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "IncrementalEncoder")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getstate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "buffer")
(KEYWORD or)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setstate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(ID "state")
(KEYWORD or)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalDecoder")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Create a IncrementalDecoder instance.\n\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Decode input and returns the resulting object.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Reset the decoder to the initial state.\n        ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getstate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b\"\", 0).\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(LIT #"")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setstate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b\"\", 0)) must be equivalent to reset().\n        ")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BufferedIncrementalDecoder")
(PUNCT "(")
(ID "IncrementalDecoder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "IncrementalDecoder")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_buffer_decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT ",")
(ID "final")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "+")
(ID "input")
(NEWLINE)
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "consumed")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_buffer_decode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ",")
(ID "final")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "consumed")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "IncrementalDecoder")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getstate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setstate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(ID "state")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StreamWriter")
(PUNCT "(")
(ID "Codec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Creates a StreamWriter instance.\n\n            stream must be a file-like object open for writing.\n\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'xmlcharrefreplace' - Replace with the appropriate XML\n                                   character reference.\n             'backslashreplace'  - Replace with backslashed escape\n                                   sequences (only for encoding).\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Writes the object's contents encoded to self.stream.\n        ")
(NEWLINE)
(ID "data")
(PUNCT ",")
(ID "consumed")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writelines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Writes the concatenated list of strings to the stream\n            using .write().\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        ")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "whence")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT ",")
(ID "whence")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "whence")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "offset")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "getattr")
(PUNCT "=")
(ID "getattr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Inherit all other methods from the underlying stream.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StreamReader")
(PUNCT "(")
(ID "Codec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charbuffertype")
(PUNCT "=")
(ID "str")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Creates a StreamReader instance.\n\n            stream must be a file-like object open for reading.\n\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character;\n\n            The set of allowed parameter values can be extended via\n            register_error.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bytebuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "charbuffertype")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "chars")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "firstline")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of decoded code points or bytes to\n            return. read() will never return more data than requested,\n            but it might return less, if there is not enough available.\n\n            size indicates the approximate maximum number of decoded\n            bytes or code points to read for decoding. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy, meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "chars")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT ")")
(PUNCT ">=")
(ID "chars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "size")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT ")")
(PUNCT ">=")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "size")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newdata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newdata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "bytebuffer")
(PUNCT "+")
(ID "newdata")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newchars")
(PUNCT ",")
(ID "decodedbytes")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "firstline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newchars")
(PUNCT ",")
(ID "decodedbytes")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(ID "exc")
(PUNCT ".")
(ID "start")
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "newchars")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT "<=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "bytebuffer")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "decodedbytes")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "+=")
(ID "newchars")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "newdata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "chars")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "[")
(PUNCT ":")
(ID "chars")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "[")
(ID "chars")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "keepends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(ID "readsize")
(PUNCT "=")
(ID "size")
(KEYWORD or)
(LIT 72)
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "readsize")
(PUNCT ",")
(ID "firstline")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "data")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\r")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(KEYWORD and)
(ID "data")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT #"\r")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "chars")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "line")
(PUNCT "+=")
(ID "data")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "=")
(ID "lines")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "keepends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "line0withend")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "line0withoutend")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "line0withend")
(PUNCT "!=")
(ID "line0withoutend")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(NEWLINE)
(KEYWORD if)
(ID "keepends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line0withend")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line0withoutend")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(KEYWORD or)
(ID "size")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(KEYWORD and)
(KEYWORD not)
(ID "keepends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "readsize")
(PUNCT "<")
(LIT 8000)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readsize")
(PUNCT "*=")
(LIT 2)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sizehint")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Read all lines available on the input stream\n            and return them as a list.\n\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        ")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bytebuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "charbuffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_empty_charbuffer")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linebuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "whence")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Set the input stream's current position.\n\n            Resets the codec buffers used for keeping state.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT ",")
(ID "whence")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the next decoded line from the input stream.")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "StopIteration")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "getattr")
(PUNCT "=")
(ID "getattr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Inherit all other methods from the underlying stream.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StreamReaderWriter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    ")
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(LIT "unknown")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "Reader")
(PUNCT ",")
(ID "Writer")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Creates a StreamReaderWriter instance.\n\n            stream must be a Stream-like object.\n\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT "=")
(ID "Reader")
(PUNCT "(")
(ID "stream")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT "=")
(ID "Writer")
(PUNCT "(")
(ID "stream")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sizehint")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "readlines")
(PUNCT "(")
(ID "sizehint")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the next decoded line from the input stream.")
(NEWLINE)
(KEYWORD return)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writelines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "writelines")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "whence")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT ",")
(ID "whence")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "whence")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "offset")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "getattr")
(PUNCT "=")
(ID "getattr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Inherit all other methods from the underlying stream.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StreamRecoder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " StreamRecoder instances translate data from one encoding to another.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the StreamRecoder is first decoded into an\n        intermediate format (depending on the \"decode\" codec) and then\n        written to the underlying stream using an instance of the provided\n        Writer class.\n\n        In the other direction, data is read from the underlying stream using\n        a Reader instance and then encoded and returned to the caller.\n\n    ")
(NEWLINE)
(ID "data_encoding")
(PUNCT "=")
(LIT "unknown")
(NEWLINE)
(ID "file_encoding")
(PUNCT "=")
(LIT "unknown")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "encode")
(PUNCT ",")
(ID "decode")
(PUNCT ",")
(ID "Reader")
(PUNCT ",")
(ID "Writer")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            data visible to .read() and .write()) while Reader and Writer\n            work on the backend (the data in stream).\n\n            You can use these objects to do transparent\n            transcodings from e.g. latin-1 to utf-8 and back.\n\n            stream must be a file-like object.\n\n            encode and decode must adhere to the Codec interface; Reader and\n            Writer must be factory functions or classes providing the\n            StreamReader and StreamWriter interfaces resp.\n\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "=")
(ID "encode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "=")
(ID "decode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT "=")
(ID "Reader")
(PUNCT "(")
(ID "stream")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT "=")
(ID "Writer")
(PUNCT "(")
(ID "stream")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ",")
(ID "bytesencoded")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT ",")
(ID "bytesencoded")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sizehint")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ",")
(ID "bytesencoded")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(ID "keepends")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the next decoded line from the input stream.")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ",")
(ID "bytesencoded")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT ",")
(ID "bytesdecoded")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writelines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ",")
(ID "bytesdecoded")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "getattr")
(PUNCT "=")
(ID "getattr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Inherit all other methods from the underlying stream.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Underlying encoded files are always opened in binary mode.\n        The default file mode is 'r', meaning to open the file in read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(LIT "b")
(KEYWORD not)
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "mode")
(PUNCT "+")
(LIT "b")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT "=")
(ID "builtins")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "buffering")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "file")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "srw")
(PUNCT "=")
(ID "StreamReaderWriter")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "info")
(PUNCT ".")
(ID "streamreader")
(PUNCT ",")
(ID "info")
(PUNCT ".")
(ID "streamwriter")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "srw")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(KEYWORD return)
(ID "srw")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "EncodedFile")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "data_encoding")
(PUNCT ",")
(ID "file_encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Data written to the wrapped file is decoded according\n        to the given data_encoding and then encoded to the underlying\n        file using file_encoding. The intermediate data type\n        will usually be Unicode but depends on the specified codecs.\n\n        Bytes read from the file are decoded using file_encoding and then\n        passed back to the caller encoded using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "file_encoding")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file_encoding")
(PUNCT "=")
(ID "data_encoding")
(NEWLINE)
(DEDENT)
(ID "data_info")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "data_encoding")
(PUNCT ")")
(NEWLINE)
(ID "file_info")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "file_encoding")
(PUNCT ")")
(NEWLINE)
(ID "sr")
(PUNCT "=")
(ID "StreamRecoder")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "data_info")
(PUNCT ".")
(ID "encode")
(PUNCT ",")
(ID "data_info")
(PUNCT ".")
(ID "decode")
(PUNCT ",")
(ID "file_info")
(PUNCT ".")
(ID "streamreader")
(PUNCT ",")
(ID "file_info")
(PUNCT ".")
(ID "streamwriter")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "sr")
(PUNCT ".")
(ID "data_encoding")
(PUNCT "=")
(ID "data_encoding")
(NEWLINE)
(ID "sr")
(PUNCT ".")
(ID "file_encoding")
(PUNCT "=")
(ID "file_encoding")
(NEWLINE)
(KEYWORD return)
(ID "sr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getencoder")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getdecoder")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getincrementalencoder")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n\n    ")
(NEWLINE)
(ID "encoder")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ".")
(ID "incrementalencoder")
(NEWLINE)
(KEYWORD if)
(ID "encoder")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LookupError")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "encoder")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getincrementaldecoder")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n\n    ")
(NEWLINE)
(ID "decoder")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ".")
(ID "incrementaldecoder")
(NEWLINE)
(KEYWORD if)
(ID "decoder")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LookupError")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "decoder")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getreader")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ".")
(ID "streamreader")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getwriter")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT ".")
(ID "streamwriter")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "iterencode")
(PUNCT "(")
(ID "iterator")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using a IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    ")
(NEWLINE)
(ID "encoder")
(PUNCT "=")
(ID "getincrementalencoder")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT "(")
(ID "errors")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "input")
(KEYWORD in)
(ID "iterator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT "=")
(ID "encoder")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "output")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "output")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "output")
(PUNCT "=")
(ID "encoder")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "output")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "output")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "iterdecode")
(PUNCT "(")
(ID "iterator")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using a IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    ")
(NEWLINE)
(ID "decoder")
(PUNCT "=")
(ID "getincrementaldecoder")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(PUNCT "(")
(ID "errors")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "input")
(KEYWORD in)
(ID "iterator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT "=")
(ID "decoder")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "output")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "output")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "output")
(PUNCT "=")
(ID "decoder")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT #"")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "output")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "output")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "make_identity_dict")
(PUNCT "(")
(ID "rng")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    ")
(NEWLINE)
(KEYWORD return)
(PUNCT "{")
(ID "i")
(PUNCT ":")
(ID "i")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "rng")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_encoding_map")
(PUNCT "(")
(ID "decoding_map")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \u001A.\n\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "decoding_map")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "v")
(KEYWORD in)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "[")
(ID "v")
(PUNCT "]")
(PUNCT "=")
(ID "k")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "[")
(ID "v")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "m")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strict_errors")
(PUNCT "=")
(ID "lookup_error")
(PUNCT "(")
(LIT "strict")
(PUNCT ")")
(NEWLINE)
(ID "ignore_errors")
(PUNCT "=")
(ID "lookup_error")
(PUNCT "(")
(LIT "ignore")
(PUNCT ")")
(NEWLINE)
(ID "replace_errors")
(PUNCT "=")
(ID "lookup_error")
(PUNCT "(")
(LIT "replace")
(PUNCT ")")
(NEWLINE)
(ID "xmlcharrefreplace_errors")
(PUNCT "=")
(ID "lookup_error")
(PUNCT "(")
(LIT "xmlcharrefreplace")
(PUNCT ")")
(NEWLINE)
(ID "backslashreplace_errors")
(PUNCT "=")
(ID "lookup_error")
(PUNCT "(")
(LIT "backslashreplace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "LookupError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strict_errors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "ignore_errors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "replace_errors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "xmlcharrefreplace_errors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "backslashreplace_errors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "_false")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "_false")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "encodings")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "EncodedFile")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(LIT "latin-1")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "EncodedFile")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
