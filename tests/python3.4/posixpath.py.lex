(LIT "Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(NEWLINE)
(KEYWORD import)
(ID "genericpath")
(NEWLINE)
(KEYWORD from)
(ID "genericpath")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "normcase")
(PUNCT ",")
(LIT "isabs")
(PUNCT ",")
(LIT "join")
(PUNCT ",")
(LIT "splitdrive")
(PUNCT ",")
(LIT "split")
(PUNCT ",")
(LIT "splitext")
(PUNCT ",")
(LIT "basename")
(PUNCT ",")
(LIT "dirname")
(PUNCT ",")
(LIT "commonprefix")
(PUNCT ",")
(LIT "getsize")
(PUNCT ",")
(LIT "getmtime")
(PUNCT ",")
(LIT "getatime")
(PUNCT ",")
(LIT "getctime")
(PUNCT ",")
(LIT "islink")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(LIT "lexists")
(PUNCT ",")
(LIT "isdir")
(PUNCT ",")
(LIT "isfile")
(PUNCT ",")
(LIT "ismount")
(PUNCT ",")
(LIT "expanduser")
(PUNCT ",")
(LIT "expandvars")
(PUNCT ",")
(LIT "normpath")
(PUNCT ",")
(LIT "abspath")
(PUNCT ",")
(LIT "samefile")
(PUNCT ",")
(LIT "sameopenfile")
(PUNCT ",")
(LIT "samestat")
(PUNCT ",")
(LIT "curdir")
(PUNCT ",")
(LIT "pardir")
(PUNCT ",")
(LIT "sep")
(PUNCT ",")
(LIT "pathsep")
(PUNCT ",")
(LIT "defpath")
(PUNCT ",")
(LIT "altsep")
(PUNCT ",")
(LIT "extsep")
(PUNCT ",")
(LIT "devnull")
(PUNCT ",")
(LIT "realpath")
(PUNCT ",")
(LIT "supports_unicode_filenames")
(PUNCT ",")
(LIT "relpath")
(PUNCT "]")
(NEWLINE)
(ID "curdir")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT "..")
(NEWLINE)
(ID "extsep")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "pathsep")
(PUNCT "=")
(LIT ":")
(NEWLINE)
(ID "defpath")
(PUNCT "=")
(LIT ":/bin:/usr/bin")
(NEWLINE)
(ID "altsep")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "devnull")
(PUNCT "=")
(LIT "/dev/null")
(NEWLINE)
(KEYWORD def)
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"/")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "/")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "normcase")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Normalize case of pathname.  Has no effect under Posix")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "normcase() argument must be str or bytes, ")
(LIT "not '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "s")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isabs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path is absolute")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "join")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(PUNCT "*")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "a")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "b")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "b")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "b")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "path")
(KEYWORD or)
(ID "path")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "+=")
(ID "b")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "+=")
(ID "sep")
(PUNCT "+")
(ID "b")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "all")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(PUNCT "(")
(ID "a")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't mix strings and bytes in path ")
(LIT "components")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "split")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "p")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "head")
(KEYWORD and)
(ID "head")
(PUNCT "!=")
(ID "sep")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT "=")
(ID "head")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "head")
(PUNCT ",")
(ID "tail")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "splitext")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT #"/")
(NEWLINE)
(ID "extsep")
(PUNCT "=")
(LIT #".")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "extsep")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "extsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "splitext")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(KEYWORD def)
(ID "splitdrive")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a pathname into drive and path. On Posix, drive is always\n    empty.")
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "basename")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the final component of a pathname")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dirname")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the directory component of a pathname")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "head")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "head")
(KEYWORD and)
(ID "head")
(PUNCT "!=")
(ID "sep")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT "=")
(ID "head")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "head")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "islink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path is a symbolic link")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "st")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "AttributeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "stat")
(PUNCT ".")
(ID "S_ISLNK")
(PUNCT "(")
(ID "st")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lexists")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path exists.  Returns True for broken symbolic links")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ismount")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path is a mount point")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s1")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stat")
(PUNCT ".")
(ID "S_ISLNK")
(PUNCT "(")
(ID "s1")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT #"..")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "..")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s2")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "dev1")
(PUNCT "=")
(ID "s1")
(PUNCT ".")
(ID "st_dev")
(NEWLINE)
(ID "dev2")
(PUNCT "=")
(ID "s2")
(PUNCT ".")
(ID "st_dev")
(NEWLINE)
(KEYWORD if)
(ID "dev1")
(PUNCT "!=")
(ID "dev2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "ino1")
(PUNCT "=")
(ID "s1")
(PUNCT ".")
(ID "st_ino")
(NEWLINE)
(ID "ino2")
(PUNCT "=")
(ID "s2")
(PUNCT ".")
(ID "st_ino")
(NEWLINE)
(KEYWORD if)
(ID "ino1")
(PUNCT "==")
(ID "ino2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expanduser")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tilde")
(PUNCT "=")
(LIT #"~")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tilde")
(PUNCT "=")
(LIT "~")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "tilde")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "HOME")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "pwd")
(NEWLINE)
(ID "userhome")
(PUNCT "=")
(ID "pwd")
(PUNCT ".")
(ID "getpwuid")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getuid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "pw_dir")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userhome")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "HOME")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "pwd")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pwent")
(PUNCT "=")
(ID "pwd")
(PUNCT ".")
(ID "getpwnam")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "userhome")
(PUNCT "=")
(ID "pwent")
(PUNCT ".")
(ID "pw_dir")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userhome")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "userhome")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT "=")
(LIT #"/")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "userhome")
(PUNCT "=")
(ID "userhome")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "userhome")
(PUNCT "+")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(KEYWORD or)
(ID "root")
(NEWLINE)
(DEDENT)
(ID "_varprog")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_varprogb")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "expandvars")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.")
(NEWLINE)
(KEYWORD global)
(ID "_varprog")
(PUNCT ",")
(ID "_varprogb")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT #"$")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_varprogb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "_varprogb")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"\\$(\\w+|\\{[^}]*\\})")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "search")
(PUNCT "=")
(ID "_varprogb")
(PUNCT ".")
(ID "search")
(NEWLINE)
(ID "start")
(PUNCT "=")
(LIT #"{")
(NEWLINE)
(ID "end")
(PUNCT "=")
(LIT #"}")
(NEWLINE)
(ID "environ")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "environb")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "$")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_varprog")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "_varprog")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\$(\\w+|\\{[^}]*\\})")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "search")
(PUNCT "=")
(ID "_varprog")
(PUNCT ".")
(ID "search")
(NEWLINE)
(ID "start")
(PUNCT "=")
(LIT "{")
(NEWLINE)
(ID "end")
(PUNCT "=")
(LIT "}")
(NEWLINE)
(ID "environ")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "search")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT ",")
(ID "j")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "span")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "end")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "environ")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "fsdecode")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "environ")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "j")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "j")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT "+")
(ID "value")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "+=")
(ID "tail")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Normalize path, eliminating double slashes, etc.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT #"/")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "dot")
(PUNCT "=")
(LIT #".")
(NEWLINE)
(ID "dotdot")
(PUNCT "=")
(LIT #"..")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "dot")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "dotdot")
(PUNCT "=")
(LIT "..")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "path")
(PUNCT "==")
(ID "empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dot")
(NEWLINE)
(DEDENT)
(ID "initial_slashes")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "initial_slashes")
(KEYWORD and)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT "*")
(LIT 3)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "initial_slashes")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "comps")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(ID "new_comps")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "comp")
(KEYWORD in)
(ID "comps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "comp")
(KEYWORD in)
(PUNCT "(")
(ID "empty")
(PUNCT ",")
(ID "dot")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "comp")
(PUNCT "!=")
(ID "dotdot")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "initial_slashes")
(KEYWORD and)
(KEYWORD not)
(ID "new_comps")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "new_comps")
(KEYWORD and)
(ID "new_comps")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "dotdot")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_comps")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "comp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "new_comps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_comps")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "comps")
(PUNCT "=")
(ID "new_comps")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "sep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "comps")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "initial_slashes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "sep")
(PUNCT "*")
(ID "initial_slashes")
(PUNCT "+")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(KEYWORD or)
(ID "dot")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an absolute path.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isabs")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwdb")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "cwd")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "realpath")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.")
(NEWLINE)
(ID "path")
(PUNCT ",")
(ID "ok")
(PUNCT "=")
(ID "_joinrealpath")
(PUNCT "(")
(ID "filename")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_joinrealpath")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "rest")
(PUNCT ",")
(ID "seen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT #"/")
(NEWLINE)
(ID "curdir")
(PUNCT "=")
(LIT #".")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT #"..")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "curdir")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT "..")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isabs")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT "=")
(ID "rest")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "sep")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "rest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "rest")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD or)
(ID "name")
(PUNCT "==")
(ID "curdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(ID "pardir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "split")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(ID "pardir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "pardir")
(PUNCT ",")
(ID "pardir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "pardir")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "newpath")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "islink")
(PUNCT "(")
(ID "newpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "newpath")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "newpath")
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "seen")
(PUNCT "[")
(ID "newpath")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "join")
(PUNCT "(")
(ID "newpath")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(PUNCT ",")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT "[")
(ID "newpath")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "path")
(PUNCT ",")
(ID "ok")
(PUNCT "=")
(ID "_joinrealpath")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "readlink")
(PUNCT "(")
(ID "newpath")
(PUNCT ")")
(PUNCT ",")
(ID "seen")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "ok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(PUNCT ",")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT "[")
(ID "newpath")
(PUNCT "]")
(PUNCT "=")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(PUNCT ",")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "supports_unicode_filenames")
(PUNCT "=")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "relpath")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a relative version of a path")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no path specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "curdir")
(PUNCT "=")
(LIT #".")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(LIT #"/")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT #"..")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "curdir")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT "..")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "start")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT "=")
(ID "curdir")
(NEWLINE)
(DEDENT)
(ID "start_list")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "abspath")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT "]")
(NEWLINE)
(ID "path_list")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "commonprefix")
(PUNCT "(")
(PUNCT "[")
(ID "start_list")
(PUNCT ",")
(ID "path_list")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "rel_list")
(PUNCT "=")
(PUNCT "[")
(ID "pardir")
(PUNCT "]")
(PUNCT "*")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "start_list")
(PUNCT ")")
(PUNCT "-")
(ID "i")
(PUNCT ")")
(PUNCT "+")
(ID "path_list")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "rel_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "curdir")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "rel_list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
