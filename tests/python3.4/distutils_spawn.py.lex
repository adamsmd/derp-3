(LIT "distutils.spawn\n\nProvides the 'spawn()' function, a front-end to various platform-\nspecific functions for launching another program in a sub-process.\nAlso provides the 'find_executable()' to search the path for a given\nexecutable name.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsPlatformError")
(PUNCT ",")
(ID "DistutilsExecError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "debug")
(KEYWORD import)
(ID "DEBUG")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD def)
(ID "spawn")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run another program, specified as a command list 'cmd', in a new process.\n\n    'cmd' is just the argument list for the new process, ie.\n    cmd[0] is the program to run and cmd[1:] are the rest of its arguments.\n    There is no way to run a program with a name different from that of its\n    executable.\n\n    If 'search_path' is true (the default), the system's executable\n    search path will be used to find the program; otherwise, cmd[0]\n    must be the exact path to the executable.  If 'dry_run' is true,\n    the command will not actually be run.\n\n    Raise DistutilsExecError if running the program fails in any way; just\n    return on success.\n    ")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_spawn_posix")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_spawn_nt")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "don't know how to spawn programs on platform '%s'")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_nt_quote_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quote command-line arguments for DOS/Windows conventions.\n\n    Just wraps every argument which contains blanks in double quotes, and\n    returns a new argument list.\n    ")
(NEWLINE)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "arg")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT " ")
(KEYWORD in)
(ID "arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT "\"%s\"")
(PUNCT "%")
(ID "arg")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_spawn_nt")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "cmd")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(ID "_nt_quote_args")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "search_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "find_executable")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(KEYWORD or)
(ID "executable")
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "executable")
(PUNCT "]")
(PUNCT "+")
(ID "cmd")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rc")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "spawnv")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "P_WAIT")
(PUNCT ",")
(ID "executable")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(LIT "command %r failed: %s")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "exc")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "rc")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(LIT "command %r failed with exit status %d")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "rc")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(ID "_cfg_target")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_cfg_target_split")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_spawn_posix")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "executable")
(PUNCT "=")
(ID "cmd")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "exec_fn")
(PUNCT "=")
(ID "search_path")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "execvp")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "execv")
(NEWLINE)
(ID "env")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_cfg_target")
(PUNCT ",")
(ID "_cfg_target_split")
(NEWLINE)
(KEYWORD if)
(ID "_cfg_target")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_cfg_target")
(PUNCT "=")
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "MACOSX_DEPLOYMENT_TARGET")
(PUNCT ")")
(KEYWORD or)
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "_cfg_target")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_cfg_target_split")
(PUNCT "=")
(PUNCT "[")
(ID "int")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "_cfg_target")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_cfg_target")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cur_target")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "MACOSX_DEPLOYMENT_TARGET")
(PUNCT ",")
(ID "_cfg_target")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_cfg_target_split")
(PUNCT ">")
(PUNCT "[")
(ID "int")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "cur_target")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "my_msg")
(PUNCT "=")
(PUNCT "(")
(LIT "$MACOSX_DEPLOYMENT_TARGET mismatch: ")
(LIT "now \"%s\" but \"%s\" during configure")
(PUNCT "%")
(PUNCT "(")
(ID "cur_target")
(PUNCT ",")
(ID "_cfg_target")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(ID "my_msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "env")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ",")
(ID "MACOSX_DEPLOYMENT_TARGET")
(PUNCT "=")
(ID "cur_target")
(PUNCT ")")
(NEWLINE)
(ID "exec_fn")
(PUNCT "=")
(ID "search_path")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "execvpe")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "execve")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "pid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fork")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pid")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "env")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec_fn")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec_fn")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "env")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "unable to execute %r: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "strerror")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "_exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "unable to execute %r for unknown reasons")
(PUNCT "%")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "_exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT ",")
(ID "status")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EINTR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(LIT "command %r failed: %s")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "exc")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "WIFSIGNALED")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(LIT "command %r terminated by signal %d")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "WTERMSIG")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "WIFEXITED")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exit_status")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "WEXITSTATUS")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exit_status")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(LIT "command %r failed with exit status %d")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "exit_status")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "WIFSTOPPED")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(LIT "unknown error executing %r: termination status %d")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "status")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_executable")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Tries to find 'executable' in the directories listed in 'path'.\n\n    A string listing directories separated by 'os.pathsep'; defaults to\n    os.environ['PATH'].  Returns the complete filename or None if not found.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "PATH")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "paths")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "ext")
(PUNCT "!=")
(LIT ".exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "executable")
(PUNCT "+")
(LIT ".exe")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "executable")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
