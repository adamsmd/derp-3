(LIT "Email address parsing code.\n\nLifted directly from rfc822.py.  This should eventually be rewritten.\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "mktime_tz")
(PUNCT ",")
(LIT "parsedate")
(PUNCT ",")
(LIT "parsedate_tz")
(PUNCT ",")
(LIT "quote")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "time")
(PUNCT ",")
(ID "calendar")
(NEWLINE)
(ID "SPACE")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(ID "EMPTYSTRING")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "COMMASPACE")
(PUNCT "=")
(LIT ", ")
(NEWLINE)
(ID "_monthnames")
(PUNCT "=")
(PUNCT "[")
(LIT "jan")
(PUNCT ",")
(LIT "feb")
(PUNCT ",")
(LIT "mar")
(PUNCT ",")
(LIT "apr")
(PUNCT ",")
(LIT "may")
(PUNCT ",")
(LIT "jun")
(PUNCT ",")
(LIT "jul")
(PUNCT ",")
(LIT "aug")
(PUNCT ",")
(LIT "sep")
(PUNCT ",")
(LIT "oct")
(PUNCT ",")
(LIT "nov")
(PUNCT ",")
(LIT "dec")
(PUNCT ",")
(LIT "january")
(PUNCT ",")
(LIT "february")
(PUNCT ",")
(LIT "march")
(PUNCT ",")
(LIT "april")
(PUNCT ",")
(LIT "may")
(PUNCT ",")
(LIT "june")
(PUNCT ",")
(LIT "july")
(PUNCT ",")
(LIT "august")
(PUNCT ",")
(LIT "september")
(PUNCT ",")
(LIT "october")
(PUNCT ",")
(LIT "november")
(PUNCT ",")
(LIT "december")
(PUNCT "]")
(NEWLINE)
(ID "_daynames")
(PUNCT "=")
(PUNCT "[")
(LIT "mon")
(PUNCT ",")
(LIT "tue")
(PUNCT ",")
(LIT "wed")
(PUNCT ",")
(LIT "thu")
(PUNCT ",")
(LIT "fri")
(PUNCT ",")
(LIT "sat")
(PUNCT ",")
(LIT "sun")
(PUNCT "]")
(NEWLINE)
(ID "_timezones")
(PUNCT "=")
(PUNCT "{")
(LIT "UT")
(PUNCT ":")
(LIT 0)
(PUNCT ",")
(LIT "UTC")
(PUNCT ":")
(LIT 0)
(PUNCT ",")
(LIT "GMT")
(PUNCT ":")
(LIT 0)
(PUNCT ",")
(LIT "Z")
(PUNCT ":")
(LIT 0)
(PUNCT ",")
(LIT "AST")
(PUNCT ":")
(PUNCT "-")
(LIT 400)
(PUNCT ",")
(LIT "ADT")
(PUNCT ":")
(PUNCT "-")
(LIT 300)
(PUNCT ",")
(LIT "EST")
(PUNCT ":")
(PUNCT "-")
(LIT 500)
(PUNCT ",")
(LIT "EDT")
(PUNCT ":")
(PUNCT "-")
(LIT 400)
(PUNCT ",")
(LIT "CST")
(PUNCT ":")
(PUNCT "-")
(LIT 600)
(PUNCT ",")
(LIT "CDT")
(PUNCT ":")
(PUNCT "-")
(LIT 500)
(PUNCT ",")
(LIT "MST")
(PUNCT ":")
(PUNCT "-")
(LIT 700)
(PUNCT ",")
(LIT "MDT")
(PUNCT ":")
(PUNCT "-")
(LIT 600)
(PUNCT ",")
(LIT "PST")
(PUNCT ":")
(PUNCT "-")
(LIT 800)
(PUNCT ",")
(LIT "PDT")
(PUNCT ":")
(PUNCT "-")
(LIT 700)
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "parsedate_tz")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a date string to a time tuple.\n\n    Accounts for military timezones.\n    ")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "_parsedate_tz")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "res")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "res")
(PUNCT "[")
(LIT 9)
(PUNCT "]")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "[")
(LIT 9)
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parsedate_tz")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert date to extended time tuple.\n\n    The last (additional) element is the time zone offset in seconds, except if\n    the timezone was specified as -0000.  In that case the last element is\n    None.  This indicates a UTC timestamp that explicitly declaims knowledge of\n    the source timezone, as opposed to a +0000 timestamp that indicates the\n    source timezone really was UTC.\n\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(KEYWORD or)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(ID "_daynames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stuff")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "stuff")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "stuff")
(PUNCT "+")
(ID "data")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "+")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "<")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(NEWLINE)
(PUNCT "[")
(ID "dd")
(PUNCT ",")
(ID "mm")
(PUNCT ",")
(ID "yy")
(PUNCT ",")
(ID "tm")
(PUNCT ",")
(ID "tz")
(PUNCT "]")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "mm")
(PUNCT "=")
(ID "mm")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mm")
(KEYWORD not)
(KEYWORD in)
(ID "_monthnames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dd")
(PUNCT ",")
(ID "mm")
(PUNCT "=")
(ID "mm")
(PUNCT ",")
(ID "dd")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mm")
(KEYWORD not)
(KEYWORD in)
(ID "_monthnames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "mm")
(PUNCT "=")
(ID "_monthnames")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "mm")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "mm")
(PUNCT ">")
(LIT 12)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mm")
(PUNCT "-=")
(LIT 12)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dd")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dd")
(PUNCT "=")
(ID "dd")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "yy")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yy")
(PUNCT ",")
(ID "tm")
(PUNCT "=")
(ID "tm")
(PUNCT ",")
(ID "yy")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "yy")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yy")
(PUNCT "=")
(ID "yy")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "yy")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "isdigit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yy")
(PUNCT ",")
(ID "tz")
(PUNCT "=")
(ID "tz")
(PUNCT ",")
(ID "yy")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tm")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tm")
(PUNCT "=")
(ID "tm")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "tm")
(PUNCT "=")
(ID "tm")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "tm")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "thh")
(PUNCT ",")
(ID "tmm")
(PUNCT "]")
(PUNCT "=")
(ID "tm")
(NEWLINE)
(ID "tss")
(PUNCT "=")
(LIT "0")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "tm")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "thh")
(PUNCT ",")
(ID "tmm")
(PUNCT ",")
(ID "tss")
(PUNCT "]")
(PUNCT "=")
(ID "tm")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "tm")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(LIT ".")
(KEYWORD in)
(ID "tm")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tm")
(PUNCT "=")
(ID "tm")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "tm")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "thh")
(PUNCT ",")
(ID "tmm")
(PUNCT "]")
(PUNCT "=")
(ID "tm")
(NEWLINE)
(ID "tss")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "tm")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "thh")
(PUNCT ",")
(ID "tmm")
(PUNCT ",")
(ID "tss")
(PUNCT "]")
(PUNCT "=")
(ID "tm")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yy")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "yy")
(PUNCT ")")
(NEWLINE)
(ID "dd")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "dd")
(PUNCT ")")
(NEWLINE)
(ID "thh")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "thh")
(PUNCT ")")
(NEWLINE)
(ID "tmm")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "tmm")
(PUNCT ")")
(NEWLINE)
(ID "tss")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "tss")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "yy")
(PUNCT "<")
(LIT 100)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "yy")
(PUNCT ">")
(LIT 68)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yy")
(PUNCT "+=")
(LIT 1900)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yy")
(PUNCT "+=")
(LIT 2000)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "tzoffset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "tz")
(PUNCT "=")
(ID "tz")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tz")
(KEYWORD in)
(ID "_timezones")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzoffset")
(PUNCT "=")
(ID "_timezones")
(PUNCT "[")
(ID "tz")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzoffset")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "tz")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tzoffset")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "tz")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzoffset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "tzoffset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tzoffset")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzsign")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "tzoffset")
(PUNCT "=")
(PUNCT "-")
(ID "tzoffset")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzsign")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "tzoffset")
(PUNCT "=")
(ID "tzsign")
(PUNCT "*")
(PUNCT "(")
(PUNCT "(")
(ID "tzoffset")
(PUNCT "//")
(LIT 100)
(PUNCT ")")
(PUNCT "*")
(LIT 3600)
(PUNCT "+")
(PUNCT "(")
(ID "tzoffset")
(PUNCT "%")
(LIT 100)
(PUNCT ")")
(PUNCT "*")
(LIT 60)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(ID "yy")
(PUNCT ",")
(ID "mm")
(PUNCT ",")
(ID "dd")
(PUNCT ",")
(ID "thh")
(PUNCT ",")
(ID "tmm")
(PUNCT ",")
(ID "tss")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "tzoffset")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parsedate")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a time string to a time tuple.")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "parsedate_tz")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "t")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "t")
(PUNCT "[")
(PUNCT ":")
(LIT 9)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "mktime_tz")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT "[")
(LIT 9)
(PUNCT "]")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "time")
(PUNCT ".")
(ID "mktime")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(LIT 8)
(PUNCT "]")
(PUNCT "+")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "calendar")
(PUNCT ".")
(ID "timegm")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "t")
(PUNCT "-")
(ID "data")
(PUNCT "[")
(LIT 9)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "quote")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Prepare string to be used in a quoted string.\n\n    Turns backslash and double quote characters into quoted pairs.  These\n    are the only characters that need to be quoted inside a quoted string.\n    Does not add the surrounding double quotes.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "str")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\\\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "AddrlistClass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Address parser class by Ben Escoto.\n\n    To understand what this class does, it helps to have a copy of RFC 2822 in\n    front of you.\n\n    Note: this class interface is deprecated and may be removed in the future.\n    Use email.utils.AddressList instead.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize a new instance.\n\n        `field' is an unparsed address header field, containing\n        one or more addresses.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "specials")
(PUNCT "=")
(LIT "()<>@,:;.\"[]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "LWS")
(PUNCT "=")
(LIT " \t")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "CR")
(PUNCT "=")
(LIT "\r\n")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "FWS")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "LWS")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "CR")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "atomends")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "specials")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "LWS")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "CR")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "phraseends")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "atomends")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "=")
(ID "field")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gotonext")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Skip white space and extract comments.")
(NEWLINE)
(ID "wslist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "LWS")
(PUNCT "+")
(LIT "\n\r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(LIT "\n\r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getcomment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "wslist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getaddrlist")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse all addresses.\n\n        Returns a list containing all of the addresses.\n        ")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ad")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getaddress")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ad")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "+=")
(ID "ad")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getaddress")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the next address.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "oldpos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pos")
(NEWLINE)
(ID "oldcl")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "commentlist")
(NEWLINE)
(ID "plist")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getphraselist")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "plist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ")")
(PUNCT ",")
(ID "plist")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(LIT ".@")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "=")
(ID "oldpos")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT "=")
(ID "oldcl")
(NEWLINE)
(ID "addrspec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getaddrspec")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ")")
(PUNCT ",")
(ID "addrspec")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "fieldlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "fieldlen")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "returnlist")
(PUNCT "=")
(ID "returnlist")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "getaddress")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "<")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "routeaddr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getrouteaddr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "plist")
(PUNCT ")")
(PUNCT "+")
(LIT " (")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ")")
(PUNCT "+")
(LIT ")")
(PUNCT ",")
(ID "routeaddr")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "plist")
(PUNCT ")")
(PUNCT ",")
(ID "routeaddr")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "plist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "returnlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ")")
(PUNCT ",")
(ID "plist")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "specials")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "returnlist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getrouteaddr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a route address (Return-path value).\n\n        This method just skips all the route stuff and returns the addrspec.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "!=")
(LIT "<")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "expectroute")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "adlist")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "expectroute")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "getdomain")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "expectroute")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ">")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "@")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "expectroute")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "adlist")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getaddrspec")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "adlist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getaddrspec")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse an RFC 2822 addr-spec.")
(NEWLINE)
(ID "aslist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "preserve_ws")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "aslist")
(KEYWORD and)
(KEYWORD not)
(ID "aslist")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "aslist")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "aslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "preserve_ws")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "aslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\"%s\"")
(PUNCT "%")
(ID "quote")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getquote")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "atomends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "aslist")
(KEYWORD and)
(KEYWORD not)
(ID "aslist")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "aslist")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "aslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getatom")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ws")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "preserve_ws")
(KEYWORD and)
(ID "ws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "aslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ws")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "!=")
(LIT "@")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "aslist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "aslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "@")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gotonext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "aslist")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "getdomain")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getdomain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the complete domain name from an address.")
(NEWLINE)
(ID "sdlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "LWS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getcomment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "[")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sdlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getdomainliteral")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "sdlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "atomends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sdlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getatom")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sdlist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getdelimited")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "beginchar")
(PUNCT ",")
(ID "endchars")
(PUNCT ",")
(ID "allowcomments")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a header fragment delimited by special characters.\n\n        `beginchar' is the start character for the fragment.\n        If self is not looking at an instance of `beginchar' then\n        getdelimited returns the empty string.\n\n        `endchars' is a sequence of allowable end-delimiting characters.\n        Parsing stops when one of these is encountered.\n\n        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed\n        within the parsed fragment.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "!=")
(ID "beginchar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(ID "slist")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(NEWLINE)
(ID "quote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "quote")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "quote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "endchars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "allowcomments")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getcomment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "slist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getquote")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a quote-delimited fragment from self's field.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getdelimited")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\"\r")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcomment")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a parenthesis-delimited fragment from self's field.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getdelimited")
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT ")\r")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getdomainliteral")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse an RFC 2822 domain-literal.")
(NEWLINE)
(KEYWORD return)
(LIT "[%s]")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "getdelimited")
(PUNCT "(")
(LIT "[")
(PUNCT ",")
(LIT "]\r")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getatom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "atomends")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse an RFC 2822 atom.\n\n        Optional atomends specifies a different set of end token delimiters\n        (the default is to use self.atomends).  This is used e.g. in\n        getphraselist() since phrase endings must not include the `.' (which\n        is legal in phrases).")
(NEWLINE)
(ID "atomlist")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "atomends")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "atomends")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "atomends")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "atomends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "atomlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "atomlist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getphraselist")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a sequence of RFC 2822 phrases.\n\n        A phrase is a sequence of words, which are in turn either RFC 2822\n        atoms or quoted-strings.  Phrases are canonicalized by squeezing all\n        runs of continuous whitespace into one space.\n        ")
(NEWLINE)
(ID "plist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "FWS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getquote")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "commentlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getcomment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "field")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "phraseends")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getatom")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "phraseends")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "plist")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AddressList")
(PUNCT "(")
(ID "AddrlistClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An AddressList encapsulates a list of parsed RFC 2822 addresses.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "field")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "AddrlistClass")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "field")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "field")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getaddrlist")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__add__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newaddr")
(PUNCT "=")
(ID "AddressList")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "newaddr")
(PUNCT ".")
(ID "addresslist")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newaddr")
(PUNCT ".")
(ID "addresslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "newaddr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iadd__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__sub__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newaddr")
(PUNCT "=")
(ID "AddressList")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "x")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newaddr")
(PUNCT ".")
(ID "addresslist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "newaddr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__isub__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "other")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "addresslist")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
