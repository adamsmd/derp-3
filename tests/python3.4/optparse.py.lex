(LIT "A powerful, extensible, and easy-to-use option parser.\n\nBy Greg Ward <gward@python.net>\n\nOriginally distributed as Optik.\n\nFor support, use the optik-users@lists.sourceforge.net mailing list\n(http://lists.sourceforge.net/lists/listinfo/optik-users).\n\nSimple usage example:\n\n   from optparse import OptionParser\n\n   parser = OptionParser()\n   parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                     help=\"write report to FILE\", metavar=\"FILE\")\n   parser.add_option(\"-q\", \"--quiet\",\n                     action=\"store_false\", dest=\"verbose\", default=True,\n                     help=\"don't print status messages to stdout\")\n\n   (options, args) = parser.parse_args()\n")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "1.5.3")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Option")
(PUNCT ",")
(LIT "make_option")
(PUNCT ",")
(LIT "SUPPRESS_HELP")
(PUNCT ",")
(LIT "SUPPRESS_USAGE")
(PUNCT ",")
(LIT "Values")
(PUNCT ",")
(LIT "OptionContainer")
(PUNCT ",")
(LIT "OptionGroup")
(PUNCT ",")
(LIT "OptionParser")
(PUNCT ",")
(LIT "HelpFormatter")
(PUNCT ",")
(LIT "IndentedHelpFormatter")
(PUNCT ",")
(LIT "TitledHelpFormatter")
(PUNCT ",")
(LIT "OptParseError")
(PUNCT ",")
(LIT "OptionError")
(PUNCT ",")
(LIT "OptionConflictError")
(PUNCT ",")
(LIT "OptionValueError")
(PUNCT ",")
(LIT "BadOptionError")
(PUNCT "]")
(NEWLINE)
(ID "__copyright__")
(PUNCT "=")
(LIT "\nCopyright (c) 2001-2006 Gregory P. Ward.  All rights reserved.\nCopyright (c) 2002-2006 Python Software Foundation.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n  * Neither the name of the author nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "textwrap")
(NEWLINE)
(KEYWORD def)
(ID "_repr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s at 0x%x: %s>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "gettext")
(KEYWORD import)
(ID "gettext")
(PUNCT ",")
(ID "ngettext")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "gettext")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "message")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ngettext")
(PUNCT "(")
(ID "singular")
(PUNCT ",")
(ID "plural")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "singular")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "plural")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_")
(PUNCT "=")
(ID "gettext")
(NEWLINE)
(KEYWORD class)
(ID "OptParseError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "msg")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OptionError")
(PUNCT "(")
(ID "OptParseError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised if an Option instance is created with invalid or\n    inconsistent arguments.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_id")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "option_id")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "option %s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "option_id")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "msg")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OptionConflictError")
(PUNCT "(")
(ID "OptionError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised if conflicting options are added to an OptionParser.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "OptionValueError")
(PUNCT "(")
(ID "OptParseError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised if an invalid option value is encountered on the command\n    line.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BadOptionError")
(PUNCT "(")
(ID "OptParseError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised if an invalid option is seen on the command line.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "opt_str")
(PUNCT "=")
(ID "opt_str")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_")
(PUNCT "(")
(LIT "no such option: %s")
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "opt_str")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AmbiguousOptionError")
(PUNCT "(")
(ID "BadOptionError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised if an ambiguous option is seen on the command line.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ",")
(ID "possibilities")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BadOptionError")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "possibilities")
(PUNCT "=")
(ID "possibilities")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "ambiguous option: %s (%s?)")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "opt_str")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "possibilities")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HelpFormatter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Abstract base class for formatting option help.  OptionParser\n    instances should use one of the HelpFormatter subclasses for\n    formatting help; by default IndentedHelpFormatter is used.\n\n    Instance attributes:\n      parser : OptionParser\n        the controlling OptionParser instance\n      indent_increment : int\n        the number of columns to indent per nesting level\n      max_help_position : int\n        the maximum starting column for option help text\n      help_position : int\n        the calculated starting column for option help text;\n        initially the same as the maximum\n      width : int\n        total number of columns for output (pass None to constructor for\n        this value to be taken from the $COLUMNS environment variable)\n      level : int\n        current indentation level\n      current_indent : int\n        current indentation level (in columns)\n      help_width : int\n        number of columns available for option help text (calculated)\n      default_tag : str\n        text to replace with each option's default value, \"%default\"\n        by default.  Set to false value to disable default value expansion.\n      option_strings : { Option : str }\n        maps Option instances to the snippet of help text explaining\n        the syntax of that option, e.g. \"-h, --help\" or\n        \"-fFILE, --file=FILE\"\n      _short_opt_fmt : str\n        format string controlling how short options with values are\n        printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or\n        \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that\n        Optik supports.\n      _long_opt_fmt : str\n        similar but for long options; must be either \"%s %s\" (\"--file FILE\")\n        or \"%s=%s\" (\"--file=FILE\").\n    ")
(NEWLINE)
(ID "NO_DEFAULT_VALUE")
(PUNCT "=")
(LIT "none")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent_increment")
(PUNCT ",")
(ID "max_help_position")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "short_first")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "indent_increment")
(PUNCT "=")
(ID "indent_increment")
(NEWLINE)
(KEYWORD if)
(ID "width")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "width")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "COLUMNS")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "KeyError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "width")
(PUNCT "=")
(LIT 80)
(NEWLINE)
(DEDENT)
(ID "width")
(PUNCT "-=")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "width")
(PUNCT "=")
(ID "width")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "help_position")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "max_help_position")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "max_help_position")
(PUNCT ",")
(ID "max")
(PUNCT "(")
(ID "width")
(PUNCT "-")
(LIT 20)
(PUNCT ",")
(ID "indent_increment")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "help_width")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "short_first")
(PUNCT "=")
(ID "short_first")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "default_tag")
(PUNCT "=")
(LIT "%default")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_strings")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_short_opt_fmt")
(PUNCT "=")
(LIT "%s %s")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_long_opt_fmt")
(PUNCT "=")
(LIT "%s=%s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_parser")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT "=")
(ID "parser")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_short_opt_delimiter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delim")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "delim")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT " ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid metavar delimiter for short options: %r")
(PUNCT "%")
(ID "delim")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_short_opt_fmt")
(PUNCT "=")
(LIT "%s")
(PUNCT "+")
(ID "delim")
(PUNCT "+")
(LIT "%s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_long_opt_delimiter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delim")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "delim")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "=")
(PUNCT ",")
(LIT " ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid metavar delimiter for long options: %r")
(PUNCT "%")
(ID "delim")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_long_opt_fmt")
(PUNCT "=")
(LIT "%s")
(PUNCT "+")
(ID "delim")
(PUNCT "+")
(LIT "%s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "indent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "indent_increment")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dedent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT "-=")
(ID "self")
(PUNCT ".")
(ID "indent_increment")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ">=")
(LIT 0)
(PUNCT ",")
(LIT "Indent decreased below 0.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_usage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usage")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "subclasses must implement")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_heading")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "heading")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "subclasses must implement")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_text")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Format a paragraph of free-form text for inclusion in the\n        help output at the current indentation level.\n        ")
(NEWLINE)
(ID "text_width")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "width")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ",")
(LIT 11)
(PUNCT ")")
(NEWLINE)
(ID "indent")
(PUNCT "=")
(LIT " ")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(NEWLINE)
(KEYWORD return)
(ID "textwrap")
(PUNCT ".")
(ID "fill")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "text_width")
(PUNCT ",")
(ID "initial_indent")
(PUNCT "=")
(ID "indent")
(PUNCT ",")
(ID "subsequent_indent")
(PUNCT "=")
(ID "indent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_description")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "description")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_format_text")
(PUNCT "(")
(ID "description")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "format_epilog")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "epilog")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "epilog")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_format_text")
(PUNCT "(")
(ID "epilog")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "expand_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "parser")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "default_tag")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "option")
(PUNCT ".")
(ID "help")
(NEWLINE)
(DEDENT)
(ID "default_value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "defaults")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "option")
(PUNCT ".")
(ID "dest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "default_value")
(KEYWORD is)
(ID "NO_DEFAULT")
(KEYWORD or)
(ID "default_value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "NO_DEFAULT_VALUE")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "option")
(PUNCT ".")
(ID "help")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "default_tag")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "default_value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "option_strings")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(NEWLINE)
(ID "opt_width")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "help_position")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT "-")
(LIT 2)
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(PUNCT ">")
(ID "opt_width")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT "=")
(LIT "%*s%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(ID "indent_first")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "help_position")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT "=")
(LIT "%*s%-*s  ")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "opt_width")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(ID "indent_first")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT ".")
(ID "help")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "help_text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "expand_default")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(ID "help_lines")
(PUNCT "=")
(ID "textwrap")
(PUNCT ".")
(ID "wrap")
(PUNCT "(")
(ID "help_text")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "help_width")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "%*s%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "indent_first")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "help_lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "%*s%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "help_position")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "help_lines")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opts")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "store_option_strings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "max_len")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "parser")
(PUNCT ".")
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strings")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format_option_strings")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_strings")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(ID "strings")
(NEWLINE)
(ID "max_len")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "max_len")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "strings")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "group")
(KEYWORD in)
(ID "parser")
(PUNCT ".")
(ID "option_groups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "group")
(PUNCT ".")
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strings")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format_option_strings")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_strings")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(ID "strings")
(NEWLINE)
(ID "max_len")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "max_len")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "strings")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "dedent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dedent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "help_position")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "max_len")
(PUNCT "+")
(LIT 2)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "max_help_position")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "help_width")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "width")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "help_position")
(PUNCT ",")
(LIT 11)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_option_strings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a comma-separated list of option strings & metavariables.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT ".")
(ID "takes_value")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "metavar")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "metavar")
(KEYWORD or)
(ID "option")
(PUNCT ".")
(ID "dest")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "short_opts")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_short_opt_fmt")
(PUNCT "%")
(PUNCT "(")
(ID "sopt")
(PUNCT ",")
(ID "metavar")
(PUNCT ")")
(KEYWORD for)
(ID "sopt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_short_opts")
(PUNCT "]")
(NEWLINE)
(ID "long_opts")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_long_opt_fmt")
(PUNCT "%")
(PUNCT "(")
(ID "lopt")
(PUNCT ",")
(ID "metavar")
(PUNCT ")")
(KEYWORD for)
(ID "lopt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_long_opts")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "short_opts")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "_short_opts")
(NEWLINE)
(ID "long_opts")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "_long_opts")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "short_first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT "=")
(ID "short_opts")
(PUNCT "+")
(ID "long_opts")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT "=")
(ID "long_opts")
(PUNCT "+")
(ID "short_opts")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IndentedHelpFormatter")
(PUNCT "(")
(ID "HelpFormatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format help with indented section bodies.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent_increment")
(PUNCT "=")
(LIT 2)
(PUNCT ",")
(ID "max_help_position")
(PUNCT "=")
(LIT 24)
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "short_first")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "HelpFormatter")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent_increment")
(PUNCT ",")
(ID "max_help_position")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "short_first")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_usage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usage")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_")
(PUNCT "(")
(LIT "Usage: %s\n")
(PUNCT ")")
(PUNCT "%")
(ID "usage")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_heading")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "heading")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%*s%s:\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "current_indent")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "heading")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TitledHelpFormatter")
(PUNCT "(")
(ID "HelpFormatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format help with underlined section headers.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent_increment")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "max_help_position")
(PUNCT "=")
(LIT 24)
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "short_first")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "HelpFormatter")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent_increment")
(PUNCT ",")
(ID "max_help_position")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "short_first")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_usage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usage")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s  %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_heading")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "Usage")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "usage")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_heading")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "heading")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s\n%s\n")
(PUNCT "%")
(PUNCT "(")
(ID "heading")
(PUNCT ",")
(LIT "=-")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "level")
(PUNCT "]")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "heading")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_parse_num")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "val")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "0x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "radix")
(PUNCT "=")
(LIT 16)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "val")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "0b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "radix")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "val")
(PUNCT "=")
(ID "val")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(KEYWORD or)
(LIT "0")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "val")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "radix")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "radix")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "radix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_int")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_parse_num")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_builtin_cvt")
(PUNCT "=")
(PUNCT "{")
(LIT "int")
(PUNCT ":")
(PUNCT "(")
(ID "_parse_int")
(PUNCT ",")
(ID "_")
(PUNCT "(")
(LIT "integer")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "long")
(PUNCT ":")
(PUNCT "(")
(ID "_parse_int")
(PUNCT ",")
(ID "_")
(PUNCT "(")
(LIT "integer")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "float")
(PUNCT ":")
(PUNCT "(")
(ID "float")
(PUNCT ",")
(ID "_")
(PUNCT "(")
(LIT "floating-point")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "complex")
(PUNCT ":")
(PUNCT "(")
(ID "complex")
(PUNCT ",")
(ID "_")
(PUNCT "(")
(LIT "complex")
(PUNCT ")")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "check_builtin")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "cvt")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(PUNCT "=")
(ID "_builtin_cvt")
(PUNCT "[")
(ID "option")
(PUNCT ".")
(ID "type")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cvt")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionValueError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option %s: invalid %s value: %r")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check_choice")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "choices")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "choices")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "repr")
(PUNCT ",")
(ID "option")
(PUNCT ".")
(ID "choices")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "OptionValueError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option %s: invalid choice: %r (choose from %s)")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "choices")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "NO_DEFAULT")
(PUNCT "=")
(PUNCT "(")
(LIT "NO")
(PUNCT ",")
(LIT "DEFAULT")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Option")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Instance attributes:\n      _short_opts : [string]\n      _long_opts : [string]\n\n      action : string\n      type : string\n      dest : string\n      default : any\n      nargs : int\n      const : any\n      choices : [string]\n      callback : function\n      callback_args : (any*)\n      callback_kwargs : { string : any }\n      help : string\n      metavar : string\n    ")
(NEWLINE)
(ID "ATTRS")
(PUNCT "=")
(PUNCT "[")
(LIT "action")
(PUNCT ",")
(LIT "type")
(PUNCT ",")
(LIT "dest")
(PUNCT ",")
(LIT "default")
(PUNCT ",")
(LIT "nargs")
(PUNCT ",")
(LIT "const")
(PUNCT ",")
(LIT "choices")
(PUNCT ",")
(LIT "callback")
(PUNCT ",")
(LIT "callback_args")
(PUNCT ",")
(LIT "callback_kwargs")
(PUNCT ",")
(LIT "help")
(PUNCT ",")
(LIT "metavar")
(PUNCT "]")
(NEWLINE)
(ID "ACTIONS")
(PUNCT "=")
(PUNCT "(")
(LIT "store")
(PUNCT ",")
(LIT "store_const")
(PUNCT ",")
(LIT "store_true")
(PUNCT ",")
(LIT "store_false")
(PUNCT ",")
(LIT "append")
(PUNCT ",")
(LIT "append_const")
(PUNCT ",")
(LIT "count")
(PUNCT ",")
(LIT "callback")
(PUNCT ",")
(LIT "help")
(PUNCT ",")
(LIT "version")
(PUNCT ")")
(NEWLINE)
(ID "STORE_ACTIONS")
(PUNCT "=")
(PUNCT "(")
(LIT "store")
(PUNCT ",")
(LIT "store_const")
(PUNCT ",")
(LIT "store_true")
(PUNCT ",")
(LIT "store_false")
(PUNCT ",")
(LIT "append")
(PUNCT ",")
(LIT "append_const")
(PUNCT ",")
(LIT "count")
(PUNCT ")")
(NEWLINE)
(ID "TYPED_ACTIONS")
(PUNCT "=")
(PUNCT "(")
(LIT "store")
(PUNCT ",")
(LIT "append")
(PUNCT ",")
(LIT "callback")
(PUNCT ")")
(NEWLINE)
(ID "ALWAYS_TYPED_ACTIONS")
(PUNCT "=")
(PUNCT "(")
(LIT "store")
(PUNCT ",")
(LIT "append")
(PUNCT ")")
(NEWLINE)
(ID "CONST_ACTIONS")
(PUNCT "=")
(PUNCT "(")
(LIT "store_const")
(PUNCT ",")
(LIT "append_const")
(PUNCT ")")
(NEWLINE)
(ID "TYPES")
(PUNCT "=")
(PUNCT "(")
(LIT "string")
(PUNCT ",")
(LIT "int")
(PUNCT ",")
(LIT "long")
(PUNCT ",")
(LIT "float")
(PUNCT ",")
(LIT "complex")
(PUNCT ",")
(LIT "choice")
(PUNCT ")")
(NEWLINE)
(ID "TYPE_CHECKER")
(PUNCT "=")
(PUNCT "{")
(LIT "int")
(PUNCT ":")
(ID "check_builtin")
(PUNCT ",")
(LIT "long")
(PUNCT ":")
(ID "check_builtin")
(PUNCT ",")
(LIT "float")
(PUNCT ":")
(ID "check_builtin")
(PUNCT ",")
(LIT "complex")
(PUNCT ":")
(ID "check_builtin")
(PUNCT ",")
(LIT "choice")
(PUNCT ":")
(ID "check_choice")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "CHECK_METHODS")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "opts")
(PUNCT ",")
(PUNCT "**")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_short_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_check_opt_strings")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_set_opt_strings")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_set_attrs")
(PUNCT "(")
(ID "attrs")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "checker")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "CHECK_METHODS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "checker")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_opt_strings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT "=")
(PUNCT "[")
(ID "opt")
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "opts")
(KEYWORD if)
(ID "opt")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "at least one option string must be supplied")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "opts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set_opt_strings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT "<")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "invalid option string %r: ")
(LIT "must be at least two characters long")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "opt")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(KEYWORD and)
(ID "opt")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "invalid short option string %r: ")
(LIT "must be of the form -x, (x any non-dash char)")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_short_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "opt")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "--")
(KEYWORD and)
(ID "opt")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "invalid long option string %r: ")
(LIT "must start with --, followed by non-dash")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_set_attrs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "ATTRS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "attr")
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "attrs")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "attrs")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "attr")
(PUNCT "==")
(LIT "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "NO_DEFAULT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "attrs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "invalid keyword arguments: %s")
(PUNCT "%")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "attrs")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_action")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT "=")
(LIT "store")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "ACTIONS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "invalid action: %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "ALWAYS_TYPED_ACTIONS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "choices")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(LIT "choice")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(LIT "string")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(LIT "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(LIT "string")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "invalid option type: %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "TYPED_ACTIONS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "must not supply a type for action %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_choice")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(LIT "choice")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "choices")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "must supply a list of choices for type 'choice'")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "choices")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "choices must be a list of strings ('%s' supplied)")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "choices")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "'")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "choices")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "must not supply choices for type %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_dest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "takes_value")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "STORE_ACTIONS")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "dest")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "takes_value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dest")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dest")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_short_opts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_const")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "CONST_ACTIONS")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "const")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "'const' must not be supplied for action %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_nargs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "action")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "TYPED_ACTIONS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "nargs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "nargs")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "nargs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "'nargs' must not be supplied for action %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_callback")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT "==")
(LIT "callback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "callback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "callback not callable: %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "callback")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "callback_args")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "callback_args")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "callback_args, if supplied, must be a tuple: not %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "callback_args")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "callback_kwargs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "callback_kwargs")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "callback_kwargs, if supplied, must be a dict: not %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "callback_kwargs")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "callback")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "callback supplied (%r) for non-callback option")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "callback")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "callback_args")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "callback_args supplied for non-callback option")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "callback_kwargs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionError")
(PUNCT "(")
(LIT "callback_kwargs supplied for non-callback option")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "CHECK_METHODS")
(PUNCT "=")
(PUNCT "[")
(ID "_check_action")
(PUNCT ",")
(ID "_check_type")
(PUNCT ",")
(ID "_check_choice")
(PUNCT ",")
(ID "_check_dest")
(PUNCT ",")
(ID "_check_const")
(PUNCT ",")
(ID "_check_nargs")
(PUNCT ",")
(ID "_check_callback")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_short_opts")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__repr__")
(PUNCT "=")
(ID "_repr")
(NEWLINE)
(KEYWORD def)
(ID "takes_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_opt_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_long_opts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_short_opts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "checker")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "TYPE_CHECKER")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "checker")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "checker")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "convert_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "nargs")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "check_value")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "check_value")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "process")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "values")
(PUNCT ",")
(ID "parser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "convert_value")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "take_action")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "dest")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "values")
(PUNCT ",")
(ID "parser")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "take_action")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "action")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "values")
(PUNCT ",")
(ID "parser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "store")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "store_const")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "const")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "store_true")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "store_false")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "append")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT ".")
(ID "ensure_value")
(PUNCT "(")
(ID "dest")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "append_const")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT ".")
(ID "ensure_value")
(PUNCT "(")
(ID "dest")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "const")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "count")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(ID "values")
(PUNCT ".")
(ID "ensure_value")
(PUNCT "(")
(ID "dest")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "callback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "callback_args")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "callback_kwargs")
(KEYWORD or)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "parser")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "help")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "print_help")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "print_version")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unknown action %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "SUPPRESS_HELP")
(PUNCT "=")
(LIT "SUPPRESS")
(PUNCT "+")
(LIT "HELP")
(NEWLINE)
(ID "SUPPRESS_USAGE")
(PUNCT "=")
(LIT "SUPPRESS")
(PUNCT "+")
(LIT "USAGE")
(NEWLINE)
(KEYWORD class)
(ID "Values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "defaults")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "attr")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(KEYWORD in)
(ID "defaults")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__repr__")
(PUNCT "=")
(ID "_repr")
(NEWLINE)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "==")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_update_careful")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Update the option values from an arbitrary dictionary, but only\n        use keys from dict that already have a corresponding attribute\n        in self.  Any keys in dict without a corresponding attribute\n        are silently ignored.\n        ")
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "attr")
(KEYWORD in)
(ID "dict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dval")
(PUNCT "=")
(ID "dict")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dval")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "dval")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_update_loose")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Update the option values from an arbitrary dictionary,\n        using all keys from the dictionary regardless of whether\n        they have a corresponding attribute in self or not.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_update")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dict")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "careful")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_update_careful")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "mode")
(PUNCT "==")
(LIT "loose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_update_loose")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid update mode: %r")
(PUNCT "%")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "modname")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "careful")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "modname")
(PUNCT ")")
(NEWLINE)
(ID "mod")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "modname")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(ID "vars")
(PUNCT "(")
(ID "mod")
(PUNCT ")")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "careful")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(ID "vars")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ensure_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OptionContainer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Abstract base class.\n\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n\n    Instance attributes:\n      option_list : [Option]\n        the list of Option objects contained by this OptionContainer\n      _short_opt : { string : Option }\n        dictionary mapping short option strings, eg. \"-f\" or \"-X\",\n        to the Option instances that implement them.  If an Option\n        has multiple short option strings, it will appears in this\n        dictionary multiple times. [1]\n      _long_opt : { string : Option }\n        dictionary mapping long option strings, eg. \"--file\" or\n        \"--exclude\", to the Option instances that implement them.\n        Again, a given Option can occur multiple times in this\n        dictionary. [1]\n      defaults : { string : any }\n        dictionary mapping option destination names to default\n        values for each destination [1]\n\n    [1] These mappings are common to (shared by) all components of the\n        controlling OptionParser, where they are initially created.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_class")
(PUNCT ",")
(ID "conflict_handler")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_create_option_list")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_class")
(PUNCT "=")
(ID "option_class")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_conflict_handler")
(PUNCT "(")
(ID "conflict_handler")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_description")
(PUNCT "(")
(ID "description")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_option_mappings")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_share_option_mappings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "_short_opt")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "_long_opt")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "defaults")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_conflict_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "handler")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "error")
(PUNCT ",")
(LIT "resolve")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid conflict_resolution value %r")
(PUNCT "%")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "conflict_handler")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_description")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT "=")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_description")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "see OptionParser.destroy().")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "defaults")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_conflict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conflict_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_short_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conflict_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conflict_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "conflict_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "conflict_handler")
(NEWLINE)
(KEYWORD if)
(ID "handler")
(PUNCT "==")
(LIT "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OptionConflictError")
(PUNCT "(")
(LIT "conflicting option string(s): %s")
(PUNCT "%")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "co")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD for)
(ID "co")
(KEYWORD in)
(ID "conflict_opts")
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "handler")
(PUNCT "==")
(LIT "resolve")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "c_option")
(PUNCT ")")
(KEYWORD in)
(ID "conflict_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "--")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_option")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_option")
(PUNCT ".")
(ID "_short_opts")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "c_option")
(PUNCT ".")
(ID "_short_opts")
(KEYWORD or)
(ID "c_option")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_option")
(PUNCT ".")
(ID "container")
(PUNCT ".")
(ID "option_list")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "c_option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "add_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "add_option(Option)\n           add_option(opt_str, ..., kwarg=val, ...)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "option_class")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(KEYWORD not)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "Option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "not an Option instance: %r")
(PUNCT "%")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "invalid arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_conflict")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(ID "option")
(PUNCT ".")
(ID "container")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_short_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(PUNCT ".")
(ID "dest")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "option")
(PUNCT ".")
(ID "default")
(KEYWORD is)
(KEYWORD not)
(ID "NO_DEFAULT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT "[")
(ID "option")
(PUNCT ".")
(ID "dest")
(PUNCT "]")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "option")
(PUNCT ".")
(ID "dest")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT "[")
(ID "option")
(PUNCT ".")
(ID "dest")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt_str")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt_str")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "opt_str")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(KEYWORD or)
(ID "opt_str")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt_str")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt_str")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no such option %r")
(PUNCT "%")
(ID "opt_str")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_short_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "option")
(PUNCT ".")
(ID "_long_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "option")
(PUNCT ".")
(ID "container")
(PUNCT ".")
(ID "option_list")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_option_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "option")
(PUNCT ".")
(ID "help")
(KEYWORD is)
(ID "SUPPRESS_HELP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatter")
(PUNCT ".")
(ID "format_option")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_description")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "formatter")
(PUNCT ".")
(ID "format_description")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_description")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_description")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_option_help")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OptionGroup")
(PUNCT "(")
(ID "OptionContainer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ",")
(ID "title")
(PUNCT ",")
(ID "description")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT "=")
(ID "parser")
(NEWLINE)
(ID "OptionContainer")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ".")
(ID "option_class")
(PUNCT ",")
(ID "parser")
(PUNCT ".")
(ID "conflict_handler")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "title")
(PUNCT "=")
(ID "title")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_option_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_share_option_mappings")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_title")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "title")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "title")
(PUNCT "=")
(ID "title")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "see OptionParser.destroy().")
(NEWLINE)
(ID "OptionContainer")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "option_list")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "formatter")
(PUNCT ".")
(ID "format_heading")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "title")
(PUNCT ")")
(NEWLINE)
(ID "formatter")
(PUNCT ".")
(ID "indent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "+=")
(ID "OptionContainer")
(PUNCT ".")
(ID "format_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(NEWLINE)
(ID "formatter")
(PUNCT ".")
(ID "dedent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OptionParser")
(PUNCT "(")
(ID "OptionContainer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n\n    Instance attributes:\n      usage : string\n        a usage string for your program.  Before it is displayed\n        to the user, \"%prog\" will be expanded to the name of\n        your program (self.prog or os.path.basename(sys.argv[0])).\n      prog : string\n        the name of the current program (to override\n        os.path.basename(sys.argv[0])).\n      description : string\n        A paragraph of text giving a brief overview of your program.\n        optparse reformats this paragraph to fit the current terminal\n        width and prints it when the user requests help (after usage,\n        but before the list of options).\n      epilog : string\n        paragraph of help text to print after option help\n\n      option_groups : [OptionGroup]\n        list of option groups in this parser (option groups are\n        irrelevant for parsing the command-line, but very useful\n        for generating help)\n\n      allow_interspersed_args : bool = true\n        if true, positional arguments may be interspersed with options.\n        Assuming -a and -b each take a single argument, the command-line\n          -ablah foo bar -bboo baz\n        will be interpreted the same as\n          -ablah -bboo -- foo bar baz\n        If this flag were false, that command line would be interpreted as\n          -ablah -- foo bar -bboo baz\n        -- ie. we stop processing options as soon as we see the first\n        non-option argument.  (This is the tradition followed by\n        Python's getopt module, Perl's Getopt::Std, and other argument-\n        parsing libraries, but it is generally annoying to users.)\n\n      process_default_values : bool = true\n        if true, option default values are processed similarly to option\n        values from the command line: that is, they are passed to the\n        type-checking function for the option's type (as long as the\n        default value is a string).  (This really only matters if you\n        have defined custom types; see SF bug #955889.)  Set it to false\n        to restore the behaviour of Optik 1.4.1 and earlier.\n\n      rargs : [string]\n        the argument list currently being parsed.  Only set when\n        parse_args() is active, and continually trimmed down as\n        we consume arguments.  Mainly there for the benefit of\n        callback options.\n      largs : [string]\n        the list of leftover arguments that we have skipped while\n        parsing options.  If allow_interspersed_args is false, this\n        list is always empty.\n      values : Values\n        the set of option values currently being accumulated.  Only\n        set when parse_args() is active.  Also mainly for callbacks.\n\n    Because of the 'rargs', 'largs', and 'values' attributes,\n    OptionParser is not thread-safe.  If, for some perverse reason, you\n    need to parse command-line arguments simultaneously in different\n    threads, use different OptionParser instances.\n\n    ")
(NEWLINE)
(ID "standard_option_list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usage")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "option_list")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "option_class")
(PUNCT "=")
(ID "Option")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "conflict_handler")
(PUNCT "=")
(LIT "error")
(PUNCT ",")
(ID "description")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "formatter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "add_help_option")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "prog")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "epilog")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "OptionContainer")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_class")
(PUNCT ",")
(ID "conflict_handler")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_usage")
(PUNCT "(")
(ID "usage")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prog")
(PUNCT "=")
(ID "prog")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(ID "version")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_interspersed_args")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "process_default_values")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "formatter")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT "=")
(ID "IndentedHelpFormatter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "formatter")
(PUNCT "=")
(ID "formatter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "formatter")
(PUNCT ".")
(ID "set_parser")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "epilog")
(PUNCT "=")
(ID "epilog")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_populate_option_list")
(PUNCT "(")
(ID "option_list")
(PUNCT ",")
(ID "add_help")
(PUNCT "=")
(ID "add_help_option")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_init_parsing_state")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Declare that you are done with this OptionParser.  This cleans up\n        reference cycles so the OptionParser (and all objects referenced by\n        it) can be garbage-collected promptly.  After calling destroy(), the\n        OptionParser is unusable.\n        ")
(NEWLINE)
(ID "OptionContainer")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "group")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_groups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "option_list")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "option_groups")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "formatter")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_option_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_groups")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_create_option_mappings")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_add_help_option")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-h")
(PUNCT ",")
(LIT "--help")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "help")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(ID "_")
(PUNCT "(")
(LIT "show this help message and exit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_add_version_option")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "--version")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "version")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(ID "_")
(PUNCT "(")
(LIT "show program's version number and exit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_populate_option_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_list")
(PUNCT ",")
(ID "add_help")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "standard_option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_options")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "standard_option_list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_options")
(PUNCT "(")
(ID "option_list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_add_version_option")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "add_help")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_add_help_option")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_init_parsing_state")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rargs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "largs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "values")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_usage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usage")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "usage")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT "=")
(ID "_")
(PUNCT "(")
(LIT "%prog [options]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "usage")
(KEYWORD is)
(ID "SUPPRESS_USAGE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "usage")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "usage: ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT "=")
(ID "usage")
(PUNCT "[")
(LIT 7)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT "=")
(ID "usage")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "enable_interspersed_args")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set parsing to not stop on the first non-option, allowing\n        interspersing switches with command arguments. This is the\n        default behavior. See also disable_interspersed_args() and the\n        class documentation description of the attribute\n        allow_interspersed_args.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_interspersed_args")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "disable_interspersed_args")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set parsing to stop on the first non-option. Use this if\n        you have a command processor which runs another command that\n        has options of its own and you want to make sure these options\n        don't get confused.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_interspersed_args")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_process_default_values")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "process")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "process_default_values")
(PUNCT "=")
(ID "process")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT "[")
(ID "dest")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_defaults")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_all_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "group")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_groups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "group")
(PUNCT ".")
(ID "option_list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "options")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_default_values")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "process_default_values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Values")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "defaults")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaults")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_get_all_options")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default")
(PUNCT "=")
(ID "defaults")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "option")
(PUNCT ".")
(ID "dest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "default")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_str")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "get_opt_string")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "defaults")
(PUNCT "[")
(ID "option")
(PUNCT ".")
(ID "dest")
(PUNCT "]")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "check_value")
(PUNCT "(")
(ID "opt_str")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "Values")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_option_group")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group")
(PUNCT "=")
(ID "OptionGroup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(KEYWORD not)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "group")
(PUNCT ",")
(ID "OptionGroup")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "not an OptionGroup instance: %r")
(PUNCT "%")
(ID "group")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "group")
(PUNCT ".")
(ID "parser")
(KEYWORD is)
(KEYWORD not)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid OptionGroup (wrong parser)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "invalid arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "option_groups")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "group")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_option_group")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt_str")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt_str")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD and)
(ID "option")
(PUNCT ".")
(ID "container")
(KEYWORD is)
(KEYWORD not)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "option")
(PUNCT ".")
(ID "container")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_args")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "args")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "parse_args")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "values")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        parse_args(args : [string] = sys.argv[1:],\n                   values : Values = None)\n        -> (values : Values, args : [string])\n\n        Parse the command-line options found in 'args' (default:\n        sys.argv[1:]).  Any errors result in a call to 'error()', which\n        by default prints the usage message to stderr and calls\n        sys.exit() with an error message.  On success returns a pair\n        (values, args) where 'values' is an Values instance (with all\n        your option values) and 'args' is the list of arguments left\n        over after parsing options.\n        ")
(NEWLINE)
(ID "rargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "values")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_default_values")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rargs")
(PUNCT "=")
(ID "rargs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "largs")
(PUNCT "=")
(ID "largs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "values")
(PUNCT "=")
(ID "values")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stop")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_process_args")
(PUNCT "(")
(ID "largs")
(PUNCT ",")
(ID "rargs")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "BadOptionError")
(PUNCT ",")
(ID "OptionValueError")
(PUNCT ")")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(ID "largs")
(PUNCT "+")
(ID "rargs")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "check_values")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_values")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "values")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        check_values(values : Values, args : [string])\n        -> (values : Values, args : [string])\n\n        Check that the supplied option values and leftover arguments are\n        valid.  Returns the option values and leftover arguments\n        (possibly adjusted, possibly completely new -- whatever you\n        like).  Default implementation just returns the passed-in\n        values; subclasses may override as desired.\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_args")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "largs")
(PUNCT ",")
(ID "rargs")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "_process_args(largs : [string],\n                         rargs : [string],\n                         values : Values)\n\n        Process command-line arguments and populate 'values', consuming\n        options and arguments from 'rargs'.  If 'allow_interspersed_args' is\n        false, stop at the first non-option argument.  If true, accumulate any\n        interspersed non-option arguments in 'largs'.\n        ")
(NEWLINE)
(KEYWORD while)
(ID "rargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "arg")
(PUNCT "==")
(LIT "--")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "arg")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "--")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_process_long_opt")
(PUNCT "(")
(ID "rargs")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "arg")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_process_short_opts")
(PUNCT "(")
(ID "rargs")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "allow_interspersed_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "largs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_match_long_opt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "_match_long_opt(opt : string) -> string\n\n        Determine which long option string 'opt' matches, ie. which one\n        it is an unambiguous abbreviation for.  Raises BadOptionError if\n        'opt' doesn't unambiguously match any long option string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_match_abbrev")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_long_opt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rargs")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "rargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "=")
(KEYWORD in)
(ID "arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "next_arg")
(PUNCT ")")
(PUNCT "=")
(ID "arg")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "=")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "rargs")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "next_arg")
(PUNCT ")")
(NEWLINE)
(ID "had_explicit_value")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(ID "arg")
(NEWLINE)
(ID "had_explicit_value")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "opt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_match_long_opt")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(ID "option")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_long_opt")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT ".")
(ID "takes_value")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nargs")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "nargs")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "rargs")
(PUNCT ")")
(PUNCT "<")
(ID "nargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "ngettext")
(PUNCT "(")
(LIT "%(option)s option requires %(number)d argument")
(PUNCT ",")
(LIT "%(option)s option requires %(number)d arguments")
(PUNCT ",")
(ID "nargs")
(PUNCT ")")
(PUNCT "%")
(PUNCT "{")
(LIT "option")
(PUNCT ":")
(ID "opt")
(PUNCT ",")
(LIT "number")
(PUNCT ":")
(ID "nargs")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nargs")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "rargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "nargs")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "nargs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "had_explicit_value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "%s option does not take a value")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "option")
(PUNCT ".")
(ID "process")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "values")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_short_opts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rargs")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "rargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "stop")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "arg")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "ch")
(NEWLINE)
(ID "option")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_short_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "option")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadOptionError")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(PUNCT ".")
(ID "takes_value")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rargs")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "arg")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "stop")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "nargs")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "nargs")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "rargs")
(PUNCT ")")
(PUNCT "<")
(ID "nargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "ngettext")
(PUNCT "(")
(LIT "%(option)s option requires %(number)d argument")
(PUNCT ",")
(LIT "%(option)s option requires %(number)d arguments")
(PUNCT ",")
(ID "nargs")
(PUNCT ")")
(PUNCT "%")
(PUNCT "{")
(LIT "option")
(PUNCT ":")
(ID "opt")
(PUNCT ",")
(LIT "number")
(PUNCT ":")
(ID "nargs")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nargs")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "rargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "nargs")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "rargs")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "nargs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "option")
(PUNCT ".")
(ID "process")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "values")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_prog_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "prog")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "prog")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "expand_prog_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "%prog")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_prog_name")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_description")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "expand_prog_name")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "status")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "error(msg : string)\n\n        Print a usage message incorporating 'msg' to stderr and exit.\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "print_usage")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "%s: error: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_prog_name")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_usage")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "formatter")
(PUNCT ".")
(ID "format_usage")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expand_prog_name")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_usage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "print_usage(file : file = stdout)\n\n        Print the usage message for the current program (self.usage) to\n        'file' (default stdout).  Any occurrence of the string \"%prog\" in\n        self.usage is replaced with the name of the current program\n        (basename of sys.argv[0]).  Does nothing if self.usage is empty\n        or not defined.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_usage")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_version")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "expand_prog_name")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_version")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "print_version(file : file = stdout)\n\n        Print the version message for this program (self.version) to\n        'file' (default stdout).  As with print_usage(), any occurrence\n        of \"%prog\" in self.version is replaced by the current program's\n        name.  Does nothing if self.version is empty or undefined.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "format_option_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "formatter")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "formatter")
(NEWLINE)
(DEDENT)
(ID "formatter")
(PUNCT ".")
(ID "store_option_strings")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatter")
(PUNCT ".")
(ID "format_heading")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "Options")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "formatter")
(PUNCT ".")
(ID "indent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "option_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "OptionContainer")
(PUNCT ".")
(ID "format_option_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "group")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_groups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "group")
(PUNCT ".")
(ID "format_help")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "formatter")
(PUNCT ".")
(ID "dedent")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_epilog")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "formatter")
(PUNCT ".")
(ID "format_epilog")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "epilog")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "formatter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "formatter")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "formatter")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "usage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_usage")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_description")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_option_help")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_epilog")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "print_help(file : file = stdout)\n\n        Print an extended help message, listing all options and any\n        help text provided with them, to 'file' (default stdout).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format_help")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_match_abbrev")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "wordmap")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "_match_abbrev(s : string, wordmap : {string : Option}) -> string\n\n    Return the string key in 'wordmap' for which 's' is an unambiguous\n    abbreviation.  If 's' is found to be ambiguous or doesn't match any of\n    'words', raise BadOptionError.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "s")
(KEYWORD in)
(ID "wordmap")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "possibilities")
(PUNCT "=")
(PUNCT "[")
(ID "word")
(KEYWORD for)
(ID "word")
(KEYWORD in)
(ID "wordmap")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "word")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "possibilities")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "possibilities")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "possibilities")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadOptionError")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "possibilities")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "AmbiguousOptionError")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "possibilities")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "make_option")
(PUNCT "=")
(ID "Option")
(NEWLINE)
(ENDMARKER)
