(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "itertools")
(NEWLINE)
(KEYWORD import)
(ID "weakref")
(NEWLINE)
(KEYWORD import)
(ID "atexit")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD from)
(ID "subprocess")
(KEYWORD import)
(ID "_args_from_interpreter_flags")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "process")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "sub_debug")
(PUNCT ",")
(LIT "debug")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(LIT "sub_warning")
(PUNCT ",")
(LIT "get_logger")
(PUNCT ",")
(LIT "log_to_stderr")
(PUNCT ",")
(LIT "get_temp_dir")
(PUNCT ",")
(LIT "register_after_fork")
(PUNCT ",")
(LIT "is_exiting")
(PUNCT ",")
(LIT "Finalize")
(PUNCT ",")
(LIT "ForkAwareThreadLock")
(PUNCT ",")
(LIT "ForkAwareLocal")
(PUNCT ",")
(LIT "close_all_fds_except")
(PUNCT ",")
(LIT "SUBDEBUG")
(PUNCT ",")
(LIT "SUBWARNING")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "NOTSET")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "SUBDEBUG")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "DEBUG")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(ID "INFO")
(PUNCT "=")
(LIT 20)
(NEWLINE)
(ID "SUBWARNING")
(PUNCT "=")
(LIT 25)
(NEWLINE)
(ID "LOGGER_NAME")
(PUNCT "=")
(LIT "multiprocessing")
(NEWLINE)
(ID "DEFAULT_LOGGING_FORMAT")
(PUNCT "=")
(LIT "[%(levelname)s/%(processName)s] %(message)s")
(NEWLINE)
(ID "_logger")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_log_to_stderr")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "sub_debug")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_logger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "SUBDEBUG")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "debug")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_logger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "DEBUG")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "info")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_logger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "INFO")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "sub_warning")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_logger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "SUBWARNING")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_logger")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Returns logger used by multiprocessing\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_logger")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_logger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(ID "LOGGER_NAME")
(PUNCT ")")
(NEWLINE)
(ID "_logger")
(PUNCT ".")
(ID "propagate")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "atexit")
(PUNCT ",")
(LIT "unregister")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "atexit")
(PUNCT ".")
(ID "unregister")
(PUNCT "(")
(ID "_exit_function")
(PUNCT ")")
(NEWLINE)
(ID "atexit")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "_exit_function")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "atexit")
(PUNCT ".")
(ID "_exithandlers")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT "(")
(ID "_exit_function")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "atexit")
(PUNCT ".")
(ID "_exithandlers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "_exit_function")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_logger")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_to_stderr")
(PUNCT "(")
(ID "level")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Turn on logging and add a handler which prints to stderr\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_log_to_stderr")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(ID "logger")
(PUNCT "=")
(ID "get_logger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "formatter")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "Formatter")
(PUNCT "(")
(ID "DEFAULT_LOGGING_FORMAT")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "StreamHandler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT ".")
(ID "setFormatter")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "addHandler")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "level")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_log_to_stderr")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD return)
(ID "_logger")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_temp_dir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tempdir")
(PUNCT "=")
(ID "process")
(PUNCT ".")
(ID "current_process")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "tempdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tempdir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "shutil")
(PUNCT ",")
(ID "tempfile")
(NEWLINE)
(ID "tempdir")
(PUNCT "=")
(ID "tempfile")
(PUNCT ".")
(ID "mkdtemp")
(PUNCT "(")
(ID "prefix")
(PUNCT "=")
(LIT "pymp-")
(PUNCT ")")
(NEWLINE)
(ID "info")
(PUNCT "(")
(LIT "created temp directory %s")
(PUNCT ",")
(ID "tempdir")
(PUNCT ")")
(NEWLINE)
(ID "Finalize")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "shutil")
(PUNCT ".")
(ID "rmtree")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "tempdir")
(PUNCT "]")
(PUNCT ",")
(ID "exitpriority")
(PUNCT "=")
(PUNCT "-")
(LIT 100)
(PUNCT ")")
(NEWLINE)
(ID "process")
(PUNCT ".")
(ID "current_process")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_config")
(PUNCT "[")
(LIT "tempdir")
(PUNCT "]")
(PUNCT "=")
(ID "tempdir")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tempdir")
(NEWLINE)
(DEDENT)
(ID "_afterfork_registry")
(PUNCT "=")
(ID "weakref")
(PUNCT ".")
(ID "WeakValueDictionary")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_afterfork_counter")
(PUNCT "=")
(ID "itertools")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_run_after_forkers")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "_afterfork_registry")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "items")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "index")
(PUNCT ",")
(ID "ident")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "(")
(LIT "after forker raised exception %s")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "register_after_fork")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_afterfork_registry")
(PUNCT "[")
(PUNCT "(")
(ID "next")
(PUNCT "(")
(ID "_afterfork_counter")
(PUNCT ")")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "obj")
(NEWLINE)
(DEDENT)
(ID "_finalizer_registry")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_finalizer_counter")
(PUNCT "=")
(ID "itertools")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Finalize")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Class which supports object finalization using weakrefs\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "exitpriority")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "exitpriority")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "type")
(PUNCT "(")
(ID "exitpriority")
(PUNCT ")")
(KEYWORD is)
(ID "int")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_weakref")
(PUNCT "=")
(ID "weakref")
(PUNCT ".")
(ID "ref")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "exitpriority")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "=")
(ID "callback")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT "=")
(ID "kwargs")
(KEYWORD or)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "=")
(PUNCT "(")
(ID "exitpriority")
(PUNCT ",")
(ID "next")
(PUNCT "(")
(ID "_finalizer_counter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_finalizer_registry")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "wr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_finalizer_registry")
(PUNCT "=")
(ID "_finalizer_registry")
(PUNCT ",")
(ID "sub_debug")
(PUNCT "=")
(ID "sub_debug")
(PUNCT ",")
(ID "getpid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Run the callback unless it has already been called or cancelled\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_finalizer_registry")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub_debug")
(PUNCT "(")
(LIT "finalizer no longer registered")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pid")
(PUNCT "!=")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub_debug")
(PUNCT "(")
(LIT "finalizer ignored because different process")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub_debug")
(PUNCT "(")
(LIT "finalizer calling %s with args %s and kwargs %s")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ",")
(PUNCT "**")
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_weakref")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "cancel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Cancel finalization of the object\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_finalizer_registry")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_weakref")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "still_active")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return whether this finalizer is still waiting to invoke callback\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_key")
(KEYWORD in)
(ID "_finalizer_registry")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_weakref")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<Finalize object, dead>")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT "=")
(LIT "<Finalize object, callback=%s")
(PUNCT "%")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(LIT "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "+=")
(LIT ", args=")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "+=")
(LIT ", kwargs=")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "+=")
(LIT ", exitprority=")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_key")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "x")
(PUNCT "+")
(LIT ">")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_run_finalizers")
(PUNCT "(")
(ID "minpriority")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Run all finalizers whose exit priority is not None and at least minpriority\n\n    Finalizers with highest priority are called first; finalizers with\n    the same priority will be called in reverse order of creation.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "_finalizer_registry")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "minpriority")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(KEYWORD lambda)
(ID "p")
(PUNCT ":")
(ID "p")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(KEYWORD lambda)
(ID "p")
(PUNCT ":")
(ID "p")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "p")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ">=")
(ID "minpriority")
(NEWLINE)
(DEDENT)
(ID "items")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "_finalizer_registry")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(KEYWORD if)
(ID "f")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "items")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "finalizer")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sub_debug")
(PUNCT "(")
(LIT "calling %s")
(PUNCT ",")
(ID "finalizer")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "finalizer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(ID "traceback")
(PUNCT ".")
(ID "print_exc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "minpriority")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_finalizer_registry")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_exiting")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Returns true if the process is shutting down\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_exiting")
(KEYWORD or)
(ID "_exiting")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "_exiting")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "_exit_function")
(PUNCT "(")
(ID "info")
(PUNCT "=")
(ID "info")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "debug")
(PUNCT ",")
(ID "_run_finalizers")
(PUNCT "=")
(ID "_run_finalizers")
(PUNCT ",")
(ID "active_children")
(PUNCT "=")
(ID "process")
(PUNCT ".")
(ID "active_children")
(PUNCT ",")
(ID "current_process")
(PUNCT "=")
(ID "process")
(PUNCT ".")
(ID "current_process")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_exiting")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_exiting")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_exiting")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "info")
(PUNCT "(")
(LIT "process shutting down")
(PUNCT ")")
(NEWLINE)
(ID "debug")
(PUNCT "(")
(LIT "running all \"atexit\" finalizers with priority >= 0")
(PUNCT ")")
(NEWLINE)
(ID "_run_finalizers")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "current_process")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "active_children")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p")
(PUNCT ".")
(ID "daemon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "(")
(LIT "calling terminate() for daemon %s")
(PUNCT ",")
(ID "p")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "terminate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "active_children")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "(")
(LIT "calling join() for process %s")
(PUNCT ",")
(ID "p")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "debug")
(PUNCT "(")
(LIT "running the remaining \"atexit\" finalizers")
(PUNCT ")")
(NEWLINE)
(ID "_run_finalizers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "atexit")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "_exit_function")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "ForkAwareThreadLock")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "register_after_fork")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ForkAwareThreadLock")
(PUNCT ".")
(ID "_reset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "acquire")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ".")
(ID "acquire")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "release")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ".")
(ID "release")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ForkAwareLocal")
(PUNCT "(")
(ID "threading")
(PUNCT ".")
(ID "local")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "register_after_fork")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(KEYWORD lambda)
(ID "obj")
(PUNCT ":")
(ID "obj")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__reduce__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "MAXFD")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "sysconf")
(PUNCT "(")
(LIT "SC_OPEN_MAX")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "MAXFD")
(PUNCT "=")
(LIT 256)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close_all_fds_except")
(PUNCT "(")
(ID "fds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fds")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "fds")
(PUNCT ")")
(PUNCT "+")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "MAXFD")
(PUNCT "]")
(NEWLINE)
(ID "fds")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "fds")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "MAXFD")
(PUNCT ",")
(LIT "fd too large")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "fds")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "closerange")
(PUNCT "(")
(ID "fds")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(ID "fds")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "spawnv_passfds")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "passfds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_posixsubprocess")
(NEWLINE)
(ID "passfds")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "passfds")
(PUNCT ")")
(NEWLINE)
(ID "errpipe_read")
(PUNCT ",")
(ID "errpipe_write")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_posixsubprocess")
(PUNCT ".")
(ID "fork_exec")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(ID "passfds")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "errpipe_read")
(PUNCT ",")
(ID "errpipe_write")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "errpipe_read")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "errpipe_write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
