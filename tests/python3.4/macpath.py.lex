(LIT "Pathname and path-related operations for the Macintosh.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "stat")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD import)
(ID "genericpath")
(NEWLINE)
(KEYWORD from)
(ID "genericpath")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "normcase")
(PUNCT ",")
(LIT "isabs")
(PUNCT ",")
(LIT "join")
(PUNCT ",")
(LIT "splitdrive")
(PUNCT ",")
(LIT "split")
(PUNCT ",")
(LIT "splitext")
(PUNCT ",")
(LIT "basename")
(PUNCT ",")
(LIT "dirname")
(PUNCT ",")
(LIT "commonprefix")
(PUNCT ",")
(LIT "getsize")
(PUNCT ",")
(LIT "getmtime")
(PUNCT ",")
(LIT "getatime")
(PUNCT ",")
(LIT "getctime")
(PUNCT ",")
(LIT "islink")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(LIT "lexists")
(PUNCT ",")
(LIT "isdir")
(PUNCT ",")
(LIT "isfile")
(PUNCT ",")
(LIT "expanduser")
(PUNCT ",")
(LIT "expandvars")
(PUNCT ",")
(LIT "normpath")
(PUNCT ",")
(LIT "abspath")
(PUNCT ",")
(LIT "curdir")
(PUNCT ",")
(LIT "pardir")
(PUNCT ",")
(LIT "sep")
(PUNCT ",")
(LIT "pathsep")
(PUNCT ",")
(LIT "defpath")
(PUNCT ",")
(LIT "altsep")
(PUNCT ",")
(LIT "extsep")
(PUNCT ",")
(LIT "devnull")
(PUNCT ",")
(LIT "realpath")
(PUNCT ",")
(LIT "supports_unicode_filenames")
(PUNCT "]")
(NEWLINE)
(ID "curdir")
(PUNCT "=")
(LIT ":")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT "::")
(NEWLINE)
(ID "extsep")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(LIT ":")
(NEWLINE)
(ID "pathsep")
(PUNCT "=")
(LIT "\n")
(NEWLINE)
(ID "defpath")
(PUNCT "=")
(LIT ":")
(NEWLINE)
(ID "altsep")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "devnull")
(PUNCT "=")
(LIT "Dev:Null")
(NEWLINE)
(KEYWORD def)
(ID "_get_colon")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #":")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT ":")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "normcase")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "normcase() argument must be str or bytes, ")
(LIT "not '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "path")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isabs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if a path is absolute.\n    On the Mac, relative paths begin with a colon,\n    but as a special case, paths with no colons at all are also relative.\n    Anything else is absolute (the string up to the first colon is the\n    volume name).")
(NEWLINE)
(ID "colon")
(PUNCT "=")
(ID "_get_colon")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "colon")
(KEYWORD in)
(ID "s")
(KEYWORD and)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(ID "colon")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "join")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "*")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "colon")
(PUNCT "=")
(ID "_get_colon")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "s")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "path")
(PUNCT ")")
(KEYWORD or)
(ID "isabs")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "t")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "t")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "colon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "t")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "colon")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "colon")
(PUNCT "+")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "path")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(ID "colon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "+")
(ID "colon")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "+")
(ID "t")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "split")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a pathname into two parts: the directory leading up to the final\n    bit, and the basename (the filename, without colons, in that directory).\n    The result (s, t) is such that join(s, t) yields the original argument.")
(NEWLINE)
(ID "colon")
(PUNCT "=")
(ID "_get_colon")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "colon")
(KEYWORD not)
(KEYWORD in)
(ID "s")
(PUNCT ":")
(KEYWORD return)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "s")
(NEWLINE)
(ID "col")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "colon")
(PUNCT ":")
(ID "col")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "col")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "s")
(PUNCT "[")
(ID "col")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD and)
(KEYWORD not)
(ID "colon")
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "+")
(ID "colon")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(PUNCT ",")
(ID "file")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "splitext")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(LIT #":")
(PUNCT ",")
(ID "altsep")
(PUNCT ",")
(LIT #".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(ID "altsep")
(PUNCT ",")
(ID "extsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "splitext")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(KEYWORD def)
(ID "splitdrive")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a pathname into a drive specification and the rest of the\n    path.  Useful on DOS/Windows/NT; on the Mac, the drive is always\n    empty (don't use the volume name -- it doesn't have the same\n    syntactic and semantic oddities as DOS drive letters, such as there\n    being a separate current directory per drive).")
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dirname")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "split")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "basename")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "split")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "ismount")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isabs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "components")
(PUNCT "=")
(ID "split")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "components")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(KEYWORD and)
(KEYWORD not)
(ID "components")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "islink")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the pathname refers to a symbolic link.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "Carbon")
(PUNCT ".")
(ID "File")
(NEWLINE)
(KEYWORD return)
(ID "Carbon")
(PUNCT ".")
(ID "File")
(PUNCT ".")
(ID "ResolveAliasFile")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "lexists")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path exists.  Returns True for broken symbolic links")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "st")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expandvars")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dummy to retain interface-compatibility with other operating systems.")
(NEWLINE)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expanduser")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dummy to retain interface-compatibility with other operating systems.")
(NEWLINE)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "norm_error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Path cannot be normalized")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "normpath")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Normalize a pathname.  Will return the same result for\n    equivalent paths.")
(NEWLINE)
(ID "colon")
(PUNCT "=")
(ID "_get_colon")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "colon")
(KEYWORD not)
(KEYWORD in)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "colon")
(PUNCT "+")
(ID "s")
(NEWLINE)
(DEDENT)
(ID "comps")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "colon")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "comps")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD and)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "norm_error")
(PUNCT "(")
(LIT "Cannot use :: immediately after volume name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "colon")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "comps")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(ID "colon")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "comps")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(KEYWORD and)
(ID "s")
(PUNCT "!=")
(ID "colon")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an absolute path.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isabs")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwdb")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "cwd")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "realpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "Carbon")
(PUNCT ".")
(ID "File")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "colon")
(PUNCT "=")
(ID "_get_colon")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "components")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "colon")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "components")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "colon")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "components")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "Carbon")
(PUNCT ".")
(ID "File")
(PUNCT ".")
(ID "FSResolveAliasFile")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "as_pathname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Carbon")
(PUNCT ".")
(ID "File")
(PUNCT ".")
(ID "Error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "supports_unicode_filenames")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ENDMARKER)
