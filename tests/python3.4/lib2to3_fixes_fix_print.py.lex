(LIT "Fixer for print.\n\nChange:\n    'print'          into 'print()'\n    'print ...'      into 'print(...)'\n    'print ... ,'    into 'print(..., end=\" \")'\n    'print >>x, ...' into 'print(..., file=x)'\n\nNo changes are applied if print_function is imported from __future__\n\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "patcomp")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "pytree")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(PUNCT ",")
(ID "Call")
(PUNCT ",")
(ID "Comma")
(PUNCT ",")
(ID "String")
(PUNCT ",")
(ID "is_tuple")
(NEWLINE)
(ID "parend_expr")
(PUNCT "=")
(ID "patcomp")
(PUNCT ".")
(ID "compile_pattern")
(PUNCT "(")
(LIT "atom< '(' [atom|STRING|NAME] ')' >")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "FixPrint")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n              simple_stmt< any* bare='print' any* > | print_stmt\n              ")
(NEWLINE)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "results")
(NEWLINE)
(ID "bare_print")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "bare")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "bare_print")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bare_print")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "print")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "bare_print")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "Name")
(PUNCT "(")
(LIT "print")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "parend_expr")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "sep")
(PUNCT "=")
(ID "end")
(PUNCT "=")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "args")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "Comma")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "end")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "pytree")
(PUNCT ".")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "RIGHTSHIFT")
(PUNCT ",")
(LIT ">>")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "l_args")
(PUNCT "=")
(PUNCT "[")
(ID "arg")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "l_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l_args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sep")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "end")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "file")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sep")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_kwarg")
(PUNCT "(")
(ID "l_args")
(PUNCT ",")
(LIT "sep")
(PUNCT ",")
(ID "String")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "end")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_kwarg")
(PUNCT "(")
(ID "l_args")
(PUNCT ",")
(LIT "end")
(PUNCT ",")
(ID "String")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "end")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_kwarg")
(PUNCT "(")
(ID "l_args")
(PUNCT ",")
(LIT "file")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "n_stmt")
(PUNCT "=")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "print")
(PUNCT ")")
(PUNCT ",")
(ID "l_args")
(PUNCT ")")
(NEWLINE)
(ID "n_stmt")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD return)
(ID "n_stmt")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_kwarg")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "l_nodes")
(PUNCT ",")
(ID "s_kwd")
(PUNCT ",")
(ID "n_expr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n_expr")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "n_argument")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "Node")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "syms")
(PUNCT ".")
(ID "argument")
(PUNCT ",")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(ID "s_kwd")
(PUNCT ")")
(PUNCT ",")
(ID "pytree")
(PUNCT ".")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "EQUAL")
(PUNCT ",")
(LIT "=")
(PUNCT ")")
(PUNCT ",")
(ID "n_expr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "l_nodes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l_nodes")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Comma")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "n_argument")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(ID "l_nodes")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "n_argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
