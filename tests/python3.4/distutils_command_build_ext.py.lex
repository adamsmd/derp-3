(LIT "distutils.command.build_ext\n\nImplements the Distutils 'build_ext' command, for building extension\nmodules (currently limited to C extensions, should accommodate C++\nextensions ASAP).")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "sysconfig")
(KEYWORD import)
(ID "customize_compiler")
(PUNCT ",")
(ID "get_python_version")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "sysconfig")
(KEYWORD import)
(ID "get_config_h_filename")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "dep_util")
(KEYWORD import)
(ID "newer_group")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "extension")
(KEYWORD import)
(ID "Extension")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "get_platform")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD from)
(ID "site")
(KEYWORD import)
(ID "USER_BASE")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "msvccompiler")
(KEYWORD import)
(ID "get_build_version")
(NEWLINE)
(ID "MSVC_VERSION")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "get_build_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "extension_name_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[a-zA-Z_][a-zA-Z_0-9]*(\\.[a-zA-Z_][a-zA-Z_0-9]*)*$")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "show_compilers")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "show_compilers")
(NEWLINE)
(ID "show_compilers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "build_ext")
(PUNCT "(")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(LIT "build C/C++ extensions (compile/link to build directory)")
(NEWLINE)
(ID "sep_by")
(PUNCT "=")
(LIT " (separated by '%s')")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(NEWLINE)
(ID "user_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "build-lib=")
(PUNCT ",")
(LIT "b")
(PUNCT ",")
(LIT "directory for compiled extension modules")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "build-temp=")
(PUNCT ",")
(LIT "t")
(PUNCT ",")
(LIT "directory for temporary files (build by-products)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "plat-name=")
(PUNCT ",")
(LIT "p")
(PUNCT ",")
(LIT "platform name to cross-compile for, if supported ")
(LIT "(default: %s)")
(PUNCT "%")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "inplace")
(PUNCT ",")
(LIT "i")
(PUNCT ",")
(LIT "ignore build-lib and put compiled extensions into the source ")
(PUNCT "+")
(LIT "directory alongside your pure Python modules")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "include-dirs=")
(PUNCT ",")
(LIT "I")
(PUNCT ",")
(LIT "list of directories to search for header files")
(PUNCT "+")
(ID "sep_by")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "define=")
(PUNCT ",")
(LIT "D")
(PUNCT ",")
(LIT "C preprocessor macros to define")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "undef=")
(PUNCT ",")
(LIT "U")
(PUNCT ",")
(LIT "C preprocessor macros to undefine")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "libraries=")
(PUNCT ",")
(LIT "l")
(PUNCT ",")
(LIT "external C libraries to link with")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "library-dirs=")
(PUNCT ",")
(LIT "L")
(PUNCT ",")
(LIT "directories to search for external C libraries")
(PUNCT "+")
(ID "sep_by")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "rpath=")
(PUNCT ",")
(LIT "R")
(PUNCT ",")
(LIT "directories to search for shared C libraries at runtime")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "link-objects=")
(PUNCT ",")
(LIT "O")
(PUNCT ",")
(LIT "extra explicit link objects to include in the link")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "debug")
(PUNCT ",")
(LIT "g")
(PUNCT ",")
(LIT "compile/link with debugging information")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "force")
(PUNCT ",")
(LIT "f")
(PUNCT ",")
(LIT "forcibly build everything (ignore file timestamps)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "compiler=")
(PUNCT ",")
(LIT "c")
(PUNCT ",")
(LIT "specify the compiler type")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "swig-cpp")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "make SWIG create C++ files (default is C)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "swig-opts=")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list of SWIG command line options")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "swig=")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "path to the SWIG executable")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "user")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "add user include, library and rpath")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "boolean_options")
(PUNCT "=")
(PUNCT "[")
(LIT "inplace")
(PUNCT ",")
(LIT "debug")
(PUNCT ",")
(LIT "force")
(PUNCT ",")
(LIT "swig-cpp")
(PUNCT ",")
(LIT "user")
(PUNCT "]")
(NEWLINE)
(ID "help_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "help-compiler")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list available compilers")
(PUNCT ",")
(ID "show_compilers")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "build_lib")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "plat_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "inplace")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "package")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "link_objects")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "swig")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "swig_cpp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "user")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_undefined_options")
(PUNCT "(")
(LIT "build")
(PUNCT ",")
(PUNCT "(")
(LIT "build_lib")
(PUNCT ",")
(LIT "build_lib")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "build_temp")
(PUNCT ",")
(LIT "build_temp")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "compiler")
(PUNCT ",")
(LIT "compiler")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "debug")
(PUNCT ",")
(LIT "debug")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "force")
(PUNCT ",")
(LIT "force")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "plat_name")
(PUNCT ",")
(LIT "plat_name")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "package")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "package")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "ext_package")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "ext_modules")
(NEWLINE)
(ID "py_include")
(PUNCT "=")
(ID "sysconfig")
(PUNCT ".")
(ID "get_python_inc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "plat_py_include")
(PUNCT "=")
(ID "sysconfig")
(PUNCT ".")
(ID "get_python_inc")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT "!=")
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "include")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "py_include")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "plat_py_include")
(PUNCT "!=")
(ID "py_include")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "plat_py_include")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ensure_string_list")
(PUNCT "(")
(LIT "libraries")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "libraries")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "rpath")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "libs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT "!=")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT ",")
(LIT "libs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT ",")
(LIT "Debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT ",")
(LIT "Release")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "get_config_h_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_sys_home")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "_home")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_sys_home")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "MSVC_VERSION")
(PUNCT ">=")
(LIT 9)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "plat_name")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "plat_name")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "new_lib")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "PCbuild")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_lib")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "new_lib")
(PUNCT ",")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "new_lib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "MSVC_VERSION")
(PUNCT "==")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "PC")
(PUNCT ",")
(LIT "VS8.0")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "MSVC_VERSION")
(PUNCT "==")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "PC")
(PUNCT ",")
(LIT "VS7.1")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "PC")
(PUNCT ",")
(LIT "VC6")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "==")
(LIT "cygwin")
(KEYWORD or)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "==")
(LIT "atheos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ",")
(LIT "bin")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "config")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD False)
(KEYWORD and)
(PUNCT "(")
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "Py_ENABLE_SHARED")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sysconfig")
(PUNCT ".")
(ID "python_build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "LIBDIR")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "defines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "symbol")
(PUNCT ",")
(LIT "1")
(PUNCT ")")
(KEYWORD for)
(ID "symbol")
(KEYWORD in)
(ID "defines")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_include")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "USER_BASE")
(PUNCT ",")
(LIT "include")
(PUNCT ")")
(NEWLINE)
(ID "user_lib")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "USER_BASE")
(PUNCT ",")
(LIT "lib")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "user_include")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "user_include")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "user_lib")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "user_lib")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "user_lib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "new_compiler")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "has_c_libraries")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "build_clib")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build_clib")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "build_clib")
(PUNCT ".")
(ID "get_library_names")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "build_clib")
(PUNCT ".")
(ID "build_clib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT "=")
(ID "new_compiler")
(PUNCT "(")
(ID "compiler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT ")")
(NEWLINE)
(ID "customize_compiler")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "plat_name")
(PUNCT "!=")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "plat_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_include_dirs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "define")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "define_macro")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undef")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "macro")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "undefine_macro")
(PUNCT "(")
(ID "macro")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "libraries")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_libraries")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_library_dirs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "rpath")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_runtime_library_dirs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "link_objects")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_link_objects")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "link_objects")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "build_extensions")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_extensions_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "extensions")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensure that the list of extensions (presumably provided as a\n        command option 'extensions') is valid, i.e. it is a list of\n        Extension objects.  We also support the old-style list of 2-tuples,\n        where the tuples are (ext_name, build_info), which are converted to\n        Extension instances here.\n\n        Raise DistutilsSetupError if the structure is invalid anywhere;\n        just returns otherwise.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "extensions")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "'ext_modules' option must be a list of Extension instances")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "ext")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "extensions")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "ext")
(PUNCT ",")
(ID "Extension")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "ext")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "ext")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "each element of 'ext_modules' option must be an ")
(LIT "Extension instance or 2-tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ext_name")
(PUNCT ",")
(ID "build_info")
(PUNCT "=")
(ID "ext")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "old-style (ext_name, build_info) tuple found in ")
(LIT "ext_modules for extension '%s'")
(LIT "-- please convert to Extension instance")
(PUNCT "%")
(ID "ext_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "ext_name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "extension_name_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "ext_name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "first element of each tuple in 'ext_modules' ")
(LIT "must be the extension name (a string)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "build_info")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "second element of each tuple in 'ext_modules' ")
(LIT "must be a dictionary (build info)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ext")
(PUNCT "=")
(ID "Extension")
(PUNCT "(")
(ID "ext_name")
(PUNCT ",")
(ID "build_info")
(PUNCT "[")
(LIT "sources")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(PUNCT "(")
(LIT "include_dirs")
(PUNCT ",")
(LIT "library_dirs")
(PUNCT ",")
(LIT "libraries")
(PUNCT ",")
(LIT "extra_objects")
(PUNCT ",")
(LIT "extra_compile_args")
(PUNCT ",")
(LIT "extra_link_args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "ext")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ext")
(PUNCT ".")
(ID "runtime_library_dirs")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "rpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "def_file")
(KEYWORD in)
(ID "build_info")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "'def_file' element of build info dict ")
(LIT "no longer supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "macros")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "macros")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "macros")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ext")
(PUNCT ".")
(ID "define_macros")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "ext")
(PUNCT ".")
(ID "undef_macros")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "macro")
(KEYWORD in)
(ID "macros")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "macro")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "macro")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "'macros' element of build info dict ")
(LIT "must be 1- or 2-tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "macro")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ext")
(PUNCT ".")
(ID "undef_macros")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "macro")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "macro")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ext")
(PUNCT ".")
(ID "define_macros")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "macro")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "extensions")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "ext")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_source_files")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_extensions_list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ")")
(NEWLINE)
(ID "filenames")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filenames")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "ext")
(PUNCT ".")
(ID "sources")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "filenames")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_outputs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_extensions_list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ")")
(NEWLINE)
(ID "outputs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outputs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_ext_fullpath")
(PUNCT "(")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "outputs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "build_extensions")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_extensions_list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "build_extension")
(PUNCT "(")
(ID "ext")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "CCompilerError")
(PUNCT ",")
(ID "DistutilsError")
(PUNCT ",")
(ID "CompileError")
(PUNCT ")")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ext")
(PUNCT ".")
(ID "optional")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "building extension \"%s\" failed: %s")
(PUNCT "%")
(PUNCT "(")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "build_extension")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sources")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "sources")
(NEWLINE)
(KEYWORD if)
(ID "sources")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "sources")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "in 'ext_modules' option (extension '%s'), ")
(LIT "'sources' must be present and must be ")
(LIT "a list of source filenames")
(PUNCT "%")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sources")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "sources")
(PUNCT ")")
(NEWLINE)
(ID "ext_path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_ext_fullpath")
(PUNCT "(")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "depends")
(PUNCT "=")
(ID "sources")
(PUNCT "+")
(ID "ext")
(PUNCT ".")
(ID "depends")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "force")
(KEYWORD or)
(ID "newer_group")
(PUNCT "(")
(ID "depends")
(PUNCT ",")
(ID "ext_path")
(PUNCT ",")
(LIT "newer")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "skipping '%s' extension (up-to-date)")
(PUNCT ",")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "building '%s' extension")
(PUNCT ",")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sources")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "swig_sources")
(PUNCT "(")
(ID "sources")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(NEWLINE)
(ID "extra_args")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "extra_compile_args")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "macros")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "define_macros")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "undef")
(KEYWORD in)
(ID "ext")
(PUNCT ".")
(ID "undef_macros")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "macros")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "undef")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "objects")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "sources")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT ",")
(ID "macros")
(PUNCT "=")
(ID "macros")
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(ID "extra_args")
(PUNCT ",")
(ID "depends")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "depends")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_built_objects")
(PUNCT "=")
(ID "objects")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(PUNCT ".")
(ID "extra_objects")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "objects")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "ext")
(PUNCT ".")
(ID "extra_objects")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "extra_args")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "extra_link_args")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "language")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "language")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "detect_language")
(PUNCT "(")
(ID "sources")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "link_shared_object")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "ext_path")
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_libraries")
(PUNCT "(")
(ID "ext")
(PUNCT ")")
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "runtime_library_dirs")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(ID "extra_args")
(PUNCT ",")
(ID "export_symbols")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_export_symbols")
(PUNCT "(")
(ID "ext")
(PUNCT ")")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ",")
(ID "build_temp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(ID "language")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "swig_sources")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sources")
(PUNCT ",")
(ID "extension")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Walk the list of source files in 'sources', looking for SWIG\n        interface (.i) files.  Run SWIG on all that are found, and\n        return a modified 'sources' list with SWIG source files replaced\n        by the generated C (or C++) files.\n        ")
(NEWLINE)
(ID "new_sources")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "swig_sources")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "swig_targets")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "swig_cpp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "--swig-cpp is deprecated - use --swig-opts=-c++")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "swig_cpp")
(KEYWORD or)
(PUNCT "(")
(LIT "-c++")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(LIT "-c++")
(KEYWORD in)
(ID "extension")
(PUNCT ".")
(ID "swig_opts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target_ext")
(PUNCT "=")
(LIT ".cpp")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target_ext")
(PUNCT "=")
(LIT ".c")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "source")
(KEYWORD in)
(ID "sources")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(PUNCT "==")
(LIT ".i")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_sources")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "base")
(PUNCT "+")
(LIT "_wrap")
(PUNCT "+")
(ID "target_ext")
(PUNCT ")")
(NEWLINE)
(ID "swig_sources")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(ID "swig_targets")
(PUNCT "[")
(ID "source")
(PUNCT "]")
(PUNCT "=")
(ID "new_sources")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_sources")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "swig_sources")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "new_sources")
(NEWLINE)
(DEDENT)
(ID "swig")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "swig")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "find_swig")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "swig_cmd")
(PUNCT "=")
(PUNCT "[")
(ID "swig")
(PUNCT ",")
(LIT "-python")
(PUNCT "]")
(NEWLINE)
(ID "swig_cmd")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "swig_cpp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "swig_cmd")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-c++")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "swig_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "o")
(KEYWORD in)
(ID "extension")
(PUNCT ".")
(ID "swig_opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "swig_cmd")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "source")
(KEYWORD in)
(ID "swig_sources")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT "=")
(ID "swig_targets")
(PUNCT "[")
(ID "source")
(PUNCT "]")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "swigging %s to %s")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(ID "swig_cmd")
(PUNCT "+")
(PUNCT "[")
(LIT "-o")
(PUNCT ",")
(ID "target")
(PUNCT ",")
(ID "source")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "new_sources")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_swig")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the SWIG executable.  On Unix, this is\n        just \"swig\" -- it should be in the PATH.  Tries a bit harder on\n        Windows.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "swig")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "vers")
(KEYWORD in)
(PUNCT "(")
(LIT "1.3")
(PUNCT ",")
(LIT "1.2")
(PUNCT ",")
(LIT "1.1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(LIT "c:\\swig%s")
(PUNCT "%")
(ID "vers")
(PUNCT ",")
(LIT "swig.exe")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fn")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "swig.exe")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "I don't know how to find (much less run) SWIG ")
(LIT "on platform '%s'")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_ext_fullpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ext_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the path of the filename for a given extension.\n\n        The file is located in `build_lib` or directly in the package\n        (inplace option).\n        ")
(NEWLINE)
(ID "fullname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_ext_fullname")
(PUNCT "(")
(ID "ext_name")
(PUNCT ")")
(NEWLINE)
(ID "modpath")
(PUNCT "=")
(ID "fullname")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_ext_filename")
(PUNCT "(")
(ID "modpath")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "inplace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "modpath")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "filename")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "build_lib")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "package")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "modpath")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "build_py")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build_py")
(PUNCT ")")
(NEWLINE)
(ID "package_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "build_py")
(PUNCT ".")
(ID "get_package_dir")
(PUNCT "(")
(ID "package")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "package_dir")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_ext_fullname")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ext_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the fullname of a given extension name.\n\n        Adds the `package.` prefix")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "package")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ext_name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "package")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "ext_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_ext_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ext_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert the name of an extension (eg. \"foo.bar\") into the name\n        of the file from which it will be loaded (eg. \"foo/bar.so\", or\n        \"foo\\bar.pyd\").\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "sysconfig")
(KEYWORD import)
(ID "get_config_var")
(NEWLINE)
(ID "ext_path")
(PUNCT "=")
(ID "ext_name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "ext_suffix")
(PUNCT "=")
(ID "get_config_var")
(PUNCT "(")
(LIT "EXT_SUFFIX")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "ext_path")
(PUNCT ")")
(PUNCT "+")
(LIT "_d")
(PUNCT "+")
(ID "ext_suffix")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "ext_path")
(PUNCT ")")
(PUNCT "+")
(ID "ext_suffix")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_export_symbols")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the list of symbols that a shared extension has to\n        export.  This either uses 'ext.export_symbols' or, if it's not\n        provided, \"PyInit_\" + module_name.  Only relevant on Windows, where\n        the .pyd file (DLL) must export the module \"PyInit_\" function.\n        ")
(NEWLINE)
(ID "initfunc_name")
(PUNCT "=")
(LIT "PyInit_")
(PUNCT "+")
(ID "ext")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "initfunc_name")
(KEYWORD not)
(KEYWORD in)
(ID "ext")
(PUNCT ".")
(ID "export_symbols")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ext")
(PUNCT ".")
(ID "export_symbols")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "initfunc_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "export_symbols")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_libraries")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the list of libraries to link against when building a\n        shared extension.  On most platforms, this is just 'ext.libraries';\n        on Windows, we add the Python library (eg. python20.dll).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "msvccompiler")
(KEYWORD import)
(ID "MSVCCompiler")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ",")
(ID "MSVCCompiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "template")
(PUNCT "=")
(LIT "python%d%d")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "template")
(PUNCT "=")
(ID "template")
(PUNCT "+")
(LIT "_d")
(NEWLINE)
(DEDENT)
(ID "pythonlib")
(PUNCT "=")
(PUNCT "(")
(ID "template")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 24)
(PUNCT ",")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 16)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(PUNCT "+")
(PUNCT "[")
(ID "pythonlib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "==")
(LIT "cygwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "template")
(PUNCT "=")
(LIT "python%d.%d")
(NEWLINE)
(ID "pythonlib")
(PUNCT "=")
(PUNCT "(")
(ID "template")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 24)
(PUNCT ",")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 16)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(PUNCT "+")
(PUNCT "[")
(ID "pythonlib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "==")
(LIT "atheos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(ID "template")
(PUNCT "=")
(LIT "python%d.%d")
(NEWLINE)
(ID "pythonlib")
(PUNCT "=")
(PUNCT "(")
(ID "template")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 24)
(PUNCT ",")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 16)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "extra")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "lib")
(KEYWORD in)
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "SHLIBS")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lib")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-l")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "lib")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "lib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(PUNCT "+")
(PUNCT "[")
(ID "pythonlib")
(PUNCT ",")
(LIT "m")
(PUNCT "]")
(PUNCT "+")
(ID "extra")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(LIT "aix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(KEYWORD if)
(KEYWORD False)
(KEYWORD and)
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "Py_ENABLE_SHARED")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pythonlib")
(PUNCT "=")
(LIT "python{}.{}{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 24)
(PUNCT ",")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">>")
(LIT 16)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "abiflags")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(PUNCT "+")
(PUNCT "[")
(ID "pythonlib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ext")
(PUNCT ".")
(ID "libraries")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
