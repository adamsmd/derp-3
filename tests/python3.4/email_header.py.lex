(LIT "Header encoding and decoding functionality.")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Header")
(PUNCT ",")
(LIT "decode_header")
(PUNCT ",")
(LIT "make_header")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "binascii")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "quoprimime")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "base64mime")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "HeaderParseError")
(NEWLINE)
(KEYWORD from)
(ID "email")
(KEYWORD import)
(ID "charset")
(KEYWORD as)
(ID "_charset")
(NEWLINE)
(ID "Charset")
(PUNCT "=")
(ID "_charset")
(PUNCT ".")
(ID "Charset")
(NEWLINE)
(ID "NL")
(PUNCT "=")
(LIT "\n")
(NEWLINE)
(ID "SPACE")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(ID "BSPACE")
(PUNCT "=")
(LIT #" ")
(NEWLINE)
(ID "SPACE8")
(PUNCT "=")
(LIT " ")
(PUNCT "*")
(LIT 8)
(NEWLINE)
(ID "EMPTYSTRING")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "MAXLINELEN")
(PUNCT "=")
(LIT 78)
(NEWLINE)
(ID "FWS")
(PUNCT "=")
(LIT " \t")
(NEWLINE)
(ID "USASCII")
(PUNCT "=")
(ID "Charset")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(ID "UTF8")
(PUNCT "=")
(ID "Charset")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "ecre")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a \"q\" or a \"b\", case insensitive\n  \\?                    # literal ?\n  (?P<encoded>.*?)      # non-greedy up to the next ?= is the encoded string\n  \\?=                   # literal ?=\n  ")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "VERBOSE")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "IGNORECASE")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "MULTILINE")
(PUNCT ")")
(NEWLINE)
(ID "fcre")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[\\041-\\176]+:$")
(PUNCT ")")
(NEWLINE)
(ID "_embeded_header")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\n[^ \\t]+:")
(PUNCT ")")
(NEWLINE)
(ID "_max_append")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "quoprimime")
(PUNCT ".")
(ID "_max_append")
(NEWLINE)
(KEYWORD def)
(ID "decode_header")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decode a message header value without converting charset.\n\n    Returns a list of (string, charset) pairs containing each of the decoded\n    parts of the header.  Charset is None for non-encoded parts of the header,\n    otherwise a lower-case string containing the name of the character set\n    specified in the encoded string.\n\n    header may be a string that may or may not contain RFC2047 encoded words,\n    or it may be a Header object.\n\n    An email.errors.HeaderParseError may be raised when certain decoding error\n    occurs (e.g. a base64 decoding exception).\n    ")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "header")
(PUNCT ",")
(LIT "_chunks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "(")
(ID "_charset")
(PUNCT ".")
(ID "_encode")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "string")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "header")
(PUNCT ".")
(ID "_chunks")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ecre")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "(")
(ID "header")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "words")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "header")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "ecre")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "first")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD while)
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unencoded")
(PUNCT "=")
(ID "parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unencoded")
(PUNCT "=")
(ID "unencoded")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "first")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "unencoded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "words")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "unencoded")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(ID "parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "encoded")
(PUNCT "=")
(ID "parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "words")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "encoded")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "droplist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "n")
(PUNCT ",")
(ID "w")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 1)
(KEYWORD and)
(ID "w")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD and)
(ID "words")
(PUNCT "[")
(ID "n")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD and)
(ID "words")
(PUNCT "[")
(ID "n")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "droplist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "n")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "droplist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "words")
(PUNCT "[")
(ID "d")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "decoded_words")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "encoded_string")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "decoded_words")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "encoded_string")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "encoding")
(PUNCT "==")
(LIT "q")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "word")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "quoprimime")
(PUNCT ".")
(ID "header_decode")
(PUNCT "(")
(ID "encoded_string")
(PUNCT ")")
(NEWLINE)
(ID "decoded_words")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "word")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "encoding")
(PUNCT "==")
(LIT "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "paderr")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "encoded_string")
(PUNCT ")")
(PUNCT "%")
(LIT 4)
(NEWLINE)
(KEYWORD if)
(ID "paderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoded_string")
(PUNCT "+=")
(LIT "===")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "-")
(ID "paderr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "word")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "base64mime")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoded_string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "binascii")
(PUNCT ".")
(ID "Error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Base64 decoding error")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "decoded_words")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "word")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "Unexpected encoding: ")
(PUNCT "+")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "collapsed")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "last_word")
(PUNCT "=")
(ID "last_charset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "word")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "decoded_words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "word")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "word")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "word")
(PUNCT ",")
(LIT "raw-unicode-escape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "last_word")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_word")
(PUNCT "=")
(ID "word")
(NEWLINE)
(ID "last_charset")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "charset")
(PUNCT "!=")
(ID "last_charset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "collapsed")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "last_word")
(PUNCT ",")
(ID "last_charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "last_word")
(PUNCT "=")
(ID "word")
(NEWLINE)
(ID "last_charset")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "last_charset")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_word")
(PUNCT "+=")
(ID "BSPACE")
(PUNCT "+")
(ID "word")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_word")
(PUNCT "+=")
(ID "word")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "collapsed")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "last_word")
(PUNCT ",")
(ID "last_charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "collapsed")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_header")
(PUNCT "(")
(ID "decoded_seq")
(PUNCT ",")
(ID "maxlinelen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "header_name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "continuation_ws")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a Header from a sequence of pairs as returned by decode_header()\n\n    decode_header() takes a header value string and returns a sequence of\n    pairs of the format (decoded_string, charset) where charset is the string\n    name of the character set.\n\n    This function takes one of those sequence of pairs and returns a Header\n    instance.  Optional maxlinelen, header_name, and continuation_ws are as in\n    the Header constructor.\n    ")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "Header")
(PUNCT "(")
(ID "maxlinelen")
(PUNCT "=")
(ID "maxlinelen")
(PUNCT ",")
(ID "header_name")
(PUNCT "=")
(ID "header_name")
(PUNCT ",")
(ID "continuation_ws")
(PUNCT "=")
(ID "continuation_ws")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "s")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "decoded_seq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "charset")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "Charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "Charset")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "h")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Header")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "charset")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "maxlinelen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "header_name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "continuation_ws")
(PUNCT "=")
(LIT " ")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a MIME-compliant header that can contain many character sets.\n\n        Optional s is the initial header value.  If None, the initial header\n        value is not set.  You can later append to the header with .append()\n        method calls.  s may be a byte string or a Unicode string, but see the\n        .append() documentation for semantics.\n\n        Optional charset serves two purposes: it has the same meaning as the\n        charset argument to the .append() method.  It also sets the default\n        character set for all subsequent .append() calls that omit the charset\n        argument.  If charset is not provided in the constructor, the us-ascii\n        charset is used both as s's initial charset and as the default for\n        subsequent .append() calls.\n\n        The maximum line length can be specified explicitly via maxlinelen. For\n        splitting the first line to a shorter value (to account for the field\n        header which isn't included in s, e.g. `Subject') pass in the name of\n        the field in header_name.  The default maxlinelen is 78 as recommended\n        by RFC 2822.\n\n        continuation_ws must be RFC 2822 compliant folding whitespace (usually\n        either a space or a hard tab) which will be prepended to continuation\n        lines.\n\n        errors is passed through to the .append() call.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "charset")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "USASCII")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "Charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "Charset")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_charset")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_continuation_ws")
(PUNCT "=")
(ID "continuation_ws")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "s")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "maxlinelen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "maxlinelen")
(PUNCT "=")
(ID "MAXLINELEN")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_maxlinelen")
(PUNCT "=")
(ID "maxlinelen")
(NEWLINE)
(KEYWORD if)
(ID "header_name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_headerlen")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_headerlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "header_name")
(PUNCT ")")
(PUNCT "+")
(LIT 2)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the string value of the header.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_normalize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "uchunks")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "lastcs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "lastspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "string")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nextcs")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(KEYWORD if)
(ID "nextcs")
(PUNCT "==")
(ID "_charset")
(PUNCT ".")
(ID "UNKNOWN8BIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original_bytes")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(ID "string")
(PUNCT "=")
(ID "original_bytes")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "uchunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hasspace")
(PUNCT "=")
(ID "string")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_nonctext")
(PUNCT "(")
(ID "string")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lastcs")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "us-ascii")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "nextcs")
(KEYWORD in)
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "us-ascii")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "hasspace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "uchunks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "SPACE")
(PUNCT ")")
(NEWLINE)
(ID "nextcs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "nextcs")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "us-ascii")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "lastspace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "uchunks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "SPACE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "lastspace")
(PUNCT "=")
(ID "string")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_nonctext")
(PUNCT "(")
(ID "string")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "lastcs")
(PUNCT "=")
(ID "nextcs")
(NEWLINE)
(ID "uchunks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "uchunks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "other")
(PUNCT "==")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT "==")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "charset")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Append a string to the MIME header.\n\n        Optional charset, if given, should be a Charset instance or the name\n        of a character set (which will be converted to a Charset instance).  A\n        value of None (the default) means that the charset given in the\n        constructor is used.\n\n        s may be a byte string or a Unicode string.  If it is a byte string\n        (i.e. isinstance(s, str) is false), then charset is the encoding of\n        that byte string, and a UnicodeError will be raised if the string\n        cannot be decoded with that charset.  If s is a Unicode string, then\n        charset is a hint specifying the character set of the characters in\n        the string.  In either case, when producing an RFC 2822 compliant\n        header using RFC 2047 rules, the string will be encoded using the\n        output codec of the charset.  If the string cannot be encoded to the\n        output codec, a UnicodeError will be raised.\n\n        Optional `errors' is passed as the errors argument to the decode\n        call if s is a byte string.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "charset")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_charset")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "Charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "Charset")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_charset")
(PUNCT "=")
(ID "charset")
(PUNCT ".")
(ID "input_codec")
(KEYWORD or)
(LIT "us-ascii")
(NEWLINE)
(KEYWORD if)
(ID "input_charset")
(PUNCT "==")
(ID "_charset")
(PUNCT ".")
(ID "UNKNOWN8BIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "input_charset")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "output_charset")
(PUNCT "=")
(ID "charset")
(PUNCT ".")
(ID "output_codec")
(KEYWORD or)
(LIT "us-ascii")
(NEWLINE)
(KEYWORD if)
(ID "output_charset")
(PUNCT "!=")
(ID "_charset")
(PUNCT ".")
(ID "UNKNOWN8BIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "output_charset")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "output_charset")
(PUNCT "!=")
(LIT "us-ascii")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "charset")
(PUNCT "=")
(ID "UTF8")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_nonctext")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "True if string s is not a ctext character of RFC822.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "s")
(KEYWORD in)
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT ")")
(PUNCT ",")
(LIT "\\")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "splitchars")
(PUNCT "=")
(LIT ";, \t")
(PUNCT ",")
(ID "maxlinelen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "linesep")
(PUNCT "=")
(LIT "\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encode a message header into an RFC-compliant format.\n\n        There are many issues involved in converting a given string for use in\n        an email header.  Only certain character sets are readable in most\n        email clients, and as header strings can only contain a subset of\n        7-bit ASCII, care must be taken to properly convert and encode (with\n        Base64 or quoted-printable) header strings.  In addition, there is a\n        75-character length limit on any given encoded header field, so\n        line-wrapping must be performed, even with double-byte character sets.\n\n        Optional maxlinelen specifies the maximum length of each generated\n        line, exclusive of the linesep string.  Individual lines may be longer\n        than maxlinelen if a folding point cannot be found.  The first line\n        will be shorter by the length of the header name plus \": \" if a header\n        name was specified at Header construction time.  The default value for\n        maxlinelen is determined at header construction time.\n\n        Optional splitchars is a string containing characters which should be\n        given extra weight by the splitting algorithm during normal header\n        wrapping.  This is in very rough support of RFC 2822's `higher level\n        syntactic breaks':  split points preceded by a splitchar are preferred\n        during line splitting, with the characters preferred in the order in\n        which they appear in the string.  Space and tab may be included in the\n        string to indicate whether preference should be given to one over the\n        other as a split point when other split chars do not appear in the line\n        being split.  Splitchars does not affect RFC 2047 encoded lines.\n\n        Optional linesep is a string to be used to separate the lines of\n        the value.  The default value is the most useful for typical\n        Python applications, but it can be set to \\r\\n to produce RFC-compliant\n        line separators when needed.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_normalize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "maxlinelen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "maxlinelen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_maxlinelen")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "maxlinelen")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "maxlinelen")
(PUNCT "=")
(LIT 1000000)
(NEWLINE)
(DEDENT)
(ID "formatter")
(PUNCT "=")
(ID "_ValueFormatter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_headerlen")
(PUNCT ",")
(ID "maxlinelen")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_continuation_ws")
(PUNCT ",")
(ID "splitchars")
(PUNCT ")")
(NEWLINE)
(ID "lastcs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "hasspace")
(PUNCT "=")
(ID "lastspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "string")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasspace")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hasspace")
(PUNCT "=")
(ID "string")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_nonctext")
(PUNCT "(")
(ID "string")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lastcs")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "us-ascii")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasspace")
(KEYWORD or)
(ID "charset")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "us-ascii")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "add_transition")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "charset")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT "us-ascii")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "lastspace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "add_transition")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "lastspace")
(PUNCT "=")
(ID "string")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_nonctext")
(PUNCT "(")
(ID "string")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "lastcs")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(ID "hasspace")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "charset")
(PUNCT ".")
(ID "header_encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_continuation_ws")
(PUNCT ",")
(LIT " ")
(PUNCT "+")
(ID "line")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sline")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fws")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "sline")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "formatter")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "sline")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT ".")
(ID "add_transition")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "formatter")
(PUNCT ".")
(ID "_str")
(PUNCT "(")
(ID "linesep")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_embeded_header")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HeaderParseError")
(PUNCT "(")
(LIT "header value appears to contain ")
(LIT "an embedded header: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_normalize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "last_charset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "last_chunk")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "string")
(PUNCT ",")
(ID "charset")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "charset")
(PUNCT "==")
(ID "last_charset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_chunk")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "last_charset")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "last_chunk")
(PUNCT ")")
(PUNCT ",")
(ID "last_charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "last_chunk")
(PUNCT "=")
(PUNCT "[")
(ID "string")
(PUNCT "]")
(NEWLINE)
(ID "last_charset")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "last_chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "SPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "last_chunk")
(PUNCT ")")
(PUNCT ",")
(ID "last_charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_chunks")
(PUNCT "=")
(ID "chunks")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ValueFormatter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "headerlen")
(PUNCT ",")
(ID "maxlen")
(PUNCT ",")
(ID "continuation_ws")
(PUNCT ",")
(ID "splitchars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_maxlen")
(PUNCT "=")
(ID "maxlen")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_continuation_ws")
(PUNCT "=")
(ID "continuation_ws")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_continuation_ws_len")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "continuation_ws")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_splitchars")
(PUNCT "=")
(ID "splitchars")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT "=")
(ID "_Accumulator")
(PUNCT "(")
(ID "headerlen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_str")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "linesep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "linesep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_str")
(PUNCT "(")
(ID "NL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "newline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "end_of_line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "end_of_line")
(PUNCT "!=")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "*")
(ID "end_of_line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "is_onlyws")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_lines")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_transition")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "feed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "charset")
(PUNCT ".")
(ID "header_encoding")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ascii_split")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_splitchars")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "encoded_lines")
(PUNCT "=")
(ID "charset")
(PUNCT ".")
(ID "header_encode_lines")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_maxlengths")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first_line")
(PUNCT "=")
(ID "encoded_lines")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "first_line")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_append_chunk")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "first_line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_line")
(PUNCT "=")
(ID "encoded_lines")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_continuation_ws")
(PUNCT ",")
(ID "last_line")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "encoded_lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_continuation_ws")
(PUNCT "+")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_maxlengths")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "self")
(PUNCT ".")
(ID "_maxlen")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "self")
(PUNCT ".")
(ID "_maxlen")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "_continuation_ws_len")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ascii_split")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "splitchars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "([")
(PUNCT "+")
(ID "FWS")
(PUNCT "+")
(LIT "]+)")
(PUNCT ",")
(ID "fws")
(PUNCT "+")
(ID "string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "fws")
(PUNCT ",")
(ID "part")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(PUNCT "*")
(PUNCT "[")
(ID "iter")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "]")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_append_chunk")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_append_chunk")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "_maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_splitchars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "part_count")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ch")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fws")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "fws")
(KEYWORD and)
(ID "fws")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "ch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "prevpart")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "prevpart")
(KEYWORD and)
(ID "prevpart")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "ch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fws")
(PUNCT ",")
(ID "part")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "_initial_size")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fws")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "remainder")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "pop_from")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_current_line")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_Accumulator")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "initial_size")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_initial_size")
(PUNCT "=")
(ID "initial_size")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "push")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "popped")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "popped")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "part_count")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sum")
(PUNCT "(")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "fws")
(PUNCT ")")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(KEYWORD for)
(ID "fws")
(PUNCT ",")
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_initial_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "(")
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "(")
(ID "fws")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "fws")
(PUNCT ",")
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "startval")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "startval")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startval")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "startval")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_initial_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_onlyws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_initial_size")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(PUNCT "(")
(KEYWORD not)
(ID "self")
(KEYWORD or)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "part_count")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__len__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
