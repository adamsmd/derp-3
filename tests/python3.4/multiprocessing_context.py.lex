(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "process")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "ProcessError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BufferTooShort")
(PUNCT "(")
(ID "ProcessError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TimeoutError")
(PUNCT "(")
(ID "ProcessError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "AuthenticationError")
(PUNCT "(")
(ID "ProcessError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BaseContext")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ProcessError")
(PUNCT "=")
(ID "ProcessError")
(NEWLINE)
(ID "BufferTooShort")
(PUNCT "=")
(ID "BufferTooShort")
(NEWLINE)
(ID "TimeoutError")
(PUNCT "=")
(ID "TimeoutError")
(NEWLINE)
(ID "AuthenticationError")
(PUNCT "=")
(ID "AuthenticationError")
(NEWLINE)
(ID "current_process")
(PUNCT "=")
(ID "staticmethod")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "current_process")
(PUNCT ")")
(NEWLINE)
(ID "active_children")
(PUNCT "=")
(ID "staticmethod")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "active_children")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "cpu_count")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the number of CPUs in the system")
(NEWLINE)
(ID "num")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "cpu_count")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "num")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "cannot determine number of cpus")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "num")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "Manager")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a manager associated with a running server process\n\n        The managers methods such as `Lock()`, `Condition()` and `Queue()`\n        can be used to create shared objects.\n        ")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "managers")
(KEYWORD import)
(ID "SyncManager")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "SyncManager")
(PUNCT "(")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "m")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Pipe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "duplex")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns two connection object connected by a pipe")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "connection")
(KEYWORD import)
(ID "Pipe")
(NEWLINE)
(KEYWORD return)
(ID "Pipe")
(PUNCT "(")
(ID "duplex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Lock")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a non-recursive lock object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "Lock")
(NEWLINE)
(KEYWORD return)
(ID "Lock")
(PUNCT "(")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "RLock")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a recursive lock object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "RLock")
(NEWLINE)
(KEYWORD return)
(ID "RLock")
(PUNCT "(")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Condition")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a condition object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "Condition")
(NEWLINE)
(KEYWORD return)
(ID "Condition")
(PUNCT "(")
(ID "lock")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Semaphore")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a semaphore object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "Semaphore")
(NEWLINE)
(KEYWORD return)
(ID "Semaphore")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "BoundedSemaphore")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a bounded semaphore object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "BoundedSemaphore")
(NEWLINE)
(KEYWORD return)
(ID "BoundedSemaphore")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Event")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns an event object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "Event")
(NEWLINE)
(KEYWORD return)
(ID "Event")
(PUNCT "(")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Barrier")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parties")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a barrier object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "synchronize")
(KEYWORD import)
(ID "Barrier")
(NEWLINE)
(KEYWORD return)
(ID "Barrier")
(PUNCT "(")
(ID "parties")
(PUNCT ",")
(ID "action")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Queue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxsize")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a queue object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "queues")
(KEYWORD import)
(ID "Queue")
(NEWLINE)
(KEYWORD return)
(ID "Queue")
(PUNCT "(")
(ID "maxsize")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "JoinableQueue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxsize")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a queue object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "queues")
(KEYWORD import)
(ID "JoinableQueue")
(NEWLINE)
(KEYWORD return)
(ID "JoinableQueue")
(PUNCT "(")
(ID "maxsize")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "SimpleQueue")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a queue object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "queues")
(KEYWORD import)
(ID "SimpleQueue")
(NEWLINE)
(KEYWORD return)
(ID "SimpleQueue")
(PUNCT "(")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Pool")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "processes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "initializer")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "initargs")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "maxtasksperchild")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a process pool object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "pool")
(KEYWORD import)
(ID "Pool")
(NEWLINE)
(KEYWORD return)
(ID "Pool")
(PUNCT "(")
(ID "processes")
(PUNCT ",")
(ID "initializer")
(PUNCT ",")
(ID "initargs")
(PUNCT ",")
(ID "maxtasksperchild")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "RawValue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typecode_or_type")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a shared object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "sharedctypes")
(KEYWORD import)
(ID "RawValue")
(NEWLINE)
(KEYWORD return)
(ID "RawValue")
(PUNCT "(")
(ID "typecode_or_type")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "RawArray")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typecode_or_type")
(PUNCT ",")
(ID "size_or_initializer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a shared array")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "sharedctypes")
(KEYWORD import)
(ID "RawArray")
(NEWLINE)
(KEYWORD return)
(ID "RawArray")
(PUNCT "(")
(ID "typecode_or_type")
(PUNCT ",")
(ID "size_or_initializer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typecode_or_type")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(ID "lock")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a synchronized shared object")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "sharedctypes")
(KEYWORD import)
(ID "Value")
(NEWLINE)
(KEYWORD return)
(ID "Value")
(PUNCT "(")
(ID "typecode_or_type")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(ID "lock")
(PUNCT "=")
(ID "lock")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Array")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "typecode_or_type")
(PUNCT ",")
(ID "size_or_initializer")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "lock")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a synchronized shared array")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "sharedctypes")
(KEYWORD import)
(ID "Array")
(NEWLINE)
(KEYWORD return)
(ID "Array")
(PUNCT "(")
(ID "typecode_or_type")
(PUNCT ",")
(ID "size_or_initializer")
(PUNCT ",")
(ID "lock")
(PUNCT "=")
(ID "lock")
(PUNCT ",")
(ID "ctx")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "freeze_support")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check whether this is a fake forked process in a frozen executable.\n        If so then run code specified by commandline and exit.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(KEYWORD and)
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "frozen")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "spawn")
(KEYWORD import)
(ID "freeze_support")
(NEWLINE)
(ID "freeze_support")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_logger")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return package logger -- if it does not already exist then\n        it is created.\n        ")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "get_logger")
(NEWLINE)
(KEYWORD return)
(ID "get_logger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_to_stderr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn on logging and add a handler which prints to stderr")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "log_to_stderr")
(NEWLINE)
(KEYWORD return)
(ID "log_to_stderr")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "allow_connection_pickling")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Install support for sending connections and sockets\n        between processes\n        ")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "connection")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_executable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "executable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the path to a python.exe or pythonw.exe binary used to run\n        child processes instead of sys.executable when using the 'spawn'\n        start method.  Useful for people embedding Python.\n        ")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "spawn")
(KEYWORD import)
(ID "set_executable")
(NEWLINE)
(ID "set_executable")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_forkserver_preload")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module_names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set list of module names to try to load in forkserver process.\n        This is really just a hint.\n        ")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "forkserver")
(KEYWORD import)
(ID "set_forkserver_preload")
(NEWLINE)
(ID "set_forkserver_preload")
(PUNCT "(")
(ID "module_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_context")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "method")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctx")
(PUNCT "=")
(ID "_concrete_contexts")
(PUNCT "[")
(ID "method")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "cannot find context for %r")
(PUNCT "%")
(ID "method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ctx")
(PUNCT ".")
(ID "_check_available")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ctx")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_start_method")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_start_method")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "cannot set start method of concrete context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_available")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Process")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "BaseProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_start_method")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_default_context")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "Process")
(PUNCT ".")
(ID "_Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DefaultContext")
(PUNCT "(")
(ID "BaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Process")
(PUNCT "=")
(ID "Process")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_default_context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_context")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "method")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_default_context")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(ID "method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_start_method")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "force")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "context has already been set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "method")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "force")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_context")
(PUNCT "(")
(ID "method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_start_method")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "allow_none")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_default_context")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_actual_context")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_all_start_methods")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "spawn")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "reduction")
(NEWLINE)
(KEYWORD if)
(ID "reduction")
(PUNCT ".")
(ID "HAVE_SEND_HANDLE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "fork")
(PUNCT ",")
(LIT "spawn")
(PUNCT ",")
(LIT "forkserver")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "fork")
(PUNCT ",")
(LIT "spawn")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "DefaultContext")
(PUNCT ".")
(ID "__all__")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "DefaultContext")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "!=")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "ForkProcess")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "BaseProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_start_method")
(PUNCT "=")
(LIT "fork")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "popen_fork")
(KEYWORD import)
(ID "Popen")
(NEWLINE)
(KEYWORD return)
(ID "Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SpawnProcess")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "BaseProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_start_method")
(PUNCT "=")
(LIT "spawn")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "popen_spawn_posix")
(KEYWORD import)
(ID "Popen")
(NEWLINE)
(KEYWORD return)
(ID "Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ForkServerProcess")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "BaseProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_start_method")
(PUNCT "=")
(LIT "forkserver")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "popen_forkserver")
(KEYWORD import)
(ID "Popen")
(NEWLINE)
(KEYWORD return)
(ID "Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ForkContext")
(PUNCT "(")
(ID "BaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name")
(PUNCT "=")
(LIT "fork")
(NEWLINE)
(ID "Process")
(PUNCT "=")
(ID "ForkProcess")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SpawnContext")
(PUNCT "(")
(ID "BaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name")
(PUNCT "=")
(LIT "spawn")
(NEWLINE)
(ID "Process")
(PUNCT "=")
(ID "SpawnProcess")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ForkServerContext")
(PUNCT "(")
(ID "BaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name")
(PUNCT "=")
(LIT "forkserver")
(NEWLINE)
(ID "Process")
(PUNCT "=")
(ID "ForkServerProcess")
(NEWLINE)
(KEYWORD def)
(ID "_check_available")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "reduction")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "reduction")
(PUNCT ".")
(ID "HAVE_SEND_HANDLE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "forkserver start method not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_concrete_contexts")
(PUNCT "=")
(PUNCT "{")
(LIT "fork")
(PUNCT ":")
(ID "ForkContext")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "spawn")
(PUNCT ":")
(ID "SpawnContext")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "forkserver")
(PUNCT ":")
(ID "ForkServerContext")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_default_context")
(PUNCT "=")
(ID "DefaultContext")
(PUNCT "(")
(ID "_concrete_contexts")
(PUNCT "[")
(LIT "fork")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "SpawnProcess")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "BaseProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_start_method")
(PUNCT "=")
(LIT "spawn")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "popen_spawn_win32")
(KEYWORD import)
(ID "Popen")
(NEWLINE)
(KEYWORD return)
(ID "Popen")
(PUNCT "(")
(ID "process_obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SpawnContext")
(PUNCT "(")
(ID "BaseContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name")
(PUNCT "=")
(LIT "spawn")
(NEWLINE)
(ID "Process")
(PUNCT "=")
(ID "SpawnProcess")
(NEWLINE)
(DEDENT)
(ID "_concrete_contexts")
(PUNCT "=")
(PUNCT "{")
(LIT "spawn")
(PUNCT ":")
(ID "SpawnContext")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_default_context")
(PUNCT "=")
(ID "DefaultContext")
(PUNCT "(")
(ID "_concrete_contexts")
(PUNCT "[")
(LIT "spawn")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_force_start_method")
(PUNCT "(")
(ID "method")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_default_context")
(PUNCT ".")
(ID "_actual_context")
(PUNCT "=")
(ID "_concrete_contexts")
(PUNCT "[")
(ID "method")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_tls")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "local")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "get_spawning_popen")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "_tls")
(PUNCT ",")
(LIT "spawning_popen")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_spawning_popen")
(PUNCT "(")
(ID "popen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_tls")
(PUNCT ".")
(ID "spawning_popen")
(PUNCT "=")
(ID "popen")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "assert_spawning")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "get_spawning_popen")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "%s objects should only be shared between processes")
(LIT " through inheritance")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
