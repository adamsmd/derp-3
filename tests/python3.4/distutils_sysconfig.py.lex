(LIT "Provide access to Python's configuration information.  The specific\nconfiguration variables available depend heavily on the platform and\nconfiguration.  The values may be retrieved using\nget_config_var(name), and the list of variables is available via\nget_config_vars().keys().  Additional convenience functions are also\navailable.\n\nWritten by:   Fred L. Drake, Jr.\nEmail:        <fdrake@acm.org>\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "fnmatch")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsPlatformError")
(NEWLINE)
(ID "PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "EXEC_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ")")
(NEWLINE)
(ID "BASE_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT ")")
(NEWLINE)
(ID "BASE_EXEC_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "_PYTHON_PROJECT_BASE")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "project_base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "_PYTHON_PROJECT_BASE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "project_base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(LIT "pcbuild")
(KEYWORD in)
(ID "project_base")
(PUNCT "[")
(PUNCT "-")
(LIT 8)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "project_base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "project_base")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(LIT "\\pc\\v")
(KEYWORD in)
(ID "project_base")
(PUNCT "[")
(PUNCT "-")
(LIT 10)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "project_base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "project_base")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "pardir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(LIT "\\pcbuild\\amd64")
(KEYWORD in)
(ID "project_base")
(PUNCT "[")
(PUNCT "-")
(LIT 14)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "project_base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "project_base")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "pardir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_python_source_dir")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "fn")
(KEYWORD in)
(PUNCT "(")
(LIT "Setup.dist")
(PUNCT ",")
(LIT "Setup.local")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(LIT "Modules")
(PUNCT ",")
(ID "fn")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "_sys_home")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "_home")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_sys_home")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(ID "_sys_home")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT "pcbuild")
(PUNCT ",")
(LIT "pcbuild\\amd64")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_sys_home")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_sys_home")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "pcbuild")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_sys_home")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_python_build")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_sys_home")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_is_python_source_dir")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_is_python_source_dir")
(PUNCT "(")
(ID "project_base")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "python_build")
(PUNCT "=")
(ID "_python_build")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "build_flags")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "python_build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "build_flags")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "abiflags")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a string containing the major and minor Python version,\n    leaving off the patchlevel.  Sample return values could be '1.5'\n    or '2.2'.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_python_inc")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the directory containing installed Python header files.\n\n    If 'plat_specific' is false (the default), this is the path to the\n    non-platform-specific header files, i.e. Python.h and so on;\n    otherwise, this is the path to platform-specific header files\n    (namely pyconfig.h).\n\n    If 'prefix' is supplied, use it instead of sys.base_prefix or\n    sys.base_exec_prefix -- i.e., ignore 'plat_specific'.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "prefix")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "plat_specific")
(KEYWORD and)
(ID "BASE_EXEC_PREFIX")
(KEYWORD or)
(ID "BASE_PREFIX")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "python_build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "_sys_home")
(KEYWORD or)
(ID "project_base")
(NEWLINE)
(KEYWORD if)
(ID "plat_specific")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "base")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_sys_home")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "incdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ",")
(ID "get_config_var")
(PUNCT "(")
(LIT "AST_H_DIR")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "incdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "get_config_var")
(PUNCT "(")
(LIT "srcdir")
(PUNCT ")")
(PUNCT ",")
(LIT "Include")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "incdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "python_dir")
(PUNCT "=")
(LIT "python")
(PUNCT "+")
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "build_flags")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "python_build")
(KEYWORD and)
(ID "plat_specific")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(KEYWORD return)
(ID "sysconfig")
(PUNCT ".")
(ID "get_path")
(PUNCT "(")
(LIT "platinclude")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "include")
(PUNCT ",")
(ID "python_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "include")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "I don't know where Python installs its C header files ")
(LIT "on platform '%s'")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_python_lib")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "standard_lib")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the directory containing the Python library (standard or\n    site additions).\n\n    If 'plat_specific' is true, return the directory containing\n    platform-specific modules, i.e. any module from a non-pure-Python\n    module distribution; otherwise, return the platform-shared library\n    directory.  If 'standard_lib' is true, return the directory\n    containing standard Python library modules; otherwise, return the\n    directory for site-specific modules.\n\n    If 'prefix' is supplied, use it instead of sys.base_prefix or\n    sys.base_exec_prefix -- i.e., ignore 'plat_specific'.\n    ")
(NEWLINE)
(ID "is_default_prefix")
(PUNCT "=")
(KEYWORD not)
(ID "prefix")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT "/usr")
(PUNCT ",")
(LIT "/usr/local")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "prefix")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "standard_lib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "plat_specific")
(KEYWORD and)
(ID "BASE_EXEC_PREFIX")
(KEYWORD or)
(ID "BASE_PREFIX")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "plat_specific")
(KEYWORD and)
(ID "EXEC_PREFIX")
(KEYWORD or)
(ID "PREFIX")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "libpython")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "standard_lib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "libpython")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "is_default_prefix")
(KEYWORD and)
(LIT "PYTHONUSERBASE")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(LIT "VIRTUAL_ENV")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(LIT "real_prefix")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "__dict__")
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT "==")
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python3")
(PUNCT ",")
(LIT "dist-packages")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "libpython")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "standard_lib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "Lib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "Lib")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "I don't know where Python installs its library ")
(LIT "on platform '%s'")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "customize_compiler")
(PUNCT "(")
(ID "compiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do any platform-specific customization of a CCompiler instance.\n\n    Mainly needed on Unix, so we can plug in the information that\n    varies across Unices and is stored in Python's Makefile.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "compiler")
(PUNCT ".")
(ID "compiler_type")
(PUNCT "==")
(LIT "unix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_config_vars")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "get_config_var")
(PUNCT "(")
(LIT "CUSTOMIZED_OSX_COMPILER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_osx_support")
(NEWLINE)
(ID "_osx_support")
(PUNCT ".")
(ID "customize_compiler")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(ID "_config_vars")
(PUNCT "[")
(LIT "CUSTOMIZED_OSX_COMPILER")
(PUNCT "]")
(PUNCT "=")
(LIT "True")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "(")
(ID "cc")
(PUNCT ",")
(ID "cxx")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "cflags")
(PUNCT ",")
(ID "ccshared")
(PUNCT ",")
(ID "ldshared")
(PUNCT ",")
(ID "shlib_suffix")
(PUNCT ",")
(ID "ar")
(PUNCT ",")
(ID "ar_flags")
(PUNCT ",")
(ID "configure_cppflags")
(PUNCT ",")
(ID "configure_cflags")
(PUNCT ",")
(ID "configure_ldflags")
(PUNCT ")")
(PUNCT "=")
(ID "get_config_vars")
(PUNCT "(")
(LIT "CC")
(PUNCT ",")
(LIT "CXX")
(PUNCT ",")
(LIT "OPT")
(PUNCT ",")
(LIT "CFLAGS")
(PUNCT ",")
(LIT "CCSHARED")
(PUNCT ",")
(LIT "LDSHARED")
(PUNCT ",")
(LIT "SHLIB_SUFFIX")
(PUNCT ",")
(LIT "AR")
(PUNCT ",")
(LIT "ARFLAGS")
(PUNCT ",")
(LIT "CONFIGURE_CPPFLAGS")
(PUNCT ",")
(LIT "CONFIGURE_CFLAGS")
(PUNCT ",")
(LIT "CONFIGURE_LDFLAGS")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "CC")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newcc")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CC")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(KEYWORD and)
(LIT "LDSHARED")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(ID "ldshared")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "cc")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldshared")
(PUNCT "=")
(ID "newcc")
(PUNCT "+")
(ID "ldshared")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "cc")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "cc")
(PUNCT "=")
(ID "newcc")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "CXX")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cxx")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CXX")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fnmatch")
(PUNCT ".")
(ID "filter")
(PUNCT "(")
(PUNCT "[")
(ID "cc")
(PUNCT ",")
(ID "cxx")
(PUNCT "]")
(PUNCT ",")
(LIT "*-4.[0-8]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "configure_cflags")
(PUNCT "=")
(ID "configure_cflags")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-fstack-protector-strong")
(PUNCT ",")
(LIT "-fstack-protector")
(PUNCT ")")
(NEWLINE)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-fstack-protector-strong")
(PUNCT ",")
(LIT "-fstack-protector")
(PUNCT ")")
(NEWLINE)
(ID "cflags")
(PUNCT "=")
(ID "cflags")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-fstack-protector-strong")
(PUNCT ",")
(LIT "-fstack-protector")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "LDSHARED")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldshared")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "LDSHARED")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "CPP")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cpp")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CPP")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cpp")
(PUNCT "=")
(ID "cc")
(PUNCT "+")
(LIT " -E")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "LDFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "LDFLAGS")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "configure_ldflags")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "configure_ldflags")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "CFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cflags")
(PUNCT "=")
(ID "opt")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CFLAGS")
(PUNCT "]")
(NEWLINE)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CFLAGS")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "configure_cflags")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cflags")
(PUNCT "=")
(ID "opt")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "configure_cflags")
(NEWLINE)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "configure_cflags")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "CPPFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cpp")
(PUNCT "=")
(ID "cpp")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CPPFLAGS")
(PUNCT "]")
(NEWLINE)
(ID "cflags")
(PUNCT "=")
(ID "cflags")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CPPFLAGS")
(PUNCT "]")
(NEWLINE)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "CPPFLAGS")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "configure_cppflags")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cpp")
(PUNCT "=")
(ID "cpp")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "configure_cppflags")
(NEWLINE)
(ID "cflags")
(PUNCT "=")
(ID "cflags")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "configure_cppflags")
(NEWLINE)
(ID "ldshared")
(PUNCT "=")
(ID "ldshared")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "configure_cppflags")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "AR")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ar")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "AR")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "ARFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "archiver")
(PUNCT "=")
(ID "ar")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "ARFLAGS")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "archiver")
(PUNCT "=")
(ID "ar")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "ar_flags")
(NEWLINE)
(DEDENT)
(ID "cc_cmd")
(PUNCT "=")
(ID "cc")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "cflags")
(NEWLINE)
(ID "compiler")
(PUNCT ".")
(ID "set_executables")
(PUNCT "(")
(ID "preprocessor")
(PUNCT "=")
(ID "cpp")
(PUNCT ",")
(ID "compiler")
(PUNCT "=")
(ID "cc_cmd")
(PUNCT ",")
(ID "compiler_so")
(PUNCT "=")
(ID "cc_cmd")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "ccshared")
(PUNCT ",")
(ID "compiler_cxx")
(PUNCT "=")
(ID "cxx")
(PUNCT ",")
(ID "linker_so")
(PUNCT "=")
(ID "ldshared")
(PUNCT ",")
(ID "linker_exe")
(PUNCT "=")
(ID "cc")
(PUNCT ",")
(ID "archiver")
(PUNCT "=")
(ID "archiver")
(PUNCT ")")
(NEWLINE)
(ID "compiler")
(PUNCT ".")
(ID "shared_lib_extension")
(PUNCT "=")
(ID "shlib_suffix")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_config_h_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return full pathname of installed pyconfig.h file.")
(NEWLINE)
(KEYWORD if)
(ID "python_build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inc_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_sys_home")
(KEYWORD or)
(ID "project_base")
(PUNCT ",")
(LIT "PC")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inc_dir")
(PUNCT "=")
(ID "_sys_home")
(KEYWORD or)
(ID "project_base")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inc_dir")
(PUNCT "=")
(ID "get_python_inc")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "inc_dir")
(PUNCT ",")
(LIT "pyconfig.h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return full pathname of installed Makefile from the Python build.")
(NEWLINE)
(KEYWORD if)
(ID "python_build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_sys_home")
(KEYWORD or)
(ID "project_base")
(PUNCT ",")
(LIT "Makefile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lib_dir")
(PUNCT "=")
(ID "get_python_lib")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "standard_lib")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "config_file")
(PUNCT "=")
(LIT "config-{}{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "build_flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ",")
(LIT "_multiarch")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config_file")
(PUNCT "+=")
(LIT "-%s")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ".")
(ID "_multiarch")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lib_dir")
(PUNCT ",")
(ID "config_file")
(PUNCT ",")
(LIT "Makefile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_config_h")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "g")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "g")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "define_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "#define ([A-Z][A-Za-z0-9_]+) (.*)\n")
(PUNCT ")")
(NEWLINE)
(ID "undef_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "define_rx")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(ID "v")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(ID "g")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "undef_rx")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "g")
(NEWLINE)
(DEDENT)
(ID "_variable_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)")
(PUNCT ")")
(NEWLINE)
(ID "_findvar1_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)")
(PUNCT ")")
(NEWLINE)
(ID "_findvar2_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\${([A-Za-z][A-Za-z0-9_]*)}")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "parse_makefile")
(PUNCT "(")
(ID "fn")
(PUNCT ",")
(ID "g")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "text_file")
(KEYWORD import)
(ID "TextFile")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "TextFile")
(PUNCT "(")
(ID "fn")
(PUNCT ",")
(ID "strip_comments")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "skip_blanks")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "join_lines")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "g")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "done")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "notdone")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_variable_rx")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tmpv")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "$$")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "$")
(KEYWORD in)
(ID "tmpv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "notdone")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "$$")
(PUNCT ",")
(LIT "$")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "renamed_variables")
(PUNCT "=")
(PUNCT "(")
(LIT "CFLAGS")
(PUNCT ",")
(LIT "LDFLAGS")
(PUNCT ",")
(LIT "CPPFLAGS")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "notdone")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "notdone")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "notdone")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_findvar1_rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(KEYWORD or)
(ID "_findvar2_rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "found")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD in)
(ID "done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(KEYWORD in)
(ID "notdone")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(KEYWORD in)
(ID "renamed_variables")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "PY_")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "renamed_variables")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "PY_")
(PUNCT "+")
(ID "n")
(KEYWORD in)
(ID "notdone")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "done")
(PUNCT "[")
(LIT "PY_")
(PUNCT "+")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "after")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(PUNCT ":")
(ID "m")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "+")
(ID "item")
(PUNCT "+")
(ID "after")
(NEWLINE)
(KEYWORD if)
(LIT "$")
(KEYWORD in)
(ID "after")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "notdone")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(ID "value")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "notdone")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "PY_")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "renamed_variables")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "notdone")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "done")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "g")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "done")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "g")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expand_makefile_vars")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Expand Makefile-style variables -- \"${foo}\" or \"$(foo)\" -- in\n    'string' according to 'vars' (a dictionary mapping variable names to\n    values).  Variables not present in 'vars' are silently expanded to the\n    empty string.  The variable values in 'vars' should not contain further\n    variable expansions; if 'vars' is the output of 'parse_makefile()',\n    you're fine.  Returns a variable-expanded version of 's'.\n    ")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "_findvar1_rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(KEYWORD or)
(ID "_findvar2_rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "beg")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "span")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "beg")
(PUNCT "]")
(PUNCT "+")
(ID "vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "s")
(PUNCT "[")
(ID "end")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(ID "_config_vars")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_init_posix")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize the module as appropriate for POSIX systems.")
(NEWLINE)
(KEYWORD from)
(ID "_sysconfigdata")
(KEYWORD import)
(ID "build_time_vars")
(NEWLINE)
(KEYWORD global)
(ID "_config_vars")
(NEWLINE)
(ID "_config_vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_config_vars")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "build_time_vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init_nt")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize the module as appropriate for NT")
(NEWLINE)
(ID "g")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "LIBDEST")
(PUNCT "]")
(PUNCT "=")
(ID "get_python_lib")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "standard_lib")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "BINLIBDEST")
(PUNCT "]")
(PUNCT "=")
(ID "get_python_lib")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "standard_lib")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "INCLUDEPY")
(PUNCT "]")
(PUNCT "=")
(ID "get_python_inc")
(PUNCT "(")
(ID "plat_specific")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "EXT_SUFFIX")
(PUNCT "]")
(PUNCT "=")
(LIT ".pyd")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "EXE")
(PUNCT "]")
(PUNCT "=")
(LIT ".exe")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "VERSION")
(PUNCT "]")
(PUNCT "=")
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT "[")
(LIT "BINDIR")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD global)
(ID "_config_vars")
(NEWLINE)
(ID "_config_vars")
(PUNCT "=")
(ID "g")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_config_vars")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.  Generally this includes\n    everything needed to build extensions and install both pure modules and\n    extensions.  On Unix, this means every variable defined in Python's\n    installed Makefile; on Windows it's a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_config_vars")
(NEWLINE)
(KEYWORD if)
(ID "_config_vars")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "_init_")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "func")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_config_vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "_config_vars")
(PUNCT "[")
(LIT "prefix")
(PUNCT "]")
(PUNCT "=")
(ID "PREFIX")
(NEWLINE)
(ID "_config_vars")
(PUNCT "[")
(LIT "exec_prefix")
(PUNCT "]")
(PUNCT "=")
(ID "EXEC_PREFIX")
(NEWLINE)
(ID "SO")
(PUNCT "=")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "EXT_SUFFIX")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "SO")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_config_vars")
(PUNCT "[")
(LIT "SO")
(PUNCT "]")
(PUNCT "=")
(ID "SO")
(NEWLINE)
(DEDENT)
(ID "srcdir")
(PUNCT "=")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "srcdir")
(PUNCT ",")
(ID "project_base")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "python_build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "srcdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "srcdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "srcdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_config_vars")
(PUNCT "[")
(LIT "srcdir")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "srcdir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "python_build")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "project_base")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isabs")
(PUNCT "(")
(ID "_config_vars")
(PUNCT "[")
(LIT "srcdir")
(PUNCT "]")
(PUNCT ")")
(KEYWORD and)
(ID "base")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "srcdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "_config_vars")
(PUNCT "[")
(LIT "srcdir")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_config_vars")
(PUNCT "[")
(LIT "srcdir")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "srcdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_osx_support")
(NEWLINE)
(ID "_osx_support")
(PUNCT ".")
(ID "customize_config_vars")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vals")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vals")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "vals")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_config_var")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of a single variable using the dictionary\n    returned by 'get_config_vars()'.  Equivalent to\n    get_config_vars().get(name)\n    ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "SO")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "SO is deprecated, use EXT_SUFFIX")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "get_config_vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
