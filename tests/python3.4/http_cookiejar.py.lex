(LIT "HTTP cookie handling for web clients.\n\nThis module has (now fairly distant) origins in Gisle Aas' Perl module\nHTTP::Cookies, from the libwww-perl library.\n\nDocstrings, comments and debug strings in this code refer to the\nattributes of the HTTP cookie system as cookie-attributes, to distinguish\nthem clearly from Python attributes.\n\nClass diagram (note that BSDDBCookieJar and the MSIE* classes are not\ndistributed with the Python standard library, but are available from\nhttp://wwwsearch.sf.net/):\n\n                        CookieJar____\n                        /     \\      \\\n            FileCookieJar      \\      \\\n             /    |   \\         \\      \\\n MozillaCookieJar | LWPCookieJar \\      \\\n                  |               |      \\\n                  |   ---MSIEBase |       \\\n                  |  /      |     |        \\\n                  | /   MSIEDBCookieJar BSDDBCookieJar\n                  |/\n               MSIECookieJar\n\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Cookie")
(PUNCT ",")
(LIT "CookieJar")
(PUNCT ",")
(LIT "CookiePolicy")
(PUNCT ",")
(LIT "DefaultCookiePolicy")
(PUNCT ",")
(LIT "FileCookieJar")
(PUNCT ",")
(LIT "LWPCookieJar")
(PUNCT ",")
(LIT "LoadError")
(PUNCT ",")
(LIT "MozillaCookieJar")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "copy")
(NEWLINE)
(KEYWORD import)
(ID "datetime")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ",")
(ID "urllib")
(PUNCT ".")
(ID "request")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(KEYWORD as)
(ID "_threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "dummy_threading")
(KEYWORD as)
(ID "_threading")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "client")
(NEWLINE)
(KEYWORD from)
(ID "calendar")
(KEYWORD import)
(ID "timegm")
(NEWLINE)
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "logger")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_debug")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD global)
(ID "logger")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "logger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(LIT "http.cookiejar")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "DEFAULT_HTTP_PORT")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTP_PORT")
(PUNCT ")")
(NEWLINE)
(ID "MISSING_FILENAME_TEXT")
(PUNCT "=")
(PUNCT "(")
(LIT "a filename was not supplied (nor was the CookieJar ")
(LIT "instance initialised with one)")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_warn_unhandled_exception")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "io")
(PUNCT ",")
(ID "warnings")
(PUNCT ",")
(ID "traceback")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "traceback")
(PUNCT ".")
(ID "print_exc")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "http.cookiejar bug!\n%s")
(PUNCT "%")
(ID "msg")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "EPOCH_YEAR")
(PUNCT "=")
(LIT 1970)
(NEWLINE)
(KEYWORD def)
(ID "_timegm")
(PUNCT "(")
(ID "tt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "mday")
(PUNCT ",")
(ID "hour")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT "=")
(ID "tt")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "year")
(PUNCT ">=")
(ID "EPOCH_YEAR")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 1)
(PUNCT "<=")
(ID "month")
(PUNCT "<=")
(LIT 12)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 1)
(PUNCT "<=")
(ID "mday")
(PUNCT "<=")
(LIT 31)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "hour")
(PUNCT "<=")
(LIT 24)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "min")
(PUNCT "<=")
(LIT 59)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "sec")
(PUNCT "<=")
(LIT 61)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "timegm")
(PUNCT "(")
(ID "tt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "DAYS")
(PUNCT "=")
(PUNCT "[")
(LIT "Mon")
(PUNCT ",")
(LIT "Tue")
(PUNCT ",")
(LIT "Wed")
(PUNCT ",")
(LIT "Thu")
(PUNCT ",")
(LIT "Fri")
(PUNCT ",")
(LIT "Sat")
(PUNCT ",")
(LIT "Sun")
(PUNCT "]")
(NEWLINE)
(ID "MONTHS")
(PUNCT "=")
(PUNCT "[")
(LIT "Jan")
(PUNCT ",")
(LIT "Feb")
(PUNCT ",")
(LIT "Mar")
(PUNCT ",")
(LIT "Apr")
(PUNCT ",")
(LIT "May")
(PUNCT ",")
(LIT "Jun")
(PUNCT ",")
(LIT "Jul")
(PUNCT ",")
(LIT "Aug")
(PUNCT ",")
(LIT "Sep")
(PUNCT ",")
(LIT "Oct")
(PUNCT ",")
(LIT "Nov")
(PUNCT ",")
(LIT "Dec")
(PUNCT "]")
(NEWLINE)
(ID "MONTHS_LOWER")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "month")
(KEYWORD in)
(ID "MONTHS")
(PUNCT ":")
(ID "MONTHS_LOWER")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "month")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "time2isoz")
(PUNCT "(")
(ID "t")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like \"YYYY-MM-DD hh:mm:ssZ\",\n    representing Universal Time (UTC, aka GMT).  An example of this format is:\n\n    1994-11-24 08:49:37Z\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "t")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "utcnow")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "utcfromtimestamp")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%04d-%02d-%02d %02d:%02d:%02dZ")
(PUNCT "%")
(PUNCT "(")
(ID "dt")
(PUNCT ".")
(ID "year")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "month")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "day")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "hour")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "minute")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "second")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "time2netscape")
(PUNCT "(")
(ID "t")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like this:\n\n    Wed, DD-Mon-YYYY HH:MM:SS GMT\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "t")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "utcnow")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "utcfromtimestamp")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s %02d-%s-%04d %02d:%02d:%02d GMT")
(PUNCT "%")
(PUNCT "(")
(ID "DAYS")
(PUNCT "[")
(ID "dt")
(PUNCT ".")
(ID "weekday")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "day")
(PUNCT ",")
(ID "MONTHS")
(PUNCT "[")
(ID "dt")
(PUNCT ".")
(ID "month")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "year")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "hour")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "minute")
(PUNCT ",")
(ID "dt")
(PUNCT ".")
(ID "second")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "UTC_ZONES")
(PUNCT "=")
(PUNCT "{")
(LIT "GMT")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "UTC")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "UT")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "Z")
(PUNCT ":")
(KEYWORD None)
(PUNCT "}")
(NEWLINE)
(ID "TIMEZONE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^([-+])?(\\d\\d?):?(\\d\\d)?$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "offset_from_tz_string")
(PUNCT "(")
(ID "tz")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "tz")
(KEYWORD in)
(ID "UTC_ZONES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "TIMEZONE_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "tz")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(LIT 3600)
(PUNCT "*")
(ID "int")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(ID "offset")
(PUNCT "+")
(LIT 60)
(PUNCT "*")
(ID "int")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(PUNCT "-")
(ID "offset")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "offset")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_str2time")
(PUNCT "(")
(ID "day")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "yr")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mon")
(PUNCT "=")
(ID "MONTHS_LOWER")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "mon")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "imon")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mon")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT 1)
(PUNCT "<=")
(ID "imon")
(PUNCT "<=")
(LIT 12)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mon")
(PUNCT "=")
(ID "imon")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "hr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "hr")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "min")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "min")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "sec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "sec")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "yr")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "yr")
(PUNCT ")")
(NEWLINE)
(ID "day")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "day")
(PUNCT ")")
(NEWLINE)
(ID "hr")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "hr")
(PUNCT ")")
(NEWLINE)
(ID "min")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "min")
(PUNCT ")")
(NEWLINE)
(ID "sec")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "sec")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "yr")
(PUNCT "<")
(LIT 1000)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cur_yr")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "cur_yr")
(PUNCT "%")
(LIT 100)
(NEWLINE)
(ID "tmp")
(PUNCT "=")
(ID "yr")
(NEWLINE)
(ID "yr")
(PUNCT "=")
(ID "yr")
(PUNCT "+")
(ID "cur_yr")
(PUNCT "-")
(ID "m")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "m")
(PUNCT "-")
(ID "tmp")
(NEWLINE)
(KEYWORD if)
(ID "abs")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(PUNCT ">")
(LIT 50)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "m")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(ID "yr")
(PUNCT "=")
(ID "yr")
(PUNCT "+")
(LIT 100)
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "yr")
(PUNCT "=")
(ID "yr")
(PUNCT "-")
(LIT 100)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "t")
(PUNCT "=")
(ID "_timegm")
(PUNCT "(")
(PUNCT "(")
(ID "yr")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "t")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tz")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tz")
(PUNCT "=")
(LIT "UTC")
(NEWLINE)
(DEDENT)
(ID "tz")
(PUNCT "=")
(ID "tz")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "offset")
(PUNCT "=")
(ID "offset_from_tz_string")
(PUNCT "(")
(ID "tz")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "offset")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT "=")
(ID "t")
(PUNCT "-")
(ID "offset")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(ID "STRICT_DATE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[SMTWF][a-z][a-z], (\\d\\d) ([JFMASOND][a-z][a-z]) ")
(LIT "(\\d\\d\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "WEEKDAY_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)[a-z]*,?\\s*")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "LOOSE_HTTP_DATE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\n    (\\d\\d?)            # day\n       (?:\\s+|[-\\/])\n    (\\w+)              # month\n        (?:\\s+|[-\\/])\n    (\\d+)              # year\n    (?:\n          (?:\\s+|:)    # separator before clock\n       (\\d\\d?):(\\d\\d)  # hour:min\n       (?::(\\d\\d))?    # optional seconds\n    )?                 # optional clock\n       \\s*\n    ([-+]?\\d{2,4}|(?![APap][Mm]\\b)[A-Za-z]+)? # timezone\n       \\s*\n    (?:\\(\\w+\\))?       # ASCII representation of timezone in parens.\n       \\s*$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "X")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "http2time")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns time in seconds since epoch of time represented by a string.\n\n    Return value is an integer.\n\n    None is returned if the format of str is unrecognized, the time is outside\n    the representable range, or the timezone string is not recognized.  If the\n    string contains no timezone, UTC is assumed.\n\n    The timezone in the string may be numerical (like \"-0800\" or \"+0100\") or a\n    string timezone (like \"UTC\", \"GMT\", \"BST\" or \"EST\").  Currently, only the\n    timezone strings equivalent to UTC (zero offset) are known to the function.\n\n    The function loosely parses the following formats:\n\n    Wed, 09 Feb 1994 22:23:32 GMT       -- HTTP format\n    Tuesday, 08-Feb-94 14:15:29 GMT     -- old rfc850 HTTP format\n    Tuesday, 08-Feb-1994 14:15:29 GMT   -- broken rfc850 HTTP format\n    09 Feb 1994 22:23:32 GMT            -- HTTP format (no weekday)\n    08-Feb-94 14:15:29 GMT              -- rfc850 format (no weekday)\n    08-Feb-1994 14:15:29 GMT            -- broken rfc850 format (no weekday)\n\n    The parser ignores leading and trailing whitespace.  The time may be\n    absent.\n\n    If the year is given with only 2 digits, the function will select the\n    century that makes the year closest to the current date.\n\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "STRICT_DATE_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mon")
(PUNCT "=")
(ID "MONTHS_LOWER")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "g")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "tt")
(PUNCT "=")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "g")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "g")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "g")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "g")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "float")
(PUNCT "(")
(ID "g")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_timegm")
(PUNCT "(")
(ID "tt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "WEEKDAY_RE")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "day")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "yr")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "*")
(LIT 7)
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "LOOSE_HTTP_DATE_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "day")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "yr")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_str2time")
(PUNCT "(")
(ID "day")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "yr")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ISO_DATE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\n    (\\d{4})              # year\n       [-\\/]?\n    (\\d\\d?)              # numerical month\n       [-\\/]?\n    (\\d\\d?)              # day\n   (?:\n         (?:\\s+|[-:Tt])  # separator before clock\n      (\\d\\d?):?(\\d\\d)    # hour:min\n      (?::?(\\d\\d(?:\\.\\d*)?))?  # optional seconds (and fractional)\n   )?                    # optional clock\n      \\s*\n   ([-+]?\\d\\d?:?(:?\\d\\d)?\n    |Z|z)?               # timezone  (Z is \"zero meridian\", i.e. GMT)\n      \\s*$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "X")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "iso2time")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    As for http2time, but parses the ISO 8601 formats:\n\n    1994-02-03 14:15:29 -0100    -- ISO 8601 format\n    1994-02-03 14:15:29          -- zone is optional\n    1994-02-03                   -- only date\n    1994-02-03T14:15:29          -- Use T as separator\n    19940203T141529Z             -- ISO 8601 compact format\n    19940203                     -- only date\n\n    ")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "day")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "yr")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "*")
(LIT 7)
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "ISO_DATE_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yr")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_str2time")
(PUNCT "(")
(ID "day")
(PUNCT ",")
(ID "mon")
(PUNCT ",")
(ID "yr")
(PUNCT ",")
(ID "hr")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "sec")
(PUNCT ",")
(ID "tz")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unmatched")
(PUNCT "(")
(ID "match")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return unmatched part of re.Match object.")
(NEWLINE)
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "span")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "match")
(PUNCT ".")
(ID "string")
(PUNCT "[")
(PUNCT ":")
(ID "start")
(PUNCT "]")
(PUNCT "+")
(ID "match")
(PUNCT ".")
(ID "string")
(PUNCT "[")
(ID "end")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "HEADER_TOKEN_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\s*([^=\\s;,]+)")
(PUNCT ")")
(NEWLINE)
(ID "HEADER_QUOTED_VALUE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\s*=\\s*\\\"([^\\\"\\\\]*(?:\\\\.[^\\\"\\\\]*)*)\\\"")
(PUNCT ")")
(NEWLINE)
(ID "HEADER_VALUE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\s*=\\s*([^\\s;,]*)")
(PUNCT ")")
(NEWLINE)
(ID "HEADER_ESCAPE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\\\(.)")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "split_header_words")
(PUNCT "(")
(ID "header_values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse header values into a list of lists containing key,value pairs.\n\n    The function knows how to deal with \",\", \";\" and \"=\" as well as quoted\n    values after \"=\".  A list of space separated tokens are parsed as if they\n    were separated by \";\".\n\n    If the header_values passed as argument contains multiple values, then they\n    are treated as if they were a single value separated by comma \",\".\n\n    This means that this function is useful for parsing header fields that\n    follow this syntax (BNF as from the HTTP/1.1 specification, but we relax\n    the requirement for tokens).\n\n      headers           = #header\n      header            = (token | parameter) *( [\";\"] (token | parameter))\n\n      token             = 1*<any CHAR except CTLs or separators>\n      separators        = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                        | \",\" | \";\" | \":\" | \"\\\" | <\">\n                        | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                        | \"{\" | \"}\" | SP | HT\n\n      quoted-string     = ( <\"> *(qdtext | quoted-pair ) <\"> )\n      qdtext            = <any TEXT except <\">>\n      quoted-pair       = \"\\\" CHAR\n\n      parameter         = attribute \"=\" value\n      attribute         = token\n      value             = token | quoted-string\n\n    Each header is represented by a list of key/value pairs.  The value for a\n    simple token (not part of a parameter) is None.  Syntactically incorrect\n    headers will not necessarily be parsed as you would want.\n\n    This is easier to describe with some examples:\n\n    >>> split_header_words(['foo=\"bar\"; port=\"80,81\"; discard, bar=baz'])\n    [[('foo', 'bar'), ('port', '80,81'), ('discard', None)], [('bar', 'baz')]]\n    >>> split_header_words(['text/html; charset=\"iso-8859-1\"'])\n    [[('text/html', None), ('charset', 'iso-8859-1')]]\n    >>> split_header_words([r'Basic realm=\"\\\"foo\\bar\\\"\"'])\n    [[('Basic', None), ('realm', '\"foobar\"')]]\n\n    ")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "header_values")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "text")
(KEYWORD in)
(ID "header_values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_text")
(PUNCT "=")
(ID "text")
(NEWLINE)
(ID "pairs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "text")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "HEADER_TOKEN_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "unmatched")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "HEADER_QUOTED_VALUE_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "unmatched")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "HEADER_ESCAPE_RE")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\1")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "HEADER_VALUE_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "unmatched")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "pairs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "text")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "pairs")
(PUNCT ":")
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "pairs")
(PUNCT ")")
(NEWLINE)
(ID "pairs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "non_junk")
(PUNCT ",")
(ID "nr_junk_chars")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "subn")
(PUNCT "(")
(LIT "^[=\\s;]*")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "nr_junk_chars")
(PUNCT ">")
(LIT 0)
(PUNCT ",")
(PUNCT "(")
(LIT "split_header_words bug: '%s', '%s', %s")
(PUNCT "%")
(PUNCT "(")
(ID "orig_text")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(ID "pairs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "non_junk")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "pairs")
(PUNCT ":")
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "pairs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "HEADER_JOIN_ESCAPE_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\\"\\\\])")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "join_header_words")
(PUNCT "(")
(ID "lists")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do the inverse (almost) of the conversion done by split_header_words.\n\n    Takes a list of lists of (key, value) pairs and produces a single header\n    value.  Attribute values are quoted if needed.\n\n    >>> join_header_words([[(\"text/plain\", None), (\"charset\", \"iso-8859/1\")]])\n    'text/plain; charset=\"iso-8859/1\"'\n    >>> join_header_words([[(\"text/plain\", None)], [(\"charset\", \"iso-8859/1\")]])\n    'text/plain, charset=\"iso-8859/1\"'\n\n    ")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "pairs")
(KEYWORD in)
(ID "lists")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attr")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "pairs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "^\\w+$")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "HEADER_JOIN_ESCAPE_RE")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\\\\\1")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(ID "v")
(PUNCT "=")
(LIT "\"%s\"")
(PUNCT "%")
(ID "v")
(NEWLINE)
(DEDENT)
(ID "k")
(PUNCT "=")
(LIT "%s=%s")
(PUNCT "%")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "attr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "attr")
(PUNCT ":")
(ID "headers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "; ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "strip_quotes")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "text")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "\"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "text")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "text")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_ns_headers")
(PUNCT "(")
(ID "ns_headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ad-hoc parser for Netscape protocol cookie-attributes.\n\n    The old Netscape cookie format for Set-Cookie can for instance contain\n    an unquoted \",\" in the expires field, so we have to use this ad-hoc\n    parser instead of split_header_words.\n\n    XXX This may not make the best possible effort to parse all the crap\n    that Netscape Cookie headers contain.  Ronald Tschalar's HTTPClient\n    parser is probably better, so could do worse than following that if\n    this ever gives any trouble.\n\n    Currently, this is also used for parsing RFC 2109 cookies.\n\n    ")
(NEWLINE)
(ID "known_attrs")
(PUNCT "=")
(PUNCT "(")
(LIT "expires")
(PUNCT ",")
(LIT "domain")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(LIT "secure")
(PUNCT ",")
(LIT "version")
(PUNCT ",")
(LIT "port")
(PUNCT ",")
(LIT "max-age")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "ns_header")
(KEYWORD in)
(ID "ns_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pairs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "version_set")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "ii")
(PUNCT ",")
(ID "param")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";\\s*")
(PUNCT ",")
(ID "ns_header")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(KEYWORD continue)
(NEWLINE)
(KEYWORD if)
(LIT "=")
(KEYWORD not)
(KEYWORD in)
(ID "param")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "param")
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\\s*=\\s*")
(PUNCT ",")
(ID "param")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "k")
(PUNCT "=")
(ID "k")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ii")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lc")
(PUNCT "=")
(ID "k")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lc")
(KEYWORD in)
(ID "known_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "lc")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(PUNCT "==")
(LIT "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "strip_quotes")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(ID "version_set")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(PUNCT "==")
(LIT "expires")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "http2time")
(PUNCT "(")
(ID "strip_quotes")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "pairs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pairs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "version_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pairs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "pairs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "IPV4_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\.\\d+$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "is_HDN")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if text is a host domain name.")
(NEWLINE)
(KEYWORD if)
(ID "IPV4_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "text")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "text")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(KEYWORD or)
(ID "text")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "domain_match")
(PUNCT "(")
(ID "A")
(PUNCT ",")
(ID "B")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if domain A domain-matches domain B, according to RFC 2965.\n\n    A and B may be host domain names or IP addresses.\n\n    RFC 2965, section 1:\n\n    Host names can be specified either as an IP address or a HDN string.\n    Sometimes we compare one host name with another.  (Such comparisons SHALL\n    be case-insensitive.)  Host A's name domain-matches host B's if\n\n         *  their host name strings string-compare equal; or\n\n         * A is a HDN string and has the form NB, where N is a non-empty\n            name string, B has the form .B', and B' is a HDN string.  (So,\n            x.y.com domain-matches .Y.com but not Y.com.)\n\n    Note that domain-match is not a commutative operation: a.b.c.com\n    domain-matches .c.com, but not the reverse.\n\n    ")
(NEWLINE)
(ID "A")
(PUNCT "=")
(ID "A")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "B")
(PUNCT "=")
(ID "B")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "A")
(PUNCT "==")
(ID "B")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_HDN")
(PUNCT "(")
(ID "A")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "A")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(ID "B")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(KEYWORD or)
(ID "i")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "B")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_HDN")
(PUNCT "(")
(ID "B")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "liberal_is_HDN")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if text is a sort-of-like a host domain name.\n\n    For accepting/blocking domains.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "IPV4_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "user_domain_match")
(PUNCT "(")
(ID "A")
(PUNCT ",")
(ID "B")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "For blocking/accepting domains.\n\n    A and B may be host domain names or IP addresses.\n\n    ")
(NEWLINE)
(ID "A")
(PUNCT "=")
(ID "A")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "B")
(PUNCT "=")
(ID "B")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "liberal_is_HDN")
(PUNCT "(")
(ID "A")
(PUNCT ")")
(KEYWORD and)
(ID "liberal_is_HDN")
(PUNCT "(")
(ID "B")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "A")
(PUNCT "==")
(ID "B")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "initial_dot")
(PUNCT "=")
(ID "B")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "initial_dot")
(KEYWORD and)
(ID "A")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "B")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "initial_dot")
(KEYWORD and)
(ID "A")
(PUNCT "==")
(ID "B")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "cut_port_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT ":\\d+$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    ")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "get_full_url")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "urlparse")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "get_header")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT "=")
(ID "cut_port_re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "host")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "eff_request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple (request-host, effective request-host name).\n\n    As defined by RFC 2965, except both are lowercased.\n\n    ")
(NEWLINE)
(ID "erhn")
(PUNCT "=")
(ID "req_host")
(PUNCT "=")
(ID "request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "req_host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(KEYWORD not)
(ID "IPV4_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "req_host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "erhn")
(PUNCT "=")
(ID "req_host")
(PUNCT "+")
(LIT ".local")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "req_host")
(PUNCT ",")
(ID "erhn")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "request_path")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Path component of request-URI, as defined by RFC 2965.")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "get_full_url")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "urlsplit")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "escape_path")
(PUNCT "(")
(ID "parts")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(LIT "/")
(PUNCT "+")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "request_port")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "host")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "int")
(PUNCT "(")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "nonnumeric port: '%s'")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "DEFAULT_HTTP_PORT")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "port")
(NEWLINE)
(DEDENT)
(ID "HTTP_PATH_SAFE")
(PUNCT "=")
(LIT "%/;:@&=+$,!~*'()")
(NEWLINE)
(ID "ESCAPED_CHAR_RE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "%([0-9a-fA-F][0-9a-fA-F])")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "uppercase_escaped_char")
(PUNCT "(")
(ID "match")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%%%s")
(PUNCT "%")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "escape_path")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Escape any invalid characters in HTTP URL, and uppercase all escapes.")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "quote")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "HTTP_PATH_SAFE")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "ESCAPED_CHAR_RE")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "uppercase_escaped_char")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reach")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return reach of host h, as defined by RFC 2965, section 1.\n\n    The reach R of a host name H is defined as follows:\n\n       *  If\n\n          -  H is the host domain name of a host; and,\n\n          -  H has the form A.B; and\n\n          -  A has no embedded (that is, interior) dots; and\n\n          -  B has at least one embedded dot, or B is the string \"local\".\n             then the reach of H is .B.\n\n       *  Otherwise, the reach of H is H.\n\n    >>> reach(\"www.acme.com\")\n    '.acme.com'\n    >>> reach(\"acme.com\")\n    'acme.com'\n    >>> reach(\"acme.local\")\n    '.local'\n\n    ")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "h")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "b")
(PUNCT "=")
(ID "h")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "b")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "is_HDN")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "i")
(PUNCT ">=")
(LIT 0)
(KEYWORD or)
(ID "b")
(PUNCT "==")
(LIT "local")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT ".")
(PUNCT "+")
(ID "b")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "h")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_third_party")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n\n    RFC 2965, section 3.3.6:\n\n        An unverifiable transaction is to a third-party host if its request-\n        host U does not domain-match the reach R of the request-host O in the\n        origin transaction.\n\n    ")
(NEWLINE)
(ID "req_host")
(PUNCT "=")
(ID "request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "domain_match")
(PUNCT "(")
(ID "req_host")
(PUNCT ",")
(ID "reach")
(PUNCT "(")
(ID "request")
(PUNCT ".")
(ID "origin_req_host")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Cookie")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "HTTP Cookie.\n\n    This class represents both Netscape and RFC 2965 cookies.\n\n    This is deliberately a very simple class.  It just holds attributes.  It's\n    possible to construct Cookie instances that don't comply with the cookie\n    standards.  CookieJar.make_cookies is the factory function for Cookie\n    objects -- it deals with cookie parsing, supplying defaults, and\n    normalising to the representation used in this class.  CookiePolicy is\n    responsible for checking them to see whether they should be accepted from\n    and returned to the server.\n\n    Note that the port may be present in the headers, but unspecified (\"Port\"\n    rather than\"Port=80\", for example); if this is the case, port is None.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "port_specified")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "domain_specified")
(PUNCT ",")
(ID "domain_initial_dot")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "path_specified")
(PUNCT ",")
(ID "secure")
(PUNCT ",")
(ID "expires")
(PUNCT ",")
(ID "discard")
(PUNCT ",")
(ID "comment")
(PUNCT ",")
(ID "comment_url")
(PUNCT ",")
(ID "rest")
(PUNCT ",")
(ID "rfc2109")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "version")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "version")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "expires")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "expires")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "expires")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "port")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "port_specified")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "if port is None, port_specified must be false")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(ID "version")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port_specified")
(PUNCT "=")
(ID "port_specified")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "domain")
(PUNCT "=")
(ID "domain")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "domain_specified")
(PUNCT "=")
(ID "domain_specified")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "domain_initial_dot")
(PUNCT "=")
(ID "domain_initial_dot")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT "=")
(ID "path")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "path_specified")
(PUNCT "=")
(ID "path_specified")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "secure")
(PUNCT "=")
(ID "secure")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "expires")
(PUNCT "=")
(ID "expires")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "discard")
(PUNCT "=")
(ID "discard")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "comment")
(PUNCT "=")
(ID "comment")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "comment_url")
(PUNCT "=")
(ID "comment_url")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rfc2109")
(PUNCT "=")
(ID "rfc2109")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rest")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_nonstandard_attr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_rest")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_nonstandard_attr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_rest")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_nonstandard_attr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_rest")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_expired")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "now")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "now")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expires")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "expires")
(PUNCT "<=")
(ID "now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "p")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "p")
(PUNCT "=")
(LIT ":")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "port")
(NEWLINE)
(ID "limit")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "domain")
(PUNCT "+")
(ID "p")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "path")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "namevalue")
(PUNCT "=")
(LIT "%s=%s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "namevalue")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "<Cookie %s for %s>")
(PUNCT "%")
(PUNCT "(")
(ID "namevalue")
(PUNCT ",")
(ID "limit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(LIT "value")
(PUNCT ",")
(LIT "port")
(PUNCT ",")
(LIT "port_specified")
(PUNCT ",")
(LIT "domain")
(PUNCT ",")
(LIT "domain_specified")
(PUNCT ",")
(LIT "domain_initial_dot")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(LIT "path_specified")
(PUNCT ",")
(LIT "secure")
(PUNCT ",")
(LIT "expires")
(PUNCT ",")
(LIT "discard")
(PUNCT ",")
(LIT "comment")
(PUNCT ",")
(LIT "comment_url")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attr")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "%s=%s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "rest=%s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_rest")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "rfc2109=%s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rfc2109")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "Cookie(%s)")
(PUNCT "%")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "CookiePolicy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Defines which cookies get accepted from and returned to server.\n\n    May also modify cookies, though this is probably a bad idea.\n\n    The subclass DefaultCookiePolicy defines the standard rules for Netscape\n    and RFC 2965 cookies -- override that if you want a customised policy.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "set_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if (and only if) cookie should be accepted from server.\n\n        Currently, pre-expired cookies never get this far -- the CookieJar\n        class deletes such cookies itself.\n\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if (and only if) cookie should be returned to server.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "domain_return_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return false if cookies should not be returned, given cookie domain.\n        ")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "path_return_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return false if cookies should not be returned, given cookie path.\n        ")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DefaultCookiePolicy")
(PUNCT "(")
(ID "CookiePolicy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Implements the standard rules for accepting and returning cookies.")
(NEWLINE)
(ID "DomainStrictNoDots")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "DomainStrictNonDomain")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "DomainRFC2965Match")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "DomainLiberal")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "DomainStrict")
(PUNCT "=")
(ID "DomainStrictNoDots")
(PUNCT "|")
(ID "DomainStrictNonDomain")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "blocked_domains")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "allowed_domains")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "netscape")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "rfc2965")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "rfc2109_as_netscape")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "hide_cookie2")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "strict_domain")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "strict_rfc2965_unverifiable")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "strict_ns_unverifiable")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "strict_ns_domain")
(PUNCT "=")
(ID "DomainLiberal")
(PUNCT ",")
(ID "strict_ns_set_initial_dollar")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "strict_ns_set_path")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructor arguments should be passed as keyword arguments only.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "netscape")
(PUNCT "=")
(ID "netscape")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rfc2965")
(PUNCT "=")
(ID "rfc2965")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rfc2109_as_netscape")
(PUNCT "=")
(ID "rfc2109_as_netscape")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "hide_cookie2")
(PUNCT "=")
(ID "hide_cookie2")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict_domain")
(PUNCT "=")
(ID "strict_domain")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict_rfc2965_unverifiable")
(PUNCT "=")
(ID "strict_rfc2965_unverifiable")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict_ns_unverifiable")
(PUNCT "=")
(ID "strict_ns_unverifiable")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict_ns_domain")
(PUNCT "=")
(ID "strict_ns_domain")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict_ns_set_initial_dollar")
(PUNCT "=")
(ID "strict_ns_set_initial_dollar")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict_ns_set_path")
(PUNCT "=")
(ID "strict_ns_set_path")
(NEWLINE)
(KEYWORD if)
(ID "blocked_domains")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_blocked_domains")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "blocked_domains")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_blocked_domains")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "allowed_domains")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "allowed_domains")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "allowed_domains")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_allowed_domains")
(PUNCT "=")
(ID "allowed_domains")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "blocked_domains")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the sequence of blocked domains (as a tuple).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_blocked_domains")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_blocked_domains")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "blocked_domains")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the sequence of blocked domains.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_blocked_domains")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "blocked_domains")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_blocked")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "blocked_domain")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_blocked_domains")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "user_domain_match")
(PUNCT "(")
(ID "domain")
(PUNCT ",")
(ID "blocked_domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "allowed_domains")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None, or the sequence of allowed domains (as a tuple).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_allowed_domains")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_allowed_domains")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allowed_domains")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the sequence of allowed domains, or None.")
(NEWLINE)
(KEYWORD if)
(ID "allowed_domains")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "allowed_domains")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "allowed_domains")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_allowed_domains")
(PUNCT "=")
(ID "allowed_domains")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_not_allowed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_allowed_domains")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "allowed_domain")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_allowed_domains")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "user_domain_match")
(PUNCT "(")
(ID "domain")
(PUNCT ",")
(ID "allowed_domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        If you override .set_ok(), be sure to call this method.  If it returns\n        false, so should your subclass (assuming your subclass wants to be more\n        strict about which cookies to accept).\n\n        ")
(NEWLINE)
(ID "_debug")
(PUNCT "(")
(LIT " - checking cookie %s=%s")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "cookie")
(PUNCT ".")
(ID "name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(LIT "version")
(PUNCT ",")
(LIT "verifiability")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(LIT "domain")
(PUNCT ",")
(LIT "port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn_name")
(PUNCT "=")
(LIT "set_ok_")
(PUNCT "+")
(ID "n")
(NEWLINE)
(ID "fn")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fn_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "fn")
(PUNCT "(")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok_version")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   Set-Cookie2 without version attribute (%s=%s)")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "rfc2965")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   RFC 2965 cookies are switched off")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "netscape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   Netscape cookies are switched off")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok_verifiability")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "request")
(PUNCT ".")
(ID "unverifiable")
(KEYWORD and)
(ID "is_third_party")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "strict_rfc2965_unverifiable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   third-party RFC 2965 cookie during ")
(LIT "unverifiable transaction")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "strict_ns_unverifiable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   third-party Netscape cookie during ")
(LIT "unverifiable transaction")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "strict_ns_set_initial_dollar")
(KEYWORD and)
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "$")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   illegal name (starts with '$'): '%s'")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "path_specified")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_path")
(PUNCT "=")
(ID "request_path")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD or)
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "strict_ns_set_path")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "req_path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   path attribute %s is not a prefix of request ")
(LIT "path %s")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "req_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok_domain")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_blocked")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   domain %s is in user block-list")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_not_allowed")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   domain %s is not in user allow-list")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "domain_specified")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_host")
(PUNCT ",")
(ID "erhn")
(PUNCT "=")
(ID "eff_request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(ID "domain")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "strict_domain")
(KEYWORD and)
(PUNCT "(")
(ID "domain")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "domain")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "j")
(PUNCT "=")
(ID "domain")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "j")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tld")
(PUNCT "=")
(ID "domain")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "sld")
(PUNCT "=")
(ID "domain")
(PUNCT "[")
(ID "j")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "sld")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT "co")
(PUNCT ",")
(LIT "ac")
(PUNCT ",")
(LIT "com")
(PUNCT ",")
(LIT "edu")
(PUNCT ",")
(LIT "org")
(PUNCT ",")
(LIT "net")
(PUNCT ",")
(LIT "gov")
(PUNCT ",")
(LIT "mil")
(PUNCT ",")
(LIT "int")
(PUNCT ",")
(LIT "aero")
(PUNCT ",")
(LIT "biz")
(PUNCT ",")
(LIT "cat")
(PUNCT ",")
(LIT "coop")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(LIT "jobs")
(PUNCT ",")
(LIT "mobi")
(PUNCT ",")
(LIT "museum")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(LIT "pro")
(PUNCT ",")
(LIT "travel")
(PUNCT ",")
(LIT "eu")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "tld")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   country-code second level domain %s")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "undotted_domain")
(PUNCT "=")
(ID "domain")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "undotted_domain")
(PUNCT "=")
(ID "domain")
(NEWLINE)
(DEDENT)
(ID "embedded_dots")
(PUNCT "=")
(PUNCT "(")
(ID "undotted_domain")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ">=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "embedded_dots")
(KEYWORD and)
(ID "domain")
(PUNCT "!=")
(LIT ".local")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   non-local domain %s contains no embedded dot")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "erhn")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(KEYWORD not)
(ID "erhn")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(PUNCT "(")
(LIT ".")
(PUNCT "+")
(ID "erhn")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   effective request-host %s (even with added ")
(LIT "initial dot) does not end with %s")
(PUNCT ",")
(ID "erhn")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD or)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "strict_ns_domain")
(PUNCT "&")
(ID "self")
(PUNCT ".")
(ID "DomainRFC2965Match")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "domain_match")
(PUNCT "(")
(ID "erhn")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   effective request-host %s does not domain-match ")
(LIT "%s")
(PUNCT ",")
(ID "erhn")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD or)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "strict_ns_domain")
(PUNCT "&")
(ID "self")
(PUNCT ".")
(ID "DomainStrictNoDots")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host_prefix")
(PUNCT "=")
(ID "req_host")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "host_prefix")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ">=")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "IPV4_RE")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "req_host")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   host prefix %s for domain %s contains a dot")
(PUNCT ",")
(ID "host_prefix")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_ok_port")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "port_specified")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_port")
(PUNCT "=")
(ID "request_port")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "req_port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_port")
(PUNCT "=")
(LIT "80")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_port")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "req_port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "int")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   bad port %s (not numeric)")
(PUNCT ",")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "p")
(PUNCT "==")
(ID "req_port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   request port (%s) not found in %s")
(PUNCT ",")
(ID "req_port")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        If you override .return_ok(), be sure to call this method.  If it\n        returns false, so should your subclass (assuming your subclass wants to\n        be more strict about which cookies to return).\n\n        ")
(NEWLINE)
(ID "_debug")
(PUNCT "(")
(LIT " - checking cookie %s=%s")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(LIT "version")
(PUNCT ",")
(LIT "verifiability")
(PUNCT ",")
(LIT "secure")
(PUNCT ",")
(LIT "expires")
(PUNCT ",")
(LIT "port")
(PUNCT ",")
(LIT "domain")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn_name")
(PUNCT "=")
(LIT "return_ok_")
(PUNCT "+")
(ID "n")
(NEWLINE)
(ID "fn")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fn_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "fn")
(PUNCT "(")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok_version")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "rfc2965")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   RFC 2965 cookies are switched off")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "netscape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   Netscape cookies are switched off")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok_verifiability")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "request")
(PUNCT ".")
(ID "unverifiable")
(KEYWORD and)
(ID "is_third_party")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "strict_rfc2965_unverifiable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   third-party RFC 2965 cookie during unverifiable ")
(LIT "transaction")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "strict_ns_unverifiable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   third-party Netscape cookie during unverifiable ")
(LIT "transaction")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok_secure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "secure")
(KEYWORD and)
(ID "request")
(PUNCT ".")
(ID "type")
(PUNCT "!=")
(LIT "https")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   secure cookie with non-secure request")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok_expires")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "is_expired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   cookie expired")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok_port")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_port")
(PUNCT "=")
(ID "request_port")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "req_port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_port")
(PUNCT "=")
(LIT "80")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p")
(PUNCT "==")
(ID "req_port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   request port %s does not match cookie port %s")
(PUNCT ",")
(ID "req_port")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "return_ok_domain")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_host")
(PUNCT ",")
(ID "erhn")
(PUNCT "=")
(ID "eff_request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(ID "domain")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "strict_ns_domain")
(PUNCT "&")
(ID "self")
(PUNCT ".")
(ID "DomainStrictNonDomain")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "cookie")
(PUNCT ".")
(ID "domain_specified")
(KEYWORD and)
(ID "domain")
(PUNCT "!=")
(ID "erhn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   cookie with unspecified domain does not string-compare ")
(LIT "equal to request domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "domain_match")
(PUNCT "(")
(ID "erhn")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   effective request-host name %s does not domain-match ")
(LIT "RFC 2965 cookie domain %s")
(PUNCT ",")
(ID "erhn")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(PUNCT "(")
(LIT ".")
(PUNCT "+")
(ID "erhn")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   request-host %s does not match Netscape cookie domain ")
(LIT "%s")
(PUNCT ",")
(ID "req_host")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "domain_return_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_host")
(PUNCT ",")
(ID "erhn")
(PUNCT "=")
(ID "eff_request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "req_host")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_host")
(PUNCT "=")
(LIT ".")
(PUNCT "+")
(ID "req_host")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "erhn")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "erhn")
(PUNCT "=")
(LIT ".")
(PUNCT "+")
(ID "erhn")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "req_host")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(KEYWORD or)
(ID "erhn")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_blocked")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   domain %s is in user block-list")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_not_allowed")
(PUNCT "(")
(ID "domain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   domain %s is not in user allow-list")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "path_return_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "- checking cookie path=%s")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "req_path")
(PUNCT "=")
(ID "request_path")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "req_path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "  %s does not path-match %s")
(PUNCT ",")
(ID "req_path")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "vals_sorted_by_key")
(PUNCT "(")
(ID "adict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keys")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "adict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "map")
(PUNCT "(")
(ID "adict")
(PUNCT ".")
(ID "get")
(PUNCT ",")
(ID "keys")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "deepvalues")
(PUNCT "(")
(ID "mapping")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterates over nested mapping, depth-first, in sorted order by key.")
(NEWLINE)
(ID "values")
(PUNCT "=")
(ID "vals_sorted_by_key")
(PUNCT "(")
(ID "mapping")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mapping")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT ".")
(ID "items")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mapping")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD yield)
(KEYWORD from)
(ID "deepvalues")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "mapping")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "obj")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Absent")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "CookieJar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Collection of HTTP cookies.\n\n    You may not need to know about this class: try\n    urllib.request.build_opener(HTTPCookieProcessor).open(url).\n    ")
(NEWLINE)
(ID "non_word_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\W")
(PUNCT ")")
(NEWLINE)
(ID "quote_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\\"\\\\])")
(PUNCT ")")
(NEWLINE)
(ID "strict_domain_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\.?[^.]*")
(PUNCT ")")
(NEWLINE)
(ID "domain_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[^.]*")
(PUNCT ")")
(NEWLINE)
(ID "dots_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\.+")
(PUNCT ")")
(NEWLINE)
(ID "magic_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\#LWP-Cookies-(\\d+\\.\\d+)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "policy")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "policy")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "policy")
(PUNCT "=")
(ID "DefaultCookiePolicy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT "=")
(ID "policy")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT "=")
(ID "_threading")
(PUNCT ".")
(ID "RLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_policy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT "=")
(ID "policy")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cookies_for_domain")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookies")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "domain_return_ok")
(PUNCT "(")
(ID "domain")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_debug")
(PUNCT "(")
(LIT "Checking %s for cookies to return")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(ID "cookies_by_path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "[")
(ID "domain")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "path")
(KEYWORD in)
(ID "cookies_by_path")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "path_return_ok")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "cookies_by_name")
(PUNCT "=")
(ID "cookies_by_path")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "cookies_by_name")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "return_ok")
(PUNCT "(")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   not returning cookie")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   it's a match")
(PUNCT ")")
(NEWLINE)
(ID "cookies")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cookies")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cookies_for_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of cookies to be returned to server.")
(NEWLINE)
(ID "cookies")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "domain")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookies")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_cookies_for_domain")
(PUNCT "(")
(ID "domain")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cookies")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cookie_attrs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookies")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of cookie-attributes to be returned to server.\n\n        like ['foo=\"bar\"; $Path=\"/\"', ...]\n\n        The $Version attribute is also added when appropriate (currently only\n        once per request).\n\n        ")
(NEWLINE)
(ID "cookies")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "a")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "a")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT ",")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "version_set")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "attrs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "cookies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "version")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "version_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version_set")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "version")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "$Version=%s")
(PUNCT "%")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "non_word_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(KEYWORD and)
(ID "version")
(PUNCT ">")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "quote_re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\\\\\1")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "%s=%s")
(PUNCT "%")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "version")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "path_specified")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "$Path=\"%s\"")
(PUNCT "%")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "cookie")
(PUNCT ".")
(ID "domain_initial_dot")
(KEYWORD and)
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT "=")
(ID "domain")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "attrs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "$Domain=\"%s\"")
(PUNCT "%")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "port")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(LIT "$Port")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "port_specified")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "p")
(PUNCT "+")
(PUNCT "(")
(LIT "=\"%s\"")
(PUNCT "%")
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "attrs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "attrs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_cookie_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add correct Cookie: header to request (urllib.request.Request object).\n\n        The Cookie2 header is also added unless policy.hide_cookie2 is true.\n\n        ")
(NEWLINE)
(ID "_debug")
(PUNCT "(")
(LIT "add_cookie_header")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "_now")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_now")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "cookies")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookies_for_request")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(ID "attrs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookie_attrs")
(PUNCT "(")
(ID "cookies")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "request")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(LIT "Cookie")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(LIT "Cookie")
(PUNCT ",")
(LIT "; ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "attrs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "rfc2965")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "hide_cookie2")
(KEYWORD and)
(KEYWORD not)
(ID "request")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(LIT "Cookie2")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "cookies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "!=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(LIT "Cookie2")
(PUNCT ",")
(LIT "$Version=\"1\"")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "clear_expired_cookies")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_normalized_cookie_tuples")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs_set")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of tuples containing normalised cookie information.\n\n        attrs_set is the list of lists of key,value pairs extracted from\n        the Set-Cookie or Set-Cookie2 headers.\n\n        Tuples are name, value, standard, rest, where name and value are the\n        cookie name and value, standard is a dictionary containing the standard\n        cookie-attributes (discard, secure, version, expires or max-age,\n        domain, path and port) and rest is a dictionary containing the rest of\n        the cookie-attributes.\n\n        ")
(NEWLINE)
(ID "cookie_tuples")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "boolean_attrs")
(PUNCT "=")
(LIT "discard")
(PUNCT ",")
(LIT "secure")
(NEWLINE)
(ID "value_attrs")
(PUNCT "=")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(LIT "expires")
(PUNCT ",")
(LIT "max-age")
(PUNCT ",")
(LIT "domain")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(LIT "port")
(PUNCT ",")
(LIT "comment")
(PUNCT ",")
(LIT "commenturl")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cookie_attrs")
(KEYWORD in)
(ID "attrs_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "cookie_attrs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "max_age_set")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "bad_cookie")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "standard")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "rest")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "cookie_attrs")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lc")
(PUNCT "=")
(ID "k")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lc")
(KEYWORD in)
(ID "value_attrs")
(KEYWORD or)
(ID "lc")
(KEYWORD in)
(ID "boolean_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "lc")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(KEYWORD in)
(ID "boolean_attrs")
(KEYWORD and)
(ID "v")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(KEYWORD in)
(ID "standard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(PUNCT "==")
(LIT "domain")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   missing value for domain attribute")
(PUNCT ")")
(NEWLINE)
(ID "bad_cookie")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "v")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(PUNCT "==")
(LIT "expires")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "max_age_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "v")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   missing or invalid value for expires ")
(LIT "attribute: treating as session cookie")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "k")
(PUNCT "==")
(LIT "max-age")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_age_set")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   missing or invalid (non-numeric) value for ")
(LIT "max-age attribute")
(PUNCT ")")
(NEWLINE)
(ID "bad_cookie")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "k")
(PUNCT "=")
(LIT "expires")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_now")
(PUNCT "+")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "k")
(KEYWORD in)
(ID "value_attrs")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "k")
(KEYWORD in)
(ID "boolean_attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "v")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "k")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "port")
(PUNCT ",")
(LIT "comment")
(PUNCT ",")
(LIT "commenturl")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT "   missing value for %s attribute")
(PUNCT "%")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "bad_cookie")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "standard")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "bad_cookie")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "cookie_tuples")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "standard")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cookie_tuples")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cookie_from_cookie_tuple")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tup")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "standard")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "tup")
(NEWLINE)
(ID "domain")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "domain")
(PUNCT ",")
(ID "Absent")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "path")
(PUNCT ",")
(ID "Absent")
(PUNCT ")")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "port")
(PUNCT ",")
(ID "Absent")
(PUNCT ")")
(NEWLINE)
(ID "expires")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "expires")
(PUNCT ",")
(ID "Absent")
(PUNCT ")")
(NEWLINE)
(ID "version")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "version")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "secure")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "secure")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "discard")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "discard")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "comment")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "comment")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "comment_url")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "commenturl")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(ID "Absent")
(KEYWORD and)
(ID "path")
(PUNCT "!=")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path_specified")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "escape_path")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path_specified")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "request_path")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "version")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(ID "path")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "domain_specified")
(PUNCT "=")
(ID "domain")
(KEYWORD is)
(KEYWORD not)
(ID "Absent")
(NEWLINE)
(ID "domain_initial_dot")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "domain_specified")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain_initial_dot")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "domain")
(KEYWORD is)
(ID "Absent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req_host")
(PUNCT ",")
(ID "erhn")
(PUNCT "=")
(ID "eff_request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(ID "domain")
(PUNCT "=")
(ID "erhn")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT "=")
(LIT ".")
(PUNCT "+")
(ID "domain")
(NEWLINE)
(DEDENT)
(ID "port_specified")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "port")
(KEYWORD is)
(KEYWORD not)
(ID "Absent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "request_port")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port_specified")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\s+")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "expires")
(KEYWORD is)
(ID "Absent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expires")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "discard")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "expires")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "_now")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(ID "domain")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "_debug")
(PUNCT "(")
(LIT "Expiring cookie, domain='%s', path='%s', name='%s'")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Cookie")
(PUNCT "(")
(ID "version")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "port_specified")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "domain_specified")
(PUNCT ",")
(ID "domain_initial_dot")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "path_specified")
(PUNCT ",")
(ID "secure")
(PUNCT ",")
(ID "expires")
(PUNCT ",")
(ID "discard")
(PUNCT ",")
(ID "comment")
(PUNCT ",")
(ID "comment_url")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cookies_from_attrs_set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs_set")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookie_tuples")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_normalized_cookie_tuples")
(PUNCT "(")
(ID "attrs_set")
(PUNCT ")")
(NEWLINE)
(ID "cookies")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "tup")
(KEYWORD in)
(ID "cookie_tuples")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookie")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookie_from_cookie_tuple")
(PUNCT "(")
(ID "tup")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ":")
(ID "cookies")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cookies")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_rfc2109_cookies")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookies")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rfc2109_as_ns")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ",")
(LIT "rfc2109_as_netscape")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rfc2109_as_ns")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rfc2109_as_ns")
(PUNCT "=")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "rfc2965")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "cookies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookie")
(PUNCT ".")
(ID "rfc2109")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "rfc2109_as_ns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "make_cookies")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "response")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return sequence of Cookie objects extracted from response object.")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "response")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "rfc2965_hdrs")
(PUNCT "=")
(ID "headers")
(PUNCT ".")
(ID "get_all")
(PUNCT "(")
(LIT "Set-Cookie2")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "ns_hdrs")
(PUNCT "=")
(ID "headers")
(PUNCT ".")
(ID "get_all")
(PUNCT "(")
(LIT "Set-Cookie")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "rfc2965")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "rfc2965")
(NEWLINE)
(ID "netscape")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "netscape")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(KEYWORD not)
(ID "rfc2965_hdrs")
(KEYWORD and)
(KEYWORD not)
(ID "ns_hdrs")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "ns_hdrs")
(KEYWORD and)
(KEYWORD not)
(ID "rfc2965")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "rfc2965_hdrs")
(KEYWORD and)
(KEYWORD not)
(ID "netscape")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "netscape")
(KEYWORD and)
(KEYWORD not)
(ID "rfc2965")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookies")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookies_from_attrs_set")
(PUNCT "(")
(ID "split_header_words")
(PUNCT "(")
(ID "rfc2965_hdrs")
(PUNCT ")")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn_unhandled_exception")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cookies")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns_hdrs")
(KEYWORD and)
(ID "netscape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns_cookies")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookies_from_attrs_set")
(PUNCT "(")
(ID "parse_ns_headers")
(PUNCT "(")
(ID "ns_hdrs")
(PUNCT ")")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn_unhandled_exception")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ns_cookies")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_process_rfc2109_cookies")
(PUNCT "(")
(ID "ns_cookies")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rfc2965")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lookup")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "cookies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lookup")
(PUNCT "[")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "no_matching_rfc2965")
(PUNCT "(")
(ID "ns_cookie")
(PUNCT ",")
(ID "lookup")
(PUNCT "=")
(ID "lookup")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "ns_cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ",")
(ID "ns_cookie")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "ns_cookie")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD return)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "lookup")
(NEWLINE)
(DEDENT)
(ID "ns_cookies")
(PUNCT "=")
(ID "filter")
(PUNCT "(")
(ID "no_matching_rfc2965")
(PUNCT ",")
(ID "ns_cookies")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns_cookies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookies")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "ns_cookies")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cookies")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_cookie_if_ok")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set a cookie if policy says it's OK to do so.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "_now")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_now")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "set_ok")
(PUNCT "(")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_cookie")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_cookie")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookie")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set a cookie, without checking whether or not it should be set.")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cookies")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "domain")
(KEYWORD not)
(KEYWORD in)
(ID "c")
(PUNCT ":")
(ID "c")
(PUNCT "[")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT "]")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "c2")
(PUNCT "=")
(ID "c")
(PUNCT "[")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "path")
(KEYWORD not)
(KEYWORD in)
(ID "c2")
(PUNCT ":")
(ID "c2")
(PUNCT "[")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT "]")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "c3")
(PUNCT "=")
(ID "c2")
(PUNCT "[")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT "]")
(NEWLINE)
(ID "c3")
(PUNCT "[")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "cookie")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "extract_cookies")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "response")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract cookies from response, where allowable given the request.")
(NEWLINE)
(ID "_debug")
(PUNCT "(")
(LIT "extract_cookies: %s")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "_now")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_now")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "make_cookies")
(PUNCT "(")
(ID "response")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_policy")
(PUNCT ".")
(ID "set_ok")
(PUNCT "(")
(ID "cookie")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_debug")
(PUNCT "(")
(LIT " setting cookie: %s")
(PUNCT ",")
(ID "cookie")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_cookie")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "domain")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear some cookies.\n\n        Invoking this method without arguments will clear all cookies.  If\n        given a single argument, only cookies belonging to that domain will be\n        removed.  If given two arguments, cookies belonging to the specified\n        path within that domain are removed.  If given three arguments, then\n        the cookie with the specified name, path and domain is removed.\n\n        Raises KeyError if no matching cookie exists.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "domain")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "path")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "domain and path must be given to remove a cookie by name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "[")
(ID "domain")
(PUNCT "]")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "domain")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "domain must be given to remove cookies by path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "[")
(ID "domain")
(PUNCT "]")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "domain")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "[")
(ID "domain")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear_session_cookies")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Discard all session cookies.\n\n        Note that the .save() method won't save session cookies anyway, unless\n        you ask otherwise by passing a true ignore_discard argument.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "discard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear_expired_cookies")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Discard all expired cookies.\n\n        You probably don't need to call this method: expired cookies are never\n        sent back to the server (provided you're using DefaultCookiePolicy),\n        this method is called by CookieJar itself every so often, and the\n        .save() method won't save expired cookies anyway (unless you ask\n        otherwise by passing a true ignore_expires argument).\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "is_expired")
(PUNCT "(")
(ID "now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "deepvalues")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return number of contained cookies.")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "i")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "<%s[%s]>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "r")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "<%s[%s]>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "r")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LoadError")
(PUNCT "(")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "FileCookieJar")
(PUNCT "(")
(ID "CookieJar")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "CookieJar that can be loaded from and saved to a file.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delayload")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "policy")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Cookies are NOT loaded from the named file until either the .load() or\n        .revert() method is called.\n\n        ")
(NEWLINE)
(ID "CookieJar")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "+")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "filename must be string-like")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "delayload")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "delayload")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "save")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ignore_discard")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ignore_expires")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Save cookies to a file.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ignore_discard")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ignore_expires")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load cookies from a file.")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "MISSING_FILENAME_TEXT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_really_load")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "ignore_discard")
(PUNCT ",")
(ID "ignore_expires")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "revert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ignore_discard")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ignore_expires")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear all cookies and reload cookies from a saved file.\n\n        Raises LoadError (or OSError) if reversion is not successful; the\n        object's state will not be altered if this happens.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "MISSING_FILENAME_TEXT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "old_state")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "deepcopy")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "ignore_discard")
(PUNCT ",")
(ID "ignore_expires")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies")
(PUNCT "=")
(ID "old_state")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cookies_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "lwp_cookie_str")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return string representation of Cookie in the LWP cookie file format.\n\n    Actually, the format is extended a bit -- see module docstring.\n\n    ")
(NEWLINE)
(ID "h")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "path")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "domain")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "port")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "port")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "path_specified")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "path_spec")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "port_specified")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "port_spec")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "domain_initial_dot")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "domain_dot")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "secure")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "secure")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "expires")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "expires")
(PUNCT ",")
(ID "time2isoz")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "expires")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "discard")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "discard")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "comment")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "comment")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "comment")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "comment_url")
(PUNCT ":")
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "commenturl")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "comment_url")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "keys")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "_rest")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "_rest")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "version")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "join_header_words")
(PUNCT "(")
(PUNCT "[")
(ID "h")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "LWPCookieJar")
(PUNCT "(")
(ID "FileCookieJar")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The LWPCookieJar saves a sequence of \"Set-Cookie3\" lines.\n    \"Set-Cookie3\" is the format used by the libwww-perl libary, not known\n    to be compatible with any browser, but which is easy to read and\n    doesn't lose information about RFC 2965 cookies.\n\n    Additional methods\n\n    as_lwp_str(ignore_discard=True, ignore_expired=True)\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "as_lwp_str")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ignore_discard")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "ignore_expires")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return cookies as a string of \"\\n\"-separated \"Set-Cookie3\" headers.\n\n        ignore_discard and ignore_expires: see docstring for FileCookieJar.save\n\n        ")
(NEWLINE)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_discard")
(KEYWORD and)
(ID "cookie")
(PUNCT ".")
(ID "discard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_expires")
(KEYWORD and)
(ID "cookie")
(PUNCT ".")
(ID "is_expired")
(PUNCT "(")
(ID "now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "Set-Cookie3: %s")
(PUNCT "%")
(ID "lwp_cookie_str")
(PUNCT "(")
(ID "cookie")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "r")
(PUNCT "+")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "save")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ignore_discard")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ignore_expires")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "MISSING_FILENAME_TEXT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "#LWP-Cookies-2.0\n")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "as_lwp_str")
(PUNCT "(")
(ID "ignore_discard")
(PUNCT ",")
(ID "ignore_expires")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_really_load")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "ignore_discard")
(PUNCT ",")
(ID "ignore_expires")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "magic")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "magic_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "magic")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "%r does not look like a Set-Cookie3 (LWP) format ")
(LIT "file")
(PUNCT "%")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "LoadError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "header")
(PUNCT "=")
(LIT "Set-Cookie3:")
(NEWLINE)
(ID "boolean_attrs")
(PUNCT "=")
(PUNCT "(")
(LIT "port_spec")
(PUNCT ",")
(LIT "path_spec")
(PUNCT ",")
(LIT "domain_dot")
(PUNCT ",")
(LIT "secure")
(PUNCT ",")
(LIT "discard")
(PUNCT ")")
(NEWLINE)
(ID "value_attrs")
(PUNCT "=")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(LIT "port")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(LIT "domain")
(PUNCT ",")
(LIT "expires")
(PUNCT ",")
(LIT "comment")
(PUNCT ",")
(LIT "commenturl")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "data")
(KEYWORD in)
(ID "split_header_words")
(PUNCT "(")
(PUNCT "[")
(ID "line")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "standard")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "rest")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "boolean_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standard")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "data")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "k")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lc")
(PUNCT "=")
(ID "k")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "lc")
(KEYWORD in)
(ID "value_attrs")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "lc")
(KEYWORD in)
(ID "boolean_attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "lc")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(KEYWORD in)
(ID "boolean_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "v")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "standard")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "k")
(KEYWORD in)
(ID "value_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "standard")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "h")
(PUNCT "=")
(ID "standard")
(PUNCT ".")
(ID "get")
(NEWLINE)
(ID "expires")
(PUNCT "=")
(ID "h")
(PUNCT "(")
(LIT "expires")
(PUNCT ")")
(NEWLINE)
(ID "discard")
(PUNCT "=")
(ID "h")
(PUNCT "(")
(LIT "discard")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "expires")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expires")
(PUNCT "=")
(ID "iso2time")
(PUNCT "(")
(ID "expires")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "expires")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "discard")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "domain")
(PUNCT "=")
(ID "h")
(PUNCT "(")
(LIT "domain")
(PUNCT ")")
(NEWLINE)
(ID "domain_specified")
(PUNCT "=")
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "Cookie")
(PUNCT "(")
(ID "h")
(PUNCT "(")
(LIT "version")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "port")
(PUNCT ")")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "port_spec")
(PUNCT ")")
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "domain_specified")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "domain_dot")
(PUNCT ")")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "path")
(PUNCT ")")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "path_spec")
(PUNCT ")")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "secure")
(PUNCT ")")
(PUNCT ",")
(ID "expires")
(PUNCT ",")
(ID "discard")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "comment")
(PUNCT ")")
(PUNCT ",")
(ID "h")
(PUNCT "(")
(LIT "commenturl")
(PUNCT ")")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_discard")
(KEYWORD and)
(ID "c")
(PUNCT ".")
(ID "discard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_expires")
(KEYWORD and)
(ID "c")
(PUNCT ".")
(ID "is_expired")
(PUNCT "(")
(ID "now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_cookie")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn_unhandled_exception")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "LoadError")
(PUNCT "(")
(LIT "invalid Set-Cookie3 format file %r: %r")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MozillaCookieJar")
(PUNCT "(")
(ID "FileCookieJar")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n\n    WARNING: you may want to backup your browser's cookies file if you use\n    this class to save cookies.  I *think* it works, but there have been\n    bugs in the past!\n\n    This class differs from CookieJar only in the format it uses to save and\n    load cookies to and from a file.  This class uses the Mozilla/Netscape\n    `cookies.txt' format.  lynx uses this file format, too.\n\n    Don't expect cookies saved while the browser is running to be noticed by\n    the browser (in fact, Mozilla on unix will overwrite your saved cookies if\n    you change them on disk while it's running; on Windows, you probably can't\n    save at all while the browser is running).\n\n    Note that the Mozilla/Netscape format will downgrade RFC2965 cookies to\n    Netscape cookies on saving.\n\n    In particular, the cookie version and port number information is lost,\n    together with information about whether or not Path, Port and Discard were\n    specified by the Set-Cookie2 (or Set-Cookie) header, and whether or not the\n    domain as set in the HTTP header started with a dot (yes, I'm aware some\n    domains in Netscape files start with a dot and some don't -- trust me, you\n    really don't want to know any more about this).\n\n    Note that though Mozilla and Netscape use the same format, they use\n    slightly different headers.  The class saves cookies using the Netscape\n    header by default (Mozilla can cope with that).\n\n    ")
(NEWLINE)
(ID "magic_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "#( Netscape)? HTTP Cookie File")
(PUNCT ")")
(NEWLINE)
(ID "header")
(PUNCT "=")
(LIT "# Netscape HTTP Cookie File\n# http://curl.haxx.se/rfc/cookie_spec.html\n# This is a generated file!  Do not edit.\n\n")
(NEWLINE)
(KEYWORD def)
(ID "_really_load")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "ignore_discard")
(PUNCT ",")
(ID "ignore_expires")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "magic")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "magic_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "magic")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "LoadError")
(PUNCT "(")
(LIT "%r does not look like a Netscape format cookies file")
(PUNCT "%")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ":")
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(PUNCT "(")
(LIT "#")
(PUNCT ",")
(LIT "$")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "domain")
(PUNCT ",")
(ID "domain_specified")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "secure")
(PUNCT ",")
(ID "expires")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\t")
(PUNCT ")")
(NEWLINE)
(ID "secure")
(PUNCT "=")
(PUNCT "(")
(ID "secure")
(PUNCT "==")
(LIT "TRUE")
(PUNCT ")")
(NEWLINE)
(ID "domain_specified")
(PUNCT "=")
(PUNCT "(")
(ID "domain_specified")
(PUNCT "==")
(LIT "TRUE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "value")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "initial_dot")
(PUNCT "=")
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "domain_specified")
(PUNCT "==")
(ID "initial_dot")
(NEWLINE)
(ID "discard")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "expires")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expires")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "discard")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "c")
(PUNCT "=")
(ID "Cookie")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "domain")
(PUNCT ",")
(ID "domain_specified")
(PUNCT ",")
(ID "initial_dot")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "secure")
(PUNCT ",")
(ID "expires")
(PUNCT ",")
(ID "discard")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_discard")
(KEYWORD and)
(ID "c")
(PUNCT ".")
(ID "discard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_expires")
(KEYWORD and)
(ID "c")
(PUNCT ".")
(ID "is_expired")
(PUNCT "(")
(ID "now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_cookie")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn_unhandled_exception")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "LoadError")
(PUNCT "(")
(LIT "invalid Netscape format cookies file %r: %r")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "save")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ignore_discard")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ignore_expires")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "MISSING_FILENAME_TEXT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "header")
(PUNCT ")")
(NEWLINE)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cookie")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_discard")
(KEYWORD and)
(ID "cookie")
(PUNCT ".")
(ID "discard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore_expires")
(KEYWORD and)
(ID "cookie")
(PUNCT ".")
(ID "is_expired")
(PUNCT "(")
(ID "now")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "secure")
(PUNCT ":")
(ID "secure")
(PUNCT "=")
(LIT "TRUE")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "secure")
(PUNCT "=")
(LIT "FALSE")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(ID "initial_dot")
(PUNCT "=")
(LIT "TRUE")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "initial_dot")
(PUNCT "=")
(LIT "FALSE")
(NEWLINE)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "expires")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expires")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "cookie")
(PUNCT ".")
(ID "expires")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expires")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cookie")
(PUNCT ".")
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "name")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "cookie")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\t")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "cookie")
(PUNCT ".")
(ID "domain")
(PUNCT ",")
(ID "initial_dot")
(PUNCT ",")
(ID "cookie")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "secure")
(PUNCT ",")
(ID "expires")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT "]")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
