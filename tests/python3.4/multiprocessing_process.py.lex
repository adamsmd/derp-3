(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "BaseProcess")
(PUNCT ",")
(LIT "current_process")
(PUNCT ",")
(LIT "active_children")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "signal")
(NEWLINE)
(KEYWORD import)
(ID "itertools")
(NEWLINE)
(KEYWORD from)
(ID "_weakrefset")
(KEYWORD import)
(ID "WeakSet")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ORIGINAL_DIR")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ORIGINAL_DIR")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "current_process")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Return process object representing the current process\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_current_process")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "active_children")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Return list of process objects corresponding to live child processes\n    ")
(NEWLINE)
(ID "_cleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "_children")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cleanup")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "_children")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "poll")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_children")
(PUNCT ".")
(ID "discard")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BaseProcess")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Process objects represent activity that is run in a separate process\n\n    The class is analogous to `threading.Thread`\n    ")
(NEWLINE)
(KEYWORD def)
(ID "_Popen")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "daemon")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "group")
(KEYWORD is)
(KEYWORD None)
(PUNCT ",")
(LIT "group argument must be None for now")
(NEWLINE)
(ID "count")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "_process_counter")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_identity")
(PUNCT "=")
(ID "_current_process")
(PUNCT ".")
(ID "_identity")
(PUNCT "+")
(PUNCT "(")
(ID "count")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_config")
(PUNCT "=")
(ID "_current_process")
(PUNCT ".")
(ID "_config")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_parent_pid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_target")
(PUNCT "=")
(ID "target")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(KEYWORD or)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT "+")
(LIT "-")
(PUNCT "+")
(LIT ":")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_identity")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "daemon")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "daemon")
(PUNCT "=")
(ID "daemon")
(NEWLINE)
(DEDENT)
(ID "_dangling")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Method to be run in sub-process; can be overridden in sub-class\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_target")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_target")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ",")
(PUNCT "**")
(ID "self")
(PUNCT ".")
(ID "_kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "start")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Start child process\n        ")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ",")
(LIT "cannot start a process twice")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_parent_pid")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "can only start a process object created by current process")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "_current_process")
(PUNCT ".")
(ID "_config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "daemon")
(PUNCT ")")
(PUNCT ",")
(LIT "daemonic processes are not allowed to have children")
(NEWLINE)
(ID "_cleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_Popen")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sentinel")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "sentinel")
(NEWLINE)
(ID "_children")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "terminate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Terminate process; sends SIGTERM signal or uses TerminateProcess()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "terminate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Wait until child process terminates\n        ")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_parent_pid")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "can only join a child process")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ",")
(LIT "can only join a started process")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "res")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_children")
(PUNCT ".")
(ID "discard")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_alive")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return whether process is alive\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(KEYWORD is)
(ID "_current_process")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_parent_pid")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "can only test a child process")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "poll")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "name")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ",")
(LIT "name must be a string")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "daemon")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return whether process is a daemon\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "daemon")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "daemon")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "daemon")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "daemonic")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set whether process is a daemon\n        ")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ",")
(LIT "process has already started")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_config")
(PUNCT "[")
(LIT "daemon")
(PUNCT "]")
(PUNCT "=")
(ID "daemonic")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "authkey")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_config")
(PUNCT "[")
(LIT "authkey")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "authkey")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "authkey")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "authkey")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set authorization key of process\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_config")
(PUNCT "[")
(LIT "authkey")
(PUNCT "]")
(PUNCT "=")
(ID "AuthenticationString")
(PUNCT "(")
(ID "authkey")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "exitcode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return exit code of process or `None` if it has yet to stop\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_popen")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "poll")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "ident")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return identifier (PID) of process or `None` if it has yet to start\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(KEYWORD is)
(ID "_current_process")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "pid")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "pid")
(PUNCT "=")
(ID "ident")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "sentinel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return a file descriptor (Unix) or handle (Windows) suitable for\n        waiting for process termination.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sentinel")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "process not started")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(KEYWORD is)
(ID "_current_process")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "started")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_parent_pid")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "unknown")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_popen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "initial")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT ".")
(ID "poll")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "exitcode")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "started")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(KEYWORD is)
(ID "int")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "status")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "stopped")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "stopped[%s]")
(PUNCT "%")
(ID "_exitcode_to_name")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "status")
(PUNCT ",")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "<%s(%s, %s%s)>")
(PUNCT "%")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(ID "status")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "daemon")
(KEYWORD and)
(LIT " daemon")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_bootstrap")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "util")
(PUNCT ",")
(ID "context")
(NEWLINE)
(KEYWORD global)
(ID "_current_process")
(PUNCT ",")
(ID "_process_counter")
(PUNCT ",")
(ID "_children")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_start_method")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "_force_start_method")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_start_method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_process_counter")
(PUNCT "=")
(ID "itertools")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "_children")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "devnull")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "old_process")
(PUNCT "=")
(ID "_current_process")
(NEWLINE)
(ID "_current_process")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "util")
(PUNCT ".")
(ID "_finalizer_registry")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "util")
(PUNCT ".")
(ID "_run_after_forkers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "old_process")
(NEWLINE)
(DEDENT)
(ID "util")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "child process calling self.run()")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "exitcode")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "util")
(PUNCT ".")
(ID "_exit_function")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "SystemExit")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exitcode")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exitcode")
(PUNCT "=")
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "exitcode")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exitcode")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Process %s:\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "traceback")
(PUNCT ".")
(ID "print_exc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "util")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "process exiting with exitcode %d")
(PUNCT "%")
(ID "exitcode")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "exitcode")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AuthenticationString")
(PUNCT "(")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__reduce__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "context")
(KEYWORD import)
(ID "get_spawning_popen")
(NEWLINE)
(KEYWORD if)
(ID "get_spawning_popen")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Pickling an AuthenticationString object is ")
(LIT "disallowed for security reasons")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "AuthenticationString")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_MainProcess")
(PUNCT "(")
(ID "BaseProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_identity")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(LIT "MainProcess")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_parent_pid")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_popen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_config")
(PUNCT "=")
(PUNCT "{")
(LIT "authkey")
(PUNCT ":")
(ID "AuthenticationString")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "urandom")
(PUNCT "(")
(LIT 32)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "semprefix")
(PUNCT ":")
(LIT "/mp")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_current_process")
(PUNCT "=")
(ID "_MainProcess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_process_counter")
(PUNCT "=")
(ID "itertools")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "_children")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "_MainProcess")
(NEWLINE)
(ID "_exitcode_to_name")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "signum")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(LIT "SIG")
(KEYWORD and)
(LIT "_")
(KEYWORD not)
(KEYWORD in)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_exitcode_to_name")
(PUNCT "[")
(PUNCT "-")
(ID "signum")
(PUNCT "]")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_dangling")
(PUNCT "=")
(ID "WeakSet")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ENDMARKER)
