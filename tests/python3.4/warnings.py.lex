(LIT "Python part of the warnings subsystem.")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "warn")
(PUNCT ",")
(LIT "warn_explicit")
(PUNCT ",")
(LIT "showwarning")
(PUNCT ",")
(LIT "formatwarning")
(PUNCT ",")
(LIT "filterwarnings")
(PUNCT ",")
(LIT "simplefilter")
(PUNCT ",")
(LIT "resetwarnings")
(PUNCT ",")
(LIT "catch_warnings")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "showwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "line")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hook to write a warning to a file; replace if you like.")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "formatwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "formatwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "line")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Function to format a warning the standard way.")
(NEWLINE)
(KEYWORD import)
(ID "linecache")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT "%s:%s: %s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "category")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(KEYWORD if)
(ID "line")
(KEYWORD is)
(KEYWORD None)
(KEYWORD else)
(ID "line")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "+=")
(LIT "  %s\n")
(PUNCT "%")
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "filterwarnings")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(ID "Warning")
(PUNCT ",")
(ID "module")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "lineno")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "append")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert an entry into the list of warnings filters (at the front).\n\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'message' -- a regex that the warning message must match\n    'category' -- a class that the warning must be a subclass of\n    'module' -- a regex that the module name must match\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    ")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD assert)
(ID "action")
(KEYWORD in)
(PUNCT "(")
(LIT "error")
(PUNCT ",")
(LIT "ignore")
(PUNCT ",")
(LIT "always")
(PUNCT ",")
(LIT "default")
(PUNCT ",")
(LIT "module")
(PUNCT ",")
(LIT "once")
(PUNCT ")")
(PUNCT ",")
(LIT "invalid action: %r")
(PUNCT "%")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ",")
(LIT "message must be a string")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ",")
(LIT "category must be a class")
(NEWLINE)
(KEYWORD assert)
(ID "issubclass")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(ID "Warning")
(PUNCT ")")
(PUNCT ",")
(LIT "category must be a Warning subclass")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ",")
(LIT "module must be a string")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "lineno")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(KEYWORD and)
(ID "lineno")
(PUNCT ">=")
(LIT 0)
(PUNCT ",")
(LIT "lineno must be an int >= 0")
(NEWLINE)
(ID "item")
(PUNCT "=")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "append")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filters")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_filters_mutated")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "simplefilter")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(ID "Warning")
(PUNCT ",")
(ID "lineno")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "append")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert a simple entry into the list of warnings filters (at the front).\n\n    A simple filter matches all modules and messages.\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'category' -- a class that the warning must be a subclass of\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    ")
(NEWLINE)
(KEYWORD assert)
(ID "action")
(KEYWORD in)
(PUNCT "(")
(LIT "error")
(PUNCT ",")
(LIT "ignore")
(PUNCT ",")
(LIT "always")
(PUNCT ",")
(LIT "default")
(PUNCT ",")
(LIT "module")
(PUNCT ",")
(LIT "once")
(PUNCT ")")
(PUNCT ",")
(LIT "invalid action: %r")
(PUNCT "%")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "lineno")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(KEYWORD and)
(ID "lineno")
(PUNCT ">=")
(LIT 0)
(PUNCT ",")
(LIT "lineno must be an int >= 0")
(NEWLINE)
(ID "item")
(PUNCT "=")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "category")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "append")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filters")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_filters_mutated")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resetwarnings")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the list of warning filters, so that no filters are active.")
(NEWLINE)
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "_filters_mutated")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_OptionError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception used by option processing helpers.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_processoptions")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_setoption")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "_OptionError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Invalid -W option ignored:")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_setoption")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "arg")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT ">")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "too many fields (max 5): %r")
(PUNCT "%")
(PUNCT "(")
(ID "arg")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "<")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "action")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "module")
(PUNCT ",")
(ID "lineno")
(PUNCT "=")
(PUNCT "[")
(ID "s")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "parts")
(PUNCT "]")
(NEWLINE)
(ID "action")
(PUNCT "=")
(ID "_getaction")
(PUNCT "(")
(ID "action")
(PUNCT ")")
(NEWLINE)
(ID "message")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(ID "category")
(PUNCT "=")
(ID "_getcategory")
(PUNCT "(")
(ID "category")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "module")
(PUNCT "+")
(LIT "$")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "lineno")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lineno")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "OverflowError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "invalid lineno %r")
(PUNCT "%")
(PUNCT "(")
(ID "lineno")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "filterwarnings")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "module")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getaction")
(PUNCT "(")
(ID "action")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "action")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "default")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "all")
(PUNCT ":")
(KEYWORD return)
(LIT "always")
(NEWLINE)
(KEYWORD for)
(ID "a")
(KEYWORD in)
(PUNCT "(")
(LIT "default")
(PUNCT ",")
(LIT "always")
(PUNCT ",")
(LIT "ignore")
(PUNCT ",")
(LIT "module")
(PUNCT ",")
(LIT "once")
(PUNCT ",")
(LIT "error")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "a")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "action")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "a")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "invalid action: %r")
(PUNCT "%")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getcategory")
(PUNCT "(")
(ID "category")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "category")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Warning")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "^[a-zA-Z0-9_]+$")
(PUNCT ",")
(ID "category")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cat")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "category")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "unknown warning category: %r")
(PUNCT "%")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "category")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "category")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "category")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(PUNCT "[")
(ID "klass")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "invalid module name: %r")
(PUNCT "%")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cat")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "m")
(PUNCT ",")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "unknown warning category: %r")
(PUNCT "%")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "issubclass")
(PUNCT "(")
(ID "cat")
(PUNCT ",")
(ID "Warning")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_OptionError")
(PUNCT "(")
(LIT "invalid warning category: %r")
(PUNCT "%")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cat")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "warn")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Issue a warning, or maybe ignore it or raise an exception.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "Warning")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "category")
(PUNCT "=")
(ID "message")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "category")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "category")
(PUNCT "=")
(ID "UserWarning")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "issubclass")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(ID "Warning")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "caller")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "_getframe")
(PUNCT "(")
(ID "stacklevel")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "globals")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "globals")
(PUNCT "=")
(ID "caller")
(PUNCT ".")
(ID "f_globals")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "caller")
(PUNCT ".")
(ID "f_lineno")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "__name__")
(KEYWORD in)
(ID "globals")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "globals")
(PUNCT "[")
(LIT "__name__")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(LIT "<string>")
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "globals")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__file__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fnl")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fnl")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT ".pyc")
(PUNCT ",")
(LIT ".pyo")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "module")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(LIT "__main__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "module")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "registry")
(PUNCT "=")
(ID "globals")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "__warningregistry__")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "warn_explicit")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "module")
(PUNCT ",")
(ID "registry")
(PUNCT ",")
(ID "globals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "warn_explicit")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "module")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "registry")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "module_globals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "filename")
(KEYWORD or)
(LIT "<unknown>")
(NEWLINE)
(KEYWORD if)
(ID "module")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT ".py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "module")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "registry")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "!=")
(ID "_filters_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "registry")
(PUNCT "[")
(LIT "version")
(PUNCT "]")
(PUNCT "=")
(ID "_filters_version")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "Warning")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(ID "category")
(PUNCT "=")
(ID "message")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "message")
(NEWLINE)
(ID "message")
(PUNCT "=")
(ID "category")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "filters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "action")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "cat")
(PUNCT ",")
(ID "mod")
(PUNCT ",")
(ID "ln")
(PUNCT "=")
(ID "item")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "msg")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "msg")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "category")
(PUNCT ",")
(ID "cat")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "mod")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "mod")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "ln")
(PUNCT "==")
(LIT 0)
(KEYWORD or)
(ID "lineno")
(PUNCT "==")
(ID "ln")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "action")
(PUNCT "=")
(ID "defaultaction")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "ignore")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "linecache")
(NEWLINE)
(ID "linecache")
(PUNCT ".")
(ID "getlines")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "module_globals")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "message")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "once")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "oncekey")
(PUNCT "=")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "category")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "onceregistry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "oncekey")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "onceregistry")
(PUNCT "[")
(ID "oncekey")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "always")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "altkey")
(PUNCT "=")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "altkey")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "registry")
(PUNCT "[")
(ID "altkey")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Unrecognized action (%r) in warnings.filters:\n %s")
(PUNCT "%")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "showwarning")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "warnings.showwarning() must be set to a ")
(LIT "function or method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "showwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "WarningMessage")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Holds the result of a single showwarning() call.")
(NEWLINE)
(ID "_WARNING_DETAILS")
(PUNCT "=")
(PUNCT "(")
(LIT "message")
(PUNCT ",")
(LIT "category")
(PUNCT ",")
(LIT "filename")
(PUNCT ",")
(LIT "lineno")
(PUNCT ",")
(LIT "file")
(PUNCT ",")
(LIT "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "line")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "local_values")
(PUNCT "=")
(ID "locals")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_WARNING_DETAILS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "local_values")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_category_name")
(PUNCT "=")
(ID "category")
(PUNCT ".")
(ID "__name__")
(KEYWORD if)
(ID "category")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "{message : %r, category : %r, filename : %r, lineno : %s, ")
(LIT "line : %r}")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "message")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_category_name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "catch_warnings")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A context manager that copies and restores the warnings filter upon\n    exiting the context.\n\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of warnings.showwarning() and be appended to a list\n    returned by the context manager. Otherwise None is returned by the context\n    manager. The objects appended to the list are arguments whose attributes\n    mirror the arguments to showwarning().\n\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful\n    when testing the warnings module itself.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "record")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "module")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Specify whether to record warnings and if an alternative module\n        should be used other than sys.modules['warnings'].\n\n        For compatibility with Python 3.0, please consider all arguments to be\n        keyword-only.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_record")
(PUNCT "=")
(ID "record")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "warnings")
(PUNCT "]")
(KEYWORD if)
(ID "module")
(KEYWORD is)
(KEYWORD None)
(KEYWORD else)
(ID "module")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_entered")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_record")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "record=True")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_module")
(KEYWORD is)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "warnings")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "module=%r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD return)
(LIT "%s(%s)")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_entered")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Cannot enter %r twice")
(PUNCT "%")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_entered")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_filters")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "filters")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "filters")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "_filters_mutated")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_showwarning")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "showwarning")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_record")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "showwarning")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "WarningMessage")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "showwarning")
(PUNCT "=")
(ID "showwarning")
(NEWLINE)
(KEYWORD return)
(ID "log")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "exc_info")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_entered")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Cannot exit %r without entering first")
(PUNCT "%")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "filters")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_filters")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "_filters_mutated")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT ".")
(ID "showwarning")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_showwarning")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_warnings_defaults")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_warnings")
(KEYWORD import)
(PUNCT "(")
(ID "filters")
(PUNCT ",")
(ID "_defaultaction")
(PUNCT ",")
(ID "_onceregistry")
(PUNCT ",")
(ID "warn")
(PUNCT ",")
(ID "warn_explicit")
(PUNCT ",")
(ID "_filters_mutated")
(PUNCT ")")
(NEWLINE)
(ID "defaultaction")
(PUNCT "=")
(ID "_defaultaction")
(NEWLINE)
(ID "onceregistry")
(PUNCT "=")
(ID "_onceregistry")
(NEWLINE)
(ID "_warnings_defaults")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filters")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "defaultaction")
(PUNCT "=")
(LIT "default")
(NEWLINE)
(ID "onceregistry")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_filters_version")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD def)
(ID "_filters_mutated")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_filters_version")
(NEWLINE)
(ID "_filters_version")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_processoptions")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_warnings_defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "silence")
(PUNCT "=")
(PUNCT "[")
(ID "ImportWarning")
(PUNCT ",")
(ID "PendingDeprecationWarning")
(PUNCT "]")
(NEWLINE)
(ID "silence")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "DeprecationWarning")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cls")
(KEYWORD in)
(ID "silence")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "simplefilter")
(PUNCT "(")
(LIT "ignore")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bytes_warning")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "bytes_warning")
(NEWLINE)
(KEYWORD if)
(ID "bytes_warning")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes_action")
(PUNCT "=")
(LIT "error")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "bytes_warning")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes_action")
(PUNCT "=")
(LIT "default")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes_action")
(PUNCT "=")
(LIT "ignore")
(NEWLINE)
(DEDENT)
(ID "simplefilter")
(PUNCT "(")
(ID "bytes_action")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(ID "BytesWarning")
(PUNCT ",")
(ID "append")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "gettotalrefcount")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resource_action")
(PUNCT "=")
(LIT "always")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resource_action")
(PUNCT "=")
(LIT "ignore")
(NEWLINE)
(DEDENT)
(ID "simplefilter")
(PUNCT "(")
(ID "resource_action")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(ID "ResourceWarning")
(PUNCT ",")
(ID "append")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "_warnings_defaults")
(NEWLINE)
(ENDMARKER)
