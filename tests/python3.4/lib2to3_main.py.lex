(LIT "\nMain program for 2to3.\n")
(NEWLINE)
(KEYWORD from)
(ID "__future__")
(KEYWORD import)
(ID "with_statement")
(PUNCT ",")
(ID "print_function")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "difflib")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "optparse")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "refactor")
(NEWLINE)
(KEYWORD def)
(ID "diff_texts")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a unified diff of two strings.")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "a")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "b")
(PUNCT "=")
(ID "b")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "difflib")
(PUNCT ".")
(ID "unified_diff")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(LIT "(original)")
(PUNCT ",")
(LIT "(refactored)")
(PUNCT ",")
(ID "lineterm")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "StdoutRefactoringTool")
(PUNCT "(")
(ID "refactor")
(PUNCT ".")
(ID "MultiprocessRefactoringTool")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A refactoring tool that can avoid overwriting its input files.\n    Prints output to stdout.\n\n    Output files can optionally be written to a different directory and or\n    have an extra file suffix appended to their name for use in situations\n    where you do not want to replace the input files.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fixers")
(PUNCT ",")
(ID "options")
(PUNCT ",")
(ID "explicit")
(PUNCT ",")
(ID "nobackups")
(PUNCT ",")
(ID "show_diffs")
(PUNCT ",")
(ID "input_base_dir")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "append_suffix")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Args:\n            fixers: A list of fixers to import.\n            options: A dict with RefactoringTool configuration.\n            explicit: A list of fixers to run even if they are explicit.\n            nobackups: If true no backup '.bak' files will be created for those\n                files that are being refactored.\n            show_diffs: Should diffs of the refactoring be printed to stdout?\n            input_base_dir: The base directory for all input files.  This class\n                will strip this path prefix off of filenames before substituting\n                it with output_dir.  Only meaningful if output_dir is supplied.\n                All files processed by refactor() must start with this path.\n            output_dir: If supplied, all converted files will be written into\n                this directory tree instead of input_base_dir.\n            append_suffix: If supplied, all files output by this tool will have\n                this appended to their filename.  Useful for changing .py to\n                .py3 for example by passing append_suffix='3'.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "nobackups")
(PUNCT "=")
(ID "nobackups")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "show_diffs")
(PUNCT "=")
(ID "show_diffs")
(NEWLINE)
(KEYWORD if)
(ID "input_base_dir")
(KEYWORD and)
(KEYWORD not)
(ID "input_base_dir")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_base_dir")
(PUNCT "+=")
(ID "os")
(PUNCT ".")
(ID "sep")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_input_base_dir")
(PUNCT "=")
(ID "input_base_dir")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_output_dir")
(PUNCT "=")
(ID "output_dir")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_append_suffix")
(PUNCT "=")
(ID "append_suffix")
(NEWLINE)
(ID "super")
(PUNCT "(")
(ID "StdoutRefactoringTool")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "fixers")
(PUNCT ",")
(ID "options")
(PUNCT ",")
(ID "explicit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "new_text")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "old_text")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_filename")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_output_dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_input_base_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_output_dir")
(PUNCT ",")
(ID "filename")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_input_base_dir")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "filename %s does not start with the ")
(LIT "input_base_dir %s")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_input_base_dir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_append_suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_append_suffix")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "orig_filename")
(PUNCT "!=")
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "output_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "Writing converted %s to %s.")
(PUNCT ",")
(ID "orig_filename")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "nobackups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "backup")
(PUNCT "=")
(ID "filename")
(PUNCT "+")
(LIT ".bak")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "lexists")
(PUNCT "(")
(ID "backup")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "backup")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "Can't remove backup %s")
(PUNCT ",")
(ID "backup")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "rename")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "backup")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "Can't rename %s to %s")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "backup")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "write")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(ID "StdoutRefactoringTool")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "write_file")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "new_text")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "old_text")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "nobackups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "copymode")
(PUNCT "(")
(ID "backup")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "orig_filename")
(PUNCT "!=")
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "copymode")
(PUNCT "(")
(ID "orig_filename")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_output")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "old")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "equal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "equal")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "No changes to %s")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "Refactored %s")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "show_diffs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "diff_lines")
(PUNCT "=")
(ID "diff_texts")
(PUNCT "(")
(ID "old")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "output_lock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "output_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "diff_lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "diff_lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "couldn't encode %s's diff for your terminal")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "warn")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "WARNING: %s")
(PUNCT "%")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "fixer_pkg")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Main program.\n\n    Args:\n        fixer_pkg: the name of a package where the fixers are located.\n        args: optional; a list of command line arguments. If omitted,\n              sys.argv[1:] is used.\n\n    Returns a suggested exit status (0, 1, 2).\n    ")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "optparse")
(PUNCT ".")
(ID "OptionParser")
(PUNCT "(")
(ID "usage")
(PUNCT "=")
(LIT "2to3 [options] file|dir ...")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-d")
(PUNCT ",")
(LIT "--doctests_only")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Fix up doctests only")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-f")
(PUNCT ",")
(LIT "--fix")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "append")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Each FIX specifies a transformation; default: all")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-j")
(PUNCT ",")
(LIT "--processes")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "int")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Run 2to3 concurrently")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-x")
(PUNCT ",")
(LIT "--nofix")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "append")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Prevent a transformation from being run")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-l")
(PUNCT ",")
(LIT "--list-fixes")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "List available transformations")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-p")
(PUNCT ",")
(LIT "--print-function")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Modify the grammar so that print() is a function")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-v")
(PUNCT ",")
(LIT "--verbose")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "More verbose logging")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "--no-diffs")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Don't show diffs of the refactoring")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-w")
(PUNCT ",")
(LIT "--write")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Write back modified files")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-n")
(PUNCT ",")
(LIT "--nobackups")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Don't write backups for modified files")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-o")
(PUNCT ",")
(LIT "--output-dir")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "str")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Put output files in this directory ")
(LIT "instead of overwriting the input files.  Requires -n.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "-W")
(PUNCT ",")
(LIT "--write-unchanged-files")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Also write files even if no changes were required")
(LIT " (useful with --output-dir); implies -w.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_option")
(PUNCT "(")
(LIT "--add-suffix")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "str")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Append this string to all output filenames.")
(LIT " Requires -n if non-empty.  ")
(LIT "ex: --add-suffix='3' will generate .py3 files.")
(PUNCT ")")
(NEWLINE)
(ID "refactor_stdin")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "flags")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "options")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "write_unchanged_files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "[")
(LIT "write_unchanged_files")
(PUNCT "]")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "options")
(PUNCT ".")
(ID "write")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "--write-unchanged-files/-W implies -w.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "options")
(PUNCT ".")
(ID "write")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "output_dir")
(KEYWORD and)
(KEYWORD not)
(ID "options")
(PUNCT ".")
(ID "nobackups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Can't use --output-dir/-o without -n.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "add_suffix")
(KEYWORD and)
(KEYWORD not)
(ID "options")
(PUNCT ".")
(ID "nobackups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Can't use --add-suffix without -n.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "options")
(PUNCT ".")
(ID "write")
(KEYWORD and)
(ID "options")
(PUNCT ".")
(ID "no_diffs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "not writing files and not printing diffs; that's not very useful")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "options")
(PUNCT ".")
(ID "write")
(KEYWORD and)
(ID "options")
(PUNCT ".")
(ID "nobackups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Can't use -n without -w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "list_fixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Available transformations for the -f/--fix option:")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "fixname")
(KEYWORD in)
(ID "refactor")
(PUNCT ".")
(ID "get_all_fix_names")
(PUNCT "(")
(ID "fixer_pkg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "fixname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "At least one file or directory argument required.")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Use --help to show usage.")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "-")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "refactor_stdin")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "write")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Can't write to stdin.")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 2)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "print_function")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "[")
(LIT "print_function")
(PUNCT "]")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "DEBUG")
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "verbose")
(KEYWORD else)
(ID "logging")
(PUNCT ".")
(ID "INFO")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "basicConfig")
(PUNCT "(")
(ID "format")
(PUNCT "=")
(LIT "%(name)s: %(message)s")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(ID "level")
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(LIT "lib2to3.main")
(PUNCT ")")
(NEWLINE)
(ID "avail_fixes")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "refactor")
(PUNCT ".")
(ID "get_fixers_from_package")
(PUNCT "(")
(ID "fixer_pkg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "unwanted_fixes")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "fixer_pkg")
(PUNCT "+")
(LIT ".fix_")
(PUNCT "+")
(ID "fix")
(KEYWORD for)
(ID "fix")
(KEYWORD in)
(ID "options")
(PUNCT ".")
(ID "nofix")
(PUNCT ")")
(NEWLINE)
(ID "explicit")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "fix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "all_present")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "fix")
(KEYWORD in)
(ID "options")
(PUNCT ".")
(ID "fix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fix")
(PUNCT "==")
(LIT "all")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "all_present")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "explicit")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "fixer_pkg")
(PUNCT "+")
(LIT ".fix_")
(PUNCT "+")
(ID "fix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "requested")
(PUNCT "=")
(ID "avail_fixes")
(PUNCT ".")
(ID "union")
(PUNCT "(")
(ID "explicit")
(PUNCT ")")
(KEYWORD if)
(ID "all_present")
(KEYWORD else)
(ID "explicit")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requested")
(PUNCT "=")
(ID "avail_fixes")
(PUNCT ".")
(ID "union")
(PUNCT "(")
(ID "explicit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fixer_names")
(PUNCT "=")
(ID "requested")
(PUNCT ".")
(ID "difference")
(PUNCT "(")
(ID "unwanted_fixes")
(PUNCT ")")
(NEWLINE)
(ID "input_base_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "commonprefix")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "input_base_dir")
(KEYWORD and)
(KEYWORD not)
(ID "input_base_dir")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "input_base_dir")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_base_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "input_base_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "output_dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_base_dir")
(PUNCT "=")
(ID "input_base_dir")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Output in %r will mirror the input directory %r layout.")
(PUNCT ",")
(ID "options")
(PUNCT ".")
(ID "output_dir")
(PUNCT ",")
(ID "input_base_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rt")
(PUNCT "=")
(ID "StdoutRefactoringTool")
(PUNCT "(")
(ID "sorted")
(PUNCT "(")
(ID "fixer_names")
(PUNCT ")")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "sorted")
(PUNCT "(")
(ID "explicit")
(PUNCT ")")
(PUNCT ",")
(ID "options")
(PUNCT ".")
(ID "nobackups")
(PUNCT ",")
(KEYWORD not)
(ID "options")
(PUNCT ".")
(ID "no_diffs")
(PUNCT ",")
(ID "input_base_dir")
(PUNCT "=")
(ID "input_base_dir")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "output_dir")
(PUNCT ",")
(ID "append_suffix")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "add_suffix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "rt")
(PUNCT ".")
(ID "errors")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "refactor_stdin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rt")
(PUNCT ".")
(ID "refactor_stdin")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rt")
(PUNCT ".")
(ID "refactor")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "options")
(PUNCT ".")
(ID "write")
(PUNCT ",")
(ID "options")
(PUNCT ".")
(ID "doctests_only")
(PUNCT ",")
(ID "options")
(PUNCT ".")
(ID "processes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "refactor")
(PUNCT ".")
(ID "MultiprocessingUnsupported")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "options")
(PUNCT ".")
(ID "processes")
(PUNCT ">")
(LIT 1)
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Sorry, -j isn't supported on this platform.")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "rt")
(PUNCT ".")
(ID "summarize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "bool")
(PUNCT "(")
(ID "rt")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
