(LIT "Miscellaneous WSGI-related Utilities")
(NEWLINE)
(KEYWORD import)
(ID "posixpath")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "FileWrapper")
(PUNCT ",")
(LIT "guess_scheme")
(PUNCT ",")
(LIT "application_uri")
(PUNCT ",")
(LIT "request_uri")
(PUNCT ",")
(LIT "shift_path_info")
(PUNCT ",")
(LIT "setup_testing_defaults")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "FileWrapper")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wrapper to convert file-like objects to iterables")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filelike")
(PUNCT ",")
(ID "blksize")
(PUNCT "=")
(LIT 8192)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelike")
(PUNCT "=")
(ID "filelike")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "blksize")
(PUNCT "=")
(ID "blksize")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "filelike")
(PUNCT ",")
(LIT "close")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "=")
(ID "filelike")
(PUNCT ".")
(ID "close")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filelike")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "blksize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "IndexError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filelike")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "blksize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "StopIteration")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "guess_scheme")
(PUNCT "(")
(ID "environ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'\n    ")
(NEWLINE)
(KEYWORD if)
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "HTTPS")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT "yes")
(PUNCT ",")
(LIT "on")
(PUNCT ",")
(LIT "1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "https")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "http")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "application_uri")
(PUNCT "(")
(ID "environ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the application's base URI (no PATH_INFO or QUERY_STRING)")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "environ")
(PUNCT "[")
(LIT "wsgi.url_scheme")
(PUNCT "]")
(PUNCT "+")
(LIT "://")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(KEYWORD import)
(ID "quote")
(NEWLINE)
(KEYWORD if)
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "HTTP_HOST")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(ID "environ")
(PUNCT "[")
(LIT "HTTP_HOST")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(ID "environ")
(PUNCT "[")
(LIT "SERVER_NAME")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "environ")
(PUNCT "[")
(LIT "wsgi.url_scheme")
(PUNCT "]")
(PUNCT "==")
(LIT "https")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "environ")
(PUNCT "[")
(LIT "SERVER_PORT")
(PUNCT "]")
(PUNCT "!=")
(LIT "443")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(LIT ":")
(PUNCT "+")
(ID "environ")
(PUNCT "[")
(LIT "SERVER_PORT")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "environ")
(PUNCT "[")
(LIT "SERVER_PORT")
(PUNCT "]")
(PUNCT "!=")
(LIT "80")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(LIT ":")
(PUNCT "+")
(ID "environ")
(PUNCT "[")
(LIT "SERVER_PORT")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "url")
(PUNCT "+=")
(ID "quote")
(PUNCT "(")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "SCRIPT_NAME")
(PUNCT ")")
(KEYWORD or)
(LIT "/")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "latin1")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "url")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "request_uri")
(PUNCT "(")
(ID "environ")
(PUNCT ",")
(ID "include_query")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the full request URI, optionally including the query string")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "application_uri")
(PUNCT "(")
(ID "environ")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(KEYWORD import)
(ID "quote")
(NEWLINE)
(ID "path_info")
(PUNCT "=")
(ID "quote")
(PUNCT "(")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PATH_INFO")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "/;=,")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "latin1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "SCRIPT_NAME")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(ID "path_info")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(ID "path_info")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "include_query")
(KEYWORD and)
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "QUERY_STRING")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "+=")
(LIT "?")
(PUNCT "+")
(ID "environ")
(PUNCT "[")
(LIT "QUERY_STRING")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "url")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shift_path_info")
(PUNCT "(")
(ID "environ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shift a name from PATH_INFO to SCRIPT_NAME, returning it\n\n    If there are no remaining path segments in PATH_INFO, return None.\n    Note: 'environ' is modified in-place; use a copy if you need to keep\n    the original PATH_INFO or SCRIPT_NAME.\n\n    Note: when PATH_INFO is just a '/', this returns '' and appends a trailing\n    '/' to SCRIPT_NAME, even though empty path segments are normally ignored,\n    and SCRIPT_NAME doesn't normally end in a '/'.  This is intentional\n    behavior, to ensure that an application can tell the difference between\n    '/x' and '/x/' when traversing to objects.\n    ")
(NEWLINE)
(ID "path_info")
(PUNCT "=")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PATH_INFO")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "path_info")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "path_parts")
(PUNCT "=")
(ID "path_info")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "path_parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "p")
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "path_parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD if)
(ID "p")
(KEYWORD and)
(ID "p")
(PUNCT "!=")
(LIT ".")
(PUNCT "]")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "path_parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "path_parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "script_name")
(PUNCT "=")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "SCRIPT_NAME")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "script_name")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "script_name")
(PUNCT "+")
(LIT "/")
(PUNCT "+")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "script_name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script_name")
(PUNCT "=")
(ID "script_name")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD and)
(KEYWORD not)
(ID "script_name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script_name")
(PUNCT "+=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "environ")
(PUNCT "[")
(LIT "SCRIPT_NAME")
(PUNCT "]")
(PUNCT "=")
(ID "script_name")
(NEWLINE)
(ID "environ")
(PUNCT "[")
(LIT "PATH_INFO")
(PUNCT "]")
(PUNCT "=")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setup_testing_defaults")
(PUNCT "(")
(ID "environ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Update 'environ' with trivial defaults for testing purposes\n\n    This adds various parameters required for WSGI, including HTTP_HOST,\n    SERVER_NAME, SERVER_PORT, REQUEST_METHOD, SCRIPT_NAME, PATH_INFO,\n    and all of the wsgi.* variables.  It only supplies default values,\n    and does not replace any existing settings for these variables.\n\n    This routine is intended to make it easier for unit tests of WSGI\n    servers and applications to set up dummy environments.  It should *not*\n    be used by actual WSGI servers or applications, since the data is fake!\n    ")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "SERVER_NAME")
(PUNCT ",")
(LIT "127.0.0.1")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "SERVER_PROTOCOL")
(PUNCT ",")
(LIT "HTTP/1.0")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "HTTP_HOST")
(PUNCT ",")
(ID "environ")
(PUNCT "[")
(LIT "SERVER_NAME")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "REQUEST_METHOD")
(PUNCT ",")
(LIT "GET")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "SCRIPT_NAME")
(KEYWORD not)
(KEYWORD in)
(ID "environ")
(KEYWORD and)
(LIT "PATH_INFO")
(KEYWORD not)
(KEYWORD in)
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "SCRIPT_NAME")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "PATH_INFO")
(PUNCT ",")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.version")
(PUNCT ",")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.run_once")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.multithread")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.multiprocess")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "StringIO")
(PUNCT ",")
(ID "BytesIO")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.input")
(PUNCT ",")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.errors")
(PUNCT ",")
(ID "StringIO")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "wsgi.url_scheme")
(PUNCT ",")
(ID "guess_scheme")
(PUNCT "(")
(ID "environ")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "environ")
(PUNCT "[")
(LIT "wsgi.url_scheme")
(PUNCT "]")
(PUNCT "==")
(LIT "http")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "SERVER_PORT")
(PUNCT ",")
(LIT "80")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "environ")
(PUNCT "[")
(LIT "wsgi.url_scheme")
(PUNCT "]")
(PUNCT "==")
(LIT "https")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "environ")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(LIT "SERVER_PORT")
(PUNCT ",")
(LIT "443")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_hoppish")
(PUNCT "=")
(PUNCT "{")
(LIT "connection")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "keep-alive")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "proxy-authenticate")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "proxy-authorization")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "te")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "trailers")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "transfer-encoding")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "upgrade")
(PUNCT ":")
(LIT 1)
(PUNCT "}")
(PUNCT ".")
(ID "__contains__")
(NEWLINE)
(KEYWORD def)
(ID "is_hop_by_hop")
(PUNCT "(")
(ID "header_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if 'header_name' is an HTTP/1.1 \"Hop-by-Hop\" header")
(NEWLINE)
(KEYWORD return)
(ID "_hoppish")
(PUNCT "(")
(ID "header_name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
