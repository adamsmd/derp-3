(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "selectors")
(NEWLINE)
(KEYWORD import)
(ID "signal")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "connection")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "process")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "reduction")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "semaphore_tracker")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "spawn")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "util")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "ensure_running")
(PUNCT ",")
(LIT "get_inherited_fds")
(PUNCT ",")
(LIT "connect_to_new_process")
(PUNCT ",")
(LIT "set_forkserver_preload")
(PUNCT "]")
(NEWLINE)
(ID "MAXFDS_TO_SEND")
(PUNCT "=")
(LIT 256)
(NEWLINE)
(ID "UNSIGNED_STRUCT")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "Struct")
(PUNCT "(")
(LIT "Q")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "ForkServer")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_forkserver_address")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_forkserver_alive_fd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_inherited_fds")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_preload_modules")
(PUNCT "=")
(PUNCT "[")
(LIT "__main__")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_forkserver_preload")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "modules_names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set list of module names to try to load in forkserver process.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "all")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "mod")
(PUNCT ")")
(KEYWORD is)
(ID "str")
(KEYWORD for)
(ID "mod")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_preload_modules")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "module_names must be a list of strings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_preload_modules")
(PUNCT "=")
(ID "modules_names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_inherited_fds")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of fds inherited from parent process.\n\n        This returns None if the current process was not started by fork\n        server.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_inherited_fds")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect_to_new_process")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Request forkserver to create a child process.\n\n        Returns a pair of fds (status_r, data_w).  The calling process can read\n        the child process's pid and (eventually) its returncode from status_r.\n        The calling process should write to data_w the pickled preparation and\n        process data.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ensure_running")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "fds")
(PUNCT ")")
(PUNCT "+")
(LIT 4)
(PUNCT ">=")
(ID "MAXFDS_TO_SEND")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "too many fds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ")")
(KEYWORD as)
(ID "client")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "client")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_forkserver_address")
(PUNCT ")")
(NEWLINE)
(ID "parent_r")
(PUNCT ",")
(ID "child_w")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "child_r")
(PUNCT ",")
(ID "parent_w")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "allfds")
(PUNCT "=")
(PUNCT "[")
(ID "child_r")
(PUNCT ",")
(ID "child_w")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_forkserver_alive_fd")
(PUNCT ",")
(ID "semaphore_tracker")
(PUNCT ".")
(ID "getfd")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "allfds")
(PUNCT "+=")
(ID "fds")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reduction")
(PUNCT ".")
(ID "sendfds")
(PUNCT "(")
(ID "client")
(PUNCT ",")
(ID "allfds")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "parent_r")
(PUNCT ",")
(ID "parent_w")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "parent_r")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "parent_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "child_r")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "child_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "ensure_running")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make sure that a fork server is running.\n\n        This can be called from any process.  Note that usually a child\n        process will just reuse the forkserver started by its parent, so\n        ensure_running() will do nothing.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "semaphore_tracker")
(PUNCT ".")
(ID "ensure_running")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_forkserver_alive_fd")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "cmd")
(PUNCT "=")
(PUNCT "(")
(LIT "from multiprocessing.forkserver import main; ")
(PUNCT "+")
(LIT "main(%d, %d, %r, **%r)")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_preload_modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "desired_keys")
(PUNCT "=")
(PUNCT "{")
(LIT "main_path")
(PUNCT ",")
(LIT "sys_path")
(PUNCT "}")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "spawn")
(PUNCT ".")
(ID "get_preparation_data")
(PUNCT "(")
(LIT "ignore")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(KEYWORD for)
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(KEYWORD in)
(ID "data")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(KEYWORD in)
(ID "desired_keys")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ")")
(KEYWORD as)
(ID "listener")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "address")
(PUNCT "=")
(ID "connection")
(PUNCT ".")
(ID "arbitrary_address")
(PUNCT "(")
(LIT "AF_UNIX")
(PUNCT ")")
(NEWLINE)
(ID "listener")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "address")
(PUNCT ",")
(LIT 384)
(PUNCT ")")
(NEWLINE)
(ID "listener")
(PUNCT ".")
(ID "listen")
(PUNCT "(")
(LIT 100)
(PUNCT ")")
(NEWLINE)
(ID "alive_r")
(PUNCT ",")
(ID "alive_w")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fds_to_pass")
(PUNCT "=")
(PUNCT "[")
(ID "listener")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "alive_r")
(PUNCT "]")
(NEWLINE)
(ID "cmd")
(PUNCT "%=")
(PUNCT "(")
(ID "listener")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "alive_r")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_preload_modules")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "exe")
(PUNCT "=")
(ID "spawn")
(PUNCT ".")
(ID "get_executable")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "exe")
(PUNCT "]")
(PUNCT "+")
(ID "util")
(PUNCT ".")
(ID "_args_from_interpreter_flags")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "+=")
(PUNCT "[")
(LIT "-c")
(PUNCT ",")
(ID "cmd")
(PUNCT "]")
(NEWLINE)
(ID "pid")
(PUNCT "=")
(ID "util")
(PUNCT ".")
(ID "spawnv_passfds")
(PUNCT "(")
(ID "exe")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "fds_to_pass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "alive_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "alive_r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_forkserver_address")
(PUNCT "=")
(ID "address")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_forkserver_alive_fd")
(PUNCT "=")
(ID "alive_w")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "listener_fd")
(PUNCT ",")
(ID "alive_r")
(PUNCT ",")
(ID "preload")
(PUNCT ",")
(ID "main_path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "sys_path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run forkserver.")
(NEWLINE)
(KEYWORD if)
(ID "preload")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "__main__")
(KEYWORD in)
(ID "preload")
(KEYWORD and)
(ID "main_path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "process")
(PUNCT ".")
(ID "current_process")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_inheriting")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spawn")
(PUNCT ".")
(ID "import_main_path")
(PUNCT "(")
(ID "main_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "process")
(PUNCT ".")
(ID "current_process")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_inheriting")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "modname")
(KEYWORD in)
(ID "preload")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "modname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "devnull")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "handler")
(PUNCT "=")
(ID "signal")
(PUNCT ".")
(ID "signal")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGCHLD")
(PUNCT ",")
(ID "signal")
(PUNCT ".")
(ID "SIG_IGN")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "fileno")
(PUNCT "=")
(ID "listener_fd")
(PUNCT ")")
(KEYWORD as)
(ID "listener")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "DefaultSelector")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "selector")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_forkserver")
(PUNCT ".")
(ID "_forkserver_address")
(PUNCT "=")
(ID "listener")
(PUNCT ".")
(ID "getsockname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "selector")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "listener")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_READ")
(PUNCT ")")
(NEWLINE)
(ID "selector")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "alive_r")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_READ")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rfds")
(PUNCT "=")
(PUNCT "[")
(ID "key")
(PUNCT ".")
(ID "fileobj")
(KEYWORD for)
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "events")
(PUNCT ")")
(KEYWORD in)
(ID "selector")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "rfds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "alive_r")
(KEYWORD in)
(ID "rfds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "os")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "alive_r")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "==")
(LIT #"")
(NEWLINE)
(KEYWORD raise)
(ID "SystemExit")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "listener")
(KEYWORD in)
(ID "rfds")
(NEWLINE)
(KEYWORD with)
(ID "listener")
(PUNCT ".")
(ID "accept")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD as)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "fork")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_serve_one")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "listener")
(PUNCT ",")
(ID "alive_r")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(PUNCT "(")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "_exit")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "InterruptedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "ECONNABORTED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_serve_one")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "listener")
(PUNCT ",")
(ID "alive_r")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "listener")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "alive_r")
(PUNCT ")")
(NEWLINE)
(ID "signal")
(PUNCT ".")
(ID "signal")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGCHLD")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(ID "fds")
(PUNCT "=")
(ID "reduction")
(PUNCT ".")
(ID "recvfds")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "MAXFDS_TO_SEND")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "fds")
(PUNCT ")")
(PUNCT "<=")
(ID "MAXFDS_TO_SEND")
(NEWLINE)
(PUNCT "(")
(ID "child_r")
(PUNCT ",")
(ID "child_w")
(PUNCT ",")
(ID "_forkserver")
(PUNCT ".")
(ID "_forkserver_alive_fd")
(PUNCT ",")
(ID "stfd")
(PUNCT ",")
(PUNCT "*")
(ID "_forkserver")
(PUNCT ".")
(ID "_inherited_fds")
(PUNCT ")")
(PUNCT "=")
(ID "fds")
(NEWLINE)
(ID "semaphore_tracker")
(PUNCT ".")
(ID "_semaphore_tracker")
(PUNCT ".")
(ID "_fd")
(PUNCT "=")
(ID "stfd")
(NEWLINE)
(ID "write_unsigned")
(PUNCT "(")
(ID "child_w")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "random")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "random")
(NEWLINE)
(ID "random")
(PUNCT ".")
(ID "seed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT "=")
(ID "spawn")
(PUNCT ".")
(ID "_main")
(PUNCT "(")
(ID "child_r")
(PUNCT ")")
(NEWLINE)
(ID "write_unsigned")
(PUNCT "(")
(ID "child_w")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_unsigned")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "length")
(PUNCT "=")
(ID "UNSIGNED_STRUCT")
(PUNCT ".")
(ID "size")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "<")
(ID "length")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "length")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "InterruptedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EOFError")
(PUNCT "(")
(LIT "unexpected EOF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "+=")
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "UNSIGNED_STRUCT")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_unsigned")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "UNSIGNED_STRUCT")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nbytes")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "InterruptedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "nbytes")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "should not get here")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT "[")
(ID "nbytes")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_forkserver")
(PUNCT "=")
(ID "ForkServer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ensure_running")
(PUNCT "=")
(ID "_forkserver")
(PUNCT ".")
(ID "ensure_running")
(NEWLINE)
(ID "get_inherited_fds")
(PUNCT "=")
(ID "_forkserver")
(PUNCT ".")
(ID "get_inherited_fds")
(NEWLINE)
(ID "connect_to_new_process")
(PUNCT "=")
(ID "_forkserver")
(PUNCT ".")
(ID "connect_to_new_process")
(NEWLINE)
(ID "set_forkserver_preload")
(PUNCT "=")
(ID "_forkserver")
(PUNCT ".")
(ID "set_forkserver_preload")
(NEWLINE)
(ENDMARKER)
