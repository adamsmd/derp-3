(LIT "Append module search paths for third-party packages to sys.path.\n\n****************************************************************\n* This module is automatically imported during initialization. *\n****************************************************************\n\nThis will append site-specific paths to the module search path.  On\nUnix (including Mac OSX), it starts with sys.prefix and\nsys.exec_prefix (if different) and appends\nlib/python3/dist-packages as well as lib/site-python.\nOn other platforms (such as Windows), it tries each of the\nprefixes directly, as well as with lib/site-packages appended.  The\nresulting directories, if they exist, are appended to sys.path, and\nalso inspected for path configuration files.\n\nFor Debian and derivatives, this sys.path is augmented with directories\nfor packages distributed within the distribution. Local addons go\ninto /usr/local/lib/python<version>/dist-packages, Debian addons\ninstall into /usr/lib/python3/dist-packages.\n/usr/lib/python<version>/site-packages is not used.\n\nIf a file named \"pyvenv.cfg\" exists one directory above sys.executable,\nsys.prefix and sys.exec_prefix are set to that directory and\nit is also checked for site-packages and site-python (sys.base_prefix and\nsys.base_exec_prefix will always be the \"real\" prefixes of the Python\ninstallation). If \"pyvenv.cfg\" (a bootstrap configuration file) contains\nthe key \"include-system-site-packages\" set to anything other than \"false\"\n(case-insensitive), the system-level prefixes will still also be\nsearched for site-packages; otherwise they won't.\n\nAll of the resulting site-specific directories, if they exist, are\nappended to sys.path, and also inspected for path configuration\nfiles.\n\nA path configuration file is a file whose name has the form\n<package>.pth; its contents are additional directories (one per line)\nto be added to sys.path.  Non-existing directories (or\nnon-directories) are never added to sys.path; no directory is added to\nsys.path more than once.  Blank lines and lines beginning with\n'#' are skipped. Lines starting with 'import' are executed.\n\nFor example, suppose sys.prefix and sys.exec_prefix are set to\n/usr/local and there is a directory /usr/local/lib/python2.5/site-packages\nwith three subdirectories, foo, bar and spam, and two path\nconfiguration files, foo.pth and bar.pth.  Assume foo.pth contains the\nfollowing:\n\n  # foo package configuration\n  foo\n  bar\n  bletch\n\nand bar.pth contains:\n\n  # bar package configuration\n  bar\n\nThen the following directories are added to sys.path, in this order:\n\n  /usr/local/lib/python2.5/site-packages/bar\n  /usr/local/lib/python2.5/site-packages/foo\n\nNote that bletch is omitted because it doesn't exist; bar precedes foo\nbecause bar.pth comes alphabetically before foo.pth; and spam is\nomitted because it is not mentioned in either path configuration file.\n\nThe readline module is also automatically configured to enable\ncompletion for systems that support it.  This can be overriden in\nsitecustomize, usercustomize or PYTHONSTARTUP.\n\nAfter these operations, an attempt is made to import a module\nnamed sitecustomize, which can perform arbitrary additional\nsite-specific customizations.  If this import fails with an\nImportError exception, it is silently ignored.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(KEYWORD import)
(ID "_sitebuiltins")
(NEWLINE)
(ID "PREFIXES")
(PUNCT "=")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT "]")
(NEWLINE)
(ID "ENABLE_USER_SITE")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "USER_SITE")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "USER_BASE")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "makepath")
(PUNCT "(")
(PUNCT "*")
(ID "paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "paths")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normcase")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "abs_paths")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set all module __file__ and __cached__ attributes to an absolute path")
(NEWLINE)
(KEYWORD for)
(ID "m")
(KEYWORD in)
(ID "set")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "m")
(PUNCT ",")
(LIT "__loader__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(LIT "__module__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "!=")
(LIT "_frozen_importlib")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT ".")
(ID "__file__")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT ".")
(ID "__cached__")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "__cached__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "removeduppaths")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Remove duplicate entries from sys.path along with making them\n    absolute")
(NEWLINE)
(ID "L")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "known_paths")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT ",")
(ID "dircase")
(PUNCT "=")
(ID "makepath")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dircase")
(KEYWORD in)
(ID "known_paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "L")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(ID "known_paths")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "dircase")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "L")
(NEWLINE)
(KEYWORD return)
(ID "known_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init_pathinfo")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a set containing all existing directory entries from sys.path")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT ",")
(ID "dircase")
(PUNCT "=")
(ID "makepath")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "dircase")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addpackage")
(PUNCT "(")
(ID "sitedir")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "known_paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a .pth file within the site-packages directory:\n       For each line in the file, either combine it with sitedir to a path\n       and add that to known_paths, or execute it if it starts with 'import '.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "known_paths")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "known_paths")
(PUNCT "=")
(ID "_init_pathinfo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "reset")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "fullname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sitedir")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "n")
(PUNCT ",")
(ID "line")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "#")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(PUNCT "(")
(LIT "import ")
(PUNCT ",")
(LIT "import\t")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dir")
(PUNCT ",")
(ID "dircase")
(PUNCT "=")
(ID "makepath")
(PUNCT "(")
(ID "sitedir")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dircase")
(KEYWORD in)
(ID "known_paths")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(ID "known_paths")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "dircase")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Error processing line {:d} of {}:\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "n")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD for)
(ID "record")
(KEYWORD in)
(ID "traceback")
(PUNCT ".")
(ID "format_exception")
(PUNCT "(")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "record")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "  ")
(PUNCT "+")
(ID "line")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "\nRemainder of file ignored")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "reset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "known_paths")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "known_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addsitedir")
(PUNCT "(")
(ID "sitedir")
(PUNCT ",")
(ID "known_paths")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'")
(NEWLINE)
(KEYWORD if)
(ID "known_paths")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "known_paths")
(PUNCT "=")
(ID "_init_pathinfo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "reset")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "sitedir")
(PUNCT ",")
(ID "sitedircase")
(PUNCT "=")
(ID "makepath")
(PUNCT "(")
(ID "sitedir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "sitedircase")
(KEYWORD in)
(ID "known_paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sitedir")
(PUNCT ")")
(NEWLINE)
(ID "known_paths")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "sitedircase")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "sitedir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(ID "name")
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".pth")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addpackage")
(PUNCT "(")
(ID "sitedir")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "reset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "known_paths")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "known_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_enableusersite")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if user site directory is safe for inclusion\n\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "no_user_site")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "getuid")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "geteuid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "geteuid")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "getuid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "getgid")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "getegid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "getegid")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "getgid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getuserbase")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the `user base` directory path.\n\n    The `user base` directory can be used to store data. If the global\n    variable ``USER_BASE`` is not initialized yet, this function will also set\n    it.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "USER_BASE")
(NEWLINE)
(KEYWORD if)
(ID "USER_BASE")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "USER_BASE")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "sysconfig")
(KEYWORD import)
(ID "get_config_var")
(NEWLINE)
(ID "USER_BASE")
(PUNCT "=")
(ID "get_config_var")
(PUNCT "(")
(LIT "userbase")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "USER_BASE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getusersitepackages")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the user-specific site-packages directory path.\n\n    If the global variable ``USER_SITE`` is not initialized yet, this\n    function will also set it.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "USER_SITE")
(NEWLINE)
(ID "user_base")
(PUNCT "=")
(ID "getuserbase")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "USER_SITE")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "USER_SITE")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "sysconfig")
(KEYWORD import)
(ID "get_path")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "sysconfig")
(KEYWORD import)
(ID "get_config_var")
(NEWLINE)
(KEYWORD if)
(ID "get_config_var")
(PUNCT "(")
(LIT "PYTHONFRAMEWORK")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "USER_SITE")
(PUNCT "=")
(ID "get_path")
(PUNCT "(")
(LIT "purelib")
(PUNCT ",")
(LIT "osx_framework_user")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "USER_SITE")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "USER_SITE")
(PUNCT "=")
(ID "get_path")
(PUNCT "(")
(LIT "purelib")
(PUNCT ",")
(LIT "%s_user")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "USER_SITE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addusersitepackages")
(PUNCT "(")
(ID "known_paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a per user site-package to sys.path\n\n    Each user has its own python directory with site-packages in the\n    home directory.\n    ")
(NEWLINE)
(ID "user_site")
(PUNCT "=")
(ID "getusersitepackages")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ENABLE_USER_SITE")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "user_site")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addsitedir")
(PUNCT "(")
(ID "user_site")
(PUNCT ",")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ENABLE_USER_SITE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "dist_libdir")
(KEYWORD in)
(PUNCT "(")
(LIT "lib")
(PUNCT ",")
(LIT "local/lib")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_site")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "USER_BASE")
(PUNCT ",")
(ID "dist_libdir")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "dist-packages")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "user_site")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addsitedir")
(PUNCT "(")
(ID "user_site")
(PUNCT ",")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "known_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsitepackages")
(PUNCT "(")
(ID "prefixes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a list containing all global site-packages directories\n    (and possibly site-python).\n\n    For each directory present in ``prefixes`` (or the global ``PREFIXES``),\n    this function will find its `site-packages` subdirectory depending on the\n    system environment, and will return a list of full paths.\n    ")
(NEWLINE)
(ID "sitepackages")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "seen")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "prefixes")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefixes")
(PUNCT "=")
(ID "PREFIXES")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "prefix")
(KEYWORD in)
(ID "prefixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "prefix")
(KEYWORD or)
(ID "prefix")
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "==")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "VIRTUAL_ENV")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD or)
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT "!=")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "local/lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "dist-packages")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python3")
(PUNCT ",")
(LIT "dist-packages")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "dist-packages")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "dist-python")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "sysconfig")
(KEYWORD import)
(ID "get_config_var")
(NEWLINE)
(ID "framework")
(PUNCT "=")
(ID "get_config_var")
(PUNCT "(")
(LIT "PYTHONFRAMEWORK")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "framework")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sitepackages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(LIT "/Library")
(PUNCT ",")
(ID "framework")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "sitepackages")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addsitepackages")
(PUNCT "(")
(ID "known_paths")
(PUNCT ",")
(ID "prefixes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add site-packages (and possibly site-python) to sys.path")
(NEWLINE)
(KEYWORD for)
(ID "sitedir")
(KEYWORD in)
(ID "getsitepackages")
(PUNCT "(")
(ID "prefixes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "sitedir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "site-python")
(KEYWORD in)
(ID "sitedir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "\"site-python\" directories will not be ")
(LIT "supported in 3.5 anymore")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "addsitedir")
(PUNCT "(")
(ID "sitedir")
(PUNCT ",")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "known_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setquit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Define new builtins 'quit' and 'exit'.\n\n    These are objects which make the interpreter exit when called.\n    The repr of each object contains a hint at how it works.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "==")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eof")
(PUNCT "=")
(LIT "Cmd-Q")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eof")
(PUNCT "=")
(LIT "Ctrl-Z plus Return")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eof")
(PUNCT "=")
(LIT "Ctrl-D (i.e. EOF)")
(NEWLINE)
(DEDENT)
(ID "builtins")
(PUNCT ".")
(ID "quit")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "Quitter")
(PUNCT "(")
(LIT "quit")
(PUNCT ",")
(ID "eof")
(PUNCT ")")
(NEWLINE)
(ID "builtins")
(PUNCT ".")
(ID "exit")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "Quitter")
(PUNCT "(")
(LIT "exit")
(PUNCT ",")
(ID "eof")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setcopyright")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set 'copyright' and 'credits' in builtins")
(NEWLINE)
(ID "builtins")
(PUNCT ".")
(ID "copyright")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "_Printer")
(PUNCT "(")
(LIT "copyright")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "copyright")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "java")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtins")
(PUNCT ".")
(ID "credits")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "_Printer")
(PUNCT "(")
(LIT "credits")
(PUNCT ",")
(LIT "Jython is maintained by the Jython developers (www.jython.org).")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtins")
(PUNCT ".")
(ID "credits")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "_Printer")
(PUNCT "(")
(LIT "credits")
(PUNCT ",")
(LIT "    Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands\n    for supporting Python development.  See www.python.org for more information.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "files")
(PUNCT ",")
(ID "dirs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "__file__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "here")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(ID "files")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "LICENSE.txt")
(PUNCT ",")
(LIT "LICENSE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "here")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(PUNCT ",")
(ID "here")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "builtins")
(PUNCT ".")
(ID "license")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "_Printer")
(PUNCT "(")
(LIT "license")
(PUNCT ",")
(LIT "See https://www.python.org/psf/license/")
(PUNCT ",")
(ID "files")
(PUNCT ",")
(ID "dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sethelper")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtins")
(PUNCT ".")
(ID "help")
(PUNCT "=")
(ID "_sitebuiltins")
(PUNCT ".")
(ID "_Helper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "enablerlcompleter")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Enable default readline configuration on interactive prompts, by\n    registering a sys.__interactivehook__.\n\n    If the readline module can be imported, the hook will set the Tab key\n    as completion key and register ~/.python_history as history file.\n    This can be overriden in the sitecustomize or usercustomize module,\n    or in a PYTHONSTARTUP file.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "register_readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "atexit")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "readline")
(NEWLINE)
(KEYWORD import)
(ID "rlcompleter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "readline_doc")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(LIT "__doc__")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "readline_doc")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(LIT "libedit")
(KEYWORD in)
(ID "readline_doc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readline")
(PUNCT ".")
(ID "parse_and_bind")
(PUNCT "(")
(LIT "bind ^I rl_complete")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readline")
(PUNCT ".")
(ID "parse_and_bind")
(PUNCT "(")
(LIT "tab: complete")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readline")
(PUNCT ".")
(ID "read_init_file")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "readline")
(PUNCT ".")
(ID "get_current_history_length")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "history")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expanduser")
(PUNCT "(")
(LIT "~")
(PUNCT ")")
(PUNCT ",")
(LIT ".python_history")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readline")
(PUNCT ".")
(ID "read_history_file")
(PUNCT "(")
(ID "history")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IOError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "atexit")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "readline")
(PUNCT ".")
(ID "write_history_file")
(PUNCT ",")
(ID "history")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "__interactivehook__")
(PUNCT "=")
(ID "register_readline")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "aliasmbcs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "On Windows, some default encodings are not provided by Python,\n    while they are always available as \"mbcs\" in each locale. Make\n    them usable by aliasing to \"mbcs\" in such a case.")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_bootlocale")
(PUNCT ",")
(ID "codecs")
(NEWLINE)
(ID "enc")
(PUNCT "=")
(ID "_bootlocale")
(PUNCT ".")
(ID "getpreferredencoding")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "enc")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "cp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "codecs")
(PUNCT ".")
(ID "lookup")
(PUNCT "(")
(ID "enc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "LookupError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "encodings")
(NEWLINE)
(ID "encodings")
(PUNCT ".")
(ID "_cache")
(PUNCT "[")
(ID "enc")
(PUNCT "]")
(PUNCT "=")
(ID "encodings")
(PUNCT ".")
(ID "_unknown")
(NEWLINE)
(ID "encodings")
(PUNCT ".")
(ID "aliases")
(PUNCT ".")
(ID "aliases")
(PUNCT "[")
(ID "enc")
(PUNCT "]")
(PUNCT "=")
(LIT "mbcs")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "CONFIG_LINE")
(PUNCT "=")
(LIT "^(?P<key>(\\w|[-_])+)\\s*=\\s*(?P<value>.*)\\s*$")
(NEWLINE)
(KEYWORD def)
(ID "venv")
(PUNCT "(")
(ID "known_paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "PREFIXES")
(PUNCT ",")
(ID "ENABLE_USER_SITE")
(NEWLINE)
(ID "env")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(KEYWORD and)
(LIT "__PYVENV_LAUNCHER__")
(KEYWORD in)
(ID "env")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "__PYVENV_LAUNCHER__")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "executable")
(NEWLINE)
(DEDENT)
(ID "exe_dir")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "site_prefix")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "exe_dir")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "_home")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "conf_basename")
(PUNCT "=")
(LIT "pyvenv.cfg")
(NEWLINE)
(ID "candidate_confs")
(PUNCT "=")
(PUNCT "[")
(ID "conffile")
(KEYWORD for)
(ID "conffile")
(KEYWORD in)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "exe_dir")
(PUNCT ",")
(ID "conf_basename")
(PUNCT ")")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "site_prefix")
(PUNCT ",")
(ID "conf_basename")
(PUNCT ")")
(PUNCT ")")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "conffile")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "candidate_confs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "config_line")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "CONFIG_LINE")
(PUNCT ")")
(NEWLINE)
(ID "virtual_conf")
(PUNCT "=")
(ID "candidate_confs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "system_site")
(PUNCT "=")
(LIT "true")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "virtual_conf")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "config_line")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groupdict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(LIT "key")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "d")
(PUNCT "[")
(LIT "value")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "key")
(PUNCT "==")
(LIT "include-system-site-packages")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system_site")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(PUNCT "==")
(LIT "home")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "_home")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT "=")
(ID "site_prefix")
(NEWLINE)
(ID "addsitepackages")
(PUNCT "(")
(ID "known_paths")
(PUNCT ",")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "system_site")
(PUNCT "==")
(LIT "true")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PREFIXES")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PREFIXES")
(PUNCT "=")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT "]")
(NEWLINE)
(ID "ENABLE_USER_SITE")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "known_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "execsitecustomize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run custom site specific code, if available.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sitecustomize")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PYTHONVERBOSE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(PUNCT "(")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Error in sitecustomize; set PYTHONVERBOSE for traceback:\n")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "execusercustomize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run custom user specific code, if available.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "usercustomize")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PYTHONVERBOSE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(PUNCT "(")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Error in usercustomize; set PYTHONVERBOSE for traceback:\n")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add standard site-specific directories to the module search path.\n\n    This function is called automatically when this module is imported,\n    unless the python interpreter was started with the -S flag.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "ENABLE_USER_SITE")
(NEWLINE)
(ID "abs_paths")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "known_paths")
(PUNCT "=")
(ID "removeduppaths")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "known_paths")
(PUNCT "=")
(ID "venv")
(PUNCT "(")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ENABLE_USER_SITE")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ENABLE_USER_SITE")
(PUNCT "=")
(ID "check_enableusersite")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "known_paths")
(PUNCT "=")
(ID "addusersitepackages")
(PUNCT "(")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(ID "known_paths")
(PUNCT "=")
(ID "addsitepackages")
(PUNCT "(")
(ID "known_paths")
(PUNCT ")")
(NEWLINE)
(ID "setquit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "setcopyright")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sethelper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "enablerlcompleter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "aliasmbcs")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "execsitecustomize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ENABLE_USER_SITE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "execusercustomize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "no_site")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_script")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "help")
(PUNCT "=")
(LIT "    %s [--user-base] [--user-site]\n\n    Without arguments print some useful information\n    With arguments print the value of USER_BASE and/or USER_SITE separated\n    by '%s'.\n\n    Exit codes with --user-base or --user-site:\n      0 - user site directory is enabled\n      1 - user site directory is disabled by user\n      2 - uses site directory is disabled by super user\n          or for security reasons\n     >2 - unknown error\n    ")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_base")
(PUNCT "=")
(ID "getuserbase")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "user_site")
(PUNCT "=")
(ID "getusersitepackages")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "sys.path = [")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "    %r,")
(PUNCT "%")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "]")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "USER_BASE: %r (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "user_base")
(PUNCT ",")
(LIT "exists")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "user_base")
(PUNCT ")")
(KEYWORD else)
(LIT "doesn't exist")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "USER_SITE: %r (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "user_site")
(PUNCT ",")
(LIT "exists")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "user_site")
(PUNCT ")")
(KEYWORD else)
(LIT "doesn't exist")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "ENABLE_USER_SITE: %r")
(PUNCT "%")
(ID "ENABLE_USER_SITE")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "--user-base")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "USER_BASE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "--user-site")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "USER_SITE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "buffer")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ENABLE_USER_SITE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ENABLE_USER_SITE")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ENABLE_USER_SITE")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "textwrap")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "textwrap")
(PUNCT ".")
(ID "dedent")
(PUNCT "(")
(ID "help")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 10)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_script")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
