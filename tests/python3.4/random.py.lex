(LIT "Random variable generators.\n\n    integers\n    --------\n           uniform within range\n\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           generate random permutation\n\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\n\nGeneral notes on the underlying Mersenne Twister core generator:\n\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\n")
(NEWLINE)
(KEYWORD from)
(ID "warnings")
(KEYWORD import)
(ID "warn")
(KEYWORD as)
(ID "_warn")
(NEWLINE)
(KEYWORD from)
(ID "types")
(KEYWORD import)
(ID "MethodType")
(KEYWORD as)
(ID "_MethodType")
(PUNCT ",")
(ID "BuiltinMethodType")
(KEYWORD as)
(ID "_BuiltinMethodType")
(NEWLINE)
(KEYWORD from)
(ID "math")
(KEYWORD import)
(ID "log")
(KEYWORD as)
(ID "_log")
(PUNCT ",")
(ID "exp")
(KEYWORD as)
(ID "_exp")
(PUNCT ",")
(ID "pi")
(KEYWORD as)
(ID "_pi")
(PUNCT ",")
(ID "e")
(KEYWORD as)
(ID "_e")
(PUNCT ",")
(ID "ceil")
(KEYWORD as)
(ID "_ceil")
(NEWLINE)
(KEYWORD from)
(ID "math")
(KEYWORD import)
(ID "sqrt")
(KEYWORD as)
(ID "_sqrt")
(PUNCT ",")
(ID "acos")
(KEYWORD as)
(ID "_acos")
(PUNCT ",")
(ID "cos")
(KEYWORD as)
(ID "_cos")
(PUNCT ",")
(ID "sin")
(KEYWORD as)
(ID "_sin")
(NEWLINE)
(KEYWORD from)
(ID "os")
(KEYWORD import)
(ID "urandom")
(KEYWORD as)
(ID "_urandom")
(NEWLINE)
(KEYWORD from)
(ID "_collections_abc")
(KEYWORD import)
(ID "Set")
(KEYWORD as)
(ID "_Set")
(PUNCT ",")
(ID "Sequence")
(KEYWORD as)
(ID "_Sequence")
(NEWLINE)
(KEYWORD from)
(ID "hashlib")
(KEYWORD import)
(ID "sha512")
(KEYWORD as)
(ID "_sha512")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Random")
(PUNCT ",")
(LIT "seed")
(PUNCT ",")
(LIT "random")
(PUNCT ",")
(LIT "uniform")
(PUNCT ",")
(LIT "randint")
(PUNCT ",")
(LIT "choice")
(PUNCT ",")
(LIT "sample")
(PUNCT ",")
(LIT "randrange")
(PUNCT ",")
(LIT "shuffle")
(PUNCT ",")
(LIT "normalvariate")
(PUNCT ",")
(LIT "lognormvariate")
(PUNCT ",")
(LIT "expovariate")
(PUNCT ",")
(LIT "vonmisesvariate")
(PUNCT ",")
(LIT "gammavariate")
(PUNCT ",")
(LIT "triangular")
(PUNCT ",")
(LIT "gauss")
(PUNCT ",")
(LIT "betavariate")
(PUNCT ",")
(LIT "paretovariate")
(PUNCT ",")
(LIT "weibullvariate")
(PUNCT ",")
(LIT "getstate")
(PUNCT ",")
(LIT "setstate")
(PUNCT ",")
(LIT "getrandbits")
(PUNCT ",")
(LIT "SystemRandom")
(PUNCT "]")
(NEWLINE)
(ID "NV_MAGICCONST")
(PUNCT "=")
(LIT 4)
(PUNCT "*")
(ID "_exp")
(PUNCT "(")
(PUNCT "-")
(LIT 0.5)
(PUNCT ")")
(PUNCT "/")
(ID "_sqrt")
(PUNCT "(")
(LIT 2.0)
(PUNCT ")")
(NEWLINE)
(ID "TWOPI")
(PUNCT "=")
(LIT 2.0)
(PUNCT "*")
(ID "_pi")
(NEWLINE)
(ID "LOG4")
(PUNCT "=")
(ID "_log")
(PUNCT "(")
(LIT 4.0)
(PUNCT ")")
(NEWLINE)
(ID "SG_MAGICCONST")
(PUNCT "=")
(LIT 1.0)
(PUNCT "+")
(ID "_log")
(PUNCT "(")
(LIT 4.5)
(PUNCT ")")
(NEWLINE)
(ID "BPF")
(PUNCT "=")
(LIT 53)
(NEWLINE)
(ID "RECIP_BPF")
(PUNCT "=")
(LIT 2)
(PUNCT "**")
(PUNCT "-")
(ID "BPF")
(NEWLINE)
(KEYWORD import)
(ID "_random")
(NEWLINE)
(KEYWORD class)
(ID "Random")
(PUNCT "(")
(ID "_random")
(PUNCT ".")
(ID "Random")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n\n    ")
(NEWLINE)
(ID "VERSION")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize an instance.\n\n        Optional argument x controls seeding, as for Random.seed().\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "seed")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1, the hash() of *a* is used instead.\n\n        If *a* is an int, all bits are used.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "a")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "_urandom")
(PUNCT "(")
(LIT 2500)
(PUNCT ")")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NotImplementedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "time")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "*")
(LIT 256)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "version")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT "=")
(ID "a")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "a")
(PUNCT "+=")
(ID "_sha512")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "seed")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getstate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return internal state; can be passed to setstate() later.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "VERSION")
(PUNCT ",")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "getstate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setstate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Restore internal state from object returned by getstate().")
(NEWLINE)
(ID "version")
(PUNCT "=")
(ID "state")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "version")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT ",")
(ID "internalstate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(PUNCT "=")
(ID "state")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "setstate")
(PUNCT "(")
(ID "internalstate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "version")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT ",")
(ID "internalstate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(PUNCT "=")
(ID "state")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "internalstate")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "x")
(PUNCT "%")
(PUNCT "(")
(LIT 2)
(PUNCT "**")
(LIT 32)
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "internalstate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(KEYWORD from)
(ID "e")
(NEWLINE)
(DEDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "setstate")
(PUNCT "(")
(ID "internalstate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "state with version %s passed to ")
(LIT "Random.setstate() of version %s")
(PUNCT "%")
(PUNCT "(")
(ID "version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "VERSION")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__getstate__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getstate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setstate__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "setstate")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__reduce__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getstate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "randrange")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "stop")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "step")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "_int")
(PUNCT "=")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n\n        ")
(NEWLINE)
(ID "istart")
(PUNCT "=")
(ID "_int")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "istart")
(PUNCT "!=")
(ID "start")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-integer arg 1 for randrange()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stop")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "istart")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_randbelow")
(PUNCT "(")
(ID "istart")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "empty range for randrange()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "istop")
(PUNCT "=")
(ID "_int")
(PUNCT "(")
(ID "stop")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "istop")
(PUNCT "!=")
(ID "stop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-integer stop for randrange()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "width")
(PUNCT "=")
(ID "istop")
(PUNCT "-")
(ID "istart")
(NEWLINE)
(KEYWORD if)
(ID "step")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "width")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "istart")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_randbelow")
(PUNCT "(")
(ID "width")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "step")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "empty range for randrange() (%d,%d, %d)")
(PUNCT "%")
(PUNCT "(")
(ID "istart")
(PUNCT ",")
(ID "istop")
(PUNCT ",")
(ID "width")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "istep")
(PUNCT "=")
(ID "_int")
(PUNCT "(")
(ID "step")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "istep")
(PUNCT "!=")
(ID "step")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-integer step for randrange()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "istep")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(PUNCT "(")
(ID "width")
(PUNCT "+")
(ID "istep")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "//")
(ID "istep")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "istep")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(PUNCT "(")
(ID "width")
(PUNCT "+")
(ID "istep")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "//")
(ID "istep")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "zero step for randrange()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "empty range for randrange()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "istart")
(PUNCT "+")
(ID "istep")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_randbelow")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "randint")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return random integer in range [a, b], including both end points.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "randrange")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_randbelow")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ",")
(ID "int")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "maxsize")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(ID "BPF")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ",")
(ID "Method")
(PUNCT "=")
(ID "_MethodType")
(PUNCT ",")
(ID "BuiltinMethod")
(PUNCT "=")
(ID "_BuiltinMethodType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a random int in the range [0,n).  Raises ValueError if n==0.")
(NEWLINE)
(ID "random")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "random")
(NEWLINE)
(ID "getrandbits")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getrandbits")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "random")
(PUNCT ")")
(KEYWORD is)
(ID "BuiltinMethod")
(KEYWORD or)
(ID "type")
(PUNCT "(")
(ID "getrandbits")
(PUNCT ")")
(KEYWORD is)
(ID "Method")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "n")
(PUNCT ".")
(ID "bit_length")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "getrandbits")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "r")
(PUNCT ">=")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "getrandbits")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT ">=")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warn")
(PUNCT "(")
(LIT "Underlying random() generator does not supply \n")
(LIT "enough bits to choose from a population range this large.\n")
(LIT "To remove the range limitation, add a getrandbits() method.")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(PUNCT "*")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rem")
(PUNCT "=")
(ID "maxsize")
(PUNCT "%")
(ID "n")
(NEWLINE)
(ID "limit")
(PUNCT "=")
(PUNCT "(")
(ID "maxsize")
(PUNCT "-")
(ID "rem")
(PUNCT ")")
(PUNCT "/")
(ID "maxsize")
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "r")
(PUNCT ">=")
(ID "limit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "r")
(PUNCT "*")
(ID "maxsize")
(PUNCT ")")
(PUNCT "%")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "choice")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "seq")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Choose a random element from a non-empty sequence.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_randbelow")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IndexError")
(PUNCT "(")
(LIT "Cannot choose from an empty sequence")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "seq")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shuffle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "random")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shuffle list x in place, and return None.\n\n        Optional argument random is a 0-argument function returning a\n        random float in [0.0, 1.0); if it is the default None, the\n        standard random.random will be used.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "random")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "randbelow")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_randbelow")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "=")
(ID "randbelow")
(PUNCT "(")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "x")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "=")
(ID "x")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT ",")
(ID "x")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_int")
(PUNCT "=")
(ID "int")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "=")
(ID "_int")
(PUNCT "(")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(PUNCT "*")
(PUNCT "(")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "x")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "=")
(ID "x")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT ",")
(ID "x")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "sample")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "population")
(PUNCT ",")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Chooses k unique random elements from a population sequence or set.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        To choose a sample in a range of integers, use range as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(range(10000000), 60)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "population")
(PUNCT ",")
(ID "_Set")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "population")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "population")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "population")
(PUNCT ",")
(ID "_Sequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Population must be a sequence or set.  For dicts, use list(d).")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "randbelow")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_randbelow")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "population")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "k")
(PUNCT "<=")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Sample larger than population")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "*")
(ID "k")
(NEWLINE)
(ID "setsize")
(PUNCT "=")
(LIT 21)
(NEWLINE)
(KEYWORD if)
(ID "k")
(PUNCT ">")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setsize")
(PUNCT "+=")
(LIT 4)
(PUNCT "**")
(ID "_ceil")
(PUNCT "(")
(ID "_log")
(PUNCT "(")
(ID "k")
(PUNCT "*")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "<=")
(ID "setsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pool")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "population")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "=")
(ID "randbelow")
(PUNCT "(")
(ID "n")
(PUNCT "-")
(ID "i")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "pool")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(NEWLINE)
(ID "pool")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "=")
(ID "pool")
(PUNCT "[")
(ID "n")
(PUNCT "-")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selected")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "selected_add")
(PUNCT "=")
(ID "selected")
(PUNCT ".")
(ID "add")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "=")
(ID "randbelow")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "j")
(KEYWORD in)
(ID "selected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "=")
(ID "randbelow")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "selected_add")
(PUNCT "(")
(ID "j")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "population")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "uniform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a random number in the range [a, b) or [a, b] depending on rounding.")
(NEWLINE)
(KEYWORD return)
(ID "a")
(PUNCT "+")
(PUNCT "(")
(ID "b")
(PUNCT "-")
(ID "a")
(PUNCT ")")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "triangular")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "low")
(PUNCT "=")
(LIT 0.0)
(PUNCT ",")
(ID "high")
(PUNCT "=")
(LIT 1.0)
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Triangular distribution.\n\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n\n        http://en.wikipedia.org/wiki/Triangular_distribution\n\n        ")
(NEWLINE)
(ID "u")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(LIT 0.5)
(KEYWORD if)
(ID "mode")
(KEYWORD is)
(KEYWORD None)
(KEYWORD else)
(PUNCT "(")
(ID "mode")
(PUNCT "-")
(ID "low")
(PUNCT ")")
(PUNCT "/")
(PUNCT "(")
(ID "high")
(PUNCT "-")
(ID "low")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ZeroDivisionError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "low")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "u")
(PUNCT ">")
(ID "c")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(LIT 1.0)
(PUNCT "-")
(ID "u")
(NEWLINE)
(ID "c")
(PUNCT "=")
(LIT 1.0)
(PUNCT "-")
(ID "c")
(NEWLINE)
(ID "low")
(PUNCT ",")
(ID "high")
(PUNCT "=")
(ID "high")
(PUNCT ",")
(ID "low")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "low")
(PUNCT "+")
(PUNCT "(")
(ID "high")
(PUNCT "-")
(ID "low")
(PUNCT ")")
(PUNCT "*")
(PUNCT "(")
(ID "u")
(PUNCT "*")
(ID "c")
(PUNCT ")")
(PUNCT "**")
(LIT 0.5)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "normalvariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mu")
(PUNCT ",")
(ID "sigma")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        ")
(NEWLINE)
(ID "random")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "random")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u1")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "u2")
(PUNCT "=")
(LIT 1.0)
(PUNCT "-")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "z")
(PUNCT "=")
(ID "NV_MAGICCONST")
(PUNCT "*")
(PUNCT "(")
(ID "u1")
(PUNCT "-")
(LIT 0.5)
(PUNCT ")")
(PUNCT "/")
(ID "u2")
(NEWLINE)
(ID "zz")
(PUNCT "=")
(ID "z")
(PUNCT "*")
(ID "z")
(PUNCT "/")
(LIT 4.0)
(NEWLINE)
(KEYWORD if)
(ID "zz")
(PUNCT "<=")
(PUNCT "-")
(ID "_log")
(PUNCT "(")
(ID "u2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "mu")
(PUNCT "+")
(ID "z")
(PUNCT "*")
(ID "sigma")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lognormvariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mu")
(PUNCT ",")
(ID "sigma")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_exp")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "normalvariate")
(PUNCT "(")
(ID "mu")
(PUNCT ",")
(ID "sigma")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expovariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lambd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called \"lambda\", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "-")
(ID "_log")
(PUNCT "(")
(LIT 1.0)
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "/")
(ID "lambd")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "vonmisesvariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mu")
(PUNCT ",")
(ID "kappa")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        ")
(NEWLINE)
(ID "random")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "random")
(NEWLINE)
(KEYWORD if)
(ID "kappa")
(PUNCT "<=")
(LIT 1e-06)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "TWOPI")
(PUNCT "*")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(LIT 0.5)
(PUNCT "/")
(ID "kappa")
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "s")
(PUNCT "+")
(ID "_sqrt")
(PUNCT "(")
(LIT 1.0)
(PUNCT "+")
(ID "s")
(PUNCT "*")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u1")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "z")
(PUNCT "=")
(ID "_cos")
(PUNCT "(")
(ID "_pi")
(PUNCT "*")
(ID "u1")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "z")
(PUNCT "/")
(PUNCT "(")
(ID "r")
(PUNCT "+")
(ID "z")
(PUNCT ")")
(NEWLINE)
(ID "u2")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "u2")
(PUNCT "<")
(LIT 1.0)
(PUNCT "-")
(ID "d")
(PUNCT "*")
(ID "d")
(KEYWORD or)
(ID "u2")
(PUNCT "<=")
(PUNCT "(")
(LIT 1.0)
(PUNCT "-")
(ID "d")
(PUNCT ")")
(PUNCT "*")
(ID "_exp")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "q")
(PUNCT "=")
(LIT 1.0)
(PUNCT "/")
(ID "r")
(NEWLINE)
(ID "f")
(PUNCT "=")
(PUNCT "(")
(ID "q")
(PUNCT "+")
(ID "z")
(PUNCT ")")
(PUNCT "/")
(PUNCT "(")
(LIT 1.0)
(PUNCT "+")
(ID "q")
(PUNCT "*")
(ID "z")
(PUNCT ")")
(NEWLINE)
(ID "u3")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "u3")
(PUNCT ">")
(LIT 0.5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "theta")
(PUNCT "=")
(PUNCT "(")
(ID "mu")
(PUNCT "+")
(ID "_acos")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(PUNCT "%")
(ID "TWOPI")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "theta")
(PUNCT "=")
(PUNCT "(")
(ID "mu")
(PUNCT "-")
(ID "_acos")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(PUNCT "%")
(ID "TWOPI")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "theta")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gammavariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "alpha")
(PUNCT ",")
(ID "beta")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        The probability distribution function is:\n\n                    x ** (alpha - 1) * math.exp(-x / beta)\n          pdf(x) =  --------------------------------------\n                      math.gamma(alpha) * beta ** alpha\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "alpha")
(PUNCT "<=")
(LIT 0.0)
(KEYWORD or)
(ID "beta")
(PUNCT "<=")
(LIT 0.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "gammavariate: alpha and beta must be > 0.0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "random")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "random")
(NEWLINE)
(KEYWORD if)
(ID "alpha")
(PUNCT ">")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ainv")
(PUNCT "=")
(ID "_sqrt")
(PUNCT "(")
(LIT 2.0)
(PUNCT "*")
(ID "alpha")
(PUNCT "-")
(LIT 1.0)
(PUNCT ")")
(NEWLINE)
(ID "bbb")
(PUNCT "=")
(ID "alpha")
(PUNCT "-")
(ID "LOG4")
(NEWLINE)
(ID "ccc")
(PUNCT "=")
(ID "alpha")
(PUNCT "+")
(ID "ainv")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u1")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(LIT 1e-07)
(PUNCT "<")
(ID "u1")
(PUNCT "<")
(LIT 0.9999999)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "u2")
(PUNCT "=")
(LIT 1.0)
(PUNCT "-")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "_log")
(PUNCT "(")
(ID "u1")
(PUNCT "/")
(PUNCT "(")
(LIT 1.0)
(PUNCT "-")
(ID "u1")
(PUNCT ")")
(PUNCT ")")
(PUNCT "/")
(ID "ainv")
(NEWLINE)
(ID "x")
(PUNCT "=")
(ID "alpha")
(PUNCT "*")
(ID "_exp")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(ID "z")
(PUNCT "=")
(ID "u1")
(PUNCT "*")
(ID "u1")
(PUNCT "*")
(ID "u2")
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "bbb")
(PUNCT "+")
(ID "ccc")
(PUNCT "*")
(ID "v")
(PUNCT "-")
(ID "x")
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT "+")
(ID "SG_MAGICCONST")
(PUNCT "-")
(LIT 4.5)
(PUNCT "*")
(ID "z")
(PUNCT ">=")
(LIT 0.0)
(KEYWORD or)
(ID "r")
(PUNCT ">=")
(ID "_log")
(PUNCT "(")
(ID "z")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT "*")
(ID "beta")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "alpha")
(PUNCT "==")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "u")
(PUNCT "<=")
(LIT 1e-07)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "-")
(ID "_log")
(PUNCT "(")
(ID "u")
(PUNCT ")")
(PUNCT "*")
(ID "beta")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "b")
(PUNCT "=")
(PUNCT "(")
(ID "_e")
(PUNCT "+")
(ID "alpha")
(PUNCT ")")
(PUNCT "/")
(ID "_e")
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "b")
(PUNCT "*")
(ID "u")
(NEWLINE)
(KEYWORD if)
(ID "p")
(PUNCT "<=")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "p")
(PUNCT "**")
(PUNCT "(")
(LIT 1.0)
(PUNCT "/")
(ID "alpha")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(PUNCT "-")
(ID "_log")
(PUNCT "(")
(PUNCT "(")
(ID "b")
(PUNCT "-")
(ID "p")
(PUNCT ")")
(PUNCT "/")
(ID "alpha")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "u1")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p")
(PUNCT ">")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "u1")
(PUNCT "<=")
(ID "x")
(PUNCT "**")
(PUNCT "(")
(ID "alpha")
(PUNCT "-")
(LIT 1.0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "u1")
(PUNCT "<=")
(ID "_exp")
(PUNCT "(")
(PUNCT "-")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "x")
(PUNCT "*")
(ID "beta")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "gauss")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mu")
(PUNCT ",")
(ID "sigma")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        ")
(NEWLINE)
(ID "random")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "random")
(NEWLINE)
(ID "z")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "z")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x2pi")
(PUNCT "=")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(PUNCT "*")
(ID "TWOPI")
(NEWLINE)
(ID "g2rad")
(PUNCT "=")
(ID "_sqrt")
(PUNCT "(")
(PUNCT "-")
(LIT 2.0)
(PUNCT "*")
(ID "_log")
(PUNCT "(")
(LIT 1.0)
(PUNCT "-")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "z")
(PUNCT "=")
(ID "_cos")
(PUNCT "(")
(ID "x2pi")
(PUNCT ")")
(PUNCT "*")
(ID "g2rad")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gauss_next")
(PUNCT "=")
(ID "_sin")
(PUNCT "(")
(ID "x2pi")
(PUNCT ")")
(PUNCT "*")
(ID "g2rad")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "mu")
(PUNCT "+")
(ID "z")
(PUNCT "*")
(ID "sigma")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "betavariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "alpha")
(PUNCT ",")
(ID "beta")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        ")
(NEWLINE)
(ID "y")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gammavariate")
(PUNCT "(")
(ID "alpha")
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "y")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0.0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "y")
(PUNCT "/")
(PUNCT "(")
(ID "y")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "gammavariate")
(PUNCT "(")
(ID "beta")
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "paretovariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "alpha")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pareto distribution.  alpha is the shape parameter.")
(NEWLINE)
(ID "u")
(PUNCT "=")
(LIT 1.0)
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 1.0)
(PUNCT "/")
(ID "u")
(PUNCT "**")
(PUNCT "(")
(LIT 1.0)
(PUNCT "/")
(ID "alpha")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "weibullvariate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "alpha")
(PUNCT ",")
(ID "beta")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        ")
(NEWLINE)
(ID "u")
(PUNCT "=")
(LIT 1.0)
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "alpha")
(PUNCT "*")
(PUNCT "(")
(PUNCT "-")
(ID "_log")
(PUNCT "(")
(ID "u")
(PUNCT ")")
(PUNCT ")")
(PUNCT "**")
(PUNCT "(")
(LIT 1.0)
(PUNCT "/")
(ID "beta")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SystemRandom")
(PUNCT "(")
(ID "Random")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n    ")
(NEWLINE)
(KEYWORD def)
(ID "random")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the next random number in the range [0.0, 1.0).")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "_urandom")
(PUNCT "(")
(LIT 7)
(PUNCT ")")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(PUNCT ">>")
(LIT 3)
(PUNCT ")")
(PUNCT "*")
(ID "RECIP_BPF")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getrandbits")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "getrandbits(k) -> x.  Generates an int with k random bits.")
(NEWLINE)
(KEYWORD if)
(ID "k")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "number of bits must be greater than zero")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "k")
(PUNCT "!=")
(ID "int")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "number of bits should be an integer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "numbytes")
(PUNCT "=")
(PUNCT "(")
(ID "k")
(PUNCT "+")
(LIT 7)
(PUNCT ")")
(PUNCT "//")
(LIT 8)
(NEWLINE)
(ID "x")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "_urandom")
(PUNCT "(")
(ID "numbytes")
(PUNCT ")")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "x")
(PUNCT ">>")
(PUNCT "(")
(ID "numbytes")
(PUNCT "*")
(LIT 8)
(PUNCT "-")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stub method.  Not used for a system random number generator.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_notimplemented")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Method should not be called for a system random number generator.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "System entropy source does not have state.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "getstate")
(PUNCT "=")
(ID "setstate")
(PUNCT "=")
(ID "_notimplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_test_generator")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "time")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(LIT "times")
(PUNCT ",")
(ID "func")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(ID "total")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(ID "sqsum")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(ID "smallest")
(PUNCT "=")
(LIT 10000000000.0)
(NEWLINE)
(ID "largest")
(PUNCT "=")
(PUNCT "-")
(LIT 10000000000.0)
(NEWLINE)
(ID "t0")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "total")
(PUNCT "+=")
(ID "x")
(NEWLINE)
(ID "sqsum")
(PUNCT "=")
(ID "sqsum")
(PUNCT "+")
(ID "x")
(PUNCT "*")
(ID "x")
(NEWLINE)
(ID "smallest")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "smallest")
(PUNCT ")")
(NEWLINE)
(ID "largest")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "largest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "t1")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "round")
(PUNCT "(")
(ID "t1")
(PUNCT "-")
(ID "t0")
(PUNCT ",")
(LIT 3)
(PUNCT ")")
(PUNCT ",")
(LIT "sec,")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(ID "avg")
(PUNCT "=")
(ID "total")
(PUNCT "/")
(ID "n")
(NEWLINE)
(ID "stddev")
(PUNCT "=")
(ID "_sqrt")
(PUNCT "(")
(ID "sqsum")
(PUNCT "/")
(ID "n")
(PUNCT "-")
(ID "avg")
(PUNCT "*")
(ID "avg")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "avg %g, stddev %g, min %g, max %g")
(PUNCT "%")
(PUNCT "(")
(ID "avg")
(PUNCT ",")
(ID "stddev")
(PUNCT ",")
(ID "smallest")
(PUNCT ",")
(ID "largest")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_test")
(PUNCT "(")
(ID "N")
(PUNCT "=")
(LIT 2000)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "random")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "normalvariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "lognormvariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "vonmisesvariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.01)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.1)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.1)
(PUNCT ",")
(LIT 2.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.5)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 0.9)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 1.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 2.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 20.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gammavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 200.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "gauss")
(PUNCT ",")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "betavariate")
(PUNCT ",")
(PUNCT "(")
(LIT 3.0)
(PUNCT ",")
(LIT 3.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_test_generator")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "triangular")
(PUNCT ",")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT "/")
(LIT 3.0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_inst")
(PUNCT "=")
(ID "Random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "seed")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "seed")
(NEWLINE)
(ID "random")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "random")
(NEWLINE)
(ID "uniform")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "uniform")
(NEWLINE)
(ID "triangular")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "triangular")
(NEWLINE)
(ID "randint")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "randint")
(NEWLINE)
(ID "choice")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "choice")
(NEWLINE)
(ID "randrange")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "randrange")
(NEWLINE)
(ID "sample")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "sample")
(NEWLINE)
(ID "shuffle")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "shuffle")
(NEWLINE)
(ID "normalvariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "normalvariate")
(NEWLINE)
(ID "lognormvariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "lognormvariate")
(NEWLINE)
(ID "expovariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "expovariate")
(NEWLINE)
(ID "vonmisesvariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "vonmisesvariate")
(NEWLINE)
(ID "gammavariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "gammavariate")
(NEWLINE)
(ID "gauss")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "gauss")
(NEWLINE)
(ID "betavariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "betavariate")
(NEWLINE)
(ID "paretovariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "paretovariate")
(NEWLINE)
(ID "weibullvariate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "weibullvariate")
(NEWLINE)
(ID "getstate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "getstate")
(NEWLINE)
(ID "setstate")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "setstate")
(NEWLINE)
(ID "getrandbits")
(PUNCT "=")
(ID "_inst")
(PUNCT ".")
(ID "getrandbits")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
