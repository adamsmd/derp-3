(LIT "\nScript to run Python regression tests.\n\nRun this script with -h or --help for documentation.\n")
(NEWLINE)
(ID "USAGE")
(PUNCT "=")
(LIT "python -m test [options] [test_name1 [test_name2 ...]]\npython path/to/Lib/test/regrtest.py [options] [test_name1 [test_name2 ...]]\n")
(NEWLINE)
(ID "DESCRIPTION")
(PUNCT "=")
(LIT "Run Python regression tests.\n\nIf no arguments or options are provided, finds all files matching\nthe pattern \"test_*\" in the Lib/test subdirectory and runs\nthem in alphabetical order (but see -M and -u, below, for exceptions).\n\nFor more rigorous testing, it is useful to use the following\ncommand line:\n\npython -E -Wd -m test [options] [test_name1 ...]\n")
(NEWLINE)
(ID "EPILOG")
(PUNCT "=")
(LIT "Additional option details:\n\n-r randomizes test execution order. You can use --randseed=int to provide a\nint seed value for the randomizer; this is useful for reproducing troublesome\ntest orders.\n\n-s On the first invocation of regrtest using -s, the first test file found\nor the first test file given on the command line is run, and the name of\nthe next test is recorded in a file named pynexttest.  If run from the\nPython build directory, pynexttest is located in the 'build' subdirectory,\notherwise it is located in tempfile.gettempdir().  On subsequent runs,\nthe test in pynexttest is run, and the next test is written to pynexttest.\nWhen the last test has been run, pynexttest is deleted.  In this way it\nis possible to single step through the test files.  This is useful when\ndoing memory analysis on the Python interpreter, which process tends to\nconsume too many resources to run the full regression test non-stop.\n\n-S is used to continue running tests after an aborted run.  It will\nmaintain the order a standard run (ie, this assumes -r is not used).\nThis is useful after the tests have prematurely stopped for some external\nreason and you want to start running from where you left off rather\nthan starting from the beginning.\n\n-f reads the names of tests from the file given as f's argument, one\nor more test names per line.  Whitespace is ignored.  Blank lines and\nlines beginning with '#' are ignored.  This is especially useful for\nwhittling down failures involving interactions among tests.\n\n-L causes the leaks(1) command to be run just before exit if it exists.\nleaks(1) is available on Mac OS X and presumably on some other\nFreeBSD-derived systems.\n\n-R runs each test several times and examines sys.gettotalrefcount() to\nsee if the test appears to be leaking references.  The argument should\nbe of the form stab:run:fname where 'stab' is the number of times the\ntest is run to let gettotalrefcount settle down, 'run' is the number\nof times further it is run and 'fname' is the name of the file the\nreports are written to.  These parameters all have defaults (5, 4 and\n\"reflog.txt\" respectively), and the minimal invocation is '-R :'.\n\n-M runs tests that require an exorbitant amount of memory. These tests\ntypically try to ascertain containers keep working when containing more than\n2 billion objects, which only works on 64-bit systems. There are also some\ntests that try to exhaust the address space of the process, which only makes\nsense on 32-bit systems with at least 2Gb of memory. The passed-in memlimit,\nwhich is a string in the form of '2.5Gb', determines howmuch memory the\ntests will limit themselves to (but they may go slightly over.) The number\nshouldn't be more memory than the machine has (including swap memory). You\nshould also keep in mind that swap memory is generally much, much slower\nthan RAM, and setting memlimit to all available RAM or higher will heavily\ntax the machine. On the other hand, it is no use running these tests with a\nlimit of less than 2.5Gb, and many require more than 20Gb. Tests that expect\nto use more than memlimit memory will be skipped. The big-memory tests\ngenerally run very, very long.\n\n-u is used to specify which special resource intensive tests to run,\nsuch as those requiring large file support or network connectivity.\nThe argument is a comma-separated list of words indicating the\nresources to test.  Currently only the following are defined:\n\n    all -       Enable all special resources.\n\n    none -      Disable all special resources (this is the default).\n\n    audio -     Tests that use the audio device.  (There are known\n                cases of broken audio drivers that can crash Python or\n                even the Linux kernel.)\n\n    curses -    Tests that use curses and will modify the terminal's\n                state and output modes.\n\n    largefile - It is okay to run some test that may create huge\n                files.  These tests can take a long time and may\n                consume >2GB of disk space temporarily.\n\n    network -   It is okay to run tests that use external network\n                resource, e.g. testing SSL support for sockets.\n\n    decimal -   Test the decimal module against a large suite that\n                verifies compliance with standards.\n\n    cpu -       Used for certain CPU-heavy tests.\n\n    subprocess  Run all tests for the subprocess module.\n\n    urlfetch -  It is okay to download files required on testing.\n\n    gui -       Run tests that require a running GUI.\n\nTo enable all resources except one, use '-uall,-<resource>'.  For\nexample, to run all the tests except for the gui tests, give the\noption '-uall,-gui'.\n")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(NEWLINE)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(KEYWORD import)
(ID "faulthandler")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "json")
(NEWLINE)
(KEYWORD import)
(ID "locale")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "platform")
(NEWLINE)
(KEYWORD import)
(ID "random")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "signal")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(KEYWORD import)
(ID "tempfile")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD import)
(ID "unittest")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD from)
(ID "inspect")
(KEYWORD import)
(ID "isabstract")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "threading")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_multiprocessing")
(PUNCT ",")
(ID "multiprocessing")
(PUNCT ".")
(ID "process")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "multiprocessing")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "module")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__path__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__path__")
(PUNCT "=")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(KEYWORD for)
(ID "path")
(KEYWORD in)
(ID "module")
(PUNCT ".")
(ID "__path__")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__file__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__file__")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "resource")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "soft")
(PUNCT ",")
(ID "hard")
(PUNCT "=")
(ID "resource")
(PUNCT ".")
(ID "getrlimit")
(PUNCT "(")
(ID "resource")
(PUNCT ".")
(ID "RLIMIT_STACK")
(PUNCT ")")
(NEWLINE)
(ID "newsoft")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "hard")
(PUNCT ",")
(ID "max")
(PUNCT "(")
(ID "soft")
(PUNCT ",")
(LIT 1024)
(PUNCT "*")
(LIT 2048)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "resource")
(PUNCT ".")
(ID "setrlimit")
(PUNCT "(")
(ID "resource")
(PUNCT ".")
(ID "RLIMIT_STACK")
(PUNCT ",")
(PUNCT "(")
(ID "newsoft")
(PUNCT ",")
(ID "hard")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "PASSED")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "FAILED")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "ENV_CHANGED")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "SKIPPED")
(PUNCT "=")
(PUNCT "-")
(LIT 2)
(NEWLINE)
(ID "RESOURCE_DENIED")
(PUNCT "=")
(PUNCT "-")
(LIT 3)
(NEWLINE)
(ID "INTERRUPTED")
(PUNCT "=")
(PUNCT "-")
(LIT 4)
(NEWLINE)
(ID "CHILD_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 5)
(NEWLINE)
(KEYWORD from)
(ID "test")
(KEYWORD import)
(ID "support")
(NEWLINE)
(ID "RESOURCE_NAMES")
(PUNCT "=")
(PUNCT "(")
(LIT "audio")
(PUNCT ",")
(LIT "curses")
(PUNCT ",")
(LIT "largefile")
(PUNCT ",")
(LIT "network")
(PUNCT ",")
(LIT "decimal")
(PUNCT ",")
(LIT "cpu")
(PUNCT ",")
(LIT "subprocess")
(PUNCT ",")
(LIT "urlfetch")
(PUNCT ",")
(LIT "gui")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sysconfig")
(PUNCT ".")
(ID "is_python_build")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TEMPDIR")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "srcdir")
(PUNCT ")")
(PUNCT ",")
(LIT "build")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TEMPDIR")
(PUNCT "=")
(ID "tempfile")
(PUNCT ".")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "TEMPDIR")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "TEMPDIR")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_ArgParser")
(PUNCT "(")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(ID "message")
(PUNCT "+")
(LIT "\nPass -h or --help for complete help.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_create_parser")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT "=")
(ID "_ArgParser")
(PUNCT "(")
(ID "prog")
(PUNCT "=")
(LIT "regrtest.py")
(PUNCT ",")
(ID "usage")
(PUNCT "=")
(ID "USAGE")
(PUNCT ",")
(ID "description")
(PUNCT "=")
(ID "DESCRIPTION")
(PUNCT ",")
(ID "epilog")
(PUNCT "=")
(ID "EPILOG")
(PUNCT ",")
(ID "add_help")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "formatter_class")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "RawDescriptionHelpFormatter")
(PUNCT ")")
(NEWLINE)
(ID "more_details")
(PUNCT "=")
(LIT "  See the section at bottom for more details.")
(NEWLINE)
(ID "group")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "add_argument_group")
(PUNCT "(")
(LIT "General options")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-h")
(PUNCT ",")
(LIT "--help")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "help")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "show this help message and exit")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--timeout")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "TIMEOUT")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "float")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "dump the traceback and exit if a test takes ")
(LIT "more than TIMEOUT seconds; disabled if TIMEOUT ")
(LIT "is negative or equals to zero")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--wait")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "wait for user input, e.g., allow a debugger ")
(LIT "to be attached")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--slaveargs")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "ARGS")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-S")
(PUNCT ",")
(LIT "--start")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "START")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "the name of the test at which to start.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "add_argument_group")
(PUNCT "(")
(LIT "Verbosity")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-v")
(PUNCT ",")
(LIT "--verbose")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "count")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run tests in verbose mode with output to stdout")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-w")
(PUNCT ",")
(LIT "--verbose2")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "re-run failed tests in verbose mode")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-W")
(PUNCT ",")
(LIT "--verbose3")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "display test output on failure")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-q")
(PUNCT ",")
(LIT "--quiet")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "no output unless one or more tests fail")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-o")
(PUNCT ",")
(LIT "--slow")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "print_slow")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "print the slowest 10 tests")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--header")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "print header with interpreter info")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "add_argument_group")
(PUNCT "(")
(LIT "Selecting tests")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-r")
(PUNCT ",")
(LIT "--randomize")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "randomize test execution order.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--randseed")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "SEED")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "random_seed")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "pass a random seed to reproduce a previous ")
(LIT "random run")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-f")
(PUNCT ",")
(LIT "--fromfile")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "FILE")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "read names of tests to run from a file.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-x")
(PUNCT ",")
(LIT "--exclude")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "arguments are tests to *exclude*")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-s")
(PUNCT ",")
(LIT "--single")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "single step through a set of tests.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-m")
(PUNCT ",")
(LIT "--match")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "PAT")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "match_tests")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "match test cases and methods with glob pattern PAT")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-G")
(PUNCT ",")
(LIT "--failfast")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "fail as soon as a test fails (only with -v or -W)")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-u")
(PUNCT ",")
(LIT "--use")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "RES1,RES2,...")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "append")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "resources_list")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "specify which special resource intensive tests ")
(LIT "to run.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-M")
(PUNCT ",")
(LIT "--memlimit")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "LIMIT")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run very large memory-consuming tests.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--testdir")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "DIR")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "relative_filename")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "execute test files in the specified directory ")
(LIT "(instead of the Python stdlib test suite)")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "add_argument_group")
(PUNCT "(")
(LIT "Special runs")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-l")
(PUNCT ",")
(LIT "--findleaks")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "if GC is available detect tests that leak memory")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-L")
(PUNCT ",")
(LIT "--runleaks")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run the leaks(1) command just before exit.")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-R")
(PUNCT ",")
(LIT "--huntrleaks")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "RUNCOUNTS")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "huntrleaks")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "search for reference leaks (needs debug build, ")
(LIT "very slow).")
(PUNCT "+")
(ID "more_details")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-j")
(PUNCT ",")
(LIT "--multiprocess")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "PROCESSES")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "use_mp")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run PROCESSES processes at once")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-T")
(PUNCT ",")
(LIT "--coverage")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "trace")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "turn on code coverage tracing using the trace ")
(LIT "module")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-D")
(PUNCT ",")
(LIT "--coverdir")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "DIR")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "relative_filename")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "directory where coverage files are put")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-N")
(PUNCT ",")
(LIT "--nocoverdir")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_const")
(PUNCT ",")
(ID "const")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "coverdir")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "put coverage files alongside modules")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-t")
(PUNCT ",")
(LIT "--threshold")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "THRESHOLD")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "call gc.set_threshold(THRESHOLD)")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-n")
(PUNCT ",")
(LIT "--nowindows")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "suppress error message boxes on Windows")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-F")
(PUNCT ",")
(LIT "--forever")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run the specified tests in a loop, until an ")
(LIT "error happens")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "args")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "REMAINDER")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "SUPPRESS")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "parser")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "relative_filename")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "SAVEDCWD")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "huntrleaks")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT 3)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "argparse")
(PUNCT ".")
(ID "ArgumentTypeError")
(PUNCT "(")
(LIT "needs 2 or 3 colon-separated arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nwarmup")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD else)
(LIT 5)
(NEWLINE)
(ID "ntracked")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD else)
(LIT 4)
(NEWLINE)
(ID "fname")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(KEYWORD else)
(LIT "reflog.txt")
(NEWLINE)
(KEYWORD return)
(ID "nwarmup")
(PUNCT ",")
(ID "ntracked")
(PUNCT ",")
(ID "fname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resources_list")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "string")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "r")
(KEYWORD in)
(ID "u")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "r")
(PUNCT "==")
(LIT "all")
(KEYWORD or)
(ID "r")
(PUNCT "==")
(LIT "none")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "r")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "r")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "r")
(KEYWORD not)
(KEYWORD in)
(ID "RESOURCE_NAMES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "argparse")
(PUNCT ".")
(ID "ArgumentTypeError")
(PUNCT "(")
(LIT "invalid resource: ")
(PUNCT "+")
(ID "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "u")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_args")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "Namespace")
(PUNCT "(")
(ID "testdir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "exclude")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "single")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "randomize")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "fromfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "findleaks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_resources")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "trace")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "coverdir")
(PUNCT "=")
(LIT "coverage")
(PUNCT ",")
(ID "runleaks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "huntrleaks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "verbose2")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "print_slow")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "random_seed")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_mp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "verbose3")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "forever")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "failfast")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "match_tests")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "kwargs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "ns")
(PUNCT ",")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "%r is an invalid keyword argument ")
(LIT "for this function")
(PUNCT "%")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "ns")
(PUNCT ",")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT "=")
(ID "_create_parser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT ",")
(ID "namespace")
(PUNCT "=")
(ID "ns")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "single")
(KEYWORD and)
(ID "ns")
(PUNCT ".")
(ID "fromfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "-s and -f don't go together!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(KEYWORD and)
(ID "ns")
(PUNCT ".")
(ID "trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "-T and -j don't go together!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(KEYWORD and)
(ID "ns")
(PUNCT ".")
(ID "findleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "-l and -j don't go together!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(KEYWORD and)
(ID "ns")
(PUNCT ".")
(ID "memlimit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "-M and -j don't go together!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "failfast")
(KEYWORD and)
(KEYWORD not)
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "verbose")
(KEYWORD or)
(ID "ns")
(PUNCT ".")
(ID "verbose3")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "-G/--failfast needs either -v or -W")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "faulthandler")
(PUNCT ",")
(LIT "dump_traceback_later")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "timeout")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Warning: The timeout option requires ")
(LIT "faulthandler.dump_traceback_later")
(PUNCT ")")
(NEWLINE)
(ID "ns")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT "=")
(LIT 2)
(PUNCT "+")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "cpu_count")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "ns")
(PUNCT ".")
(ID "use")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "r")
(KEYWORD in)
(ID "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "r")
(PUNCT "==")
(LIT "all")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "RESOURCE_NAMES")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "r")
(PUNCT "==")
(LIT "none")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "remove")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remove")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "r")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "remove")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "r")
(KEYWORD in)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "r")
(KEYWORD not)
(KEYWORD in)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "random_seed")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "randomize")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ns")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_test_in_subprocess")
(PUNCT "(")
(ID "testname")
(PUNCT ",")
(ID "ns")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the given test in a subprocess with --slaveargs.\n\n    ns is the option Namespace parsed from command-line arguments. regrtest\n    is invoked in a subprocess with the --slaveargs argument; when the\n    subprocess exits, its return code, stdout and stderr are returned as a\n    3-tuple.\n    ")
(NEWLINE)
(KEYWORD from)
(ID "subprocess")
(KEYWORD import)
(ID "Popen")
(PUNCT ",")
(ID "PIPE")
(NEWLINE)
(ID "base_cmd")
(PUNCT "=")
(PUNCT "(")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT "]")
(PUNCT "+")
(ID "support")
(PUNCT ".")
(ID "args_from_interpreter_flags")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(PUNCT "[")
(LIT "-X")
(PUNCT ",")
(LIT "faulthandler")
(PUNCT ",")
(LIT "-m")
(PUNCT ",")
(LIT "test.regrtest")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "slaveargs")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "testname")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "verbose")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ")")
(PUNCT ",")
(ID "dict")
(PUNCT "(")
(ID "huntrleaks")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "huntrleaks")
(PUNCT ",")
(ID "use_resources")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(PUNCT ",")
(ID "output_on_failure")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "verbose3")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "timeout")
(PUNCT ",")
(ID "failfast")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "failfast")
(PUNCT ",")
(ID "match_tests")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "match_tests")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "popen")
(PUNCT "=")
(ID "Popen")
(PUNCT "(")
(ID "base_cmd")
(PUNCT "+")
(PUNCT "[")
(LIT "--slaveargs")
(PUNCT ",")
(ID "json")
(PUNCT ".")
(ID "dumps")
(PUNCT "(")
(ID "slaveargs")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "PIPE")
(PUNCT ",")
(ID "universal_newlines")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "close_fds")
(PUNCT "=")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "nt")
(PUNCT ")")
(PUNCT ",")
(ID "cwd")
(PUNCT "=")
(ID "support")
(PUNCT ".")
(ID "SAVEDCWD")
(PUNCT ")")
(NEWLINE)
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "popen")
(PUNCT ".")
(ID "communicate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "retcode")
(PUNCT "=")
(ID "popen")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "retcode")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "tests")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute a test suite.\n\n    This also parses command-line options and modifies its behavior\n    accordingly.\n\n    tests -- a list of strings containing test names (optional)\n    testdir -- the directory in which to look for tests (optional)\n\n    Users other than the Python test suite will certainly want to\n    specify testdir; if it's omitted, the directory containing the\n    Python test suite is searched for.\n\n    If the tests argument is omitted, the tests listed on the\n    command-line will be used.  If that's empty, too, then all *.py\n    files beginning with test_ will be used.\n\n    The other default arguments (verbose, quiet, exclude,\n    single, randomize, findleaks, use_resources, trace, coverdir,\n    print_slow, and random_seed) allow programmers calling main()\n    directly to set the values that would normally be set by flags\n    on the command line.\n    ")
(NEWLINE)
(ID "faulthandler")
(PUNCT ".")
(ID "enable")
(PUNCT "(")
(ID "all_threads")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "signals")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "signal")
(PUNCT ",")
(LIT "SIGALRM")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signals")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGALRM")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "signal")
(PUNCT ",")
(LIT "SIGUSR1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signals")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGUSR1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "signum")
(KEYWORD in)
(ID "signals")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "faulthandler")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "signum")
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "replace_stdout")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "support")
(PUNCT ".")
(ID "record_original_stdout")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(ID "ns")
(PUNCT "=")
(ID "_parse_args")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "huntrleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warm_caches")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "memlimit")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "set_memlimit")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "memlimit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "threshold")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "gc")
(NEWLINE)
(ID "gc")
(PUNCT ".")
(ID "set_threshold")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "threshold")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "nowindows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "msvcrt")
(NEWLINE)
(ID "msvcrt")
(PUNCT ".")
(ID "SetErrorMode")
(PUNCT "(")
(ID "msvcrt")
(PUNCT ".")
(ID "SEM_FAILCRITICALERRORS")
(PUNCT "|")
(ID "msvcrt")
(PUNCT ".")
(ID "SEM_NOALIGNMENTFAULTEXCEPT")
(PUNCT "|")
(ID "msvcrt")
(PUNCT ".")
(ID "SEM_NOGPFAULTERRORBOX")
(PUNCT "|")
(ID "msvcrt")
(PUNCT ".")
(ID "SEM_NOOPENFILEERRORBOX")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msvcrt")
(PUNCT ".")
(ID "CrtSetReportMode")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "m")
(KEYWORD in)
(PUNCT "[")
(ID "msvcrt")
(PUNCT ".")
(ID "CRT_WARN")
(PUNCT ",")
(ID "msvcrt")
(PUNCT ".")
(ID "CRT_ERROR")
(PUNCT ",")
(ID "msvcrt")
(PUNCT ".")
(ID "CRT_ASSERT")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msvcrt")
(PUNCT ".")
(ID "CrtSetReportMode")
(PUNCT "(")
(ID "m")
(PUNCT ",")
(ID "msvcrt")
(PUNCT ".")
(ID "CRTDBG_MODE_FILE")
(PUNCT ")")
(NEWLINE)
(ID "msvcrt")
(PUNCT ".")
(ID "CrtSetReportFile")
(PUNCT "(")
(ID "m")
(PUNCT ",")
(ID "msvcrt")
(PUNCT ".")
(ID "CRTDBG_FILE_STDERR")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "wait")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input")
(PUNCT "(")
(LIT "Press any key to continue...")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "slaveargs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "json")
(PUNCT ".")
(ID "loads")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "slaveargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "kwargs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "huntrleaks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unittest")
(PUNCT ".")
(ID "BaseTestSuite")
(PUNCT ".")
(ID "_cleanup")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "runtest")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "INTERRUPTED")
(PUNCT ",")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "BaseException")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "traceback")
(PUNCT ".")
(ID "print_exc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "CHILD_ERROR")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "json")
(PUNCT ".")
(ID "dumps")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "good")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "bad")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "skipped")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "resource_denieds")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "environment_changed")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "interrupted")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "findleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "gc")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "No GC available, disabling findleaks.")
(PUNCT ")")
(NEWLINE)
(ID "ns")
(PUNCT ".")
(ID "findleaks")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found_garbage")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "huntrleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unittest")
(PUNCT ".")
(ID "BaseTestSuite")
(PUNCT ".")
(ID "_cleanup")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "single")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "TEMPDIR")
(PUNCT ",")
(LIT "pynexttest")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next_test")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tests")
(PUNCT "=")
(PUNCT "[")
(ID "next_test")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "fromfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tests")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "SAVEDCWD")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "fromfile")
(PUNCT ")")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count_pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\[\\s*\\d+/\\s*\\d+\\]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "count_pat")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "guts")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "guts")
(KEYWORD and)
(KEYWORD not)
(ID "guts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "#")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tests")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "guts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "removepy")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "removepy")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(ID "stdtests")
(PUNCT "=")
(ID "STDTESTS")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "nottests")
(PUNCT "=")
(ID "NOTTESTS")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "exclude")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "ns")
(PUNCT ".")
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "arg")
(KEYWORD in)
(ID "stdtests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdtests")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nottests")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ns")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "verbose")
(KEYWORD or)
(ID "ns")
(PUNCT ".")
(ID "header")
(KEYWORD or)
(KEYWORD not)
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "quiet")
(KEYWORD or)
(ID "ns")
(PUNCT ".")
(ID "single")
(KEYWORD or)
(ID "tests")
(KEYWORD or)
(ID "ns")
(PUNCT ".")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "==")
(PUNCT ",")
(ID "platform")
(PUNCT ".")
(ID "python_implementation")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "==  ")
(PUNCT ",")
(ID "platform")
(PUNCT ".")
(ID "platform")
(PUNCT "(")
(ID "aliased")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ",")
(LIT "%s-endian")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "byteorder")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "==  ")
(PUNCT ",")
(LIT "hash algorithm:")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "hash_info")
(PUNCT ".")
(ID "algorithm")
(PUNCT ",")
(LIT "64bit")
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ">")
(LIT 2)
(PUNCT "**")
(LIT 32)
(KEYWORD else)
(LIT "32bit")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "==  ")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Testing with flags:")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "testdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alltests")
(PUNCT "=")
(ID "findtests")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "testdir")
(PUNCT ",")
(ID "list")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alltests")
(PUNCT "=")
(ID "findtests")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "testdir")
(PUNCT ",")
(ID "stdtests")
(PUNCT ",")
(ID "nottests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "selected")
(PUNCT "=")
(ID "tests")
(KEYWORD or)
(ID "ns")
(PUNCT ".")
(ID "args")
(KEYWORD or)
(ID "alltests")
(NEWLINE)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "single")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selected")
(PUNCT "=")
(ID "selected")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next_single_test")
(PUNCT "=")
(ID "alltests")
(PUNCT "[")
(ID "alltests")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "selected")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next_single_test")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "start")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "selected")
(PUNCT "[")
(PUNCT ":")
(ID "selected")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "start")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Couldn't find starting test (%s), using all tests")
(PUNCT "%")
(ID "ns")
(PUNCT ".")
(ID "start")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "randomize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "random_seed")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "random_seed")
(PUNCT "=")
(ID "random")
(PUNCT ".")
(ID "randrange")
(PUNCT "(")
(LIT 10000000)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "random")
(PUNCT ".")
(ID "seed")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "random_seed")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Using random seed")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "random_seed")
(PUNCT ")")
(NEWLINE)
(ID "random")
(PUNCT ".")
(ID "shuffle")
(PUNCT "(")
(ID "selected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "trace")
(PUNCT ",")
(ID "tempfile")
(NEWLINE)
(ID "tracer")
(PUNCT "=")
(ID "trace")
(PUNCT ".")
(ID "Trace")
(PUNCT "(")
(ID "ignoredirs")
(PUNCT "=")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT ",")
(ID "tempfile")
(PUNCT ".")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(ID "trace")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "count")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "test_times")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "support")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "verbose")
(NEWLINE)
(ID "support")
(PUNCT ".")
(ID "use_resources")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "use_resources")
(NEWLINE)
(ID "save_modules")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "accumulate_result")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT ",")
(ID "test_time")
(PUNCT "=")
(ID "result")
(NEWLINE)
(ID "test_times")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "test_time")
(PUNCT ",")
(ID "test")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ok")
(PUNCT "==")
(ID "PASSED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "good")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ok")
(PUNCT "==")
(ID "FAILED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bad")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ok")
(PUNCT "==")
(ID "ENV_CHANGED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "environment_changed")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ok")
(PUNCT "==")
(ID "SKIPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skipped")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ok")
(PUNCT "==")
(ID "RESOURCE_DENIED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skipped")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(ID "resource_denieds")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "forever")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "test_forever")
(PUNCT "(")
(ID "tests")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "selected")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "test")
(KEYWORD in)
(ID "tests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "test")
(NEWLINE)
(KEYWORD if)
(ID "bad")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "tests")
(PUNCT "=")
(ID "test_forever")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "test_count")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "test_count_width")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tests")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "selected")
(PUNCT ")")
(NEWLINE)
(ID "test_count")
(PUNCT "=")
(LIT "/{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "selected")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "test_count_width")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "test_count")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "threading")
(KEYWORD import)
(ID "Thread")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Multiprocess option requires thread support")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "queue")
(KEYWORD import)
(ID "Queue")
(NEWLINE)
(ID "debug_output_pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\[\\d+ refs, \\d+ blocks\\]$")
(PUNCT ")")
(NEWLINE)
(ID "output")
(PUNCT "=")
(ID "Queue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pending")
(PUNCT "=")
(ID "MultiprocessTests")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "work")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "pending")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "retcode")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "run_test_in_subprocess")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "ns")
(PUNCT ")")
(NEWLINE)
(ID "stderr")
(PUNCT "=")
(ID "debug_output_pat")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "stdout")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "stdout")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "retcode")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "(")
(ID "CHILD_ERROR")
(PUNCT ",")
(LIT "Exit code %s")
(PUNCT "%")
(ID "retcode")
(PUNCT ")")
(NEWLINE)
(ID "output")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "stdout")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "stderr")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "json")
(PUNCT ".")
(ID "loads")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "output")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "stdout")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "stderr")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "BaseException")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "workers")
(PUNCT "=")
(PUNCT "[")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "work")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "worker")
(KEYWORD in)
(ID "workers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "worker")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "finished")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "test_index")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "finished")
(PUNCT "<")
(ID "ns")
(PUNCT ".")
(ID "use_mp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "output")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "test")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "finished")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "accumulate_result")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(LIT "[{1:{0}}{2}/{3}] {4}")
(KEYWORD if)
(ID "bad")
(KEYWORD else)
(LIT "[{1:{0}}{2}] {4}")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "fmt")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "test_count_width")
(PUNCT ",")
(ID "test_index")
(PUNCT ",")
(ID "test_count")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(PUNCT ",")
(ID "test")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "stderr")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "INTERRUPTED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyboardInterrupt")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "CHILD_ERROR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Exception")
(PUNCT "(")
(LIT "Child error on {}: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "test_index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "interrupted")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "pending")
(PUNCT ".")
(ID "interrupted")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "worker")
(KEYWORD in)
(ID "workers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "worker")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "test_index")
(PUNCT ",")
(ID "test")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "tests")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(LIT "[{1:{0}}{2}/{3}] {4}")
(KEYWORD if)
(ID "bad")
(KEYWORD else)
(LIT "[{1:{0}}{2}] {4}")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "fmt")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "test_count_width")
(PUNCT ",")
(ID "test_index")
(PUNCT ",")
(ID "test_count")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(PUNCT ",")
(ID "test")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tracer")
(PUNCT ".")
(ID "runctx")
(PUNCT "(")
(LIT "runtest(test, ns.verbose, ns.quiet, timeout=ns.timeout)")
(PUNCT ",")
(ID "globals")
(PUNCT "=")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(ID "vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "runtest")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "verbose")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "huntrleaks")
(PUNCT ",")
(ID "output_on_failure")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "verbose3")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "timeout")
(PUNCT ",")
(ID "failfast")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "failfast")
(PUNCT ",")
(ID "match_tests")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "match_tests")
(PUNCT ")")
(NEWLINE)
(ID "accumulate_result")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "interrupted")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "findleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gc")
(PUNCT ".")
(ID "collect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "gc")
(PUNCT ".")
(ID "garbage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Warning: test created")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "gc")
(PUNCT ".")
(ID "garbage")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "uncollectable object(s).")
(PUNCT ")")
(NEWLINE)
(ID "found_garbage")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "gc")
(PUNCT ".")
(ID "garbage")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "gc")
(PUNCT ".")
(ID "garbage")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "module")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "module")
(KEYWORD not)
(KEYWORD in)
(ID "save_modules")
(KEYWORD and)
(ID "module")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "test.")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "unload")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "interrupted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Test suite interrupted by signal SIGINT.")
(PUNCT ")")
(NEWLINE)
(ID "omitted")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "selected")
(PUNCT ")")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(ID "good")
(PUNCT ")")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(ID "skipped")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "count")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "omitted")
(PUNCT ")")
(PUNCT ",")
(LIT "test")
(PUNCT ")")
(PUNCT ",")
(LIT "omitted:")
(PUNCT ")")
(NEWLINE)
(ID "printlist")
(PUNCT "(")
(ID "omitted")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "good")
(KEYWORD and)
(KEYWORD not)
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "bad")
(KEYWORD and)
(KEYWORD not)
(ID "skipped")
(KEYWORD and)
(KEYWORD not)
(ID "interrupted")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "good")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "All")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "count")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "good")
(PUNCT ")")
(PUNCT ",")
(LIT "test")
(PUNCT ")")
(PUNCT ",")
(LIT "OK.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "print_slow")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test_times")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "10 slowest tests:")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "time")
(PUNCT ",")
(ID "test")
(KEYWORD in)
(ID "test_times")
(PUNCT "[")
(PUNCT ":")
(LIT 10)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%s: %.1fs")
(PUNCT "%")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "time")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "bad")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bad")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(ID "environment_changed")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "bad")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "count")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(PUNCT ",")
(LIT "test")
(PUNCT ")")
(PUNCT ",")
(LIT "failed:")
(PUNCT ")")
(NEWLINE)
(ID "printlist")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "environment_changed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "{} altered the execution environment:")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "count")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "environment_changed")
(PUNCT ")")
(PUNCT ",")
(LIT "test")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "printlist")
(PUNCT "(")
(ID "environment_changed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "skipped")
(KEYWORD and)
(KEYWORD not)
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "count")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "skipped")
(PUNCT ")")
(PUNCT ",")
(LIT "test")
(PUNCT ")")
(PUNCT ",")
(LIT "skipped:")
(PUNCT ")")
(NEWLINE)
(ID "printlist")
(PUNCT "(")
(ID "skipped")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "verbose2")
(KEYWORD and)
(ID "bad")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Re-running failed tests in verbose mode")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "test")
(KEYWORD in)
(ID "bad")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Re-running test %r in verbose mode")
(PUNCT "%")
(ID "test")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "ok")
(PUNCT "=")
(ID "runtest")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "quiet")
(PUNCT ",")
(ID "ns")
(PUNCT ".")
(ID "huntrleaks")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "single")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "next_single_test")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "next_single_test")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "trace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "tracer")
(PUNCT ".")
(ID "results")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "write_results")
(PUNCT "(")
(ID "show_missing")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "summary")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "coverdir")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "coverdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ns")
(PUNCT ".")
(ID "runleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "system")
(PUNCT "(")
(LIT "leaks %d")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "bad")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(KEYWORD or)
(ID "interrupted")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "STDTESTS")
(PUNCT "=")
(PUNCT "[")
(LIT "test_grammar")
(PUNCT ",")
(LIT "test_opcodes")
(PUNCT ",")
(LIT "test_dict")
(PUNCT ",")
(LIT "test_builtin")
(PUNCT ",")
(LIT "test_exceptions")
(PUNCT ",")
(LIT "test_types")
(PUNCT ",")
(LIT "test_unittest")
(PUNCT ",")
(LIT "test_doctest")
(PUNCT ",")
(LIT "test_doctest2")
(PUNCT ",")
(LIT "test_support")
(PUNCT "]")
(NEWLINE)
(ID "NOTTESTS")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "findtests")
(PUNCT "(")
(ID "testdir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stdtests")
(PUNCT "=")
(ID "STDTESTS")
(PUNCT ",")
(ID "nottests")
(PUNCT "=")
(ID "NOTTESTS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all applicable test modules.")
(NEWLINE)
(ID "testdir")
(PUNCT "=")
(ID "findtestdir")
(PUNCT "(")
(ID "testdir")
(PUNCT ")")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "testdir")
(PUNCT ")")
(NEWLINE)
(ID "tests")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "others")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "stdtests")
(PUNCT ")")
(PUNCT "|")
(ID "nottests")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mod")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "==")
(LIT "test_")
(KEYWORD and)
(ID "ext")
(KEYWORD in)
(PUNCT "(")
(LIT ".py")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD and)
(ID "mod")
(KEYWORD not)
(KEYWORD in)
(ID "others")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tests")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "mod")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "stdtests")
(PUNCT "+")
(ID "sorted")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MultiprocessTests")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A thread-safe iterator over tests for multiprocess mode.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tests")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interrupted")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tests")
(PUNCT "=")
(ID "tests")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "interrupted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StopIteration")
(PUNCT "(")
(LIT "tests interrupted")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "replace_stdout")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set stdout encoder error handler to backslashreplace (as stderr error\n    handler) to avoid UnicodeEncodeError when printing a traceback")
(NEWLINE)
(KEYWORD import)
(ID "atexit")
(NEWLINE)
(ID "stdout")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "stdout")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "stdout")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "backslashreplace")
(PUNCT ",")
(ID "closefd")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "restore_stdout")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "stdout")
(NEWLINE)
(DEDENT)
(ID "atexit")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "restore_stdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runtest")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "quiet")
(PUNCT ",")
(ID "huntrleaks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_resources")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "output_on_failure")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "failfast")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "match_tests")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run a single test.\n\n    test -- the name of the test\n    verbose -- if true, print more messages\n    quiet -- if true, don't print 'skipped' messages (probably redundant)\n    huntrleaks -- run multiple times to test for leaks; requires a debug\n                  build; a triple corresponding to -R's three arguments\n    use_resources -- list of extra resources to use\n    output_on_failure -- if true, display test output on failure\n    timeout -- dump the traceback and exit if a test takes more than\n               timeout seconds\n    failfast, match_tests -- See regrtest command-line flags for these.\n\n    Returns the tuple result, test_time, where result is one of the constants:\n        INTERRUPTED      KeyboardInterrupt when run under -j\n        RESOURCE_DENIED  test skipped because resource denied\n        SKIPPED          test skipped for some other reason\n        ENV_CHANGED      test failed because it changed the execution environment\n        FAILED           test failed\n        PASSED           test passed\n    ")
(NEWLINE)
(KEYWORD if)
(ID "use_resources")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "use_resources")
(PUNCT "=")
(ID "use_resources")
(NEWLINE)
(DEDENT)
(ID "use_timeout")
(PUNCT "=")
(PUNCT "(")
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "use_timeout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "faulthandler")
(PUNCT ".")
(ID "dump_traceback_later")
(PUNCT "(")
(ID "timeout")
(PUNCT ",")
(ID "exit")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "match_tests")
(PUNCT "=")
(ID "match_tests")
(NEWLINE)
(KEYWORD if)
(ID "failfast")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "failfast")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "output_on_failure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "runtest")
(PUNCT ".")
(ID "stringio")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "runtest")
(PUNCT ".")
(ID "stringio")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT "=")
(ID "runtest")
(PUNCT ".")
(ID "stringio")
(NEWLINE)
(ID "stream")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "stream")
(PUNCT ".")
(ID "truncate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "orig_stdout")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(ID "orig_stderr")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "runtest_inner")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "quiet")
(PUNCT ",")
(ID "huntrleaks")
(PUNCT ",")
(ID "display_failure")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "FAILED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT "=")
(ID "stream")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "orig_stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "output")
(PUNCT ")")
(NEWLINE)
(ID "orig_stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "orig_stdout")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "orig_stderr")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "runtest_inner")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "quiet")
(PUNCT ",")
(ID "huntrleaks")
(PUNCT ",")
(ID "display_failure")
(PUNCT "=")
(KEYWORD not)
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "use_timeout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "faulthandler")
(PUNCT ".")
(ID "cancel_dump_traceback_later")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cleanup_test_droppings")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "runtest")
(PUNCT ".")
(ID "stringio")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD class)
(ID "saved_test_environment")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Save bits of the test environment and restore them at block exit.\n\n        with saved_test_environment(testname, verbose, quiet):\n            #stuff\n\n    Unless quiet is True, a warning is printed to stderr if any of\n    the saved items was changed by the test.  The attribute 'changed'\n    is initially False, but is set to True if a change is detected.\n\n    If verbose is more than 1, the before and after state of changed\n    items is also printed.\n    ")
(NEWLINE)
(ID "changed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "testname")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "testname")
(PUNCT "=")
(ID "testname")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "quiet")
(PUNCT "=")
(ID "quiet")
(NEWLINE)
(DEDENT)
(ID "resources")
(PUNCT "=")
(PUNCT "(")
(LIT "sys.argv")
(PUNCT ",")
(LIT "cwd")
(PUNCT ",")
(LIT "sys.stdin")
(PUNCT ",")
(LIT "sys.stdout")
(PUNCT ",")
(LIT "sys.stderr")
(PUNCT ",")
(LIT "os.environ")
(PUNCT ",")
(LIT "sys.path")
(PUNCT ",")
(LIT "sys.path_hooks")
(PUNCT ",")
(LIT "__import__")
(PUNCT ",")
(LIT "warnings.filters")
(PUNCT ",")
(LIT "asyncore.socket_map")
(PUNCT ",")
(LIT "logging._handlers")
(PUNCT ",")
(LIT "logging._handlerList")
(PUNCT ",")
(LIT "sys.gettrace")
(PUNCT ",")
(LIT "sys.warnoptions")
(PUNCT ",")
(LIT "multiprocessing.process._dangling")
(PUNCT ",")
(LIT "threading._dangling")
(PUNCT ",")
(LIT "sysconfig._CONFIG_VARS")
(PUNCT ",")
(LIT "sysconfig._INSTALL_SCHEMES")
(PUNCT ",")
(LIT "support.TESTFN")
(PUNCT ",")
(LIT "locale")
(PUNCT ",")
(LIT "warnings.showwarning")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "get_sys_argv")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_argv")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_argv")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(ID "saved_argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "saved_argv")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_cwd")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_cwd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_cwd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chdir")
(PUNCT "(")
(ID "saved_cwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_stdout")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_stdout")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_stdout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "saved_stdout")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_stderr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_stderr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_stderr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "saved_stderr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_stdin")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_stdin")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_stdin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "saved_stdin")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_os_environ")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ")")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ",")
(ID "dict")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_os_environ")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_environ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "=")
(ID "saved_environ")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved_environ")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_path")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "=")
(ID "saved_path")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "saved_path")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_path_hooks")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT ")")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_path_hooks")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_hooks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT "=")
(ID "saved_hooks")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "saved_hooks")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_gettrace")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "gettrace")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_gettrace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "trace_fxn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "settrace")
(PUNCT "(")
(ID "trace_fxn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get___import__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "builtins")
(PUNCT ".")
(ID "__import__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore___import__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "import_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtins")
(PUNCT ".")
(ID "__import__")
(PUNCT "=")
(ID "import_")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_warnings_filters")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT ")")
(PUNCT ",")
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT ",")
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_warnings_filters")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_filters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "=")
(ID "saved_filters")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "saved_filters")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_asyncore_socket_map")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "asyncore")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "asyncore")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "asyncore")
(KEYWORD and)
(ID "asyncore")
(PUNCT ".")
(ID "socket_map")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_asyncore_socket_map")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_map")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "asyncore")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "asyncore")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "asyncore")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "asyncore")
(PUNCT ".")
(ID "close_all")
(PUNCT "(")
(ID "ignore_all")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "asyncore")
(PUNCT ".")
(ID "socket_map")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved_map")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_shutil_archive_formats")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "shutil")
(PUNCT ".")
(ID "_ARCHIVE_FORMATS")
(PUNCT ",")
(ID "shutil")
(PUNCT ".")
(ID "_ARCHIVE_FORMATS")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_shutil_archive_formats")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "_ARCHIVE_FORMATS")
(PUNCT "=")
(ID "saved")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "shutil")
(PUNCT ".")
(ID "_ARCHIVE_FORMATS")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "shutil")
(PUNCT ".")
(ID "_ARCHIVE_FORMATS")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_shutil_unpack_formats")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "shutil")
(PUNCT ".")
(ID "_UNPACK_FORMATS")
(PUNCT ",")
(ID "shutil")
(PUNCT ".")
(ID "_UNPACK_FORMATS")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_shutil_unpack_formats")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "_UNPACK_FORMATS")
(PUNCT "=")
(ID "saved")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "shutil")
(PUNCT ".")
(ID "_UNPACK_FORMATS")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "shutil")
(PUNCT ".")
(ID "_UNPACK_FORMATS")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_logging__handlers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT ")")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_logging__handlers")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_handlers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_logging__handlerList")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "_handlerList")
(PUNCT ")")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "_handlerList")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "_handlerList")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_logging__handlerList")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_handlerList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sys_warnoptions")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT ")")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sys_warnoptions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_options")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT "=")
(ID "saved_options")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "saved_options")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_threading__dangling")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "threading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "threading")
(PUNCT ".")
(ID "_dangling")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_threading__dangling")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "threading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "threading")
(PUNCT ".")
(ID "_dangling")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "threading")
(PUNCT ".")
(ID "_dangling")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_multiprocessing_process__dangling")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "multiprocessing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "multiprocessing")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "_cleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "multiprocessing")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "_dangling")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_multiprocessing_process__dangling")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "multiprocessing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "multiprocessing")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "_dangling")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "multiprocessing")
(PUNCT ".")
(ID "process")
(PUNCT ".")
(ID "_dangling")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sysconfig__CONFIG_VARS")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "sysconfig")
(PUNCT ".")
(ID "_CONFIG_VARS")
(PUNCT ")")
(PUNCT ",")
(ID "sysconfig")
(PUNCT ".")
(ID "_CONFIG_VARS")
(PUNCT ",")
(ID "dict")
(PUNCT "(")
(ID "sysconfig")
(PUNCT ".")
(ID "_CONFIG_VARS")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sysconfig__CONFIG_VARS")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sysconfig")
(PUNCT ".")
(ID "_CONFIG_VARS")
(PUNCT "=")
(ID "saved")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "sysconfig")
(PUNCT ".")
(ID "_CONFIG_VARS")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sysconfig")
(PUNCT ".")
(ID "_CONFIG_VARS")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sysconfig__INSTALL_SCHEMES")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "sysconfig")
(PUNCT ".")
(ID "_INSTALL_SCHEMES")
(PUNCT ")")
(PUNCT ",")
(ID "sysconfig")
(PUNCT ".")
(ID "_INSTALL_SCHEMES")
(PUNCT ",")
(ID "sysconfig")
(PUNCT ".")
(ID "_INSTALL_SCHEMES")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_sysconfig__INSTALL_SCHEMES")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sysconfig")
(PUNCT ".")
(ID "_INSTALL_SCHEMES")
(PUNCT "=")
(ID "saved")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "sysconfig")
(PUNCT ".")
(ID "_INSTALL_SCHEMES")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sysconfig")
(PUNCT ".")
(ID "_INSTALL_SCHEMES")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "saved")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_support_TESTFN")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(LIT "f")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(LIT "d")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_support_TESTFN")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved_value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "saved_value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "rmtree")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_lc")
(PUNCT "=")
(PUNCT "[")
(ID "getattr")
(PUNCT "(")
(ID "locale")
(PUNCT ",")
(ID "lc")
(PUNCT ")")
(KEYWORD for)
(ID "lc")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "locale")
(PUNCT ")")
(KEYWORD if)
(ID "lc")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "LC_")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "get_locale")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pairings")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "lc")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_lc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pairings")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "lc")
(PUNCT ",")
(ID "locale")
(PUNCT ".")
(ID "setlocale")
(PUNCT "(")
(ID "lc")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "pairings")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_locale")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "saved")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "lc")
(PUNCT ",")
(ID "setting")
(KEYWORD in)
(ID "saved")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "locale")
(PUNCT ".")
(ID "setlocale")
(PUNCT "(")
(ID "lc")
(PUNCT ",")
(ID "setting")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_warnings_showwarning")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "warnings")
(PUNCT ".")
(ID "showwarning")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restore_warnings_showwarning")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fxn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "showwarning")
(PUNCT "=")
(ID "fxn")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resource_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "resources")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_suffix")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "get_name")
(PUNCT "=")
(LIT "get_")
(PUNCT "+")
(ID "method_suffix")
(NEWLINE)
(ID "restore_name")
(PUNCT "=")
(LIT "restore_")
(PUNCT "+")
(ID "method_suffix")
(NEWLINE)
(KEYWORD yield)
(ID "name")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "get_name")
(PUNCT ")")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "restore_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "saved_values")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "get")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "get")
(PUNCT ",")
(ID "restore")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "resource_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_type")
(PUNCT ",")
(ID "exc_val")
(PUNCT ",")
(ID "exc_tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "saved_values")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "saved_values")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "saved_values")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "get")
(PUNCT ",")
(ID "restore")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "resource_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "current")
(PUNCT "=")
(ID "get")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "original")
(PUNCT "=")
(ID "saved_values")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "current")
(PUNCT "!=")
(ID "original")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "changed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "restore")
(PUNCT "(")
(ID "original")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Warning -- {} was modified by {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "testname")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "  Before: {}\n  After:  {} ")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "original")
(PUNCT ",")
(ID "current")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "runtest_inner")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "quiet")
(PUNCT ",")
(ID "huntrleaks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "display_failure")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "support")
(PUNCT ".")
(ID "unload")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(ID "test_time")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(ID "refleak")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "test")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "test.")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "abstest")
(PUNCT "=")
(ID "test")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "abstest")
(PUNCT "=")
(LIT "test.")
(PUNCT "+")
(ID "test")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "saved_test_environment")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "quiet")
(PUNCT ")")
(KEYWORD as)
(ID "environment")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start_time")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "the_module")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "import_module")
(PUNCT "(")
(ID "abstest")
(PUNCT ")")
(NEWLINE)
(ID "test_runner")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "the_module")
(PUNCT ",")
(LIT "test_main")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "test_runner")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "test_runner")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "unittest")
(PUNCT ".")
(ID "TestLoader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tests")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "loadTestsFromModule")
(PUNCT "(")
(ID "the_module")
(PUNCT ")")
(NEWLINE)
(ID "support")
(PUNCT ".")
(ID "run_unittest")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "test_runner")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "huntrleaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "refleak")
(PUNCT "=")
(ID "dash_R")
(PUNCT "(")
(ID "the_module")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "test_runner")
(PUNCT ",")
(ID "huntrleaks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "test_time")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "start_time")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "support")
(PUNCT ".")
(ID "ResourceDenied")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(LIT "skipped --")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "RESOURCE_DENIED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "unittest")
(PUNCT ".")
(ID "SkipTest")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(LIT "skipped --")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "SKIPPED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "support")
(PUNCT ".")
(ID "TestFailed")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "display_failure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "test")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(LIT "failed --")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "test")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(LIT "failed")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "FAILED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "traceback")
(PUNCT ".")
(ID "format_exc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "test")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(LIT "crashed --")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "FAILED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "refleak")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "FAILED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "environment")
(PUNCT ".")
(ID "changed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ENV_CHANGED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "PASSED")
(PUNCT ",")
(ID "test_time")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "cleanup_test_droppings")
(PUNCT "(")
(ID "testname")
(PUNCT ",")
(ID "verbose")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(NEWLINE)
(KEYWORD import)
(ID "gc")
(NEWLINE)
(ID "gc")
(PUNCT ".")
(ID "collect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "TESTFN")
(PUNCT ",")
(LIT "db_home")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT ",")
(ID "nuker")
(PUNCT "=")
(LIT "directory")
(PUNCT ",")
(ID "shutil")
(PUNCT ".")
(ID "rmtree")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT ",")
(ID "nuker")
(PUNCT "=")
(LIT "file")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "unlink")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemError")
(PUNCT "(")
(LIT "os.path says %r exists but is neither ")
(LIT "directory nor file")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%r left behind %s %r")
(PUNCT "%")
(PUNCT "(")
(ID "testname")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "chmod")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "stat")
(PUNCT ".")
(ID "S_IRWXU")
(PUNCT "|")
(ID "stat")
(PUNCT ".")
(ID "S_IRWXG")
(PUNCT "|")
(ID "stat")
(PUNCT ".")
(ID "S_IRWXO")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nuker")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT "%r left behind %s %r and it couldn't be ")
(LIT "removed: %s")
(PUNCT "%")
(PUNCT "(")
(ID "testname")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "dash_R")
(PUNCT "(")
(ID "the_module")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "indirect_test")
(PUNCT ",")
(ID "huntrleaks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run a test multiple times, looking for reference leaks.\n\n    Returns:\n        False if the test didn't leak references; True if we detected refleaks.\n    ")
(NEWLINE)
(KEYWORD import)
(ID "copyreg")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(PUNCT ".")
(ID "abc")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "gettotalrefcount")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Exception")
(PUNCT "(")
(LIT "Tracking reference leaks requires a debug build ")
(LIT "of Python")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fs")
(PUNCT "=")
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "ps")
(PUNCT "=")
(ID "copyreg")
(PUNCT ".")
(ID "dispatch_table")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pic")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "path_importer_cache")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "zipimport")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zdc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zdc")
(PUNCT "=")
(ID "zipimport")
(PUNCT ".")
(ID "_zip_directory_cache")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "abcs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "abc")
(KEYWORD in)
(PUNCT "[")
(ID "getattr")
(PUNCT "(")
(ID "collections")
(PUNCT ".")
(ID "abc")
(PUNCT ",")
(ID "a")
(PUNCT ")")
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "collections")
(PUNCT ".")
(ID "abc")
(PUNCT ".")
(ID "__all__")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isabstract")
(PUNCT "(")
(ID "abc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(ID "abc")
(PUNCT ".")
(ID "__subclasses__")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(PUNCT "[")
(ID "abc")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "abcs")
(PUNCT "[")
(ID "obj")
(PUNCT "]")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "_abc_registry")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "nwarmup")
(PUNCT ",")
(ID "ntracked")
(PUNCT ",")
(ID "fname")
(PUNCT "=")
(ID "huntrleaks")
(NEWLINE)
(ID "fname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "support")
(PUNCT ".")
(ID "SAVEDCWD")
(PUNCT ",")
(ID "fname")
(PUNCT ")")
(NEWLINE)
(ID "repcount")
(PUNCT "=")
(ID "nwarmup")
(PUNCT "+")
(ID "ntracked")
(NEWLINE)
(ID "rc_deltas")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "repcount")
(NEWLINE)
(ID "alloc_deltas")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "repcount")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "beginning")
(PUNCT ",")
(ID "repcount")
(PUNCT ",")
(LIT "repetitions")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(LIT "1234567890")
(PUNCT "*")
(PUNCT "(")
(ID "repcount")
(PUNCT "//")
(LIT 10)
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(ID "repcount")
(PUNCT "]")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "repcount")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indirect_test")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "alloc_after")
(PUNCT ",")
(ID "rc_after")
(PUNCT "=")
(ID "dash_R_cleanup")
(PUNCT "(")
(ID "fs")
(PUNCT ",")
(ID "ps")
(PUNCT ",")
(ID "pic")
(PUNCT ",")
(ID "zdc")
(PUNCT ",")
(ID "abcs")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(ID "nwarmup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rc_deltas")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "rc_after")
(PUNCT "-")
(ID "rc_before")
(NEWLINE)
(ID "alloc_deltas")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "alloc_after")
(PUNCT "-")
(ID "alloc_before")
(NEWLINE)
(DEDENT)
(ID "alloc_before")
(PUNCT ",")
(ID "rc_before")
(PUNCT "=")
(ID "alloc_after")
(PUNCT ",")
(ID "rc_after")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "check_rc_deltas")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "any")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_alloc_deltas")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT 3)
(PUNCT "*")
(ID "deltas")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "set")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT "<=")
(PUNCT "{")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "failed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "deltas")
(PUNCT ",")
(ID "item_name")
(PUNCT ",")
(ID "checker")
(KEYWORD in)
(PUNCT "[")
(PUNCT "(")
(ID "rc_deltas")
(PUNCT ",")
(LIT "references")
(PUNCT ",")
(ID "check_rc_deltas")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "alloc_deltas")
(PUNCT ",")
(LIT "memory blocks")
(PUNCT ",")
(ID "check_alloc_deltas")
(PUNCT ")")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "checker")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "%s leaked %s %s, sum=%s")
(PUNCT "%")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "deltas")
(PUNCT "[")
(ID "nwarmup")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "item_name")
(PUNCT ",")
(ID "sum")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(LIT "a")
(PUNCT ")")
(KEYWORD as)
(ID "refrep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "refrep")
(PUNCT ")")
(NEWLINE)
(ID "refrep")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "failed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "failed")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dash_R_cleanup")
(PUNCT "(")
(ID "fs")
(PUNCT ",")
(ID "ps")
(PUNCT ",")
(ID "pic")
(PUNCT ",")
(ID "zdc")
(PUNCT ",")
(ID "abcs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "gc")
(PUNCT ",")
(ID "copyreg")
(NEWLINE)
(KEYWORD import)
(ID "_strptime")
(PUNCT ",")
(ID "linecache")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ",")
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ",")
(ID "mimetypes")
(PUNCT ",")
(ID "doctest")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(PUNCT ",")
(ID "filecmp")
(PUNCT ",")
(ID "collections")
(PUNCT ".")
(ID "abc")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "dir_util")
(KEYWORD import)
(ID "_path_created")
(NEWLINE)
(KEYWORD from)
(ID "weakref")
(KEYWORD import)
(ID "WeakSet")
(NEWLINE)
(KEYWORD for)
(ID "mod")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "mod")
(PUNCT ",")
(LIT "__warningregistry__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "mod")
(PUNCT ".")
(ID "__warningregistry__")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "fs")
(NEWLINE)
(ID "copyreg")
(PUNCT ".")
(ID "dispatch_table")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "copyreg")
(PUNCT ".")
(ID "dispatch_table")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "ps")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path_importer_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path_importer_cache")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "pic")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "zipimport")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zipimport")
(PUNCT ".")
(ID "_zip_directory_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "zipimport")
(PUNCT ".")
(ID "_zip_directory_cache")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "zdc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "_clear_type_cache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "abc")
(KEYWORD in)
(PUNCT "[")
(ID "getattr")
(PUNCT "(")
(ID "collections")
(PUNCT ".")
(ID "abc")
(PUNCT ",")
(ID "a")
(PUNCT ")")
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "collections")
(PUNCT ".")
(ID "abc")
(PUNCT ".")
(ID "__all__")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isabstract")
(PUNCT "(")
(ID "abc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(ID "abc")
(PUNCT ".")
(ID "__subclasses__")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(PUNCT "[")
(ID "abc")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT ".")
(ID "_abc_registry")
(PUNCT "=")
(ID "abcs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "WeakSet")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "_abc_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "_abc_negative_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "stream")
(KEYWORD in)
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "__stdout__")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "__stderr__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stream")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_path_created")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "re")
(PUNCT ".")
(ID "purge")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_strptime")
(PUNCT ".")
(ID "_regex_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "clear_cache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ".")
(ID "urlcleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "linecache")
(PUNCT ".")
(ID "clearcache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mimetypes")
(PUNCT ".")
(ID "_default_mime_types")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "filecmp")
(PUNCT ".")
(ID "_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "struct")
(PUNCT ".")
(ID "_clearcache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "doctest")
(PUNCT ".")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ctypes")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctypes")
(PUNCT ".")
(ID "_reset_cache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "func1")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "getallocatedblocks")
(NEWLINE)
(ID "func2")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "gettotalrefcount")
(NEWLINE)
(ID "gc")
(PUNCT ".")
(ID "collect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "func1")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "func2")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "warm_caches")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT "=")
(PUNCT "[")
(ID "chr")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "x")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "range")
(PUNCT "(")
(PUNCT "-")
(LIT 5)
(PUNCT ",")
(LIT 257)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "findtestdir")
(PUNCT "(")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "curdir")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "removepy")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "idx")
(PUNCT ",")
(ID "name")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "basename")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(PUNCT "==")
(LIT ".py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(PUNCT "=")
(ID "basename")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "count")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "word")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%d %s")
(PUNCT "%")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "word")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%d %ss")
(PUNCT "%")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "word")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "printlist")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(LIT 70)
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print the elements of iterable x to stdout.\n\n    Optional arg width (default 70) is the maximum line length.\n    Optional arg indent (default 4) is the number of blanks with which to\n    begin each line.\n    ")
(NEWLINE)
(KEYWORD from)
(ID "textwrap")
(KEYWORD import)
(ID "fill")
(NEWLINE)
(ID "blanks")
(PUNCT "=")
(LIT " ")
(PUNCT "*")
(ID "indent")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "fill")
(PUNCT "(")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "elt")
(PUNCT ")")
(KEYWORD for)
(ID "elt")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "initial_indent")
(PUNCT "=")
(ID "blanks")
(PUNCT ",")
(ID "subsequent_indent")
(PUNCT "=")
(ID "blanks")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main_in_temp_cwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run main() in a temporary working directory.")
(NEWLINE)
(KEYWORD if)
(ID "sysconfig")
(PUNCT ".")
(ID "is_python_build")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "TEMPDIR")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "test_cwd")
(PUNCT "=")
(LIT "test_python_{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "test_cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "TEMPDIR")
(PUNCT ",")
(ID "test_cwd")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "support")
(PUNCT ".")
(ID "temp_cwd")
(PUNCT "(")
(ID "test_cwd")
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mydir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "==")
(ID "mydir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__file__")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "__file__")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "main_in_temp_cwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
