(LIT "XML-RPC Servers.\n\nThis module can be used to create simple XML-RPC servers\nby creating a server and either installing functions, a\nclass instance, or by extending the SimpleXMLRPCServer\nclass.\n\nIt can also be used to handle XML-RPC requests in a CGI\nenvironment using CGIXMLRPCRequestHandler.\n\nThe Doc* classes can be used to create XML-RPC servers that\nserve pydoc-style documentation in response to HTTP\nGET requests. This documentation is dynamically generated\nbased on the functions and methods registered with the\nserver.\n\nA list of possible usage patterns follows:\n\n1. Install functions:\n\nserver = SimpleXMLRPCServer((\"localhost\", 8000))\nserver.register_function(pow)\nserver.register_function(lambda x,y: x+y, 'add')\nserver.serve_forever()\n\n2. Install an instance:\n\nclass MyFuncs:\n    def __init__(self):\n        # make all of the sys functions available through sys.func_name\n        import sys\n        self.sys = sys\n    def _listMethods(self):\n        # implement this method so that system.listMethods\n        # knows to advertise the sys methods\n        return list_public_methods(self) + \\\n                ['sys.' + method for method in list_public_methods(self.sys)]\n    def pow(self, x, y): return pow(x, y)\n    def add(self, x, y) : return x + y\n\nserver = SimpleXMLRPCServer((\"localhost\", 8000))\nserver.register_introspection_functions()\nserver.register_instance(MyFuncs())\nserver.serve_forever()\n\n3. Install an instance with custom dispatch method:\n\nclass Math:\n    def _listMethods(self):\n        # this method must be present for system.listMethods\n        # to work\n        return ['add', 'pow']\n    def _methodHelp(self, method):\n        # this method must be present for system.methodHelp\n        # to work\n        if method == 'add':\n            return \"add(2,3) => 5\"\n        elif method == 'pow':\n            return \"pow(x, y[, z]) => number\"\n        else:\n            # By convention, return empty\n            # string if no help is available\n            return \"\"\n    def _dispatch(self, method, params):\n        if method == 'pow':\n            return pow(*params)\n        elif method == 'add':\n            return params[0] + params[1]\n        else:\n            raise ValueError('bad method')\n\nserver = SimpleXMLRPCServer((\"localhost\", 8000))\nserver.register_introspection_functions()\nserver.register_instance(Math())\nserver.serve_forever()\n\n4. Subclass SimpleXMLRPCServer:\n\nclass MathServer(SimpleXMLRPCServer):\n    def _dispatch(self, method, params):\n        try:\n            # We are forcing the 'export_' prefix on methods that are\n            # callable through XML-RPC to prevent potential security\n            # problems\n            func = getattr(self, 'export_' + method)\n        except AttributeError:\n            raise Exception('method \"%s\" is not supported' % method)\n        else:\n            return func(*params)\n\n    def export_add(self, x, y):\n        return x + y\n\nserver = MathServer((\"localhost\", 8000))\nserver.serve_forever()\n\n5. CGI script:\n\nserver = CGIXMLRPCRequestHandler()\nserver.register_function(pow)\nserver.handle_request()\n")
(NEWLINE)
(KEYWORD from)
(ID "xmlrpc")
(PUNCT ".")
(ID "client")
(KEYWORD import)
(ID "Fault")
(PUNCT ",")
(ID "dumps")
(PUNCT ",")
(ID "loads")
(PUNCT ",")
(ID "gzip_encode")
(PUNCT ",")
(ID "gzip_decode")
(NEWLINE)
(KEYWORD from)
(ID "http")
(PUNCT ".")
(ID "server")
(KEYWORD import)
(ID "BaseHTTPRequestHandler")
(NEWLINE)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "server")
(NEWLINE)
(KEYWORD import)
(ID "socketserver")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "pydoc")
(NEWLINE)
(KEYWORD import)
(ID "inspect")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "fcntl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fcntl")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resolve_dotted_attribute")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "allow_dotted_names")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d\n\n    Resolves a dotted attribute name to an object.  Raises\n    an AttributeError if any attribute in the chain starts with a '_'.\n\n    If the optional allow_dotted_names argument is false, dots are not\n    supported and this function operates similar to getattr(obj, attr).\n    ")
(NEWLINE)
(KEYWORD if)
(ID "allow_dotted_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT "=")
(ID "attr")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT "=")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "attempt to access private attribute \"%s\"")
(PUNCT "%")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "list_public_methods")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a list of attribute strings, found in the specified\n    object, which represent callable attributes")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "member")
(KEYWORD for)
(ID "member")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(ID "member")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(KEYWORD and)
(ID "callable")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "member")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SimpleXMLRPCDispatcher")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Mix-in class that dispatches XML-RPC requests.\n\n    This class is used to register XML-RPC method handlers\n    and then to dispatch them. This class doesn't need to be\n    instanced directly when used by SimpleXMLRPCServer but it\n    can be instanced when used by the MultiPathXMLRPCServer\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT "=")
(ID "allow_none")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(KEYWORD or)
(LIT "utf-8")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register_instance")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "instance")
(PUNCT ",")
(ID "allow_dotted_names")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Registers an instance to respond to XML-RPC requests.\n\n        Only one instance can be installed at a time.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called. Methods beginning with an '_'\n        are considered private and will not be called by\n        SimpleXMLRPCServer.\n\n        If a registered function matches a XML-RPC request, then it\n        will be called instead of the registered instance.\n\n        If the optional allow_dotted_names argument is true and the\n        instance does not have a _dispatch method, method names\n        containing dots are supported and resolved, as long as none of\n        the name segments start with an '_'.\n\n            *** SECURITY WARNING: ***\n\n            Enabling the allow_dotted_names options allows intruders\n            to access your module's global variables and may allow\n            intruders to execute arbitrary code on your machine.  Only\n            use this option on a secure, closed network.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT "=")
(ID "instance")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_dotted_names")
(PUNCT "=")
(ID "allow_dotted_names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register_function")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "function")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Registers a function to respond to XML-RPC requests.\n\n        The optional name argument can be used to set a Unicode name\n        for the function.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "function")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "function")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register_introspection_functions")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Registers the XML-RPC introspection methods in the system\n        namespace.\n\n        see http://xmlrpc.usefulinc.com/doc/reserved.html\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT "{")
(LIT "system.listMethods")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "system_listMethods")
(PUNCT ",")
(LIT "system.methodSignature")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "system_methodSignature")
(PUNCT ",")
(LIT "system.methodHelp")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "system_methodHelp")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register_multicall_functions")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Registers the XML-RPC multicall method in the system\n        namespace.\n\n        see http://www.xmlrpc.com/discuss/msgReader$1208")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT "{")
(LIT "system.multicall")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "system_multicall")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_marshaled_dispatch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "dispatch_method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dispatches an XML-RPC method from marshalled (XML) data.\n\n        XML-RPC methods are dispatched from the marshalled (XML) data\n        using the _dispatch method and the result is returned as\n        marshalled data. For backwards compatibility, a dispatch\n        function can be provided as an argument (see comment in\n        SimpleXMLRPCRequestHandler.do_POST) but overriding the\n        existing method through subclassing is the preferred means\n        of changing method dispatch behavior.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(ID "loads")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dispatch_method")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "dispatch_method")
(PUNCT "(")
(ID "method")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_dispatch")
(PUNCT "(")
(ID "method")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "response")
(PUNCT "=")
(PUNCT "(")
(ID "response")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "dumps")
(PUNCT "(")
(ID "response")
(PUNCT ",")
(ID "methodresponse")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Fault")
(KEYWORD as)
(ID "fault")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "dumps")
(PUNCT "(")
(ID "fault")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "exc_tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "dumps")
(PUNCT "(")
(ID "Fault")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "response")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "system_listMethods")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "system.listMethods() => ['add', 'subtract', 'multiple']\n\n        Returns a list of the methods supported by the server.")
(NEWLINE)
(ID "methods")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "instance")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_listMethods")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "methods")
(PUNCT "|=")
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ".")
(ID "_listMethods")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_dispatch")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "methods")
(PUNCT "|=")
(ID "set")
(PUNCT "(")
(ID "list_public_methods")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "sorted")
(PUNCT "(")
(ID "methods")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "system_methodSignature")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "system.methodSignature('add') => [double, int, int]\n\n        Returns a list describing the signature of the method. In the\n        above example, the add method takes two integers as arguments\n        and returns a double result.\n\n        This server does NOT support system.methodSignature.")
(NEWLINE)
(KEYWORD return)
(LIT "signatures not supported")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "system_methodHelp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "system.methodHelp('add') => \"Adds two integers together\"\n\n        Returns a string containing documentation for the specified method.")
(NEWLINE)
(ID "method")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "method_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT "[")
(ID "method_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "instance")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_methodHelp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ".")
(ID "_methodHelp")
(PUNCT "(")
(ID "method_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_dispatch")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "resolve_dotted_attribute")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(ID "method_name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "allow_dotted_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "method")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "pydoc")
(PUNCT ".")
(ID "getdoc")
(PUNCT "(")
(ID "method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "system_multicall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "call_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "system.multicall([{'methodName': 'add', 'params': [2, 2]}, ...]) => [[4], ...]\n\n        Allows the caller to package multiple XML-RPC calls into a single\n        request.\n\n        See http://www.xmlrpc.com/discuss/msgReader$1208\n        ")
(NEWLINE)
(ID "results")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "call")
(KEYWORD in)
(ID "call_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_name")
(PUNCT "=")
(ID "call")
(PUNCT "[")
(LIT "methodName")
(PUNCT "]")
(NEWLINE)
(ID "params")
(PUNCT "=")
(ID "call")
(PUNCT "[")
(LIT "params")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_dispatch")
(PUNCT "(")
(ID "method_name")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Fault")
(KEYWORD as)
(ID "fault")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "{")
(LIT "faultCode")
(PUNCT ":")
(ID "fault")
(PUNCT ".")
(ID "faultCode")
(PUNCT ",")
(LIT "faultString")
(PUNCT ":")
(ID "fault")
(PUNCT ".")
(ID "faultString")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "exc_tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "{")
(LIT "faultCode")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "faultString")
(PUNCT ":")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ")")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "results")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dispatch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dispatches the XML-RPC method.\n\n        XML-RPC calls are forwarded to a registered function that\n        matches the called XML-RPC method name. If no such function\n        exists then the call is forwarded to the registered instance,\n        if available.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called.\n\n        Methods beginning with an '_' are considered private and will\n        not be called.\n        ")
(NEWLINE)
(ID "func")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT "[")
(ID "method")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "instance")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_dispatch")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ".")
(ID "_dispatch")
(PUNCT "(")
(ID "method")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "resolve_dotted_attribute")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "allow_dotted_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "func")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Exception")
(PUNCT "(")
(LIT "method \"%s\" is not supported")
(PUNCT "%")
(ID "method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SimpleXMLRPCRequestHandler")
(PUNCT "(")
(ID "BaseHTTPRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Simple XML-RPC request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n    ")
(NEWLINE)
(ID "rpc_paths")
(PUNCT "=")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT "/RPC2")
(PUNCT ")")
(NEWLINE)
(ID "encode_threshold")
(PUNCT "=")
(LIT 1400)
(NEWLINE)
(ID "wbufsize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "disable_nagle_algorithm")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "aepattern")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\n                            \\s* ([^\\s;]+) \\s*            #content-coding\n                            (;\\s* q \\s*=\\s* ([0-9\\.]+))? #q\n                            ")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "VERBOSE")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "IGNORECASE")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "accept_encodings")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "ae")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "Accept-Encoding")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "e")
(KEYWORD in)
(ID "ae")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "aepattern")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(KEYWORD if)
(ID "v")
(KEYWORD else)
(LIT 1.0)
(NEWLINE)
(ID "r")
(PUNCT "[")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_rpc_path_valid")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "rpc_paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "path")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "rpc_paths")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "do_POST")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handles the HTTP POST request.\n\n        Attempts to interpret all HTTP POST requests as XML-RPC calls,\n        which are forwarded to the server's _dispatch method for handling.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_rpc_path_valid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "report_404")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_chunk_size")
(PUNCT "=")
(LIT 10)
(PUNCT "*")
(LIT 1024)
(PUNCT "*")
(LIT 1024)
(NEWLINE)
(ID "size_remaining")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "[")
(LIT "content-length")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "L")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "size_remaining")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk_size")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "size_remaining")
(PUNCT ",")
(ID "max_chunk_size")
(PUNCT ")")
(NEWLINE)
(ID "chunk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "chunk_size")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "L")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(ID "size_remaining")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "L")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "L")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "decode_request_content")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "_marshaled_dispatch")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_dispatch")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 500)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ",")
(LIT "_send_traceback_header")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "_send_traceback_header")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "X-exception")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "trace")
(PUNCT "=")
(ID "traceback")
(PUNCT ".")
(ID "format_exc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "trace")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "trace")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ASCII")
(PUNCT ",")
(LIT "backslashreplace")
(PUNCT ")")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "X-traceback")
(PUNCT ",")
(ID "trace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 200)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "text/xml")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "encode_threshold")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "encode_threshold")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "accept_encodings")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "gzip")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "q")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "gzip_encode")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-Encoding")
(PUNCT ",")
(LIT "gzip")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NotImplementedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "decode_request_content")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "content-encoding")
(PUNCT ",")
(LIT "identity")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT "==")
(LIT "identity")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "encoding")
(PUNCT "==")
(LIT "gzip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "gzip_decode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NotImplementedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 501)
(PUNCT ",")
(LIT "encoding %r not supported")
(PUNCT "%")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 400)
(PUNCT ",")
(LIT "error decoding gzip content")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 501)
(PUNCT ",")
(LIT "encoding %r not supported")
(PUNCT "%")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "report_404")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 404)
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(LIT #"No such page")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "text/plain")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT "=")
(LIT "-")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Selectively log an accepted request.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "logRequests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BaseHTTPRequestHandler")
(PUNCT ".")
(ID "log_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SimpleXMLRPCServer")
(PUNCT "(")
(ID "socketserver")
(PUNCT ".")
(ID "TCPServer")
(PUNCT ",")
(ID "SimpleXMLRPCDispatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Simple XML-RPC server.\n\n    Simple XML-RPC server that allows functions and a single instance\n    to be installed to handle requests. The default implementation\n    attempts to dispatch XML-RPC calls to the functions or instance\n    installed in the server. Override the _dispatch method inherited\n    from SimpleXMLRPCDispatcher to change this behavior.\n    ")
(NEWLINE)
(ID "allow_reuse_address")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "_send_traceback_header")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "requestHandler")
(PUNCT "=")
(ID "SimpleXMLRPCRequestHandler")
(PUNCT ",")
(ID "logRequests")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bind_and_activate")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "logRequests")
(PUNCT "=")
(ID "logRequests")
(NEWLINE)
(ID "SimpleXMLRPCDispatcher")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allow_none")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(ID "socketserver")
(PUNCT ".")
(ID "TCPServer")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "requestHandler")
(PUNCT ",")
(ID "bind_and_activate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MultiPathXMLRPCServer")
(PUNCT "(")
(ID "SimpleXMLRPCServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Multipath XML-RPC Server\n    This specialization of SimpleXMLRPCServer allows the user to create\n    multiple Dispatcher instances and assign them to different\n    HTTP request paths.  This makes it possible to run two or more\n    'virtual XML-RPC servers' at the same port.\n    Make sure that the requestHandler accepts the paths in question.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "requestHandler")
(PUNCT "=")
(ID "SimpleXMLRPCRequestHandler")
(PUNCT ",")
(ID "logRequests")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bind_and_activate")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "SimpleXMLRPCServer")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "requestHandler")
(PUNCT ",")
(ID "logRequests")
(PUNCT ",")
(ID "allow_none")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "bind_and_activate")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dispatchers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT "=")
(ID "allow_none")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(KEYWORD or)
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_dispatcher")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "dispatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dispatchers")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(PUNCT "=")
(ID "dispatcher")
(NEWLINE)
(KEYWORD return)
(ID "dispatcher")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_dispatcher")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "dispatchers")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_marshaled_dispatch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "dispatch_method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatchers")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(PUNCT ".")
(ID "_marshaled_dispatch")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "dispatch_method")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "dumps")
(PUNCT "(")
(ID "Fault")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "response")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "CGIXMLRPCRequestHandler")
(PUNCT "(")
(ID "SimpleXMLRPCDispatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Simple handler for XML-RPC data passed through CGI.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "SimpleXMLRPCDispatcher")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allow_none")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_xmlrpc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request_text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle a single XML-RPC request")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_marshaled_dispatch")
(PUNCT "(")
(ID "request_text")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Content-Type: text/xml")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Content-Length: %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle a single HTTP GET request.\n\n        Default implementation indicates an error because\n        XML-RPC uses the POST method.\n        ")
(NEWLINE)
(ID "code")
(PUNCT "=")
(LIT 400)
(NEWLINE)
(ID "message")
(PUNCT ",")
(ID "explain")
(PUNCT "=")
(ID "BaseHTTPRequestHandler")
(PUNCT ".")
(ID "responses")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "http")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "DEFAULT_ERROR_MESSAGE")
(PUNCT "%")
(PUNCT "{")
(LIT "code")
(PUNCT ":")
(ID "code")
(PUNCT ",")
(LIT "message")
(PUNCT ":")
(ID "message")
(PUNCT ",")
(LIT "explain")
(PUNCT ":")
(ID "explain")
(PUNCT "}")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "response")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Status: %d %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Content-Type: %s")
(PUNCT "%")
(ID "http")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "DEFAULT_ERROR_CONTENT_TYPE")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Content-Length: %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request_text")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle a single XML-RPC request passed through a CGI post method.\n\n        If no XML data is given then it is read from stdin. The resulting\n        XML-RPC response is printed to stdout along with the correct HTTP\n        headers.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "request_text")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "REQUEST_METHOD")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "==")
(LIT "GET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handle_get")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "length")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "CONTENT_LENGTH")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "length")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "request_text")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request_text")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "handle_xmlrpc")
(PUNCT "(")
(ID "request_text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ServerHTMLDoc")
(PUNCT "(")
(ID "pydoc")
(PUNCT ".")
(ID "HTMLDoc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class used to generate pydoc HTML document for a server")
(NEWLINE)
(KEYWORD def)
(ID "markup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(ID "escape")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "funcs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "classes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "methods")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Mark up some plain text, given a context of symbols to look for.\n        Each context dictionary maps object names to anchor names.")
(NEWLINE)
(ID "escape")
(PUNCT "=")
(ID "escape")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "escape")
(NEWLINE)
(ID "results")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "here")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "pattern")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\b((http|ftp)://\\S+[\\w/]|")
(LIT "RFC[- ]?(\\d+)|")
(LIT "PEP[- ]?(\\d+)|")
(LIT "(self\\.)?((?:\\w|\\.)+))\\b")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "pattern")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "here")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "match")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "span")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "escape")
(PUNCT "(")
(ID "text")
(PUNCT "[")
(ID "here")
(PUNCT ":")
(ID "start")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "all")
(PUNCT ",")
(ID "scheme")
(PUNCT ",")
(ID "rfc")
(PUNCT ",")
(ID "pep")
(PUNCT ",")
(ID "selfdot")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "scheme")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(ID "escape")
(PUNCT "(")
(ID "all")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "&quot;")
(PUNCT ")")
(NEWLINE)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<a href=\"%s\">%s</a>")
(PUNCT "%")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "rfc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(LIT "http://www.rfc-editor.org/rfc/rfc%d.txt")
(PUNCT "%")
(ID "int")
(PUNCT "(")
(ID "rfc")
(PUNCT ")")
(NEWLINE)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<a href=\"%s\">%s</a>")
(PUNCT "%")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "escape")
(PUNCT "(")
(ID "all")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "pep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(LIT "http://www.python.org/dev/peps/pep-%04d/")
(PUNCT "%")
(ID "int")
(PUNCT "(")
(ID "pep")
(PUNCT ")")
(NEWLINE)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<a href=\"%s\">%s</a>")
(PUNCT "%")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "escape")
(PUNCT "(")
(ID "all")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "text")
(PUNCT "[")
(ID "end")
(PUNCT ":")
(ID "end")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "namelink")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "methods")
(PUNCT ",")
(ID "funcs")
(PUNCT ",")
(ID "classes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "selfdot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "self.<strong>%s</strong>")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "namelink")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "classes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "here")
(PUNCT "=")
(ID "end")
(NEWLINE)
(DEDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "escape")
(PUNCT "(")
(ID "text")
(PUNCT "[")
(ID "here")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "results")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "docroutine")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "object")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mod")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "funcs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "classes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "methods")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "cl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Produce HTML documentation for a function or method object.")
(NEWLINE)
(ID "anchor")
(PUNCT "=")
(PUNCT "(")
(ID "cl")
(KEYWORD and)
(ID "cl")
(PUNCT ".")
(ID "__name__")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(PUNCT "+")
(LIT "-")
(PUNCT "+")
(ID "name")
(NEWLINE)
(ID "note")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "title")
(PUNCT "=")
(LIT "<a name=\"%s\"><strong>%s</strong></a>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "anchor")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "inspect")
(PUNCT ".")
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "inspect")
(PUNCT ".")
(ID "getfullargspec")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(ID "argspec")
(PUNCT "=")
(ID "inspect")
(PUNCT ".")
(ID "formatargspec")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "varargs")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "varkw")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "defaults")
(PUNCT ",")
(ID "annotations")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "annotations")
(PUNCT ",")
(ID "formatvalue")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "formatvalue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "inspect")
(PUNCT ".")
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "inspect")
(PUNCT ".")
(ID "getfullargspec")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(ID "argspec")
(PUNCT "=")
(ID "inspect")
(PUNCT ".")
(ID "formatargspec")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "varargs")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "varkw")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "defaults")
(PUNCT ",")
(ID "annotations")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "annotations")
(PUNCT ",")
(ID "formatvalue")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "formatvalue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "argspec")
(PUNCT "=")
(LIT "(...)")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "argspec")
(PUNCT "=")
(ID "object")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD or)
(ID "argspec")
(NEWLINE)
(ID "docstring")
(PUNCT "=")
(ID "object")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD or)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "docstring")
(PUNCT "=")
(ID "pydoc")
(PUNCT ".")
(ID "getdoc")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "decl")
(PUNCT "=")
(ID "title")
(PUNCT "+")
(ID "argspec")
(PUNCT "+")
(PUNCT "(")
(ID "note")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "grey")
(PUNCT "(")
(LIT "<font face=\"helvetica, arial\">%s</font>")
(PUNCT "%")
(ID "note")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "markup")
(PUNCT "(")
(ID "docstring")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "preformat")
(PUNCT ",")
(ID "funcs")
(PUNCT ",")
(ID "classes")
(PUNCT ",")
(ID "methods")
(PUNCT ")")
(NEWLINE)
(ID "doc")
(PUNCT "=")
(ID "doc")
(KEYWORD and)
(LIT "<dd><tt>%s</tt></dd>")
(PUNCT "%")
(ID "doc")
(NEWLINE)
(KEYWORD return)
(LIT "<dl><dt>%s</dt>%s</dl>\n")
(PUNCT "%")
(PUNCT "(")
(ID "decl")
(PUNCT ",")
(ID "doc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "docserver")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "server_name")
(PUNCT ",")
(ID "package_documentation")
(PUNCT ",")
(ID "methods")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Produce HTML documentation for an XML-RPC server.")
(NEWLINE)
(ID "fdict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "methods")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(LIT "#-")
(PUNCT "+")
(ID "key")
(NEWLINE)
(ID "fdict")
(PUNCT "[")
(ID "value")
(PUNCT "]")
(PUNCT "=")
(ID "fdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "server_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "server_name")
(PUNCT ")")
(NEWLINE)
(ID "head")
(PUNCT "=")
(LIT "<big><big><strong>%s</strong></big></big>")
(PUNCT "%")
(ID "server_name")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "heading")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(LIT "#ffffff")
(PUNCT ",")
(LIT "#7799ee")
(PUNCT ")")
(NEWLINE)
(ID "doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "markup")
(PUNCT "(")
(ID "package_documentation")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "preformat")
(PUNCT ",")
(ID "fdict")
(PUNCT ")")
(NEWLINE)
(ID "doc")
(PUNCT "=")
(ID "doc")
(KEYWORD and)
(LIT "<tt>%s</tt>")
(PUNCT "%")
(ID "doc")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "result")
(PUNCT "+")
(LIT "<p>%s</p>\n")
(PUNCT "%")
(ID "doc")
(NEWLINE)
(ID "contents")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "method_items")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "methods")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "method_items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "contents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "docroutine")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "funcs")
(PUNCT "=")
(ID "fdict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "result")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "bigsection")
(PUNCT "(")
(LIT "Methods")
(PUNCT ",")
(LIT "#ffffff")
(PUNCT ",")
(LIT "#eeaa77")
(PUNCT ",")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "contents")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "XMLRPCDocGenerator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generates documentation for an XML-RPC server.\n\n    This class is designed as mix-in and should not\n    be constructed directly.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "server_name")
(PUNCT "=")
(LIT "XML-RPC Server Documentation")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_documentation")
(PUNCT "=")
(LIT "This server exports the following methods through the XML-RPC ")
(LIT "protocol.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_title")
(PUNCT "=")
(LIT "XML-RPC Server Documentation")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_server_title")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "server_title")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the HTML title of the generated server documentation")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_title")
(PUNCT "=")
(ID "server_title")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_server_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "server_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the name of the generated HTML server documentation")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_name")
(PUNCT "=")
(ID "server_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_server_documentation")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "server_documentation")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the documentation string for the entire server.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_documentation")
(PUNCT "=")
(ID "server_documentation")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "generate_html_documentation")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "generate_html_documentation() => html documentation for the server\n\n        Generates HTML documentation for the server using introspection for\n        installed functions and instances that do not implement the\n        _dispatch method. Alternatively, instances can choose to implement\n        the _get_method_argstring(method_name) method to provide the\n        argument string used in the documentation and the\n        _methodHelp(method_name) method to provide the help text used\n        in the documentation.")
(NEWLINE)
(ID "methods")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "method_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "system_listMethods")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "method_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "funcs")
(PUNCT "[")
(ID "method_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "instance")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_info")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_get_method_argstring")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_info")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ".")
(ID "_get_method_argstring")
(PUNCT "(")
(ID "method_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_methodHelp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_info")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ".")
(ID "_methodHelp")
(PUNCT "(")
(ID "method_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "method_info")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "method_info")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "method_info")
(PUNCT "!=")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "method_info")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(LIT "_dispatch")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "resolve_dotted_attribute")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instance")
(PUNCT ",")
(ID "method_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "method_info")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "method_info")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(LIT 0)
(PUNCT ",")
(LIT "Could not find method in self.functions and no ")
(LIT "instance installed")
(NEWLINE)
(DEDENT)
(ID "methods")
(PUNCT "[")
(ID "method_name")
(PUNCT "]")
(PUNCT "=")
(ID "method")
(NEWLINE)
(DEDENT)
(ID "documenter")
(PUNCT "=")
(ID "ServerHTMLDoc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "documentation")
(PUNCT "=")
(ID "documenter")
(PUNCT ".")
(ID "docserver")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "server_name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "server_documentation")
(PUNCT ",")
(ID "methods")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "documenter")
(PUNCT ".")
(ID "page")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "server_title")
(PUNCT ",")
(ID "documentation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DocXMLRPCRequestHandler")
(PUNCT "(")
(ID "SimpleXMLRPCRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "XML-RPC and documentation request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n\n    Handles all HTTP GET requests and interprets them as requests\n    for documentation.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "do_GET")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handles the HTTP GET request.\n\n        Interpret all HTTP GET requests as requests for server\n        documentation.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_rpc_path_valid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "report_404")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "generate_html_documentation")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 200)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "text/html")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DocXMLRPCServer")
(PUNCT "(")
(ID "SimpleXMLRPCServer")
(PUNCT ",")
(ID "XMLRPCDocGenerator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "XML-RPC and HTML documentation server.\n\n    Adds the ability to serve server documentation to the capabilities\n    of SimpleXMLRPCServer.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "requestHandler")
(PUNCT "=")
(ID "DocXMLRPCRequestHandler")
(PUNCT ",")
(ID "logRequests")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bind_and_activate")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "SimpleXMLRPCServer")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "requestHandler")
(PUNCT ",")
(ID "logRequests")
(PUNCT ",")
(ID "allow_none")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "bind_and_activate")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(ID "XMLRPCDocGenerator")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DocCGIXMLRPCRequestHandler")
(PUNCT "(")
(ID "CGIXMLRPCRequestHandler")
(PUNCT ",")
(ID "XMLRPCDocGenerator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handler for XML-RPC data and documentation requests passed through\n    CGI")
(NEWLINE)
(KEYWORD def)
(ID "handle_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handles the HTTP GET request.\n\n        Interpret all HTTP GET requests as requests for server\n        documentation.\n        ")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "generate_html_documentation")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Content-Type: text/html")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Content-Length: %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CGIXMLRPCRequestHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "XMLRPCDocGenerator")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "datetime")
(NEWLINE)
(KEYWORD class)
(ID "ExampleService")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "getData")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "42")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "currentTime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "getCurrentTime")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "now")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "server")
(PUNCT "=")
(ID "SimpleXMLRPCServer")
(PUNCT "(")
(PUNCT "(")
(LIT "localhost")
(PUNCT ",")
(LIT 8000)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "register_function")
(PUNCT "(")
(ID "pow")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "register_function")
(PUNCT "(")
(KEYWORD lambda)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ":")
(ID "x")
(PUNCT "+")
(ID "y")
(PUNCT ",")
(LIT "add")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "register_instance")
(PUNCT "(")
(ID "ExampleService")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "allow_dotted_names")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "register_multicall_functions")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Serving XML-RPC on localhost port 8000")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "It is advisable to run this example server within a secure, closed network.")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "server")
(PUNCT ".")
(ID "serve_forever")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\nKeyboard interrupt received, exiting.")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "server_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
