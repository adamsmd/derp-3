(LIT "An FTP client class and some helper functions.\n\nBased on RFC 959: File Transfer Protocol (FTP), by J. Postel and J. Reynolds\n\nExample:\n\n>>> from ftplib import FTP\n>>> ftp = FTP('ftp.python.org') # connect to host, default port\n>>> ftp.login() # default, i.e.: user anonymous, passwd anonymous@\n'230 Guest login ok, access restrictions apply.'\n>>> ftp.retrlines('LIST') # list directory contents\ntotal 9\ndrwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .\ndrwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..\ndrwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin\ndrwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc\nd-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming\ndrwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib\ndrwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub\ndrwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr\n-rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg\n'226 Transfer complete.'\n>>> ftp.quit()\n'221 Goodbye.'\n>>>\n\nA nice test that reveals some of the network dialogue would be:\npython ftplib.py -d localhost -l -p -l\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD from)
(ID "socket")
(KEYWORD import)
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "FTP")
(PUNCT ",")
(LIT "Netrc")
(PUNCT "]")
(NEWLINE)
(ID "MSG_OOB")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "FTP_PORT")
(PUNCT "=")
(LIT 21)
(NEWLINE)
(ID "MAXLINE")
(PUNCT "=")
(LIT 8192)
(NEWLINE)
(KEYWORD class)
(ID "Error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "error_reply")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "error_temp")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "error_perm")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "error_proto")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(ID "all_errors")
(PUNCT "=")
(PUNCT "(")
(ID "Error")
(PUNCT ",")
(ID "OSError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ")")
(NEWLINE)
(ID "CRLF")
(PUNCT "=")
(LIT "\r\n")
(NEWLINE)
(ID "B_CRLF")
(PUNCT "=")
(LIT #"\r\n")
(NEWLINE)
(KEYWORD class)
(ID "FTP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An FTP client class.\n\n    To create a connection, call the class using these arguments:\n            host, user, passwd, acct, timeout\n\n    The first four arguments are all strings, and have default value ''.\n    timeout must be numeric and defaults to None if not passed,\n    meaning that no timeout will be set on any ftp socket(s)\n    If a timeout is passed, then this is now the default timeout for all ftp\n    socket operations for this instance.\n\n    Then use self.connect() with optional host and port argument.\n\n    To download a file, use ftp.retrlines('RETR ' + filename),\n    or ftp.retrbinary() with slightly different arguments.\n    To upload a file, use ftp.storlines() or ftp.storbinary(),\n    which have an open file as argument (see their definitions\n    below for details).\n    The download/upload functions first issue appropriate TYPE\n    and PORT or PASV commands.\n    ")
(NEWLINE)
(ID "debugging")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "host")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "FTP_PORT")
(NEWLINE)
(ID "maxline")
(PUNCT "=")
(ID "MAXLINE")
(NEWLINE)
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "welcome")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "passiveserver")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(LIT "latin-1")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "acct")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(PUNCT "-")
(LIT 999)
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connect to host.  Arguments are:\n         - host: hostname to connect to (string, default previous host)\n         - port: port to connect to (integer, default previous port)\n         - timeout: the timeout to set against the ftp socket(s)\n         - source_address: a 2-tuple (host, port) for the socket to bind\n           to as its source address before connecting.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT "!=")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "port")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "timeout")
(PUNCT "!=")
(PUNCT "-")
(LIT 999)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "source_address")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "af")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "family")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "welcome")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getwelcome")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the welcome message from the server.\n        (this is read and squirreled away by connect())")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*welcome*")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sanitize")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "welcome")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_debuglevel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the debugging level.\n        The required argument level means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT "=")
(ID "level")
(NEWLINE)
(DEDENT)
(ID "debug")
(PUNCT "=")
(ID "set_debuglevel")
(NEWLINE)
(KEYWORD def)
(ID "set_pasv")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use passive or active mode for data transfers.\n        With a false argument, use the normal PORT mode,\n        With a true argument, use the PASV command.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "passiveserver")
(PUNCT "=")
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sanitize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(KEYWORD in)
(PUNCT "{")
(LIT "pass ")
(PUNCT ",")
(LIT "PASS ")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "+")
(LIT "*")
(PUNCT "*")
(PUNCT "(")
(ID "i")
(PUNCT "-")
(LIT 5)
(PUNCT ")")
(PUNCT "+")
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "putline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "+")
(ID "CRLF")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*put*")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sanitize")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "putcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "*cmd*")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sanitize")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putline")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "got more than %d bytes")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*get*")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sanitize")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EOFError")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(ID "CRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "CRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmultiline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nextline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "+")
(PUNCT "(")
(LIT "\n")
(PUNCT "+")
(ID "nextline")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "nextline")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(ID "code")
(KEYWORD and)
(ID "nextline")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getresp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getmultiline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*resp*")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sanitize")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "lastresp")
(PUNCT "=")
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "c")
(KEYWORD in)
(PUNCT "{")
(LIT "1")
(PUNCT ",")
(LIT "2")
(PUNCT ",")
(LIT "3")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "4")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_temp")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "5")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_perm")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "voidresp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Expect a response beginning with '2'.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "abort")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abort a file transfer.  Uses out-of-band data.\n        This does not follow the procedure from the RFC to send Telnet\n        IP and Synch; that doesn't seem to work with the servers I've\n        tried.  Instead, just send the ABOR command as OOB data.")
(NEWLINE)
(ID "line")
(PUNCT "=")
(LIT #"ABOR")
(PUNCT "+")
(ID "B_CRLF")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*put urgent*")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sanitize")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "MSG_OOB")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getmultiline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "{")
(LIT "426")
(PUNCT ",")
(LIT "225")
(PUNCT ",")
(LIT "226")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sendcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a command and return the response.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "voidcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a command and expect a response beginning with '2'.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sendport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a PORT command with the current host and the given\n        port number.\n        ")
(NEWLINE)
(ID "hbytes")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "pbytes")
(PUNCT "=")
(PUNCT "[")
(ID "repr")
(PUNCT "(")
(ID "port")
(PUNCT "//")
(LIT 256)
(PUNCT ")")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "port")
(PUNCT "%")
(LIT 256)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "bytes")
(PUNCT "=")
(ID "hbytes")
(PUNCT "+")
(ID "pbytes")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "PORT ")
(PUNCT "+")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "bytes")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sendeprt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a EPRT command with the current host and the given port number.")
(NEWLINE)
(ID "af")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "af")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "AF_INET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "af")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "af")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "AF_INET6")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "af")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "af")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(LIT "unsupported address family")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fields")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "af")
(PUNCT ")")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT "]")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "EPRT ")
(PUNCT "+")
(LIT "|")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "fields")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makeport")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new socket and send a PORT command for it.")
(NEWLINE)
(ID "err")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "res")
(KEYWORD in)
(ID "socket")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "af")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "AI_PASSIVE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "af")
(PUNCT ",")
(ID "socktype")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "canonname")
(PUNCT ",")
(ID "sa")
(PUNCT "=")
(ID "res")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "af")
(PUNCT ",")
(ID "socktype")
(PUNCT ",")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "sa")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err")
(PUNCT "=")
(ID "_")
(NEWLINE)
(KEYWORD if)
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "err")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "err")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "getaddrinfo returns an empty list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "sock")
(PUNCT ".")
(ID "listen")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "getsockname")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "getsockname")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "af")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "AF_INET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendport")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendeprt")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "sock")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makepasv")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "af")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "AF_INET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "parse227")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "PASV")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "parse229")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "EPSV")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "getpeername")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "host")
(PUNCT ",")
(ID "port")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ntransfercmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initiate a transfer over the data connection.\n\n        If the transfer is active, send a port command and the\n        transfer command, and accept the connection.  If the server is\n        passive, send a pasv command, connect to it, and start the\n        transfer command.  Either way, return the socket for the\n        connection and the expected size of the transfer.  The\n        expected size may be None if it could not be determined.\n\n        Optional `rest' argument can be a string that is sent as the\n        argument to a REST command.  This is essentially a server\n        marker used to tell the server to skip over any data up to the\n        given marker.\n        ")
(NEWLINE)
(ID "size")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "passiveserver")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "makepasv")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "conn")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "rest")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "REST %s")
(PUNCT "%")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "makeport")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "rest")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "REST %s")
(PUNCT "%")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "conn")
(PUNCT ",")
(ID "sockaddr")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "accept")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(LIT "150")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "parse150")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "conn")
(PUNCT ",")
(ID "size")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "transfercmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like ntransfercmd() but returns only the socket.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "ntransfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "acct")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Login, default anonymous.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT "=")
(LIT "anonymous")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "passwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "passwd")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "acct")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "acct")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "user")
(PUNCT "==")
(LIT "anonymous")
(KEYWORD and)
(ID "passwd")
(KEYWORD in)
(PUNCT "{")
(LIT "")
(PUNCT ",")
(LIT "-")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "passwd")
(PUNCT "=")
(ID "passwd")
(PUNCT "+")
(LIT "anonymous@")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "USER ")
(PUNCT "+")
(ID "user")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "3")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "PASS ")
(PUNCT "+")
(ID "passwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "3")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "ACCT ")
(PUNCT "+")
(ID "acct")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "retrbinary")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "blocksize")
(PUNCT "=")
(LIT 8192)
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieve data in binary mode.  A new port is created for you.\n\n        Args:\n          cmd: A RETR command.\n          callback: A single parameter callable to be called on each\n                    block of data read.\n          blocksize: The maximum number of bytes to read from the\n                     socket at one time.  [default: 8192]\n          rest: Passed to transfercmd().  [default: None]\n\n        Returns:\n          The response code.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "TYPE I")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "transfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(KEYWORD as)
(ID "conn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "conn")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(ID "blocksize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "callback")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_SSLSocket")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "conn")
(PUNCT ",")
(ID "_SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "retrlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieve data in line mode.  A new port is created for you.\n\n        Args:\n          cmd: A RETR, LIST, or NLST command.\n          callback: An optional single parameter callable that is called\n                    for each line with the trailing CRLF stripped.\n                    [default: print_line()]\n\n        Returns:\n          The response code.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "callback")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT "=")
(ID "print_line")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "TYPE A")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "transfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(KEYWORD as)
(ID "conn")
(PUNCT ",")
(ID "conn")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "got more than %d bytes")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*retr*")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(ID "CRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "callback")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_SSLSocket")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "conn")
(PUNCT ",")
(ID "_SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "storbinary")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "blocksize")
(PUNCT "=")
(LIT 8192)
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store a file in binary mode.  A new port is created for you.\n\n        Args:\n          cmd: A STOR command.\n          fp: A file-like object with a read(num_bytes) method.\n          blocksize: The maximum data size to read from fp and send over\n                     the connection at once.  [default: 8192]\n          callback: An optional single parameter callable that is called on\n                    each block of data after it is sent.  [default: None]\n          rest: Passed to transfercmd().  [default: None]\n\n        Returns:\n          The response code.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "TYPE I")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "transfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(KEYWORD as)
(ID "conn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "blocksize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "conn")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "callback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_SSLSocket")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "conn")
(PUNCT ",")
(ID "_SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "storlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store a file in line mode.  A new port is created for you.\n\n        Args:\n          cmd: A STOR command.\n          fp: A file-like object with a readline() method.\n          callback: An optional single parameter callable that is called on\n                    each line after it is sent.  [default: None]\n\n        Returns:\n          The response code.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "TYPE A")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "transfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(KEYWORD as)
(ID "conn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "got more than %d bytes")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "maxline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "buf")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(ID "B_CRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "buf")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(ID "B_CRLF")
(PUNCT ":")
(ID "buf")
(PUNCT "=")
(ID "buf")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "buf")
(PUNCT "+")
(ID "B_CRLF")
(NEWLINE)
(DEDENT)
(ID "conn")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "callback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_SSLSocket")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "conn")
(PUNCT ",")
(ID "_SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "acct")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send new account name.")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "ACCT ")
(PUNCT "+")
(ID "password")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "nlst")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of files in a given directory (default the current).")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "NLST")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(PUNCT "+")
(PUNCT "(")
(LIT " ")
(PUNCT "+")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retrlines")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "files")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "List a directory in long form.\n        By default list current directory to stdout.\n        Optional last argument is callback function; all\n        non-empty arguments before it are concatenated to the\n        LIST command.  (This *should* only be used for a pathname.)")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "LIST")
(NEWLINE)
(ID "func")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(KEYWORD and)
(ID "type")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "!=")
(ID "type")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ",")
(ID "func")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(PUNCT "+")
(PUNCT "(")
(LIT " ")
(PUNCT "+")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "retrlines")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mlsd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "facts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "List a directory in a standardized format by using MLSD\n        command (RFC-3659). If path is omitted the current directory\n        is assumed. \"facts\" is a list of strings representing the type\n        of information desired (e.g. [\"type\", \"size\", \"perm\"]).\n\n        Return a generator object yielding a tuple of two elements\n        for every file found in path.\n        First element is the file name, the second one is a dictionary\n        including a variable number of \"facts\" depending on the server\n        and whether \"facts\" argument has been provided.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "facts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "OPTS MLST ")
(PUNCT "+")
(LIT ";")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "facts")
(PUNCT ")")
(PUNCT "+")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "MLSD %s")
(PUNCT "%")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "MLSD")
(NEWLINE)
(DEDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retrlines")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "facts_found")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "CRLF")
(PUNCT ")")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(ID "entry")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "fact")
(KEYWORD in)
(ID "facts_found")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "fact")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT "=")
(PUNCT ")")
(NEWLINE)
(ID "entry")
(PUNCT "[")
(ID "key")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "rename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fromname")
(PUNCT ",")
(ID "toname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Rename a file.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "RNFR ")
(PUNCT "+")
(ID "fromname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "3")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "RNTO ")
(PUNCT "+")
(ID "toname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete a file.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "DELE ")
(PUNCT "+")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD in)
(PUNCT "{")
(LIT "250")
(PUNCT ",")
(LIT "200")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "cwd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dirname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Change to a directory.")
(NEWLINE)
(KEYWORD if)
(ID "dirname")
(PUNCT "==")
(LIT "..")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "CDUP")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "error_perm")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "msg")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "500")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "dirname")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirname")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(DEDENT)
(ID "cmd")
(PUNCT "=")
(LIT "CWD ")
(PUNCT "+")
(ID "dirname")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "size")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieve the size of a file.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "SIZE ")
(PUNCT "+")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(LIT "213")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "resp")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "mkd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dirname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a directory, return its full pathname.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "MKD ")
(PUNCT "+")
(ID "dirname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "257")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parse257")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dirname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove a directory.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "RMD ")
(PUNCT "+")
(ID "dirname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pwd")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return current working directory.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "PWD")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "257")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parse257")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quit")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quit, and close the connection.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "QUIT")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the connection without assuming anything about it.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "file")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_SSLSocket")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_SSLSocket")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "SSLSocket")
(NEWLINE)
(KEYWORD class)
(ID "FTP_TLS")
(PUNCT "(")
(ID "FTP")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A FTP subclass which adds TLS support to FTP as described\n        in RFC-4217.\n\n        Connect as usual to port 21 implicitly securing the FTP control\n        connection before authenticating.\n\n        Securing the data connection requires user to explicitly ask\n        for it by calling prot_p() method.\n\n        Usage example:\n        >>> from ftplib import FTP_TLS\n        >>> ftps = FTP_TLS('ftp.python.org')\n        >>> ftps.login()  # login anonymously previously securing control channel\n        '230 Guest login ok, access restrictions apply.'\n        >>> ftps.prot_p()  # switch to secure data connection\n        '200 Protection level set to P'\n        >>> ftps.retrlines('LIST')  # list directory content securely\n        total 9\n        drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .\n        drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..\n        drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin\n        drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc\n        d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming\n        drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib\n        drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub\n        drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr\n        -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg\n        '226 Transfer complete.'\n        >>> ftps.quit()\n        '221 Goodbye.'\n        >>>\n        ")
(NEWLINE)
(ID "ssl_version")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "PROTOCOL_SSLv23")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "acct")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "keyfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context and keyfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "certfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context and certfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(NEWLINE)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_stdlib_context")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ssl_version")
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_prot_p")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "FTP")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "acct")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "secure")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "secure")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "auth")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "FTP")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "auth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set up secure control connection by using TLS/SSL.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Already using TLS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ssl_version")
(PUNCT ">=")
(ID "ssl")
(PUNCT ".")
(ID "PROTOCOL_SSLv23")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "AUTH TLS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "AUTH SSL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ccc")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Switch back to a clear-text control connection.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSLSocket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "not using TLS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "CCC")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prot_p")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set up secure data connection.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "PBSZ 0")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "PROT P")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_prot_p")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prot_c")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set up clear text data connection.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "PROT C")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_prot_p")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ntransfercmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(ID "FTP")
(PUNCT ".")
(ID "ntransfercmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_prot_p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "conn")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "conn")
(PUNCT ",")
(ID "size")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "abort")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT #"ABOR")
(PUNCT "+")
(ID "B_CRLF")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getmultiline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "{")
(LIT "426")
(PUNCT ",")
(LIT "225")
(PUNCT ",")
(LIT "226")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "FTP_TLS")
(PUNCT ")")
(NEWLINE)
(ID "all_errors")
(PUNCT "=")
(PUNCT "(")
(ID "Error")
(PUNCT ",")
(ID "OSError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSLError")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_150_re")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "parse150")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the '150' response for a RETR request.\n    Returns the expected transfer size or None; size is not guaranteed to\n    be present in the 150 message.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "150")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD global)
(ID "_150_re")
(NEWLINE)
(KEYWORD if)
(ID "_150_re")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "_150_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "150 .* \\((\\d+) bytes\\)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "IGNORECASE")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_150_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_227_re")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "parse227")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the '227' response for a PASV request.\n    Raises error_proto if it does not contain '(h1,h2,h3,h4,p1,p2)'\n    Return ('host.addr.as.numbers', port#) tuple.")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "227")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD global)
(ID "_227_re")
(NEWLINE)
(KEYWORD if)
(ID "_227_re")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "_227_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(\\d+),(\\d+),(\\d+),(\\d+),(\\d+),(\\d+)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_227_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "numbers")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "numbers")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "port")
(PUNCT "=")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "numbers")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(PUNCT "<<")
(LIT 8)
(PUNCT ")")
(PUNCT "+")
(ID "int")
(PUNCT "(")
(ID "numbers")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "host")
(PUNCT ",")
(ID "port")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse229")
(PUNCT "(")
(ID "resp")
(PUNCT ",")
(ID "peer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the '229' response for a EPSV request.\n    Raises error_proto if it does not contain '(|||port|)'\n    Return ('host.addr.as.numbers', port#) tuple.")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "229")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "left")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "left")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ")")
(PUNCT ",")
(ID "left")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "right")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(ID "left")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(ID "resp")
(PUNCT "[")
(ID "right")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parts")
(PUNCT "=")
(ID "resp")
(PUNCT "[")
(ID "left")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "right")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "resp")
(PUNCT "[")
(ID "left")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "!=")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT "=")
(ID "peer")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "host")
(PUNCT ",")
(ID "port")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse257")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the '257' response for a MKD or PWD request.\n    This is a response to a MKD or PWD request: a directory name.\n    Returns the directoryname in the 257 reply.")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "257")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_reply")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "!=")
(LIT " \"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(ID "dirname")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "resp")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(ID "n")
(KEYWORD or)
(ID "resp")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "!=")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "dirname")
(PUNCT "=")
(ID "dirname")
(PUNCT "+")
(ID "c")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dirname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_line")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default retrlines callback to print a line.")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ftpcp")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "sourcename")
(PUNCT ",")
(ID "target")
(PUNCT ",")
(ID "targetname")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "I")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy file from one FTP-instance to another.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "targetname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "targetname")
(PUNCT "=")
(ID "sourcename")
(NEWLINE)
(DEDENT)
(ID "type")
(PUNCT "=")
(LIT "TYPE ")
(PUNCT "+")
(ID "type")
(NEWLINE)
(ID "source")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "type")
(PUNCT ")")
(NEWLINE)
(ID "target")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "type")
(PUNCT ")")
(NEWLINE)
(ID "sourcehost")
(PUNCT ",")
(ID "sourceport")
(PUNCT "=")
(ID "parse227")
(PUNCT "(")
(ID "source")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "PASV")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "target")
(PUNCT ".")
(ID "sendport")
(PUNCT "(")
(ID "sourcehost")
(PUNCT ",")
(ID "sourceport")
(PUNCT ")")
(NEWLINE)
(ID "treply")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "STOR ")
(PUNCT "+")
(ID "targetname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "treply")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "{")
(LIT "125")
(PUNCT ",")
(LIT "150")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(NEWLINE)
(DEDENT)
(ID "sreply")
(PUNCT "=")
(ID "source")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(LIT "RETR ")
(PUNCT "+")
(ID "sourcename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sreply")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "{")
(LIT "125")
(PUNCT ",")
(LIT "150")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error_proto")
(NEWLINE)
(DEDENT)
(ID "source")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "target")
(PUNCT ".")
(ID "voidresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Netrc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class to parse & provide access to 'netrc' format files.\n\n    See the netrc(4) man page for information on the file format.\n\n    WARNING: This class is obsolete -- use module netrc instead.\n\n    ")
(NEWLINE)
(ID "__defuser")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "__defpasswd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "__defacct")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "This class is deprecated, use the netrc module instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "HOME")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "HOME")
(PUNCT "]")
(PUNCT ",")
(LIT ".netrc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "specify file to load or set $HOME")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__macros")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(NEWLINE)
(ID "in_macro")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "in_macro")
(KEYWORD and)
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "macro_lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "in_macro")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__macros")
(PUNCT "[")
(ID "macro_name")
(PUNCT "]")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "macro_lines")
(PUNCT ")")
(NEWLINE)
(ID "in_macro")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "words")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "user")
(PUNCT "=")
(ID "passwd")
(PUNCT "=")
(ID "acct")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "default")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w1")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w2")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w2")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "w1")
(PUNCT "==")
(LIT "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "w1")
(PUNCT "==")
(LIT "machine")
(KEYWORD and)
(ID "w2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "w2")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "w1")
(PUNCT "==")
(LIT "login")
(KEYWORD and)
(ID "w2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT "=")
(ID "w2")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "w1")
(PUNCT "==")
(LIT "password")
(KEYWORD and)
(ID "w2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "passwd")
(PUNCT "=")
(ID "w2")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "w1")
(PUNCT "==")
(LIT "account")
(KEYWORD and)
(ID "w2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "acct")
(PUNCT "=")
(ID "w2")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "w1")
(PUNCT "==")
(LIT "macdef")
(KEYWORD and)
(ID "w2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "macro_name")
(PUNCT "=")
(ID "w2")
(NEWLINE)
(ID "macro_lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "in_macro")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__defuser")
(PUNCT "=")
(ID "user")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__defuser")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__defpasswd")
(PUNCT "=")
(ID "passwd")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__defpasswd")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__defacct")
(PUNCT "=")
(ID "acct")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__defacct")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "host")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ouser")
(PUNCT ",")
(ID "opasswd")
(PUNCT ",")
(ID "oacct")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT "[")
(ID "host")
(PUNCT "]")
(NEWLINE)
(ID "user")
(PUNCT "=")
(ID "user")
(KEYWORD or)
(ID "ouser")
(NEWLINE)
(ID "passwd")
(PUNCT "=")
(ID "passwd")
(KEYWORD or)
(ID "opasswd")
(NEWLINE)
(ID "acct")
(PUNCT "=")
(ID "acct")
(KEYWORD or)
(ID "oacct")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT "[")
(ID "host")
(PUNCT "]")
(PUNCT "=")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_hosts")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of hosts mentioned in the .netrc file.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_account")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns login information for the named host.\n\n        The return value is a triple containing userid,\n        password, and the accounting field.\n\n        ")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "user")
(PUNCT "=")
(ID "passwd")
(PUNCT "=")
(ID "acct")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "host")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__hosts")
(PUNCT "[")
(ID "host")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "user")
(PUNCT "=")
(ID "user")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__defuser")
(NEWLINE)
(ID "passwd")
(PUNCT "=")
(ID "passwd")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__defpasswd")
(NEWLINE)
(ID "acct")
(PUNCT "=")
(ID "acct")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__defacct")
(NEWLINE)
(KEYWORD return)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_macros")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all defined macro names.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__macros")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_macro")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "macro")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a sequence of lines which define a named macro.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__macros")
(PUNCT "[")
(ID "macro")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "test")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test program.\n    Usage: ftp [-d] [-r[file]] host [-l[dir]] [-d[dir]] [-p] [file] ...\n\n    -d dir\n    -l list\n    -p password\n    ")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(PUNCT "<")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "test")
(PUNCT ".")
(ID "__doc__")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "debugging")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "rcfile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD while)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "-d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debugging")
(PUNCT "=")
(ID "debugging")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD del)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "-r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rcfile")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "ftp")
(PUNCT "=")
(ID "FTP")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "ftp")
(PUNCT ".")
(ID "set_debuglevel")
(PUNCT "(")
(ID "debugging")
(PUNCT ")")
(NEWLINE)
(ID "userid")
(PUNCT "=")
(ID "passwd")
(PUNCT "=")
(ID "acct")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "netrc")
(PUNCT "=")
(ID "Netrc")
(PUNCT "(")
(ID "rcfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "rcfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Could not open account file")
(LIT " -- using anonymous login.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userid")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(PUNCT "=")
(ID "netrc")
(PUNCT ".")
(ID "get_account")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "No account -- using anonymous login.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ftp")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "userid")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "acct")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "file")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "-l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ftp")
(PUNCT ".")
(ID "dir")
(PUNCT "(")
(ID "file")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "file")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "-d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "CWD")
(NEWLINE)
(KEYWORD if)
(ID "file")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "file")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "ftp")
(PUNCT ".")
(ID "sendcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "file")
(PUNCT "==")
(LIT "-p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ftp")
(PUNCT ".")
(ID "set_pasv")
(PUNCT "(")
(KEYWORD not)
(ID "ftp")
(PUNCT ".")
(ID "passiveserver")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ftp")
(PUNCT ".")
(ID "retrbinary")
(PUNCT "(")
(LIT "RETR ")
(PUNCT "+")
(ID "file")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "write")
(PUNCT ",")
(LIT 1024)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ftp")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
