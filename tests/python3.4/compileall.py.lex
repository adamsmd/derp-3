(LIT "Module/script to byte-compile all .py files to .pyc (or .pyo) files.\n\nWhen called as a script with arguments, this compiles the directories\ngiven as arguments recursively; the -l option prevents it from\nrecursing into directories.\n\nWithout arguments, if compiles all modules on sys.path, without\nrecursing into subdirectories.  (Even though it should do so for\npackages -- for now, you'll have to deal with packages separately.)\n\nSee module py_compile for details of the actual byte-compilation.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(PUNCT ".")
(ID "util")
(NEWLINE)
(KEYWORD import)
(ID "py_compile")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "compile_dir")
(PUNCT ",")
(LIT "compile_file")
(PUNCT ",")
(LIT "compile_path")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "compile_dir")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "maxlevels")
(PUNCT "=")
(LIT 10)
(PUNCT ",")
(ID "ddir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "rx")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "legacy")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Byte-compile all modules in the given directory tree.\n\n    Arguments (only dir is required):\n\n    dir:       the directory to byte-compile\n    maxlevels: maximum recursion level (default 10)\n    ddir:      the directory that will be prepended to the path to the\n               file as it is compiled into each byte-code file.\n    force:     if True, force compilation, even if timestamps are up-to-date\n    quiet:     if True, be quiet during compilation\n    legacy:    if True, produce legacy pyc paths instead of PEP 3147 paths\n    optimize:  optimization level or -1 for level of the interpreter\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Listing {!r}...")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Can't list {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "success")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "__pycache__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "fullname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ddir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "ddir")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dfile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "compile_file")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "ddir")
(PUNCT ",")
(ID "force")
(PUNCT ",")
(ID "rx")
(PUNCT ",")
(ID "quiet")
(PUNCT ",")
(ID "legacy")
(PUNCT ",")
(ID "optimize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "success")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "maxlevels")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "name")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(KEYWORD and)
(ID "name")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "pardir")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "compile_dir")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "maxlevels")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "dfile")
(PUNCT ",")
(ID "force")
(PUNCT ",")
(ID "rx")
(PUNCT ",")
(ID "quiet")
(PUNCT ",")
(ID "legacy")
(PUNCT ",")
(ID "optimize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "success")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "success")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile_file")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "ddir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "rx")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "legacy")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Byte-compile one file.\n\n    Arguments (only fullname is required):\n\n    fullname:  the file to byte-compile\n    ddir:      if given, the directory name compiled in to the\n               byte-code file.\n    force:     if True, force compilation, even if timestamps are up-to-date\n    quiet:     if True, be quiet during compilation\n    legacy:    if True, produce legacy pyc paths instead of PEP 3147 paths\n    optimize:  optimization level or -1 for level of the interpreter\n    ")
(NEWLINE)
(ID "success")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ddir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "ddir")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dfile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "rx")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mo")
(PUNCT "=")
(ID "rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "success")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "legacy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfile")
(PUNCT "=")
(ID "fullname")
(PUNCT "+")
(PUNCT "(")
(LIT "c")
(KEYWORD if)
(ID "__debug__")
(KEYWORD else)
(LIT "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "optimize")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfile")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "cache_from_source")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "debug_override")
(PUNCT "=")
(KEYWORD not)
(ID "optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfile")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "cache_from_source")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cache_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "name")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "tail")
(PUNCT "==")
(LIT ".py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "force")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mtime")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(NEWLINE)
(ID "expect")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<4sl")
(PUNCT ",")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "MAGIC_NUMBER")
(PUNCT ",")
(ID "mtime")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "cfile")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "chandle")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "actual")
(PUNCT "=")
(ID "chandle")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "expect")
(PUNCT "==")
(ID "actual")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "success")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Compiling {!r}...")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(ID "py_compile")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "cfile")
(PUNCT ",")
(ID "dfile")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(ID "optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "py_compile")
(PUNCT ".")
(ID "PyCompileError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*** Error compiling {!r}...")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*** ")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(ID "err")
(PUNCT ".")
(ID "msg")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "backslashreplace")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "success")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "SyntaxError")
(PUNCT ",")
(ID "UnicodeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "quiet")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*** Error compiling {!r}...")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*** ")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "e")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT "+")
(LIT ":")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(NEWLINE)
(ID "success")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ok")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "success")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "success")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile_path")
(PUNCT "(")
(ID "skip_curdir")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "maxlevels")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "legacy")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Byte-compile all module on sys.path.\n\n    Arguments (all optional):\n\n    skip_curdir: if true, skip current directory (default True)\n    maxlevels:   max recursion level (default 0)\n    force: as for compile_dir() (default False)\n    quiet: as for compile_dir() (default False)\n    legacy: as for compile_dir() (default False)\n    optimize: as for compile_dir() (default -1)\n    ")
(NEWLINE)
(ID "success")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "dir")
(KEYWORD or)
(ID "dir")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT ")")
(KEYWORD and)
(ID "skip_curdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Skipping current directory")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "success")
(PUNCT "=")
(ID "success")
(KEYWORD and)
(ID "compile_dir")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "maxlevels")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "force")
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(ID "quiet")
(PUNCT ",")
(ID "legacy")
(PUNCT "=")
(ID "legacy")
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(ID "optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "success")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Script main program.")
(NEWLINE)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(ID "description")
(PUNCT "=")
(LIT "Utilities to support installing Python libraries.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-l")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_const")
(PUNCT ",")
(ID "const")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT 10)
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "maxlevels")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "don't recurse into subdirectories")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-f")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "force")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "force rebuild even if timestamps are up to date")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-q")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "quiet")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "output only error messages")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-b")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "legacy")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "use legacy (pre-PEP3147) compiled file locations")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-d")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "DESTDIR")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "ddir")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "help")
(PUNCT "=")
(PUNCT "(")
(LIT "directory to prepend to file paths for use in ")
(LIT "compile-time tracebacks and in runtime ")
(LIT "tracebacks in cases where the source file is ")
(LIT "unavailable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-x")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "REGEXP")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "rx")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "help")
(PUNCT "=")
(PUNCT "(")
(LIT "skip files matching the regular expression; ")
(LIT "the regexp is searched for in the full path ")
(LIT "of each file considered for compilation")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-i")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "FILE")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "flist")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(PUNCT "(")
(LIT "add all the files and directories listed in ")
(LIT "FILE to the list considered for compilation; ")
(LIT "if \"-\", names are read from stdin")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "compile_dest")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "FILE|DIR")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "*")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(PUNCT "(")
(LIT "zero or more file and directory names ")
(LIT "to compile; if no arguments given, defaults ")
(LIT "to the equivalent of -l sys.path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "compile_dests")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "compile_dest")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "ddir")
(KEYWORD and)
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "compile_dests")
(PUNCT ")")
(PUNCT "!=")
(LIT 1)
(KEYWORD or)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "compile_dests")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT "-d destdir requires exactly one directory argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "rx")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "args")
(PUNCT ".")
(ID "rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "rx")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "flist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "flist")
(PUNCT "==")
(LIT "-")
(KEYWORD else)
(ID "open")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "flist")
(PUNCT ")")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile_dests")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Error reading file list {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "flist")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "success")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "compile_dests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "dest")
(KEYWORD in)
(ID "compile_dests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "dest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "compile_file")
(PUNCT "(")
(ID "dest")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "ddir")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "force")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "rx")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "quiet")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "legacy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "success")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "compile_dir")
(PUNCT "(")
(ID "dest")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "maxlevels")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "ddir")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "force")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "rx")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "quiet")
(PUNCT ",")
(ID "args")
(PUNCT ".")
(ID "legacy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "success")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "success")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "compile_path")
(PUNCT "(")
(ID "legacy")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "legacy")
(PUNCT ",")
(ID "force")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "force")
(PUNCT ",")
(ID "quiet")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "quiet")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\n[interrupted]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exit_status")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(KEYWORD not)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "exit_status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
