(LIT "\ncsv.py - read/write/investigate CSV files\n")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "_csv")
(KEYWORD import)
(ID "Error")
(PUNCT ",")
(ID "__version__")
(PUNCT ",")
(ID "writer")
(PUNCT ",")
(ID "reader")
(PUNCT ",")
(ID "register_dialect")
(PUNCT ",")
(ID "unregister_dialect")
(PUNCT ",")
(ID "get_dialect")
(PUNCT ",")
(ID "list_dialects")
(PUNCT ",")
(ID "field_size_limit")
(PUNCT ",")
(ID "QUOTE_MINIMAL")
(PUNCT ",")
(ID "QUOTE_ALL")
(PUNCT ",")
(ID "QUOTE_NONNUMERIC")
(PUNCT ",")
(ID "QUOTE_NONE")
(PUNCT ",")
(ID "__doc__")
(NEWLINE)
(KEYWORD from)
(ID "_csv")
(KEYWORD import)
(ID "Dialect")
(KEYWORD as)
(ID "_Dialect")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "StringIO")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "QUOTE_MINIMAL")
(PUNCT ",")
(LIT "QUOTE_ALL")
(PUNCT ",")
(LIT "QUOTE_NONNUMERIC")
(PUNCT ",")
(LIT "QUOTE_NONE")
(PUNCT ",")
(LIT "Error")
(PUNCT ",")
(LIT "Dialect")
(PUNCT ",")
(LIT "__doc__")
(PUNCT ",")
(LIT "excel")
(PUNCT ",")
(LIT "excel_tab")
(PUNCT ",")
(LIT "field_size_limit")
(PUNCT ",")
(LIT "reader")
(PUNCT ",")
(LIT "writer")
(PUNCT ",")
(LIT "register_dialect")
(PUNCT ",")
(LIT "get_dialect")
(PUNCT ",")
(LIT "list_dialects")
(PUNCT ",")
(LIT "Sniffer")
(PUNCT ",")
(LIT "unregister_dialect")
(PUNCT ",")
(LIT "__version__")
(PUNCT ",")
(LIT "DictReader")
(PUNCT ",")
(LIT "DictWriter")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "Dialect")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Describe a CSV dialect.\n\n    This must be subclassed (see csv.excel).  Valid attributes are:\n    delimiter, quotechar, escapechar, doublequote, skipinitialspace,\n    lineterminator, quoting.\n\n    ")
(NEWLINE)
(ID "_name")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "_valid")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "delimiter")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "quotechar")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "escapechar")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "doublequote")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "lineterminator")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "quoting")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "!=")
(ID "Dialect")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_valid")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_validate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_validate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_Dialect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "excel")
(PUNCT "(")
(ID "Dialect")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Describe the usual properties of Excel-generated CSV files.")
(NEWLINE)
(ID "delimiter")
(PUNCT "=")
(LIT ",")
(NEWLINE)
(ID "quotechar")
(PUNCT "=")
(LIT "\"")
(NEWLINE)
(ID "doublequote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "lineterminator")
(PUNCT "=")
(LIT "\r\n")
(NEWLINE)
(ID "quoting")
(PUNCT "=")
(ID "QUOTE_MINIMAL")
(NEWLINE)
(DEDENT)
(ID "register_dialect")
(PUNCT "(")
(LIT "excel")
(PUNCT ",")
(ID "excel")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "excel_tab")
(PUNCT "(")
(ID "excel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Describe the usual properties of Excel-generated TAB-delimited files.")
(NEWLINE)
(ID "delimiter")
(PUNCT "=")
(LIT "\t")
(NEWLINE)
(DEDENT)
(ID "register_dialect")
(PUNCT "(")
(LIT "excel-tab")
(PUNCT ",")
(ID "excel_tab")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "unix_dialect")
(PUNCT "(")
(ID "Dialect")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Describe the usual properties of Unix-generated CSV files.")
(NEWLINE)
(ID "delimiter")
(PUNCT "=")
(LIT ",")
(NEWLINE)
(ID "quotechar")
(PUNCT "=")
(LIT "\"")
(NEWLINE)
(ID "doublequote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "lineterminator")
(PUNCT "=")
(LIT "\n")
(NEWLINE)
(ID "quoting")
(PUNCT "=")
(ID "QUOTE_ALL")
(NEWLINE)
(DEDENT)
(ID "register_dialect")
(PUNCT "(")
(LIT "unix")
(PUNCT ",")
(ID "unix_dialect")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "DictReader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ",")
(ID "fieldnames")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "restkey")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "restval")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dialect")
(PUNCT "=")
(LIT "excel")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fieldnames")
(PUNCT "=")
(ID "fieldnames")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restkey")
(PUNCT "=")
(ID "restkey")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restval")
(PUNCT "=")
(ID "restval")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT "=")
(ID "reader")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "dialect")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dialect")
(PUNCT "=")
(ID "dialect")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "line_num")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "fieldnames")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_fieldnames")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fieldnames")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "line_num")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "line_num")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_fieldnames")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "fieldnames")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "fieldnames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fieldnames")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "line_num")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(NEWLINE)
(DEDENT)
(ID "row")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "line_num")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ".")
(ID "line_num")
(NEWLINE)
(KEYWORD while)
(ID "row")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "row")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "reader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "zip")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT ",")
(ID "row")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "lf")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT ")")
(NEWLINE)
(ID "lr")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "row")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lf")
(PUNCT "<")
(ID "lr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "restkey")
(PUNCT "]")
(PUNCT "=")
(ID "row")
(PUNCT "[")
(ID "lf")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "lf")
(PUNCT ">")
(ID "lr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT "[")
(ID "lr")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "restval")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DictWriter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ",")
(ID "fieldnames")
(PUNCT ",")
(ID "restval")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "extrasaction")
(PUNCT "=")
(LIT "raise")
(PUNCT ",")
(ID "dialect")
(PUNCT "=")
(LIT "excel")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT "=")
(ID "fieldnames")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restval")
(PUNCT "=")
(ID "restval")
(NEWLINE)
(KEYWORD if)
(ID "extrasaction")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "raise")
(PUNCT ",")
(LIT "ignore")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "extrasaction (%s) must be 'raise' or 'ignore'")
(PUNCT "%")
(ID "extrasaction")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "extrasaction")
(PUNCT "=")
(ID "extrasaction")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT "=")
(ID "writer")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "dialect")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writeheader")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "zip")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writerow")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dict_to_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rowdict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "extrasaction")
(PUNCT "==")
(LIT "raise")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wrong_fields")
(PUNCT "=")
(PUNCT "[")
(ID "k")
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "rowdict")
(KEYWORD if)
(ID "k")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "wrong_fields")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "dict contains fields not in fieldnames: ")
(PUNCT "+")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "repr")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "wrong_fields")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(ID "rowdict")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "restval")
(PUNCT ")")
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "fieldnames")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writerow")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rowdict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "writerow")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_dict_to_list")
(PUNCT "(")
(ID "rowdict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writerows")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rowdicts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rows")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "rowdict")
(KEYWORD in)
(ID "rowdicts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rows")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_dict_to_list")
(PUNCT "(")
(ID "rowdict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "writer")
(PUNCT ".")
(ID "writerows")
(PUNCT "(")
(ID "rows")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "complex")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "complex")
(PUNCT "=")
(ID "float")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Sniffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    \"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)\n    Returns a Dialect object.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "preferred")
(PUNCT "=")
(PUNCT "[")
(LIT ",")
(PUNCT ",")
(LIT "\t")
(PUNCT ",")
(LIT ";")
(PUNCT ",")
(LIT " ")
(PUNCT ",")
(LIT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sniff")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sample")
(PUNCT ",")
(ID "delimiters")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Returns a dialect (or None) corresponding to the sample\n        ")
(NEWLINE)
(ID "quotechar")
(PUNCT ",")
(ID "doublequote")
(PUNCT ",")
(ID "delimiter")
(PUNCT ",")
(ID "skipinitialspace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_guess_quote_and_delimiter")
(PUNCT "(")
(ID "sample")
(PUNCT ",")
(ID "delimiters")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "delimiter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delimiter")
(PUNCT ",")
(ID "skipinitialspace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_guess_delimiter")
(PUNCT "(")
(ID "sample")
(PUNCT ",")
(ID "delimiters")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "delimiter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "Could not determine delimiter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "dialect")
(PUNCT "(")
(ID "Dialect")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name")
(PUNCT "=")
(LIT "sniffed")
(NEWLINE)
(ID "lineterminator")
(PUNCT "=")
(LIT "\r\n")
(NEWLINE)
(ID "quoting")
(PUNCT "=")
(ID "QUOTE_MINIMAL")
(NEWLINE)
(DEDENT)
(ID "dialect")
(PUNCT ".")
(ID "doublequote")
(PUNCT "=")
(ID "doublequote")
(NEWLINE)
(ID "dialect")
(PUNCT ".")
(ID "delimiter")
(PUNCT "=")
(ID "delimiter")
(NEWLINE)
(ID "dialect")
(PUNCT ".")
(ID "quotechar")
(PUNCT "=")
(ID "quotechar")
(KEYWORD or)
(LIT "\"")
(NEWLINE)
(ID "dialect")
(PUNCT ".")
(ID "skipinitialspace")
(PUNCT "=")
(ID "skipinitialspace")
(NEWLINE)
(KEYWORD return)
(ID "dialect")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_guess_quote_and_delimiter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "delimiters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Looks for text enclosed between two identical quotes\n        (the probable quotechar) which are preceded and followed\n        by the same character (the probable delimiter).\n        For example:\n                         ,'some text',\n        The quote with the most wins, same with the delimiter.\n        If there is no quotechar the delimiter can't be determined\n        this way.\n        ")
(NEWLINE)
(ID "matches")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "restr")
(KEYWORD in)
(PUNCT "(")
(LIT "(?P<delim>[^\\w\n\"'])(?P<space> ?)(?P<quote>[\"']).*?(?P=quote)(?P=delim)")
(PUNCT ",")
(LIT "(?:^|\n)(?P<quote>[\"']).*?(?P=quote)(?P<delim>[^\\w\n\"'])(?P<space> ?)")
(PUNCT ",")
(LIT "(?P<delim>>[^\\w\n\"'])(?P<space> ?)(?P<quote>[\"']).*?(?P=quote)(?:$|\n)")
(PUNCT ",")
(LIT "(?:^|\n)(?P<quote>[\"']).*?(?P=quote)(?:$|\n)")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "regexp")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "restr")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "DOTALL")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "MULTILINE")
(PUNCT ")")
(NEWLINE)
(ID "matches")
(PUNCT "=")
(ID "regexp")
(PUNCT ".")
(ID "findall")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "matches")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "matches")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "quotes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "delims")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "spaces")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "m")
(KEYWORD in)
(ID "matches")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "regexp")
(PUNCT ".")
(ID "groupindex")
(PUNCT "[")
(LIT "quote")
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "m")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "key")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quotes")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "quotes")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "regexp")
(PUNCT ".")
(ID "groupindex")
(PUNCT "[")
(LIT "delim")
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "m")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "key")
(KEYWORD and)
(PUNCT "(")
(ID "delimiters")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "key")
(KEYWORD in)
(ID "delimiters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delims")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "delims")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "regexp")
(PUNCT ".")
(ID "groupindex")
(PUNCT "[")
(LIT "space")
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "m")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spaces")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "quotechar")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "quotes")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(ID "quotes")
(PUNCT ".")
(ID "get")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "delims")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delim")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "delims")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(ID "delims")
(PUNCT ".")
(ID "get")
(PUNCT ")")
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(ID "delims")
(PUNCT "[")
(ID "delim")
(PUNCT "]")
(PUNCT "==")
(ID "spaces")
(NEWLINE)
(KEYWORD if)
(ID "delim")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delim")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delim")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dq_regexp")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "((%(delim)s)|^)\\W*%(quote)s[^%(delim)s\\n]*%(quote)s[^%(delim)s\\n]*%(quote)s\\W*((%(delim)s)|$)")
(PUNCT "%")
(PUNCT "{")
(LIT "delim")
(PUNCT ":")
(ID "re")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "delim")
(PUNCT ")")
(PUNCT ",")
(LIT "quote")
(PUNCT ":")
(ID "quotechar")
(PUNCT "}")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "MULTILINE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dq_regexp")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "doublequote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "doublequote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "quotechar")
(PUNCT ",")
(ID "doublequote")
(PUNCT ",")
(ID "delim")
(PUNCT ",")
(ID "skipinitialspace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_guess_delimiter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "delimiters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        The delimiter /should/ occur the same number of times on\n        each row. However, due to malformed data, it may not. We don't want\n        an all or nothing approach, so we allow for small variations in this\n        number.\n          1) build a table of the frequency of each character on every line.\n          2) build a table of frequencies of this frequency (meta-frequency?),\n             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,\n             7 times in 2 rows'\n          3) use the mode of the meta-frequency to determine the /expected/\n             frequency for that character\n          4) find out how often the character actually meets that goal\n          5) the character that best meets its goal is the delimiter\n        For performance reasons, the data is evaluated in chunks, so it can\n        try and evaluate the smallest portion of the data possible, evaluating\n        additional chunks as necessary.\n        ")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "ascii")
(PUNCT "=")
(PUNCT "[")
(ID "chr")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 127)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "chunkLength")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "iteration")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "charFrequency")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "modes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "delims")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "min")
(PUNCT "(")
(ID "chunkLength")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "start")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "iteration")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "data")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "char")
(KEYWORD in)
(ID "ascii")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "metaFrequency")
(PUNCT "=")
(ID "charFrequency")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "char")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "freq")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "char")
(PUNCT ")")
(NEWLINE)
(ID "metaFrequency")
(PUNCT "[")
(ID "freq")
(PUNCT "]")
(PUNCT "=")
(ID "metaFrequency")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "freq")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "charFrequency")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT "=")
(ID "metaFrequency")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "char")
(KEYWORD in)
(ID "charFrequency")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "charFrequency")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "items")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "modes")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "items")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(ID "x")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "items")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "modes")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "modes")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "modes")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "modes")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "-")
(ID "sum")
(PUNCT "(")
(ID "item")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "items")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "modes")
(PUNCT "[")
(ID "char")
(PUNCT "]")
(PUNCT "=")
(ID "items")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "modeList")
(PUNCT "=")
(ID "modes")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "total")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "chunkLength")
(PUNCT "*")
(ID "iteration")
(PUNCT ")")
(NEWLINE)
(ID "consistency")
(PUNCT "=")
(LIT 1.0)
(NEWLINE)
(ID "threshold")
(PUNCT "=")
(LIT 0.9)
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "delims")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "consistency")
(PUNCT ">=")
(ID "threshold")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "modeList")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "v")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "v")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "/")
(ID "total")
(PUNCT ")")
(PUNCT ">=")
(ID "consistency")
(KEYWORD and)
(PUNCT "(")
(ID "delimiters")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "k")
(KEYWORD in)
(ID "delimiters")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delims")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "consistency")
(PUNCT "-=")
(LIT 0.01)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "delims")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delim")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "delims")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "delim")
(PUNCT ")")
(PUNCT "==")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT "%c ")
(PUNCT "%")
(ID "delim")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "delim")
(PUNCT ",")
(ID "skipinitialspace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "start")
(PUNCT "=")
(ID "end")
(NEWLINE)
(ID "end")
(PUNCT "+=")
(ID "chunkLength")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "delims")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "delims")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "preferred")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "d")
(KEYWORD in)
(ID "delims")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skipinitialspace")
(PUNCT "=")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT "==")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT "%c ")
(PUNCT "%")
(ID "d")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "d")
(PUNCT ",")
(ID "skipinitialspace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "items")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "k")
(PUNCT ")")
(KEYWORD for)
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD in)
(ID "delims")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "items")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "delim")
(PUNCT "=")
(ID "items")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "skipinitialspace")
(PUNCT "=")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "delim")
(PUNCT ")")
(PUNCT "==")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT "%c ")
(PUNCT "%")
(ID "delim")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "delim")
(PUNCT ",")
(ID "skipinitialspace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sample")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rdr")
(PUNCT "=")
(ID "reader")
(PUNCT "(")
(ID "StringIO")
(PUNCT "(")
(ID "sample")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sniff")
(PUNCT "(")
(ID "sample")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "header")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "rdr")
(PUNCT ")")
(NEWLINE)
(ID "columns")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(NEWLINE)
(ID "columnTypes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "columns")
(PUNCT ")")
(PUNCT ":")
(ID "columnTypes")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "checked")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "row")
(KEYWORD in)
(ID "rdr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "checked")
(PUNCT ">")
(LIT 20)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "checked")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "row")
(PUNCT ")")
(PUNCT "!=")
(ID "columns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "col")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "columnTypes")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "thisType")
(KEYWORD in)
(PUNCT "[")
(ID "int")
(PUNCT ",")
(ID "float")
(PUNCT ",")
(ID "complex")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thisType")
(PUNCT "(")
(ID "row")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "OverflowError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thisType")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "row")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "thisType")
(PUNCT "!=")
(ID "columnTypes")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "columnTypes")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "columnTypes")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(PUNCT "=")
(ID "thisType")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "columnTypes")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "hasHeader")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "col")
(PUNCT ",")
(ID "colType")
(KEYWORD in)
(ID "columnTypes")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "colType")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "header")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(PUNCT ")")
(PUNCT "!=")
(ID "colType")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hasHeader")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hasHeader")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "colType")
(PUNCT "(")
(ID "header")
(PUNCT "[")
(ID "col")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hasHeader")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hasHeader")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "hasHeader")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
