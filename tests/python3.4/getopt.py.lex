(LIT "Parser for command line options.\n\nThis module helps scripts to parse the command line arguments in\nsys.argv.  It supports the same conventions as the Unix getopt()\nfunction (including the special meanings of arguments of the form `-'\nand `--').  Long options similar to those supported by GNU software\nmay be used as well via an optional third argument.  This module\nprovides two functions and an exception:\n\ngetopt() -- Parse command line options\ngnu_getopt() -- Like getopt(), but allow option and non-option arguments\nto be intermixed.\nGetoptError -- exception (class) raised with 'opt' attribute, which is the\noption involved with the exception.\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "GetoptError")
(PUNCT ",")
(LIT "error")
(PUNCT ",")
(LIT "getopt")
(PUNCT ",")
(LIT "gnu_getopt")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "gettext")
(KEYWORD import)
(ID "gettext")
(KEYWORD as)
(ID "_")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "GetoptError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "opt")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "opt")
(PUNCT "=")
(ID "opt")
(NEWLINE)
(ID "Exception")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "msg")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "error")
(PUNCT "=")
(ID "GetoptError")
(NEWLINE)
(KEYWORD def)
(ID "getopt")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "shortopts")
(PUNCT ",")
(ID "longopts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "getopt(args, options[, long_options]) -> opts, args\n\n    Parses command line options and parameter list.  args is the\n    argument list to be parsed, without the leading reference to the\n    running program.  Typically, this means \"sys.argv[1:]\".  shortopts\n    is the string of option letters that the script wants to\n    recognize, with options that require an argument followed by a\n    colon (i.e., the same format that Unix getopt() uses).  If\n    specified, longopts is a list of strings with the names of the\n    long options which should be supported.  The leading '--'\n    characters should not be included in the option name.  Options\n    which require an argument should be followed by an equal sign\n    ('=').\n\n    The return value consists of two elements: the first is a list of\n    (option, value) pairs; the second is the list of program arguments\n    left after the option list was stripped (this is a trailing slice\n    of the first argument).  Each option-and-value pair returned has\n    the option as its first element, prefixed with a hyphen (e.g.,\n    '-x'), and the option argument as its second element, or an empty\n    string if the option has no argument.  The options occur in the\n    list in the same order in which they were found, thus allowing\n    multiple occurrences.  Long and short options may be mixed.\n\n    ")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "longopts")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "longopts")
(PUNCT "=")
(PUNCT "[")
(ID "longopts")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "longopts")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "longopts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "args")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "--")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "--")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "do_longs")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "longopts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "do_shorts")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "shortopts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "opts")
(PUNCT ",")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gnu_getopt")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "shortopts")
(PUNCT ",")
(ID "longopts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "getopt(args, options[, long_options]) -> opts, args\n\n    This function works like getopt(), except that GNU style scanning\n    mode is used by default. This means that option and non-option\n    arguments may be intermixed. The getopt() function stops\n    processing options as soon as a non-option argument is\n    encountered.\n\n    If the first character of the option string is `+', or if the\n    environment variable POSIXLY_CORRECT is set, then option\n    processing stops as soon as a non-option argument is encountered.\n\n    ")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "prog_args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "longopts")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "longopts")
(PUNCT "=")
(PUNCT "[")
(ID "longopts")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "longopts")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "longopts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "shortopts")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "+")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shortopts")
(PUNCT "=")
(ID "shortopts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "all_options_first")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "POSIXLY_CORRECT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "all_options_first")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "all_options_first")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "--")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prog_args")
(PUNCT "+=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "--")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "do_longs")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "longopts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "do_shorts")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "shortopts")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "all_options_first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prog_args")
(PUNCT "+=")
(ID "args")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prog_args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "opts")
(PUNCT ",")
(ID "prog_args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "do_longs")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "longopts")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "opt")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "=")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "optarg")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT ",")
(ID "optarg")
(PUNCT "=")
(ID "opt")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "opt")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "has_arg")
(PUNCT ",")
(ID "opt")
(PUNCT "=")
(ID "long_has_args")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "longopts")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "has_arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "optarg")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "GetoptError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option --%s requires argument")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "optarg")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "optarg")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "GetoptError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option --%s must not have an argument")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "--")
(PUNCT "+")
(ID "opt")
(PUNCT ",")
(ID "optarg")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "opts")
(PUNCT ",")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "long_has_args")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "longopts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "possibilities")
(PUNCT "=")
(PUNCT "[")
(ID "o")
(KEYWORD for)
(ID "o")
(KEYWORD in)
(ID "longopts")
(KEYWORD if)
(ID "o")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "possibilities")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "GetoptError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option --%s not recognized")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(KEYWORD in)
(ID "possibilities")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(PUNCT ",")
(ID "opt")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opt")
(PUNCT "+")
(LIT "=")
(KEYWORD in)
(ID "possibilities")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(PUNCT ",")
(ID "opt")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "possibilities")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "GetoptError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option --%s not a unique prefix")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "possibilities")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(NEWLINE)
(ID "unique_match")
(PUNCT "=")
(ID "possibilities")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "has_arg")
(PUNCT "=")
(ID "unique_match")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "=")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "has_arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unique_match")
(PUNCT "=")
(ID "unique_match")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "has_arg")
(PUNCT ",")
(ID "unique_match")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "do_shorts")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "optstring")
(PUNCT ",")
(ID "shortopts")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "optstring")
(PUNCT "!=")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT ",")
(ID "optstring")
(PUNCT "=")
(ID "optstring")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "optstring")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "short_has_arg")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "shortopts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "optstring")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "GetoptError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option -%s requires argument")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "optstring")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "optarg")
(PUNCT ",")
(ID "optstring")
(PUNCT "=")
(ID "optstring")
(PUNCT ",")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "optarg")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "-")
(PUNCT "+")
(ID "opt")
(PUNCT ",")
(ID "optarg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "opts")
(PUNCT ",")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "short_has_arg")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "shortopts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "shortopts")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(ID "shortopts")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "!=")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "shortopts")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "GetoptError")
(PUNCT "(")
(ID "_")
(PUNCT "(")
(LIT "option -%s not recognized")
(PUNCT ")")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "getopt")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "a:b")
(PUNCT ",")
(PUNCT "[")
(LIT "alpha=")
(PUNCT ",")
(LIT "beta")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
