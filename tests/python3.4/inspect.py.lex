(LIT "Get useful information from live Python objects.\n\nThis module encapsulates the interface provided by the internal special\nattributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\n\nHere are some of the useful functions provided by this module:\n\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n\n    getargspec(), getargvalues(), getcallargs() - get info about function arguments\n    getfullargspec() - same, with support for Python-3000 features\n    formatargspec(), formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n\n    signature() - get a Signature object for the callable\n")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(PUNCT "(")
(LIT "Ka-Ping Yee <ping@lfw.org>")
(PUNCT ",")
(LIT "Yury Selivanov <yselivanov@sprymix.com>")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "ast")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(NEWLINE)
(KEYWORD import)
(ID "itertools")
(NEWLINE)
(KEYWORD import)
(ID "linecache")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "tokenize")
(NEWLINE)
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD import)
(ID "functools")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(KEYWORD from)
(ID "operator")
(KEYWORD import)
(ID "attrgetter")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "namedtuple")
(PUNCT ",")
(ID "OrderedDict")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "dis")
(KEYWORD import)
(ID "COMPILER_FLAG_NAMES")
(KEYWORD as)
(ID "_flag_names")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CO_OPTIMIZED")
(PUNCT ",")
(ID "CO_NEWLOCALS")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(LIT 2)
(NEWLINE)
(ID "CO_VARARGS")
(PUNCT ",")
(ID "CO_VARKEYWORDS")
(PUNCT "=")
(LIT 4)
(PUNCT ",")
(LIT 8)
(NEWLINE)
(ID "CO_NESTED")
(PUNCT ",")
(ID "CO_GENERATOR")
(PUNCT ",")
(ID "CO_NOFREE")
(PUNCT "=")
(LIT 16)
(PUNCT ",")
(LIT 32)
(PUNCT ",")
(LIT 64)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod_dict")
(PUNCT "=")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "_flag_names")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod_dict")
(PUNCT "[")
(LIT "CO_")
(PUNCT "+")
(ID "v")
(PUNCT "]")
(PUNCT "=")
(ID "k")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "TPFLAGS_IS_ABSTRACT")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 20)
(NEWLINE)
(KEYWORD def)
(ID "ismodule")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a module.\n\n    Module objects provide these attributes:\n        __cached__      pathname to byte compiled file\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "ModuleType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isclass")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a class.\n\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        __func__        function object containing implementation of method\n        __self__        instance to which this method is bound")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "MethodType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ismethoddescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a method descriptor.\n\n    But not if ismethod() or isclass() or isfunction() are true.\n\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    __func__ attribute (etc) when an object passes ismethod().")
(NEWLINE)
(KEYWORD if)
(ID "isclass")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "tp")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "hasattr")
(PUNCT "(")
(ID "tp")
(PUNCT ",")
(LIT "__get__")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "tp")
(PUNCT ",")
(LIT "__set__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isdatadescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a data descriptor.\n\n    Data descriptors have both a __get__ and a __set__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.")
(NEWLINE)
(KEYWORD if)
(ID "isclass")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "tp")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "hasattr")
(PUNCT "(")
(ID "tp")
(PUNCT ",")
(LIT "__set__")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "tp")
(PUNCT ",")
(LIT "__get__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "types")
(PUNCT ",")
(LIT "MemberDescriptorType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "ismemberdescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "MemberDescriptorType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "ismemberdescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "types")
(PUNCT ",")
(LIT "GetSetDescriptorType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "isgetsetdescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "GetSetDescriptorType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "isgetsetdescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        __code__        code object containing compiled function bytecode\n        __defaults__    tuple of any default values for arguments\n        __globals__     global namespace in which this function was defined\n        __annotations__ dict of parameter annotations\n        __kwdefaults__  dict of keyword only parameters with defaults")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "FunctionType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isgeneratorfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a user-defined generator function.\n\n    Generator function objects provides same attributes as functions.\n\n    See help(isfunction) for attributes listing.")
(NEWLINE)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(PUNCT "(")
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(ID "object")
(PUNCT ".")
(ID "__code__")
(PUNCT ".")
(ID "co_flags")
(PUNCT "&")
(ID "CO_GENERATOR")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isgenerator")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a generator.\n\n    Generator objects provide these attributes:\n        __iter__        defined to support iteration over container\n        close           raises a new GeneratorExit exception inside the\n                        generator to terminate the iteration\n        gi_code         code object\n        gi_frame        frame object or possibly None once the generator has\n                        been exhausted\n        gi_running      set to 1 when generator is executing, 0 otherwise\n        next            return the next item from the container\n        send            resumes the generator and \"sends\" a value that becomes\n                        the result of the current yield-expression\n        throw           used to raise an exception inside the generator")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "GeneratorType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "istraceback")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a traceback.\n\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "TracebackType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isframe")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a frame object.\n\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_trace         tracing function for this frame, or None")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "FrameType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "iscode")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount     number of arguments (not including * or ** args)\n        co_code         string of raw compiled bytecode\n        co_consts       tuple of constants used in the bytecode\n        co_filename     name of file in which this code object was created\n        co_firstlineno  number of first line in Python source code\n        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n        co_lnotab       encoded mapping of line numbers to bytecode indices\n        co_name         name with which this code object was defined\n        co_names        tuple of names of local variables\n        co_nlocals      number of local variables\n        co_stacksize    virtual machine stack space required\n        co_varnames     tuple of names of arguments and local variables")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "CodeType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isbuiltin")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is a built-in function or method.\n\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "BuiltinFunctionType")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isroutine")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is any kind of function or method.")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "isbuiltin")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "ismethoddescriptor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isabstract")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the object is an abstract base class (ABC).")
(NEWLINE)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "object")
(PUNCT ".")
(ID "__flags__")
(PUNCT "&")
(ID "TPFLAGS_IS_ABSTRACT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmembers")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "predicate")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.")
(NEWLINE)
(KEYWORD if)
(ID "isclass")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mro")
(PUNCT "=")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "getmro")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mro")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "results")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "processed")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "dir")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "object")
(PUNCT ".")
(ID "__bases__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "DynamicClassAttribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "processed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "mro")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "predicate")
(KEYWORD or)
(ID "predicate")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "processed")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "results")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "pair")
(PUNCT ":")
(ID "pair")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "results")
(NEWLINE)
(DEDENT)
(ID "Attribute")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "Attribute")
(PUNCT ",")
(LIT "name kind defining_class object")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "classify_class_attrs")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of attribute-descriptor tuples.\n\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n\n        0. The name (a string).\n\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method or descriptor\n               'data'            not a method\n\n        2. The class which defined this attribute (a class).\n\n        3. The object as obtained by calling getattr; if this fails, or if the\n           resulting object does not live anywhere in the class' mro (including\n           metaclasses) then the object is looked up in the defining class's\n           dict (found by walking the mro).\n\n    If one of the items in dir(cls) is stored in the metaclass it will now\n    be discovered and not have None be listed as the class in which it was\n    defined.  Any items whose home class cannot be discovered are skipped.\n    ")
(NEWLINE)
(ID "mro")
(PUNCT "=")
(ID "getmro")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "metamro")
(PUNCT "=")
(ID "getmro")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "metamro")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(PUNCT "[")
(ID "cls")
(KEYWORD for)
(ID "cls")
(KEYWORD in)
(ID "metamro")
(KEYWORD if)
(ID "cls")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "object")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "class_bases")
(PUNCT "=")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "mro")
(NEWLINE)
(ID "all_bases")
(PUNCT "=")
(ID "class_bases")
(PUNCT "+")
(ID "metamro")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "dir")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "mro")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "DynamicClassAttribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "processed")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "homecls")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "get_obj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "dict_obj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "processed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Exception")
(PUNCT "(")
(LIT "__dict__ is special, don't want the proxy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "get_obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "homecls")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "get_obj")
(PUNCT ",")
(LIT "__objclass__")
(PUNCT ",")
(ID "homecls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "homecls")
(KEYWORD not)
(KEYWORD in)
(ID "class_bases")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "homecls")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "last_cls")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "srch_cls")
(KEYWORD in)
(ID "class_bases")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "srch_obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "srch_cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "srch_obj")
(PUNCT "==")
(ID "get_obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_cls")
(PUNCT "=")
(ID "srch_cls")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "srch_cls")
(KEYWORD in)
(ID "metamro")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "srch_obj")
(PUNCT "=")
(ID "srch_cls")
(PUNCT ".")
(ID "__getattr__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "srch_obj")
(PUNCT "==")
(ID "get_obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_cls")
(PUNCT "=")
(ID "srch_cls")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "last_cls")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "homecls")
(PUNCT "=")
(ID "last_cls")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "all_bases")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict_obj")
(PUNCT "=")
(ID "base")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "homecls")
(KEYWORD not)
(KEYWORD in)
(ID "metamro")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "homecls")
(PUNCT "=")
(ID "base")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "homecls")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "obj")
(PUNCT "=")
(ID "get_obj")
(KEYWORD or)
(ID "dict_obj")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "dict_obj")
(PUNCT ",")
(ID "staticmethod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(LIT "static method")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "dict_obj")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "dict_obj")
(PUNCT ",")
(ID "classmethod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(LIT "class method")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "dict_obj")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "dict_obj")
(PUNCT ",")
(ID "property")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(LIT "property")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "dict_obj")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isroutine")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(LIT "method")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(LIT "data")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Attribute")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "homecls")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "processed")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmro")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return tuple of base classes (including cls) in method resolution order.")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "__mro__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unwrap")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "stop")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the object wrapped by *func*.\n\n   Follows the chain of :attr:`__wrapped__` attributes returning the last\n   object in the chain.\n\n   *stop* is an optional callback accepting an object in the wrapper chain\n   as its sole argument that allows the unwrapping to be terminated early if\n   the callback returns a true value. If the callback never returns a true\n   value, the last object in the chain is returned as usual. For example,\n   :func:`signature` uses this to stop unwrapping if any object in the\n   chain has a ``__signature__`` attribute defined.\n\n   :exc:`ValueError` is raised if a cycle is encountered.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "stop")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_is_wrapper")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hasattr")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "__wrapped__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_is_wrapper")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hasattr")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "__wrapped__")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "stop")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "func")
(NEWLINE)
(ID "memo")
(PUNCT "=")
(PUNCT "{")
(ID "id")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD while)
(ID "_is_wrapper")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__wrapped__")
(NEWLINE)
(ID "id_func")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "id_func")
(KEYWORD in)
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "wrapper loop when unwrapping {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "memo")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "id_func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "func")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "indentsize")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the indent size, in spaces, at the start of a line of text.")
(NEWLINE)
(ID "expline")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "expline")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "expline")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getdoc")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the documentation string for an object.\n\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "doc")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "doc")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cleandoc")
(PUNCT "(")
(ID "doc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cleandoc")
(PUNCT "(")
(ID "doc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clean up indentation from docstrings.\n\n    Any whitespace that can be uniformly removed from the second line\n    onwards is removed.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "doc")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "margin")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "content")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "content")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indent")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "-")
(ID "content")
(NEWLINE)
(ID "margin")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "margin")
(PUNCT ",")
(ID "indent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "margin")
(PUNCT "<")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(ID "margin")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "lines")
(KEYWORD and)
(KEYWORD not)
(ID "lines")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "lines")
(KEYWORD and)
(KEYWORD not)
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getfile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Work out which source or compiled file an object was defined in.")
(NEWLINE)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "__file__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "object")
(PUNCT ".")
(ID "__file__")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is a built-in module")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isclass")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "__module__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "object")
(PUNCT ".")
(ID "__module__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "__file__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "object")
(PUNCT ".")
(ID "__file__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is a built-in class")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__func__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__code__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "istraceback")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "tb_frame")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isframe")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "f_code")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "iscode")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "object")
(PUNCT ".")
(ID "co_filename")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is not a module, class, method, ")
(LIT "function, traceback, frame, or code object")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ModuleInfo")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "ModuleInfo")
(PUNCT ",")
(LIT "name suffix mode module_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getmoduleinfo")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the module name, suffix, mode, and module type for a given file.")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "inspect.getmoduleinfo() is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "warnings")
(PUNCT ".")
(ID "catch_warnings")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "simplefilter")
(PUNCT "(")
(LIT "ignore")
(PUNCT ",")
(ID "PendingDeprecationWarning")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "imp")
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "suffixes")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "mtype")
(PUNCT ")")
(KEYWORD for)
(ID "suffix")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "mtype")
(KEYWORD in)
(ID "imp")
(PUNCT ".")
(ID "get_suffixes")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "suffixes")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "neglen")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "mtype")
(KEYWORD in)
(ID "suffixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(PUNCT "[")
(ID "neglen")
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(ID "suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ModuleInfo")
(PUNCT "(")
(ID "filename")
(PUNCT "[")
(PUNCT ":")
(ID "neglen")
(PUNCT "]")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "mtype")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getmodulename")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the module name for a given file, or None.")
(NEWLINE)
(ID "fname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "suffixes")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(PUNCT ",")
(ID "suffix")
(PUNCT ")")
(KEYWORD for)
(ID "suffix")
(KEYWORD in)
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(PUNCT ".")
(ID "all_suffixes")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "suffixes")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "neglen")
(PUNCT ",")
(ID "suffix")
(KEYWORD in)
(ID "suffixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fname")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fname")
(PUNCT "[")
(PUNCT ":")
(ID "neglen")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsourcefile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the filename that can be used to locate an object's source.\n    Return None if no way can be identified to get the source.\n    ")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "getfile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(ID "all_bytecode_suffixes")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(PUNCT ".")
(ID "DEBUG_BYTECODE_SUFFIXES")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "all_bytecode_suffixes")
(PUNCT "+=")
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(PUNCT ".")
(ID "OPTIMIZED_BYTECODE_SUFFIXES")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "filename")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "all_bytecode_suffixes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(PUNCT ".")
(ID "SOURCE_SUFFIXES")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "any")
(PUNCT "(")
(ID "filename")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(PUNCT ".")
(ID "EXTENSION_SUFFIXES")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "getmodule")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ",")
(LIT "__loader__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "filename")
(KEYWORD in)
(ID "linecache")
(PUNCT ".")
(ID "cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getabsfile")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "_filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an absolute path to the source or compiled file for an object.\n\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.")
(NEWLINE)
(KEYWORD if)
(ID "_filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_filename")
(PUNCT "=")
(ID "getsourcefile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(KEYWORD or)
(ID "getfile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normcase")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "modulesbyfile")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_filesbymodname")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "getmodule")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "_filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the module an object was defined in, or None if not found.")
(NEWLINE)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "object")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "__module__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "object")
(PUNCT ".")
(ID "__module__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "_filename")
(KEYWORD in)
(ID "modulesbyfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "modulesbyfile")
(PUNCT "[")
(ID "_filename")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "getabsfile")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "file")
(KEYWORD in)
(ID "modulesbyfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "modulesbyfile")
(PUNCT "[")
(ID "file")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "modname")
(PUNCT ",")
(ID "module")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__file__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__file__")
(NEWLINE)
(KEYWORD if)
(ID "f")
(PUNCT "==")
(ID "_filesbymodname")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "modname")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "_filesbymodname")
(PUNCT "[")
(ID "modname")
(PUNCT "]")
(PUNCT "=")
(ID "f")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "getabsfile")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(ID "modulesbyfile")
(PUNCT "[")
(ID "f")
(PUNCT "]")
(PUNCT "=")
(ID "modulesbyfile")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "realpath")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "file")
(KEYWORD in)
(ID "modulesbyfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "modulesbyfile")
(PUNCT "[")
(ID "file")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "main")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "__main__")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "__name__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "main")
(PUNCT ",")
(ID "object")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mainobject")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "main")
(PUNCT ",")
(ID "object")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mainobject")
(KEYWORD is)
(ID "object")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "main")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "builtin")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "builtins")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "builtin")
(PUNCT ",")
(ID "object")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtinobject")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "builtin")
(PUNCT ",")
(ID "object")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "builtinobject")
(KEYWORD is)
(ID "object")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "builtin")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "findsource")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the entire source file and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An OSError\n    is raised if the source code cannot be retrieved.")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "getsourcefile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linecache")
(PUNCT ".")
(ID "checkcache")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "getfile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "file")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "<")
(PUNCT ")")
(KEYWORD and)
(ID "file")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ">")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "source code not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "module")
(PUNCT "=")
(ID "getmodule")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "getlines")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "module")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "getlines")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "could not get source code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "lines")
(PUNCT ",")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isclass")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(ID "pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(\\s*)class\\s*")
(PUNCT "+")
(ID "name")
(PUNCT "+")
(LIT "\\b")
(PUNCT ")")
(NEWLINE)
(ID "candidates")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "pat")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "c")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "lines")
(PUNCT ",")
(ID "i")
(NEWLINE)
(DEDENT)
(ID "candidates")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "candidates")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "candidates")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "lines")
(PUNCT ",")
(ID "candidates")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "could not find class definition")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "ismethod")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__func__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isfunction")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__code__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "istraceback")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "tb_frame")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isframe")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "f_code")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "iscode")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "co_firstlineno")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "could not find function definition")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lnum")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "co_firstlineno")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(\\s*def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "lnum")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pat")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "lnum")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "lnum")
(PUNCT "=")
(ID "lnum")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "lines")
(PUNCT ",")
(ID "lnum")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "could not find code object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcomments")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get lines of comments immediately preceding an object's source code.\n\n    Returns None when source can't be found.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ",")
(ID "lnum")
(PUNCT "=")
(ID "findsource")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "lines")
(KEYWORD and)
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "#!")
(PUNCT ":")
(ID "start")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "start")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(KEYWORD and)
(ID "lines")
(PUNCT "[")
(ID "start")
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "#")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT "=")
(ID "start")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "start")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(KEYWORD and)
(ID "lines")
(PUNCT "[")
(ID "start")
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "end")
(PUNCT "=")
(ID "start")
(NEWLINE)
(KEYWORD while)
(ID "end")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(KEYWORD and)
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "end")
(PUNCT "=")
(ID "end")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "comments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "lnum")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indent")
(PUNCT "=")
(ID "indentsize")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "lnum")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "end")
(PUNCT "=")
(ID "lnum")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "end")
(PUNCT ">=")
(LIT 0)
(KEYWORD and)
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(KEYWORD and)
(ID "indentsize")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ")")
(PUNCT "==")
(ID "indent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT "=")
(PUNCT "[")
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "end")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "end")
(PUNCT "=")
(ID "end")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "comment")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "comment")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(KEYWORD and)
(ID "indentsize")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ")")
(PUNCT "==")
(ID "indent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "comment")
(PUNCT "]")
(NEWLINE)
(ID "end")
(PUNCT "=")
(ID "end")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "end")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "comment")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(ID "end")
(PUNCT "]")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(ID "comments")
(KEYWORD and)
(ID "comments")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "comments")
(KEYWORD and)
(ID "comments")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "comments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "EndOfBlock")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "BlockFinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Provide a tokeneater() method to detect the end of a code block.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "islambda")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "started")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "passline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "last")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tokeneater")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "srowcol")
(PUNCT ",")
(ID "erowcol")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "started")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(KEYWORD in)
(PUNCT "(")
(LIT "def")
(PUNCT ",")
(LIT "class")
(PUNCT ",")
(LIT "lambda")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT "==")
(LIT "lambda")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "islambda")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "started")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "passline")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(ID "tokenize")
(PUNCT ".")
(ID "NEWLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "passline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "last")
(PUNCT "=")
(ID "srowcol")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "islambda")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EndOfBlock")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "passline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(ID "tokenize")
(PUNCT ".")
(ID "INDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "passline")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(ID "tokenize")
(PUNCT ".")
(ID "DEDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EndOfBlock")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "type")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "tokenize")
(PUNCT ".")
(ID "COMMENT")
(PUNCT ",")
(ID "tokenize")
(PUNCT ".")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EndOfBlock")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getblock")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract the block of code at the top of the given list of lines.")
(NEWLINE)
(ID "blockfinder")
(PUNCT "=")
(ID "BlockFinder")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokens")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "generate_tokens")
(PUNCT "(")
(ID "iter")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ".")
(ID "__next__")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "_token")
(KEYWORD in)
(ID "tokens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "blockfinder")
(PUNCT ".")
(ID "tokeneater")
(PUNCT "(")
(PUNCT "*")
(ID "_token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "EndOfBlock")
(PUNCT ",")
(ID "IndentationError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "lines")
(PUNCT "[")
(PUNCT ":")
(ID "blockfinder")
(PUNCT ".")
(ID "last")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsourcelines")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of source lines and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An OSError is\n    raised if the source code cannot be retrieved.")
(NEWLINE)
(ID "lines")
(PUNCT ",")
(ID "lnum")
(PUNCT "=")
(ID "findsource")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "lines")
(PUNCT ",")
(LIT 0)
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(KEYWORD return)
(ID "getblock")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "lnum")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "lnum")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsource")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    OSError is raised if the source code cannot be retrieved.")
(NEWLINE)
(ID "lines")
(PUNCT ",")
(ID "lnum")
(PUNCT "=")
(ID "getsourcelines")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "walktree")
(PUNCT "(")
(ID "classes")
(PUNCT ",")
(ID "children")
(PUNCT ",")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Recursive helper function for getclasstree().")
(NEWLINE)
(ID "results")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "classes")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(ID "attrgetter")
(PUNCT "(")
(LIT "__module__")
(PUNCT ",")
(LIT "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "c")
(PUNCT ".")
(ID "__bases__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "c")
(KEYWORD in)
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "results")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "walktree")
(PUNCT "(")
(ID "children")
(PUNCT "[")
(ID "c")
(PUNCT "]")
(PUNCT ",")
(ID "children")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "results")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getclasstree")
(PUNCT "(")
(ID "classes")
(PUNCT ",")
(ID "unique")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Arrange the given list of classes into a hierarchy of nested lists.\n\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times.")
(NEWLINE)
(ID "children")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "roots")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "c")
(PUNCT ".")
(ID "__bases__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "parent")
(KEYWORD in)
(ID "c")
(PUNCT ".")
(ID "__bases__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "parent")
(KEYWORD in)
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "children")
(PUNCT "[")
(ID "parent")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c")
(KEYWORD not)
(KEYWORD in)
(ID "children")
(PUNCT "[")
(ID "parent")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "children")
(PUNCT "[")
(ID "parent")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "unique")
(KEYWORD and)
(ID "parent")
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "c")
(KEYWORD not)
(KEYWORD in)
(ID "roots")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "roots")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "parent")
(KEYWORD in)
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "parent")
(KEYWORD not)
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "roots")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "walktree")
(PUNCT "(")
(ID "roots")
(PUNCT ",")
(ID "children")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "Arguments")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "Arguments")
(PUNCT ",")
(LIT "args, varargs, varkw")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getargs")
(PUNCT "(")
(ID "co")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where\n    'args' is the list of argument names. Keyword-only arguments are\n    appended. 'varargs' and 'varkw' are the names of the * and **\n    arguments or None.")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(ID "varkw")
(PUNCT "=")
(ID "_getfullargs")
(PUNCT "(")
(ID "co")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "Arguments")
(PUNCT "(")
(ID "args")
(PUNCT "+")
(ID "kwonlyargs")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getfullargs")
(PUNCT "(")
(ID "co")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get information about the arguments accepted by a code object.\n\n    Four things are returned: (args, varargs, kwonlyargs, varkw), where\n    'args' and 'kwonlyargs' are lists of argument names, and 'varargs'\n    and 'varkw' are the names of the * and ** arguments or None.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "iscode")
(PUNCT "(")
(ID "co")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is not a code object")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "co")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nargs")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_argcount")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_varnames")
(NEWLINE)
(ID "nkwargs")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_kwonlyargcount")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "names")
(PUNCT "[")
(PUNCT ":")
(ID "nargs")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "kwonlyargs")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "names")
(PUNCT "[")
(ID "nargs")
(PUNCT ":")
(ID "nargs")
(PUNCT "+")
(ID "nkwargs")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "step")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "nargs")
(PUNCT "+=")
(ID "nkwargs")
(NEWLINE)
(ID "varargs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "co")
(PUNCT ".")
(ID "co_flags")
(PUNCT "&")
(ID "CO_VARARGS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "varargs")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_varnames")
(PUNCT "[")
(ID "nargs")
(PUNCT "]")
(NEWLINE)
(ID "nargs")
(PUNCT "=")
(ID "nargs")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "varkw")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "co")
(PUNCT ".")
(ID "co_flags")
(PUNCT "&")
(ID "CO_VARKEYWORDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "varkw")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_varnames")
(PUNCT "[")
(ID "nargs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(ID "varkw")
(NEWLINE)
(DEDENT)
(ID "ArgSpec")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "ArgSpec")
(PUNCT ",")
(LIT "args varargs keywords defaults")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getargspec")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the names and default values of a function's arguments.\n\n    A tuple of four things is returned: (args, varargs, varkw, defaults).\n    'args' is a list of the argument names.\n    'args' will include keyword-only argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n\n    Use the getfullargspec() API for Python-3000 code, as annotations\n    and keyword arguments are supported. getargspec() will raise ValueError\n    if the func has either annotations or keyword arguments.\n    ")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ",")
(ID "defaults")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(ID "kwonlydefaults")
(PUNCT ",")
(ID "ann")
(PUNCT "=")
(ID "getfullargspec")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "kwonlyargs")
(KEYWORD or)
(ID "ann")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Function has keyword-only arguments or annotations")
(LIT ", use getfullargspec() API which can support them")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ArgSpec")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ",")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "FullArgSpec")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "FullArgSpec")
(PUNCT ",")
(LIT "args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getfullargspec")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the names and default values of a callable object's arguments.\n\n    A tuple of seven things is returned:\n    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults annotations).\n    'args' is a list of the argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    'kwonlyargs' is a list of keyword-only argument names.\n    'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n    'annotations' is a dictionary mapping argument names to annotations.\n\n    The first four items in the tuple correspond to getargspec().\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "ex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "unsupported callable")
(PUNCT ")")
(KEYWORD from)
(ID "ex")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "varargs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "varkw")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "kwonlyargs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "annotations")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "kwdefaults")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(PUNCT ".")
(ID "return_annotation")
(KEYWORD is)
(KEYWORD not)
(ID "sig")
(PUNCT ".")
(ID "empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "annotations")
(PUNCT "[")
(LIT "return")
(PUNCT "]")
(PUNCT "=")
(ID "sig")
(PUNCT ".")
(ID "return_annotation")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "param")
(KEYWORD in)
(ID "sig")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "kind")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(KEYWORD is)
(ID "_POSITIONAL_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(KEYWORD is)
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "default")
(KEYWORD is)
(KEYWORD not)
(ID "param")
(PUNCT ".")
(ID "empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "defaults")
(PUNCT "+=")
(PUNCT "(")
(ID "param")
(PUNCT ".")
(ID "default")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(KEYWORD is)
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "varargs")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(KEYWORD is)
(ID "_KEYWORD_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwonlyargs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "default")
(KEYWORD is)
(KEYWORD not)
(ID "param")
(PUNCT ".")
(ID "empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwdefaults")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "default")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(KEYWORD is)
(ID "_VAR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "varkw")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "annotation")
(KEYWORD is)
(KEYWORD not)
(ID "param")
(PUNCT ".")
(ID "empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "annotations")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "annotation")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "kwdefaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwdefaults")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "defaults")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "FullArgSpec")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ",")
(ID "defaults")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(ID "kwdefaults")
(PUNCT ",")
(ID "annotations")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ArgInfo")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "ArgInfo")
(PUNCT ",")
(LIT "args varargs keywords locals")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getargvalues")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame.")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT "=")
(ID "getargs")
(PUNCT "(")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ArgInfo")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ",")
(ID "frame")
(PUNCT ".")
(ID "f_locals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "formatannotation")
(PUNCT "(")
(ID "annotation")
(PUNCT ",")
(ID "base_module")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "annotation")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "annotation")
(PUNCT ".")
(ID "__module__")
(KEYWORD in)
(PUNCT "(")
(LIT "builtins")
(PUNCT ",")
(ID "base_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "annotation")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "annotation")
(PUNCT ".")
(ID "__module__")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "annotation")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "annotation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "formatannotationrelativeto")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(LIT "__module__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_formatannotation")
(PUNCT "(")
(ID "annotation")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "formatannotation")
(PUNCT "(")
(ID "annotation")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_formatannotation")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "formatargspec")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "varkw")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "defaults")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "kwonlydefaults")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "annotations")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "formatarg")
(PUNCT "=")
(ID "str")
(PUNCT ",")
(ID "formatvarargs")
(PUNCT "=")
(KEYWORD lambda)
(ID "name")
(PUNCT ":")
(LIT "*")
(PUNCT "+")
(ID "name")
(PUNCT ",")
(ID "formatvarkw")
(PUNCT "=")
(KEYWORD lambda)
(ID "name")
(PUNCT ":")
(LIT "**")
(PUNCT "+")
(ID "name")
(PUNCT ",")
(ID "formatvalue")
(PUNCT "=")
(KEYWORD lambda)
(ID "value")
(PUNCT ":")
(LIT "=")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "formatreturns")
(PUNCT "=")
(KEYWORD lambda)
(ID "text")
(PUNCT ":")
(LIT " -> ")
(PUNCT "+")
(ID "text")
(PUNCT ",")
(ID "formatannotation")
(PUNCT "=")
(ID "formatannotation")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format an argument spec from the values returned by getargspec\n    or getfullargspec.\n\n    The first seven arguments are (args, varargs, varkw, defaults,\n    kwonlyargs, kwonlydefaults, annotations).  The other five arguments\n    are the corresponding optional formatting functions that are called to\n    turn names and values into strings.  The last argument is an optional\n    function to format the sequence of arguments.")
(NEWLINE)
(KEYWORD def)
(ID "formatargandannotation")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "formatarg")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "arg")
(KEYWORD in)
(ID "annotations")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "+=")
(LIT ": ")
(PUNCT "+")
(ID "formatannotation")
(PUNCT "(")
(ID "annotations")
(PUNCT "[")
(ID "arg")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "specs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "firstdefault")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "arg")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "formatargandannotation")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "defaults")
(KEYWORD and)
(ID "i")
(PUNCT ">=")
(ID "firstdefault")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "spec")
(PUNCT "+")
(ID "formatvalue")
(PUNCT "(")
(ID "defaults")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(ID "firstdefault")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "varargs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatvarargs")
(PUNCT "(")
(ID "formatargandannotation")
(PUNCT "(")
(ID "varargs")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kwonlyargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "*")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "kwonlyargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "kwonlyarg")
(KEYWORD in)
(ID "kwonlyargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "formatargandannotation")
(PUNCT "(")
(ID "kwonlyarg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "kwonlydefaults")
(KEYWORD and)
(ID "kwonlyarg")
(KEYWORD in)
(ID "kwonlydefaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "+=")
(ID "formatvalue")
(PUNCT "(")
(ID "kwonlydefaults")
(PUNCT "[")
(ID "kwonlyarg")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "varkw")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatvarkw")
(PUNCT "(")
(ID "formatargandannotation")
(PUNCT "(")
(ID "varkw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(LIT "(")
(PUNCT "+")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "specs")
(PUNCT ")")
(PUNCT "+")
(LIT ")")
(NEWLINE)
(KEYWORD if)
(LIT "return")
(KEYWORD in)
(ID "annotations")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "+=")
(ID "formatreturns")
(PUNCT "(")
(ID "formatannotation")
(PUNCT "(")
(ID "annotations")
(PUNCT "[")
(LIT "return")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "formatargvalues")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ",")
(ID "locals")
(PUNCT ",")
(ID "formatarg")
(PUNCT "=")
(ID "str")
(PUNCT ",")
(ID "formatvarargs")
(PUNCT "=")
(KEYWORD lambda)
(ID "name")
(PUNCT ":")
(LIT "*")
(PUNCT "+")
(ID "name")
(PUNCT ",")
(ID "formatvarkw")
(PUNCT "=")
(KEYWORD lambda)
(ID "name")
(PUNCT ":")
(LIT "**")
(PUNCT "+")
(ID "name")
(PUNCT ",")
(ID "formatvalue")
(PUNCT "=")
(KEYWORD lambda)
(ID "value")
(PUNCT ":")
(LIT "=")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.")
(NEWLINE)
(KEYWORD def)
(ID "convert")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(ID "locals")
(PUNCT ",")
(ID "formatarg")
(PUNCT "=")
(ID "formatarg")
(PUNCT ",")
(ID "formatvalue")
(PUNCT "=")
(ID "formatvalue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "formatarg")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "+")
(ID "formatvalue")
(PUNCT "(")
(ID "locals")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "specs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "convert")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "varargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatvarargs")
(PUNCT "(")
(ID "varargs")
(PUNCT ")")
(PUNCT "+")
(ID "formatvalue")
(PUNCT "(")
(ID "locals")
(PUNCT "[")
(ID "varargs")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "varkw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "specs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatvarkw")
(PUNCT "(")
(ID "varkw")
(PUNCT ")")
(PUNCT "+")
(ID "formatvalue")
(PUNCT "(")
(ID "locals")
(PUNCT "[")
(ID "varkw")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "(")
(PUNCT "+")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "specs")
(PUNCT ")")
(PUNCT "+")
(LIT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_missing_arguments")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "argnames")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(ID "repr")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "argnames")
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "values")
(PUNCT "]")
(NEWLINE)
(ID "missing")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "missing")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "names")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "missing")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT "{} and {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(PUNCT "*")
(ID "names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT "=")
(LIT ", {} and {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(PUNCT "*")
(ID "names")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "names")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(PUNCT "+")
(ID "tail")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "%s() missing %i required %s argument%s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "missing")
(PUNCT ",")
(LIT "positional")
(KEYWORD if)
(ID "pos")
(KEYWORD else)
(LIT "keyword-only")
(PUNCT ",")
(LIT "")
(KEYWORD if)
(ID "missing")
(PUNCT "==")
(LIT 1)
(KEYWORD else)
(LIT "s")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_too_many")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwonly")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "defcount")
(PUNCT ",")
(ID "given")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "atleast")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "-")
(ID "defcount")
(NEWLINE)
(ID "kwonly_given")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(PUNCT "[")
(ID "arg")
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "kwonly")
(KEYWORD if)
(ID "arg")
(KEYWORD in)
(ID "values")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "varargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plural")
(PUNCT "=")
(ID "atleast")
(PUNCT "!=")
(LIT 1)
(NEWLINE)
(ID "sig")
(PUNCT "=")
(LIT "at least %d")
(PUNCT "%")
(PUNCT "(")
(ID "atleast")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "defcount")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plural")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "sig")
(PUNCT "=")
(LIT "from %d to %d")
(PUNCT "%")
(PUNCT "(")
(ID "atleast")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plural")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "!=")
(LIT 1)
(NEWLINE)
(ID "sig")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "kwonly_sig")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "kwonly_given")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT " positional argument%s (and %d keyword-only argument%s)")
(NEWLINE)
(ID "kwonly_sig")
(PUNCT "=")
(PUNCT "(")
(ID "msg")
(PUNCT "%")
(PUNCT "(")
(LIT "s")
(KEYWORD if)
(ID "given")
(PUNCT "!=")
(LIT 1)
(KEYWORD else)
(LIT "")
(PUNCT ",")
(ID "kwonly_given")
(PUNCT ",")
(LIT "s")
(KEYWORD if)
(ID "kwonly_given")
(PUNCT "!=")
(LIT 1)
(KEYWORD else)
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "%s() takes %s positional argument%s but %d%s %s given")
(PUNCT "%")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "sig")
(PUNCT ",")
(LIT "s")
(KEYWORD if)
(ID "plural")
(KEYWORD else)
(LIT "")
(PUNCT ",")
(ID "given")
(PUNCT ",")
(ID "kwonly_sig")
(PUNCT ",")
(LIT "was")
(KEYWORD if)
(ID "given")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(KEYWORD not)
(ID "kwonly_given")
(KEYWORD else)
(LIT "were")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcallargs")
(PUNCT "(")
(PUNCT "*")
(ID "func_and_positional")
(PUNCT ",")
(PUNCT "**")
(ID "named")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the mapping of arguments to values.\n\n    A dict is returned, with keys the function argument names (including the\n    names of the * and ** arguments, if any), and values the respective bound\n    values from 'positional' and 'named'.")
(NEWLINE)
(ID "func")
(PUNCT "=")
(ID "func_and_positional")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "positional")
(PUNCT "=")
(ID "func_and_positional")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "getfullargspec")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT ",")
(ID "defaults")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(ID "kwonlydefaults")
(PUNCT ",")
(ID "ann")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(ID "f_name")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(ID "arg2value")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "ismethod")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(KEYWORD and)
(ID "func")
(PUNCT ".")
(ID "__self__")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "positional")
(PUNCT "=")
(PUNCT "(")
(ID "func")
(PUNCT ".")
(ID "__self__")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "positional")
(NEWLINE)
(DEDENT)
(ID "num_pos")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "positional")
(PUNCT ")")
(NEWLINE)
(ID "num_args")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "num_defaults")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(KEYWORD if)
(ID "defaults")
(KEYWORD else)
(LIT 0)
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "num_pos")
(PUNCT ",")
(ID "num_args")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg2value")
(PUNCT "[")
(ID "args")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "positional")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "varargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg2value")
(PUNCT "[")
(ID "varargs")
(PUNCT "]")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "positional")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "possible_kwargs")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "args")
(PUNCT "+")
(ID "kwonlyargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "varkw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg2value")
(PUNCT "[")
(ID "varkw")
(PUNCT "]")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "kw")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "named")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kw")
(KEYWORD not)
(KEYWORD in)
(ID "possible_kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "varkw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "%s() got an unexpected keyword argument %r")
(PUNCT "%")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "arg2value")
(PUNCT "[")
(ID "varkw")
(PUNCT "]")
(PUNCT "[")
(ID "kw")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kw")
(KEYWORD in)
(ID "arg2value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "%s() got multiple values for argument %r")
(PUNCT "%")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "arg2value")
(PUNCT "[")
(ID "kw")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "num_pos")
(PUNCT ">")
(ID "num_args")
(KEYWORD and)
(KEYWORD not)
(ID "varargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_too_many")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "num_defaults")
(PUNCT ",")
(ID "num_pos")
(PUNCT ",")
(ID "arg2value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "num_pos")
(PUNCT "<")
(ID "num_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(PUNCT ":")
(ID "num_args")
(PUNCT "-")
(ID "num_defaults")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "req")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "arg")
(KEYWORD not)
(KEYWORD in)
(ID "arg2value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_missing_arguments")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(ID "arg2value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "arg")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(ID "num_args")
(PUNCT "-")
(ID "num_defaults")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "arg")
(KEYWORD not)
(KEYWORD in)
(ID "arg2value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg2value")
(PUNCT "[")
(ID "arg")
(PUNCT "]")
(PUNCT "=")
(ID "defaults")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "missing")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "kwarg")
(KEYWORD in)
(ID "kwonlyargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kwarg")
(KEYWORD not)
(KEYWORD in)
(ID "arg2value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kwonlydefaults")
(KEYWORD and)
(ID "kwarg")
(KEYWORD in)
(ID "kwonlydefaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg2value")
(PUNCT "[")
(ID "kwarg")
(PUNCT "]")
(PUNCT "=")
(ID "kwonlydefaults")
(PUNCT "[")
(ID "kwarg")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "missing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_missing_arguments")
(PUNCT "(")
(ID "f_name")
(PUNCT ",")
(ID "kwonlyargs")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "arg2value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "arg2value")
(NEWLINE)
(DEDENT)
(ID "ClosureVars")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "ClosureVars")
(PUNCT ",")
(LIT "nonlocals globals builtins unbound")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getclosurevars")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Get the mapping of free variables to their current values.\n\n    Returns a named tuple of dicts mapping the current nonlocal, global\n    and builtin references as seen by the body of the function. A final\n    set of unbound names that could not be resolved is also provided.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "ismethod")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__func__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isfunction")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "'{!r}' is not a Python function")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__code__")
(NEWLINE)
(KEYWORD if)
(ID "func")
(PUNCT ".")
(ID "__closure__")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nonlocal_vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nonlocal_vars")
(PUNCT "=")
(PUNCT "{")
(ID "var")
(PUNCT ":")
(ID "cell")
(PUNCT ".")
(ID "cell_contents")
(KEYWORD for)
(ID "var")
(PUNCT ",")
(ID "cell")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "code")
(PUNCT ".")
(ID "co_freevars")
(PUNCT ",")
(ID "func")
(PUNCT ".")
(ID "__closure__")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "global_ns")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__globals__")
(NEWLINE)
(ID "builtin_ns")
(PUNCT "=")
(ID "global_ns")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__builtins__")
(PUNCT ",")
(ID "builtins")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ismodule")
(PUNCT "(")
(ID "builtin_ns")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtin_ns")
(PUNCT "=")
(ID "builtin_ns")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(DEDENT)
(ID "global_vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "builtin_vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "unbound_names")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "code")
(PUNCT ".")
(ID "co_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "None")
(PUNCT ",")
(LIT "True")
(PUNCT ",")
(LIT "False")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "global_vars")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "global_ns")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtin_vars")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "builtin_ns")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unbound_names")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "ClosureVars")
(PUNCT "(")
(ID "nonlocal_vars")
(PUNCT ",")
(ID "global_vars")
(PUNCT ",")
(ID "builtin_vars")
(PUNCT ",")
(ID "unbound_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "Traceback")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "Traceback")
(PUNCT ",")
(LIT "filename lineno function code_context index")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "getframeinfo")
(PUNCT "(")
(ID "frame")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get information about a frame or traceback object.\n\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.")
(NEWLINE)
(KEYWORD if)
(ID "istraceback")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "tb_lineno")
(NEWLINE)
(ID "frame")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "tb_frame")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_lineno")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isframe")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is not a frame or traceback object")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "getsourcefile")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(KEYWORD or)
(ID "getfile")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "context")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT "=")
(ID "lineno")
(PUNCT "-")
(LIT 1)
(PUNCT "-")
(ID "context")
(PUNCT "//")
(LIT 2)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ",")
(ID "lnum")
(PUNCT "=")
(ID "findsource")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "index")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "start")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "start")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "min")
(PUNCT "(")
(ID "start")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT "-")
(ID "context")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "start")
(PUNCT "+")
(ID "context")
(PUNCT "]")
(NEWLINE)
(ID "index")
(PUNCT "=")
(ID "lineno")
(PUNCT "-")
(LIT 1)
(PUNCT "-")
(ID "start")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "index")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Traceback")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "frame")
(PUNCT ".")
(ID "f_code")
(PUNCT ".")
(ID "co_name")
(PUNCT ",")
(ID "lines")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getlineno")
(PUNCT "(")
(ID "frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the line number from a frame object, allowing for optimization.")
(NEWLINE)
(KEYWORD return)
(ID "frame")
(PUNCT ".")
(ID "f_lineno")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getouterframes")
(PUNCT "(")
(ID "frame")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a list of records for a frame and all higher (calling) frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.")
(NEWLINE)
(ID "framelist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "frame")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "framelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "frame")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "getframeinfo")
(PUNCT "(")
(ID "frame")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "frame")
(PUNCT "=")
(ID "frame")
(PUNCT ".")
(ID "f_back")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "framelist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getinnerframes")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a list of records for a traceback's frame and all lower frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.")
(NEWLINE)
(ID "framelist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "tb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "framelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "tb")
(PUNCT ".")
(ID "tb_frame")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "getframeinfo")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "tb")
(PUNCT "=")
(ID "tb")
(PUNCT ".")
(ID "tb_next")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "framelist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "currentframe")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the frame of the caller or None if this is not possible.")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "_getframe")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "_getframe")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stack")
(PUNCT "(")
(ID "context")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of records for the stack above the caller's frame.")
(NEWLINE)
(KEYWORD return)
(ID "getouterframes")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "_getframe")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "trace")
(PUNCT "(")
(ID "context")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of records for the stack below the current exception.")
(NEWLINE)
(KEYWORD return)
(ID "getinnerframes")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_sentinel")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_static_getmro")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "__mro__")
(PUNCT "]")
(PUNCT ".")
(ID "__get__")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_instance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "instance_dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "instance_dict")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__getattribute__")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dict")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "instance_dict")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "_sentinel")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_class")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "_static_getmro")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_shadowed_dict")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "entry")
(PUNCT ")")
(PUNCT ")")
(KEYWORD is)
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "entry")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_sentinel")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_static_getmro")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_shadowed_dict")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict_attr")
(PUNCT "=")
(ID "type")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "__dict__")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "_static_getmro")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "class_dict")
(PUNCT "=")
(ID "dict_attr")
(PUNCT ".")
(ID "__get__")
(PUNCT "(")
(ID "entry")
(PUNCT ")")
(PUNCT "[")
(LIT "__dict__")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "class_dict")
(PUNCT ")")
(KEYWORD is)
(ID "types")
(PUNCT ".")
(ID "GetSetDescriptorType")
(KEYWORD and)
(ID "class_dict")
(PUNCT ".")
(ID "__name__")
(PUNCT "==")
(LIT "__dict__")
(KEYWORD and)
(ID "class_dict")
(PUNCT ".")
(ID "__objclass__")
(KEYWORD is)
(ID "entry")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "class_dict")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_sentinel")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getattr_static")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "_sentinel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieve attributes without triggering dynamic lookup via the\n       descriptor protocol,  __getattr__ or __getattribute__.\n\n       Note: this function may not be able to retrieve all attributes\n       that getattr can fetch (like dynamically created attributes)\n       and may find attributes that getattr can't (like descriptors\n       that raise AttributeError). It can also return descriptor objects\n       instead of instance members in some cases. See the\n       documentation for details.\n    ")
(NEWLINE)
(ID "instance_result")
(PUNCT "=")
(ID "_sentinel")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_is_type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "dict_attr")
(PUNCT "=")
(ID "_shadowed_dict")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "dict_attr")
(KEYWORD is)
(ID "_sentinel")
(KEYWORD or)
(ID "type")
(PUNCT "(")
(ID "dict_attr")
(PUNCT ")")
(KEYWORD is)
(ID "types")
(PUNCT ".")
(ID "MemberDescriptorType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "instance_result")
(PUNCT "=")
(ID "_check_instance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "obj")
(NEWLINE)
(DEDENT)
(ID "klass_result")
(PUNCT "=")
(ID "_check_class")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "instance_result")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(KEYWORD and)
(ID "klass_result")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "_check_class")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "klass_result")
(PUNCT ")")
(PUNCT ",")
(LIT "__get__")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(KEYWORD and)
(ID "_check_class")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "klass_result")
(PUNCT ")")
(PUNCT ",")
(LIT "__set__")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "klass_result")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "instance_result")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "instance_result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "klass_result")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "klass_result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(ID "klass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "_static_getmro")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_shadowed_dict")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "entry")
(PUNCT ")")
(PUNCT ")")
(KEYWORD is)
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "entry")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "default")
(KEYWORD is)
(KEYWORD not)
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "GEN_CREATED")
(PUNCT "=")
(LIT "GEN_CREATED")
(NEWLINE)
(ID "GEN_RUNNING")
(PUNCT "=")
(LIT "GEN_RUNNING")
(NEWLINE)
(ID "GEN_SUSPENDED")
(PUNCT "=")
(LIT "GEN_SUSPENDED")
(NEWLINE)
(ID "GEN_CLOSED")
(PUNCT "=")
(LIT "GEN_CLOSED")
(NEWLINE)
(KEYWORD def)
(ID "getgeneratorstate")
(PUNCT "(")
(ID "generator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get current state of a generator-iterator.\n\n    Possible states are:\n      GEN_CREATED: Waiting to start execution.\n      GEN_RUNNING: Currently being executed by the interpreter.\n      GEN_SUSPENDED: Currently suspended at a yield expression.\n      GEN_CLOSED: Execution has completed.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "generator")
(PUNCT ".")
(ID "gi_running")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "GEN_RUNNING")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "generator")
(PUNCT ".")
(ID "gi_frame")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "GEN_CLOSED")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "generator")
(PUNCT ".")
(ID "gi_frame")
(PUNCT ".")
(ID "f_lasti")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "GEN_CREATED")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "GEN_SUSPENDED")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getgeneratorlocals")
(PUNCT "(")
(ID "generator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Get the mapping of generator local variables to their current values.\n\n    A dict is returned, with the keys the local variable names and values the\n    bound values.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isgenerator")
(PUNCT "(")
(ID "generator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "'{!r}' is not a Python generator")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "generator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "frame")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "generator")
(PUNCT ",")
(LIT "gi_frame")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "frame")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "generator")
(PUNCT ".")
(ID "gi_frame")
(PUNCT ".")
(ID "f_locals")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_WrapperDescriptor")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "type")
(PUNCT ".")
(ID "__call__")
(PUNCT ")")
(NEWLINE)
(ID "_MethodWrapper")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "all")
(PUNCT ".")
(ID "__call__")
(PUNCT ")")
(NEWLINE)
(ID "_ClassMethodWrapper")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "int")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "from_bytes")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_NonUserDefinedCallables")
(PUNCT "=")
(PUNCT "(")
(ID "_WrapperDescriptor")
(PUNCT ",")
(ID "_MethodWrapper")
(PUNCT ",")
(ID "_ClassMethodWrapper")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "BuiltinFunctionType")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_signature_get_user_defined_method")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "method_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meth")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "method_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "meth")
(PUNCT ",")
(ID "_NonUserDefinedCallables")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "meth")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_signature_get_partial")
(PUNCT "(")
(ID "wrapped_sig")
(PUNCT ",")
(ID "partial")
(PUNCT ",")
(ID "extra_args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "old_params")
(PUNCT "=")
(ID "wrapped_sig")
(PUNCT ".")
(ID "parameters")
(NEWLINE)
(ID "new_params")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(ID "old_params")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "partial_args")
(PUNCT "=")
(ID "partial")
(PUNCT ".")
(ID "args")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "partial_keywords")
(PUNCT "=")
(ID "partial")
(PUNCT ".")
(ID "keywords")
(KEYWORD or)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "extra_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "partial_args")
(PUNCT "=")
(ID "extra_args")
(PUNCT "+")
(ID "partial_args")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ba")
(PUNCT "=")
(ID "wrapped_sig")
(PUNCT ".")
(ID "bind_partial")
(PUNCT "(")
(PUNCT "*")
(ID "partial_args")
(PUNCT ",")
(PUNCT "**")
(ID "partial_keywords")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "ex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "partial object {!r} has incorrect arguments")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "partial")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(KEYWORD from)
(ID "ex")
(NEWLINE)
(DEDENT)
(ID "transform_to_kwonly")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "param_name")
(PUNCT ",")
(ID "param")
(KEYWORD in)
(ID "old_params")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg_value")
(PUNCT "=")
(ID "ba")
(PUNCT ".")
(ID "arguments")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD is)
(ID "_POSITIONAL_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "param_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD is)
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param_name")
(KEYWORD in)
(ID "partial_keywords")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transform_to_kwonly")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "new_params")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "default")
(PUNCT "=")
(ID "arg_value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD is)
(ID "_KEYWORD_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "default")
(PUNCT "=")
(ID "arg_value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "transform_to_kwonly")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD is)
(KEYWORD not)
(ID "_POSITIONAL_ONLY")
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD is)
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_param")
(PUNCT "=")
(ID "new_params")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "kind")
(PUNCT "=")
(ID "_KEYWORD_ONLY")
(PUNCT ")")
(NEWLINE)
(ID "new_params")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT "=")
(ID "new_param")
(NEWLINE)
(ID "new_params")
(PUNCT ".")
(ID "move_to_end")
(PUNCT "(")
(ID "param_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_KEYWORD_ONLY")
(PUNCT ",")
(ID "_VAR_KEYWORD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT ".")
(ID "move_to_end")
(PUNCT "(")
(ID "param_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD is)
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "wrapped_sig")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "parameters")
(PUNCT "=")
(ID "new_params")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_bound_method")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "sig")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "params")
(KEYWORD or)
(ID "params")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_VAR_KEYWORD")
(PUNCT ",")
(ID "_KEYWORD_ONLY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid method signature")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "kind")
(PUNCT "=")
(ID "params")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "kind")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ",")
(ID "_POSITIONAL_ONLY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(ID "params")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD is)
(KEYWORD not)
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid argument type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "sig")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "parameters")
(PUNCT "=")
(ID "params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_is_builtin")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "isbuiltin")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD or)
(ID "ismethoddescriptor")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "_NonUserDefinedCallables")
(PUNCT ")")
(KEYWORD or)
(ID "obj")
(KEYWORD in)
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "object")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_is_functionlike")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD or)
(ID "isclass")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__name__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__code__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__defaults__")
(PUNCT ",")
(ID "_void")
(PUNCT ")")
(NEWLINE)
(ID "kwdefaults")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__kwdefaults__")
(PUNCT ",")
(ID "_void")
(PUNCT ")")
(NEWLINE)
(ID "annotations")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__annotations__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "CodeType")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "defaults")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "defaults")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "kwdefaults")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "kwdefaults")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "annotations")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_get_bound_param")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "spec")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "($")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pos")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cpos")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "cpos")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(KEYWORD or)
(ID "cpos")
(PUNCT ">")
(ID "pos")
(NEWLINE)
(ID "cpos")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "=")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "cpos")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(KEYWORD or)
(ID "cpos")
(PUNCT ">")
(ID "pos")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_strip_non_python_syntax")
(PUNCT "(")
(ID "signature")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Takes a signature in Argument Clinic's extended signature format.\n    Returns a tuple of three things:\n      * that signature re-rendered in standard Python syntax,\n      * the index of the \"self\" parameter (generally 0), or None if\n        the function does not have a \"self\" parameter, and\n      * the index of the last \"positional only\" parameter,\n        or None if the signature has no positional-only parameters.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "signature")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "signature")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self_parameter")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "last_positional_only")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(ID "l")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(KEYWORD for)
(ID "l")
(KEYWORD in)
(ID "signature")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "generator")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ".")
(ID "__next__")
(NEWLINE)
(ID "token_stream")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "tokenize")
(PUNCT "(")
(ID "generator")
(PUNCT ")")
(NEWLINE)
(ID "delayed_comma")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "skip_next_comma")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "text")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "add")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "current_parameter")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "OP")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "OP")
(NEWLINE)
(ID "ERRORTOKEN")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "ERRORTOKEN")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "token_stream")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "t")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "tokenize")
(PUNCT ".")
(ID "ENCODING")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "token_stream")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT ",")
(ID "string")
(PUNCT "=")
(ID "t")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "t")
(PUNCT ".")
(ID "string")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(ID "OP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "string")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "skip_next_comma")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip_next_comma")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "delayed_comma")
(NEWLINE)
(ID "delayed_comma")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "current_parameter")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "string")
(PUNCT "==")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "skip_next_comma")
(NEWLINE)
(KEYWORD assert)
(ID "last_positional_only")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(ID "skip_next_comma")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "last_positional_only")
(PUNCT "=")
(ID "current_parameter")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "type")
(PUNCT "==")
(ID "ERRORTOKEN")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "string")
(PUNCT "==")
(LIT "$")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self_parameter")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(ID "self_parameter")
(PUNCT "=")
(ID "current_parameter")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "delayed_comma")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delayed_comma")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(PUNCT "(")
(ID "type")
(PUNCT "==")
(ID "OP")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "string")
(PUNCT "==")
(LIT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "add")
(PUNCT "(")
(LIT ", ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "add")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "string")
(PUNCT "==")
(LIT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "add")
(PUNCT "(")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "clean_signature")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "clean_signature")
(PUNCT ",")
(ID "self_parameter")
(PUNCT ",")
(ID "last_positional_only")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_fromstr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Parameter")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_parameter_cls")
(NEWLINE)
(ID "clean_signature")
(PUNCT ",")
(ID "self_parameter")
(PUNCT ",")
(ID "last_positional_only")
(PUNCT "=")
(ID "_signature_strip_non_python_syntax")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "program")
(PUNCT "=")
(LIT "def foo")
(PUNCT "+")
(ID "clean_signature")
(PUNCT "+")
(LIT ": pass")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "ast")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "program")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SyntaxError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "ast")
(PUNCT ".")
(ID "Module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "{!r} builtin has invalid signature")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "body")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "parameters")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "empty")
(NEWLINE)
(ID "invalid")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "module_dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "module_name")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__module__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module_dict")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "sys_module_dict")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(NEWLINE)
(KEYWORD def)
(ID "parse_name")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "ast")
(PUNCT ".")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "annotation")
(PUNCT "!=")
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Annotations are not currently supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "node")
(PUNCT ".")
(ID "arg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wrap_value")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "module_dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "sys_module_dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ast")
(PUNCT ".")
(ID "Str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ast")
(PUNCT ".")
(ID "Num")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ast")
(PUNCT ".")
(ID "Bytes")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD in)
(PUNCT "(")
(KEYWORD True)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ast")
(PUNCT ".")
(ID "NameConstant")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "RewriteSymbolics")
(PUNCT "(")
(ID "ast")
(PUNCT ".")
(ID "NodeTransformer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "visit_Attribute")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "node")
(NEWLINE)
(KEYWORD while)
(ID "isinstance")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "ast")
(PUNCT ".")
(ID "Attribute")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "n")
(PUNCT ".")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "n")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "ast")
(PUNCT ".")
(ID "Name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "a")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "n")
(PUNCT ".")
(ID "id")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "wrap_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "visit_Name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "ctx")
(PUNCT ",")
(ID "ast")
(PUNCT ".")
(ID "Load")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "wrap_value")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "p")
(PUNCT "(")
(ID "name_node")
(PUNCT ",")
(ID "default_node")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "empty")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "parse_name")
(PUNCT "(")
(ID "name_node")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(ID "invalid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "default_node")
(KEYWORD and)
(ID "default_node")
(KEYWORD is)
(KEYWORD not)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_node")
(PUNCT "=")
(ID "RewriteSymbolics")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "visit")
(PUNCT "(")
(ID "default_node")
(PUNCT ")")
(NEWLINE)
(ID "o")
(PUNCT "=")
(ID "ast")
(PUNCT ".")
(ID "literal_eval")
(PUNCT "(")
(ID "default_node")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "o")
(PUNCT "=")
(ID "invalid")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(KEYWORD is)
(ID "invalid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "default")
(PUNCT "=")
(ID "o")
(KEYWORD if)
(ID "o")
(KEYWORD is)
(KEYWORD not)
(ID "invalid")
(KEYWORD else)
(ID "default")
(NEWLINE)
(DEDENT)
(ID "parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Parameter")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "default")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "empty")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(ID "reversed")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(ID "reversed")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(ID "iter")
(PUNCT "=")
(ID "itertools")
(PUNCT ".")
(ID "zip_longest")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "defaults")
(PUNCT ",")
(ID "fillvalue")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "last_positional_only")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "POSITIONAL_ONLY")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "POSITIONAL_OR_KEYWORD")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "iter")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(ID "last_positional_only")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "POSITIONAL_OR_KEYWORD")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "vararg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "VAR_POSITIONAL")
(NEWLINE)
(ID "p")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "vararg")
(PUNCT ",")
(ID "empty")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "KEYWORD_ONLY")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "default")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "kwonlyargs")
(PUNCT ",")
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "kw_defaults")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "kwarg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "VAR_KEYWORD")
(NEWLINE)
(ID "p")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "args")
(PUNCT ".")
(ID "kwarg")
(PUNCT ",")
(ID "empty")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self_parameter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "parameters")
(NEWLINE)
(ID "_self")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__self__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self_isbound")
(PUNCT "=")
(ID "_self")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(ID "self_ismodule")
(PUNCT "=")
(ID "ismodule")
(PUNCT "(")
(ID "_self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self_isbound")
(KEYWORD and)
(PUNCT "(")
(ID "self_ismodule")
(KEYWORD or)
(ID "skip_bound_arg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parameters")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "parameters")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "kind")
(PUNCT "=")
(ID "Parameter")
(PUNCT ".")
(ID "POSITIONAL_ONLY")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "parameters")
(PUNCT ",")
(ID "return_annotation")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "empty")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_from_builtin")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_signature_is_builtin")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is not a Python builtin ")
(LIT "function")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(LIT "__text_signature__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no signature found for builtin {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_signature_fromstr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_signature_internal")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is not a callable object")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "MethodType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "obj")
(PUNCT ".")
(ID "__func__")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "skip_bound_arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_signature_bound_method")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sig")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "follow_wrapper_chains")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "unwrap")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "stop")
(PUNCT "=")
(PUNCT "(")
(KEYWORD lambda)
(ID "f")
(PUNCT ":")
(ID "hasattr")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "__signature__")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "__signature__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "Signature")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "unexpected object {!r} in __signature__ ")
(LIT "attribute")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "sig")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "partialmethod")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "_partialmethod")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "partialmethod")
(PUNCT ",")
(ID "functools")
(PUNCT ".")
(ID "partialmethod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wrapped_sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "partialmethod")
(PUNCT ".")
(ID "func")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(ID "sig")
(PUNCT "=")
(ID "_signature_get_partial")
(PUNCT "(")
(ID "wrapped_sig")
(PUNCT ",")
(ID "partialmethod")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "first_wrapped_param")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "wrapped_sig")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "new_params")
(PUNCT "=")
(PUNCT "(")
(ID "first_wrapped_param")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "tuple")
(PUNCT "(")
(ID "sig")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sig")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "parameters")
(PUNCT "=")
(ID "new_params")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isfunction")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD or)
(ID "_signature_is_functionlike")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Signature")
(PUNCT ".")
(ID "from_function")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_signature_is_builtin")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_signature_from_builtin")
(PUNCT "(")
(ID "Signature")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT "=")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "functools")
(PUNCT ".")
(ID "partial")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wrapped_sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "obj")
(PUNCT ".")
(ID "func")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_signature_get_partial")
(PUNCT "(")
(ID "wrapped_sig")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sig")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "call")
(PUNCT "=")
(ID "_signature_get_user_defined_method")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(LIT "__call__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "call")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "call")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "_signature_get_user_defined_method")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__new__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "new")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "new")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init")
(PUNCT "=")
(ID "_signature_get_user_defined_method")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__init__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "init")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "obj")
(PUNCT ".")
(ID "__mro__")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text_sig")
(PUNCT "=")
(ID "base")
(PUNCT ".")
(ID "__text_signature__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "text_sig")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_signature_fromstr")
(PUNCT "(")
(ID "Signature")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "text_sig")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "obj")
(PUNCT ".")
(ID "__mro__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "obj")
(PUNCT ".")
(ID "__init__")
(KEYWORD is)
(ID "object")
(PUNCT ".")
(ID "__init__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "signature")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "_NonUserDefinedCallables")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "call")
(PUNCT "=")
(ID "_signature_get_user_defined_method")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(LIT "__call__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "call")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sig")
(PUNCT "=")
(ID "_signature_internal")
(PUNCT "(")
(ID "call")
(PUNCT ",")
(ID "follow_wrapper_chains")
(PUNCT ",")
(ID "skip_bound_arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(KEYWORD as)
(ID "ex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "no signature found for {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(KEYWORD from)
(ID "ex")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sig")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "skip_bound_arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_signature_bound_method")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sig")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "BuiltinFunctionType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "no signature found for builtin function {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "callable {!r} is not supported by signature")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "signature")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a signature object for the passed callable.")
(NEWLINE)
(KEYWORD return)
(ID "_signature_internal")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A private marker - used in Parameter & Signature")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_ParameterKind")
(PUNCT "(")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<_ParameterKind: {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_POSITIONAL_ONLY")
(PUNCT "=")
(ID "_ParameterKind")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "POSITIONAL_ONLY")
(PUNCT ")")
(NEWLINE)
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT "=")
(ID "_ParameterKind")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "POSITIONAL_OR_KEYWORD")
(PUNCT ")")
(NEWLINE)
(ID "_VAR_POSITIONAL")
(PUNCT "=")
(ID "_ParameterKind")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "VAR_POSITIONAL")
(PUNCT ")")
(NEWLINE)
(ID "_KEYWORD_ONLY")
(PUNCT "=")
(ID "_ParameterKind")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "KEYWORD_ONLY")
(PUNCT ")")
(NEWLINE)
(ID "_VAR_KEYWORD")
(PUNCT "=")
(ID "_ParameterKind")
(PUNCT "(")
(LIT 4)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "VAR_KEYWORD")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Parameter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Represents a parameter in a function signature.\n\n    Has the following public attributes:\n\n    * name : str\n        The name of the parameter as a string.\n    * default : object\n        The default value for the parameter if specified.  If the\n        parameter has no default value, this attribute is set to\n        `Parameter.empty`.\n    * annotation\n        The annotation for the parameter if specified.  If the\n        parameter has no annotation, this attribute is set to\n        `Parameter.empty`.\n    * kind : str\n        Describes how argument values are bound to the parameter.\n        Possible values: `Parameter.POSITIONAL_ONLY`,\n        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,\n        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.\n    ")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "_name")
(PUNCT ",")
(LIT "_kind")
(PUNCT ",")
(LIT "_default")
(PUNCT ",")
(LIT "_annotation")
(PUNCT ")")
(NEWLINE)
(ID "POSITIONAL_ONLY")
(PUNCT "=")
(ID "_POSITIONAL_ONLY")
(NEWLINE)
(ID "POSITIONAL_OR_KEYWORD")
(PUNCT "=")
(ID "_POSITIONAL_OR_KEYWORD")
(NEWLINE)
(ID "VAR_POSITIONAL")
(PUNCT "=")
(ID "_VAR_POSITIONAL")
(NEWLINE)
(ID "KEYWORD_ONLY")
(PUNCT "=")
(ID "_KEYWORD_ONLY")
(NEWLINE)
(ID "VAR_KEYWORD")
(PUNCT "=")
(ID "_VAR_KEYWORD")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(ID "_empty")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "_empty")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "_empty")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "_POSITIONAL_ONLY")
(PUNCT ",")
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ",")
(ID "_VAR_POSITIONAL")
(PUNCT ",")
(ID "_KEYWORD_ONLY")
(PUNCT ",")
(ID "_VAR_KEYWORD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid value for 'Parameter.kind' attribute")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_kind")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(KEYWORD if)
(ID "default")
(KEYWORD is)
(KEYWORD not)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_VAR_POSITIONAL")
(PUNCT ",")
(ID "_VAR_KEYWORD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "{} parameters cannot have default values")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_default")
(PUNCT "=")
(ID "default")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_annotation")
(PUNCT "=")
(ID "annotation")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "name is a required attribute for Parameter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "name must be a str, not a {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "{!r} is not a valid parameter name")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "default")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_default")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "annotation")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_annotation")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "kind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_kind")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "_void")
(PUNCT ",")
(ID "kind")
(PUNCT "=")
(ID "_void")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "_void")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "_void")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates a customized copy of the Parameter.")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD is)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_kind")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "annotation")
(KEYWORD is)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "annotation")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_annotation")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "default")
(KEYWORD is)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_default")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "default")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "annotation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "kind")
(NEWLINE)
(ID "formatted")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_annotation")
(KEYWORD is)
(KEYWORD not)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted")
(PUNCT "=")
(LIT "{}:{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "formatted")
(PUNCT ",")
(ID "formatannotation")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_annotation")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_default")
(KEYWORD is)
(KEYWORD not)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted")
(PUNCT "=")
(LIT "{}={}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "formatted")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_default")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "==")
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted")
(PUNCT "=")
(LIT "*")
(PUNCT "+")
(ID "formatted")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(PUNCT "==")
(ID "_VAR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted")
(PUNCT "=")
(LIT "**")
(PUNCT "+")
(ID "formatted")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "formatted")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<{} at {:#x} {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "issubclass")
(PUNCT "(")
(ID "other")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(ID "Parameter")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_name")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_kind")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_kind")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_default")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_default")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_annotation")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_annotation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BoundArguments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Result of `Signature.bind` call.  Holds the mapping of arguments\n    to the function's parameters.\n\n    Has the following public attributes:\n\n    * arguments : OrderedDict\n        An ordered mutable mapping of parameters' names to arguments' values.\n        Does not contain arguments' default values.\n    * signature : Signature\n        The Signature object that created this instance.\n    * args : tuple\n        Tuple of positional arguments values.\n    * kwargs : dict\n        Dict of keyword arguments values.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "signature")
(PUNCT ",")
(ID "arguments")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "arguments")
(PUNCT "=")
(ID "arguments")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_signature")
(PUNCT "=")
(ID "signature")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "signature")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_signature")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "args")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "param_name")
(PUNCT ",")
(ID "param")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_signature")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_VAR_KEYWORD")
(PUNCT ",")
(ID "_KEYWORD_ONLY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "arguments")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "kwargs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "kwargs_started")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "param_name")
(PUNCT ",")
(ID "param")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_signature")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "kwargs_started")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_VAR_KEYWORD")
(PUNCT ",")
(ID "_KEYWORD_ONLY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs_started")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param_name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "arguments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs_started")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "kwargs_started")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "arguments")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT "=")
(ID "arg")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "kwargs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "issubclass")
(PUNCT "(")
(ID "other")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(ID "BoundArguments")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "signature")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "signature")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "arguments")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Signature")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A Signature object represents the overall signature of a function.\n    It stores a Parameter object for each parameter accepted by the\n    function, as well as information specific to the function itself.\n\n    A Signature object has the following public attributes and methods:\n\n    * parameters : OrderedDict\n        An ordered mapping of parameters' names to the corresponding\n        Parameter objects (keyword-only arguments are in the same order\n        as listed in `code.co_varnames`).\n    * return_annotation : object\n        The annotation for the return type of the function if specified.\n        If the function has no annotation for its return type, this\n        attribute is set to `Signature.empty`.\n    * bind(*args, **kwargs) -> BoundArguments\n        Creates a mapping from positional and keyword arguments to\n        parameters.\n    * bind_partial(*args, **kwargs) -> BoundArguments\n        Creates a partial mapping from positional and keyword arguments\n        to parameters (simulating 'functools.partial' behavior.)\n    ")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "_return_annotation")
(PUNCT ",")
(LIT "_parameters")
(PUNCT ")")
(NEWLINE)
(ID "_parameter_cls")
(PUNCT "=")
(ID "Parameter")
(NEWLINE)
(ID "_bound_arguments_cls")
(PUNCT "=")
(ID "BoundArguments")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(ID "_empty")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parameters")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "return_annotation")
(PUNCT "=")
(ID "_empty")
(PUNCT ",")
(ID "__validate_parameters__")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructs Signature from the given list of Parameter\n        objects and 'return_annotation'.  All arguments are optional.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "parameters")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "__validate_parameters__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "top_kind")
(PUNCT "=")
(ID "_POSITIONAL_ONLY")
(NEWLINE)
(ID "kind_defaults")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "idx")
(PUNCT ",")
(ID "param")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "parameters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "kind")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(PUNCT "<")
(ID "top_kind")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "wrong parameter order: {!r} before {!r}")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "top_kind")
(PUNCT ",")
(ID "kind")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(PUNCT ">")
(ID "top_kind")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind_defaults")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "top_kind")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_POSITIONAL_ONLY")
(PUNCT ",")
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "default")
(KEYWORD is)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kind_defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "non-default argument follows default ")
(LIT "argument")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind_defaults")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "params")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "duplicate parameter name: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "params")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "param")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT "(")
(PUNCT "(")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "param")
(PUNCT ")")
(KEYWORD for)
(ID "param")
(KEYWORD in)
(ID "parameters")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_parameters")
(PUNCT "=")
(ID "types")
(PUNCT ".")
(ID "MappingProxyType")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_return_annotation")
(PUNCT "=")
(ID "return_annotation")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "from_function")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructs Signature for the given python function")
(NEWLINE)
(ID "is_duck_function")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isfunction")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_signature_is_functionlike")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_duck_function")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{!r} is not a Python function")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "Parameter")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_parameter_cls")
(NEWLINE)
(ID "func_code")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__code__")
(NEWLINE)
(ID "pos_count")
(PUNCT "=")
(ID "func_code")
(PUNCT ".")
(ID "co_argcount")
(NEWLINE)
(ID "arg_names")
(PUNCT "=")
(ID "func_code")
(PUNCT ".")
(ID "co_varnames")
(NEWLINE)
(ID "positional")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "arg_names")
(PUNCT "[")
(PUNCT ":")
(ID "pos_count")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "keyword_only_count")
(PUNCT "=")
(ID "func_code")
(PUNCT ".")
(ID "co_kwonlyargcount")
(NEWLINE)
(ID "keyword_only")
(PUNCT "=")
(ID "arg_names")
(PUNCT "[")
(ID "pos_count")
(PUNCT ":")
(PUNCT "(")
(ID "pos_count")
(PUNCT "+")
(ID "keyword_only_count")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "annotations")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__annotations__")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__defaults__")
(NEWLINE)
(ID "kwdefaults")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__kwdefaults__")
(NEWLINE)
(KEYWORD if)
(ID "defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos_default_count")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos_default_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "parameters")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "non_default_count")
(PUNCT "=")
(ID "pos_count")
(PUNCT "-")
(ID "pos_default_count")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "positional")
(PUNCT "[")
(PUNCT ":")
(ID "non_default_count")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "annotation")
(PUNCT "=")
(ID "annotations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Parameter")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "annotation")
(PUNCT ",")
(ID "kind")
(PUNCT "=")
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "offset")
(PUNCT ",")
(ID "name")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "positional")
(PUNCT "[")
(ID "non_default_count")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "annotation")
(PUNCT "=")
(ID "annotations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Parameter")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "annotation")
(PUNCT ",")
(ID "kind")
(PUNCT "=")
(ID "_POSITIONAL_OR_KEYWORD")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "defaults")
(PUNCT "[")
(ID "offset")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "func_code")
(PUNCT ".")
(ID "co_flags")
(PUNCT "&")
(ID "CO_VARARGS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "arg_names")
(PUNCT "[")
(ID "pos_count")
(PUNCT "+")
(ID "keyword_only_count")
(PUNCT "]")
(NEWLINE)
(ID "annotation")
(PUNCT "=")
(ID "annotations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Parameter")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "annotation")
(PUNCT ",")
(ID "kind")
(PUNCT "=")
(ID "_VAR_POSITIONAL")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "keyword_only")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default")
(PUNCT "=")
(ID "_empty")
(NEWLINE)
(KEYWORD if)
(ID "kwdefaults")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default")
(PUNCT "=")
(ID "kwdefaults")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "annotation")
(PUNCT "=")
(ID "annotations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Parameter")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "annotation")
(PUNCT ",")
(ID "kind")
(PUNCT "=")
(ID "_KEYWORD_ONLY")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "default")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "func_code")
(PUNCT ".")
(ID "co_flags")
(PUNCT "&")
(ID "CO_VARKEYWORDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "pos_count")
(PUNCT "+")
(ID "keyword_only_count")
(NEWLINE)
(KEYWORD if)
(ID "func_code")
(PUNCT ".")
(ID "co_flags")
(PUNCT "&")
(ID "CO_VARARGS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "arg_names")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(NEWLINE)
(ID "annotation")
(PUNCT "=")
(ID "annotations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Parameter")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "annotation")
(PUNCT "=")
(ID "annotation")
(PUNCT ",")
(ID "kind")
(PUNCT "=")
(ID "_VAR_KEYWORD")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "parameters")
(PUNCT ",")
(ID "return_annotation")
(PUNCT "=")
(ID "annotations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "return")
(PUNCT ",")
(ID "_empty")
(PUNCT ")")
(PUNCT ",")
(ID "__validate_parameters__")
(PUNCT "=")
(ID "is_duck_function")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "from_builtin")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_signature_from_builtin")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parameters")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_parameters")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "return_annotation")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_return_annotation")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "parameters")
(PUNCT "=")
(ID "_void")
(PUNCT ",")
(ID "return_annotation")
(PUNCT "=")
(ID "_void")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates a customized copy of the Signature.\n        Pass 'parameters' and/or 'return_annotation' arguments\n        to override them in the new copy.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "parameters")
(KEYWORD is)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parameters")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "return_annotation")
(KEYWORD is)
(ID "_void")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "return_annotation")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_return_annotation")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "(")
(ID "parameters")
(PUNCT ",")
(ID "return_annotation")
(PUNCT "=")
(ID "return_annotation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "issubclass")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ",")
(ID "Signature")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "return_annotation")
(PUNCT "!=")
(ID "other")
(PUNCT ".")
(ID "return_annotation")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "parameters")
(PUNCT ")")
(PUNCT "!=")
(ID "len")
(PUNCT "(")
(ID "other")
(PUNCT ".")
(ID "parameters")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "other_positions")
(PUNCT "=")
(PUNCT "{")
(ID "param")
(PUNCT ":")
(ID "idx")
(KEYWORD for)
(ID "idx")
(PUNCT ",")
(ID "param")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "other")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "idx")
(PUNCT ",")
(PUNCT "(")
(ID "param_name")
(PUNCT ",")
(ID "param")
(PUNCT ")")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_KEYWORD_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_param")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "parameters")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT "!=")
(ID "other_param")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other_idx")
(PUNCT "=")
(ID "other_positions")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "idx")
(PUNCT "!=")
(ID "other_idx")
(KEYWORD or)
(ID "param")
(PUNCT "!=")
(ID "other")
(PUNCT ".")
(ID "parameters")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "partial")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Private method.  Don't use directly.")
(NEWLINE)
(ID "arguments")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parameters")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parameters_ex")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "arg_vals")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg_val")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "arg_vals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "parameters")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "param")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_POSITIONAL_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "{arg!r} parameter is positional only, ")
(LIT "but was passed as a keyword")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "arg")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "parameters_ex")
(PUNCT "=")
(PUNCT "(")
(ID "param")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_KEYWORD")
(KEYWORD or)
(ID "param")
(PUNCT ".")
(ID "default")
(KEYWORD is)
(KEYWORD not)
(ID "_empty")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parameters_ex")
(PUNCT "=")
(PUNCT "(")
(ID "param")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "partial")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parameters_ex")
(PUNCT "=")
(PUNCT "(")
(ID "param")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "{arg!r} parameter lacking default value")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "arg")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "parameters")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "too many positional arguments")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(KEYWORD in)
(PUNCT "(")
(ID "_VAR_KEYWORD")
(PUNCT ",")
(ID "_KEYWORD_ONLY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "too many positional arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(PUNCT "[")
(ID "arg_val")
(PUNCT "]")
(NEWLINE)
(ID "values")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "arg_vals")
(PUNCT ")")
(NEWLINE)
(ID "arguments")
(PUNCT "[")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "values")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "multiple values for argument ")
(LIT "{arg!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "arg")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "arguments")
(PUNCT "[")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "arg_val")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "kwargs_param")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "param")
(KEYWORD in)
(ID "itertools")
(PUNCT ".")
(ID "chain")
(PUNCT "(")
(ID "parameters_ex")
(PUNCT ",")
(ID "parameters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_KEYWORD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs_param")
(PUNCT "=")
(ID "param")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "param_name")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arg_val")
(PUNCT "=")
(ID "kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "param_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "partial")
(KEYWORD and)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "!=")
(ID "_VAR_POSITIONAL")
(KEYWORD and)
(ID "param")
(PUNCT ".")
(ID "default")
(KEYWORD is)
(ID "_empty")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{arg!r} parameter lacking default value")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "arg")
(PUNCT "=")
(ID "param_name")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "kind")
(PUNCT "==")
(ID "_POSITIONAL_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{arg!r} parameter is positional only, ")
(LIT "but was passed as a keyword")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "arg")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "arguments")
(PUNCT "[")
(ID "param_name")
(PUNCT "]")
(PUNCT "=")
(ID "arg_val")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kwargs_param")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arguments")
(PUNCT "[")
(ID "kwargs_param")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "kwargs")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "too many keyword arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bound_arguments_cls")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "arguments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bind")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a BoundArguments object, that maps the passed `args`\n        and `kwargs` to the function's signature.  Raises `TypeError`\n        if the passed arguments can not be bound.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bind_partial")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a BoundArguments object, that partially maps the\n        passed `args` and `kwargs` to the function's signature.\n        Raises `TypeError` if the passed arguments can not be bound.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "kwargs")
(PUNCT ",")
(ID "partial")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "render_pos_only_separator")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "render_kw_only_separator")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD for)
(ID "param")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "parameters")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "param")
(PUNCT ")")
(NEWLINE)
(ID "kind")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "kind")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(PUNCT "==")
(ID "_POSITIONAL_ONLY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "render_pos_only_separator")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "render_pos_only_separator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "render_pos_only_separator")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "==")
(ID "_VAR_POSITIONAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "render_kw_only_separator")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "kind")
(PUNCT "==")
(ID "_KEYWORD_ONLY")
(KEYWORD and)
(ID "render_kw_only_separator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "*")
(PUNCT ")")
(NEWLINE)
(ID "render_kw_only_separator")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "formatted")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "render_pos_only_separator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rendered")
(PUNCT "=")
(LIT "({})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "return_annotation")
(KEYWORD is)
(KEYWORD not)
(ID "_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "anno")
(PUNCT "=")
(ID "formatannotation")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "return_annotation")
(PUNCT ")")
(NEWLINE)
(ID "rendered")
(PUNCT "+=")
(LIT " -> {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "anno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "rendered")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Logic for inspecting an object given at command line ")
(NEWLINE)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "object")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "The object to be analysed. ")
(LIT "It supports the 'module:qualname' syntax")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-d")
(PUNCT ",")
(LIT "--details")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Display info about the module rather than its source code")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "target")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "object")
(NEWLINE)
(ID "mod_name")
(PUNCT ",")
(ID "has_attrs")
(PUNCT ",")
(ID "attrs")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "module")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "import_module")
(PUNCT "(")
(ID "mod_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "Failed to import {} ({}: {})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "mod_name")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "has_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "attrs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "module")
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "module")
(PUNCT ".")
(ID "__name__")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "builtin_module_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Can't get info for builtin modules.")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "details")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Target: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Origin: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "getsourcefile")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Cached: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__cached__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(ID "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Loader: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__loader__")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__path__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Submodule search path: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__path__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__")
(PUNCT ",")
(ID "lineno")
(PUNCT "=")
(ID "findsource")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Line: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "getsource")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
