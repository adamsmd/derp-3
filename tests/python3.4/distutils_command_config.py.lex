(LIT "distutils.command.config\n\nImplements the Distutils 'config' command, a (mostly) empty command class\nthat exists mainly to be sub-classed by specific module distributions and\napplications.  The idea is that while every \"config\" command is different,\nat least they're all named the same, and users always see \"config\" in the\nlist of standard commands.  Also, this is a good place to put common\nconfigure-like tasks: \"try to compile this C code\", or \"figure out where\nthis header file lives\".\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsExecError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "sysconfig")
(KEYWORD import)
(ID "customize_compiler")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(ID "LANG_EXT")
(PUNCT "=")
(PUNCT "{")
(LIT "c")
(PUNCT ":")
(LIT ".c")
(PUNCT ",")
(LIT "c++")
(PUNCT ":")
(LIT ".cxx")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "config")
(PUNCT "(")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(LIT "prepare to build")
(NEWLINE)
(ID "user_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "compiler=")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "specify the compiler type")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "cc=")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "specify the compiler executable")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "include-dirs=")
(PUNCT ",")
(LIT "I")
(PUNCT ",")
(LIT "list of directories to search for header files")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "define=")
(PUNCT ",")
(LIT "D")
(PUNCT ",")
(LIT "C preprocessor macros to define")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "undef=")
(PUNCT ",")
(LIT "U")
(PUNCT ",")
(LIT "C preprocessor macros to undefine")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "libraries=")
(PUNCT ",")
(LIT "l")
(PUNCT ",")
(LIT "external C libraries to link with")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "library-dirs=")
(PUNCT ",")
(LIT "L")
(PUNCT ",")
(LIT "directories to search for external C libraries")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "noisy")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "show every action (compile, link, run, ...) taken")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "dump-source")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "dump generated source files before attempting to compile them")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "noisy")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dump_source")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "temp_files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "libraries")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_compiler")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check that 'self.compiler' really is a CCompiler object;\n        if not, make it one.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CCompiler")
(PUNCT ",")
(ID "new_compiler")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ",")
(ID "CCompiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT "=")
(ID "new_compiler")
(PUNCT "(")
(ID "compiler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "customize_compiler")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_include_dirs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_libraries")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_library_dirs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "library_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_gen_temp_sourcefile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(LIT "_configtest")
(PUNCT "+")
(ID "LANG_EXT")
(PUNCT "[")
(ID "lang")
(PUNCT "]")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "header")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "#include <%s>\n")
(PUNCT "%")
(ID "header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "body")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_preprocess")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_gen_temp_sourcefile")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT "=")
(LIT "_configtest.i")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "temp_files")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(ID "src")
(PUNCT ",")
(ID "out")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "preprocess")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "out")
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(ID "include_dirs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "out")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_compile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_gen_temp_sourcefile")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "dump_source")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dump_file")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(LIT "compiling '%s':")
(PUNCT "%")
(ID "src")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "object_filenames")
(PUNCT "(")
(PUNCT "[")
(ID "src")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "temp_files")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(PUNCT "[")
(ID "src")
(PUNCT "]")
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(ID "include_dirs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_link")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_compile")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(ID "prog")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "link_executable")
(PUNCT "(")
(PUNCT "[")
(ID "obj")
(PUNCT "]")
(PUNCT ",")
(ID "prog")
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(ID "library_dirs")
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "exe_extension")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prog")
(PUNCT "=")
(ID "prog")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "exe_extension")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "temp_files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "prog")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "prog")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_clean")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "filenames")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filenames")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "temp_files")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "temp_files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "removing: %s")
(PUNCT ",")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "filenames")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "try_cpp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lang")
(PUNCT "=")
(LIT "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a source file from 'body' (a string containing lines\n        of C/C++ code) and 'headers' (a list of header files to include)\n        and run it through the preprocessor.  Return true if the\n        preprocessor succeeded, false if there were any errors.\n        ('body' probably isn't of much use, but what the heck.)\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CompileError")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ok")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_preprocess")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "CompileError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_clean")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ok")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "search_cpp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "body")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lang")
(PUNCT "=")
(LIT "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a source file (just like 'try_cpp()'), run it through\n        the preprocessor, and return true if any line of the output matches\n        'pattern'.  'pattern' should either be a compiled regex object or a\n        string containing a regex.  If both 'body' and 'headers' are None,\n        preprocesses an empty file -- which can be useful to determine the\n        symbols the preprocessor and compiler set by default.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "src")
(PUNCT ",")
(ID "out")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_preprocess")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "out")
(PUNCT ")")
(NEWLINE)
(ID "match")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pattern")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clean")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "match")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "try_compile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lang")
(PUNCT "=")
(LIT "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to compile a source file built from 'body' and 'headers'.\n        Return true on success, false otherwise.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CompileError")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_compile")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(ID "ok")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "CompileError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "ok")
(KEYWORD and)
(LIT "success!")
(KEYWORD or)
(LIT "failure.")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clean")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ok")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "try_link")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lang")
(PUNCT "=")
(LIT "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to compile and link a source file, built from 'body' and\n        'headers', to executable form.  Return true on success, false\n        otherwise.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CompileError")
(PUNCT ",")
(ID "LinkError")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_link")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(ID "ok")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "CompileError")
(PUNCT ",")
(ID "LinkError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "ok")
(KEYWORD and)
(LIT "success!")
(KEYWORD or)
(LIT "failure.")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clean")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ok")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "try_run")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lang")
(PUNCT "=")
(LIT "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to compile, link to an executable, and run a program\n        built from 'body' and 'headers'.  Return true on success, false\n        otherwise.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CompileError")
(PUNCT ",")
(ID "LinkError")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "exe")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_link")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "lang")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "exe")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "ok")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "CompileError")
(PUNCT ",")
(ID "LinkError")
(PUNCT ",")
(ID "DistutilsExecError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "ok")
(KEYWORD and)
(LIT "success!")
(KEYWORD or)
(LIT "failure.")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clean")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ok")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_func")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "decl")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "call")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Determine if function 'func' is available by constructing a\n        source file that refers to 'func', and compiles and links it.\n        If everything succeeds, returns true; otherwise returns false.\n\n        The constructed source file starts out by including the header\n        files listed in 'headers'.  If 'decl' is true, it then declares\n        'func' (as \"int func()\"); you probably shouldn't supply 'headers'\n        and set 'decl' true in the same call, or you might get errors about\n        a conflicting declarations for 'func'.  Finally, the constructed\n        'main()' function either references 'func' or (if 'call' is true)\n        calls it.  'libraries' and 'library_dirs' are used when\n        linking.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "decl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "body")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "int %s ();")
(PUNCT "%")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "body")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "int main () {")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "call")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "body")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "  %s();")
(PUNCT "%")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "body")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "  %s;")
(PUNCT "%")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "body")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "}")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "try_link")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_lib")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "library")
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "other_libraries")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Determine if 'library' is available to be linked against,\n        without actually checking that any particular symbols are provided\n        by it.  'headers' will be used in constructing the source file to\n        be compiled, but the only effect of this is to check if all the\n        header files listed are available.  Any libraries listed in\n        'other_libraries' will be included in the link, in case 'library'\n        has symbols that depend on other libraries.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_compiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "try_link")
(PUNCT "(")
(LIT "int main (void) { }")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(PUNCT "[")
(ID "library")
(PUNCT "]")
(PUNCT "+")
(ID "other_libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header")
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lang")
(PUNCT "=")
(LIT "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Determine if the system header file named by 'header_file'\n        exists and can be found by the preprocessor; return true if so,\n        false otherwise.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "try_cpp")
(PUNCT "(")
(ID "body")
(PUNCT "=")
(LIT "/* No body */")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(PUNCT "[")
(ID "header")
(PUNCT "]")
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(ID "include_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "dump_file")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "head")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dumps a file content into log.info.\n\n    If head is not None, will be dumped before the file content.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "head")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "%s")
(PUNCT "%")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
