(LIT "\nVirtual environment (venv) package for Python. Based on PEP 405.\n\nCopyright (C) 2011-2014 Vinay Sajip.\nLicensed to the PSF under a contributor agreement.\n\nusage: python -m venv [-h] [--system-site-packages] [--symlinks] [--clear]\n            [--upgrade]\n            ENV_DIR [ENV_DIR ...]\n\nCreates virtual Python environments in one or more target directories.\n\npositional arguments:\n  ENV_DIR               A directory to create the environment in.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --symlinks            Attempt to symlink rather than copy.\n  --clear               Delete the environment directory if it already exists.\n                        If not specified and the directory exists, an error is\n                        raised.\n  --upgrade             Upgrade the environment directory to use this version\n                        of Python, assuming Python has been upgraded in-place.\n  --without-pip         Skips installing or upgrading pip in the virtual\n                        environment (pip is bootstrapped by default)\n")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "EnvBuilder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    This class exists to allow virtual environment creation to be\n    customized. The constructor parameters determine the builder's\n    behaviour when called upon to create a virtual environment.\n\n    By default, the builder makes the system (global) site-packages dir\n    *un*available to the created environment.\n\n    If invoked using the Python -m option, the default is to use copying\n    on Windows platforms but symlinks elsewhere. If instantiated some\n    other way, the default is to *not* use symlinks.\n\n    :param system_site_packages: If True, the system (global) site-packages\n                                 dir is available to created environments.\n    :param clear: If True and the target directory exists, it is deleted.\n                  Otherwise, if the target directory exists, an error is\n                  raised.\n    :param symlinks: If True, attempt to symlink rather than copy files into\n                     virtual environment.\n    :param upgrade: If True, upgrade an existing virtual environment.\n    :param with_pip: If True, ensure pip is installed in the virtual\n                     environment\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "system_site_packages")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "clear")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "symlinks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "upgrade")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "with_pip")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "system_site_packages")
(PUNCT "=")
(ID "system_site_packages")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT "=")
(ID "clear")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "symlinks")
(PUNCT "=")
(ID "symlinks")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "upgrade")
(PUNCT "=")
(ID "upgrade")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "with_pip")
(PUNCT "=")
(ID "with_pip")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "env_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Create a virtual environment in a directory.\n\n        :param env_dir: The target directory to create an environment in.\n\n        ")
(NEWLINE)
(ID "env_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ensure_directories")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "create_configuration")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setup_python")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "with_pip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_setup_pip")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "upgrade")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "setup_scripts")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "post_setup")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear_directory")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "fn")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "rmtree")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "ensure_directories")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "env_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Create the directories for the environment.\n\n        Returns a context object which holds paths in the environment,\n        for use by subsequent logic.\n        ")
(NEWLINE)
(KEYWORD def)
(ID "create_if_needed")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to create directory %r")
(PUNCT "%")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "clear_directory")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT "=")
(ID "types")
(PUNCT ".")
(ID "SimpleNamespace")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "env_dir")
(PUNCT "=")
(ID "env_dir")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "env_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "prompt")
(PUNCT "=")
(LIT "(%s) ")
(PUNCT "%")
(ID "context")
(PUNCT ".")
(ID "env_name")
(NEWLINE)
(ID "create_if_needed")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(NEWLINE)
(ID "env")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(KEYWORD and)
(LIT "__PYVENV_LAUNCHER__")
(KEYWORD in)
(ID "env")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "__PYVENV_LAUNCHER__")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "executable")
(NEWLINE)
(DEDENT)
(ID "dirname")
(PUNCT ",")
(ID "exename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "executable")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "python_dir")
(PUNCT "=")
(ID "dirname")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "python_exe")
(PUNCT "=")
(ID "exename")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binname")
(PUNCT "=")
(LIT "Scripts")
(NEWLINE)
(ID "incpath")
(PUNCT "=")
(LIT "Include")
(NEWLINE)
(ID "libpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "env_dir")
(PUNCT ",")
(LIT "Lib")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binname")
(PUNCT "=")
(LIT "bin")
(NEWLINE)
(ID "incpath")
(PUNCT "=")
(LIT "include")
(NEWLINE)
(ID "libpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "env_dir")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "python%d.%d")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(LIT "site-packages")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT ".")
(ID "inc_path")
(PUNCT "=")
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "env_dir")
(PUNCT ",")
(ID "incpath")
(PUNCT ")")
(NEWLINE)
(ID "create_if_needed")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "create_if_needed")
(PUNCT "(")
(ID "libpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ">")
(LIT 2)
(PUNCT "**")
(LIT 32)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "!=")
(LIT "darwin")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "link_path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "env_dir")
(PUNCT ",")
(LIT "lib64")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "link_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(LIT "lib")
(PUNCT ",")
(ID "link_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "context")
(PUNCT ".")
(ID "bin_path")
(PUNCT "=")
(ID "binpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "env_dir")
(PUNCT ",")
(ID "binname")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "bin_name")
(PUNCT "=")
(ID "binname")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "env_exe")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "binpath")
(PUNCT ",")
(ID "exename")
(PUNCT ")")
(NEWLINE)
(ID "create_if_needed")
(PUNCT "(")
(ID "binpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "context")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_configuration")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Create a configuration file indicating where the environment's Python\n        was copied from, and whether the system site-packages should be made\n        available in the environment.\n\n        :param context: The information for the environment creation request\n                        being processed.\n        ")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "cfg_path")
(PUNCT "=")
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "context")
(PUNCT ".")
(ID "env_dir")
(PUNCT ",")
(LIT "pyvenv.cfg")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "home = %s\n")
(PUNCT "%")
(ID "context")
(PUNCT ".")
(ID "python_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "system_site_packages")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "incl")
(PUNCT "=")
(LIT "true")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "incl")
(PUNCT "=")
(LIT "false")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "include-system-site-packages = %s\n")
(PUNCT "%")
(ID "incl")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "version = %d.%d.%d\n")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "include_binary")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "f")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT ".pyd")
(PUNCT ",")
(LIT ".dll")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "python")
(PUNCT ")")
(KEYWORD and)
(ID "f")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".exe")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "symlink_or_copy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ",")
(ID "relative_symlinks_ok")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Try symlinking a file, and if that fails, fall back to copying.\n        ")
(NEWLINE)
(ID "force_copy")
(PUNCT "=")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "symlinks")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "force_copy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "dst")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "relative_symlinks_ok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "Unable to symlink %r to %r")
(PUNCT ",")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(ID "force_copy")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "force_copy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "copyfile")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "setup_python")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set up a Python executable in the environment.\n\n        :param context: The information for the environment creation request\n                        being processed.\n        ")
(NEWLINE)
(ID "binpath")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "bin_path")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "env_exe")
(NEWLINE)
(ID "copier")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "symlink_or_copy")
(NEWLINE)
(ID "copier")
(PUNCT "(")
(ID "context")
(PUNCT ".")
(ID "executable")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "dirname")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "python_dir")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT 493)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "suffix")
(KEYWORD in)
(PUNCT "(")
(LIT "python")
(PUNCT ",")
(LIT "python3")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "binpath")
(PUNCT ",")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "copier")
(PUNCT "(")
(ID "context")
(PUNCT ".")
(ID "env_exe")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "relative_symlinks_ok")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT 493)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "subdir")
(PUNCT "=")
(LIT "DLLs")
(NEWLINE)
(ID "include")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "include_binary")
(NEWLINE)
(ID "files")
(PUNCT "=")
(PUNCT "[")
(ID "f")
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "dirname")
(PUNCT ")")
(KEYWORD if)
(ID "include")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirname")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(ID "dst")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "binpath")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dst")
(PUNCT "!=")
(ID "context")
(PUNCT ".")
(ID "env_exe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "copier")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dirname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirname")
(PUNCT ",")
(ID "subdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "dirname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "files")
(PUNCT "=")
(PUNCT "[")
(ID "f")
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "dirname")
(PUNCT ")")
(KEYWORD if)
(ID "include")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirname")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(ID "dst")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "binpath")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(ID "copier")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "root")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "files")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "walk")
(PUNCT "(")
(ID "context")
(PUNCT ".")
(ID "python_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "init.tcl")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tcldir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "tcldir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "context")
(PUNCT ".")
(ID "env_dir")
(PUNCT ",")
(LIT "Lib")
(PUNCT ",")
(ID "tcldir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "tcldir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "tcldir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "src")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(LIT "init.tcl")
(PUNCT ")")
(NEWLINE)
(ID "dst")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "tcldir")
(PUNCT ",")
(LIT "init.tcl")
(PUNCT ")")
(NEWLINE)
(ID "shutil")
(PUNCT ".")
(ID "copyfile")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_setup_pip")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Installs or upgrades pip in a virtual environment")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(PUNCT "[")
(ID "context")
(PUNCT ".")
(ID "env_exe")
(PUNCT ",")
(LIT "-Im")
(PUNCT ",")
(LIT "ensurepip")
(PUNCT ",")
(LIT "--upgrade")
(PUNCT ",")
(LIT "--default-pip")
(PUNCT "]")
(NEWLINE)
(ID "subprocess")
(PUNCT ".")
(ID "check_output")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "STDOUT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setup_scripts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set up scripts into the created environment from a directory.\n\n        This method installs the default scripts into the environment\n        being created. You can prevent the default installation by overriding\n        this method if you really need to, or if you need to specify\n        a different location for the scripts to install. By default, the\n        'scripts' directory in the venv package is used as the source of\n        scripts to install.\n        ")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "scripts")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "install_scripts")
(PUNCT "(")
(ID "context")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "post_setup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Hook for post-setup modification of the venv. Subclasses may install\n        additional packages or scripts here, add activation shell scripts, etc.\n\n        :param context: The information for the environment creation request\n                        being processed.\n        ")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "replace_variables")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Replace variable placeholders in script text with context-specific\n        variables.\n\n        Return the text passed in , but with variables replaced.\n\n        :param text: The text in which to replace placeholder variables.\n        :param context: The information for the environment creation request\n                        being processed.\n        ")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "__VENV_DIR__")
(PUNCT ",")
(ID "context")
(PUNCT ".")
(ID "env_dir")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "__VENV_NAME__")
(PUNCT ",")
(ID "context")
(PUNCT ".")
(ID "env_name")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "__VENV_PROMPT__")
(PUNCT ",")
(ID "context")
(PUNCT ".")
(ID "prompt")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "__VENV_BIN_NAME__")
(PUNCT ",")
(ID "context")
(PUNCT ".")
(ID "bin_name")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "__VENV_PYTHON__")
(PUNCT ",")
(ID "context")
(PUNCT ".")
(ID "env_exe")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "text")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "install_scripts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Install scripts into the created environment from a directory.\n\n        :param context: The information for the environment creation request\n                        being processed.\n        :param path:    Absolute pathname of a directory containing script.\n                        Scripts in the 'common' subdirectory of this directory,\n                        and those in the directory named for the platform\n                        being run on, are installed in the created environment.\n                        Placeholder variables are replaced with environment-\n                        specific values.\n        ")
(NEWLINE)
(ID "binpath")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "bin_path")
(NEWLINE)
(ID "plen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "root")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "files")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "walk")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "root")
(PUNCT "==")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "dirs")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "d")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "common")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirs")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "srcfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(ID "suffix")
(PUNCT "=")
(ID "root")
(PUNCT "[")
(ID "plen")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dstdir")
(PUNCT "=")
(ID "binpath")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dstdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "binpath")
(PUNCT ",")
(PUNCT "*")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "dstdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "dstdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dstfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dstdir")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "srcfile")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "srcfile")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT "wb")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT "w")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "replace_variables")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "unable to copy script %r, ")
(LIT "may be binary: %s")
(PUNCT ",")
(ID "srcfile")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "dstfile")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "shutil")
(PUNCT ".")
(ID "copymode")
(PUNCT "(")
(ID "srcfile")
(PUNCT ",")
(ID "dstfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "create")
(PUNCT "(")
(ID "env_dir")
(PUNCT ",")
(ID "system_site_packages")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "clear")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "symlinks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "with_pip")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Create a virtual environment in a directory.\n\n    By default, makes the system (global) site-packages dir *un*available to\n    the created environment, and uses copying rather than symlinking for files\n    obtained from the source Python installation.\n\n    :param env_dir: The target directory to create an environment in.\n    :param system_site_packages: If True, the system (global) site-packages\n                                 dir is available to the environment.\n    :param clear: If True and the target directory exists, it is deleted.\n                  Otherwise, if the target directory exists, an error is\n                  raised.\n    :param symlinks: If True, attempt to symlink rather than copy files into\n                     virtual environment.\n    :param with_pip: If True, ensure pip is installed in the virtual\n                     environment\n    ")
(NEWLINE)
(ID "builder")
(PUNCT "=")
(ID "EnvBuilder")
(PUNCT "(")
(ID "system_site_packages")
(PUNCT "=")
(ID "system_site_packages")
(PUNCT ",")
(ID "clear")
(PUNCT "=")
(ID "clear")
(PUNCT ",")
(ID "symlinks")
(PUNCT "=")
(ID "symlinks")
(PUNCT ",")
(ID "with_pip")
(PUNCT "=")
(ID "with_pip")
(PUNCT ")")
(NEWLINE)
(ID "builder")
(PUNCT ".")
(ID "create")
(PUNCT "(")
(ID "env_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT "<")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 3)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compatible")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "base_prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compatible")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "compatible")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "This script is only for use with Python >= 3.3")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(ID "prog")
(PUNCT "=")
(ID "__name__")
(PUNCT ",")
(ID "description")
(PUNCT "=")
(LIT "Creates virtual Python ")
(LIT "environments in one or ")
(LIT "more target ")
(LIT "directories.")
(PUNCT ",")
(ID "epilog")
(PUNCT "=")
(LIT "Once an environment has been ")
(LIT "created, you may wish to ")
(LIT "activate it, e.g. by ")
(LIT "sourcing an activate script ")
(LIT "in its bin directory.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "dirs")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "ENV_DIR")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "+")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "A directory to create the environment in.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--system-site-packages")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "system_site")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Give the virtual environment access to the ")
(LIT "system site-packages dir.")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "use_symlinks")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "use_symlinks")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "group")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "add_mutually_exclusive_group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--symlinks")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "use_symlinks")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "symlinks")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Try to use symlinks rather than copies, ")
(LIT "when symlinks are not the default for ")
(LIT "the platform.")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--copies")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD not)
(ID "use_symlinks")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_false")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "symlinks")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Try to use copies rather than symlinks, ")
(LIT "even when symlinks are the default for ")
(LIT "the platform.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--clear")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "clear")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Delete the contents of the ")
(LIT "environment directory if it ")
(LIT "already exists, before ")
(LIT "environment creation.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--upgrade")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "upgrade")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Upgrade the environment ")
(LIT "directory to use this version ")
(LIT "of Python, assuming Python ")
(LIT "has been upgraded in-place.")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--without-pip")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "with_pip")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_false")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Skips installing or upgrading pip in the ")
(LIT "virtual environment (pip is bootstrapped ")
(LIT "by default)")
(PUNCT ")")
(NEWLINE)
(ID "options")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "options")
(PUNCT ".")
(ID "upgrade")
(KEYWORD and)
(ID "options")
(PUNCT ".")
(ID "clear")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "you cannot supply --upgrade and --clear together.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "builder")
(PUNCT "=")
(ID "EnvBuilder")
(PUNCT "(")
(ID "system_site_packages")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "system_site")
(PUNCT ",")
(ID "clear")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "clear")
(PUNCT ",")
(ID "symlinks")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "symlinks")
(PUNCT ",")
(ID "upgrade")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "upgrade")
(PUNCT ",")
(ID "with_pip")
(PUNCT "=")
(ID "options")
(PUNCT ".")
(ID "with_pip")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "options")
(PUNCT ".")
(ID "dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builder")
(PUNCT ".")
(ID "create")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rc")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "rc")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Error: %s")
(PUNCT "%")
(ID "e")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "rc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
