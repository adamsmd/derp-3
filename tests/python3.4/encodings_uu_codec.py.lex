(LIT "Python 'uu_codec' Codec - UU content transfer encoding.\n\nThis codec de/encodes from bytes to bytes.\n\nWritten by Marc-Andre Lemburg (mal@lemburg.com). Some details were\nadapted from uu.py which was written by Lance Ellinghouse and\nmodified by Jack Jansen and Fredrik Lundh.\n")
(NEWLINE)
(KEYWORD import)
(ID "codecs")
(NEWLINE)
(KEYWORD import)
(ID "binascii")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "BytesIO")
(NEWLINE)
(KEYWORD def)
(ID "uu_encode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(LIT "<data>")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 438)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "errors")
(PUNCT "==")
(LIT "strict")
(NEWLINE)
(ID "infile")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(ID "outfile")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "read")
(PUNCT "=")
(ID "infile")
(PUNCT ".")
(ID "read")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "outfile")
(PUNCT ".")
(ID "write")
(NEWLINE)
(ID "write")
(PUNCT "(")
(PUNCT "(")
(LIT "begin %o %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "mode")
(PUNCT "&")
(LIT 511)
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "chunk")
(PUNCT "=")
(ID "read")
(PUNCT "(")
(LIT 45)
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "binascii")
(PUNCT ".")
(ID "b2a_uu")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "chunk")
(PUNCT "=")
(ID "read")
(PUNCT "(")
(LIT 45)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT #" \nend\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "outfile")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "uu_decode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "errors")
(PUNCT "==")
(LIT "strict")
(NEWLINE)
(ID "infile")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(ID "outfile")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "readline")
(PUNCT "=")
(ID "infile")
(PUNCT ".")
(ID "readline")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "outfile")
(PUNCT ".")
(ID "write")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Missing \"begin\" line in input data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "==")
(LIT #"begin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(KEYWORD or)
(ID "s")
(PUNCT "==")
(LIT #"end\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "binascii")
(PUNCT ".")
(ID "a2b_uu")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "binascii")
(PUNCT ".")
(ID "Error")
(KEYWORD as)
(ID "v")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nbytes")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 32)
(PUNCT ")")
(PUNCT "&")
(LIT 63)
(PUNCT ")")
(PUNCT "*")
(LIT 4)
(PUNCT "+")
(LIT 5)
(PUNCT ")")
(PUNCT "//")
(LIT 3)
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "binascii")
(PUNCT ".")
(ID "a2b_uu")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "nbytes")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Truncated input data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "outfile")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Codec")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "Codec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "uu_encode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "uu_decode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalEncoder")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "IncrementalEncoder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "uu_encode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalDecoder")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "IncrementalDecoder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "uu_decode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StreamWriter")
(PUNCT "(")
(ID "Codec")
(PUNCT ",")
(ID "codecs")
(PUNCT ".")
(ID "StreamWriter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charbuffertype")
(PUNCT "=")
(ID "bytes")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "StreamReader")
(PUNCT "(")
(ID "Codec")
(PUNCT ",")
(ID "codecs")
(PUNCT ".")
(ID "StreamReader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charbuffertype")
(PUNCT "=")
(ID "bytes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getregentry")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "codecs")
(PUNCT ".")
(ID "CodecInfo")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(LIT "uu")
(PUNCT ",")
(ID "encode")
(PUNCT "=")
(ID "uu_encode")
(PUNCT ",")
(ID "decode")
(PUNCT "=")
(ID "uu_decode")
(PUNCT ",")
(ID "incrementalencoder")
(PUNCT "=")
(ID "IncrementalEncoder")
(PUNCT ",")
(ID "incrementaldecoder")
(PUNCT "=")
(ID "IncrementalDecoder")
(PUNCT ",")
(ID "streamreader")
(PUNCT "=")
(ID "StreamReader")
(PUNCT ",")
(ID "streamwriter")
(PUNCT "=")
(ID "StreamWriter")
(PUNCT ",")
(ID "_is_text_encoding")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
