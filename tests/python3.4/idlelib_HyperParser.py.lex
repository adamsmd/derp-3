(LIT "Provide advanced parsing abilities for ParenMatch and other extensions.\n\nHyperParser uses PyParser.  PyParser mostly gives information on the\nproper indentation of code.  HyperParser gives additional information on\nthe structure of code.\n")
(NEWLINE)
(KEYWORD import)
(ID "string")
(NEWLINE)
(KEYWORD from)
(ID "keyword")
(KEYWORD import)
(ID "iskeyword")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "PyParse")
(NEWLINE)
(ID "_ASCII_ID_CHARS")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(ID "string")
(PUNCT ".")
(ID "ascii_letters")
(PUNCT "+")
(ID "string")
(PUNCT ".")
(ID "digits")
(PUNCT "+")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "_ASCII_ID_FIRST_CHARS")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(ID "string")
(PUNCT ".")
(ID "ascii_letters")
(PUNCT "+")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "_IS_ASCII_ID_CHAR")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "chr")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD in)
(ID "_ASCII_ID_CHARS")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 128)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "_IS_ASCII_ID_FIRST_CHAR")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "chr")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD in)
(ID "_ASCII_ID_FIRST_CHARS")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 128)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "HyperParser")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "editwin")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "To initialize, analyze the surroundings of the given index.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT "=")
(ID "editwin")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT "=")
(ID "editwin")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "PyParse")
(PUNCT ".")
(ID "Parser")
(PUNCT "(")
(ID "editwin")
(PUNCT ".")
(ID "indentwidth")
(PUNCT ",")
(ID "editwin")
(PUNCT ".")
(ID "tabwidth")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "index2line")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lno")
(PUNCT "=")
(ID "index2line")
(PUNCT "(")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "editwin")
(PUNCT ".")
(ID "context_use_ps1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "context")
(KEYWORD in)
(ID "editwin")
(PUNCT ".")
(ID "num_context_lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startat")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "lno")
(PUNCT "-")
(ID "context")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "startatindex")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "startat")
(PUNCT ")")
(PUNCT "+")
(LIT ".0")
(NEWLINE)
(ID "stopatindex")
(PUNCT "=")
(LIT "%d.end")
(PUNCT "%")
(ID "lno")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_str")
(PUNCT "(")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "startatindex")
(PUNCT ",")
(ID "stopatindex")
(PUNCT ")")
(PUNCT "+")
(LIT " \n")
(PUNCT ")")
(NEWLINE)
(ID "bod")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "find_good_parse_start")
(PUNCT "(")
(ID "editwin")
(PUNCT ".")
(ID "_build_char_in_string_func")
(PUNCT "(")
(ID "startatindex")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "bod")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "startat")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "parser")
(PUNCT ".")
(ID "set_lo")
(PUNCT "(")
(ID "bod")
(KEYWORD or)
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "tag_prevrange")
(PUNCT "(")
(LIT "console")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startatindex")
(PUNCT "=")
(ID "r")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startatindex")
(PUNCT "=")
(LIT "1.0")
(NEWLINE)
(DEDENT)
(ID "stopatindex")
(PUNCT "=")
(LIT "%d.end")
(PUNCT "%")
(ID "lno")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_str")
(PUNCT "(")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "startatindex")
(PUNCT ",")
(ID "stopatindex")
(PUNCT ")")
(PUNCT "+")
(LIT " \n")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_lo")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "str")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stopatindex")
(PUNCT "=")
(ID "stopatindex")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "get_last_stmt_bracketing")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "isopener")
(PUNCT "=")
(PUNCT "[")
(ID "i")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_index")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the index to which the functions relate.\n\n        The index must be in the same statement.\n        ")
(NEWLINE)
(ID "indexinrawtext")
(PUNCT "=")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stopatindex")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "indexinrawtext")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Index %s precedes the analyzed statement")
(PUNCT "%")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "indexinrawtext")
(PUNCT "=")
(ID "indexinrawtext")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "indexinrawtext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "indexinrawtext")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "isopener")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_in_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Is the index given to the HyperParser in a string?")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "isopener")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "]")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(KEYWORD in)
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "'")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_in_code")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Is the index given to the HyperParser in normal code?")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "isopener")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "]")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "#")
(PUNCT ",")
(LIT "\"")
(PUNCT ",")
(LIT "'")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_surrounding_brackets")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "openers")
(PUNCT "=")
(LIT "([{")
(PUNCT ",")
(ID "mustclose")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return bracket indexes or None.\n\n        If the index given to the HyperParser is surrounded by a\n        bracket defined in openers (or at least has one before it),\n        return the indices of the opening bracket and the closing\n        bracket (or the end of line, whichever comes first).\n\n        If it is not surrounded by brackets, or the end of line comes\n        before the closing bracket and mustclose is True, returns None.\n        ")
(NEWLINE)
(ID "bracketinglevel")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "before")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(NEWLINE)
(KEYWORD while)
(PUNCT "(")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "isopener")
(PUNCT "[")
(ID "before")
(PUNCT "]")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "before")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "openers")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "before")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ">")
(ID "bracketinglevel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "before")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "before")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "bracketinglevel")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "bracketinglevel")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "before")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "after")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(PUNCT "(")
(ID "after")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "after")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ">=")
(ID "bracketinglevel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "after")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "beforeindex")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "%s-%dc")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stopatindex")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "before")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "after")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "after")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ">")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mustclose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "afterindex")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stopatindex")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "afterindex")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "%s-%dc")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stopatindex")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rawtext")
(PUNCT ")")
(PUNCT "-")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(PUNCT "[")
(ID "after")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "beforeindex")
(PUNCT ",")
(ID "afterindex")
(NEWLINE)
(DEDENT)
(ID "_ID_KEYWORDS")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(PUNCT "{")
(LIT "True")
(PUNCT ",")
(LIT "False")
(PUNCT ",")
(LIT "None")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_eat_identifier")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "str")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Given a string and pos, return the number of chars in the\n        identifier which ends at pos, or 0 if there is no such one.\n\n        This ignores non-identifier eywords are not identifiers.\n        ")
(NEWLINE)
(ID "is_ascii_id_char")
(PUNCT "=")
(ID "_IS_ASCII_ID_CHAR")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT ">")
(ID "limit")
(KEYWORD and)
(PUNCT "(")
(ID "ord")
(PUNCT "(")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "<")
(LIT 128)
(KEYWORD and)
(ID "is_ascii_id_char")
(PUNCT "[")
(ID "ord")
(PUNCT "(")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(ID "limit")
(KEYWORD and)
(ID "ord")
(PUNCT "(")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ">=")
(LIT 128)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "i")
(PUNCT "-")
(LIT 4)
(PUNCT ">=")
(ID "limit")
(KEYWORD and)
(PUNCT "(")
(LIT "a")
(PUNCT "+")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 4)
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 4)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT "-")
(LIT 2)
(PUNCT ">=")
(ID "limit")
(KEYWORD and)
(PUNCT "(")
(LIT "a")
(PUNCT "+")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT ">=")
(ID "limit")
(KEYWORD and)
(PUNCT "(")
(LIT "a")
(PUNCT "+")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "i")
(PUNCT "<")
(ID "pos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_IS_ASCII_ID_FIRST_CHAR")
(PUNCT "[")
(ID "ord")
(PUNCT "(")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(ID "pos")
(KEYWORD and)
(PUNCT "(")
(ID "iskeyword")
(PUNCT "(")
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(KEYWORD and)
(ID "str")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "cls")
(PUNCT ".")
(ID "_ID_KEYWORDS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pos")
(PUNCT "-")
(ID "i")
(NEWLINE)
(DEDENT)
(ID "_whitespace_chars")
(PUNCT "=")
(LIT " \t\n\\")
(NEWLINE)
(KEYWORD def)
(ID "get_expression")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a string with the Python expression which ends at the\n        given index, which is empty if there is no real one.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_in_code")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "get_expression should only be called")
(LIT "if index is inside a code.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rawtext")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rawtext")
(NEWLINE)
(ID "bracketing")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "bracketing")
(NEWLINE)
(ID "brck_index")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "indexbracket")
(NEWLINE)
(ID "brck_limit")
(PUNCT "=")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "indexinrawtext")
(NEWLINE)
(ID "last_identifier_pos")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(ID "postdot_phase")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pos")
(PUNCT ">")
(ID "brck_limit")
(KEYWORD and)
(ID "rawtext")
(PUNCT "[")
(ID "pos")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_whitespace_chars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(KEYWORD not)
(ID "postdot_phase")
(KEYWORD and)
(ID "pos")
(PUNCT ">")
(ID "brck_limit")
(KEYWORD and)
(ID "rawtext")
(PUNCT "[")
(ID "pos")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(ID "postdot_phase")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "pos")
(PUNCT "==")
(ID "brck_limit")
(KEYWORD and)
(ID "brck_index")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "rawtext")
(PUNCT "[")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "brck_index")
(PUNCT "-=")
(LIT 2)
(NEWLINE)
(ID "brck_limit")
(PUNCT "=")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "postdot_phase")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_eat_identifier")
(PUNCT "(")
(ID "rawtext")
(PUNCT ",")
(ID "brck_limit")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ret")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "pos")
(PUNCT "-")
(ID "ret")
(NEWLINE)
(ID "last_identifier_pos")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(ID "postdot_phase")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "pos")
(PUNCT "==")
(ID "brck_limit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "level")
(PUNCT "=")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "brck_index")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ">")
(ID "level")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "brck_index")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "brck_limit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "=")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "brck_index")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(ID "brck_limit")
(PUNCT "=")
(ID "bracketing")
(PUNCT "[")
(ID "brck_index")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "last_identifier_pos")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(KEYWORD if)
(ID "rawtext")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(LIT "([")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "rawtext")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(LIT "'\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "pos")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "rawtext")
(PUNCT "[")
(ID "pos")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(LIT "rRbBuU")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "last_identifier_pos")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "rawtext")
(PUNCT "[")
(ID "last_identifier_pos")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "indexinrawtext")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "unittest")
(NEWLINE)
(ID "unittest")
(PUNCT ".")
(ID "main")
(PUNCT "(")
(LIT "idlelib.idle_test.test_hyperparser")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
