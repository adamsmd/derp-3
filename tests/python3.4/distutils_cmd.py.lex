(LIT "distutils.cmd\n\nProvides the Command class, the base class for the command classes\nin the distutils.command package.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsOptionError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "util")
(PUNCT ",")
(ID "dir_util")
(PUNCT ",")
(ID "file_util")
(PUNCT ",")
(ID "archive_util")
(PUNCT ",")
(ID "dep_util")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD class)
(ID "Command")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for defining command classes, the \"worker bees\"\n    of the Distutils.  A useful analogy for command classes is to think of\n    them as subroutines with local variables called \"options\".  The options\n    are \"declared\" in 'initialize_options()' and \"defined\" (given their\n    final values, aka \"finalized\") in 'finalize_options()', both of which\n    must be defined by every command class.  The distinction between the\n    two is necessary because option values might come from the outside\n    world (command line, config file, ...), and any options dependent on\n    other options must be computed *after* these outside influences have\n    been processed -- hence 'finalize_options()'.  The \"body\" of the\n    subroutine, where it does all its work based on the values of its\n    options, is the 'run()' method, which must also be implemented by every\n    command class.\n    ")
(NEWLINE)
(ID "sub_commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and initialize a new Command object.  Most importantly,\n        invokes the 'initialize_options()' method, which is the real\n        initializer and depends on the actual command being\n        instantiated.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "dist")
(KEYWORD import)
(ID "Distribution")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "dist")
(PUNCT ",")
(ID "Distribution")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "dist must be a Distribution instance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__class__")
(KEYWORD is)
(ID "Command")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Command is an abstract class")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT "=")
(ID "dist")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "initialize_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dry_run")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(ID "dist")
(PUNCT ".")
(ID "verbose")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "help")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "finalized")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "attr")
(PUNCT "==")
(LIT "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "myval")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_")
(PUNCT "+")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "myval")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "myval")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "ensure_finalized")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "finalized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "finalize_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "finalized")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set default values for all the options that this command\n        supports.  Note that these defaults may be overridden by other\n        commands, by the setup script, by config files, or by the\n        command-line.  Thus, this is not the place to code dependencies\n        between options; generally, 'initialize_options()' implementations\n        are just a bunch of \"self.foo = None\" assignments.\n\n        This method must be implemented by all command classes.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "abstract method -- subclass %s must override")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set final values for all the options that this command supports.\n        This is always called as late as possible, ie.  after any option\n        assignments from the command-line or from other commands have been\n        done.  Thus, this is the place to code option dependencies: if\n        'foo' depends on 'bar', then it is safe to set 'foo' from 'bar' as\n        long as 'foo' still has the same value it was assigned in\n        'initialize_options()'.\n\n        This method must be implemented by all command classes.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "abstract method -- subclass %s must override")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dump_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "fancy_getopt")
(KEYWORD import)
(ID "longopt_xlate")
(NEWLINE)
(KEYWORD if)
(ID "header")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header")
(PUNCT "=")
(LIT "command options for '%s':")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_command_name")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(ID "header")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(ID "indent")
(PUNCT "=")
(ID "indent")
(PUNCT "+")
(LIT "  ")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "_")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "user_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "option")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "longopt_xlate")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "=")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "%s = %s")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A command's raison d'etre: carry out the action it exists to\n        perform, controlled by the options initialized in\n        'initialize_options()', customized by other commands, the setup\n        script, the command-line, and config files, and finalized in\n        'finalize_options()'.  All terminal output and filesystem\n        interaction should be done by 'run()'.\n\n        This method must be implemented by all command classes.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "abstract method -- subclass %s must override")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "announce")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If the current verbosity level is of greater than or equal to\n        'level' print 'msg' to stdout.\n        ")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "debug_print")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print 'msg' to stdout if the global DEBUG (taken from the\n        DISTUTILS_DEBUG environment variable) flag is true.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "debug")
(KEYWORD import)
(ID "DEBUG")
(NEWLINE)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ensure_stringlike")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(LIT "'%s' must be a %s (got `%s`)")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ensure_string")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensure that 'option' is a string; if not defined, set it to\n        'default'.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ensure_stringlike")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(LIT "string")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ensure_string_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensure that 'option' is a list of strings.  If 'option' is\n        currently a string, we split it either on /,\\s*/ or /\\s+/, so\n        \"foo bar baz\", \"foo,bar,baz\", and \"foo,   bar baz\" all become\n        [\"foo\", \"bar\", \"baz\"].\n        ")
(NEWLINE)
(ID "val")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",\\s*|\\s+")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(ID "all")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(LIT "'%s' must be a list of strings (got %r)")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ensure_tested_string")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "tester")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "error_fmt")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_ensure_stringlike")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "tester")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(PUNCT "(")
(LIT "error in '%s' option: ")
(PUNCT "+")
(ID "error_fmt")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "ensure_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensure that 'option' is the name of an existing file.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ensure_tested_string")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT ",")
(LIT "filename")
(PUNCT ",")
(LIT "'%s' does not exist or is not a file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ensure_dirname")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ensure_tested_string")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT ",")
(LIT "directory name")
(PUNCT ",")
(LIT "'%s' does not exist or is not a directory")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_command_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "command_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "command_name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_undefined_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "src_cmd")
(PUNCT ",")
(PUNCT "*")
(ID "option_pairs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the values of any \"undefined\" options from corresponding\n        option values in some other command object.  \"Undefined\" here means\n        \"is None\", which is the convention used to indicate that an option\n        has not been changed between 'initialize_options()' and\n        'finalize_options()'.  Usually called from 'finalize_options()' for\n        options that depend on some other command rather than another\n        option of the same command.  'src_cmd' is the other command from\n        which option values will be taken (a command object will be created\n        for it if necessary); the remaining arguments are\n        '(src_option,dst_option)' tuples which mean \"take the value of\n        'src_option' in the 'src_cmd' command object, and copy it to\n        'dst_option' in the current command object\".\n        ")
(NEWLINE)
(ID "src_cmd_obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_command_obj")
(PUNCT "(")
(ID "src_cmd")
(PUNCT ")")
(NEWLINE)
(ID "src_cmd_obj")
(PUNCT ".")
(ID "ensure_finalized")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "src_option")
(PUNCT ",")
(ID "dst_option")
(PUNCT ")")
(KEYWORD in)
(ID "option_pairs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dst_option")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dst_option")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "src_cmd_obj")
(PUNCT ",")
(ID "src_option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_finalized_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "create")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wrapper around Distribution's 'get_command_obj()' method: find\n        (create if necessary and 'create' is true) the command object for\n        'command', call its 'ensure_finalized()' method, and return the\n        finalized command object.\n        ")
(NEWLINE)
(ID "cmd_obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_command_obj")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "create")
(PUNCT ")")
(NEWLINE)
(ID "cmd_obj")
(PUNCT ".")
(ID "ensure_finalized")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "cmd_obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reinitialize_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "reinit_subcommands")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "reinitialize_command")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "reinit_subcommands")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run some other command: uses the 'run_command()' method of\n        Distribution, which creates and finalizes the command object if\n        necessary and then invokes its 'run()' method.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "run_command")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_sub_commands")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Determine the sub-commands that are relevant in the current\n        distribution (ie., that need to be run).  This is based on the\n        'sub_commands' class attribute: each tuple in that list may include\n        a method that we call to determine if the subcommand needs to be\n        run for the current distribution.  Return a list of command names.\n        ")
(NEWLINE)
(ID "commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "cmd_name")
(PUNCT ",")
(ID "method")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "sub_commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "method")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "method")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "commands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cmd_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "commands")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "warn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "warning: %s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_command_name")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "execute")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "util")
(PUNCT ".")
(ID "execute")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mkpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 511)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir_util")
(PUNCT ".")
(ID "mkpath")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "preserve_times")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "link")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy a file respecting verbose, dry-run and force flags.  (The\n        former two default to whatever is in the Distribution object, and\n        the latter defaults to false for commands that don't define it.)")
(NEWLINE)
(KEYWORD return)
(ID "file_util")
(PUNCT ".")
(ID "copy_file")
(PUNCT "(")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT ",")
(ID "preserve_times")
(PUNCT ",")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT ",")
(ID "link")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy_tree")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "preserve_times")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "preserve_symlinks")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy an entire directory tree respecting verbose, dry-run,\n        and force flags.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "dir_util")
(PUNCT ".")
(ID "copy_tree")
(PUNCT "(")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT ",")
(ID "preserve_times")
(PUNCT ",")
(ID "preserve_symlinks")
(PUNCT ",")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "move_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move a file respecting dry-run flag.")
(NEWLINE)
(KEYWORD return)
(ID "file_util")
(PUNCT ".")
(ID "move_file")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "spawn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Spawn an external command respecting dry-run flag.")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "spawn")
(KEYWORD import)
(ID "spawn")
(NEWLINE)
(ID "spawn")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "search_path")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_archive")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "base_name")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(ID "root_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "base_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "owner")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "group")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "archive_util")
(PUNCT ".")
(ID "make_archive")
(PUNCT "(")
(ID "base_name")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(ID "root_dir")
(PUNCT ",")
(ID "base_dir")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ",")
(ID "owner")
(PUNCT "=")
(ID "owner")
(PUNCT ",")
(ID "group")
(PUNCT "=")
(ID "group")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "infiles")
(PUNCT ",")
(ID "outfile")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "exec_msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "skip_msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Special case of 'execute()' for operations that process one or\n        more input files and generate one output file.  Works just like\n        'execute()', except the operation is skipped and a different\n        message printed if 'outfile' already exists and is newer than all\n        files listed in 'infiles'.  If the command defined 'self.force',\n        and it is true, then the command is unconditionally run -- does no\n        timestamp checks.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "skip_msg")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip_msg")
(PUNCT "=")
(LIT "skipping %s (inputs unchanged)")
(PUNCT "%")
(ID "outfile")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "infiles")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "infiles")
(PUNCT "=")
(PUNCT "(")
(ID "infiles")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "infiles")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "'infiles' must be a string, or a list or tuple of strings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "exec_msg")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec_msg")
(PUNCT "=")
(LIT "generating %s from %s")
(PUNCT "%")
(PUNCT "(")
(ID "outfile")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "infiles")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "force")
(KEYWORD or)
(ID "dep_util")
(PUNCT ".")
(ID "newer_group")
(PUNCT "(")
(ID "infiles")
(PUNCT ",")
(ID "outfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "execute")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "exec_msg")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(ID "skip_msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "install_misc")
(PUNCT "(")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Common base class for installing some files in a subdirectory.\n    Currently used by install_data and install_scripts.\n    ")
(NEWLINE)
(ID "user_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "install-dir=")
(PUNCT ",")
(LIT "d")
(PUNCT ",")
(LIT "directory to install the files to")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "install_dir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "outfiles")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_install_dir_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dirname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_undefined_options")
(PUNCT "(")
(LIT "install")
(PUNCT ",")
(PUNCT "(")
(ID "dirname")
(PUNCT ",")
(LIT "install_dir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_copy_files")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filelist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "outfiles")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "filelist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "mkpath")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "install_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "filelist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "copy_file")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "install_dir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "outfiles")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "install_dir")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_outputs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "outfiles")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
