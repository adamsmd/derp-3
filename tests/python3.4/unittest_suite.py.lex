(LIT "TestSuite")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "case")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "util")
(NEWLINE)
(ID "__unittest")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD def)
(ID "_call_if_exists")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(KEYWORD lambda)
(PUNCT ":")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "func")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BaseTestSuite")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A simple test suite that doesn't provide class or module shared fixtures.\n    ")
(NEWLINE)
(ID "_cleanup")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tests")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tests")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_removed_tests")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addTests")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s tests=%s>")
(PUNCT "%")
(PUNCT "(")
(ID "util")
(PUNCT ".")
(ID "strclass")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ",")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "==")
(ID "list")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "countTestCases")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cases")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_removed_tests")
(NEWLINE)
(KEYWORD for)
(ID "test")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "test")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cases")
(PUNCT "+=")
(ID "test")
(PUNCT ".")
(ID "countTestCases")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cases")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addTest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "{} is not callable")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(PUNCT "(")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ",")
(ID "TestSuite")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "TestCases and TestSuites must be instantiated ")
(LIT "before passing them to addTest()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tests")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addTests")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tests")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "tests")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "tests must be an iterable of tests, not a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "test")
(KEYWORD in)
(ID "tests")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addTest")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "index")
(PUNCT ",")
(ID "test")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "result")
(PUNCT ".")
(ID "shouldStop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "test")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_cleanup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_removeTestAtIndex")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_removeTestAtIndex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop holding a reference to the TestCase at index.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tests")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(LIT "countTestCases")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_removed_tests")
(PUNCT "+=")
(ID "test")
(PUNCT ".")
(ID "countTestCases")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tests")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "debug")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the tests without collecting errors in a TestResult")
(NEWLINE)
(KEYWORD for)
(ID "test")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TestSuite")
(PUNCT "(")
(ID "BaseTestSuite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A test suite is a composite test consisting of a number of TestCases.\n\n    For use, create an instance of TestSuite, then add test case instances.\n    When all tests have been added, the suite can be passed to a test\n    runner, such as TextTestRunner. It will run the individual test cases\n    in the order in which they were added, aggregating the results. When\n    subclassing, do not forget to call the base class constructor.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "topLevel")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_testRunEntered")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "_testRunEntered")
(PUNCT "=")
(ID "topLevel")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "index")
(PUNCT ",")
(ID "test")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "result")
(PUNCT ".")
(ID "shouldStop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_isnotsuite")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tearDownPreviousClass")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handleModuleFixture")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handleClassSetUp")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "_previousTestClass")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "test")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(LIT "_classSetupFailed")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_moduleSetUpFailed")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_cleanup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_removeTestAtIndex")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "topLevel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tearDownPreviousClass")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handleModuleTearDown")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "_testRunEntered")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "debug")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the tests without collecting errors in a TestResult")
(NEWLINE)
(ID "debug")
(PUNCT "=")
(ID "_DebugResult")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(ID "debug")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_handleClassSetUp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "previousClass")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_previousTestClass")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "currentClass")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(KEYWORD if)
(ID "currentClass")
(PUNCT "==")
(ID "previousClass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(PUNCT ".")
(ID "_moduleSetUpFailed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "currentClass")
(PUNCT ",")
(LIT "__unittest_skip__")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "currentClass")
(PUNCT ".")
(ID "_classSetupFailed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "setUpClass")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "currentClass")
(PUNCT ",")
(LIT "setUpClass")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "setUpClass")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_setupStdout")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setUpClass")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "_DebugResult")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "currentClass")
(PUNCT ".")
(ID "_classSetupFailed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "className")
(PUNCT "=")
(ID "util")
(PUNCT ".")
(ID "strclass")
(PUNCT "(")
(ID "currentClass")
(PUNCT ")")
(NEWLINE)
(ID "errorName")
(PUNCT "=")
(LIT "setUpClass (%s)")
(PUNCT "%")
(ID "className")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_addClassOrModuleLevelException")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "errorName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_restoreStdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_previous_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "previousModule")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "previousClass")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_previousTestClass")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "previousClass")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "previousModule")
(PUNCT "=")
(ID "previousClass")
(PUNCT ".")
(ID "__module__")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "previousModule")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_handleModuleFixture")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "previousModule")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_previous_module")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "currentModule")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__module__")
(NEWLINE)
(KEYWORD if)
(ID "currentModule")
(PUNCT "==")
(ID "previousModule")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_handleModuleTearDown")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "_moduleSetUpFailed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "currentModule")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "setUpModule")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "setUpModule")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "setUpModule")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_setupStdout")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setUpModule")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "_DebugResult")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "_moduleSetUpFailed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "errorName")
(PUNCT "=")
(LIT "setUpModule (%s)")
(PUNCT "%")
(ID "currentModule")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_addClassOrModuleLevelException")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "errorName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_restoreStdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_addClassOrModuleLevelException")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "errorName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "error")
(PUNCT "=")
(ID "_ErrorHolder")
(PUNCT "(")
(ID "errorName")
(PUNCT ")")
(NEWLINE)
(ID "addSkip")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "addSkip")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "addSkip")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "exception")
(PUNCT ",")
(ID "case")
(PUNCT ".")
(ID "SkipTest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addSkip")
(PUNCT "(")
(ID "error")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "exception")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "addError")
(PUNCT "(")
(ID "error")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_handleModuleTearDown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "previousModule")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_previous_module")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "previousModule")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(PUNCT ".")
(ID "_moduleSetUpFailed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "previousModule")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "tearDownModule")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "tearDownModule")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tearDownModule")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_setupStdout")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tearDownModule")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "_DebugResult")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "errorName")
(PUNCT "=")
(LIT "tearDownModule (%s)")
(PUNCT "%")
(ID "previousModule")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_addClassOrModuleLevelException")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "errorName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_restoreStdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_tearDownPreviousClass")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "test")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "previousClass")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_previousTestClass")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "currentClass")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(KEYWORD if)
(ID "currentClass")
(PUNCT "==")
(ID "previousClass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "previousClass")
(PUNCT ",")
(LIT "_classSetupFailed")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_moduleSetUpFailed")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "previousClass")
(PUNCT ",")
(LIT "__unittest_skip__")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "tearDownClass")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "previousClass")
(PUNCT ",")
(LIT "tearDownClass")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tearDownClass")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_setupStdout")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tearDownClass")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "_DebugResult")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "className")
(PUNCT "=")
(ID "util")
(PUNCT ".")
(ID "strclass")
(PUNCT "(")
(ID "previousClass")
(PUNCT ")")
(NEWLINE)
(ID "errorName")
(PUNCT "=")
(LIT "tearDownClass (%s)")
(PUNCT "%")
(ID "className")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_addClassOrModuleLevelException")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "errorName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_if_exists")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(LIT "_restoreStdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ErrorHolder")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Placeholder for a TestCase inside a result. As far as a TestResult\n    is concerned, this looks exactly like a unit test. Used to insert\n    arbitrary errors into a test suite run.\n    ")
(NEWLINE)
(ID "failureException")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT "=")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shortDescription")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<ErrorHolder description=%r>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "id")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "countTestCases")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_isnotsuite")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A crude way to tell apart testcases and suites with duck-typing")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "iter")
(PUNCT "(")
(ID "test")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_DebugResult")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Used by the TestSuite to hold previous class when running in debug.")
(NEWLINE)
(ID "_previousTestClass")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_moduleSetUpFailed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "shouldStop")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ENDMARKER)
