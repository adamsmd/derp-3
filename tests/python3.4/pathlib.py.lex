(KEYWORD import)
(ID "fnmatch")
(NEWLINE)
(KEYWORD import)
(ID "functools")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "ntpath")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "posixpath")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "Sequence")
(NEWLINE)
(KEYWORD from)
(ID "contextlib")
(KEYWORD import)
(ID "contextmanager")
(NEWLINE)
(KEYWORD from)
(ID "errno")
(KEYWORD import)
(ID "EINVAL")
(PUNCT ",")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(NEWLINE)
(KEYWORD from)
(ID "operator")
(KEYWORD import)
(ID "attrgetter")
(NEWLINE)
(KEYWORD from)
(ID "stat")
(KEYWORD import)
(ID "S_ISDIR")
(PUNCT ",")
(ID "S_ISLNK")
(PUNCT ",")
(ID "S_ISREG")
(PUNCT ",")
(ID "S_ISSOCK")
(PUNCT ",")
(ID "S_ISBLK")
(PUNCT ",")
(ID "S_ISCHR")
(PUNCT ",")
(ID "S_ISFIFO")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(KEYWORD import)
(ID "quote_from_bytes")
(KEYWORD as)
(ID "urlquote_from_bytes")
(NEWLINE)
(ID "supports_symlinks")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "nt")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "getwindowsversion")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ">=")
(PUNCT "(")
(LIT 6)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "nt")
(KEYWORD import)
(ID "_getfinalpathname")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "supports_symlinks")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "_getfinalpathname")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nt")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "PurePath")
(PUNCT ",")
(LIT "PurePosixPath")
(PUNCT ",")
(LIT "PureWindowsPath")
(PUNCT ",")
(LIT "Path")
(PUNCT ",")
(LIT "PosixPath")
(PUNCT ",")
(LIT "WindowsPath")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "_is_wildcard_pattern")
(PUNCT "(")
(ID "pat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "*")
(KEYWORD in)
(ID "pat")
(KEYWORD or)
(LIT "?")
(KEYWORD in)
(ID "pat")
(KEYWORD or)
(LIT "[")
(KEYWORD in)
(ID "pat")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Flavour")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A flavour implements a particular (platform-specific) set of path\n    semantics.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "join")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sep")
(PUNCT ".")
(ID "join")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_parts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parsed")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sep")
(NEWLINE)
(ID "altsep")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "altsep")
(NEWLINE)
(ID "drv")
(PUNCT "=")
(ID "root")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "it")
(PUNCT "=")
(ID "reversed")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "it")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "part")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "altsep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "altsep")
(PUNCT ",")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "rel")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "splitroot")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sep")
(KEYWORD in)
(ID "rel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "rel")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(KEYWORD and)
(ID "x")
(PUNCT "!=")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parsed")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "intern")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "rel")
(KEYWORD and)
(ID "rel")
(PUNCT "!=")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parsed")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "intern")
(PUNCT "(")
(ID "rel")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "drv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "it")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drv")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "splitroot")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "drv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parsed")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "drv")
(PUNCT "+")
(ID "root")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parsed")
(PUNCT ".")
(ID "reverse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parsed")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "join_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT ",")
(ID "drv2")
(PUNCT ",")
(ID "root2")
(PUNCT ",")
(ID "parts2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Join the two paths represented by the respective\n        (drive, root, parts) tuples.  Return a new (drive, root, parts) tuple.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "root2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "drv2")
(KEYWORD and)
(ID "drv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "drv")
(PUNCT ",")
(ID "root2")
(PUNCT ",")
(PUNCT "[")
(ID "drv")
(PUNCT "+")
(ID "root2")
(PUNCT "]")
(PUNCT "+")
(ID "parts2")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "drv2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "drv2")
(PUNCT "==")
(ID "drv")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "casefold")
(PUNCT "(")
(ID "drv2")
(PUNCT ")")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "casefold")
(PUNCT "(")
(ID "drv")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "+")
(ID "parts2")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "+")
(ID "parts2")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "drv2")
(PUNCT ",")
(ID "root2")
(PUNCT ",")
(ID "parts2")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_WindowsFlavour")
(PUNCT "(")
(ID "_Flavour")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "\\")
(NEWLINE)
(ID "altsep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "has_drv")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "pathmod")
(PUNCT "=")
(ID "ntpath")
(NEWLINE)
(ID "is_supported")
(PUNCT "=")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ")")
(NEWLINE)
(ID "drive_letters")
(PUNCT "=")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "chr")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "ord")
(PUNCT "(")
(LIT "a")
(PUNCT ")")
(PUNCT ",")
(ID "ord")
(PUNCT "(")
(LIT "z")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT "|")
(ID "set")
(PUNCT "(")
(ID "chr")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "ord")
(PUNCT "(")
(LIT "A")
(PUNCT ")")
(PUNCT ",")
(ID "ord")
(PUNCT "(")
(LIT "Z")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "ext_namespace_prefix")
(PUNCT "=")
(LIT "\\\\?\\")
(NEWLINE)
(ID "reserved_names")
(PUNCT "=")
(PUNCT "(")
(PUNCT "{")
(LIT "CON")
(PUNCT ",")
(LIT "PRN")
(PUNCT ",")
(LIT "AUX")
(PUNCT ",")
(LIT "NUL")
(PUNCT "}")
(PUNCT "|")
(PUNCT "{")
(LIT "COM%d")
(PUNCT "%")
(ID "i")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT "}")
(PUNCT "|")
(PUNCT "{")
(LIT "LPT%d")
(PUNCT "%")
(ID "i")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "splitroot")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "part")
(PUNCT ",")
(ID "sep")
(PUNCT "=")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "second")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "second")
(PUNCT "==")
(ID "sep")
(KEYWORD and)
(ID "first")
(PUNCT "==")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT ",")
(ID "part")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_split_extended_path")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(ID "first")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "second")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "third")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "second")
(PUNCT "==")
(ID "sep")
(KEYWORD and)
(ID "first")
(PUNCT "==")
(ID "sep")
(KEYWORD and)
(ID "third")
(PUNCT "!=")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index2")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index2")
(PUNCT "!=")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "index2")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index2")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "prefix")
(PUNCT "+")
(ID "part")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(ID "index2")
(PUNCT "]")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(ID "part")
(PUNCT "[")
(ID "index2")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "part")
(PUNCT "[")
(PUNCT ":")
(ID "index2")
(PUNCT "]")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(ID "part")
(PUNCT "[")
(ID "index2")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "drv")
(PUNCT "=")
(ID "root")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "second")
(PUNCT "==")
(LIT ":")
(KEYWORD and)
(ID "first")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "drive_letters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drv")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "part")
(PUNCT "=")
(ID "part")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "first")
(PUNCT "=")
(ID "third")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "first")
(PUNCT "==")
(ID "sep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(ID "first")
(NEWLINE)
(ID "part")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "prefix")
(PUNCT "+")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "part")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "casefold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "casefold_parts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "p")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "parts")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resolve")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_getfinalpathname")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_ext_to_normal")
(PUNCT "(")
(ID "_getfinalpathname")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_split_extended_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "ext_prefix")
(PUNCT "=")
(ID "ext_namespace_prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "s")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "ext_prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "s")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "UNC\\")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "+=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT "\\")
(PUNCT "+")
(ID "s")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "prefix")
(PUNCT ",")
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_ext_to_normal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_split_extended_path")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_reserved")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parts")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "reserved_names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_uri")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drive")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "drive")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "drive")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(KEYWORD and)
(ID "drive")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "as_posix")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "file:///%s/%s")
(PUNCT "%")
(PUNCT "(")
(ID "drive")
(PUNCT ",")
(ID "urlquote_from_bytes")
(PUNCT "(")
(ID "rest")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "file:")
(PUNCT "+")
(ID "urlquote_from_bytes")
(PUNCT "(")
(ID "path")
(PUNCT ".")
(ID "as_posix")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_PosixFlavour")
(PUNCT "(")
(ID "_Flavour")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "altsep")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "has_drv")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "pathmod")
(PUNCT "=")
(ID "posixpath")
(NEWLINE)
(ID "is_supported")
(PUNCT "=")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "nt")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "splitroot")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "part")
(PUNCT ",")
(ID "sep")
(PUNCT "=")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "part")
(KEYWORD and)
(ID "part")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "sep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stripped_part")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "stripped_part")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ",")
(ID "sep")
(PUNCT "*")
(LIT 2)
(PUNCT ",")
(ID "stripped_part")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(ID "stripped_part")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "part")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "casefold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "casefold_parts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "parts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resolve")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sep")
(NEWLINE)
(ID "accessor")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "_accessor")
(NEWLINE)
(ID "seen")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_resolve")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "rest")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "rest")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD or)
(ID "name")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "..")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "newpath")
(PUNCT "=")
(ID "path")
(PUNCT "+")
(ID "sep")
(PUNCT "+")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "newpath")
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "seen")
(PUNCT "[")
(ID "newpath")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Symlink loop from %r")
(PUNCT "%")
(ID "newpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT "=")
(ID "accessor")
(PUNCT ".")
(ID "readlink")
(PUNCT "(")
(ID "newpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "EINVAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "newpath")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seen")
(PUNCT "[")
(ID "newpath")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "_resolve")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(ID "seen")
(PUNCT "[")
(ID "newpath")
(PUNCT "]")
(PUNCT "=")
(ID "path")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "base")
(PUNCT "=")
(LIT "")
(KEYWORD if)
(ID "path")
(PUNCT ".")
(ID "is_absolute")
(PUNCT "(")
(PUNCT ")")
(KEYWORD else)
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_resolve")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(ID "sep")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_reserved")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_uri")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bpath")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "file://")
(PUNCT "+")
(ID "urlquote_from_bytes")
(PUNCT "(")
(ID "bpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_windows_flavour")
(PUNCT "=")
(ID "_WindowsFlavour")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_posix_flavour")
(PUNCT "=")
(ID "_PosixFlavour")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_Accessor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An accessor implements a particular (system-specific or not) way of\n    accessing paths on the filesystem.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_NormalAccessor")
(PUNCT "(")
(ID "_Accessor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "strfunc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "functools")
(PUNCT ".")
(ID "wraps")
(PUNCT "(")
(ID "strfunc")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "wrapped")
(PUNCT "(")
(ID "pathobj")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "strfunc")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "pathobj")
(PUNCT ")")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "staticmethod")
(PUNCT "(")
(ID "wrapped")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_wrap_binary_strfunc")
(PUNCT "(")
(ID "strfunc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "functools")
(PUNCT ".")
(ID "wraps")
(PUNCT "(")
(ID "strfunc")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "wrapped")
(PUNCT "(")
(ID "pathobjA")
(PUNCT ",")
(ID "pathobjB")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "strfunc")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "pathobjA")
(PUNCT ")")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "pathobjB")
(PUNCT ")")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "staticmethod")
(PUNCT "(")
(ID "wrapped")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stat")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT ")")
(NEWLINE)
(ID "lstat")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT ")")
(NEWLINE)
(ID "open")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "open")
(PUNCT ")")
(NEWLINE)
(ID "listdir")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT ")")
(NEWLINE)
(ID "chmod")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "chmod")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "lchmod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lchmod")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "lchmod")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "lchmod")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pathobj")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "lchmod() not available on this system")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "mkdir")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "mkdir")
(PUNCT ")")
(NEWLINE)
(ID "unlink")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "unlink")
(PUNCT ")")
(NEWLINE)
(ID "rmdir")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "rmdir")
(PUNCT ")")
(NEWLINE)
(ID "rename")
(PUNCT "=")
(ID "_wrap_binary_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "rename")
(PUNCT ")")
(NEWLINE)
(ID "replace")
(PUNCT "=")
(ID "_wrap_binary_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "replace")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "supports_symlinks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "symlink")
(PUNCT "=")
(ID "_wrap_binary_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "symlink")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "target_is_directory")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "symlink() not available on this system")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "symlink")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "target_is_directory")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "utime")
(PUNCT "=")
(ID "_wrap_strfunc")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "utime")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "readlink")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "readlink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_normal_accessor")
(PUNCT "=")
(ID "_NormalAccessor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(PUNCT "@")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "_cached")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT ".")
(ID "__cached__")
(NEWLINE)
(KEYWORD yield)
(ID "func")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "wrapper")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cache")
(PUNCT "[")
(ID "args")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(ID "args")
(PUNCT "]")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "wrapper")
(PUNCT ".")
(ID "__cached__")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "wrapper")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_make_selector")
(PUNCT "(")
(ID "pattern_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pat")
(PUNCT "=")
(ID "pattern_parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "child_parts")
(PUNCT "=")
(ID "pattern_parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "pat")
(PUNCT "==")
(LIT "**")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT "=")
(ID "_RecursiveWildcardSelector")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "**")
(KEYWORD in)
(ID "pat")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid pattern: '**' can only be an entire path component")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_is_wildcard_pattern")
(PUNCT "(")
(ID "pat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT "=")
(ID "_WildcardSelector")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT "=")
(ID "_PreciseSelector")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "pat")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "functools")
(PUNCT ",")
(LIT "lru_cache")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_make_selector")
(PUNCT "=")
(ID "functools")
(PUNCT ".")
(ID "lru_cache")
(PUNCT "(")
(PUNCT ")")
(PUNCT "(")
(ID "_make_selector")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Selector")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A selector matches a specific glob pattern part against the children\n    of a given path.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "child_parts")
(PUNCT "=")
(ID "child_parts")
(NEWLINE)
(KEYWORD if)
(ID "child_parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "successor")
(PUNCT "=")
(ID "_make_selector")
(PUNCT "(")
(ID "child_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "successor")
(PUNCT "=")
(ID "_TerminatingSelector")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "select_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterate over all child paths of `parent_path` matched by this\n        selector.  This can contain parent_path itself.")
(NEWLINE)
(ID "path_cls")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "parent_path")
(PUNCT ")")
(NEWLINE)
(ID "is_dir")
(PUNCT "=")
(ID "path_cls")
(PUNCT ".")
(ID "is_dir")
(NEWLINE)
(ID "exists")
(PUNCT "=")
(ID "path_cls")
(PUNCT ".")
(ID "exists")
(NEWLINE)
(ID "listdir")
(PUNCT "=")
(ID "parent_path")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "listdir")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_select_from")
(PUNCT "(")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_TerminatingSelector")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_select_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "parent_path")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_PreciseSelector")
(PUNCT "(")
(ID "_Selector")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "_Selector")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_select_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_dir")
(PUNCT "(")
(ID "parent_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "parent_path")
(PUNCT ".")
(ID "_make_child_relpath")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exists")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "successor")
(PUNCT ".")
(ID "_select_from")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_WildcardSelector")
(PUNCT "(")
(ID "_Selector")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pat")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "fnmatch")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "pat")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_Selector")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_select_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_dir")
(PUNCT "(")
(ID "parent_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "cf")
(PUNCT "=")
(ID "parent_path")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "casefold")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "listdir")
(PUNCT "(")
(ID "parent_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "casefolded")
(PUNCT "=")
(ID "cf")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pat")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "casefolded")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "parent_path")
(PUNCT ".")
(ID "_make_child_relpath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "successor")
(PUNCT ".")
(ID "_select_from")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_RecursiveWildcardSelector")
(PUNCT "(")
(ID "_Selector")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pat")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_Selector")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_iterate_directories")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "parent_path")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "listdir")
(PUNCT "(")
(ID "parent_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "parent_path")
(PUNCT ".")
(ID "_make_child_relpath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "is_dir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_iterate_directories")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_select_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_dir")
(PUNCT "(")
(ID "parent_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "_cached")
(PUNCT "(")
(ID "listdir")
(PUNCT ")")
(KEYWORD as)
(ID "listdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yielded")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "successor_select")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "successor")
(PUNCT ".")
(ID "_select_from")
(NEWLINE)
(KEYWORD for)
(ID "starting_point")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_iterate_directories")
(PUNCT "(")
(ID "parent_path")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "successor_select")
(PUNCT "(")
(ID "starting_point")
(PUNCT ",")
(ID "is_dir")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "listdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p")
(KEYWORD not)
(KEYWORD in)
(ID "yielded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "p")
(NEWLINE)
(ID "yielded")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "yielded")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_PathParents")
(PUNCT "(")
(ID "Sequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This object provides sequence-like access to the logical ancestors\n    of a path.  Don't try to construct it yourself.")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "_pathcls")
(PUNCT ",")
(LIT "_drv")
(PUNCT ",")
(LIT "_root")
(PUNCT ",")
(LIT "_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pathcls")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "_drv")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "_root")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "_parts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drv")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "idx")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "idx")
(PUNCT "<")
(LIT 0)
(KEYWORD or)
(ID "idx")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IndexError")
(PUNCT "(")
(ID "idx")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_pathcls")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(ID "idx")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<{}.parents>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pathcls")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PurePath")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "PurePath represents a filesystem path and offers operations which\n    don't imply any actual filesystem I/O.  Depending on your system,\n    instantiating a PurePath will return either a PurePosixPath or a\n    PureWindowsPath object.  You can also instantiate either of these classes\n    directly, regardless of your system.\n    ")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "_drv")
(PUNCT ",")
(LIT "_root")
(PUNCT ",")
(LIT "_parts")
(PUNCT ",")
(LIT "_str")
(PUNCT ",")
(LIT "_hash")
(PUNCT ",")
(LIT "_pparts")
(PUNCT ",")
(LIT "_cached_cparts")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a PurePath from one or several strings and or existing\n        PurePath objects.  The strings and path objects are combined so as\n        to yield a canonicalized path, which is incorporated into the\n        new PurePath object.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "cls")
(KEYWORD is)
(ID "PurePath")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT "=")
(ID "PureWindowsPath")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD else)
(ID "PurePosixPath")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "_from_parts")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__reduce__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_parse_args")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "PurePath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "+=")
(ID "a")
(PUNCT ".")
(ID "_parts")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "argument should be a path or str object, not %r")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "parse_parts")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_from_parts")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "init")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parse_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT "=")
(ID "drv")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "=")
(ID "parts")
(NEWLINE)
(KEYWORD if)
(ID "init")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT ",")
(ID "init")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT "=")
(ID "drv")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(ID "root")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "=")
(ID "parts")
(NEWLINE)
(KEYWORD if)
(ID "init")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_format_parsed_parts")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "drv")
(PUNCT "+")
(ID "root")
(PUNCT "+")
(ID "cls")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_init")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_child")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parse_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "join_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ",")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the string representation of the path, suitable for\n        passing to system calls.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_str")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_str")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(KEYWORD or)
(LIT ".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_str")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "as_posix")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the string representation of the path with forward (/)\n        slashes.")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(NEWLINE)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__bytes__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the bytes representation of the path.  This is only\n        recommended to use under Unix.")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{}({!r})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "as_posix")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "as_uri")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the path as a 'file' URI.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_absolute")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "relative path can't be expressed as a file URI")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "make_uri")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "_cparts")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cached_cparts")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cached_cparts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "casefold_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cached_cparts")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "PurePath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cparts")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_cparts")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(KEYWORD is)
(ID "other")
(PUNCT ".")
(ID "_flavour")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_hash")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_hash")
(PUNCT "=")
(ID "hash")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_cparts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_hash")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "PurePath")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(KEYWORD is)
(KEYWORD not)
(ID "other")
(PUNCT ".")
(ID "_flavour")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cparts")
(PUNCT "<")
(ID "other")
(PUNCT ".")
(ID "_cparts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__le__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "PurePath")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(KEYWORD is)
(KEYWORD not)
(ID "other")
(PUNCT ".")
(ID "_flavour")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cparts")
(PUNCT "<=")
(ID "other")
(PUNCT ".")
(ID "_cparts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__gt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "PurePath")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(KEYWORD is)
(KEYWORD not)
(ID "other")
(PUNCT ".")
(ID "_flavour")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cparts")
(PUNCT ">")
(ID "other")
(PUNCT ".")
(ID "_cparts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ge__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "PurePath")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(KEYWORD is)
(KEYWORD not)
(ID "other")
(PUNCT ".")
(ID "_flavour")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cparts")
(PUNCT ">=")
(ID "other")
(PUNCT ".")
(ID "_cparts")
(NEWLINE)
(DEDENT)
(ID "drive")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "attrgetter")
(PUNCT "(")
(LIT "_drv")
(PUNCT ")")
(PUNCT ",")
(ID "doc")
(PUNCT "=")
(LIT "The drive prefix (letter or UNC path), if any.")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "attrgetter")
(PUNCT "(")
(LIT "_root")
(PUNCT ")")
(PUNCT ",")
(ID "doc")
(PUNCT "=")
(LIT "The root of the path, if any.")
(PUNCT ")")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "anchor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The concatenation of the drive and root, or ''.")
(NEWLINE)
(ID "anchor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_root")
(NEWLINE)
(KEYWORD return)
(ID "anchor")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The final path component, if any.")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parts")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "==")
(PUNCT "(")
(LIT 1)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ")")
(KEYWORD else)
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parts")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "suffix")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The final component's last suffix, if any.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT 0)
(PUNCT "<")
(ID "i")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "name")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "suffixes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A list of the final component's suffixes, if any.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(LIT ".")
(PUNCT "+")
(ID "suffix")
(KEYWORD for)
(ID "suffix")
(KEYWORD in)
(ID "name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "stem")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The final path component, minus its last suffix.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT 0)
(PUNCT "<")
(ID "i")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "name")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "with_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new path with the file name changed.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "%r has an empty name")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "parse_parts")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "name")
(KEYWORD or)
(ID "name")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "altsep")
(PUNCT "]")
(KEYWORD or)
(ID "drv")
(KEYWORD or)
(ID "root")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "!=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid name %r")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "with_suffix")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "suffix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new path with the file suffix changed (or added, if none).")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(NEWLINE)
(KEYWORD if)
(ID "f")
(PUNCT ".")
(ID "sep")
(KEYWORD in)
(ID "suffix")
(KEYWORD or)
(ID "f")
(PUNCT ".")
(ID "altsep")
(KEYWORD and)
(ID "f")
(PUNCT ".")
(ID "altsep")
(KEYWORD in)
(ID "suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid suffix %r")
(PUNCT "%")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "suffix")
(KEYWORD and)
(KEYWORD not)
(ID "suffix")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(KEYWORD or)
(ID "suffix")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid suffix %r")
(PUNCT "%")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "%r has an empty name")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "old_suffix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "suffix")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "old_suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "+")
(ID "suffix")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "old_suffix")
(PUNCT ")")
(PUNCT "]")
(PUNCT "+")
(ID "suffix")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "relative_to")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the relative path to another path identified by the passed\n        arguments.  If the operation is not possible (because this is not\n        a subpath of the other path), raise ValueError.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "other")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "need at least one argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parts")
(NEWLINE)
(ID "drv")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_drv")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(NEWLINE)
(KEYWORD if)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "abs_parts")
(PUNCT "=")
(PUNCT "[")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT "]")
(PUNCT "+")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "abs_parts")
(PUNCT "=")
(ID "parts")
(NEWLINE)
(DEDENT)
(ID "to_drv")
(PUNCT ",")
(ID "to_root")
(PUNCT ",")
(ID "to_parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parse_args")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "to_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_abs_parts")
(PUNCT "=")
(PUNCT "[")
(ID "to_drv")
(PUNCT ",")
(ID "to_root")
(PUNCT "]")
(PUNCT "+")
(ID "to_parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_abs_parts")
(PUNCT "=")
(ID "to_parts")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "to_abs_parts")
(PUNCT ")")
(NEWLINE)
(ID "cf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "casefold_parts")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "root")
(KEYWORD or)
(ID "drv")
(PUNCT ")")
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 0)
(KEYWORD else)
(ID "cf")
(PUNCT "(")
(ID "abs_parts")
(PUNCT "[")
(PUNCT ":")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(PUNCT "!=")
(ID "cf")
(PUNCT "(")
(ID "to_abs_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatted")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_format_parsed_parts")
(PUNCT "(")
(ID "to_drv")
(PUNCT ",")
(ID "to_root")
(PUNCT ",")
(ID "to_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "{!r} does not start with {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "formatted")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "root")
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 1)
(KEYWORD else)
(LIT "")
(PUNCT ",")
(ID "abs_parts")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parts")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An object providing sequence-like access to the\n        components in the filesystem path.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_pparts")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pparts")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_pparts")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "joinpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Combine this path with one or several arguments, and return a\n        new path representing either a subpath (if all arguments are relative\n        paths) or a totally different path (if one of the arguments is\n        anchored).\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_make_child")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__truediv__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_make_child")
(PUNCT "(")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__rtruediv__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parts")
(PUNCT "(")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The logical parent of the path.")
(NEWLINE)
(ID "drv")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_drv")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parts")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(PUNCT "(")
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parents")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A sequence of this path's logical parents.")
(NEWLINE)
(KEYWORD return)
(ID "_PathParents")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_absolute")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "True if the path is absolute (has both a root and, if applicable,\n        a drive).")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "has_drv")
(KEYWORD or)
(ID "bool")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_reserved")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the path contains one of the special names reserved\n        by the system, if any.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "is_reserved")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "match")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path_pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return True if this path matches the given pattern.\n        ")
(NEWLINE)
(ID "cf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "casefold")
(NEWLINE)
(ID "path_pattern")
(PUNCT "=")
(ID "cf")
(PUNCT "(")
(ID "path_pattern")
(PUNCT ")")
(NEWLINE)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "pat_parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "parse_parts")
(PUNCT "(")
(PUNCT "(")
(ID "path_pattern")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "pat_parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "empty pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "drv")
(KEYWORD and)
(ID "drv")
(PUNCT "!=")
(ID "cf")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "root")
(KEYWORD and)
(ID "root")
(PUNCT "!=")
(ID "cf")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cparts")
(NEWLINE)
(KEYWORD if)
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "pat_parts")
(PUNCT ")")
(PUNCT "!=")
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "pat_parts")
(PUNCT "=")
(ID "pat_parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "pat_parts")
(PUNCT ")")
(PUNCT ">")
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "part")
(PUNCT ",")
(ID "pat")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT ",")
(ID "reversed")
(PUNCT "(")
(ID "pat_parts")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "fnmatch")
(PUNCT ".")
(ID "fnmatchcase")
(PUNCT "(")
(ID "part")
(PUNCT ",")
(ID "pat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PurePosixPath")
(PUNCT "(")
(ID "PurePath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_flavour")
(PUNCT "=")
(ID "_posix_flavour")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "PureWindowsPath")
(PUNCT "(")
(ID "PurePath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_flavour")
(PUNCT "=")
(ID "_windows_flavour")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Path")
(PUNCT "(")
(ID "PurePath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "_accessor")
(PUNCT ",")
(LIT "_closed")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cls")
(KEYWORD is)
(ID "Path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT "=")
(ID "WindowsPath")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD else)
(ID "PosixPath")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_from_parts")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "init")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "is_supported")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "cannot instantiate %r on your system")
(PUNCT "%")
(PUNCT "(")
(ID "cls")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "template")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "template")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT "=")
(ID "template")
(PUNCT ".")
(ID "_accessor")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT "=")
(ID "_normal_accessor")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_make_child_relpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT "+")
(PUNCT "[")
(ID "part")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_from_parsed_parts")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drv")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "t")
(PUNCT ",")
(ID "v")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_raise_closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "I/O operation on closed path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_opener")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 438)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_raw_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 511)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Open the file pointed by this path and return a file descriptor,\n        as os.open() does.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "cwd")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new path pointing to the current working directory\n        (as returned by os.getcwd()).\n        ")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "iterdir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterate over the files in this directory.  Does not yield any\n        result for the special paths '.' and '..'.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(PUNCT "{")
(LIT ".")
(PUNCT ",")
(LIT "..")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "self")
(PUNCT ".")
(ID "_make_child_relpath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "glob")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterate over this subtree and yield all existing files (of any\n        kind, including directories) matching the given pattern.\n        ")
(NEWLINE)
(ID "pattern")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "casefold")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "pattern_parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "parse_parts")
(PUNCT "(")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "Non-relative patterns are unsupported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "selector")
(PUNCT "=")
(ID "_make_selector")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "pattern_parts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "selector")
(PUNCT ".")
(ID "select_from")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "rglob")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Recursively yield all existing files (of any kind, including\n        directories) matching the given pattern, anywhere in this subtree.\n        ")
(NEWLINE)
(ID "pattern")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "casefold")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(ID "drv")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "pattern_parts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "parse_parts")
(PUNCT "(")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "drv")
(KEYWORD or)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "Non-relative patterns are unsupported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "selector")
(PUNCT "=")
(ID "_make_selector")
(PUNCT "(")
(PUNCT "(")
(LIT "**")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "tuple")
(PUNCT "(")
(ID "pattern_parts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "selector")
(PUNCT ".")
(ID "select_from")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "absolute")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an absolute version of this path.  This function works\n        even if the path doesn't point to anything.\n\n        No normalization is done, i.e. all '.' and '..' will be kept along.\n        Use resolve() to get the canonical path to a file.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_absolute")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(ID "obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_from_parts")
(PUNCT "(")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_parts")
(PUNCT ",")
(ID "init")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(ID "template")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resolve")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Make the path absolute, resolving all symlinks on the way and also\n        normalizing it (for example turning slashes into backslashes under\n        Windows).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "resolve")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "s")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "absolute")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "normed")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_flavour")
(PUNCT ".")
(ID "pathmod")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_from_parts")
(PUNCT "(")
(PUNCT "(")
(ID "normed")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "init")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(ID "template")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stat")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the result of the stat() system call on this path, like\n        os.stat() does.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "owner")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the login name of the file owner.\n        ")
(NEWLINE)
(KEYWORD import)
(ID "pwd")
(NEWLINE)
(KEYWORD return)
(ID "pwd")
(PUNCT ".")
(ID "getpwuid")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_uid")
(PUNCT ")")
(PUNCT ".")
(ID "pw_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "group")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the group name of the file gid.\n        ")
(NEWLINE)
(KEYWORD import)
(ID "grp")
(NEWLINE)
(KEYWORD return)
(ID "grp")
(PUNCT ".")
(ID "getgrgid")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_gid")
(PUNCT ")")
(PUNCT ".")
(ID "gr_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Open the file pointed by this path and return a file object, as\n        the built-in open() function does.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "buffering")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ",")
(ID "newline")
(PUNCT ",")
(ID "opener")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_opener")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "touch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 438)
(PUNCT ",")
(ID "exist_ok")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Create this file with the given access mode, if it doesn't exist.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "exist_ok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "utime")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "flags")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "O_CREAT")
(PUNCT "|")
(ID "os")
(PUNCT ".")
(ID "O_WRONLY")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "exist_ok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "os")
(PUNCT ".")
(ID "O_EXCL")
(NEWLINE)
(DEDENT)
(ID "fd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_raw_open")
(PUNCT "(")
(ID "flags")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mkdir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 511)
(PUNCT ",")
(ID "parents")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "parents")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "ENOENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "parents")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "chmod")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Change the permissions of the path, like os.chmod().\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lchmod")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Like chmod(), except if the path points to a symlink, the symlink's\n        permissions are changed, rather than its target's.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "lchmod")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unlink")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Remove this file or link.\n        If the path is a directory, use rmdir() instead.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rmdir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Remove this directory.  The directory must be empty.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "rmdir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lstat")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Like stat(), except if the path points to a symlink, the symlink's\n        status information is returned, rather than its target's.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Rename this path to the given path.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "rename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Rename this path to the given path, clobbering the existing\n        destination if it exists.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "symlink_to")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ",")
(ID "target_is_directory")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Make this path a symlink pointing to the given path.\n        Note the order of arguments (self, target) is the reverse of os.symlink's.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_raise_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_accessor")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "target_is_directory")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exists")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path exists.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_dir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a directory.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISDIR")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_file")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a regular file (also True for symlinks pointing\n        to regular files).\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISREG")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_symlink")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a symbolic link.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISLNK")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_block_device")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a block device.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISBLK")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_char_device")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a character device.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISCHR")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_fifo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a FIFO.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISFIFO")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_socket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether this path is a socket.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "S_ISSOCK")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ENOENT")
(PUNCT ",")
(ID "ENOTDIR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PosixPath")
(PUNCT "(")
(ID "Path")
(PUNCT ",")
(ID "PurePosixPath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "WindowsPath")
(PUNCT "(")
(ID "Path")
(PUNCT ",")
(ID "PureWindowsPath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
