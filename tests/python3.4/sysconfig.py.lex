(LIT "Access to Python's configuration information.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "os")
(PUNCT ".")
(ID "path")
(KEYWORD import)
(ID "pardir")
(PUNCT ",")
(ID "realpath")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "get_config_h_filename")
(PUNCT ",")
(LIT "get_config_var")
(PUNCT ",")
(LIT "get_config_vars")
(PUNCT ",")
(LIT "get_makefile_filename")
(PUNCT ",")
(LIT "get_path")
(PUNCT ",")
(LIT "get_path_names")
(PUNCT ",")
(LIT "get_paths")
(PUNCT ",")
(LIT "get_platform")
(PUNCT ",")
(LIT "get_python_version")
(PUNCT ",")
(LIT "get_scheme_names")
(PUNCT ",")
(LIT "parse_config_h")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "_INSTALL_SCHEMES")
(PUNCT "=")
(PUNCT "{")
(LIT "posix_prefix")
(PUNCT ":")
(PUNCT "{")
(LIT "stdlib")
(PUNCT ":")
(LIT "{installed_base}/lib/python{py_version_short}")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ":")
(LIT "{platbase}/lib/python{py_version_short}")
(PUNCT ",")
(LIT "purelib")
(PUNCT ":")
(LIT "{base}/lib/python{py_version_short}/site-packages")
(PUNCT ",")
(LIT "platlib")
(PUNCT ":")
(LIT "{platbase}/lib/python{py_version_short}/site-packages")
(PUNCT ",")
(LIT "include")
(PUNCT ":")
(LIT "{installed_base}/include/python{py_version_short}{abiflags}")
(PUNCT ",")
(LIT "platinclude")
(PUNCT ":")
(LIT "{installed_platbase}/include/python{py_version_short}{abiflags}")
(PUNCT ",")
(LIT "scripts")
(PUNCT ":")
(LIT "{base}/bin")
(PUNCT ",")
(LIT "data")
(PUNCT ":")
(LIT "{base}")
(PUNCT ",")
(PUNCT "}")
(PUNCT ",")
(LIT "posix_home")
(PUNCT ":")
(PUNCT "{")
(LIT "stdlib")
(PUNCT ":")
(LIT "{installed_base}/lib/python")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ":")
(LIT "{base}/lib/python")
(PUNCT ",")
(LIT "purelib")
(PUNCT ":")
(LIT "{base}/lib/python")
(PUNCT ",")
(LIT "platlib")
(PUNCT ":")
(LIT "{base}/lib/python")
(PUNCT ",")
(LIT "include")
(PUNCT ":")
(LIT "{installed_base}/include/python")
(PUNCT ",")
(LIT "platinclude")
(PUNCT ":")
(LIT "{installed_base}/include/python")
(PUNCT ",")
(LIT "scripts")
(PUNCT ":")
(LIT "{base}/bin")
(PUNCT ",")
(LIT "data")
(PUNCT ":")
(LIT "{base}")
(PUNCT ",")
(PUNCT "}")
(PUNCT ",")
(LIT "nt")
(PUNCT ":")
(PUNCT "{")
(LIT "stdlib")
(PUNCT ":")
(LIT "{installed_base}/Lib")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ":")
(LIT "{base}/Lib")
(PUNCT ",")
(LIT "purelib")
(PUNCT ":")
(LIT "{base}/Lib/site-packages")
(PUNCT ",")
(LIT "platlib")
(PUNCT ":")
(LIT "{base}/Lib/site-packages")
(PUNCT ",")
(LIT "include")
(PUNCT ":")
(LIT "{installed_base}/Include")
(PUNCT ",")
(LIT "platinclude")
(PUNCT ":")
(LIT "{installed_base}/Include")
(PUNCT ",")
(LIT "scripts")
(PUNCT ":")
(LIT "{base}/Scripts")
(PUNCT ",")
(LIT "data")
(PUNCT ":")
(LIT "{base}")
(PUNCT ",")
(PUNCT "}")
(PUNCT ",")
(LIT "nt_user")
(PUNCT ":")
(PUNCT "{")
(LIT "stdlib")
(PUNCT ":")
(LIT "{userbase}/Python{py_version_nodot}")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ":")
(LIT "{userbase}/Python{py_version_nodot}")
(PUNCT ",")
(LIT "purelib")
(PUNCT ":")
(LIT "{userbase}/Python{py_version_nodot}/site-packages")
(PUNCT ",")
(LIT "platlib")
(PUNCT ":")
(LIT "{userbase}/Python{py_version_nodot}/site-packages")
(PUNCT ",")
(LIT "include")
(PUNCT ":")
(LIT "{userbase}/Python{py_version_nodot}/Include")
(PUNCT ",")
(LIT "scripts")
(PUNCT ":")
(LIT "{userbase}/Scripts")
(PUNCT ",")
(LIT "data")
(PUNCT ":")
(LIT "{userbase}")
(PUNCT ",")
(PUNCT "}")
(PUNCT ",")
(LIT "posix_user")
(PUNCT ":")
(PUNCT "{")
(LIT "stdlib")
(PUNCT ":")
(LIT "{userbase}/lib/python{py_version_short}")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ":")
(LIT "{userbase}/lib/python{py_version_short}")
(PUNCT ",")
(LIT "purelib")
(PUNCT ":")
(LIT "{userbase}/lib/python{py_version_short}/site-packages")
(PUNCT ",")
(LIT "platlib")
(PUNCT ":")
(LIT "{userbase}/lib/python{py_version_short}/site-packages")
(PUNCT ",")
(LIT "include")
(PUNCT ":")
(LIT "{userbase}/include/python{py_version_short}")
(PUNCT ",")
(LIT "scripts")
(PUNCT ":")
(LIT "{userbase}/bin")
(PUNCT ",")
(LIT "data")
(PUNCT ":")
(LIT "{userbase}")
(PUNCT ",")
(PUNCT "}")
(PUNCT ",")
(LIT "osx_framework_user")
(PUNCT ":")
(PUNCT "{")
(LIT "stdlib")
(PUNCT ":")
(LIT "{userbase}/lib/python")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ":")
(LIT "{userbase}/lib/python")
(PUNCT ",")
(LIT "purelib")
(PUNCT ":")
(LIT "{userbase}/lib/python/site-packages")
(PUNCT ",")
(LIT "platlib")
(PUNCT ":")
(LIT "{userbase}/lib/python/site-packages")
(PUNCT ",")
(LIT "include")
(PUNCT ":")
(LIT "{userbase}/include")
(PUNCT ",")
(LIT "scripts")
(PUNCT ":")
(LIT "{userbase}/bin")
(PUNCT ",")
(LIT "data")
(PUNCT ":")
(LIT "{userbase}")
(PUNCT ",")
(PUNCT "}")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_SCHEME_KEYS")
(PUNCT "=")
(PUNCT "(")
(LIT "stdlib")
(PUNCT ",")
(LIT "platstdlib")
(PUNCT ",")
(LIT "purelib")
(PUNCT ",")
(LIT "platlib")
(PUNCT ",")
(LIT "include")
(PUNCT ",")
(LIT "scripts")
(PUNCT ",")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(ID "_PY_VERSION")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "_PY_VERSION_SHORT")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "_PY_VERSION_SHORT_NO_DOT")
(PUNCT "=")
(ID "_PY_VERSION")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "_PY_VERSION")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "_BASE_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT ")")
(NEWLINE)
(ID "_EXEC_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exec_prefix")
(PUNCT ")")
(NEWLINE)
(ID "_BASE_EXEC_PREFIX")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "base_exec_prefix")
(PUNCT ")")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_USER_BASE")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_safe_realpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "realpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROJECT_BASE")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "_safe_realpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROJECT_BASE")
(PUNCT "=")
(ID "_safe_realpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(LIT "pcbuild")
(KEYWORD in)
(ID "_PROJECT_BASE")
(PUNCT "[")
(PUNCT "-")
(LIT 8)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROJECT_BASE")
(PUNCT "=")
(ID "_safe_realpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_PROJECT_BASE")
(PUNCT ",")
(ID "pardir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(LIT "\\pc\\v")
(KEYWORD in)
(ID "_PROJECT_BASE")
(PUNCT "[")
(PUNCT "-")
(LIT 10)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROJECT_BASE")
(PUNCT "=")
(ID "_safe_realpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_PROJECT_BASE")
(PUNCT ",")
(ID "pardir")
(PUNCT ",")
(ID "pardir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(LIT "\\pcbuild\\amd64")
(KEYWORD in)
(ID "_PROJECT_BASE")
(PUNCT "[")
(PUNCT "-")
(LIT 14)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROJECT_BASE")
(PUNCT "=")
(ID "_safe_realpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_PROJECT_BASE")
(PUNCT ",")
(ID "pardir")
(PUNCT ",")
(ID "pardir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "_PYTHON_PROJECT_BASE")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROJECT_BASE")
(PUNCT "=")
(ID "_safe_realpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "_PYTHON_PROJECT_BASE")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_python_source_dir")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "fn")
(KEYWORD in)
(PUNCT "(")
(LIT "Setup.dist")
(PUNCT ",")
(LIT "Setup.local")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(LIT "Modules")
(PUNCT ",")
(ID "fn")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "_sys_home")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "_home")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_sys_home")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(ID "_sys_home")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT "pcbuild")
(PUNCT ",")
(LIT "pcbuild\\amd64")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_sys_home")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_sys_home")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "pcbuild")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_sys_home")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_python_build")
(PUNCT "(")
(ID "check_home")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "check_home")
(KEYWORD and)
(ID "_sys_home")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_is_python_source_dir")
(PUNCT "(")
(ID "_sys_home")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_is_python_source_dir")
(PUNCT "(")
(ID "_PROJECT_BASE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_PYTHON_BUILD")
(PUNCT "=")
(ID "is_python_build")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_PYTHON_BUILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "scheme")
(KEYWORD in)
(PUNCT "(")
(LIT "posix_prefix")
(PUNCT ",")
(LIT "posix_home")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_INSTALL_SCHEMES")
(PUNCT "[")
(ID "scheme")
(PUNCT "]")
(PUNCT "[")
(LIT "include")
(PUNCT "]")
(PUNCT "=")
(LIT "{srcdir}/Include")
(NEWLINE)
(ID "_INSTALL_SCHEMES")
(PUNCT "[")
(ID "scheme")
(PUNCT "]")
(PUNCT "[")
(LIT "platinclude")
(PUNCT "]")
(PUNCT "=")
(LIT "{projectbase}/.")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_subst_vars")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "local_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(PUNCT "**")
(ID "local_vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(PUNCT "**")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(KEYWORD as)
(ID "var")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "{%s}")
(PUNCT "%")
(ID "var")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_extend_dict")
(PUNCT "(")
(ID "target_dict")
(PUNCT ",")
(ID "other_dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target_keys")
(PUNCT "=")
(ID "target_dict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "other_dict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "target_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "target_dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_expand_vars")
(PUNCT "(")
(ID "scheme")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "vars")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "_extend_dict")
(PUNCT "(")
(ID "vars")
(PUNCT ",")
(ID "get_config_vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "_INSTALL_SCHEMES")
(PUNCT "[")
(ID "scheme")
(PUNCT "]")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "posix")
(PUNCT ",")
(LIT "nt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expanduser")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "_subst_vars")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_default_scheme")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "posix_prefix")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getuserbase")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env_base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PYTHONUSERBASE")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "joinuser")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expanduser")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "APPDATA")
(PUNCT ")")
(KEYWORD or)
(LIT "~")
(NEWLINE)
(KEYWORD if)
(ID "env_base")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "env_base")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "joinuser")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(LIT "Python")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "framework")
(PUNCT "=")
(ID "get_config_var")
(PUNCT "(")
(LIT "PYTHONFRAMEWORK")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "framework")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "env_base")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "env_base")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "joinuser")
(PUNCT "(")
(LIT "~")
(PUNCT ",")
(LIT "Library")
(PUNCT ",")
(ID "framework")
(PUNCT ",")
(LIT "%d.%d")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "env_base")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "env_base")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "joinuser")
(PUNCT "(")
(LIT "~")
(PUNCT ",")
(LIT ".local")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_parse_makefile")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "vars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "_variable_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)")
(PUNCT ")")
(NEWLINE)
(ID "_findvar1_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)")
(PUNCT ")")
(NEWLINE)
(ID "_findvar2_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\${([A-Za-z][A-Za-z0-9_]*)}")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "vars")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "done")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "notdone")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogateescape")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "#")
(PUNCT ")")
(KEYWORD or)
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_variable_rx")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tmpv")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "$$")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "$")
(KEYWORD in)
(ID "tmpv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "notdone")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "$$")
(PUNCT ",")
(LIT "$")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "variables")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "notdone")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "renamed_variables")
(PUNCT "=")
(PUNCT "(")
(LIT "CFLAGS")
(PUNCT ",")
(LIT "LDFLAGS")
(PUNCT ",")
(LIT "CPPFLAGS")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "variables")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "tuple")
(PUNCT "(")
(ID "variables")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "notdone")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_findvar1_rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(KEYWORD or)
(ID "_findvar2_rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "found")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD in)
(ID "done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(KEYWORD in)
(ID "notdone")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(KEYWORD in)
(ID "renamed_variables")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "PY_")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "renamed_variables")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "PY_")
(PUNCT "+")
(ID "n")
(KEYWORD in)
(ID "notdone")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "done")
(PUNCT "[")
(LIT "PY_")
(PUNCT "+")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "after")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(PUNCT ":")
(ID "m")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "+")
(ID "item")
(PUNCT "+")
(ID "after")
(NEWLINE)
(KEYWORD if)
(LIT "$")
(KEYWORD in)
(ID "after")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "notdone")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "variables")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "PY_")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "renamed_variables")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "variables")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "done")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "done")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "vars")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "done")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the path of the Makefile.")
(NEWLINE)
(KEYWORD if)
(ID "_PYTHON_BUILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_sys_home")
(KEYWORD or)
(ID "_PROJECT_BASE")
(PUNCT ",")
(LIT "Makefile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "abiflags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config_dir_name")
(PUNCT "=")
(LIT "config-%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "_PY_VERSION_SHORT")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "abiflags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config_dir_name")
(PUNCT "=")
(LIT "config")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ",")
(LIT "_multiarch")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config_dir_name")
(PUNCT "+=")
(LIT "-%s")
(PUNCT "%")
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ".")
(ID "_multiarch")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "get_path")
(PUNCT "(")
(LIT "stdlib")
(PUNCT ")")
(PUNCT ",")
(ID "config_dir_name")
(PUNCT ",")
(LIT "Makefile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_generate_posix_vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate the Python module containing build-time variables.")
(NEWLINE)
(KEYWORD import)
(ID "pprint")
(NEWLINE)
(ID "vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "makefile")
(PUNCT "=")
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_parse_makefile")
(PUNCT "(")
(ID "makefile")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "invalid Python installation: unable to open %s")
(PUNCT "%")
(ID "makefile")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "e")
(PUNCT ",")
(LIT "strerror")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT "+")
(LIT " (%s)")
(PUNCT "%")
(ID "e")
(PUNCT ".")
(ID "strerror")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "config_h")
(PUNCT "=")
(ID "get_config_h_filename")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "config_h")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parse_config_h")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "invalid Python installation: unable to open %s")
(PUNCT "%")
(ID "config_h")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "e")
(PUNCT ",")
(LIT "strerror")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT "+")
(LIT " (%s)")
(PUNCT "%")
(ID "e")
(PUNCT ".")
(ID "strerror")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_PYTHON_BUILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vars")
(PUNCT "[")
(LIT "BLDSHARED")
(PUNCT "]")
(PUNCT "=")
(ID "vars")
(PUNCT "[")
(LIT "LDSHARED")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(LIT "_sysconfigdata")
(NEWLINE)
(KEYWORD if)
(LIT "darwin")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "types")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "types")
(PUNCT ".")
(ID "ModuleType")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT ".")
(ID "build_time_vars")
(PUNCT "=")
(ID "vars")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "module")
(NEWLINE)
(DEDENT)
(ID "pybuilddir")
(PUNCT "=")
(LIT "build/lib.%s-%s")
(PUNCT "%")
(PUNCT "(")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "gettotalrefcount")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pybuilddir")
(PUNCT "+=")
(LIT "-pydebug")
(NEWLINE)
(DEDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "pybuilddir")
(PUNCT ",")
(ID "exist_ok")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "destfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "pybuilddir")
(PUNCT ",")
(ID "name")
(PUNCT "+")
(LIT ".py")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "destfile")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "utf8")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "# system configuration generated and used by")
(LIT " the sysconfig module\n")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "build_time_vars = ")
(PUNCT ")")
(NEWLINE)
(ID "pprint")
(PUNCT ".")
(ID "pprint")
(PUNCT "(")
(ID "vars")
(PUNCT ",")
(ID "stream")
(PUNCT "=")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(LIT "pybuilddir.txt")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "ascii")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "pybuilddir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_init_posix")
(PUNCT "(")
(ID "vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize the module as appropriate for POSIX systems.")
(NEWLINE)
(KEYWORD from)
(ID "_sysconfigdata")
(KEYWORD import)
(ID "build_time_vars")
(NEWLINE)
(ID "vars")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "build_time_vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init_non_posix")
(PUNCT "(")
(ID "vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize the module as appropriate for NT")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "LIBDEST")
(PUNCT "]")
(PUNCT "=")
(ID "get_path")
(PUNCT "(")
(LIT "stdlib")
(PUNCT ")")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "BINLIBDEST")
(PUNCT "]")
(PUNCT "=")
(ID "get_path")
(PUNCT "(")
(LIT "platstdlib")
(PUNCT ")")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "INCLUDEPY")
(PUNCT "]")
(PUNCT "=")
(ID "get_path")
(PUNCT "(")
(LIT "include")
(PUNCT ")")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "EXT_SUFFIX")
(PUNCT "]")
(PUNCT "=")
(LIT ".pyd")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "EXE")
(PUNCT "]")
(PUNCT "=")
(LIT ".exe")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "VERSION")
(PUNCT "]")
(PUNCT "=")
(ID "_PY_VERSION_SHORT_NO_DOT")
(NEWLINE)
(ID "vars")
(PUNCT "[")
(LIT "BINDIR")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "_safe_realpath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_config_h")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "vars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "vars")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vars")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "define_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "#define ([A-Z][A-Za-z0-9_]+) (.*)\n")
(PUNCT ")")
(NEWLINE)
(ID "undef_rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "define_rx")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "vars")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "undef_rx")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vars")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_config_h_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the path of pyconfig.h.")
(NEWLINE)
(KEYWORD if)
(ID "_PYTHON_BUILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inc_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_sys_home")
(KEYWORD or)
(ID "_PROJECT_BASE")
(PUNCT ",")
(LIT "PC")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inc_dir")
(PUNCT "=")
(ID "_sys_home")
(KEYWORD or)
(ID "_PROJECT_BASE")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inc_dir")
(PUNCT "=")
(ID "get_path")
(PUNCT "(")
(LIT "platinclude")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "inc_dir")
(PUNCT ",")
(LIT "pyconfig.h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_scheme_names")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple containing the schemes names.")
(NEWLINE)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "sorted")
(PUNCT "(")
(ID "_INSTALL_SCHEMES")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_path_names")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple containing the paths names.")
(NEWLINE)
(KEYWORD return)
(ID "_SCHEME_KEYS")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_paths")
(PUNCT "(")
(ID "scheme")
(PUNCT "=")
(ID "_get_default_scheme")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "vars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "expand")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a mapping containing an install scheme.\n\n    ``scheme`` is the install scheme name. If not provided, it will\n    return the default scheme for the current platform.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "expand")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_expand_vars")
(PUNCT "(")
(ID "scheme")
(PUNCT ",")
(ID "vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_INSTALL_SCHEMES")
(PUNCT "[")
(ID "scheme")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_path")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "scheme")
(PUNCT "=")
(ID "_get_default_scheme")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "vars")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "expand")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a path corresponding to the scheme.\n\n    ``scheme`` is the install scheme name.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "get_paths")
(PUNCT "(")
(ID "scheme")
(PUNCT ",")
(ID "vars")
(PUNCT ",")
(ID "expand")
(PUNCT ")")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_config_vars")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.\n\n    On Unix, this means every variable defined in Python's installed Makefile;\n    On Windows it's a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_CONFIG_VARS")
(NEWLINE)
(KEYWORD if)
(ID "_CONFIG_VARS")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_CONFIG_VARS")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "prefix")
(PUNCT "]")
(PUNCT "=")
(ID "_PREFIX")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "exec_prefix")
(PUNCT "]")
(PUNCT "=")
(ID "_EXEC_PREFIX")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "py_version")
(PUNCT "]")
(PUNCT "=")
(ID "_PY_VERSION")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "py_version_short")
(PUNCT "]")
(PUNCT "=")
(ID "_PY_VERSION_SHORT")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "py_version_nodot")
(PUNCT "]")
(PUNCT "=")
(ID "_PY_VERSION")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "_PY_VERSION")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "installed_base")
(PUNCT "]")
(PUNCT "=")
(ID "_BASE_PREFIX")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "base")
(PUNCT "]")
(PUNCT "=")
(ID "_PREFIX")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "installed_platbase")
(PUNCT "]")
(PUNCT "=")
(ID "_BASE_EXEC_PREFIX")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "platbase")
(PUNCT "]")
(PUNCT "=")
(ID "_EXEC_PREFIX")
(NEWLINE)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "projectbase")
(PUNCT "]")
(PUNCT "=")
(ID "_PROJECT_BASE")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "abiflags")
(PUNCT "]")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "abiflags")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "abiflags")
(PUNCT "]")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_init_non_posix")
(PUNCT "(")
(ID "_CONFIG_VARS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_init_posix")
(PUNCT "(")
(ID "_CONFIG_VARS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "SO")
(PUNCT "=")
(ID "_CONFIG_VARS")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "EXT_SUFFIX")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "SO")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "SO")
(PUNCT "]")
(PUNCT "=")
(ID "SO")
(NEWLINE)
(DEDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "userbase")
(PUNCT "]")
(PUNCT "=")
(ID "_getuserbase")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "multiarch")
(PUNCT "=")
(ID "get_config_var")
(PUNCT "(")
(LIT "MULTIARCH")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "multiarch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "multiarchsubdir")
(PUNCT "]")
(PUNCT "=")
(LIT "/")
(PUNCT "+")
(ID "multiarch")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "multiarchsubdir")
(PUNCT "]")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "srcdir")
(PUNCT "=")
(ID "_CONFIG_VARS")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "srcdir")
(PUNCT ",")
(ID "_PROJECT_BASE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_PYTHON_BUILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "srcdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "srcdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "srcdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "get_makefile_filename")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_CONFIG_VARS")
(PUNCT "[")
(LIT "srcdir")
(PUNCT "]")
(PUNCT "=")
(ID "_safe_realpath")
(PUNCT "(")
(ID "srcdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_osx_support")
(NEWLINE)
(ID "_osx_support")
(PUNCT ".")
(ID "customize_config_vars")
(PUNCT "(")
(ID "_CONFIG_VARS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vals")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "vals")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_CONFIG_VARS")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "vals")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_CONFIG_VARS")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_config_var")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of a single variable using the dictionary returned by\n    'get_config_vars()'.\n\n    Equivalent to get_config_vars().get(name)\n    ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "SO")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "SO is deprecated, use EXT_SUFFIX")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "get_config_vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a string that identifies the current platform.\n\n    This is used mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by 'os.uname()'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn't particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn't particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win-ia64 (64bit Windows on Itanium)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns 'sys.platform'.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(LIT " bit (")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "platform")
(NEWLINE)
(DEDENT)
(ID "j")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ")")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(ID "look")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ":")
(ID "j")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "look")
(PUNCT "==")
(LIT "amd64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "win-amd64")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "look")
(PUNCT "==")
(LIT "itanium")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "win-ia64")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "platform")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "posix")
(KEYWORD or)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "uname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "platform")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "_PYTHON_HOST_PLATFORM")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "_PYTHON_HOST_PLATFORM")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "osname")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "machine")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "osname")
(PUNCT "=")
(ID "osname")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "machine")
(PUNCT "=")
(ID "machine")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "machine")
(PUNCT "=")
(ID "machine")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "osname")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "==")
(LIT "linux")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s-%s")
(PUNCT "%")
(PUNCT "(")
(ID "osname")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "osname")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "==")
(LIT "sunos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "release")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ">=")
(LIT "5")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "osname")
(PUNCT "=")
(LIT "solaris")
(NEWLINE)
(ID "release")
(PUNCT "=")
(LIT "%d.%s")
(PUNCT "%")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "release")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "-")
(LIT 3)
(PUNCT ",")
(ID "release")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "bitness")
(PUNCT "=")
(PUNCT "{")
(LIT 2147483647)
(PUNCT ":")
(LIT "32bit")
(PUNCT ",")
(LIT 9223372036854775807)
(PUNCT ":")
(LIT "64bit")
(PUNCT "}")
(NEWLINE)
(ID "machine")
(PUNCT "+=")
(LIT ".%s")
(PUNCT "%")
(ID "bitness")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "osname")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "irix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s-%s")
(PUNCT "%")
(PUNCT "(")
(ID "osname")
(PUNCT ",")
(ID "release")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "osname")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(LIT "aix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s-%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "osname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "release")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "osname")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "==")
(LIT "cygwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "osname")
(PUNCT "=")
(LIT "cygwin")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "rel_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[\\d.]+")
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "rel_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "release")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "osname")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_osx_support")
(NEWLINE)
(ID "osname")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT "=")
(ID "_osx_support")
(PUNCT ".")
(ID "get_platform_osx")
(PUNCT "(")
(ID "get_config_vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "osname")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s-%s-%s")
(PUNCT "%")
(PUNCT "(")
(ID "osname")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_PY_VERSION_SHORT")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_print_dict")
(PUNCT "(")
(ID "title")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "index")
(PUNCT ",")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "sorted")
(PUNCT "(")
(ID "data")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "index")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%s: ")
(PUNCT "%")
(PUNCT "(")
(ID "title")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "\t%s = \"%s\"")
(PUNCT "%")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display all information sysconfig detains.")
(NEWLINE)
(KEYWORD if)
(LIT "--generate-posix-vars")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_generate_posix_vars")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "Platform: \"%s\"")
(PUNCT "%")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Python version: \"%s\"")
(PUNCT "%")
(ID "get_python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Current installation scheme: \"%s\"")
(PUNCT "%")
(ID "_get_default_scheme")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_print_dict")
(PUNCT "(")
(LIT "Paths")
(PUNCT ",")
(ID "get_paths")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_print_dict")
(PUNCT "(")
(LIT "Variables")
(PUNCT ",")
(ID "get_config_vars")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
