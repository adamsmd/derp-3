(LIT "\nAdditional handlers for the logging package for Python. The core package is\nbased on PEP 282 and comments thereto in comp.lang.python.\n\nCopyright (C) 2001-2013 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging.handlers' and log away!\n")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(PUNCT ",")
(ID "socket")
(PUNCT ",")
(ID "os")
(PUNCT ",")
(ID "pickle")
(PUNCT ",")
(ID "struct")
(PUNCT ",")
(ID "time")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "stat")
(KEYWORD import)
(ID "ST_DEV")
(PUNCT ",")
(ID "ST_INO")
(PUNCT ",")
(ID "ST_MTIME")
(NEWLINE)
(KEYWORD import)
(ID "queue")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "threading")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "DEFAULT_TCP_LOGGING_PORT")
(PUNCT "=")
(LIT 9020)
(NEWLINE)
(ID "DEFAULT_UDP_LOGGING_PORT")
(PUNCT "=")
(LIT 9021)
(NEWLINE)
(ID "DEFAULT_HTTP_LOGGING_PORT")
(PUNCT "=")
(LIT 9022)
(NEWLINE)
(ID "DEFAULT_SOAP_LOGGING_PORT")
(PUNCT "=")
(LIT 9023)
(NEWLINE)
(ID "SYSLOG_UDP_PORT")
(PUNCT "=")
(LIT 514)
(NEWLINE)
(ID "SYSLOG_TCP_PORT")
(PUNCT "=")
(LIT 514)
(NEWLINE)
(ID "_MIDNIGHT")
(PUNCT "=")
(LIT 24)
(PUNCT "*")
(LIT 60)
(PUNCT "*")
(LIT 60)
(NEWLINE)
(KEYWORD class)
(ID "BaseRotatingHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "FileHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Base class for handlers that rotate log files at a certain point.\n    Not meant to be instantiated directly.  Instead, use RotatingFileHandler\n    or TimedRotatingFileHandler.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Use the specified filename for streamed logging\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "FileHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "namer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rotator")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Output the record to the file, catering for rollover as described\n        in doRollover().\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "shouldRollover")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "doRollover")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "logging")
(PUNCT ".")
(ID "FileHandler")
(PUNCT ".")
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "rotation_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "default_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Modify the filename of a log file when rotating.\n\n        This is provided so that a custom filename can be provided.\n\n        The default implementation calls the 'namer' attribute of the\n        handler, if it's callable, passing the default name to\n        it. If the attribute isn't callable (the default is None), the name\n        is returned unchanged.\n\n        :param default_name: The default name for the log file.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "namer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "default_name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "namer")
(PUNCT "(")
(ID "default_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rotate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "dest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        When rotating, rotate the current log.\n\n        The default implementation calls the 'rotator' attribute of the\n        handler, if it's callable, passing the source and dest arguments to\n        it. If the attribute isn't callable (the default is None), the source\n        is simply renamed to the destination.\n\n        :param source: The source filename. This is normally the base\n                       filename, e.g. 'test.log'\n        :param dest:   The destination filename. This is normally\n                       what the source is rotated to, e.g. 'test.log.1'.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rotator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "rename")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "dest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rotator")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "dest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "RotatingFileHandler")
(PUNCT "(")
(ID "BaseRotatingHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Handler for logging to a set of files, which switches from one file\n    to the next when the current file reaches a certain size.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "a")
(PUNCT ",")
(ID "maxBytes")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "backupCount")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Open the specified file and use it as the stream for logging.\n\n        By default, the file grows indefinitely. You can specify particular\n        values of maxBytes and backupCount to allow the file to rollover at\n        a predetermined size.\n\n        Rollover occurs whenever the current log file is nearly maxBytes in\n        length. If backupCount is >= 1, the system will successively create\n        new files with the same pathname as the base file, but with extensions\n        \".1\", \".2\" etc. appended to it. For example, with a backupCount of 5\n        and a base file name of \"app.log\", you would get \"app.log\",\n        \"app.log.1\", \"app.log.2\", ... through to \"app.log.5\". The file being\n        written to is always \"app.log\" - when it gets filled up, it is closed\n        and renamed to \"app.log.1\", and if files \"app.log.1\", \"app.log.2\" etc.\n        exist, then they are renamed to \"app.log.2\", \"app.log.3\" etc.\n        respectively.\n\n        If maxBytes is zero, rollover never occurs.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "maxBytes")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT "a")
(NEWLINE)
(DEDENT)
(ID "BaseRotatingHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maxBytes")
(PUNCT "=")
(ID "maxBytes")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT "=")
(ID "backupCount")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "doRollover")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Do a rollover, as described in __init__().\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sfn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rotation_filename")
(PUNCT "(")
(LIT "%s.%d")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "dfn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rotation_filename")
(PUNCT "(")
(LIT "%s.%d")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT ",")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "sfn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "dfn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "dfn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "os")
(PUNCT ".")
(ID "rename")
(PUNCT "(")
(ID "sfn")
(PUNCT ",")
(ID "dfn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dfn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rotation_filename")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT "+")
(LIT ".1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "dfn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "dfn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rotate")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT ",")
(ID "dfn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "delay")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_open")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "shouldRollover")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Determine if rollover should occur.\n\n        Basically, see if the supplied record would cause the file to exceed\n        the size limit we have.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stream")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_open")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "maxBytes")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "%s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "maxBytes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TimedRotatingFileHandler")
(PUNCT "(")
(ID "BaseRotatingHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Handler for logging to a file, rotating the log file at certain timed\n    intervals.\n\n    If backupCount is > 0, when rollover is done, no more than backupCount\n    files are kept - the oldest ones are deleted.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "when")
(PUNCT "=")
(LIT "h")
(PUNCT ",")
(ID "interval")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "backupCount")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "utc")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "atTime")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BaseRotatingHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(LIT "a")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "=")
(ID "when")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT "=")
(ID "backupCount")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "utc")
(PUNCT "=")
(ID "utc")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "atTime")
(PUNCT "=")
(ID "atTime")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "S")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suffix")
(PUNCT "=")
(LIT "%Y-%m-%d_%H-%M-%S")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT "=")
(LIT "^\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}-\\d{2}(\\.\\w+)?$")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "M")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "=")
(LIT 60)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suffix")
(PUNCT "=")
(LIT "%Y-%m-%d_%H-%M")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT "=")
(LIT "^\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}(\\.\\w+)?$")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "H")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "=")
(LIT 60)
(PUNCT "*")
(LIT 60)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suffix")
(PUNCT "=")
(LIT "%Y-%m-%d_%H")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT "=")
(LIT "^\\d{4}-\\d{2}-\\d{2}_\\d{2}(\\.\\w+)?$")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "D")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "MIDNIGHT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "=")
(LIT 60)
(PUNCT "*")
(LIT 60)
(PUNCT "*")
(LIT 24)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suffix")
(PUNCT "=")
(LIT "%Y-%m-%d")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT "=")
(LIT "^\\d{4}-\\d{2}-\\d{2}(\\.\\w+)?$")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "W")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "=")
(LIT 60)
(PUNCT "*")
(LIT 60)
(PUNCT "*")
(LIT 24)
(PUNCT "*")
(LIT 7)
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "You must specify a day for weekly rollover from 0 to 6 (0 is Monday): %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "<")
(LIT "0")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ">")
(LIT "6")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid day specified for weekly rollover: %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "dayOfWeek")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suffix")
(PUNCT "=")
(LIT "%Y-%m-%d")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT "=")
(LIT "^\\d{4}-\\d{2}-\\d{2}(\\.\\w+)?$")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid rollover interval specified: %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "interval")
(PUNCT "*")
(ID "interval")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT "[")
(ID "ST_MTIME")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rolloverAt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "computeRollover")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "computeRollover")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "currentTime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Work out the rollover time based on the specified time.\n        ")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "currentTime")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "interval")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "MIDNIGHT")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "W")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "utc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "currentTime")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "currentTime")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "currentHour")
(PUNCT "=")
(ID "t")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "currentMinute")
(PUNCT "=")
(ID "t")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(NEWLINE)
(ID "currentSecond")
(PUNCT "=")
(ID "t")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(NEWLINE)
(ID "currentDay")
(PUNCT "=")
(ID "t")
(PUNCT "[")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "atTime")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rotate_ts")
(PUNCT "=")
(ID "_MIDNIGHT")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rotate_ts")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "atTime")
(PUNCT ".")
(ID "hour")
(PUNCT "*")
(LIT 60)
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "atTime")
(PUNCT ".")
(ID "minute")
(PUNCT ")")
(PUNCT "*")
(LIT 60)
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "atTime")
(PUNCT ".")
(ID "second")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "r")
(PUNCT "=")
(ID "rotate_ts")
(PUNCT "-")
(PUNCT "(")
(PUNCT "(")
(ID "currentHour")
(PUNCT "*")
(LIT 60)
(PUNCT "+")
(ID "currentMinute")
(PUNCT ")")
(PUNCT "*")
(LIT 60)
(PUNCT "+")
(ID "currentSecond")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "+=")
(ID "_MIDNIGHT")
(NEWLINE)
(ID "currentDay")
(PUNCT "=")
(PUNCT "(")
(ID "currentDay")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(LIT 7)
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "currentTime")
(PUNCT "+")
(ID "r")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "W")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "day")
(PUNCT "=")
(ID "currentDay")
(NEWLINE)
(KEYWORD if)
(ID "day")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "dayOfWeek")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "day")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "dayOfWeek")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "daysToWait")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dayOfWeek")
(PUNCT "-")
(ID "day")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "daysToWait")
(PUNCT "=")
(LIT 6)
(PUNCT "-")
(ID "day")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "dayOfWeek")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "newRolloverAt")
(PUNCT "=")
(ID "result")
(PUNCT "+")
(PUNCT "(")
(ID "daysToWait")
(PUNCT "*")
(PUNCT "(")
(LIT 60)
(PUNCT "*")
(LIT 60)
(PUNCT "*")
(LIT 24)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "utc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dstNow")
(PUNCT "=")
(ID "t")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "dstAtRollover")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "newRolloverAt")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dstNow")
(PUNCT "!=")
(ID "dstAtRollover")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dstNow")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addend")
(PUNCT "=")
(PUNCT "-")
(LIT 3600)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addend")
(PUNCT "=")
(LIT 3600)
(NEWLINE)
(DEDENT)
(ID "newRolloverAt")
(PUNCT "+=")
(ID "addend")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "newRolloverAt")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shouldRollover")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Determine if rollover should occur.\n\n        record is not used, as we are just comparing times, but it is needed so\n        the method signatures are the same\n        ")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "t")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "rolloverAt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getFilesToDelete")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Determine the files to delete when rolling over.\n\n        More specific than the earlier method, which just used glob.glob().\n        ")
(NEWLINE)
(ID "dirName")
(PUNCT ",")
(ID "baseName")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT ")")
(NEWLINE)
(ID "fileNames")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "dirName")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "baseName")
(PUNCT "+")
(LIT ".")
(NEWLINE)
(ID "plen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "fileName")
(KEYWORD in)
(ID "fileNames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fileName")
(PUNCT "[")
(PUNCT ":")
(ID "plen")
(PUNCT "]")
(PUNCT "==")
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffix")
(PUNCT "=")
(ID "fileName")
(PUNCT "[")
(ID "plen")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "extMatch")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirName")
(PUNCT ",")
(ID "fileName")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "result")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "doRollover")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        do a rollover; in this case, a date/time stamp is appended to the filename\n        when the rollover happens.  However, you want the file to be named for the\n        start of the interval, not the current time.  If there is a backup count,\n        then we have to get a list of matching filenames, sort them and remove\n        the one with the oldest suffix.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "currentTime")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "dstNow")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "currentTime")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rolloverAt")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "interval")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "utc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeTuple")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeTuple")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "dstThen")
(PUNCT "=")
(ID "timeTuple")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dstNow")
(PUNCT "!=")
(ID "dstThen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "dstNow")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addend")
(PUNCT "=")
(LIT 3600)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addend")
(PUNCT "=")
(PUNCT "-")
(LIT 3600)
(NEWLINE)
(DEDENT)
(ID "timeTuple")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "t")
(PUNCT "+")
(ID "addend")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dfn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rotation_filename")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "suffix")
(PUNCT ",")
(ID "timeTuple")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "dfn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "dfn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rotate")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT ",")
(ID "dfn")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "backupCount")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "getFilesToDelete")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "delay")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_open")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "newRolloverAt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "computeRollover")
(PUNCT "(")
(ID "currentTime")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "newRolloverAt")
(PUNCT "<=")
(ID "currentTime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newRolloverAt")
(PUNCT "=")
(ID "newRolloverAt")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "interval")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT "==")
(LIT "MIDNIGHT")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "when")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "W")
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "utc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dstAtRollover")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "newRolloverAt")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dstNow")
(PUNCT "!=")
(ID "dstAtRollover")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dstNow")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addend")
(PUNCT "=")
(PUNCT "-")
(LIT 3600)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addend")
(PUNCT "=")
(LIT 3600)
(NEWLINE)
(DEDENT)
(ID "newRolloverAt")
(PUNCT "+=")
(ID "addend")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rolloverAt")
(PUNCT "=")
(ID "newRolloverAt")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "WatchedFileHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "FileHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler for logging to a file, which watches the file\n    to see if it has changed while in use. This can happen because of\n    usage of programs such as newsyslog and logrotate which perform\n    log file rotation. This handler, intended for use under Unix,\n    watches the file to see if it has changed since the last emit.\n    (A file has changed if its device or inode have changed.)\n    If it has changed, the old file stream is closed, and the file\n    opened to get a new stream.\n\n    This handler is not appropriate for use under Windows, because\n    under Windows open files cannot be moved or renamed - logging\n    opens the files with exclusive locks - and so there is no need\n    for such a handler. Furthermore, ST_INO is not supported under\n    Windows; stat always returns zero for this value.\n\n    This handler is based on a suggestion and patch by Chad J.\n    Schroeder.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "a")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "FileHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dev")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "ino")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_statstream")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_statstream")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sres")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dev")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "ino")
(PUNCT "=")
(ID "sres")
(PUNCT "[")
(ID "ST_DEV")
(PUNCT "]")
(PUNCT ",")
(ID "sres")
(PUNCT "[")
(ID "ST_INO")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        First check if the underlying file has changed, and if it\n        has, close the old stream and reopen the file to get the\n        current stream.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sres")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "baseFilename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileNotFoundError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sres")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sres")
(KEYWORD or)
(ID "sres")
(PUNCT "[")
(ID "ST_DEV")
(PUNCT "]")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "dev")
(KEYWORD or)
(ID "sres")
(PUNCT "[")
(ID "ST_INO")
(PUNCT "]")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "ino")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stream")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stream")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_open")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_statstream")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "logging")
(PUNCT ".")
(ID "FileHandler")
(PUNCT ".")
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SocketHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler class which writes logging records, in pickle format, to\n    a streaming socket. The socket is kept open across logging calls.\n    If the peer resets it, an attempt is made to reconnect on the next call.\n    The pickle which is sent is that of the LogRecord's attribute dictionary\n    (__dict__), so that the receiver does not need to have the logging module\n    installed in order to process the logging event.\n\n    To unpickle the record at the receiving end into a LogRecord, use the\n    makeLogRecord function.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initializes the handler with a specific host address and port.\n\n        When the attribute *closeOnError* is set to True - if a socket error\n        occurs, the socket is silently closed and then reopened on the next\n        logging call.\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(KEYWORD if)
(ID "port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT "=")
(ID "host")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT "=")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "closeOnError")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retryTime")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retryStart")
(PUNCT "=")
(LIT 1.0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retryMax")
(PUNCT "=")
(LIT 30.0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retryFactor")
(PUNCT "=")
(LIT 2.0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makeSocket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        A factory method which allows subclasses to define the precise\n        type of socket they want.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "port")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "createSocket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Try to create a socket, using an exponential backoff with\n        a max retry time. Thanks to Robert Olson for the original patch\n        (SF #815911) which has been slightly refactored.\n        ")
(NEWLINE)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "retryTime")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attempt")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attempt")
(PUNCT "=")
(PUNCT "(")
(ID "now")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "retryTime")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "attempt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "makeSocket")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retryTime")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "retryTime")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "retryPeriod")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "retryStart")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "retryPeriod")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "retryPeriod")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "retryFactor")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "retryPeriod")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "retryMax")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "retryPeriod")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "retryMax")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "retryTime")
(PUNCT "=")
(ID "now")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "retryPeriod")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Send a pickled string to the socket.\n\n        This function allows for partial sends which can happen when the\n        network is busy.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "createSocket")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "makePickle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Pickles the record in binary format with a length prefix, and\n        returns it ready for transmission across the socket.\n        ")
(NEWLINE)
(ID "ei")
(PUNCT "=")
(ID "record")
(PUNCT ".")
(ID "exc_info")
(NEWLINE)
(KEYWORD if)
(ID "ei")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dummy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "record")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "[")
(LIT "msg")
(PUNCT "]")
(PUNCT "=")
(ID "record")
(PUNCT ".")
(ID "getMessage")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "[")
(LIT "args")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "d")
(PUNCT "[")
(LIT "exc_info")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "pickle")
(PUNCT ".")
(ID "dumps")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "slen")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">L")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "slen")
(PUNCT "+")
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handleError")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Handle an error during logging.\n\n        An error has occurred during logging. Most likely cause -\n        connection lost. Close the socket so that we can retry on the\n        next event.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closeOnError")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Pickles the record and writes it to the socket in binary format.\n        If there is an error with the socket, silently drop the packet.\n        If there was a problem with the socket, re-establishes the\n        socket.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "makePickle")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Closes the socket.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DatagramHandler")
(PUNCT "(")
(ID "SocketHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler class which writes logging records, in pickle format, to\n    a datagram socket.  The pickle which is sent is that of the LogRecord's\n    attribute dictionary (__dict__), so that the receiver does not need to\n    have the logging module installed in order to process the logging event.\n\n    To unpickle the record at the receiving end into a LogRecord, use the\n    makeLogRecord function.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initializes the handler with a specific host address and port.\n        ")
(NEWLINE)
(ID "SocketHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "closeOnError")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makeSocket")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        The factory method of SocketHandler is here overridden to create\n        a UDP socket (SOCK_DGRAM).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "family")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "family")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AF_INET")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "family")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SOCK_DGRAM")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Send a pickled string to a socket.\n\n        This function no longer allows for partial sends which can happen\n        when the network is busy - UDP does not guarantee delivery and\n        can deliver packets out of sequence.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "createSocket")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendto")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SysLogHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler class which sends formatted logging records to a syslog\n    server. Based on Sam Rushing's syslog module:\n    http://www.nightmare.com/squirl/python-ext/misc/syslog.py\n    Contributed by Nicolas Untz (after which minor refactoring changes\n    have been made).\n    ")
(NEWLINE)
(ID "LOG_EMERG")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "LOG_ALERT")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "LOG_CRIT")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "LOG_ERR")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "LOG_WARNING")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "LOG_NOTICE")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "LOG_INFO")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "LOG_DEBUG")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "LOG_KERN")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "LOG_USER")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "LOG_MAIL")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "LOG_DAEMON")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "LOG_AUTH")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "LOG_SYSLOG")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "LOG_LPR")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "LOG_NEWS")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "LOG_UUCP")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "LOG_CRON")
(PUNCT "=")
(LIT 9)
(NEWLINE)
(ID "LOG_AUTHPRIV")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(ID "LOG_FTP")
(PUNCT "=")
(LIT 11)
(NEWLINE)
(ID "LOG_LOCAL0")
(PUNCT "=")
(LIT 16)
(NEWLINE)
(ID "LOG_LOCAL1")
(PUNCT "=")
(LIT 17)
(NEWLINE)
(ID "LOG_LOCAL2")
(PUNCT "=")
(LIT 18)
(NEWLINE)
(ID "LOG_LOCAL3")
(PUNCT "=")
(LIT 19)
(NEWLINE)
(ID "LOG_LOCAL4")
(PUNCT "=")
(LIT 20)
(NEWLINE)
(ID "LOG_LOCAL5")
(PUNCT "=")
(LIT 21)
(NEWLINE)
(ID "LOG_LOCAL6")
(PUNCT "=")
(LIT 22)
(NEWLINE)
(ID "LOG_LOCAL7")
(PUNCT "=")
(LIT 23)
(NEWLINE)
(ID "priority_names")
(PUNCT "=")
(PUNCT "{")
(LIT "alert")
(PUNCT ":")
(ID "LOG_ALERT")
(PUNCT ",")
(LIT "crit")
(PUNCT ":")
(ID "LOG_CRIT")
(PUNCT ",")
(LIT "critical")
(PUNCT ":")
(ID "LOG_CRIT")
(PUNCT ",")
(LIT "debug")
(PUNCT ":")
(ID "LOG_DEBUG")
(PUNCT ",")
(LIT "emerg")
(PUNCT ":")
(ID "LOG_EMERG")
(PUNCT ",")
(LIT "err")
(PUNCT ":")
(ID "LOG_ERR")
(PUNCT ",")
(LIT "error")
(PUNCT ":")
(ID "LOG_ERR")
(PUNCT ",")
(LIT "info")
(PUNCT ":")
(ID "LOG_INFO")
(PUNCT ",")
(LIT "notice")
(PUNCT ":")
(ID "LOG_NOTICE")
(PUNCT ",")
(LIT "panic")
(PUNCT ":")
(ID "LOG_EMERG")
(PUNCT ",")
(LIT "warn")
(PUNCT ":")
(ID "LOG_WARNING")
(PUNCT ",")
(LIT "warning")
(PUNCT ":")
(ID "LOG_WARNING")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "facility_names")
(PUNCT "=")
(PUNCT "{")
(LIT "auth")
(PUNCT ":")
(ID "LOG_AUTH")
(PUNCT ",")
(LIT "authpriv")
(PUNCT ":")
(ID "LOG_AUTHPRIV")
(PUNCT ",")
(LIT "cron")
(PUNCT ":")
(ID "LOG_CRON")
(PUNCT ",")
(LIT "daemon")
(PUNCT ":")
(ID "LOG_DAEMON")
(PUNCT ",")
(LIT "ftp")
(PUNCT ":")
(ID "LOG_FTP")
(PUNCT ",")
(LIT "kern")
(PUNCT ":")
(ID "LOG_KERN")
(PUNCT ",")
(LIT "lpr")
(PUNCT ":")
(ID "LOG_LPR")
(PUNCT ",")
(LIT "mail")
(PUNCT ":")
(ID "LOG_MAIL")
(PUNCT ",")
(LIT "news")
(PUNCT ":")
(ID "LOG_NEWS")
(PUNCT ",")
(LIT "security")
(PUNCT ":")
(ID "LOG_AUTH")
(PUNCT ",")
(LIT "syslog")
(PUNCT ":")
(ID "LOG_SYSLOG")
(PUNCT ",")
(LIT "user")
(PUNCT ":")
(ID "LOG_USER")
(PUNCT ",")
(LIT "uucp")
(PUNCT ":")
(ID "LOG_UUCP")
(PUNCT ",")
(LIT "local0")
(PUNCT ":")
(ID "LOG_LOCAL0")
(PUNCT ",")
(LIT "local1")
(PUNCT ":")
(ID "LOG_LOCAL1")
(PUNCT ",")
(LIT "local2")
(PUNCT ":")
(ID "LOG_LOCAL2")
(PUNCT ",")
(LIT "local3")
(PUNCT ":")
(ID "LOG_LOCAL3")
(PUNCT ",")
(LIT "local4")
(PUNCT ":")
(ID "LOG_LOCAL4")
(PUNCT ",")
(LIT "local5")
(PUNCT ":")
(ID "LOG_LOCAL5")
(PUNCT ",")
(LIT "local6")
(PUNCT ":")
(ID "LOG_LOCAL6")
(PUNCT ",")
(LIT "local7")
(PUNCT ":")
(ID "LOG_LOCAL7")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "priority_map")
(PUNCT "=")
(PUNCT "{")
(LIT "DEBUG")
(PUNCT ":")
(LIT "debug")
(PUNCT ",")
(LIT "INFO")
(PUNCT ":")
(LIT "info")
(PUNCT ",")
(LIT "WARNING")
(PUNCT ":")
(LIT "warning")
(PUNCT ",")
(LIT "ERROR")
(PUNCT ":")
(LIT "error")
(PUNCT ",")
(LIT "CRITICAL")
(PUNCT ":")
(LIT "critical")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "address")
(PUNCT "=")
(PUNCT "(")
(LIT "localhost")
(PUNCT ",")
(ID "SYSLOG_UDP_PORT")
(PUNCT ")")
(PUNCT ",")
(ID "facility")
(PUNCT "=")
(ID "LOG_USER")
(PUNCT ",")
(ID "socktype")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initialize a handler.\n\n        If address is specified as a string, a UNIX socket is used. To log to a\n        local syslogd, \"SysLogHandler(address=\"/dev/log\")\" can be used.\n        If facility is not specified, LOG_USER is used. If socktype is\n        specified as socket.SOCK_DGRAM or socket.SOCK_STREAM, that specific\n        socket type will be used. For Unix sockets, you can also specify a\n        socktype of None, in which case socket.SOCK_DGRAM will be used, falling\n        back to socket.SOCK_STREAM.\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT "=")
(ID "address")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "facility")
(PUNCT "=")
(ID "facility")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "socktype")
(PUNCT "=")
(ID "socktype")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "address")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "unixsocket")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connect_unixsocket")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "unixsocket")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "socktype")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socktype")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_DGRAM")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_INET")
(PUNCT ",")
(ID "socktype")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "socktype")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "socktype")
(PUNCT "=")
(ID "socktype")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "formatter")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_connect_unixsocket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "use_socktype")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "socktype")
(NEWLINE)
(KEYWORD if)
(ID "use_socktype")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "use_socktype")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_DGRAM")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "use_socktype")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "socktype")
(PUNCT "=")
(ID "use_socktype")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "socktype")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "use_socktype")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "use_socktype")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "socktype")
(PUNCT "=")
(ID "use_socktype")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "encodePriority")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "facility")
(PUNCT ",")
(ID "priority")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Encode the facility and priority. You can pass in strings or\n        integers - if strings are passed, the facility_names and\n        priority_names mapping dictionaries are used to convert them to\n        integers.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "facility")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "facility")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "facility_names")
(PUNCT "[")
(ID "facility")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "priority")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "priority")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "priority_names")
(PUNCT "[")
(ID "priority")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "facility")
(PUNCT "<<")
(LIT 3)
(PUNCT ")")
(PUNCT "|")
(ID "priority")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Closes the socket.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "mapPriority")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "levelName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Map a logging level name to a key in the priority_names map.\n        This is useful in two scenarios: when custom levels are being\n        used, and in the case where you can't do a straightforward\n        mapping by lowercasing the logging level name because of locale-\n        specific issues (see SF #1524081).\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "priority_map")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "levelName")
(PUNCT ",")
(LIT "warning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ident")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "append_nul")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        The record is formatted, and then sent to the syslog server. If\n        exception information is present, it is NOT sent to the server.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ident")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ident")
(PUNCT "+")
(ID "msg")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "append_nul")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "+=")
(LIT "\u0000")
(NEWLINE)
(DEDENT)
(ID "prio")
(PUNCT "=")
(LIT "<%d>")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "encodePriority")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "facility")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "mapPriority")
(PUNCT "(")
(ID "record")
(PUNCT ".")
(ID "levelname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "prio")
(PUNCT "=")
(ID "prio")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "prio")
(PUNCT "+")
(ID "msg")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "unixsocket")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connect_unixsocket")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "socktype")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "SOCK_DGRAM")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "sendto")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SMTPHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler class which sends an SMTP email for each logging event.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mailhost")
(PUNCT ",")
(ID "fromaddr")
(PUNCT ",")
(ID "toaddrs")
(PUNCT ",")
(ID "subject")
(PUNCT ",")
(ID "credentials")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "secure")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(LIT 5.0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initialize the handler.\n\n        Initialize the instance with the from and to addresses and subject\n        line of the email. To specify a non-standard SMTP port, use the\n        (host, port) tuple format for the mailhost argument. To specify\n        authentication credentials, supply a (username, password) tuple\n        for the credentials argument. To specify the use of a secure\n        protocol (TLS), pass in a tuple for the secure argument. This will\n        only be used when authentication credentials are supplied. The tuple\n        will be either an empty tuple, or a single-value tuple with the name\n        of a keyfile, or a 2-value tuple with the names of the keyfile and\n        certificate file. (This tuple is passed to the `starttls` method).\n        A timeout in seconds can be specified for the SMTP connection (the\n        default is one second).\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "mailhost")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "mailhost")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "mailport")
(PUNCT "=")
(ID "mailhost")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "mailhost")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "mailport")
(PUNCT "=")
(ID "mailhost")
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "credentials")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "username")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT "=")
(ID "credentials")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "username")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fromaddr")
(PUNCT "=")
(ID "fromaddr")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "toaddrs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toaddrs")
(PUNCT "=")
(PUNCT "[")
(ID "toaddrs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "toaddrs")
(PUNCT "=")
(ID "toaddrs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "subject")
(PUNCT "=")
(ID "subject")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "secure")
(PUNCT "=")
(ID "secure")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getSubject")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Determine the subject for the email.\n\n        If you want to specify a subject line which is record-dependent,\n        override this method.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "subject")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Format the record and send it to the specified addressees.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "smtplib")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "utils")
(KEYWORD import)
(ID "formatdate")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mailport")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "smtplib")
(PUNCT ".")
(ID "SMTP_PORT")
(NEWLINE)
(DEDENT)
(ID "smtp")
(PUNCT "=")
(ID "smtplib")
(PUNCT ".")
(ID "SMTP")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mailhost")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "From: %s\r\nTo: %s\r\nSubject: %s\r\nDate: %s\r\n\r\n%s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fromaddr")
(PUNCT ",")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "toaddrs")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getSubject")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(PUNCT ",")
(ID "formatdate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "username")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "secure")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smtp")
(PUNCT ".")
(ID "ehlo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "smtp")
(PUNCT ".")
(ID "starttls")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "secure")
(PUNCT ")")
(NEWLINE)
(ID "smtp")
(PUNCT ".")
(ID "ehlo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "smtp")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "username")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "smtp")
(PUNCT ".")
(ID "sendmail")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fromaddr")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "toaddrs")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "smtp")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NTEventLogHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler class which sends events to the NT Event Log. Adds a\n    registry entry for the specified application name. If no dllname is\n    provided, win32service.pyd (which contains some basic message\n    placeholders) is used. Note that use of these placeholders will make\n    your event logs big, as the entire message source is held in the log.\n    If you want slimmer logs, you have to pass in the name of your own DLL\n    which contains the message definitions you want to use in the event log.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "appname")
(PUNCT ",")
(ID "dllname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "logtype")
(PUNCT "=")
(LIT "Application")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "win32evtlogutil")
(PUNCT ",")
(ID "win32evtlog")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "appname")
(PUNCT "=")
(ID "appname")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_welu")
(PUNCT "=")
(ID "win32evtlogutil")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dllname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dllname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_welu")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(ID "dllname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "dllname")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "dllname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dllname")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "win32service.pyd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "dllname")
(PUNCT "=")
(ID "dllname")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "logtype")
(PUNCT "=")
(ID "logtype")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_welu")
(PUNCT ".")
(ID "AddSourceToRegistry")
(PUNCT "(")
(ID "appname")
(PUNCT ",")
(ID "dllname")
(PUNCT ",")
(ID "logtype")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "deftype")
(PUNCT "=")
(ID "win32evtlog")
(PUNCT ".")
(ID "EVENTLOG_ERROR_TYPE")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "typemap")
(PUNCT "=")
(PUNCT "{")
(ID "logging")
(PUNCT ".")
(ID "DEBUG")
(PUNCT ":")
(ID "win32evtlog")
(PUNCT ".")
(ID "EVENTLOG_INFORMATION_TYPE")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "INFO")
(PUNCT ":")
(ID "win32evtlog")
(PUNCT ".")
(ID "EVENTLOG_INFORMATION_TYPE")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "WARNING")
(PUNCT ":")
(ID "win32evtlog")
(PUNCT ".")
(ID "EVENTLOG_WARNING_TYPE")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "ERROR")
(PUNCT ":")
(ID "win32evtlog")
(PUNCT ".")
(ID "EVENTLOG_ERROR_TYPE")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "CRITICAL")
(PUNCT ":")
(ID "win32evtlog")
(PUNCT ".")
(ID "EVENTLOG_ERROR_TYPE")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "The Python Win32 extensions for NT (service, event ")
(LIT "logging) appear not to be available.")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_welu")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getMessageID")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the message ID for the event record. If you are using your\n        own messages, you could do this by having the msg passed to the\n        logger being an ID rather than a formatting string. Then, in here,\n        you could use a dictionary lookup to get the message ID. This\n        version returns 1, which is the base message ID in win32service.pyd.\n        ")
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getEventCategory")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the event category for the record.\n\n        Override this if you want to specify your own categories. This version\n        returns 0.\n        ")
(NEWLINE)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getEventType")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Return the event type for the record.\n\n        Override this if you want to specify your own types. This version does\n        a mapping using the handler's typemap attribute, which is set up in\n        __init__() to a dictionary which contains mappings for DEBUG, INFO,\n        WARNING, ERROR and CRITICAL. If you are using your own levels you will\n        either need to override this method or place a suitable dictionary in\n        the handler's typemap attribute.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "typemap")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "record")
(PUNCT ".")
(ID "levelno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "deftype")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Determine the message ID, event category and event type. Then\n        log the message in the NT event log.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_welu")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "id")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getMessageID")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "cat")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getEventCategory")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "type")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getEventType")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_welu")
(PUNCT ".")
(ID "ReportEvent")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "appname")
(PUNCT ",")
(ID "id")
(PUNCT ",")
(ID "cat")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(PUNCT "[")
(ID "msg")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Clean up this handler.\n\n        You can remove the application name from the registry as a\n        source of event log entries. However, if you do this, you will\n        not be able to see the events as you intended in the Event Log\n        Viewer - it needs to be able to access the registry to get the\n        DLL name.\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A class which sends records to a Web server, using either GET or\n    POST semantics.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(LIT "GET")
(PUNCT ",")
(ID "secure")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "credentials")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initialize the instance with the host, the request URL, and the method\n        (\"GET\" or \"POST\")\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "method")
(PUNCT "=")
(ID "method")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "method")
(KEYWORD not)
(KEYWORD in)
(PUNCT "[")
(LIT "GET")
(PUNCT ",")
(LIT "POST")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "method must be GET or POST")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "secure")
(KEYWORD and)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context parameter only makes sense ")
(LIT "with secure=True")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "url")
(PUNCT "=")
(ID "url")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "method")
(PUNCT "=")
(ID "method")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "secure")
(PUNCT "=")
(ID "secure")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "credentials")
(PUNCT "=")
(ID "credentials")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mapLogRecord")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Default implementation of mapping the log record into a dict\n        that is sent as the CGI data. Overwrite in your class.\n        Contributed by Franz Glasner.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "record")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Send the record to the Web server as a percent-encoded dictionary\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ",")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "secure")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT "=")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPSConnection")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT "=")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPConnection")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "url")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "url")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "urlencode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mapLogRecord")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "method")
(PUNCT "==")
(LIT "GET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "url")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "?")
(PUNCT ")")
(PUNCT ">=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "&")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "?")
(NEWLINE)
(DEDENT)
(ID "url")
(PUNCT "=")
(ID "url")
(PUNCT "+")
(LIT "%c%s")
(PUNCT "%")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "putrequest")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "method")
(PUNCT "==")
(LIT "POST")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "application/x-www-form-urlencoded")
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "credentials")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "base64")
(NEWLINE)
(ID "s")
(PUNCT "=")
(PUNCT "(")
(LIT "u%s:%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "credentials")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT "Basic ")
(PUNCT "+")
(ID "base64")
(PUNCT ".")
(ID "b64encode")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Authorization")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "endheaders")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "method")
(PUNCT "==")
(LIT "POST")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "getresponse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BufferingHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n  A handler class which buffers logging records in memory. Whenever each\n  record is added to the buffer, a check is made to see if the buffer should\n  be flushed. If it should, then flush() is expected to do what's needed.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "capacity")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initialize the handler with the buffer size.\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "capacity")
(PUNCT "=")
(ID "capacity")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shouldFlush")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Should the handler flush its buffer?\n\n        Returns true if the buffer is up to capacity. This method can be\n        overridden to implement custom flushing strategies.\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "capacity")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Append the record. If shouldFlush() tells us to, call flush() to process\n        the buffer.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "shouldFlush")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Override to implement custom flushing behaviour.\n\n        This version just zaps the buffer to empty.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Close the handler.\n\n        This version just flushes and chains to the parent class' close().\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MemoryHandler")
(PUNCT "(")
(ID "BufferingHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A handler class which buffers logging records in memory, periodically\n    flushing them to a target handler. Flushing occurs whenever the buffer\n    is full, or when an event of a certain severity or greater is seen.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "capacity")
(PUNCT ",")
(ID "flushLevel")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "ERROR")
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initialize the handler with the buffer size, the level at which\n        flushing should occur and an optional target.\n\n        Note that without a target being set either here or via setTarget(),\n        a MemoryHandler is no use to anyone!\n        ")
(NEWLINE)
(ID "BufferingHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "capacity")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flushLevel")
(PUNCT "=")
(ID "flushLevel")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT "=")
(ID "target")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shouldFlush")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Check for buffer full or a record at the flushLevel or higher.\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "capacity")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "record")
(PUNCT ".")
(ID "levelno")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "flushLevel")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setTarget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Set the target handler for this handler.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT "=")
(ID "target")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        For a MemoryHandler, flushing means just sending the buffered\n        records to the target, if there is one. Override if you want\n        different behaviour.\n\n        The record buffer is also cleared by this operation.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "record")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Flush, set the target to None and lose the buffer.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "BufferingHandler")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "QueueHandler")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    This handler sends events to a queue. Typically, it would be used together\n    with a multiprocessing Queue to centralise logging to file in one process\n    (in a multi-process application), so as to avoid file write contention\n    between processes.\n\n    This code is new in Python 3.2, but this class can be copy pasted into\n    user code for use with earlier Python versions.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Initialise an instance, using the passed queue.\n        ")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT "=")
(ID "queue")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "enqueue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Enqueue a record.\n\n        The base implementation uses put_nowait. You may want to override\n        this method if you want to use blocking, timeouts or custom queue\n        implementations.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "put_nowait")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prepare")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Prepares a record for queuing. The object returned by this method is\n        enqueued.\n\n        The base implementation formats the record to merge the message\n        and arguments, and removes unpickleable items from the record\n        in-place.\n\n        You might want to override this method if you want to convert\n        the record to a dict or JSON string, or send a modified copy\n        of the record while leaving the original intact.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(ID "record")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "record")
(PUNCT ".")
(ID "message")
(NEWLINE)
(ID "record")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "record")
(PUNCT ".")
(ID "exc_info")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "record")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "emit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Emit a record.\n\n        Writes the LogRecord to the queue, preparing it for pickling first.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "enqueue")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "prepare")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handleError")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "threading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "QueueListener")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        This class implements an internal threaded listener which watches for\n        LogRecords being added to a queue, removes them and passes them to a\n        list of handlers for processing.\n        ")
(NEWLINE)
(ID "_sentinel")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "queue")
(PUNCT ",")
(PUNCT "*")
(ID "handlers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Initialise an instance with the specified queue and\n            handlers.\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT "=")
(ID "queue")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlers")
(PUNCT "=")
(ID "handlers")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_stop")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Event")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_thread")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dequeue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "block")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Dequeue a record and return it, optionally blocking.\n\n            The base implementation uses get. You may want to override this method\n            if you want to use timeouts or work with custom queue implementations.\n            ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "block")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "start")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Start the listener.\n\n            This starts up a background thread to monitor the queue for\n            LogRecords to process.\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_thread")
(PUNCT "=")
(ID "t")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_monitor")
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "setDaemon")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prepare")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Prepare a record for handling.\n\n            This method just returns the passed-in record. You may want to\n            override this method if you need to do any custom marshalling or\n            manipulation of the record before passing it to the handlers.\n            ")
(NEWLINE)
(KEYWORD return)
(ID "record")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "record")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Handle a record.\n\n            This just loops through the handlers offering them the record\n            to handle.\n            ")
(NEWLINE)
(ID "record")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "prepare")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "handler")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_monitor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Monitor the queue for records, and ask the handler\n            to deal with them.\n\n            This method runs on a separate, internal thread.\n            The thread will terminate if it sees a sentinel object in the queue.\n            ")
(NEWLINE)
(ID "q")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "queue")
(NEWLINE)
(ID "has_task_done")
(PUNCT "=")
(ID "hasattr")
(PUNCT "(")
(ID "q")
(PUNCT ",")
(LIT "task_done")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_stop")
(PUNCT ".")
(ID "isSet")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "record")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dequeue")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "record")
(KEYWORD is)
(ID "self")
(PUNCT ".")
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "has_task_done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "task_done")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "queue")
(PUNCT ".")
(ID "Empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "record")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dequeue")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "record")
(KEYWORD is)
(ID "self")
(PUNCT ".")
(ID "_sentinel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "handle")
(PUNCT "(")
(ID "record")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "has_task_done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "task_done")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "queue")
(PUNCT ".")
(ID "Empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "enqueue_sentinel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            This is used to enqueue the sentinel record.\n\n            The base implementation uses put_nowait. You may want to override this\n            method if you want to use timeouts or work with custom queue\n            implementations.\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "put_nowait")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_sentinel")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Stop the listener.\n\n            This asks the thread to terminate, and then waits for it to do so.\n            Note that if you don't call this before your application exits, there\n            may be some records still left on the queue, which won't be processed.\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_stop")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "enqueue_sentinel")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_thread")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_thread")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
