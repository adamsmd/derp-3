(LIT "Create portable serialized representations of Python objects.\n\nSee module copyreg for a mechanism for registering custom picklers.\nSee module pickletools source for extensive comments.\n\nClasses:\n\n    Pickler\n    Unpickler\n\nFunctions:\n\n    dump(object, file)\n    dumps(object) -> string\n    load(file) -> object\n    loads(string) -> object\n\nMisc variables:\n\n    __version__\n    format_version\n    compatible_formats\n\n")
(NEWLINE)
(KEYWORD from)
(ID "types")
(KEYWORD import)
(ID "FunctionType")
(NEWLINE)
(KEYWORD from)
(ID "copyreg")
(KEYWORD import)
(ID "dispatch_table")
(NEWLINE)
(KEYWORD from)
(ID "copyreg")
(KEYWORD import)
(ID "_extension_registry")
(PUNCT ",")
(ID "_inverted_registry")
(PUNCT ",")
(ID "_extension_cache")
(NEWLINE)
(KEYWORD from)
(ID "itertools")
(KEYWORD import)
(ID "islice")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "sys")
(KEYWORD import)
(ID "maxsize")
(NEWLINE)
(KEYWORD from)
(ID "struct")
(KEYWORD import)
(ID "pack")
(PUNCT ",")
(ID "unpack")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "codecs")
(NEWLINE)
(KEYWORD import)
(ID "_compat_pickle")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "PickleError")
(PUNCT ",")
(LIT "PicklingError")
(PUNCT ",")
(LIT "UnpicklingError")
(PUNCT ",")
(LIT "Pickler")
(PUNCT ",")
(LIT "Unpickler")
(PUNCT ",")
(LIT "dump")
(PUNCT ",")
(LIT "dumps")
(PUNCT ",")
(LIT "load")
(PUNCT ",")
(LIT "loads")
(PUNCT "]")
(NEWLINE)
(ID "bytes_types")
(PUNCT "=")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(NEWLINE)
(ID "format_version")
(PUNCT "=")
(LIT "4.0")
(NEWLINE)
(ID "compatible_formats")
(PUNCT "=")
(PUNCT "[")
(LIT "1.0")
(PUNCT ",")
(LIT "1.1")
(PUNCT ",")
(LIT "1.2")
(PUNCT ",")
(LIT "1.3")
(PUNCT ",")
(LIT "2.0")
(PUNCT ",")
(LIT "3.0")
(PUNCT ",")
(LIT "4.0")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "HIGHEST_PROTOCOL")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "DEFAULT_PROTOCOL")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(KEYWORD class)
(ID "PickleError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A common base class for the other pickling exceptions.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "PicklingError")
(PUNCT "(")
(ID "PickleError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This exception is raised when an unpicklable object is passed to the\n    dump() method.\n\n    ")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "UnpicklingError")
(PUNCT "(")
(ID "PickleError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This exception is raised when there is a problem unpickling an object,\n    such as a security violation.\n\n    Note that other exceptions may also be raised during unpickling, including\n    (but not necessarily limited to) AttributeError, EOFError, ImportError,\n    and IndexError.\n\n    ")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Stop")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "org")
(PUNCT ".")
(ID "python")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "PyStringMap")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PyStringMap")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "MARK")
(PUNCT "=")
(LIT #"(")
(NEWLINE)
(ID "STOP")
(PUNCT "=")
(LIT #".")
(NEWLINE)
(ID "POP")
(PUNCT "=")
(LIT #"0")
(NEWLINE)
(ID "POP_MARK")
(PUNCT "=")
(LIT #"1")
(NEWLINE)
(ID "DUP")
(PUNCT "=")
(LIT #"2")
(NEWLINE)
(ID "FLOAT")
(PUNCT "=")
(LIT #"F")
(NEWLINE)
(ID "INT")
(PUNCT "=")
(LIT #"I")
(NEWLINE)
(ID "BININT")
(PUNCT "=")
(LIT #"J")
(NEWLINE)
(ID "BININT1")
(PUNCT "=")
(LIT #"K")
(NEWLINE)
(ID "LONG")
(PUNCT "=")
(LIT #"L")
(NEWLINE)
(ID "BININT2")
(PUNCT "=")
(LIT #"M")
(NEWLINE)
(ID "NONE")
(PUNCT "=")
(LIT #"N")
(NEWLINE)
(ID "PERSID")
(PUNCT "=")
(LIT #"P")
(NEWLINE)
(ID "BINPERSID")
(PUNCT "=")
(LIT #"Q")
(NEWLINE)
(ID "REDUCE")
(PUNCT "=")
(LIT #"R")
(NEWLINE)
(ID "STRING")
(PUNCT "=")
(LIT #"S")
(NEWLINE)
(ID "BINSTRING")
(PUNCT "=")
(LIT #"T")
(NEWLINE)
(ID "SHORT_BINSTRING")
(PUNCT "=")
(LIT #"U")
(NEWLINE)
(ID "UNICODE")
(PUNCT "=")
(LIT #"V")
(NEWLINE)
(ID "BINUNICODE")
(PUNCT "=")
(LIT #"X")
(NEWLINE)
(ID "APPEND")
(PUNCT "=")
(LIT #"a")
(NEWLINE)
(ID "BUILD")
(PUNCT "=")
(LIT #"b")
(NEWLINE)
(ID "GLOBAL")
(PUNCT "=")
(LIT #"c")
(NEWLINE)
(ID "DICT")
(PUNCT "=")
(LIT #"d")
(NEWLINE)
(ID "EMPTY_DICT")
(PUNCT "=")
(LIT #"}")
(NEWLINE)
(ID "APPENDS")
(PUNCT "=")
(LIT #"e")
(NEWLINE)
(ID "GET")
(PUNCT "=")
(LIT #"g")
(NEWLINE)
(ID "BINGET")
(PUNCT "=")
(LIT #"h")
(NEWLINE)
(ID "INST")
(PUNCT "=")
(LIT #"i")
(NEWLINE)
(ID "LONG_BINGET")
(PUNCT "=")
(LIT #"j")
(NEWLINE)
(ID "LIST")
(PUNCT "=")
(LIT #"l")
(NEWLINE)
(ID "EMPTY_LIST")
(PUNCT "=")
(LIT #"]")
(NEWLINE)
(ID "OBJ")
(PUNCT "=")
(LIT #"o")
(NEWLINE)
(ID "PUT")
(PUNCT "=")
(LIT #"p")
(NEWLINE)
(ID "BINPUT")
(PUNCT "=")
(LIT #"q")
(NEWLINE)
(ID "LONG_BINPUT")
(PUNCT "=")
(LIT #"r")
(NEWLINE)
(ID "SETITEM")
(PUNCT "=")
(LIT #"s")
(NEWLINE)
(ID "TUPLE")
(PUNCT "=")
(LIT #"t")
(NEWLINE)
(ID "EMPTY_TUPLE")
(PUNCT "=")
(LIT #")")
(NEWLINE)
(ID "SETITEMS")
(PUNCT "=")
(LIT #"u")
(NEWLINE)
(ID "BINFLOAT")
(PUNCT "=")
(LIT #"G")
(NEWLINE)
(ID "TRUE")
(PUNCT "=")
(LIT #"I01\n")
(NEWLINE)
(ID "FALSE")
(PUNCT "=")
(LIT #"I00\n")
(NEWLINE)
(ID "PROTO")
(PUNCT "=")
(LIT #"\200")
(NEWLINE)
(ID "NEWOBJ")
(PUNCT "=")
(LIT #"\201")
(NEWLINE)
(ID "EXT1")
(PUNCT "=")
(LIT #"\202")
(NEWLINE)
(ID "EXT2")
(PUNCT "=")
(LIT #"\203")
(NEWLINE)
(ID "EXT4")
(PUNCT "=")
(LIT #"\204")
(NEWLINE)
(ID "TUPLE1")
(PUNCT "=")
(LIT #"\205")
(NEWLINE)
(ID "TUPLE2")
(PUNCT "=")
(LIT #"\206")
(NEWLINE)
(ID "TUPLE3")
(PUNCT "=")
(LIT #"\207")
(NEWLINE)
(ID "NEWTRUE")
(PUNCT "=")
(LIT #"\210")
(NEWLINE)
(ID "NEWFALSE")
(PUNCT "=")
(LIT #"\211")
(NEWLINE)
(ID "LONG1")
(PUNCT "=")
(LIT #"\212")
(NEWLINE)
(ID "LONG4")
(PUNCT "=")
(LIT #"\213")
(NEWLINE)
(ID "_tuplesize2code")
(PUNCT "=")
(PUNCT "[")
(ID "EMPTY_TUPLE")
(PUNCT ",")
(ID "TUPLE1")
(PUNCT ",")
(ID "TUPLE2")
(PUNCT ",")
(ID "TUPLE3")
(PUNCT "]")
(NEWLINE)
(ID "BINBYTES")
(PUNCT "=")
(LIT #"B")
(NEWLINE)
(ID "SHORT_BINBYTES")
(PUNCT "=")
(LIT #"C")
(NEWLINE)
(ID "SHORT_BINUNICODE")
(PUNCT "=")
(LIT #"\214")
(NEWLINE)
(ID "BINUNICODE8")
(PUNCT "=")
(LIT #"\215")
(NEWLINE)
(ID "BINBYTES8")
(PUNCT "=")
(LIT #"\216")
(NEWLINE)
(ID "EMPTY_SET")
(PUNCT "=")
(LIT #"\217")
(NEWLINE)
(ID "ADDITEMS")
(PUNCT "=")
(LIT #"\220")
(NEWLINE)
(ID "FROZENSET")
(PUNCT "=")
(LIT #"\221")
(NEWLINE)
(ID "NEWOBJ_EX")
(PUNCT "=")
(LIT #"\222")
(NEWLINE)
(ID "STACK_GLOBAL")
(PUNCT "=")
(LIT #"\223")
(NEWLINE)
(ID "MEMOIZE")
(PUNCT "=")
(LIT #"\224")
(NEWLINE)
(ID "FRAME")
(PUNCT "=")
(LIT #"\225")
(NEWLINE)
(ID "__all__")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "[A-Z][A-Z0-9_]+$")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_Framer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_FRAME_SIZE_TARGET")
(PUNCT "=")
(LIT 64)
(PUNCT "*")
(LIT 1024)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file_write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file_write")
(PUNCT "=")
(ID "file_write")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "start_framing")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_framing")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "commit_frame")
(PUNCT "(")
(ID "force")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "commit_frame")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "current_frame")
(NEWLINE)
(KEYWORD if)
(ID "f")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "_FRAME_SIZE_TARGET")
(KEYWORD or)
(ID "force")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "f")
(PUNCT ".")
(ID "getbuffer")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file_write")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "FRAME")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "pack")
(PUNCT "(")
(LIT "<Q")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "truncate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "file_write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_Unframer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file_read")
(PUNCT ",")
(ID "file_readline")
(PUNCT ",")
(ID "file_tell")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file_read")
(PUNCT "=")
(ID "file_read")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file_readline")
(PUNCT "=")
(ID "file_readline")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(KEYWORD and)
(ID "n")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "file_read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "<")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "pickle exhausted before end of frame")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "file_read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "file_readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "data")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT #"\n")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "pickle exhausted before end of frame")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "file_readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "load_frame")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "frame_size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT #"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "beginning of a new frame before end of current frame")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "current_frame")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "file_read")
(PUNCT "(")
(ID "frame_size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_getattribute")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "allow_qualname")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dotted_path")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "allow_qualname")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "dotted_path")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Can't get qualified attribute {!r} on {!r}; ")
(PUNCT "+")
(LIT "use protocols >= 4 to enable support")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "subpath")
(KEYWORD in)
(ID "dotted_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "subpath")
(PUNCT "==")
(LIT "<locals>")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Can't get local attribute {!r} on {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "subpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Can't get attribute {!r} on {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "whichmodule")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "allow_qualname")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the module an object belong to.")
(NEWLINE)
(ID "module_name")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__module__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module_name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "module_name")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "module_name")
(PUNCT ",")
(ID "module")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "module_name")
(PUNCT "==")
(LIT "__main__")
(KEYWORD or)
(ID "module")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_getattribute")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "allow_qualname")
(PUNCT ")")
(KEYWORD is)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "module_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "__main__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode_long")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encode a long to a two's complement little-endian binary string.\n    Note that 0 is a special case, returning an empty string, to save a\n    byte in the LONG1 pickling context.\n\n    >>> encode_long(0)\n    b''\n    >>> encode_long(255)\n    b'\\xff\\x00'\n    >>> encode_long(32767)\n    b'\\xff\\x7f'\n    >>> encode_long(-256)\n    b'\\x00\\xff'\n    >>> encode_long(-32768)\n    b'\\x00\\x80'\n    >>> encode_long(-128)\n    b'\\x80'\n    >>> encode_long(127)\n    b'\\x7f'\n    >>>\n    ")
(NEWLINE)
(KEYWORD if)
(ID "x")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "nbytes")
(PUNCT "=")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "bit_length")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">>")
(LIT 3)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "x")
(PUNCT ".")
(ID "to_bytes")
(PUNCT "(")
(ID "nbytes")
(PUNCT ",")
(ID "byteorder")
(PUNCT "=")
(LIT "little")
(PUNCT ",")
(ID "signed")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "x")
(PUNCT "<")
(LIT 0)
(KEYWORD and)
(ID "nbytes")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "result")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT 255)
(KEYWORD and)
(PUNCT "(")
(ID "result")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT "&")
(LIT 128)
(PUNCT ")")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "result")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode_long")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decode a long from a two's complement little-endian binary string.\n\n    >>> decode_long(b'')\n    0\n    >>> decode_long(b\"\\xff\\x00\")\n    255\n    >>> decode_long(b\"\\xff\\x7f\")\n    32767\n    >>> decode_long(b\"\\x00\\xff\")\n    -256\n    >>> decode_long(b\"\\x00\\x80\")\n    -32768\n    >>> decode_long(b\"\\x80\")\n    -128\n    >>> decode_long(b\"\\x7f\")\n    127\n    ")
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "byteorder")
(PUNCT "=")
(LIT "little")
(PUNCT ",")
(ID "signed")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Pickler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "protocol")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This takes a binary file for writing a pickle data stream.\n\n        The optional *protocol* argument tells the pickler to use the\n        given protocol; supported protocols are 0, 1, 2, 3 and 4.  The\n        default protocol is 3; a backward-incompatible protocol designed\n        for Python 3.\n\n        Specifying a negative protocol version selects the highest\n        protocol version supported.  The higher the protocol used, the\n        more recent the version of Python needed to read the pickle\n        produced.\n\n        The *file* argument must have a write() method that accepts a\n        single bytes argument. It can thus be a file object opened for\n        binary writing, a io.BytesIO instance, or any other custom\n        object that meets this interface.\n\n        If *fix_imports* is True and *protocol* is less than 3, pickle\n        will try to map the new Python 3 names to the old module names\n        used in Python 2, so that the pickle data stream is readable\n        with Python 2.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "protocol")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protocol")
(PUNCT "=")
(ID "DEFAULT_PROTOCOL")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "protocol")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protocol")
(PUNCT "=")
(ID "HIGHEST_PROTOCOL")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "protocol")
(PUNCT "<=")
(ID "HIGHEST_PROTOCOL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "pickle protocol must be <= %d")
(PUNCT "%")
(ID "HIGHEST_PROTOCOL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file_write")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "write")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "file must have a 'write' attribute")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "framer")
(PUNCT "=")
(ID "_Framer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file_write")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "framer")
(PUNCT ".")
(ID "write")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT "=")
(ID "protocol")
(PUNCT ">=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fast")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fix_imports")
(PUNCT "=")
(ID "fix_imports")
(KEYWORD and)
(ID "protocol")
(PUNCT "<")
(LIT 3)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clear_memo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clears the pickler's \"memo\".\n\n        The memo is the data structure that remembers which objects the\n        pickler has already seen, so that shared or recursive objects\n        are pickled by reference and not by value.  This method is\n        useful when re-using picklers.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dump")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write a pickled representation of obj to the open file.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_file_write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "Pickler.__init__() was not called by ")
(LIT "%s.__init__()")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "PROTO")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "framer")
(PUNCT ".")
(ID "start_framing")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "save")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "STOP")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "framer")
(PUNCT ".")
(ID "end_framing")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "memoize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store an object in the memo.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fast")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "memo")
(NEWLINE)
(ID "idx")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "idx")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "idx")
(PUNCT ",")
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "put")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "idx")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "MEMOIZE")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "idx")
(PUNCT "<")
(LIT 256)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "BINPUT")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "idx")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "LONG_BINPUT")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "idx")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "PUT")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "idx")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(LIT 256)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "BINGET")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "LONG_BINGET")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "GET")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "save")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "save_persistent_id")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "framer")
(PUNCT ".")
(ID "commit_frame")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "persistent_id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pid")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "save_persistent_id")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_pers")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "x")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "f")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "reduce")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "dispatch_table")
(PUNCT ",")
(ID "dispatch_table")
(PUNCT ")")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reduce")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reduce")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "issc")
(PUNCT "=")
(ID "issubclass")
(PUNCT "(")
(ID "t")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "issc")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_global")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "reduce")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__reduce_ex__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reduce")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reduce")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reduce")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__reduce__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reduce")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reduce")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "Can't pickle %r object: %r")
(PUNCT "%")
(PUNCT "(")
(ID "t")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "rv")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_global")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "rv")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "rv")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "%s must return string or tuple")
(PUNCT "%")
(ID "reduce")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "rv")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(LIT 2)
(PUNCT "<=")
(ID "l")
(PUNCT "<=")
(LIT 5)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "Tuple returned by %s must have ")
(LIT "two to five elements")
(PUNCT "%")
(ID "reduce")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ",")
(PUNCT "*")
(ID "rv")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "persistent_id")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "save_pers")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save")
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "save_persistent_id")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BINPERSID")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "PERSID")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "save_reduce")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "state")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "listitems")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dictitems")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "args from save_reduce() must be a tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "func from save_reduce() must be callable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(ID "func_name")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(LIT "__name__")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(KEYWORD and)
(ID "func_name")
(PUNCT "==")
(LIT "__newobj_ex__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT "=")
(ID "args")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(LIT "__new__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "args[0] from {} args has no __new__")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "func_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "cls")
(KEYWORD is)
(KEYWORD not)
(ID "obj")
(PUNCT ".")
(ID "__class__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "args[0] from {} args has the wrong class")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "func_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "save")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "NEWOBJ_EX")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 2)
(KEYWORD and)
(ID "func_name")
(PUNCT "==")
(LIT "__newobj__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(LIT "__new__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "args[0] from __newobj__ args has no __new__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "cls")
(KEYWORD is)
(KEYWORD not)
(ID "obj")
(PUNCT ".")
(ID "__class__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "args[0] from __newobj__ args has the wrong class")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "NEWOBJ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "REDUCE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "POP")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "listitems")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_batch_appends")
(PUNCT "(")
(ID "listitems")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dictitems")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_batch_setitems")
(PUNCT "(")
(ID "dictitems")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "state")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "BUILD")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "save_none")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "NONE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "save_none")
(NEWLINE)
(KEYWORD def)
(ID "save_bool")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "NEWTRUE")
(KEYWORD if)
(ID "obj")
(KEYWORD else)
(ID "NEWFALSE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "TRUE")
(KEYWORD if)
(ID "obj")
(KEYWORD else)
(ID "FALSE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "bool")
(PUNCT "]")
(PUNCT "=")
(ID "save_bool")
(NEWLINE)
(KEYWORD def)
(ID "save_long")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "obj")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "obj")
(PUNCT "<=")
(LIT 255)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BININT1")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(PUNCT "<=")
(LIT 65535)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BININT2")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<H")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(PUNCT "-")
(LIT 2147483648)
(PUNCT "<=")
(ID "obj")
(PUNCT "<=")
(LIT 2147483647)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BININT")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoded")
(PUNCT "=")
(ID "encode_long")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(LIT 256)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "LONG1")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "LONG4")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "LONG")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"L\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "int")
(PUNCT "]")
(PUNCT "=")
(ID "save_long")
(NEWLINE)
(KEYWORD def)
(ID "save_float")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BINFLOAT")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT ">d")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "FLOAT")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "float")
(PUNCT "]")
(PUNCT "=")
(ID "save_float")
(NEWLINE)
(KEYWORD def)
(ID "save_bytes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "<")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "encode")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "latin1")
(PUNCT ")")
(PUNCT ",")
(LIT "latin1")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<=")
(LIT 255)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "SHORT_BINBYTES")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ">")
(LIT 4294967295)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BINBYTES8")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<Q")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BINBYTES")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "bytes")
(PUNCT "]")
(PUNCT "=")
(ID "save_bytes")
(NEWLINE)
(KEYWORD def)
(ID "save_str")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoded")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ",")
(LIT "surrogatepass")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<=")
(LIT 255)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "SHORT_BINUNICODE")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ">")
(LIT 4294967295)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BINUNICODE8")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<Q")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "BINUNICODE")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT "+")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\u005c")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\n")
(PUNCT ",")
(LIT "\\u000a")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "UNICODE")
(PUNCT "+")
(ID "obj")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "raw-unicode-escape")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "str")
(PUNCT "]")
(PUNCT "=")
(ID "save_str")
(NEWLINE)
(KEYWORD def)
(ID "save_tuple")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "EMPTY_TUPLE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT "+")
(ID "TUPLE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save")
(NEWLINE)
(ID "memo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "memo")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<=")
(LIT 3)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "element")
(KEYWORD in)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "element")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD in)
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "get")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "POP")
(PUNCT "*")
(ID "n")
(PUNCT "+")
(ID "get")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "_tuplesize2code")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "element")
(KEYWORD in)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "element")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD in)
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "get")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "POP_MARK")
(PUNCT "+")
(ID "get")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "POP")
(PUNCT "*")
(PUNCT "(")
(ID "n")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "+")
(ID "get")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "TUPLE")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "tuple")
(PUNCT "]")
(PUNCT "=")
(ID "save_tuple")
(NEWLINE)
(KEYWORD def)
(ID "save_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "EMPTY_LIST")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT "+")
(ID "LIST")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_batch_appends")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "list")
(PUNCT "]")
(PUNCT "=")
(ID "save_list")
(NEWLINE)
(ID "_BATCHSIZE")
(PUNCT "=")
(LIT 1000)
(NEWLINE)
(KEYWORD def)
(ID "_batch_appends")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "APPEND")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "it")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tmp")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "islice")
(PUNCT "(")
(ID "it")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_BATCHSIZE")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "tmp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "tmp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "APPENDS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "tmp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "APPEND")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "_BATCHSIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "save_dict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT "+")
(ID "DICT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_batch_setitems")
(PUNCT "(")
(ID "obj")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "dict")
(PUNCT "]")
(PUNCT "=")
(ID "save_dict")
(NEWLINE)
(KEYWORD if)
(ID "PyStringMap")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dispatch")
(PUNCT "[")
(ID "PyStringMap")
(PUNCT "]")
(PUNCT "=")
(ID "save_dict")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_batch_setitems")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "bin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "SETITEM")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "it")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tmp")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "islice")
(PUNCT "(")
(ID "it")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_BATCHSIZE")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "tmp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "tmp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "SETITEMS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "tmp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "save")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "SETITEM")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "_BATCHSIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "save_set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "<")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "set")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "EMPTY_SET")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "it")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "batch")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "islice")
(PUNCT "(")
(ID "it")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_BATCHSIZE")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "batch")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "batch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "ADDITEMS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "_BATCHSIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "set")
(PUNCT "]")
(PUNCT "=")
(ID "save_set")
(NEWLINE)
(KEYWORD def)
(ID "save_frozenset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "<")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "frozenset")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "MARK")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "POP_MARK")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(ID "FROZENSET")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "frozenset")
(PUNCT "]")
(PUNCT "=")
(ID "save_frozenset")
(NEWLINE)
(KEYWORD def)
(ID "save_global")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(ID "memo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "memo")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(LIT "__qualname__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(ID "module_name")
(PUNCT "=")
(ID "whichmodule")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "allow_qualname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "module_name")
(PUNCT "]")
(NEWLINE)
(ID "obj2")
(PUNCT "=")
(ID "_getattribute")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "allow_qualname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ImportError")
(PUNCT ",")
(ID "KeyError")
(PUNCT ",")
(ID "AttributeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "Can't pickle %r: it's not found as %s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "module_name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "obj2")
(KEYWORD is)
(KEYWORD not)
(ID "obj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "Can't pickle %r: it's not the same object as %s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "module_name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "_extension_registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "code")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "<=")
(LIT 255)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "EXT1")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<B")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "code")
(PUNCT "<=")
(LIT 65535)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "EXT2")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<H")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "EXT4")
(PUNCT "+")
(ID "pack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "save")
(PUNCT "(")
(ID "module_name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "STACK_GLOBAL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "GLOBAL")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fix_imports")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r_name_mapping")
(PUNCT "=")
(ID "_compat_pickle")
(PUNCT ".")
(ID "REVERSE_NAME_MAPPING")
(NEWLINE)
(ID "r_import_mapping")
(PUNCT "=")
(ID "_compat_pickle")
(PUNCT ".")
(ID "REVERSE_IMPORT_MAPPING")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(KEYWORD in)
(ID "r_name_mapping")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module_name")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "r_name_mapping")
(PUNCT "[")
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "module_name")
(KEYWORD in)
(ID "r_import_mapping")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module_name")
(PUNCT "=")
(ID "r_import_mapping")
(PUNCT "[")
(ID "module_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "GLOBAL")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "module_name")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "PicklingError")
(PUNCT "(")
(LIT "can't pickle global identifier '%s.%s' using ")
(LIT "pickle protocol %i")
(PUNCT "%")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memoize")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "save_type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(ID "type")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "obj")
(KEYWORD is)
(ID "type")
(PUNCT "(")
(ID "NotImplemented")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(PUNCT "(")
(ID "NotImplemented")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "obj")
(KEYWORD is)
(ID "type")
(PUNCT "(")
(PUNCT "...")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "save_reduce")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(PUNCT "(")
(PUNCT "...")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "save_global")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "FunctionType")
(PUNCT "]")
(PUNCT "=")
(ID "save_global")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(PUNCT "=")
(ID "save_type")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Unpickler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "ASCII")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This takes a binary file for reading a pickle data stream.\n\n        The protocol version of the pickle is detected automatically, so\n        no proto argument is needed.\n\n        The argument *file* must have two methods, a read() method that\n        takes an integer argument, and a readline() method that requires\n        no arguments.  Both methods should return bytes.  Thus *file*\n        can be a binary file object opened for reading, a io.BytesIO\n        object, or any other custom object that meets this interface.\n\n        The file-like object must have two methods, a read() method\n        that takes an integer argument, and a readline() method that\n        requires no arguments.  Both methods should return bytes.\n        Thus file-like object can be a binary file object opened for\n        reading, a BytesIO object, or any other custom object that\n        meets this interface.\n\n        Optional keyword arguments are *fix_imports*, *encoding* and\n        *errors*, which are used to control compatiblity support for\n        pickle stream generated by Python 2.  If *fix_imports* is True,\n        pickle will try to map the old Python 2 names to the new names\n        used in Python 3.  The *encoding* and *errors* tell pickle how\n        to decode 8-bit string instances pickled by Python 2; these\n        default to 'ASCII' and 'strict', respectively. *encoding* can be\n        'bytes' to read theses 8-bit string instances as bytes objects.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file_readline")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "readline")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file_read")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "read")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fix_imports")
(PUNCT "=")
(ID "fix_imports")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read a pickled object representation from the open file.\n\n        Return the reconstituted object hierarchy specified in the file.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_file_read")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "Unpickler.__init__() was not called by ")
(LIT "%s.__init__()")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_unframer")
(PUNCT "=")
(ID "_Unframer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file_read")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_file_readline")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_unframer")
(PUNCT ".")
(ID "read")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_unframer")
(PUNCT ".")
(ID "readline")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mark")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "read")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(NEWLINE)
(ID "dispatch")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "key")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EOFError")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "bytes_types")
(PUNCT ")")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(ID "key")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "_Stop")
(KEYWORD as)
(ID "stopinst")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "stopinst")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "marker")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "mark")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mark")
(NEWLINE)
(ID "k")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "stack")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(ID "mark")
(PUNCT ":")
(ID "k")
(PUNCT "=")
(ID "k")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "k")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "persistent_load")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "unsupported persistent id encountered")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "load_proto")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proto")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "proto")
(PUNCT "<=")
(ID "HIGHEST_PROTOCOL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unsupported pickle protocol: %d")
(PUNCT "%")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "=")
(ID "proto")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "PROTO")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_proto")
(NEWLINE)
(KEYWORD def)
(ID "load_frame")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "frame_size")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<Q")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "frame_size")
(PUNCT ">")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "frame size > sys.maxsize: %d")
(PUNCT "%")
(ID "frame_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_unframer")
(PUNCT ".")
(ID "load_frame")
(PUNCT "(")
(ID "frame_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "FRAME")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_frame")
(NEWLINE)
(KEYWORD def)
(ID "load_persid")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "persistent_load")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "PERSID")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_persid")
(NEWLINE)
(KEYWORD def)
(ID "load_binpersid")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "persistent_load")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINPERSID")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binpersid")
(NEWLINE)
(KEYWORD def)
(ID "load_none")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "NONE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_none")
(NEWLINE)
(KEYWORD def)
(ID "load_false")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "NEWFALSE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_false")
(NEWLINE)
(KEYWORD def)
(ID "load_true")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "NEWTRUE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_true")
(NEWLINE)
(KEYWORD def)
(ID "load_int")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT "==")
(ID "FALSE")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "data")
(PUNCT "==")
(ID "TRUE")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "INT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_int")
(NEWLINE)
(KEYWORD def)
(ID "load_binint")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "unpack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BININT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binint")
(NEWLINE)
(KEYWORD def)
(ID "load_binint1")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BININT1")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binint1")
(NEWLINE)
(KEYWORD def)
(ID "load_binint2")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "unpack")
(PUNCT "(")
(LIT "<H")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BININT2")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binint2")
(NEWLINE)
(KEYWORD def)
(ID "load_long")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD and)
(ID "val")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT #"L")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "val")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "LONG")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_long")
(NEWLINE)
(KEYWORD def)
(ID "load_long1")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "decode_long")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "LONG1")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_long1")
(NEWLINE)
(KEYWORD def)
(ID "load_long4")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "LONG pickle has negative byte count")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "decode_long")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "LONG4")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_long4")
(NEWLINE)
(KEYWORD def)
(ID "load_float")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "FLOAT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_float")
(NEWLINE)
(KEYWORD def)
(ID "load_binfloat")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "unpack")
(PUNCT "(")
(LIT ">d")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINFLOAT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binfloat")
(NEWLINE)
(KEYWORD def)
(ID "_decode_string")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "==")
(LIT "bytes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "load_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(KEYWORD and)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "data")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD and)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(LIT #"\"'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "the STRING opcode argument must be quoted")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_decode_string")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "escape_decode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "STRING")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_string")
(NEWLINE)
(KEYWORD def)
(ID "load_binstring")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "BINSTRING pickle has negative byte count")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_decode_string")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINSTRING")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binstring")
(NEWLINE)
(KEYWORD def)
(ID "load_binbytes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT ">")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "BINBYTES exceeds system's maximum size ")
(LIT "of %d bytes")
(PUNCT "%")
(ID "maxsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINBYTES")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binbytes")
(NEWLINE)
(KEYWORD def)
(ID "load_unicode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "raw-unicode-escape")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "UNICODE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_unicode")
(NEWLINE)
(KEYWORD def)
(ID "load_binunicode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT ">")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "BINUNICODE exceeds system's maximum size ")
(LIT "of %d bytes")
(PUNCT "%")
(ID "maxsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(LIT "surrogatepass")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINUNICODE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binunicode")
(NEWLINE)
(KEYWORD def)
(ID "load_binunicode8")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<Q")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT ">")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "BINUNICODE8 exceeds system's maximum size ")
(LIT "of %d bytes")
(PUNCT "%")
(ID "maxsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(LIT "surrogatepass")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINUNICODE8")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binunicode8")
(NEWLINE)
(KEYWORD def)
(ID "load_short_binstring")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_decode_string")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "SHORT_BINSTRING")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_short_binstring")
(NEWLINE)
(KEYWORD def)
(ID "load_short_binbytes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "SHORT_BINBYTES")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_short_binbytes")
(NEWLINE)
(KEYWORD def)
(ID "load_short_binunicode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "len")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(LIT "surrogatepass")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "SHORT_BINUNICODE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_short_binunicode")
(NEWLINE)
(KEYWORD def)
(ID "load_tuple")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "TUPLE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_tuple")
(NEWLINE)
(KEYWORD def)
(ID "load_empty_tuple")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EMPTY_TUPLE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_empty_tuple")
(NEWLINE)
(KEYWORD def)
(ID "load_tuple1")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "TUPLE1")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_tuple1")
(NEWLINE)
(KEYWORD def)
(ID "load_tuple2")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "TUPLE2")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_tuple2")
(NEWLINE)
(KEYWORD def)
(ID "load_tuple3")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "TUPLE3")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_tuple3")
(NEWLINE)
(KEYWORD def)
(ID "load_empty_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EMPTY_LIST")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_empty_list")
(NEWLINE)
(KEYWORD def)
(ID "load_empty_dictionary")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EMPTY_DICT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_empty_dictionary")
(NEWLINE)
(KEYWORD def)
(ID "load_empty_set")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EMPTY_SET")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_empty_set")
(NEWLINE)
(KEYWORD def)
(ID "load_frozenset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "frozenset")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "FROZENSET")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_frozenset")
(NEWLINE)
(KEYWORD def)
(ID "load_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "LIST")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_list")
(NEWLINE)
(KEYWORD def)
(ID "load_dict")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "d")
(PUNCT "=")
(PUNCT "{")
(ID "items")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ":")
(ID "items")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "d")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "DICT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_dict")
(NEWLINE)
(KEYWORD def)
(ID "_instantiate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "klass")
(PUNCT ",")
(ID "k")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "args")
(KEYWORD or)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD or)
(ID "hasattr")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(LIT "__getinitargs__")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "klass")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "in constructor for %s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "klass")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "klass")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load_inst")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_class")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_instantiate")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "INST")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_inst")
(NEWLINE)
(KEYWORD def)
(ID "load_obj")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "k")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_instantiate")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "k")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "OBJ")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_obj")
(NEWLINE)
(KEYWORD def)
(ID "load_newobj")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cls")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "NEWOBJ")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_newobj")
(NEWLINE)
(KEYWORD def)
(ID "load_newobj_ex")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cls")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "NEWOBJ_EX")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_newobj_ex")
(NEWLINE)
(KEYWORD def)
(ID "load_global")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_class")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "GLOBAL")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_global")
(NEWLINE)
(KEYWORD def)
(ID "load_stack_global")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "str")
(KEYWORD or)
(ID "type")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "STACK_GLOBAL requires str")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "find_class")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "STACK_GLOBAL")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_stack_global")
(NEWLINE)
(KEYWORD def)
(ID "load_ext1")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "get_extension")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EXT1")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_ext1")
(NEWLINE)
(KEYWORD def)
(ID "load_ext2")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<H")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "get_extension")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EXT2")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_ext2")
(NEWLINE)
(KEYWORD def)
(ID "load_ext4")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<i")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "get_extension")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "EXT4")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_ext4")
(NEWLINE)
(KEYWORD def)
(ID "get_extension")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nil")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "_extension_cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "nil")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(KEYWORD is)
(KEYWORD not)
(ID "nil")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "_inverted_registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "key")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "code")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnpicklingError")
(PUNCT "(")
(LIT "EXT specifies code <= 0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unregistered extension code %d")
(PUNCT "%")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_class")
(PUNCT "(")
(PUNCT "*")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "_extension_cache")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(PUNCT "=")
(ID "obj")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_class")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT "<")
(LIT 3)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "fix_imports")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(KEYWORD in)
(ID "_compat_pickle")
(PUNCT ".")
(ID "NAME_MAPPING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "_compat_pickle")
(PUNCT ".")
(ID "NAME_MAPPING")
(PUNCT "[")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "module")
(KEYWORD in)
(ID "_compat_pickle")
(PUNCT ".")
(ID "IMPORT_MAPPING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "_compat_pickle")
(PUNCT ".")
(ID "IMPORT_MAPPING")
(PUNCT "[")
(ID "module")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__import__")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_getattribute")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "module")
(PUNCT "]")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "allow_qualname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proto")
(PUNCT ">=")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load_reduce")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "func")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "REDUCE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_reduce")
(NEWLINE)
(KEYWORD def)
(ID "load_pop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "POP")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_pop")
(NEWLINE)
(KEYWORD def)
(ID "load_pop_mark")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(ID "k")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "POP_MARK")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_pop_mark")
(NEWLINE)
(KEYWORD def)
(ID "load_dup")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "DUP")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_dup")
(NEWLINE)
(KEYWORD def)
(ID "load_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "GET")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_get")
(NEWLINE)
(KEYWORD def)
(ID "load_binget")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINGET")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binget")
(NEWLINE)
(KEYWORD def)
(ID "load_long_binget")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "LONG_BINGET")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_long_binget")
(NEWLINE)
(KEYWORD def)
(ID "load_put")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "negative PUT argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "PUT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_put")
(NEWLINE)
(KEYWORD def)
(ID "load_binput")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "negative BINPUT argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BINPUT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_binput")
(NEWLINE)
(KEYWORD def)
(ID "load_long_binput")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT ",")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<I")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "negative LONG_BINPUT argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "LONG_BINPUT")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_long_binput")
(NEWLINE)
(KEYWORD def)
(ID "load_memoize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "memo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "memo")
(NEWLINE)
(ID "memo")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "memo")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "MEMOIZE")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_memoize")
(NEWLINE)
(KEYWORD def)
(ID "load_append")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "list")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "APPEND")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_append")
(NEWLINE)
(KEYWORD def)
(ID "load_appends")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "mark")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "list_obj")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "list_obj")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list_obj")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "append")
(PUNCT "=")
(ID "list_obj")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "APPENDS")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_appends")
(NEWLINE)
(KEYWORD def)
(ID "load_setitem")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dict")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "SETITEM")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_setitem")
(NEWLINE)
(KEYWORD def)
(ID "load_setitems")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "mark")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dict")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "mark")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "stack")
(PUNCT ")")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "[")
(ID "stack")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "SETITEMS")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_setitems")
(NEWLINE)
(KEYWORD def)
(ID "load_additems")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "mark")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "marker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "set_obj")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "set_obj")
(PUNCT ",")
(ID "set")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "set_obj")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "add")
(PUNCT "=")
(ID "set_obj")
(PUNCT ".")
(ID "add")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "add")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "ADDITEMS")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_additems")
(NEWLINE)
(KEYWORD def)
(ID "load_build")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stack")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(NEWLINE)
(ID "state")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "inst")
(PUNCT "=")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "setstate")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "inst")
(PUNCT ",")
(LIT "__setstate__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "setstate")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setstate")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "slotstate")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "state")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT ",")
(ID "slotstate")
(PUNCT "=")
(ID "state")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "state")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inst_dict")
(PUNCT "=")
(ID "inst")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(ID "intern")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "intern")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "state")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(KEYWORD is)
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inst_dict")
(PUNCT "[")
(ID "intern")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inst_dict")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "slotstate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "slotstate")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "inst")
(PUNCT ",")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "BUILD")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_build")
(NEWLINE)
(KEYWORD def)
(ID "load_mark")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mark")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "MARK")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_mark")
(NEWLINE)
(KEYWORD def)
(ID "load_stop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "_Stop")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "STOP")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "load_stop")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dump")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "protocol")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_Pickler")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(ID "fix_imports")
(PUNCT ")")
(PUNCT ".")
(ID "dump")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dumps")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "protocol")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_Pickler")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(ID "fix_imports")
(PUNCT ")")
(PUNCT ".")
(ID "dump")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "res")
(PUNCT ",")
(ID "bytes_types")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_load")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "ASCII")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_Unpickler")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(ID "fix_imports")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(ID "errors")
(PUNCT ")")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_loads")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "ASCII")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't load pickle from unicode string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_Unpickler")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "fix_imports")
(PUNCT "=")
(ID "fix_imports")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(ID "errors")
(PUNCT ")")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_pickle")
(KEYWORD import)
(PUNCT "(")
(ID "PickleError")
(PUNCT ",")
(ID "PicklingError")
(PUNCT ",")
(ID "UnpicklingError")
(PUNCT ",")
(ID "Pickler")
(PUNCT ",")
(ID "Unpickler")
(PUNCT ",")
(ID "dump")
(PUNCT ",")
(ID "dumps")
(PUNCT ",")
(ID "load")
(PUNCT ",")
(ID "loads")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Pickler")
(PUNCT ",")
(ID "Unpickler")
(PUNCT "=")
(ID "_Pickler")
(PUNCT ",")
(ID "_Unpickler")
(NEWLINE)
(ID "dump")
(PUNCT ",")
(ID "dumps")
(PUNCT ",")
(ID "load")
(PUNCT ",")
(ID "loads")
(PUNCT "=")
(ID "_dump")
(PUNCT ",")
(ID "_dumps")
(PUNCT ",")
(ID "_load")
(PUNCT ",")
(ID "_loads")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "doctest")
(NEWLINE)
(KEYWORD return)
(ID "doctest")
(PUNCT ".")
(ID "testmod")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(ID "description")
(PUNCT "=")
(LIT "display contents of the pickle files")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "pickle_file")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "FileType")
(PUNCT "(")
(LIT "br")
(PUNCT ")")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "*")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "the pickle file")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-t")
(PUNCT ",")
(LIT "--test")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run self-test suite")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-v")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "run verbosely; only affects self-test run")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "test")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ".")
(ID "pickle_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "print_help")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "pprint")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "args")
(PUNCT ".")
(ID "pickle_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "load")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(ID "pprint")
(PUNCT ".")
(ID "pprint")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
