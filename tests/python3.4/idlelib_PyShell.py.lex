(KEYWORD import)
(ID "getopt")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "os")
(PUNCT ".")
(ID "path")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "tokenize")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "linecache")
(NEWLINE)
(KEYWORD from)
(ID "code")
(KEYWORD import)
(ID "InteractiveInterpreter")
(NEWLINE)
(KEYWORD from)
(ID "platform")
(KEYWORD import)
(ID "python_version")
(PUNCT ",")
(ID "system")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "tkinter")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "** IDLE can't import Tkinter.\n")
(LIT "Your Python may not be configured for Tk. **")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "__stderr__")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "tkinter")
(PUNCT ".")
(ID "messagebox")
(KEYWORD as)
(ID "tkMessageBox")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "EditorWindow")
(KEYWORD import)
(ID "EditorWindow")
(PUNCT ",")
(ID "fixwordbreaks")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "FileList")
(KEYWORD import)
(ID "FileList")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "ColorDelegator")
(KEYWORD import)
(ID "ColorDelegator")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "UndoDelegator")
(KEYWORD import)
(ID "UndoDelegator")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "OutputWindow")
(KEYWORD import)
(ID "OutputWindow")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "configHandler")
(KEYWORD import)
(ID "idleConf")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "idlever")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "rpc")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "Debugger")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "RemoteDebugger")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "macosxSupport")
(NEWLINE)
(ID "HOST")
(PUNCT "=")
(LIT "127.0.0.1")
(NEWLINE)
(ID "PORT")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "warning_stream")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "__stderr__")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD def)
(ID "idle_formatwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "line")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format warnings the IDLE way.")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT "\nWarning (from warnings module):\n")
(NEWLINE)
(ID "s")
(PUNCT "+=")
(LIT "  File \"%s\", line %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "+=")
(LIT "    %s\n")
(PUNCT "%")
(ID "line")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "+=")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "category")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "idle_showwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "line")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Show Idle-format warning (after replacing warnings.showwarning).\n\n    The differences are the formatter called, the file=None replacement,\n    which can be None, the capture of the consequence AttributeError,\n    and the output of a hard-coded prompt.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "warning_stream")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "idle_formatwarning")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "category")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT ">>> ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_warnings_showwarning")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "capture_warnings")
(PUNCT "(")
(ID "capture")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replace warning.showwarning with idle_showwarning, or reverse.")
(NEWLINE)
(KEYWORD global)
(ID "_warnings_showwarning")
(NEWLINE)
(KEYWORD if)
(ID "capture")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_warnings_showwarning")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warnings_showwarning")
(PUNCT "=")
(ID "warnings")
(PUNCT ".")
(ID "showwarning")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "showwarning")
(PUNCT "=")
(ID "idle_showwarning")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_warnings_showwarning")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "showwarning")
(PUNCT "=")
(ID "_warnings_showwarning")
(NEWLINE)
(ID "_warnings_showwarning")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "capture_warnings")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "extended_linecache_checkcache")
(PUNCT "(")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "orig_checkcache")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "checkcache")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend linecache.checkcache to preserve the <pyshell#...> entries\n\n    Rather than repeating the linecache code, patch it to save the\n    <pyshell#...> entries, call the original linecache.checkcache()\n    (skipping them), and then restore the saved entries.\n\n    orig_checkcache is bound at definition time to the original\n    method, allowing it to be patched.\n    ")
(NEWLINE)
(ID "cache")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "cache")
(NEWLINE)
(ID "save")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "cache")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "key")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "<>")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "orig_checkcache")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "cache")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "save")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "linecache")
(PUNCT ".")
(ID "checkcache")
(PUNCT "=")
(ID "extended_linecache_checkcache")
(NEWLINE)
(KEYWORD class)
(ID "PyShellEditorWindow")
(PUNCT "(")
(ID "EditorWindow")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Regular text edit window in IDLE, supports breakpoints")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "EditorWindow")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<set-breakpoint-here>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "set_breakpoint_here")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<clear-breakpoint-here>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "clear_breakpoint_here")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<open-python-shell>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "flist")
(PUNCT ".")
(ID "open_shell")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "breakpointPath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "idleConf")
(PUNCT ".")
(ID "GetUserCfgDir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "breakpoints.lst")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "filename_changed_hook")
(PUNCT "(")
(ID "old_hook")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename_change_hook")
(PUNCT ",")
(ID "self")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "restore_file_breaks")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "old_hook")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "set_filename_change_hook")
(PUNCT "(")
(ID "filename_changed_hook")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "restore_file_breaks")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "color_breakpoint_text")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rmenu_specs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "Cut")
(PUNCT ",")
(LIT "<<cut>>")
(PUNCT ",")
(LIT "rmenu_check_cut")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Copy")
(PUNCT ",")
(LIT "<<copy>>")
(PUNCT ",")
(LIT "rmenu_check_copy")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Paste")
(PUNCT ",")
(LIT "<<paste>>")
(PUNCT ",")
(LIT "rmenu_check_paste")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Set Breakpoint")
(PUNCT ",")
(LIT "<<set-breakpoint-here>>")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Clear Breakpoint")
(PUNCT ",")
(LIT "<<clear-breakpoint-here>>")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "color_breakpoint_text")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "color")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn colorizing of breakpoint text on or off")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "io")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "color")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "theme")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "Theme")
(PUNCT ",")
(LIT "name")
(PUNCT ")")
(NEWLINE)
(ID "cfg")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetHighlight")
(PUNCT "(")
(ID "theme")
(PUNCT ",")
(LIT "break")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfg")
(PUNCT "=")
(PUNCT "{")
(LIT "foreground")
(PUNCT ":")
(LIT "")
(PUNCT ",")
(LIT "background")
(PUNCT ":")
(LIT "")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_config")
(PUNCT "(")
(LIT "BREAK")
(PUNCT ",")
(ID "cfg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_breakpoint")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "tag_add")
(PUNCT "(")
(LIT "BREAK")
(PUNCT ",")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "%d.0")
(PUNCT "%")
(PUNCT "(")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "flist")
(PUNCT ".")
(ID "pyshell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "debugger")
(NEWLINE)
(ID "debug")
(PUNCT ".")
(ID "set_breakpoint_here")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_breakpoint_here")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "lineno")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_breakpoint")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clear_breakpoint_here")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "lineno")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "BREAK")
(PUNCT ",")
(LIT "insert linestart")
(PUNCT ",")
(LIT "insert lineend +1char")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "flist")
(PUNCT ".")
(ID "pyshell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "debugger")
(NEWLINE)
(ID "debug")
(PUNCT ".")
(ID "clear_breakpoint_here")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear_file_breaks")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "BREAK")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(ID "END")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "flist")
(PUNCT ".")
(ID "pyshell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "debugger")
(NEWLINE)
(ID "debug")
(PUNCT ".")
(ID "clear_file_breaks")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "store_file_breaks")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Save breakpoints when file is saved")
(NEWLINE)
(ID "breaks")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "breakpointPath")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "breakpointPath")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(KEYWORD as)
(ID "new_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT "=")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "update_breakpoints")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "breaks")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(NEWLINE)
(KEYWORD if)
(ID "breaks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT "=")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "breaks")
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "root")
(PUNCT ",")
(LIT "breakpoint_error_displayed")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "root")
(PUNCT ".")
(ID "breakpoint_error_displayed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "tkMessageBox")
(PUNCT ".")
(ID "showerror")
(PUNCT "(")
(ID "title")
(PUNCT "=")
(LIT "IDLE Error")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(LIT "Unable to update breakpoint list:\n%s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "err")
(PUNCT ")")
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "restore_file_breaks")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "io")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "breakpointPath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "breakpointPath")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT "=")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "breakpoint_linenumbers")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "breakpoint_linenumber")
(KEYWORD in)
(ID "breakpoint_linenumbers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_breakpoint")
(PUNCT "(")
(ID "breakpoint_linenumber")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "update_breakpoints")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieves all the breakpoints in the current window")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "ranges")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "tag_ranges")
(PUNCT "(")
(LIT "BREAK")
(PUNCT ")")
(NEWLINE)
(ID "linenumber_list")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ranges_to_linenumbers")
(PUNCT "(")
(ID "ranges")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "breakpoints")
(PUNCT "=")
(ID "linenumber_list")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ranges_to_linenumbers")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ranges")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "index")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "ranges")
(PUNCT ")")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "ranges")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(PUNCT ".")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "end")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "ranges")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "lineno")
(PUNCT "<")
(ID "end")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(ID "lineno")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "lines")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend base method - clear breaks when module is closed")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "clear_file_breaks")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "EditorWindow")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PyShellFileList")
(PUNCT "(")
(ID "FileList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend base class: IDLE supports a shell and breakpoints")
(NEWLINE)
(ID "EditorWindow")
(PUNCT "=")
(ID "PyShellEditorWindow")
(NEWLINE)
(ID "pyshell")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "open_shell")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pyshell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pyshell")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "wakeup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pyshell")
(PUNCT "=")
(ID "PyShell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pyshell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "pyshell")
(PUNCT ".")
(ID "begin")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "pyshell")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ModifiedColorDelegator")
(PUNCT "(")
(ID "ColorDelegator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend base class: colorizer for the shell window itself")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ColorDelegator")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "LoadTagDefs")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "recolorize_main")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "TODO")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tag_add")
(PUNCT "(")
(LIT "SYNC")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(NEWLINE)
(ID "ColorDelegator")
(PUNCT ".")
(ID "recolorize_main")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "LoadTagDefs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ColorDelegator")
(PUNCT ".")
(ID "LoadTagDefs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "theme")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "Theme")
(PUNCT ",")
(LIT "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tagdefs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT "{")
(LIT "stdin")
(PUNCT ":")
(PUNCT "{")
(LIT "background")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "foreground")
(PUNCT ":")
(KEYWORD None)
(PUNCT "}")
(PUNCT ",")
(LIT "stdout")
(PUNCT ":")
(ID "idleConf")
(PUNCT ".")
(ID "GetHighlight")
(PUNCT "(")
(ID "theme")
(PUNCT ",")
(LIT "stdout")
(PUNCT ")")
(PUNCT ",")
(LIT "stderr")
(PUNCT ":")
(ID "idleConf")
(PUNCT ".")
(ID "GetHighlight")
(PUNCT "(")
(ID "theme")
(PUNCT ",")
(LIT "stderr")
(PUNCT ")")
(PUNCT ",")
(LIT "console")
(PUNCT ":")
(ID "idleConf")
(PUNCT ".")
(ID "GetHighlight")
(PUNCT "(")
(ID "theme")
(PUNCT ",")
(LIT "console")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "removecolors")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "tag")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tagdefs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(ID "tag")
(PUNCT ",")
(LIT "iomark")
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ModifiedUndoDelegator")
(PUNCT "(")
(ID "UndoDelegator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend base class: forbid insert/delete before the I/O mark")
(NEWLINE)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "chars")
(PUNCT ",")
(ID "tags")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "delegate")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "delegate")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "UndoDelegator")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "chars")
(PUNCT ",")
(ID "tags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "delegate")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(ID "index1")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "delegate")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "UndoDelegator")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MyRPCClient")
(PUNCT "(")
(ID "rpc")
(PUNCT ".")
(ID "RPCClient")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "handle_EOF")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override the base class - just re-raise EOFError")
(NEWLINE)
(KEYWORD raise)
(ID "EOFError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ModifiedInterpreter")
(PUNCT "(")
(ID "InteractiveInterpreter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tkconsole")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT "=")
(ID "tkconsole")
(NEWLINE)
(ID "locals")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "__main__")
(PUNCT "]")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(ID "InteractiveInterpreter")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restarting")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "subprocess_arglist")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "PORT")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "original_compiler_flags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compile")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "flags")
(NEWLINE)
(DEDENT)
(ID "_afterid")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "rpcclt")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "rpcsubproc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "spawn_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "subprocess_arglist")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "subprocess_arglist")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "build_subprocess_arglist")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rpcsubproc")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "Popen")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "subprocess_arglist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "build_subprocess_arglist")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "!=")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Socket should have been assigned a port number.")
(PUNCT ")")
(NEWLINE)
(ID "w")
(PUNCT "=")
(PUNCT "[")
(LIT "-W")
(PUNCT "+")
(ID "s")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT "]")
(NEWLINE)
(ID "del_exitf")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "General")
(PUNCT ",")
(LIT "delete-exitfunc")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "bool")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "idlelib.PyShell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT "=")
(LIT "__import__('idlelib.run').run.main(%r)")
(PUNCT "%")
(PUNCT "(")
(ID "del_exitf")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT "=")
(LIT "__import__('run').main(%r)")
(PUNCT "%")
(PUNCT "(")
(ID "del_exitf")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT "]")
(PUNCT "+")
(ID "w")
(PUNCT "+")
(PUNCT "[")
(LIT "-c")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "start_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr")
(PUNCT "=")
(PUNCT "(")
(ID "HOST")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time")
(PUNCT ".")
(ID "sleep")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT "=")
(ID "MyRPCClient")
(PUNCT "(")
(ID "addr")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "display_port_binding_error")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "listening_sock")
(PUNCT ".")
(ID "getsockname")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "PORT")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "listening_sock")
(PUNCT ".")
(ID "setsockopt")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "SOL_SOCKET")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SO_REUSEADDR")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "spawn_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "listening_sock")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(LIT 10)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "accept")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "timeout")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "display_no_subprocess_error")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "console")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "stdin")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stdin")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "stdout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "stderr")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "flist")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "flist")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "linecache")
(PUNCT ",")
(ID "linecache")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "interp")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "transfer_path")
(PUNCT "(")
(ID "with_cwd")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "poll_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restart_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "with_cwd")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "restarting")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "restarting")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getdebugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "RemoteDebugger")
(PUNCT ".")
(ID "close_subprocess_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "terminate_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(NEWLINE)
(ID "was_executing")
(PUNCT "=")
(ID "console")
(PUNCT ".")
(ID "executing")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "executing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spawn_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "accept")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "timeout")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "display_no_subprocess_error")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "transfer_path")
(PUNCT "(")
(ID "with_cwd")
(PUNCT "=")
(ID "with_cwd")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "stop_readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "was_executing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "console")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "halfbar")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "console")
(PUNCT ".")
(ID "width")
(PUNCT ")")
(PUNCT "-")
(LIT 16)
(PUNCT ")")
(PUNCT "//")
(LIT 2)
(PUNCT ")")
(PUNCT "*")
(LIT "=")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "halfbar")
(PUNCT "+")
(LIT " RESTART ")
(PUNCT "+")
(ID "halfbar")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "restart")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_gravity")
(PUNCT "(")
(LIT "restart")
(PUNCT ",")
(LIT "left")
(PUNCT ")")
(NEWLINE)
(ID "console")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gui")
(PUNCT "=")
(ID "RemoteDebugger")
(PUNCT ".")
(ID "restart_subprocess_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ")")
(NEWLINE)
(ID "debug")
(PUNCT ".")
(ID "load_breakpoints")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "compile")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "flags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "original_compiler_flags")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restarting")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__request_interrupt")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "remotecall")
(PUNCT "(")
(LIT "exec")
(PUNCT ",")
(LIT "interrupt_the_server")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "interrupt_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__request_interrupt")
(PUNCT ")")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "kill_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_afterid")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "after_cancel")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_afterid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "listening_sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "terminate_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "executing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "terminate_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make sure subprocess is terminated")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcsubproc")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcsubproc")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "transfer_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "with_cwd")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "with_cwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(NEWLINE)
(ID "path")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "path")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "runcommand")
(PUNCT "(")
(LIT "if 1:\n        import sys as _sys\n        _sys.path = %r\n        del _sys\n        \n")
(PUNCT "%")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "active_seq")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "poll_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "clt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(NEWLINE)
(KEYWORD if)
(ID "clt")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "clt")
(PUNCT ".")
(ID "pollresponse")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "active_seq")
(PUNCT ",")
(ID "wait")
(PUNCT "=")
(LIT 0.05)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "EOFError")
(PUNCT ",")
(ID "OSError")
(PUNCT ",")
(ID "KeyboardInterrupt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "response")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restart_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "active_seq")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "how")
(PUNCT ",")
(ID "what")
(PUNCT "=")
(ID "response")
(NEWLINE)
(ID "console")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "console")
(NEWLINE)
(KEYWORD if)
(ID "how")
(PUNCT "==")
(LIT "OK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "what")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "what")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "console")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "how")
(PUNCT "==")
(LIT "EXCEPTION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "getvar")
(PUNCT "(")
(LIT "<<toggle-jit-stack-viewer>>")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remote_stack_viewer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "how")
(PUNCT "==")
(LIT "ERROR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errmsg")
(PUNCT "=")
(LIT "PyShell.ModifiedInterpreter: Subprocess ERROR:\n")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "errmsg")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "__stderr__")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "errmsg")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "console")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "endexecuting")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_afterid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "after")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "pollinterval")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "poll_subprocess")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "debugger")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "setdebugger")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "debugger")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debugger")
(PUNCT "=")
(ID "debugger")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getdebugger")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "debugger")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_remote_stack_viewer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initiate the remote stack viewer from a separate thread.\n\n        This method is called from the subprocess, and by returning from this\n        method we allow the subprocess to unblock.  After a bit the shell\n        requests the subprocess to open the remote stack viewer which returns a\n        static object looking at the last exception.  It is queried through\n        the RPC mechanism.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "after")
(PUNCT "(")
(LIT 300)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "remote_stack_viewer")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remote_stack_viewer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "RemoteObjectBrowser")
(NEWLINE)
(ID "oid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "remotequeue")
(PUNCT "(")
(LIT "exec")
(PUNCT ",")
(LIT "stackviewer")
(PUNCT ",")
(PUNCT "(")
(LIT "flist")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "oid")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "root")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "item")
(PUNCT "=")
(ID "RemoteObjectBrowser")
(PUNCT ".")
(ID "StubObjectTreeItem")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ",")
(ID "oid")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "TreeWidget")
(KEYWORD import)
(ID "ScrolledCanvas")
(PUNCT ",")
(ID "TreeNode")
(NEWLINE)
(ID "top")
(PUNCT "=")
(ID "Toplevel")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "theme")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "Theme")
(PUNCT ",")
(LIT "name")
(PUNCT ")")
(NEWLINE)
(ID "background")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetHighlight")
(PUNCT "(")
(ID "theme")
(PUNCT ",")
(LIT "normal")
(PUNCT ")")
(PUNCT "[")
(LIT "background")
(PUNCT "]")
(NEWLINE)
(ID "sc")
(PUNCT "=")
(ID "ScrolledCanvas")
(PUNCT "(")
(ID "top")
(PUNCT ",")
(ID "bg")
(PUNCT "=")
(ID "background")
(PUNCT ",")
(ID "highlightthickness")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "sc")
(PUNCT ".")
(ID "frame")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "expand")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "both")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT "=")
(ID "TreeNode")
(PUNCT "(")
(ID "sc")
(PUNCT ".")
(ID "canvas")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "expand")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "gid")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD def)
(ID "execsource")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like runsource() but assumes complete exec source")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stuffsource")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "execfile")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "execfile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "source")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute an existing file")
(NEWLINE)
(KEYWORD if)
(ID "source")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "tokenize")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "compile")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(LIT "exec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OverflowError")
(PUNCT ",")
(ID "SyntaxError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "*** Error in script or command!\n")
(LIT "Traceback (most recent call last):")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "InteractiveInterpreter")
(PUNCT ".")
(ID "showsyntaxerror")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "runcode")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "runsource")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend base class method: Stuff the source in the line cache first")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stuffsource")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "more")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(PUNCT "=")
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "filterwarnings")
(PUNCT "(")
(ID "action")
(PUNCT "=")
(LIT "error")
(PUNCT ",")
(ID "category")
(PUNCT "=")
(ID "SyntaxWarning")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "InteractiveInterpreter")
(PUNCT ".")
(ID "runsource")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "stuffsource")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stuff source in the filename cache")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(LIT "<pyshell#%d>")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "gid")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gid")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "source")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "linecache")
(PUNCT ".")
(ID "cache")
(PUNCT "[")
(ID "filename")
(PUNCT "]")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "lines")
(PUNCT ",")
(ID "filename")
(NEWLINE)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prepend_syspath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Prepend sys.path with file's directory if not already included")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "runcommand")
(PUNCT "(")
(LIT "if 1:\n            _filename = %r\n            import sys as _sys\n            from os.path import dirname as _dirname\n            _dir = _dirname(_filename)\n            if not _dir in _sys.path:\n                _sys.path.insert(0, _dir)\n            del _filename, _sys, _dirname, _dir\n            \n")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "showsyntaxerror")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override Interactive Interpreter method: Use Colorizing\n\n        Color the offending position instead of printing it and pointing at it\n        with a caret.\n\n        ")
(NEWLINE)
(ID "tkconsole")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "ERROR")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(NEWLINE)
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "msg")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD or)
(ID "value")
(KEYWORD or)
(LIT "<no detail available>")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "lineno")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD or)
(LIT 1)
(NEWLINE)
(ID "offset")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "offset")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD or)
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "offset")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "lineno")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(LIT "iomark + %d chars")
(PUNCT "%")
(PUNCT "(")
(ID "offset")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(LIT "iomark linestart + %d lines + %d chars")
(PUNCT "%")
(PUNCT "(")
(ID "lineno")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "offset")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tkconsole")
(PUNCT ".")
(ID "colorize_syntax_error")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(ID "tkconsole")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "SyntaxError: %s\n")
(PUNCT "%")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "tkconsole")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "showtraceback")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend base class method to reset output properly")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "checklinecache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "InteractiveInterpreter")
(PUNCT ".")
(ID "showtraceback")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "getvar")
(PUNCT "(")
(LIT "<<toggle-jit-stack-viewer>>")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "open_stack_viewer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "checklinecache")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "cache")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "c")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "key")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(LIT "<>")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "c")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "runcommand")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the code without invoking the debugger")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "executing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "display_executing_dialog")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "remotequeue")
(PUNCT "(")
(LIT "exec")
(PUNCT ",")
(LIT "runcode")
(PUNCT ",")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runcode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override base class method")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "executing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "restart_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "checklinecache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "filters")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save_warnings_filters")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "debugger")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "debugger")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "beginexecuting")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "debugger")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "active_seq")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ".")
(ID "asyncqueue")
(PUNCT "(")
(LIT "exec")
(PUNCT ",")
(LIT "runcode")
(PUNCT ",")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "debugger")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debugger")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "SystemExit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tkMessageBox")
(PUNCT ".")
(ID "askyesno")
(PUNCT "(")
(LIT "Exit?")
(PUNCT ",")
(LIT "Do you want to exit altogether?")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "yes")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "showtraceback")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "IDLE internal error in runcode()")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "showtraceback")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "endexecuting")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "canceled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "KeyboardInterrupt")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "showtraceback")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "endexecuting")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override base class method")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "display_port_binding_error")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tkMessageBox")
(PUNCT ".")
(ID "showerror")
(PUNCT "(")
(LIT "Port Binding Error")
(PUNCT ",")
(LIT "IDLE can't bind to a TCP/IP port, which is necessary to ")
(LIT "communicate with its Python execution server.  This might be ")
(LIT "because no networking is installed on this computer.  ")
(LIT "Run IDLE with the -n command line switch to start without a ")
(LIT "subprocess and refer to Help/IDLE Help 'Running without a ")
(LIT "subprocess' for further details.")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "display_no_subprocess_error")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tkMessageBox")
(PUNCT ".")
(ID "showerror")
(PUNCT "(")
(LIT "Subprocess Startup Error")
(PUNCT ",")
(LIT "IDLE's subprocess didn't make connection.  Either IDLE can't ")
(LIT "start a subprocess or personal firewall software is blocking ")
(LIT "the connection.")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "display_executing_dialog")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tkMessageBox")
(PUNCT ".")
(ID "showerror")
(PUNCT "(")
(LIT "Already executing")
(PUNCT ",")
(LIT "The Python Shell window is already executing a command; ")
(LIT "please wait until it is finished.")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tkconsole")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PyShell")
(PUNCT "(")
(ID "OutputWindow")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell_title")
(PUNCT "=")
(LIT "Python ")
(PUNCT "+")
(ID "python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(LIT " Shell")
(NEWLINE)
(ID "ColorDelegator")
(PUNCT "=")
(ID "ModifiedColorDelegator")
(NEWLINE)
(ID "UndoDelegator")
(PUNCT "=")
(ID "ModifiedUndoDelegator")
(NEWLINE)
(ID "menu_specs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "file")
(PUNCT ",")
(LIT "_File")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "edit")
(PUNCT ",")
(LIT "_Edit")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "debug")
(PUNCT ",")
(LIT "_Debug")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "options")
(PUNCT ",")
(LIT "_Options")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "windows")
(PUNCT ",")
(LIT "_Window")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "help")
(PUNCT ",")
(LIT "_Help")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "IdleHistory")
(KEYWORD import)
(ID "History")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flist")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ms")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "menu_specs")
(NEWLINE)
(KEYWORD if)
(ID "ms")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ms")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(PUNCT "(")
(LIT "shell")
(PUNCT ",")
(LIT "She_ll")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT "=")
(ID "ModifiedInterpreter")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "flist")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(ID "Tk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fixwordbreaks")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "withdraw")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "flist")
(PUNCT "=")
(ID "PyShellFileList")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "OutputWindow")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flist")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "usetabs")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "indentwidth")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "context_use_ps1")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(ID "wrap")
(PUNCT "=")
(LIT "char")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<newline-and-indent>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "enter_callback")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<plain-newline-and-indent>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "linefeed_callback")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<interrupt-execution>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "cancel_callback")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<end-of-file>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "eof_callback")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<open-stack-viewer>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "open_stack_viewer")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<toggle-debugger>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "toggle_debugger")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<toggle-jit-stack-viewer>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "toggle_jit_stack_viewer")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<view-restart>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "view_restart_mark")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<restart-shell>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "restart_shell")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "save_stdout")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save_stderr")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "save_stdin")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "IOBinding")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "PseudoInputFile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "stdin")
(PUNCT ",")
(ID "IOBinding")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "PseudoOutputFile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "stdout")
(PUNCT ",")
(ID "IOBinding")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "PseudoOutputFile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "stderr")
(PUNCT ",")
(ID "IOBinding")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "console")
(PUNCT "=")
(ID "PseudoOutputFile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "console")
(PUNCT ",")
(ID "IOBinding")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stdin")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "pydoc")
(NEWLINE)
(ID "pydoc")
(PUNCT ".")
(ID "pager")
(PUNCT "=")
(ID "pydoc")
(PUNCT ".")
(ID "plainpager")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "__stderr__")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "History")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pollinterval")
(PUNCT "=")
(LIT 50)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_standard_extension_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "idleConf")
(PUNCT ".")
(ID "GetExtensions")
(PUNCT "(")
(ID "shell_only")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "reading")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "executing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "canceled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "endoffile")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "closing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "_stop_readline_flag")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "set_warning_stream")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "warning_stream")
(NEWLINE)
(ID "warning_stream")
(PUNCT "=")
(ID "stream")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_warning_stream")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "warning_stream")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "toggle_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "executing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tkMessageBox")
(PUNCT ".")
(ID "showerror")
(PUNCT "(")
(LIT "Don't debug now")
(PUNCT ",")
(LIT "You can only toggle the debugger when idle")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_debugger_indicator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "db")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "getdebugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "db")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_debugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "open_debugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_debugger_indicator")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "db")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "getdebugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setvar")
(PUNCT "(")
(LIT "<<toggle-debugger>>")
(PUNCT ",")
(KEYWORD not)
(KEYWORD not)
(ID "db")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "toggle_jit_stack_viewer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "db")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "getdebugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "db")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "setdebugger")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "db")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "RemoteDebugger")
(PUNCT ".")
(ID "close_remote_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "console")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "[DEBUG OFF]\n")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "ps1")
(PUNCT "=")
(LIT ">>> ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_debugger_indicator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dbg_gui")
(PUNCT "=")
(ID "RemoteDebugger")
(PUNCT ".")
(ID "start_remote_debugger")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dbg_gui")
(PUNCT "=")
(ID "Debugger")
(PUNCT ".")
(ID "Debugger")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "setdebugger")
(PUNCT "(")
(ID "dbg_gui")
(PUNCT ")")
(NEWLINE)
(ID "dbg_gui")
(PUNCT ".")
(ID "load_breakpoints")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "ps1")
(PUNCT "=")
(LIT "[DEBUG ON]\n>>> ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_debugger_indicator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "beginexecuting")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper for ModifiedInterpreter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "executing")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "endexecuting")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper for ModifiedInterpreter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "executing")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend EditorWindow.close()")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "executing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "tkMessageBox")
(PUNCT ".")
(ID "askokcancel")
(PUNCT "(")
(LIT "Kill?")
(PUNCT ",")
(LIT "The program is still running!\n Do you want to kill it?")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "ok")
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "response")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "cancel")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stop_readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "closing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD return)
(ID "EditorWindow")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extend EditorWindow._close(), shut down debugger and execution server")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close_debugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "kill_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save_stdout")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save_stderr")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "save_stdin")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "console")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flist")
(PUNCT ".")
(ID "pyshell")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "EditorWindow")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ispythonsource")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override EditorWindow method: never remove the colorizer")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "short_title")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "shell_title")
(NEWLINE)
(DEDENT)
(ID "COPYRIGHT")
(PUNCT "=")
(LIT "Type \"copyright\", \"credits\" or \"license()\" for more information.")
(NEWLINE)
(KEYWORD def)
(ID "begin")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nosub")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "client")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "start_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "client")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nosub")
(PUNCT "=")
(PUNCT "(")
(LIT "==== No Subprocess ====\n\n")
(PUNCT "+")
(LIT "WARNING: Running IDLE without a Subprocess is deprecated\n")
(PUNCT "+")
(LIT "and will be removed in a later version. See Help/IDLE Help\n")
(PUNCT "+")
(LIT "for details.\n\n")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "displayhook")
(PUNCT "=")
(ID "rpc")
(PUNCT ".")
(ID "displayhook")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Python %s on %s\n%s\n%s")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "COPYRIGHT")
(PUNCT ",")
(ID "nosub")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "tkinter")
(NEWLINE)
(ID "tkinter")
(PUNCT ".")
(ID "_default_root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stop_readline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_stop_readline_flag")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "save")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reading")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT "=")
(ID "save")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_stop_readline_flag")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_stop_readline_flag")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT "\n")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyboardInterrupt")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "endoffile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "endoffile")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "line")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isatty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cancel_callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "sel.first")
(PUNCT ",")
(LIT "!=")
(PUNCT ",")
(LIT "sel.last")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "executing")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "KeyboardInterrupt\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "showprompt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "endoffile")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "executing")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "getdebugger")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "restart_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "interrupt_subprocess")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "eof_callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "executing")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "==")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "==")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "executing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "endoffile")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "linefeed_callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline_and_indent_event")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "enter_callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "executing")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sel")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "sel.first")
(PUNCT ",")
(LIT "sel.last")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "sel.last")
(PUNCT ",")
(LIT "<=")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "recall")
(PUNCT "(")
(ID "sel")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "iomark linestart")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prev")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_prevrange")
(PUNCT "(")
(LIT "stdin")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "prev")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(ID "prev")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "recall")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "prev")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "prev")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(ID "next")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_nextrange")
(PUNCT "(")
(LIT "stdin")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "next")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert lineend")
(PUNCT ",")
(LIT ">=")
(PUNCT ",")
(ID "next")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "recall")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "next")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "next")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(ID "indices")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_nextrange")
(PUNCT "(")
(LIT "console")
(PUNCT ",")
(LIT "insert linestart")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "indices")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(ID "indices")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "<=")
(PUNCT ",")
(LIT "insert linestart")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "recall")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "indices")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "insert lineend")
(PUNCT ")")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "recall")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "insert linestart")
(PUNCT ",")
(LIT "insert lineend")
(PUNCT ")")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "s")
(KEYWORD and)
(KEYWORD not)
(ID "s")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "end-1c linestart")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline_and_indent_event")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline_and_indent_event")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_add")
(PUNCT "(")
(LIT "stdin")
(PUNCT ",")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "update_idletasks")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "reading")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "runit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "recall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "^\\s*\\n")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\n\\s*$")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "undo_block_start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "sel")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "insert linestart")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "prefix")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline_and_indent_event")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "insert linestart")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_base_indent")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "^([ \\t]*)")
(PUNCT ",")
(ID "lines")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "new_base_indent")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "^([ \\t]*)")
(PUNCT ",")
(ID "prefix")
(PUNCT ")")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "orig_base_indent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "new_base_indent")
(PUNCT "+")
(ID "line")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "orig_base_indent")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "\n")
(PUNCT "+")
(ID "line")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "undo_block_stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "runit")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(LIT " \t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "i")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(LIT " \t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "more")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "runsource")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_stack_viewer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "remote_stack_viewer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "last_traceback")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tkMessageBox")
(PUNCT ".")
(ID "showerror")
(PUNCT "(")
(LIT "No stack trace")
(PUNCT ",")
(LIT "There is no stack trace yet.\n")
(LIT "(sys.last_traceback is not defined)")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "StackViewer")
(KEYWORD import)
(ID "StackBrowser")
(NEWLINE)
(ID "sv")
(PUNCT "=")
(ID "StackBrowser")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "root")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "flist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "view_restart_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "iomark")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "restart")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "restart_shell")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Callback for Run/Restart Shell Cntl-F6")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "restart_subprocess")
(PUNCT "(")
(ID "with_cwd")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "showprompt")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "resetoutput")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "ps1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "console")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_line_and_column")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "reset_undo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resetoutput")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT ".")
(ID "store")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "end-2c")
(PUNCT ")")
(PUNCT "!=")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "end-1c")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_line_and_column")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "tags")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(KEYWORD and)
(ID "max")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ">")
(LIT "\uFFFF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "start")
(PUNCT ",")
(ID "char")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "char")
(PUNCT ">")
(LIT "\uFFFF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "UnicodeEncodeError")
(PUNCT "(")
(LIT "UCS-2")
(PUNCT ",")
(ID "char")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "start")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(LIT "Non-BMP character not supported in Tk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_gravity")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "right")
(PUNCT ")")
(NEWLINE)
(ID "count")
(PUNCT "=")
(ID "OutputWindow")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "tags")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_gravity")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "left")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canceled")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "use_subprocess")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyboardInterrupt")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "count")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rmenu_check_cut")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "sel.first")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "disabled")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "disabled")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "rmenu_check_cut")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rmenu_check_paste")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "iomark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "disabled")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "rmenu_check_paste")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PseudoFile")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "TextIOBase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "tags")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "shell")
(PUNCT "=")
(ID "shell")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tags")
(PUNCT "=")
(ID "tags")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "encoding")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s>")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "tags")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isatty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PseudoOutputFile")
(PUNCT "(")
(ID "PseudoFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "writable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "write to closed file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "must be str, not ")
(PUNCT "+")
(ID "type")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "str")
(PUNCT ".")
(ID "__str__")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "shell")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PseudoInputFile")
(PUNCT "(")
(ID "PseudoFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "tags")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PseudoFile")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "tags")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_line_buffer")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "read from closed file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "size")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "must be int, not ")
(PUNCT "+")
(ID "type")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_line_buffer")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_line_buffer")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "size")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "shell")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "result")
(PUNCT "+=")
(ID "line")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT "<")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "shell")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "result")
(PUNCT "+=")
(ID "line")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_line_buffer")
(PUNCT "=")
(ID "result")
(PUNCT "[")
(ID "size")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "result")
(PUNCT "[")
(PUNCT ":")
(ID "size")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "read from closed file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "size")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "must be int, not ")
(PUNCT "+")
(ID "type")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_line_buffer")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "shell")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "size")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "eol")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "\n")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "eol")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "eol")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_line_buffer")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "size")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "size")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "shell")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "usage_msg")
(PUNCT "=")
(LIT "\nUSAGE: idle  [-deins] [-t title] [file]*\n       idle  [-dns] [-t title] (-c cmd | -r file) [arg]*\n       idle  [-dns] [-t title] - [arg]*\n\n  -h         print this help message and exit\n  -n         run IDLE without a subprocess (DEPRECATED,\n             see Help/IDLE Help for details)\n\nThe following options will override the IDLE 'settings' configuration:\n\n  -e         open an edit window\n  -i         open a shell window\n\nThe following options imply -i and will open a shell:\n\n  -c cmd     run the command in a shell, or\n  -r file    run script from file\n\n  -d         enable the debugger\n  -s         run $IDLESTARTUP or $PYTHONSTARTUP before anything else\n  -t title   set title of shell window\n\nA default edit window will be bypassed when -c, -r, or - are used.\n\n[arg]* are passed to the command (-c) or script (-r) in sys.argv[1:].\n\nExamples:\n\nidle\n        Open an edit window or shell depending on IDLE's configuration.\n\nidle foo.py foobar.py\n        Edit the files, also open a shell if configured to start with shell.\n\nidle -est \"Baz\" foo.py\n        Run $IDLESTARTUP or $PYTHONSTARTUP, edit foo.py, and open a shell\n        window with the title \"Baz\".\n\nidle -c \"import sys; print(sys.argv)\" \"foo\"\n        Open a shell window and run the command, passing \"-c\" in sys.argv[0]\n        and \"foo\" in sys.argv[1].\n\nidle -d -s -r foo.py \"Hello World\"\n        Open a shell window, run a startup script, enable the debugger, and\n        run foo.py, passing \"foo.py\" in sys.argv[0] and \"Hello World\" in\n        sys.argv[1].\n\necho \"import sys; print(sys.argv)\" | idle - \"foobar\"\n        Open a shell window, run the script piped in, passing '' in sys.argv[0]\n        and \"foobar\" in sys.argv[1].\n")
(NEWLINE)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "flist")
(PUNCT ",")
(ID "root")
(PUNCT ",")
(ID "use_subprocess")
(NEWLINE)
(ID "capture_warnings")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "use_subprocess")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "enable_edit")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "script")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "startup")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "c:deihnr:st:")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Error: %s\n%s")
(PUNCT "%")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "usage_msg")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "o")
(PUNCT ",")
(ID "a")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-c")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "a")
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debug")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "enable_edit")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-h")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "usage_msg")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-i")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT " Warning: running IDLE without a subprocess is deprecated.")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "use_subprocess")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script")
(PUNCT "=")
(ID "a")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "script")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "No script file: ")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startup")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PyShell")
(PUNCT ".")
(ID "shell_title")
(PUNCT "=")
(ID "a")
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "args")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(KEYWORD and)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(PUNCT "+")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cmd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(PUNCT "[")
(LIT "-c")
(PUNCT "]")
(PUNCT "+")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "script")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(PUNCT "[")
(ID "script")
(PUNCT "]")
(PUNCT "+")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "enable_edit")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "pathx")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pathx")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "pathx")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dir")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "edit_start")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "General")
(PUNCT ",")
(LIT "editor-on-startup")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "bool")
(PUNCT ")")
(NEWLINE)
(ID "enable_edit")
(PUNCT "=")
(ID "enable_edit")
(KEYWORD or)
(ID "edit_start")
(NEWLINE)
(ID "enable_shell")
(PUNCT "=")
(ID "enable_shell")
(KEYWORD or)
(KEYWORD not)
(ID "enable_edit")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "Tk")
(PUNCT "(")
(ID "className")
(PUNCT "=")
(LIT "Idle")
(PUNCT ")")
(NEWLINE)
(ID "icondir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(PUNCT ",")
(LIT "Icons")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "system")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "Windows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "iconfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "icondir")
(PUNCT ",")
(LIT "idle.ico")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "wm_iconbitmap")
(PUNCT "(")
(ID "default")
(PUNCT "=")
(ID "iconfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "TkVersion")
(PUNCT ">=")
(LIT 8.5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ext")
(PUNCT "=")
(LIT ".png")
(KEYWORD if)
(ID "TkVersion")
(PUNCT ">=")
(LIT 8.6)
(KEYWORD else)
(LIT ".gif")
(NEWLINE)
(ID "iconfiles")
(PUNCT "=")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "icondir")
(PUNCT ",")
(LIT "idle_%d%s")
(PUNCT "%")
(PUNCT "(")
(ID "size")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "size")
(KEYWORD in)
(PUNCT "(")
(LIT 16)
(PUNCT ",")
(LIT 32)
(PUNCT ",")
(LIT 48)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "icons")
(PUNCT "=")
(PUNCT "[")
(ID "PhotoImage")
(PUNCT "(")
(ID "file")
(PUNCT "=")
(ID "iconfile")
(PUNCT ")")
(KEYWORD for)
(ID "iconfile")
(KEYWORD in)
(ID "iconfiles")
(PUNCT "]")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "wm_iconphoto")
(PUNCT "(")
(KEYWORD True)
(PUNCT ",")
(PUNCT "*")
(ID "icons")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fixwordbreaks")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "withdraw")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "flist")
(PUNCT "=")
(ID "PyShellFileList")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "macosxSupport")
(PUNCT ".")
(ID "setupApp")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "flist")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "enable_edit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "cmd")
(KEYWORD or)
(ID "script")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "args")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flist")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flist")
(PUNCT ".")
(ID "new")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "enable_shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT "=")
(ID "flist")
(PUNCT ".")
(ID "open_shell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "macosxSupport")
(PUNCT ".")
(ID "isAquaTk")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(ID "flist")
(PUNCT ".")
(ID "dict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "top")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT "=")
(ID "flist")
(PUNCT ".")
(ID "pyshell")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "open_debugger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "startup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "IDLESTARTUP")
(PUNCT ")")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PYTHONSTARTUP")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "execfile")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "cmd")
(KEYWORD or)
(ID "script")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "runcommand")
(PUNCT "(")
(LIT "if 1:\n            import sys as _sys\n            _sys.argv = %r\n            del _sys\n            \n")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cmd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "execsource")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "script")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "prepend_syspath")
(PUNCT "(")
(ID "script")
(PUNCT ")")
(NEWLINE)
(ID "shell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "execfile")
(PUNCT "(")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tkversionwarning")
(PUNCT "=")
(ID "macosxSupport")
(PUNCT ".")
(ID "tkVersionWarning")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tkversionwarning")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "runcommand")
(PUNCT "(")
(LIT "print('%s')")
(PUNCT "%")
(ID "tkversionwarning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(ID "flist")
(PUNCT ".")
(ID "inversedict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "root")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "capture_warnings")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "PyShell")
(PUNCT "]")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "__main__")
(PUNCT "]")
(NEWLINE)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "capture_warnings")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ENDMARKER)
