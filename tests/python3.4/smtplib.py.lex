(LIT "SMTP/ESMTP client class.\n\nThis should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP\nAuthentication) and RFC 2487 (Secure SMTP over TLS).\n\nNotes:\n\nPlease remember, when doing ESMTP, that the names of the SMTP service\nextensions are NOT the same thing as the option keywords for the RCPT\nand MAIL commands!\n\nExample:\n\n  >>> import smtplib\n  >>> s=smtplib.SMTP(\"localhost\")\n  >>> print(s.help())\n  This is Sendmail version 8.8.4\n  Topics:\n      HELO    EHLO    MAIL    RCPT    DATA\n      RSET    NOOP    QUIT    HELP    VRFY\n      EXPN    VERB    ETRN    DSN\n  For more info use \"HELP <topic>\".\n  To report bugs in the implementation send email to\n      sendmail-bugs@sendmail.org.\n  For local information send email to Postmaster at your site.\n  End of HELP info\n  >>> s.putcmd(\"vrfy\",\"someone@here\")\n  >>> s.getreply()\n  (250, \"Somebody OverHere <somebody@here.my.org>\")\n  >>> s.quit()\n")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "utils")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "message")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "generator")
(NEWLINE)
(KEYWORD import)
(ID "base64")
(NEWLINE)
(KEYWORD import)
(ID "hmac")
(NEWLINE)
(KEYWORD import)
(ID "copy")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "base64mime")
(KEYWORD import)
(ID "body_encode")
(KEYWORD as)
(ID "encode_base64")
(NEWLINE)
(KEYWORD from)
(ID "sys")
(KEYWORD import)
(ID "stderr")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "SMTPException")
(PUNCT ",")
(LIT "SMTPServerDisconnected")
(PUNCT ",")
(LIT "SMTPResponseException")
(PUNCT ",")
(LIT "SMTPSenderRefused")
(PUNCT ",")
(LIT "SMTPRecipientsRefused")
(PUNCT ",")
(LIT "SMTPDataError")
(PUNCT ",")
(LIT "SMTPConnectError")
(PUNCT ",")
(LIT "SMTPHeloError")
(PUNCT ",")
(LIT "SMTPAuthenticationError")
(PUNCT ",")
(LIT "quoteaddr")
(PUNCT ",")
(LIT "quotedata")
(PUNCT ",")
(LIT "SMTP")
(PUNCT "]")
(NEWLINE)
(ID "SMTP_PORT")
(PUNCT "=")
(LIT 25)
(NEWLINE)
(ID "SMTP_SSL_PORT")
(PUNCT "=")
(LIT 465)
(NEWLINE)
(ID "CRLF")
(PUNCT "=")
(LIT "\r\n")
(NEWLINE)
(ID "bCRLF")
(PUNCT "=")
(LIT #"\r\n")
(NEWLINE)
(ID "_MAXLINE")
(PUNCT "=")
(LIT 8192)
(NEWLINE)
(ID "OLDSTYLE_AUTH")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "auth=(.*)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "SMTPException")
(PUNCT "(")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for all exceptions raised by this module.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SMTPServerDisconnected")
(PUNCT "(")
(ID "SMTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Not connected to any SMTP server.\n\n    This exception is raised when the server unexpectedly disconnects,\n    or when an attempt is made to use the SMTP instance before\n    connecting it to a server.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SMTPResponseException")
(PUNCT "(")
(ID "SMTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for all exceptions that include an SMTP error code.\n\n    These exceptions are generated in some instances when the SMTP\n    server returns an error code.  The error code is stored in the\n    `smtp_code' attribute of the error, and the `smtp_error' attribute\n    is set to the error message.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "smtp_code")
(PUNCT "=")
(ID "code")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "smtp_error")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SMTPSenderRefused")
(PUNCT "(")
(ID "SMTPResponseException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sender address refused.\n\n    In addition to the attributes set by on all SMTPResponseException\n    exceptions, this sets `sender' to the string that the SMTP refused.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "sender")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "smtp_code")
(PUNCT "=")
(ID "code")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "smtp_error")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sender")
(PUNCT "=")
(ID "sender")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "sender")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SMTPRecipientsRefused")
(PUNCT "(")
(ID "SMTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "All recipient addresses refused.\n\n    The errors for each recipient are accessible through the attribute\n    'recipients', which is a dictionary of exactly the same sort as\n    SMTP.sendmail() returns.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "recipients")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "recipients")
(PUNCT "=")
(ID "recipients")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "recipients")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SMTPDataError")
(PUNCT "(")
(ID "SMTPResponseException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The SMTP server didn't accept the data.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SMTPConnectError")
(PUNCT "(")
(ID "SMTPResponseException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error during connection establishment.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SMTPHeloError")
(PUNCT "(")
(ID "SMTPResponseException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The server refused our HELO reply.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SMTPAuthenticationError")
(PUNCT "(")
(ID "SMTPResponseException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Authentication error.\n\n    Most probably the server didn't accept the username/password\n    combination provided.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quoteaddr")
(PUNCT "(")
(ID "addrstring")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quote a subset of the email addresses defined by RFC 821.\n\n    Should be able to handle anything email.utils.parseaddr can handle.\n    ")
(NEWLINE)
(ID "displayname")
(PUNCT ",")
(ID "addr")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "utils")
(PUNCT ".")
(ID "parseaddr")
(PUNCT "(")
(ID "addrstring")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "displayname")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(PUNCT "==")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "addrstring")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "<")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "addrstring")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "<%s>")
(PUNCT "%")
(ID "addrstring")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "<%s>")
(PUNCT "%")
(ID "addr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_addr_only")
(PUNCT "(")
(ID "addrstring")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "displayname")
(PUNCT ",")
(ID "addr")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "utils")
(PUNCT ".")
(ID "parseaddr")
(PUNCT "(")
(ID "addrstring")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "displayname")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(PUNCT "==")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "addrstring")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "addr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quotedata")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quote data for email.\n\n    Double leading '.', and change Unix newline '\\n', or Mac '\\r' into\n    Internet CRLF end-of-line.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "(?m)^\\.")
(PUNCT ",")
(LIT "..")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "(?:\\r\\n|\\n|\\r(?!\\n))")
(PUNCT ",")
(ID "CRLF")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_quote_periods")
(PUNCT "(")
(ID "bindata")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT #"(?m)^\\.")
(PUNCT ",")
(LIT #"..")
(PUNCT ",")
(ID "bindata")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_fix_eols")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "(?:\\r\\n|\\n|\\r(?!\\n))")
(PUNCT ",")
(ID "CRLF")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_have_ssl")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_have_ssl")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SMTP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class manages a connection to an SMTP or ESMTP server.\n    SMTP Objects:\n        SMTP objects have the following attributes:\n            helo_resp\n                This is the message given by the server in response to the\n                most recent HELO command.\n\n            ehlo_resp\n                This is the message given by the server in response to the\n                most recent EHLO command. This is usually multiline.\n\n            does_esmtp\n                This is a True value _after you do an EHLO command_, if the\n                server supports ESMTP.\n\n            esmtp_features\n                This is a dictionary, which, if the server supports ESMTP,\n                will _after you do an EHLO command_, contain the names of the\n                SMTP service extensions this server supports, and their\n                parameters (if any).\n\n                Note, all extension names are mapped to lower case in the\n                dictionary.\n\n        See each method's docstrings for details.  In general, there is a\n        method of the same name to perform each SMTP command.  There is also a\n        method called 'sendmail' that will do an entire mail transaction.\n        ")
(NEWLINE)
(ID "debuglevel")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "helo_resp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "ehlo_msg")
(PUNCT "=")
(LIT "ehlo")
(NEWLINE)
(ID "ehlo_resp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "does_esmtp")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "default_port")
(PUNCT "=")
(ID "SMTP_PORT")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "local_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize a new instance.\n\n        If specified, `host' is the name of the remote host to which to\n        connect.  If specified, `port' specifies the port to which to connect.\n        By default, smtplib.SMTP_PORT is used.  If a host is specified the\n        connect method is called, and if it returns anything other than a\n        success code an SMTPConnectError is raised.  If specified,\n        `local_hostname` is used as the FQDN of the local host in the HELO/EHLO\n        command.  Otherwise, the local hostname is found using\n        socket.getfqdn(). The `source_address` parameter takes a 2-tuple (host,\n        port) for the socket to bind to as its source address before\n        connecting. If the host is '' and port is 0, the OS default behavior\n        will be used.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 220)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPConnectError")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "local_hostname")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "local_hostname")
(PUNCT "=")
(ID "local_hostname")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fqdn")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "getfqdn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT ".")
(KEYWORD in)
(ID "fqdn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "local_hostname")
(PUNCT "=")
(ID "fqdn")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr")
(PUNCT "=")
(LIT "127.0.0.1")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "gaierror")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "local_hostname")
(PUNCT "=")
(LIT "[%s]")
(PUNCT "%")
(ID "addr")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "QUIT")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 221)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPResponseException")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "SMTPServerDisconnected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_debuglevel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "debuglevel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the debug output level.\n\n        A non-false value results in debug messages for connection and for all\n        messages sent to and received from the server.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT "=")
(ID "debuglevel")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_socket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "connect: to")
(PUNCT ",")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "localhost")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connect to a host on a given port.\n\n        If the hostname ends with a colon (`:') followed by a number, and\n        there is no port specified, that suffix will be stripped off and the\n        number interpreted as the port number to use.\n\n        Note: This method is automatically invoked by __init__, if a host is\n        specified during instantiation.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "source_address")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "port")
(KEYWORD and)
(PUNCT "(")
(ID "host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(PUNCT "==")
(ID "host")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "nonnumeric port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "default_port")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "connect:")
(PUNCT ",")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_socket")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "connect:")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send `s' to the server.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "send:")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "sock")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPServerDisconnected")
(PUNCT "(")
(LIT "Server not connected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPServerDisconnected")
(PUNCT "(")
(LIT "please run connect() first")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "putcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a command to the server.")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "str")
(PUNCT "=")
(LIT "%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "CRLF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "str")
(PUNCT "=")
(LIT "%s %s%s")
(PUNCT "%")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "CRLF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getreply")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a reply from the server.\n\n        Returns a tuple consisting of:\n\n          - server response code (e.g. '250', or such, if all goes well)\n            Note: returns -1 if it can't read response code.\n\n          - server response string corresponding to response code (multiline\n            responses are converted to a single, multiline string).\n\n        Raises SMTPServerDisconnected if end-of-file is reached.\n        ")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPServerDisconnected")
(PUNCT "(")
(LIT "Connection unexpectedly closed: ")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPServerDisconnected")
(PUNCT "(")
(LIT "Connection unexpectedly closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "reply:")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPResponseException")
(PUNCT "(")
(LIT 500)
(PUNCT ",")
(LIT "Line too long.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(LIT #" \t\r\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errcode")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errcode")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "!=")
(LIT #"-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "errmsg")
(PUNCT "=")
(LIT #"\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "reply: retcode (%s); Msg: %s")
(PUNCT "%")
(PUNCT "(")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "docmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a command, and return its response code.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "helo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'helo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "helo")
(PUNCT ",")
(ID "name")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "local_hostname")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "helo_resp")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ehlo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " SMTP 'ehlo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ehlo_msg")
(PUNCT ",")
(ID "name")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "local_hostname")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPServerDisconnected")
(PUNCT "(")
(LIT "Server not connected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 250)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "does_esmtp")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "resp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "each")
(KEYWORD in)
(ID "resp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth_match")
(PUNCT "=")
(ID "OLDSTYLE_AUTH")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "each")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "auth_match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "[")
(LIT "auth")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "auth")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "auth_match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "(?P<feature>[A-Za-z0-9][A-Za-z0-9\\-]*) ?")
(PUNCT ",")
(ID "each")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "feature")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "feature")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "params")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "string")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(LIT "feature")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "feature")
(PUNCT "==")
(LIT "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "[")
(ID "feature")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "feature")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "params")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "[")
(ID "feature")
(PUNCT "]")
(PUNCT "=")
(ID "params")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_extn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Does the server support a given SMTP service extension?")
(NEWLINE)
(KEYWORD return)
(ID "opt")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'help' command.\n        Returns help text from server.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "help")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'rset' command -- resets session.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "rset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_rset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal 'rset' command which ignores any SMTPServerDisconnected error.\n\n        Used internally in the library, since the server disconnected error\n        should appear to the application when the *next* command is issued, if\n        we are doing an internal \"safety\" reset.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SMTPServerDisconnected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "noop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'noop' command -- doesn't do anything :>")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "noop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mail")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sender")
(PUNCT ",")
(ID "options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'mail' command -- begins mail xfer session.")
(NEWLINE)
(ID "optionlist")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "options")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "does_esmtp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "optionlist")
(PUNCT "=")
(LIT " ")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "mail")
(PUNCT ",")
(LIT "FROM:%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "quoteaddr")
(PUNCT "(")
(ID "sender")
(PUNCT ")")
(PUNCT ",")
(ID "optionlist")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rcpt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "recip")
(PUNCT ",")
(ID "options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'rcpt' command -- indicates 1 recipient for this mail.")
(NEWLINE)
(ID "optionlist")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "options")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "does_esmtp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "optionlist")
(PUNCT "=")
(LIT " ")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "rcpt")
(PUNCT ",")
(LIT "TO:%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "quoteaddr")
(PUNCT "(")
(ID "recip")
(PUNCT ")")
(PUNCT ",")
(ID "optionlist")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'DATA' command -- sends message data to server.\n\n        Automatically quotes lines beginning with a period per rfc821.\n        Raises SMTPDataError if there is an unexpected reply to the\n        DATA command; the return value from this method is the final\n        response code received when the all data is sent.  If msg\n        is a string, lone '\r' and '\n' characters are converted to\n        '\r\n' characters.  If msg is bytes, it is transmitted as is.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "repl")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "data:")
(PUNCT ",")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "repl")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 354)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPDataError")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "repl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "_fix_eols")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "q")
(PUNCT "=")
(ID "_quote_periods")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "q")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(ID "bCRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT "=")
(ID "q")
(PUNCT "+")
(ID "bCRLF")
(NEWLINE)
(DEDENT)
(ID "q")
(PUNCT "=")
(ID "q")
(PUNCT "+")
(LIT #".")
(PUNCT "+")
(ID "bCRLF")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "q")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "data:")
(PUNCT ",")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "verify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'verify' command -- checks for address validity.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "vrfy")
(PUNCT ",")
(ID "_addr_only")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "vrfy")
(PUNCT "=")
(ID "verify")
(NEWLINE)
(KEYWORD def)
(ID "expn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SMTP 'expn' command -- expands a mailing list.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putcmd")
(PUNCT "(")
(LIT "expn")
(PUNCT ",")
(ID "_addr_only")
(PUNCT "(")
(ID "address")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ehlo_or_helo_if_needed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call self.ehlo() and/or self.helo() if needed.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "helo_resp")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(LIT 200)
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "ehlo")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "<=")
(LIT 299)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "helo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(LIT 200)
(PUNCT "<=")
(ID "code")
(PUNCT "<=")
(LIT 299)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPHeloError")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Log in on an SMTP server that requires authentication.\n\n        The arguments are:\n            - user:     The user name to authenticate with.\n            - password: The password for the authentication.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method will return normally if the authentication was successful.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n         SMTPAuthenticationError  The server didn't accept the username/\n                                  password combination.\n         SMTPException            No suitable authentication method was\n                                  found.\n        ")
(NEWLINE)
(KEYWORD def)
(ID "encode_cram_md5")
(PUNCT "(")
(ID "challenge")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "challenge")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(PUNCT "(")
(ID "challenge")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "user")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "hmac")
(PUNCT ".")
(ID "HMAC")
(PUNCT "(")
(ID "password")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "challenge")
(PUNCT ",")
(LIT "md5")
(PUNCT ")")
(PUNCT ".")
(ID "hexdigest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "encode_base64")
(PUNCT "(")
(ID "response")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "eol")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode_plain")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT "\u0000%s\u0000%s")
(PUNCT "%")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "encode_base64")
(PUNCT "(")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "eol")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "AUTH_PLAIN")
(PUNCT "=")
(LIT "PLAIN")
(NEWLINE)
(ID "AUTH_CRAM_MD5")
(PUNCT "=")
(LIT "CRAM-MD5")
(NEWLINE)
(ID "AUTH_LOGIN")
(PUNCT "=")
(LIT "LOGIN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ehlo_or_helo_if_needed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_extn")
(PUNCT "(")
(LIT "auth")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPException")
(PUNCT "(")
(LIT "SMTP AUTH extension not supported by server.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "advertised_authlist")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "[")
(LIT "auth")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "preferred_auths")
(PUNCT "=")
(PUNCT "[")
(ID "AUTH_CRAM_MD5")
(PUNCT ",")
(ID "AUTH_PLAIN")
(PUNCT ",")
(ID "AUTH_LOGIN")
(PUNCT "]")
(NEWLINE)
(ID "authlist")
(PUNCT "=")
(PUNCT "[")
(ID "auth")
(KEYWORD for)
(ID "auth")
(KEYWORD in)
(ID "preferred_auths")
(KEYWORD if)
(ID "auth")
(KEYWORD in)
(ID "advertised_authlist")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "authlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPException")
(PUNCT "(")
(LIT "No suitable authentication method found.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "authmethod")
(KEYWORD in)
(ID "authlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "authmethod")
(PUNCT "==")
(ID "AUTH_CRAM_MD5")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(ID "AUTH_CRAM_MD5")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(LIT 334)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(ID "encode_cram_md5")
(PUNCT "(")
(ID "resp")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "authmethod")
(PUNCT "==")
(ID "AUTH_PLAIN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(ID "AUTH_PLAIN")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "encode_plain")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "authmethod")
(PUNCT "==")
(ID "AUTH_LOGIN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "AUTH")
(PUNCT ",")
(LIT "%s %s")
(PUNCT "%")
(PUNCT "(")
(ID "AUTH_LOGIN")
(PUNCT ",")
(ID "encode_base64")
(PUNCT "(")
(ID "user")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "eol")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(LIT 334)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(ID "encode_base64")
(PUNCT "(")
(ID "password")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "eol")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "code")
(KEYWORD in)
(PUNCT "(")
(LIT 235)
(PUNCT ",")
(LIT 503)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "SMTPAuthenticationError")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "starttls")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Puts the connection to the SMTP server into TLS mode.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        If the server supports TLS, this will encrypt the rest of the SMTP\n        session. If you provide the keyfile and certfile parameters,\n        the identity of the SMTP server and client can be checked. This,\n        however, depends on whether the socket module really checks the\n        certificates.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ehlo_or_helo_if_needed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_extn")
(PUNCT "(")
(LIT "starttls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SMTPException")
(PUNCT "(")
(LIT "STARTTLS extension not supported by server.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "resp")
(PUNCT ",")
(ID "reply")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "STARTTLS")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "==")
(LIT 220)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "No SSL support included in this Python")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "keyfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context and keyfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "certfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context and certfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_stdlib_context")
(PUNCT "(")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "helo_resp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "does_esmtp")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "resp")
(PUNCT ",")
(ID "reply")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sendmail")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "from_addr")
(PUNCT ",")
(ID "to_addrs")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "mail_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "rcpt_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This command performs an entire mail transaction.\n\n        The arguments are:\n            - from_addr    : The address sending this mail.\n            - to_addrs     : A list of addresses to send this mail to.  A bare\n                             string will be treated as a list with 1 address.\n            - msg          : The message to send.\n            - mail_options : List of ESMTP options (such as 8bitmime) for the\n                             mail command.\n            - rcpt_options : List of ESMTP options (such as DSN commands) for\n                             all the rcpt commands.\n\n        msg may be a string containing characters in the ASCII range, or a byte\n        string.  A string is encoded to bytes using the ascii codec, and lone\n        \\r and \\n characters are converted to \\r\\n characters.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.  If the server does ESMTP, message size\n        and each of the specified options will be passed to it.  If EHLO\n        fails, HELO will be tried and ESMTP options suppressed.\n\n        This method will return normally if the mail is accepted for at least\n        one recipient.  It returns a dictionary, with one entry for each\n        recipient that was refused.  Each entry contains a tuple of the SMTP\n        error code and the accompanying error message sent by the server.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError          The server didn't reply properly to\n                                the helo greeting.\n         SMTPRecipientsRefused  The server rejected ALL recipients\n                                (no mail was sent).\n         SMTPSenderRefused      The server didn't accept the from_addr.\n         SMTPDataError          The server replied with an unexpected\n                                error code (other than a refusal of\n                                a recipient).\n\n        Note: the connection will be open even after an exception is raised.\n\n        Example:\n\n         >>> import smtplib\n         >>> s=smtplib.SMTP(\"localhost\")\n         >>> tolist=[\"one@one.org\",\"two@two.org\",\"three@three.org\",\"four@four.org\"]\n         >>> msg = '''\\\n         ... From: Me@my.org\n         ... Subject: testin'...\n         ...\n         ... This is a test '''\n         >>> s.sendmail(\"me@my.org\",tolist,msg)\n         { \"three@three.org\" : ( 550 ,\"User unknown\" ) }\n         >>> s.quit()\n\n        In the above example, the message was accepted for delivery to three\n        of the four addresses, and one was rejected, with the error code\n        550.  If all addresses are accepted, then the method will return an\n        empty dictionary.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ehlo_or_helo_if_needed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "esmtp_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(ID "_fix_eols")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "does_esmtp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_extn")
(PUNCT "(")
(LIT "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "esmtp_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "size=%d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "mail_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "esmtp_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "mail")
(PUNCT "(")
(ID "from_addr")
(PUNCT ",")
(ID "esmtp_opts")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 250)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(LIT 421)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_rset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "SMTPSenderRefused")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ",")
(ID "from_addr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "senderrs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "to_addrs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_addrs")
(PUNCT "=")
(PUNCT "[")
(ID "to_addrs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "each")
(KEYWORD in)
(ID "to_addrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rcpt")
(PUNCT "(")
(ID "each")
(PUNCT ",")
(ID "rcpt_options")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "code")
(PUNCT "!=")
(LIT 250)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "code")
(PUNCT "!=")
(LIT 251)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "senderrs")
(PUNCT "[")
(ID "each")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(LIT 421)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPRecipientsRefused")
(PUNCT "(")
(ID "senderrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "senderrs")
(PUNCT ")")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "to_addrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_rset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SMTPRecipientsRefused")
(PUNCT "(")
(ID "senderrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 250)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(LIT 421)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_rset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "SMTPDataError")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "senderrs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send_message")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "from_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "to_addrs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "mail_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "rcpt_options")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Converts message to a bytestring and passes it to sendmail.\n\n        The arguments are as for sendmail, except that msg is an\n        email.message.Message object.  If from_addr is None or to_addrs is\n        None, these arguments are taken from the headers of the Message as\n        described in RFC 2822 (a ValueError is raised if there is more than\n        one set of 'Resent-' headers).  Regardless of the values of from_addr and\n        to_addr, any Bcc field (or Resent-Bcc field, when the Message is a\n        resent) of the Message object won't be transmitted.  The Message\n        object is then serialized using email.generator.BytesGenerator and\n        sendmail is called to transmit the message.\n\n        ")
(NEWLINE)
(ID "resent")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "get_all")
(PUNCT "(")
(LIT "Resent-Date")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header_prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "resent")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header_prefix")
(PUNCT "=")
(LIT "Resent-")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "message has more than one 'Resent-' header block")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "from_addr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "from_addr")
(PUNCT "=")
(PUNCT "(")
(ID "msg")
(PUNCT "[")
(ID "header_prefix")
(PUNCT "+")
(LIT "Sender")
(PUNCT "]")
(KEYWORD if)
(PUNCT "(")
(ID "header_prefix")
(PUNCT "+")
(LIT "Sender")
(PUNCT ")")
(KEYWORD in)
(ID "msg")
(KEYWORD else)
(ID "msg")
(PUNCT "[")
(ID "header_prefix")
(PUNCT "+")
(LIT "From")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "to_addrs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr_fields")
(PUNCT "=")
(PUNCT "[")
(ID "f")
(KEYWORD for)
(ID "f")
(KEYWORD in)
(PUNCT "(")
(ID "msg")
(PUNCT "[")
(ID "header_prefix")
(PUNCT "+")
(LIT "To")
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT "[")
(ID "header_prefix")
(PUNCT "+")
(LIT "Bcc")
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT "[")
(ID "header_prefix")
(PUNCT "+")
(LIT "Cc")
(PUNCT "]")
(PUNCT ")")
(KEYWORD if)
(ID "f")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(ID "to_addrs")
(PUNCT "=")
(PUNCT "[")
(ID "a")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "email")
(PUNCT ".")
(ID "utils")
(PUNCT ".")
(ID "getaddresses")
(PUNCT "(")
(ID "addr_fields")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "msg_copy")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "msg_copy")
(PUNCT "[")
(LIT "Bcc")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "msg_copy")
(PUNCT "[")
(LIT "Resent-Bcc")
(PUNCT "]")
(NEWLINE)
(KEYWORD with)
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "bytesmsg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "generator")
(PUNCT ".")
(ID "BytesGenerator")
(PUNCT "(")
(ID "bytesmsg")
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT ".")
(ID "flatten")
(PUNCT "(")
(ID "msg_copy")
(PUNCT ",")
(ID "linesep")
(PUNCT "=")
(LIT "\r\n")
(PUNCT ")")
(NEWLINE)
(ID "flatmsg")
(PUNCT "=")
(ID "bytesmsg")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "sendmail")
(PUNCT "(")
(ID "from_addr")
(PUNCT ",")
(ID "to_addrs")
(PUNCT ",")
(ID "flatmsg")
(PUNCT ",")
(ID "mail_options")
(PUNCT ",")
(ID "rcpt_options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the connection to the SMTP server.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quit")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Terminate the SMTP session.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "docmd")
(PUNCT "(")
(LIT "quit")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ehlo_resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "helo_resp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "esmtp_features")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "does_esmtp")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "SMTP_SSL")
(PUNCT "(")
(ID "SMTP")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " This is a subclass derived from SMTP that connects over an SSL\n        encrypted socket (to use this class you need a socket module that was\n        compiled with SSL support). If host is not specified, '' (the local\n        host) is used. If port is omitted, the standard SMTP-over-SSL port\n        (465) is used.  local_hostname and source_address have the same meaning\n        as they do in the SMTP class.  keyfile and certfile are also optional -\n        they can contain a PEM formatted private key and certificate chain file\n        for the SSL connection. context also optional, can contain a\n        SSLContext, and is an alternative to keyfile and certfile; If it is\n        specified both keyfile and certfile must be None.\n\n        ")
(NEWLINE)
(ID "default_port")
(PUNCT "=")
(ID "SMTP_SSL_PORT")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "local_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "keyfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context and keyfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "certfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "context and certfile arguments are mutually ")
(LIT "exclusive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(NEWLINE)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_stdlib_context")
(PUNCT "(")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(ID "SMTP")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "local_hostname")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_socket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "connect:")
(PUNCT ",")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "new_socket")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(ID "new_socket")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "new_socket")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_host")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "new_socket")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "SMTP_SSL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "LMTP_PORT")
(PUNCT "=")
(LIT 2003)
(NEWLINE)
(KEYWORD class)
(ID "LMTP")
(PUNCT "(")
(ID "SMTP")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "LMTP - Local Mail Transfer Protocol\n\n    The LMTP protocol, which is very similar to ESMTP, is heavily based\n    on the standard SMTP client. It's common to use Unix sockets for\n    LMTP, so our connect() method must support that as well as a regular\n    host:port server.  local_hostname and source_address have the same\n    meaning as they do in the SMTP class.  To specify a Unix socket,\n    you must use an absolute path as the host, starting with a '/'.\n\n    Authentication is supported, using the regular SMTP mechanism. When\n    using a Unix socket, LMTP generally don't support or require any\n    authentication, but your mileage might vary.")
(NEWLINE)
(ID "ehlo_msg")
(PUNCT "=")
(LIT "lhlo")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "LMTP_PORT")
(PUNCT ",")
(ID "local_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize a new instance.")
(NEWLINE)
(ID "SMTP")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "local_hostname")
(PUNCT "=")
(ID "local_hostname")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "localhost")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connect to the LMTP daemon, on either a Unix or a TCP socket.")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "SMTP")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "connect fail:")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getreply")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "connect:")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD def)
(ID "prompt")
(PUNCT "(")
(ID "prompt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "prompt")
(PUNCT "+")
(LIT ": ")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fromaddr")
(PUNCT "=")
(ID "prompt")
(PUNCT "(")
(LIT "From")
(PUNCT ")")
(NEWLINE)
(ID "toaddrs")
(PUNCT "=")
(ID "prompt")
(PUNCT "(")
(LIT "To")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Enter message, end with ^D:")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(ID "msg")
(PUNCT "+")
(ID "line")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "Message length is %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT "=")
(ID "SMTP")
(PUNCT "(")
(LIT "localhost")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "set_debuglevel")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "sendmail")
(PUNCT "(")
(ID "fromaddr")
(PUNCT ",")
(ID "toaddrs")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
