(LIT "Helper to provide extensibility for pickle.\n\nThis is only useful to add pickle support for extension types defined in\nC, not for instances of user-defined classes.\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "pickle")
(PUNCT ",")
(LIT "constructor")
(PUNCT ",")
(LIT "add_extension")
(PUNCT ",")
(LIT "remove_extension")
(PUNCT ",")
(LIT "clear_extension_cache")
(PUNCT "]")
(NEWLINE)
(ID "dispatch_table")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "pickle")
(PUNCT "(")
(ID "ob_type")
(PUNCT ",")
(ID "pickle_function")
(PUNCT ",")
(ID "constructor_ob")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "pickle_function")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "reduction functions must be callable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch_table")
(PUNCT "[")
(ID "ob_type")
(PUNCT "]")
(PUNCT "=")
(ID "pickle_function")
(NEWLINE)
(KEYWORD if)
(ID "constructor_ob")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "constructor")
(PUNCT "(")
(ID "constructor_ob")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "constructor")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "constructors must be callable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "complex")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "pickle_complex")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "complex")
(PUNCT ",")
(PUNCT "(")
(ID "c")
(PUNCT ".")
(ID "real")
(PUNCT ",")
(ID "c")
(PUNCT ".")
(ID "imag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pickle")
(PUNCT "(")
(ID "complex")
(PUNCT ",")
(ID "pickle_complex")
(PUNCT ",")
(ID "complex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_reconstructor")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "base")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "base")
(KEYWORD is)
(ID "object")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "base")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "base")
(PUNCT ".")
(ID "__init__")
(PUNCT "!=")
(ID "object")
(PUNCT ".")
(ID "__init__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(ID "_HEAPTYPE")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 9)
(NEWLINE)
(KEYWORD def)
(ID "_reduce_ex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "proto")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "proto")
(PUNCT "<")
(LIT 2)
(NEWLINE)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__mro__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(LIT "__flags__")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "base")
(PUNCT ".")
(ID "__flags__")
(PUNCT "&")
(ID "_HEAPTYPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "object")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "base")
(KEYWORD is)
(ID "object")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "base")
(KEYWORD is)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "can't pickle %s objects")
(PUNCT "%")
(ID "base")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "state")
(PUNCT "=")
(ID "base")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(ID "base")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getstate")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__getstate__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "__slots__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "a class that defines __slots__ without ")
(LIT "defining __getstate__ cannot be pickled")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "=")
(ID "getstate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_reconstructor")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "dict")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_reconstructor")
(PUNCT ",")
(ID "args")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__newobj__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__newobj_ex__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Used by pickle protocol 4, instead of __newobj__ to allow classes with\n    keyword-only arguments to be pickled correctly.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_slotnames")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of slot names for a given class.\n\n    This needs to find slots defined by the class and its bases, so we\n    can't simply return the __slots__ attribute.  We must walk down\n    the Method Resolution Order and concatenate the __slots__ of each\n    class found there.  (This assumes classes don't modify their\n    __slots__ attribute to misrepresent their slots after the class is\n    defined.)\n    ")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__slotnames__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "names")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "names")
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(LIT "__slots__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "cls")
(PUNCT ".")
(ID "__mro__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "__slots__")
(KEYWORD in)
(ID "c")
(PUNCT ".")
(ID "__dict__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slots")
(PUNCT "=")
(ID "c")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "__slots__")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "slots")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slots")
(PUNCT "=")
(PUNCT "(")
(ID "slots")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "slots")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "__dict__")
(PUNCT ",")
(LIT "__weakref__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "__")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "_%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "c")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cls")
(PUNCT ".")
(ID "__slotnames__")
(PUNCT "=")
(ID "names")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "names")
(NEWLINE)
(DEDENT)
(ID "_extension_registry")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_inverted_registry")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_extension_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "add_extension")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register an extension code.")
(NEWLINE)
(ID "code")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(LIT 1)
(PUNCT "<=")
(ID "code")
(PUNCT "<=")
(LIT 2147483647)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "code out of range")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "_extension_registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT "==")
(ID "code")
(KEYWORD and)
(ID "_inverted_registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "==")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "_extension_registry")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "key %s is already registered with code %s")
(PUNCT "%")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "_extension_registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "code")
(KEYWORD in)
(ID "_inverted_registry")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "code %s is already in use for key %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "_inverted_registry")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_extension_registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "code")
(NEWLINE)
(ID "_inverted_registry")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(PUNCT "=")
(ID "key")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_extension")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unregister an extension code.  For testing only.")
(NEWLINE)
(ID "key")
(PUNCT "=")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "_extension_registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT "!=")
(ID "code")
(KEYWORD or)
(ID "_inverted_registry")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT "!=")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "key %s is not registered with code %s")
(PUNCT "%")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "_extension_registry")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "_inverted_registry")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "code")
(KEYWORD in)
(ID "_extension_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_extension_cache")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear_extension_cache")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_extension_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
