(LIT "distutils.archive_util\n\nUtility functions for creating archive files (tarballs, zip files,\nthat sort of thing).")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "warnings")
(KEYWORD import)
(ID "warn")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "zipfile")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zipfile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsExecError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "spawn")
(KEYWORD import)
(ID "spawn")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "dir_util")
(KEYWORD import)
(ID "mkpath")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "pwd")
(KEYWORD import)
(ID "getpwnam")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getpwnam")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "grp")
(KEYWORD import)
(ID "getgrnam")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getgrnam")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_gid")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a gid, given a group name.")
(NEWLINE)
(KEYWORD if)
(ID "getgrnam")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "getgrnam")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_uid")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns an uid, given a user name.")
(NEWLINE)
(KEYWORD if)
(ID "getpwnam")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "getpwnam")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_tarball")
(PUNCT "(")
(ID "base_name")
(PUNCT ",")
(ID "base_dir")
(PUNCT ",")
(ID "compress")
(PUNCT "=")
(LIT "gzip")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "owner")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "group")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a (possibly compressed) tar file from all the files under\n    'base_dir'.\n\n    'compress' must be \"gzip\" (the default), \"compress\", \"bzip2\", or None.\n    (compress will be deprecated in Python 3.2)\n\n    'owner' and 'group' can be used to define an owner and a group for the\n    archive that is being built. If not provided, the current owner and group\n    will be used.\n\n    The output tar file will be named 'base_dir' +  \".tar\", possibly plus\n    the appropriate compression extension (\".gz\", \".bz2\" or \".Z\").\n\n    Returns the output filename.\n    ")
(NEWLINE)
(ID "tar_compression")
(PUNCT "=")
(PUNCT "{")
(LIT "gzip")
(PUNCT ":")
(LIT "gz")
(PUNCT ",")
(LIT "bzip2")
(PUNCT ":")
(LIT "bz2")
(PUNCT ",")
(KEYWORD None)
(PUNCT ":")
(LIT "")
(PUNCT ",")
(LIT "compress")
(PUNCT ":")
(LIT "")
(PUNCT "}")
(NEWLINE)
(ID "compress_ext")
(PUNCT "=")
(PUNCT "{")
(LIT "gzip")
(PUNCT ":")
(LIT ".gz")
(PUNCT ",")
(LIT "bzip2")
(PUNCT ":")
(LIT ".bz2")
(PUNCT ",")
(LIT "compress")
(PUNCT ":")
(LIT ".Z")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "compress")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "compress")
(KEYWORD not)
(KEYWORD in)
(ID "compress_ext")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "bad value for 'compress': must be None, 'gzip', 'bzip2' ")
(LIT "or 'compress'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "archive_name")
(PUNCT "=")
(ID "base_name")
(PUNCT "+")
(LIT ".tar")
(NEWLINE)
(KEYWORD if)
(ID "compress")
(PUNCT "!=")
(LIT "compress")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "archive_name")
(PUNCT "+=")
(ID "compress_ext")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "compress")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "mkpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "archive_name")
(PUNCT ")")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "tarfile")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Creating tar archive")
(PUNCT ")")
(NEWLINE)
(ID "uid")
(PUNCT "=")
(ID "_get_uid")
(PUNCT "(")
(ID "owner")
(PUNCT ")")
(NEWLINE)
(ID "gid")
(PUNCT "=")
(ID "_get_gid")
(PUNCT "(")
(ID "group")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_set_uid_gid")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "gid")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "gid")
(PUNCT "=")
(ID "gid")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "gname")
(PUNCT "=")
(ID "group")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "uid")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "uid")
(PUNCT "=")
(ID "uid")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "uname")
(PUNCT "=")
(ID "owner")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tar")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "archive_name")
(PUNCT ",")
(LIT "w|%s")
(PUNCT "%")
(ID "tar_compression")
(PUNCT "[")
(ID "compress")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tar")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "filter")
(PUNCT "=")
(ID "_set_uid_gid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tar")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "compress")
(PUNCT "==")
(LIT "compress")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "'compress' will be deprecated.")
(PUNCT ",")
(ID "PendingDeprecationWarning")
(PUNCT ")")
(NEWLINE)
(ID "compressed_name")
(PUNCT "=")
(ID "archive_name")
(PUNCT "+")
(ID "compress_ext")
(PUNCT "[")
(ID "compress")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(PUNCT "[")
(ID "compress")
(PUNCT ",")
(ID "archive_name")
(PUNCT ",")
(ID "compressed_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(PUNCT "[")
(ID "compress")
(PUNCT ",")
(LIT "-f")
(PUNCT ",")
(ID "archive_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "spawn")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "compressed_name")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "archive_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_zipfile")
(PUNCT "(")
(ID "base_name")
(PUNCT ",")
(ID "base_dir")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a zip file from all the files under 'base_dir'.\n\n    The output zip file will be named 'base_name' + \".zip\".  Uses either the\n    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility\n    (if installed and found on the default search path).  If neither tool is\n    available, raises DistutilsExecError.  Returns the name of the output zip\n    file.\n    ")
(NEWLINE)
(ID "zip_filename")
(PUNCT "=")
(ID "base_name")
(PUNCT "+")
(LIT ".zip")
(NEWLINE)
(ID "mkpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "zip_filename")
(PUNCT ")")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "zipfile")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zipoptions")
(PUNCT "=")
(LIT "-r")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zipoptions")
(PUNCT "=")
(LIT "-rq")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(LIT "zip")
(PUNCT ",")
(ID "zipoptions")
(PUNCT ",")
(ID "zip_filename")
(PUNCT ",")
(ID "base_dir")
(PUNCT "]")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsExecError")
(PUNCT "(")
(PUNCT "(")
(LIT "unable to create zip file '%s': ")
(LIT "could neither import the 'zipfile' module nor ")
(LIT "find a standalone zip utility")
(PUNCT ")")
(PUNCT "%")
(ID "zip_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "creating '%s' and adding '%s' to it")
(PUNCT ",")
(ID "zip_filename")
(PUNCT ",")
(ID "base_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zip")
(PUNCT "=")
(ID "zipfile")
(PUNCT ".")
(ID "ZipFile")
(PUNCT "(")
(ID "zip_filename")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "compression")
(PUNCT "=")
(ID "zipfile")
(PUNCT ".")
(ID "ZIP_DEFLATED")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RuntimeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zip")
(PUNCT "=")
(ID "zipfile")
(PUNCT ".")
(ID "ZipFile")
(PUNCT "(")
(ID "zip_filename")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "compression")
(PUNCT "=")
(ID "zipfile")
(PUNCT ".")
(ID "ZIP_STORED")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "dirpath")
(PUNCT ",")
(ID "dirnames")
(PUNCT ",")
(ID "filenames")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "walk")
(PUNCT "(")
(ID "base_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirpath")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zip")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "adding '%s'")
(PUNCT "%")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "zip")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "zip_filename")
(NEWLINE)
(DEDENT)
(ID "ARCHIVE_FORMATS")
(PUNCT "=")
(PUNCT "{")
(LIT "gztar")
(PUNCT ":")
(PUNCT "(")
(ID "make_tarball")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(LIT "compress")
(PUNCT ",")
(LIT "gzip")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(LIT "gzip'ed tar-file")
(PUNCT ")")
(PUNCT ",")
(LIT "bztar")
(PUNCT ":")
(PUNCT "(")
(ID "make_tarball")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(LIT "compress")
(PUNCT ",")
(LIT "bzip2")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(LIT "bzip2'ed tar-file")
(PUNCT ")")
(PUNCT ",")
(LIT "ztar")
(PUNCT ":")
(PUNCT "(")
(ID "make_tarball")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(LIT "compress")
(PUNCT ",")
(LIT "compress")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(LIT "compressed tar file")
(PUNCT ")")
(PUNCT ",")
(LIT "tar")
(PUNCT ":")
(PUNCT "(")
(ID "make_tarball")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(LIT "compress")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(LIT "uncompressed tar file")
(PUNCT ")")
(PUNCT ",")
(LIT "zip")
(PUNCT ":")
(PUNCT "(")
(ID "make_zipfile")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(LIT "ZIP file")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "check_archive_formats")
(PUNCT "(")
(ID "formats")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the first format from the 'format' list that is unknown.\n\n    If all formats are known, returns None\n    ")
(NEWLINE)
(KEYWORD for)
(ID "format")
(KEYWORD in)
(ID "formats")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "format")
(KEYWORD not)
(KEYWORD in)
(ID "ARCHIVE_FORMATS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "format")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_archive")
(PUNCT "(")
(ID "base_name")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(ID "root_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "base_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "owner")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "group")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an archive file (eg. zip or tar).\n\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"ztar\",\n    or \"gztar\".\n\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n    archive.  'base_dir' is the directory where we start archiving from;\n    ie. 'base_dir' will be the common prefix of all files and\n    directories in the archive.  'root_dir' and 'base_dir' both default\n    to the current directory.  Returns the name of the archive file.\n\n    'owner' and 'group' are used when creating a tar archive. By default,\n    uses the current owner and group.\n    ")
(NEWLINE)
(ID "save_cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "root_dir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "changing into '%s'")
(PUNCT ",")
(ID "root_dir")
(PUNCT ")")
(NEWLINE)
(ID "base_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "base_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chdir")
(PUNCT "(")
(ID "root_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "base_dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(NEWLINE)
(DEDENT)
(ID "kwargs")
(PUNCT "=")
(PUNCT "{")
(LIT "dry_run")
(PUNCT ":")
(ID "dry_run")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "format_info")
(PUNCT "=")
(ID "ARCHIVE_FORMATS")
(PUNCT "[")
(ID "format")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unknown archive format '%s'")
(PUNCT "%")
(ID "format")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "func")
(PUNCT "=")
(ID "format_info")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "format_info")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "[")
(ID "arg")
(PUNCT "]")
(PUNCT "=")
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "format")
(PUNCT "!=")
(LIT "zip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwargs")
(PUNCT "[")
(LIT "owner")
(PUNCT "]")
(PUNCT "=")
(ID "owner")
(NEWLINE)
(ID "kwargs")
(PUNCT "[")
(LIT "group")
(PUNCT "]")
(PUNCT "=")
(ID "group")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(ID "base_name")
(PUNCT ",")
(ID "base_dir")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "root_dir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "changing back to '%s'")
(PUNCT ",")
(ID "save_cwd")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "chdir")
(PUNCT "(")
(ID "save_cwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "filename")
(NEWLINE)
(DEDENT)
(ENDMARKER)
