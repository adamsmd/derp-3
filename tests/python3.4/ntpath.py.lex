(LIT "Common pathname manipulations, WindowsNT/95 version.\n\nInstead of importing this module directly, import os and refer to this\nmodule as os.path.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(NEWLINE)
(KEYWORD import)
(ID "genericpath")
(NEWLINE)
(KEYWORD from)
(ID "genericpath")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "normcase")
(PUNCT ",")
(LIT "isabs")
(PUNCT ",")
(LIT "join")
(PUNCT ",")
(LIT "splitdrive")
(PUNCT ",")
(LIT "split")
(PUNCT ",")
(LIT "splitext")
(PUNCT ",")
(LIT "basename")
(PUNCT ",")
(LIT "dirname")
(PUNCT ",")
(LIT "commonprefix")
(PUNCT ",")
(LIT "getsize")
(PUNCT ",")
(LIT "getmtime")
(PUNCT ",")
(LIT "getatime")
(PUNCT ",")
(LIT "getctime")
(PUNCT ",")
(LIT "islink")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(LIT "lexists")
(PUNCT ",")
(LIT "isdir")
(PUNCT ",")
(LIT "isfile")
(PUNCT ",")
(LIT "ismount")
(PUNCT ",")
(LIT "expanduser")
(PUNCT ",")
(LIT "expandvars")
(PUNCT ",")
(LIT "normpath")
(PUNCT ",")
(LIT "abspath")
(PUNCT ",")
(LIT "splitunc")
(PUNCT ",")
(LIT "curdir")
(PUNCT ",")
(LIT "pardir")
(PUNCT ",")
(LIT "sep")
(PUNCT ",")
(LIT "pathsep")
(PUNCT ",")
(LIT "defpath")
(PUNCT ",")
(LIT "altsep")
(PUNCT ",")
(LIT "extsep")
(PUNCT ",")
(LIT "devnull")
(PUNCT ",")
(LIT "realpath")
(PUNCT ",")
(LIT "supports_unicode_filenames")
(PUNCT ",")
(LIT "relpath")
(PUNCT ",")
(LIT "samefile")
(PUNCT ",")
(LIT "sameopenfile")
(PUNCT ",")
(LIT "samestat")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "curdir")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "pardir")
(PUNCT "=")
(LIT "..")
(NEWLINE)
(ID "extsep")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(LIT "\\")
(NEWLINE)
(ID "pathsep")
(PUNCT "=")
(LIT ";")
(NEWLINE)
(ID "altsep")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "defpath")
(PUNCT "=")
(LIT ".;C:\\bin")
(NEWLINE)
(KEYWORD if)
(LIT "ce")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "builtin_module_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "defpath")
(PUNCT "=")
(LIT "\\Windows")
(NEWLINE)
(DEDENT)
(ID "devnull")
(PUNCT "=")
(LIT "nul")
(NEWLINE)
(KEYWORD def)
(ID "_get_empty")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"\\")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "\\")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_altsep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"/")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "/")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_bothseps")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"\\/")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "\\/")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_dot")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #".")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT ".")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_colon")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #":")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT ":")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_special")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT #"\\\\.\\")
(PUNCT ",")
(LIT #"\\\\?\\")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "\\\\.\\")
(PUNCT ",")
(LIT "\\\\?\\")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "normcase")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Normalize case of pathname.\n\n    Makes all characters lowercase and all slashes into backslashes.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "normcase() argument must be str or bytes, ")
(LIT "not '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "s")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "_get_altsep")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ",")
(ID "_get_sep")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isabs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path is absolute")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(ID "_get_bothseps")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(ID "paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "seps")
(PUNCT "=")
(ID "_get_bothseps")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "colon")
(PUNCT "=")
(ID "_get_colon")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "result_drive")
(PUNCT ",")
(ID "result_path")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p_drive")
(PUNCT ",")
(ID "p_path")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p_path")
(KEYWORD and)
(ID "p_path")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "seps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p_drive")
(KEYWORD or)
(KEYWORD not)
(ID "result_drive")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_drive")
(PUNCT "=")
(ID "p_drive")
(NEWLINE)
(DEDENT)
(ID "result_path")
(PUNCT "=")
(ID "p_path")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "p_drive")
(KEYWORD and)
(ID "p_drive")
(PUNCT "!=")
(ID "result_drive")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p_drive")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "result_drive")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_drive")
(PUNCT "=")
(ID "p_drive")
(NEWLINE)
(ID "result_path")
(PUNCT "=")
(ID "p_path")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "result_drive")
(PUNCT "=")
(ID "p_drive")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result_path")
(KEYWORD and)
(ID "result_path")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "seps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_path")
(PUNCT "=")
(ID "result_path")
(PUNCT "+")
(ID "sep")
(NEWLINE)
(DEDENT)
(ID "result_path")
(PUNCT "=")
(ID "result_path")
(PUNCT "+")
(ID "p_path")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "result_path")
(KEYWORD and)
(ID "result_path")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "seps")
(KEYWORD and)
(ID "result_drive")
(KEYWORD and)
(ID "result_drive")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(ID "colon")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result_drive")
(PUNCT "+")
(ID "sep")
(PUNCT "+")
(ID "result_path")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result_drive")
(PUNCT "+")
(ID "result_path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "splitdrive")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a pathname into drive/UNC sharepoint and relative path specifiers.\n    Returns a 2-tuple (drive_or_unc, path); either part may be empty.\n\n    If you assign\n        result = splitdrive(p)\n    It is always true that:\n        result[0] + result[1] == p\n\n    If the path contained a drive letter, drive_or_unc will contain everything\n    up to and including the colon.  e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")\n\n    If the path contained a UNC path, the drive_or_unc will contain the host name\n    and share up to but not including the fourth directory separator character.\n    e.g. splitdrive(\"//host/computer/dir\") returns (\"//host/computer\", \"/dir\")\n\n    Paths cannot contain both a drive letter and a UNC path.\n\n    ")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(ID "_get_empty")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(ID "normp")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "_get_altsep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "normp")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(ID "sep")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "normp")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "normp")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "empty")
(PUNCT ",")
(ID "p")
(NEWLINE)
(DEDENT)
(ID "index2")
(PUNCT "=")
(ID "normp")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "sep")
(PUNCT ",")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index2")
(PUNCT "==")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "empty")
(PUNCT ",")
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "index2")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index2")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "p")
(PUNCT "[")
(PUNCT ":")
(ID "index2")
(PUNCT "]")
(PUNCT ",")
(ID "p")
(PUNCT "[")
(ID "index2")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "normp")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(ID "_get_colon")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "p")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "p")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "empty")
(PUNCT ",")
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "splitunc")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deprecated since Python 3.1.  Please use splitdrive() instead;\n    it now handles UNC paths.\n\n    Split a pathname into UNC mount point and relative path specifiers.\n\n    Return a 2-tuple (unc, rest); either part may be empty.\n    If unc is not empty, it has the form '//host/mount' (or similar\n    using backslashes).  unc+rest is always the input path.\n    Paths containing drive letters never have an UNC part.\n    ")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "ntpath.splitunc is deprecated, use ntpath.splitdrive instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "drive")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "drive")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "p")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "drive")
(PUNCT ",")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "split")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.")
(NEWLINE)
(ID "seps")
(PUNCT "=")
(ID "_get_bothseps")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT ",")
(ID "p")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(KEYWORD and)
(ID "p")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "seps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "p")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "head2")
(PUNCT "=")
(ID "head")
(NEWLINE)
(KEYWORD while)
(ID "head2")
(KEYWORD and)
(ID "head2")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "seps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head2")
(PUNCT "=")
(ID "head2")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "head")
(PUNCT "=")
(ID "head2")
(KEYWORD or)
(ID "head")
(NEWLINE)
(KEYWORD return)
(ID "d")
(PUNCT "+")
(ID "head")
(PUNCT ",")
(ID "tail")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "splitext")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "_get_sep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "_get_altsep")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "_get_dot")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "splitext")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "genericpath")
(PUNCT ".")
(ID "_splitext")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(KEYWORD def)
(ID "basename")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the final component of a pathname")
(NEWLINE)
(KEYWORD return)
(ID "split")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dirname")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the directory component of a pathname")
(NEWLINE)
(KEYWORD return)
(ID "split")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "islink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "st")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "AttributeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "stat")
(PUNCT ".")
(ID "S_ISLNK")
(PUNCT "(")
(ID "st")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lexists")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path exists.  Returns True for broken symbolic links")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "st")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "nt")
(KEYWORD import)
(ID "_getvolumepathname")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_getvolumepathname")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ismount")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether a path is a mount point (a drive root, the root of a\n    share, or a mounted volume)")
(NEWLINE)
(ID "seps")
(PUNCT "=")
(ID "_get_bothseps")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "root")
(KEYWORD and)
(ID "root")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "seps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(KEYWORD not)
(ID "rest")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "rest")
(KEYWORD in)
(ID "seps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "rest")
(KEYWORD in)
(ID "seps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_getvolumepathname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "seps")
(PUNCT ")")
(PUNCT "==")
(ID "_getvolumepathname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "seps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "expanduser")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Expand ~ and ~user constructs.\n\n    If user or $HOME is unknown, do nothing.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tilde")
(PUNCT "=")
(LIT #"~")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tilde")
(PUNCT "=")
(LIT "~")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "tilde")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "n")
(KEYWORD and)
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "_get_bothseps")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "HOME")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userhome")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "HOME")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "USERPROFILE")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userhome")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "USERPROFILE")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(LIT "HOMEPATH")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drive")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "HOMEDRIVE")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drive")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "userhome")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "drive")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "HOMEPATH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userhome")
(PUNCT "=")
(ID "userhome")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "getfilesystemencoding")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT "!=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userhome")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "dirname")
(PUNCT "(")
(ID "userhome")
(PUNCT ")")
(PUNCT ",")
(ID "path")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "userhome")
(PUNCT "+")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "expandvars")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Expand shell variables of the forms $var, ${var} and %var%.\n\n    Unknown variables are left unchanged.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ord")
(PUNCT "(")
(LIT "$")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(KEYWORD and)
(ID "ord")
(PUNCT "(")
(LIT "%")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "string")
(NEWLINE)
(ID "varchars")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "string")
(PUNCT ".")
(ID "ascii_letters")
(PUNCT "+")
(ID "string")
(PUNCT ".")
(ID "digits")
(PUNCT "+")
(LIT "_-")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "quote")
(PUNCT "=")
(LIT #"'")
(NEWLINE)
(ID "percent")
(PUNCT "=")
(LIT #"%")
(NEWLINE)
(ID "brace")
(PUNCT "=")
(LIT #"{")
(NEWLINE)
(ID "dollar")
(PUNCT "=")
(LIT #"$")
(NEWLINE)
(ID "environ")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "environb")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "$")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(KEYWORD and)
(LIT "%")
(KEYWORD not)
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "string")
(NEWLINE)
(ID "varchars")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "ascii_letters")
(PUNCT "+")
(ID "string")
(PUNCT ".")
(ID "digits")
(PUNCT "+")
(LIT "_-")
(NEWLINE)
(ID "quote")
(PUNCT "=")
(LIT "'")
(NEWLINE)
(ID "percent")
(PUNCT "=")
(LIT "%")
(NEWLINE)
(ID "brace")
(PUNCT "=")
(LIT "{")
(NEWLINE)
(ID "dollar")
(PUNCT "=")
(LIT "$")
(NEWLINE)
(ID "environ")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "index")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "pathlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "index")
(PUNCT "<")
(ID "pathlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(ID "quote")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "pathlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "+=")
(ID "c")
(PUNCT "+")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(ID "path")
(NEWLINE)
(ID "index")
(PUNCT "=")
(ID "pathlen")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "c")
(PUNCT "==")
(ID "percent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(ID "percent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(ID "c")
(NEWLINE)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "pathlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "percent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(ID "percent")
(PUNCT "+")
(ID "path")
(NEWLINE)
(ID "index")
(PUNCT "=")
(ID "pathlen")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "var")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "index")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "environ")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "fsdecode")
(PUNCT "(")
(ID "var")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "environ")
(PUNCT "[")
(ID "var")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "percent")
(PUNCT "+")
(ID "var")
(PUNCT "+")
(ID "percent")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "+=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "c")
(PUNCT "==")
(ID "dollar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(ID "dollar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(ID "c")
(NEWLINE)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(ID "brace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "pathlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT #"}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(LIT #"${")
(PUNCT "+")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(LIT "${")
(PUNCT "+")
(ID "path")
(NEWLINE)
(DEDENT)
(ID "index")
(PUNCT "=")
(ID "pathlen")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "var")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "index")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "environ")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "fsdecode")
(PUNCT "(")
(ID "var")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "environ")
(PUNCT "[")
(ID "var")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT #"${")
(PUNCT "+")
(ID "var")
(PUNCT "+")
(LIT #"}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT "${")
(PUNCT "+")
(ID "var")
(PUNCT "+")
(LIT "}")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "res")
(PUNCT "+=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "var")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "c")
(KEYWORD and)
(ID "c")
(KEYWORD in)
(ID "varchars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "var")
(PUNCT "+=")
(ID "c")
(NEWLINE)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "index")
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "environ")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "fsdecode")
(PUNCT "(")
(ID "var")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "environ")
(PUNCT "[")
(ID "var")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "dollar")
(PUNCT "+")
(ID "var")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "+=")
(ID "value")
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(ID "c")
(NEWLINE)
(DEDENT)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Normalize path, eliminating double slashes, etc.")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "dotdot")
(PUNCT "=")
(ID "_get_dot")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "*")
(LIT 2)
(NEWLINE)
(ID "special_prefixes")
(PUNCT "=")
(ID "_get_special")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "special_prefixes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "_get_altsep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ",")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "+=")
(ID "sep")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "comps")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "comps")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD or)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "==")
(ID "_get_dot")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "==")
(ID "dotdot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(ID "dotdot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "i")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "prefix")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "comps")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "prefix")
(KEYWORD and)
(KEYWORD not)
(ID "comps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comps")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_get_dot")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "prefix")
(PUNCT "+")
(ID "sep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "comps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "nt")
(KEYWORD import)
(ID "_getfullpathname")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the absolute version of a path.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isabs")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwdb")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cwd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "cwd")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "abspath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the absolute version of a path.")
(NEWLINE)
(KEYWORD if)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "_getfullpathname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwdb")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "realpath")
(PUNCT "=")
(ID "abspath")
(NEWLINE)
(ID "supports_unicode_filenames")
(PUNCT "=")
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "getwindowsversion")
(PUNCT ")")
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "getwindowsversion")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ">=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "relpath")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(ID "curdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a relative version of a path")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "_get_sep")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "start")
(KEYWORD is)
(ID "curdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT "=")
(ID "_get_dot")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no path specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "start_abs")
(PUNCT "=")
(ID "abspath")
(PUNCT "(")
(ID "normpath")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "path_abs")
(PUNCT "=")
(ID "abspath")
(PUNCT "(")
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "start_drive")
(PUNCT ",")
(ID "start_rest")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "start_abs")
(PUNCT ")")
(NEWLINE)
(ID "path_drive")
(PUNCT ",")
(ID "path_rest")
(PUNCT "=")
(ID "splitdrive")
(PUNCT "(")
(ID "path_abs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "normcase")
(PUNCT "(")
(ID "start_drive")
(PUNCT ")")
(PUNCT "!=")
(ID "normcase")
(PUNCT "(")
(ID "path_drive")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "error")
(PUNCT "=")
(LIT "path is on mount '{0}', start on mount '{1}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "path_drive")
(PUNCT ",")
(ID "start_drive")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "error")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "start_list")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "start_rest")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT "]")
(NEWLINE)
(ID "path_list")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "path_rest")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "e1")
(PUNCT ",")
(ID "e2")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "start_list")
(PUNCT ",")
(ID "path_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "normcase")
(PUNCT "(")
(ID "e1")
(PUNCT ")")
(PUNCT "!=")
(ID "normcase")
(PUNCT "(")
(ID "e2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pardir")
(PUNCT "=")
(LIT #"..")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pardir")
(PUNCT "=")
(LIT "..")
(NEWLINE)
(DEDENT)
(ID "rel_list")
(PUNCT "=")
(PUNCT "[")
(ID "pardir")
(PUNCT "]")
(PUNCT "*")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "start_list")
(PUNCT ")")
(PUNCT "-")
(ID "i")
(PUNCT ")")
(PUNCT "+")
(ID "path_list")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "rel_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_get_dot")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "rel_list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "getwindowsversion")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ">=")
(PUNCT "(")
(LIT 6)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "nt")
(KEYWORD import)
(ID "_getfinalpathname")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "ImportError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_getfinalpathname")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "normcase")
(PUNCT "(")
(ID "abspath")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "nt")
(KEYWORD import)
(ID "_isdir")
(KEYWORD as)
(ID "isdir")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ENDMARKER)
