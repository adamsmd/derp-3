(LIT "A class supporting chat-style (command/response) protocols.\n\nThis class adds support for 'chat' style protocols - where one side\nsends a 'command', and the other sends a response (examples would be\nthe common internet protocols - smtp, nntp, ftp, etc..).\n\nThe handle_read() method looks at the input stream for the current\n'terminator' (usually '\\r\\n' for single-line responses, '\\r\\n.\\r\\n'\nfor multi-line output), calling self.found_terminator() on its\nreceipt.\n\nfor example:\nSay you build an async nntp client using this class.  At the start\nof the connection, you'll have self.terminator set to '\\r\\n', in\norder to process the single-line greeting.  Just before issuing a\n'LIST' command you'll set it to '\\r\\n.\\r\\n'.  The output of the LIST\ncommand will be accumulated (using your own 'collect_incoming_data'\nmethod) up to the terminator, and then control will be returned to\nyou - by calling your self.found_terminator() method.\n")
(NEWLINE)
(KEYWORD import)
(ID "asyncore")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "deque")
(NEWLINE)
(KEYWORD class)
(ID "async_chat")
(PUNCT "(")
(ID "asyncore")
(PUNCT ".")
(ID "dispatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This is an abstract class.  You must derive from this class, and add\n    the two methods collect_incoming_data() and found_terminator()")
(NEWLINE)
(ID "ac_in_buffer_size")
(PUNCT "=")
(LIT 65536)
(NEWLINE)
(ID "ac_out_buffer_size")
(PUNCT "=")
(LIT 65536)
(NEWLINE)
(ID "use_encoding")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(LIT "latin-1")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "map")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "incoming")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT "=")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "asyncore")
(PUNCT ".")
(ID "dispatcher")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "map")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "must be implemented in subclass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "incoming")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_data")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "incoming")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "incoming")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "found_terminator")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "must be implemented in subclass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_terminator")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "term")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the input delimiter.\n\n        Can be a fixed string of any length, an integer, or None.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "term")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "use_encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "term")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "term")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "term")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(KEYWORD and)
(ID "term")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "the number of received bytes must be positive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "terminator")
(PUNCT "=")
(ID "term")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_terminator")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "terminator")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_read")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "BlockingIOError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "why")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handle_error")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "use_encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "+")
(ID "data")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lb")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ")")
(NEWLINE)
(ID "terminator")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_terminator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "terminator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "terminator")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "terminator")
(NEWLINE)
(KEYWORD if)
(ID "lb")
(PUNCT "<")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "terminator")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "terminator")
(PUNCT "-")
(ID "lb")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "[")
(PUNCT ":")
(ID "n")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "terminator")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "found_terminator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "terminator_len")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "terminator")
(PUNCT ")")
(NEWLINE)
(ID "index")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "terminator")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "index")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "[")
(PUNCT ":")
(ID "index")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "[")
(ID "index")
(PUNCT "+")
(ID "terminator_len")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "found_terminator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "find_prefix_at_end")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ",")
(ID "terminator")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "index")
(PUNCT "!=")
(ID "lb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(ID "index")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "[")
(PUNCT "-")
(ID "index")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "collect_incoming_data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "handle_write")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initiate_send")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "push")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ",")
(ID "memoryview")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "data argument must be byte-ish (%r)")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sabs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_out_buffer_size")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ">")
(ID "sabs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "sabs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(ID "sabs")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "initiate_send")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "push_with_producer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "producer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "producer")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "initiate_send")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "predicate for inclusion in the readable for select()")
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "predicate for inclusion in the writable for select()")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "connected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close_when_done")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "automatically close this channel once the outgoing queue is empty")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "initiate_send")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "connected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "first")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handle_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "obs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ac_out_buffer_size")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "first")
(PUNCT "[")
(PUNCT ":")
(ID "obs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "first")
(PUNCT ".")
(ID "more")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT ".")
(ID "appendleft")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "use_encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num_sent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handle_error")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "num_sent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "num_sent")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(KEYWORD or)
(ID "obs")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "first")
(PUNCT "[")
(ID "num_sent")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "discard_buffers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ac_in_buffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "incoming")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "producer_fifo")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "simple_producer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "buffer_size")
(PUNCT "=")
(LIT 512)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer_size")
(PUNCT "=")
(ID "buffer_size")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "more")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "buffer_size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "buffer_size")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "buffer_size")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "fifo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "list")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT "=")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT "=")
(ID "deque")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_empty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "list")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "first")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "push")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "list")
(PUNCT ".")
(ID "popleft")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_prefix_at_end")
(PUNCT "(")
(ID "haystack")
(PUNCT ",")
(ID "needle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "needle")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "l")
(KEYWORD and)
(KEYWORD not)
(ID "haystack")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "needle")
(PUNCT "[")
(PUNCT ":")
(ID "l")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "l")
(NEWLINE)
(DEDENT)
(ENDMARKER)
