(LIT "\nTurtle graphics is a popular way for introducing programming to\nkids. It was part of the original Logo programming language developed\nby Wally Feurzig and Seymour Papert in 1966.\n\nImagine a robotic turtle starting at (0, 0) in the x-y plane. After an ``import turtle``, give it\nthe command turtle.forward(15), and it moves (on-screen!) 15 pixels in\nthe direction it is facing, drawing a line as it moves. Give it the\ncommand turtle.right(25), and it rotates in-place 25 degrees clockwise.\n\nBy combining together these and similar commands, intricate shapes and\npictures can easily be drawn.\n\n----- turtle.py\n\nThis module is an extended reimplementation of turtle.py from the\nPython standard distribution up to Python 2.5. (See: http://www.python.org)\n\nIt tries to keep the merits of turtle.py and to be (nearly) 100%\ncompatible with it. This means in the first place to enable the\nlearning programmer to use all the commands, classes and methods\ninteractively when using the module from within IDLE run with\nthe -n switch.\n\nRoughly it has the following features added:\n\n- Better animation of the turtle movements, especially of turning the\n  turtle. So the turtles can more easily be used as a visual feedback\n  instrument by the (beginning) programmer.\n\n- Different turtle shapes, gif-images as turtle shapes, user defined\n  and user controllable turtle shapes, among them compound\n  (multicolored) shapes. Turtle shapes can be stretched and tilted, which\n  makes turtles very versatile geometrical objects.\n\n- Fine control over turtle movement and screen updates via delay(),\n  and enhanced tracer() and speed() methods.\n\n- Aliases for the most commonly used commands, like fd for forward etc.,\n  following the early Logo traditions. This reduces the boring work of\n  typing long sequences of commands, which often occur in a natural way\n  when kids try to program fancy pictures on their first encounter with\n  turtle graphics.\n\n- Turtles now have an undo()-method with configurable undo-buffer.\n\n- Some simple commands/methods for creating event driven programs\n  (mouse-, key-, timer-events). Especially useful for programming games.\n\n- A scrollable Canvas class. The default scrollable Canvas can be\n  extended interactively as needed while playing around with the turtle(s).\n\n- A TurtleScreen class with methods controlling background color or\n  background image, window and canvas size and other properties of the\n  TurtleScreen.\n\n- There is a method, setworldcoordinates(), to install a user defined\n  coordinate-system for the TurtleScreen.\n\n- The implementation uses a 2-vector class named Vec2D, derived from tuple.\n  This class is public, so it can be imported by the application programmer,\n  which makes certain types of computations very natural and compact.\n\n- Appearance of the TurtleScreen and the Turtles at startup/import can be\n  configured by means of a turtle.cfg configuration file.\n  The default configuration mimics the appearance of the old turtle module.\n\n- If configured appropriately the module reads in docstrings from a docstring\n  dictionary in some different language, supplied separately  and replaces\n  the English ones by those read in. There is a utility function\n  write_docstringdict() to write a dictionary with the original (English)\n  docstrings to disc, so it can serve as a template for translations.\n\nBehind the scenes there are some features included with possible\nextensions in mind. These will be commented and documented elsewhere.\n\n")
(NEWLINE)
(ID "_ver")
(PUNCT "=")
(LIT "turtle 1.1b- - for Python 3.1   -  4. 5. 2009")
(NEWLINE)
(KEYWORD import)
(ID "tkinter")
(KEYWORD as)
(ID "TK")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(KEYWORD import)
(ID "math")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "inspect")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "os")
(PUNCT ".")
(ID "path")
(KEYWORD import)
(ID "isfile")
(PUNCT ",")
(ID "split")
(PUNCT ",")
(ID "join")
(NEWLINE)
(KEYWORD from)
(ID "copy")
(KEYWORD import)
(ID "deepcopy")
(NEWLINE)
(KEYWORD from)
(ID "tkinter")
(KEYWORD import)
(ID "simpledialog")
(NEWLINE)
(ID "_tg_classes")
(PUNCT "=")
(PUNCT "[")
(LIT "ScrolledCanvas")
(PUNCT ",")
(LIT "TurtleScreen")
(PUNCT ",")
(LIT "Screen")
(PUNCT ",")
(LIT "RawTurtle")
(PUNCT ",")
(LIT "Turtle")
(PUNCT ",")
(LIT "RawPen")
(PUNCT ",")
(LIT "Pen")
(PUNCT ",")
(LIT "Shape")
(PUNCT ",")
(LIT "Vec2D")
(PUNCT "]")
(NEWLINE)
(ID "_tg_screen_functions")
(PUNCT "=")
(PUNCT "[")
(LIT "addshape")
(PUNCT ",")
(LIT "bgcolor")
(PUNCT ",")
(LIT "bgpic")
(PUNCT ",")
(LIT "bye")
(PUNCT ",")
(LIT "clearscreen")
(PUNCT ",")
(LIT "colormode")
(PUNCT ",")
(LIT "delay")
(PUNCT ",")
(LIT "exitonclick")
(PUNCT ",")
(LIT "getcanvas")
(PUNCT ",")
(LIT "getshapes")
(PUNCT ",")
(LIT "listen")
(PUNCT ",")
(LIT "mainloop")
(PUNCT ",")
(LIT "mode")
(PUNCT ",")
(LIT "numinput")
(PUNCT ",")
(LIT "onkey")
(PUNCT ",")
(LIT "onkeypress")
(PUNCT ",")
(LIT "onkeyrelease")
(PUNCT ",")
(LIT "onscreenclick")
(PUNCT ",")
(LIT "ontimer")
(PUNCT ",")
(LIT "register_shape")
(PUNCT ",")
(LIT "resetscreen")
(PUNCT ",")
(LIT "screensize")
(PUNCT ",")
(LIT "setup")
(PUNCT ",")
(LIT "setworldcoordinates")
(PUNCT ",")
(LIT "textinput")
(PUNCT ",")
(LIT "title")
(PUNCT ",")
(LIT "tracer")
(PUNCT ",")
(LIT "turtles")
(PUNCT ",")
(LIT "update")
(PUNCT ",")
(LIT "window_height")
(PUNCT ",")
(LIT "window_width")
(PUNCT "]")
(NEWLINE)
(ID "_tg_turtle_functions")
(PUNCT "=")
(PUNCT "[")
(LIT "back")
(PUNCT ",")
(LIT "backward")
(PUNCT ",")
(LIT "begin_fill")
(PUNCT ",")
(LIT "begin_poly")
(PUNCT ",")
(LIT "bk")
(PUNCT ",")
(LIT "circle")
(PUNCT ",")
(LIT "clear")
(PUNCT ",")
(LIT "clearstamp")
(PUNCT ",")
(LIT "clearstamps")
(PUNCT ",")
(LIT "clone")
(PUNCT ",")
(LIT "color")
(PUNCT ",")
(LIT "degrees")
(PUNCT ",")
(LIT "distance")
(PUNCT ",")
(LIT "dot")
(PUNCT ",")
(LIT "down")
(PUNCT ",")
(LIT "end_fill")
(PUNCT ",")
(LIT "end_poly")
(PUNCT ",")
(LIT "fd")
(PUNCT ",")
(LIT "fillcolor")
(PUNCT ",")
(LIT "filling")
(PUNCT ",")
(LIT "forward")
(PUNCT ",")
(LIT "get_poly")
(PUNCT ",")
(LIT "getpen")
(PUNCT ",")
(LIT "getscreen")
(PUNCT ",")
(LIT "get_shapepoly")
(PUNCT ",")
(LIT "getturtle")
(PUNCT ",")
(LIT "goto")
(PUNCT ",")
(LIT "heading")
(PUNCT ",")
(LIT "hideturtle")
(PUNCT ",")
(LIT "home")
(PUNCT ",")
(LIT "ht")
(PUNCT ",")
(LIT "isdown")
(PUNCT ",")
(LIT "isvisible")
(PUNCT ",")
(LIT "left")
(PUNCT ",")
(LIT "lt")
(PUNCT ",")
(LIT "onclick")
(PUNCT ",")
(LIT "ondrag")
(PUNCT ",")
(LIT "onrelease")
(PUNCT ",")
(LIT "pd")
(PUNCT ",")
(LIT "pen")
(PUNCT ",")
(LIT "pencolor")
(PUNCT ",")
(LIT "pendown")
(PUNCT ",")
(LIT "pensize")
(PUNCT ",")
(LIT "penup")
(PUNCT ",")
(LIT "pos")
(PUNCT ",")
(LIT "position")
(PUNCT ",")
(LIT "pu")
(PUNCT ",")
(LIT "radians")
(PUNCT ",")
(LIT "right")
(PUNCT ",")
(LIT "reset")
(PUNCT ",")
(LIT "resizemode")
(PUNCT ",")
(LIT "rt")
(PUNCT ",")
(LIT "seth")
(PUNCT ",")
(LIT "setheading")
(PUNCT ",")
(LIT "setpos")
(PUNCT ",")
(LIT "setposition")
(PUNCT ",")
(LIT "settiltangle")
(PUNCT ",")
(LIT "setundobuffer")
(PUNCT ",")
(LIT "setx")
(PUNCT ",")
(LIT "sety")
(PUNCT ",")
(LIT "shape")
(PUNCT ",")
(LIT "shapesize")
(PUNCT ",")
(LIT "shapetransform")
(PUNCT ",")
(LIT "shearfactor")
(PUNCT ",")
(LIT "showturtle")
(PUNCT ",")
(LIT "speed")
(PUNCT ",")
(LIT "st")
(PUNCT ",")
(LIT "stamp")
(PUNCT ",")
(LIT "tilt")
(PUNCT ",")
(LIT "tiltangle")
(PUNCT ",")
(LIT "towards")
(PUNCT ",")
(LIT "turtlesize")
(PUNCT ",")
(LIT "undo")
(PUNCT ",")
(LIT "undobufferentries")
(PUNCT ",")
(LIT "up")
(PUNCT ",")
(LIT "width")
(PUNCT ",")
(LIT "write")
(PUNCT ",")
(LIT "xcor")
(PUNCT ",")
(LIT "ycor")
(PUNCT "]")
(NEWLINE)
(ID "_tg_utilities")
(PUNCT "=")
(PUNCT "[")
(LIT "write_docstringdict")
(PUNCT ",")
(LIT "done")
(PUNCT "]")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "(")
(ID "_tg_classes")
(PUNCT "+")
(ID "_tg_screen_functions")
(PUNCT "+")
(ID "_tg_turtle_functions")
(PUNCT "+")
(ID "_tg_utilities")
(PUNCT "+")
(PUNCT "[")
(LIT "Terminator")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_alias_list")
(PUNCT "=")
(PUNCT "[")
(LIT "addshape")
(PUNCT ",")
(LIT "backward")
(PUNCT ",")
(LIT "bk")
(PUNCT ",")
(LIT "fd")
(PUNCT ",")
(LIT "ht")
(PUNCT ",")
(LIT "lt")
(PUNCT ",")
(LIT "pd")
(PUNCT ",")
(LIT "pos")
(PUNCT ",")
(LIT "pu")
(PUNCT ",")
(LIT "rt")
(PUNCT ",")
(LIT "seth")
(PUNCT ",")
(LIT "setpos")
(PUNCT ",")
(LIT "setposition")
(PUNCT ",")
(LIT "st")
(PUNCT ",")
(LIT "turtlesize")
(PUNCT ",")
(LIT "up")
(PUNCT ",")
(LIT "width")
(PUNCT "]")
(NEWLINE)
(ID "_CFG")
(PUNCT "=")
(PUNCT "{")
(LIT "width")
(PUNCT ":")
(LIT 0.5)
(PUNCT ",")
(LIT "height")
(PUNCT ":")
(LIT 0.75)
(PUNCT ",")
(LIT "canvwidth")
(PUNCT ":")
(LIT 400)
(PUNCT ",")
(LIT "canvheight")
(PUNCT ":")
(LIT 300)
(PUNCT ",")
(LIT "leftright")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "topbottom")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "mode")
(PUNCT ":")
(LIT "standard")
(PUNCT ",")
(LIT "colormode")
(PUNCT ":")
(LIT 1.0)
(PUNCT ",")
(LIT "delay")
(PUNCT ":")
(LIT 10)
(PUNCT ",")
(LIT "undobuffersize")
(PUNCT ":")
(LIT 1000)
(PUNCT ",")
(LIT "shape")
(PUNCT ":")
(LIT "classic")
(PUNCT ",")
(LIT "pencolor")
(PUNCT ":")
(LIT "black")
(PUNCT ",")
(LIT "fillcolor")
(PUNCT ":")
(LIT "black")
(PUNCT ",")
(LIT "resizemode")
(PUNCT ":")
(LIT "noresize")
(PUNCT ",")
(LIT "visible")
(PUNCT ":")
(KEYWORD True)
(PUNCT ",")
(LIT "language")
(PUNCT ":")
(LIT "english")
(PUNCT ",")
(LIT "exampleturtle")
(PUNCT ":")
(LIT "turtle")
(PUNCT ",")
(LIT "examplescreen")
(PUNCT ":")
(LIT "screen")
(PUNCT ",")
(LIT "title")
(PUNCT ":")
(LIT "Python Turtle Graphics")
(PUNCT ",")
(LIT "using_IDLE")
(PUNCT ":")
(KEYWORD False)
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "config_dict")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert content of config-file into dictionary.")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfglines")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cfgdict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "cfglines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(KEYWORD or)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "#")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "=")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Bad line in config-file %s:\n%s")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "key")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD in)
(PUNCT "[")
(LIT "True")
(PUNCT ",")
(LIT "False")
(PUNCT ",")
(LIT "None")
(PUNCT ",")
(LIT "''")
(PUNCT ",")
(LIT "\"\"")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT ".")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "cfgdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cfgdict")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readconfig")
(PUNCT "(")
(ID "cfgdict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read config-files, change configuration-dict accordingly.\n\n    If there is a turtle.cfg file in the current working directory,\n    read it from there. If this contains an importconfig-value,\n    say 'myway', construct filename turtle_mayway.cfg else use\n    turtle.cfg and read it from the import-directory, where\n    turtle.py is located.\n    Update configuration dictionary first according to config-file,\n    in the import directory, then according to config-file in the\n    current working directory.\n    If no config-file is found, the default configuration is used.\n    ")
(NEWLINE)
(ID "default_cfg")
(PUNCT "=")
(LIT "turtle.cfg")
(NEWLINE)
(ID "cfgdict1")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "cfgdict2")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "isfile")
(PUNCT "(")
(ID "default_cfg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgdict1")
(PUNCT "=")
(ID "config_dict")
(PUNCT "(")
(ID "default_cfg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "importconfig")
(KEYWORD in)
(ID "cfgdict1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_cfg")
(PUNCT "=")
(LIT "turtle_%s.cfg")
(PUNCT "%")
(ID "cfgdict1")
(PUNCT "[")
(LIT "importconfig")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "split")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(ID "cfg_file2")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "default_cfg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfg_file2")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isfile")
(PUNCT "(")
(ID "cfg_file2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgdict2")
(PUNCT "=")
(ID "config_dict")
(PUNCT "(")
(ID "cfg_file2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_CFG")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "cfgdict2")
(PUNCT ")")
(NEWLINE)
(ID "_CFG")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "cfgdict1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readconfig")
(PUNCT "(")
(ID "_CFG")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "No configfile read, reason unknown")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Vec2D")
(PUNCT "(")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A 2 dimensional vector class, used as a helper class\n    for implementing turtle graphics.\n    May be useful for turtle graphics programs also.\n    Derived from tuple, so a vector is a tuple!\n\n    Provides (for a, b vectors, k number):\n       a+b vector addition\n       a-b vector subtraction\n       a*b inner product\n       k*a and a*k multiplication with scalar\n       |a| absolute value of a\n       a.rotate(angle) rotation\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__add__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Vec2D")
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "other")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "other")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__mul__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Vec2D")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "other")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "other")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Vec2D")
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "other")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__rmul__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Vec2D")
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "other")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__sub__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Vec2D")
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(ID "other")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "-")
(ID "other")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__neg__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Vec2D")
(PUNCT "(")
(PUNCT "-")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__abs__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "**")
(LIT 2)
(PUNCT "+")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "**")
(LIT 2)
(PUNCT ")")
(PUNCT "**")
(LIT 0.5)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rotate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "rotate self counterclockwise by angle\n        ")
(NEWLINE)
(ID "perp")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(PUNCT "-")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "angle")
(PUNCT "=")
(ID "angle")
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT "/")
(LIT 180.0)
(NEWLINE)
(ID "c")
(PUNCT ",")
(ID "s")
(PUNCT "=")
(ID "math")
(PUNCT ".")
(ID "cos")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(PUNCT ",")
(ID "math")
(PUNCT ".")
(ID "sin")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "Vec2D")
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "c")
(PUNCT "+")
(ID "perp")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "s")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "c")
(PUNCT "+")
(ID "perp")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getnewargs__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "(%.2f,%.2f)")
(PUNCT "%")
(ID "self")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__methodDict")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "_dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "helper function for Scrolled Canvas")
(NEWLINE)
(ID "baseList")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "cls")
(PUNCT ".")
(ID "__bases__")
(PUNCT ")")
(NEWLINE)
(ID "baseList")
(PUNCT ".")
(ID "reverse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "_super")
(KEYWORD in)
(ID "baseList")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__methodDict")
(PUNCT "(")
(ID "_super")
(PUNCT ",")
(ID "_dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "cls")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "==")
(ID "types")
(PUNCT ".")
(ID "FunctionType")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__methods")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "helper function for Scrolled Canvas")
(NEWLINE)
(ID "_dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "__methodDict")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "_dict")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_dict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__stringBody")
(PUNCT "=")
(PUNCT "(")
(LIT "def %(method)s(self, *args, **kw): return ")
(PUNCT "+")
(LIT "self.%(attribute)s.%(method)s(*args, **kw)")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__forwardmethods")
(PUNCT "(")
(ID "fromClass")
(PUNCT ",")
(ID "toClass")
(PUNCT ",")
(ID "toPart")
(PUNCT ",")
(ID "exclude")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_dict_1")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "__methodDict")
(PUNCT "(")
(ID "toClass")
(PUNCT ",")
(ID "_dict_1")
(PUNCT ")")
(NEWLINE)
(ID "_dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "mfc")
(PUNCT "=")
(ID "__methods")
(PUNCT "(")
(ID "fromClass")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "ex")
(KEYWORD in)
(ID "_dict_1")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ex")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(KEYWORD or)
(ID "ex")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(KEYWORD or)
(ID "ex")
(KEYWORD in)
(ID "exclude")
(KEYWORD or)
(ID "ex")
(KEYWORD in)
(ID "mfc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_dict")
(PUNCT "[")
(ID "ex")
(PUNCT "]")
(PUNCT "=")
(ID "_dict_1")
(PUNCT "[")
(ID "ex")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "method")
(PUNCT ",")
(ID "func")
(KEYWORD in)
(ID "_dict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(PUNCT "{")
(LIT "method")
(PUNCT ":")
(ID "method")
(PUNCT ",")
(LIT "func")
(PUNCT ":")
(ID "func")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "toPart")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "execString")
(PUNCT "=")
(ID "__stringBody")
(PUNCT "%")
(PUNCT "{")
(LIT "method")
(PUNCT ":")
(ID "method")
(PUNCT ",")
(LIT "attribute")
(PUNCT ":")
(ID "toPart")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "exec")
(PUNCT "(")
(ID "execString")
(PUNCT ",")
(ID "d")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "fromClass")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "d")
(PUNCT "[")
(ID "method")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ScrolledCanvas")
(PUNCT "(")
(ID "TK")
(PUNCT ".")
(ID "Frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Modeled after the scrolled canvas class from Grayons's Tkinter book.\n\n    Used as the default canvas, which pops up automatically when\n    using turtle graphics functions or the Turtle class.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(LIT 500)
(PUNCT ",")
(ID "height")
(PUNCT "=")
(LIT 350)
(PUNCT ",")
(ID "canvwidth")
(PUNCT "=")
(LIT 600)
(PUNCT ",")
(ID "canvheight")
(PUNCT "=")
(LIT 500)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TK")
(PUNCT ".")
(ID "Frame")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT "=")
(ID "height")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rootwindow")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "winfo_toplevel")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "width")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "height")
(PUNCT "=")
(ID "width")
(PUNCT ",")
(ID "height")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "=")
(ID "canvwidth")
(PUNCT ",")
(ID "canvheight")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bg")
(PUNCT "=")
(LIT "white")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "Canvas")
(PUNCT "(")
(ID "master")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT "=")
(ID "height")
(PUNCT ",")
(ID "bg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "bg")
(PUNCT ",")
(ID "relief")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "SUNKEN")
(PUNCT ",")
(ID "borderwidth")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "hscroll")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "Scrollbar")
(PUNCT "(")
(ID "master")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "xview")
(PUNCT ",")
(ID "orient")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "HORIZONTAL")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "vscroll")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "Scrollbar")
(PUNCT "(")
(ID "master")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "yview")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(ID "xscrollcommand")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "hscroll")
(PUNCT ".")
(ID "set")
(PUNCT ",")
(ID "yscrollcommand")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "vscroll")
(PUNCT ".")
(ID "set")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rowconfigure")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "weight")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "minsize")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "columnconfigure")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "weight")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "minsize")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "grid")
(PUNCT "(")
(ID "padx")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "in_")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "pady")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "row")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "column")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "rowspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "columnspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sticky")
(PUNCT "=")
(LIT "news")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "vscroll")
(PUNCT ".")
(ID "grid")
(PUNCT "(")
(ID "padx")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "in_")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "pady")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "row")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "column")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "rowspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "columnspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sticky")
(PUNCT "=")
(LIT "news")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "hscroll")
(PUNCT ".")
(ID "grid")
(PUNCT "(")
(ID "padx")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "in_")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "pady")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "row")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "column")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "rowspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "columnspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sticky")
(PUNCT "=")
(LIT "news")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rootwindow")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Configure>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "onResize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "canvwidth")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "canvheight")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust canvas and scrollbars according to given canvas size.")
(NEWLINE)
(KEYWORD if)
(ID "canvwidth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "=")
(ID "canvwidth")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "canvheight")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "=")
(ID "canvheight")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "bg")
(PUNCT "=")
(ID "bg")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "config")
(PUNCT "(")
(ID "bg")
(PUNCT "=")
(ID "bg")
(PUNCT ",")
(ID "scrollregion")
(PUNCT "=")
(PUNCT "(")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "//")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "xview_moveto")
(PUNCT "(")
(LIT 0.5)
(PUNCT "*")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "width")
(PUNCT "+")
(LIT 30)
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "yview_moveto")
(PUNCT "(")
(LIT 0.5)
(PUNCT "*")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "height")
(PUNCT "+")
(LIT 30)
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "adjustScrolls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "adjustScrolls")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Adjust scrollbars according to window- and canvas-size.\n        ")
(NEWLINE)
(ID "cwidth")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "winfo_width")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cheight")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "winfo_height")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "xview_moveto")
(PUNCT "(")
(LIT 0.5)
(PUNCT "*")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "-")
(ID "cwidth")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "yview_moveto")
(PUNCT "(")
(LIT 0.5)
(PUNCT "*")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "-")
(ID "cheight")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cwidth")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(KEYWORD or)
(ID "cheight")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "hscroll")
(PUNCT ".")
(ID "grid")
(PUNCT "(")
(ID "padx")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "in_")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "pady")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "row")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "column")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "rowspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "columnspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sticky")
(PUNCT "=")
(LIT "news")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "vscroll")
(PUNCT ".")
(ID "grid")
(PUNCT "(")
(ID "padx")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "in_")
(PUNCT "=")
(ID "self")
(PUNCT ",")
(ID "pady")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "row")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "column")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "rowspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "columnspan")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sticky")
(PUNCT "=")
(LIT "news")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "hscroll")
(PUNCT ".")
(ID "grid_forget")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "vscroll")
(PUNCT ".")
(ID "grid_forget")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "onResize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "self-explanatory")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "adjustScrolls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " 'forward' method, which canvas itself has inherited...\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "bbox")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " 'forward' method, which canvas itself has inherited...\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "cget")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "config")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " 'forward' method, which canvas itself has inherited...\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "config")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " 'forward' method, which canvas itself has inherited...\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " 'forward' method, which canvas itself has inherited...\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "focus_force")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " 'forward' method, which canvas itself has inherited...\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "focus_force")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__forwardmethods")
(PUNCT "(")
(ID "ScrolledCanvas")
(PUNCT ",")
(ID "TK")
(PUNCT ".")
(ID "Canvas")
(PUNCT ",")
(LIT "_canvas")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_Root")
(PUNCT "(")
(ID "TK")
(PUNCT ".")
(ID "Tk")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Root class for Screen based on Tkinter.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TK")
(PUNCT ".")
(ID "Tk")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setupcanvas")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "cwidth")
(PUNCT ",")
(ID "cheight")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT "=")
(ID "ScrolledCanvas")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "cwidth")
(PUNCT ",")
(ID "cheight")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "expand")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "both")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getcanvas")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_canvas")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_geometry")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "startx")
(PUNCT ",")
(ID "starty")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "geometry")
(PUNCT "(")
(LIT "%dx%d%+d%+d")
(PUNCT "%")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "startx")
(PUNCT ",")
(ID "starty")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ondestroy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "destroy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "wm_protocol")
(PUNCT "(")
(LIT "WM_DELETE_WINDOW")
(PUNCT ",")
(ID "destroy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "win_width")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "winfo_screenwidth")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "win_height")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "winfo_screenheight")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "Canvas")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "Canvas")
(NEWLINE)
(KEYWORD class)
(ID "TurtleScreenBase")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Provide the basic graphics functionality.\n       Interface between Tkinter and turtle.py.\n\n       To port turtle.py to some different graphics toolkit\n       a corresponding TurtleScreenBase class has to be implemented.\n    ")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_blankimage")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "return a blank image object\n        ")
(NEWLINE)
(ID "img")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "PhotoImage")
(PUNCT "(")
(ID "width")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "height")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "img")
(PUNCT ".")
(ID "blank")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "img")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_image")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "return an image object containing the\n        imagedata from a gif-file named filename.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "TK")
(PUNCT ".")
(ID "PhotoImage")
(PUNCT "(")
(ID "file")
(PUNCT "=")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cv")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT "=")
(ID "cv")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "cv")
(PUNCT ",")
(ID "ScrolledCanvas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvwidth")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvheight")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "cget")
(PUNCT "(")
(LIT "width")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "cget")
(PUNCT "(")
(LIT "height")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "config")
(PUNCT "(")
(ID "scrollregion")
(PUNCT "=")
(PUNCT "(")
(PUNCT "-")
(ID "w")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(PUNCT "-")
(ID "h")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(ID "w")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(ID "h")
(PUNCT "//")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "=")
(ID "w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "=")
(ID "h")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT "=")
(LIT 1.0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_createpoly")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an invisible polygon item on canvas self.cv)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "create_polygon")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_drawpoly")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "polyitem")
(PUNCT ",")
(ID "coordlist")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure polygonitem polyitem according to provided\n        arguments:\n        coordlist is sequence of coordinates\n        fill is filling color\n        outline is outline color\n        top is a boolean value, which specifies if polyitem\n        will be put on top of the canvas' displaylist so it\n        will not be covered by other items.\n        ")
(NEWLINE)
(ID "cl")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "x")
(PUNCT ",")
(ID "y")
(KEYWORD in)
(ID "coordlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cl")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ")")
(NEWLINE)
(ID "cl")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "-")
(ID "y")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(ID "polyitem")
(PUNCT ",")
(PUNCT "*")
(ID "cl")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fill")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfigure")
(PUNCT "(")
(ID "polyitem")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "fill")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "outline")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfigure")
(PUNCT "(")
(ID "polyitem")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(ID "outline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "width")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfigure")
(PUNCT "(")
(ID "polyitem")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "width")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "top")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_raise")
(PUNCT "(")
(ID "polyitem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_createline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an invisible line item on canvas self.cv)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "create_line")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(LIT 2)
(PUNCT ",")
(ID "capstyle")
(PUNCT "=")
(ID "TK")
(PUNCT ".")
(ID "ROUND")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lineitem")
(PUNCT ",")
(ID "coordlist")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure lineitem according to provided arguments:\n        coordlist is sequence of coordinates\n        fill is drawing color\n        width is width of drawn line.\n        top is a boolean value, which specifies if polyitem\n        will be put on top of the canvas' displaylist so it\n        will not be covered by other items.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "coordlist")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cl")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "x")
(PUNCT ",")
(ID "y")
(KEYWORD in)
(ID "coordlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cl")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ")")
(NEWLINE)
(ID "cl")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "-")
(ID "y")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(ID "lineitem")
(PUNCT ",")
(PUNCT "*")
(ID "cl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fill")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfigure")
(PUNCT "(")
(ID "lineitem")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "fill")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "width")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfigure")
(PUNCT "(")
(ID "lineitem")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "width")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "top")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_raise")
(PUNCT "(")
(ID "lineitem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete graphics item from canvas.\n        If item is\"all\" delete all graphics items.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_update")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Redraw graphics items on canvas\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_delay")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delay")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delay subsequent canvas actions for delay ms.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "after")
(PUNCT "(")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_iscolorstring")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "color")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if the string color is a legal Tkinter color string.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rgb")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "winfo_rgb")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(NEWLINE)
(ID "ok")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TK")
(PUNCT ".")
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ok")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_bgcolor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "color")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set canvas' backgroundcolor if color is not None,\n        else return backgroundcolor.")
(NEWLINE)
(KEYWORD if)
(ID "color")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "config")
(PUNCT "(")
(ID "bg")
(PUNCT "=")
(ID "color")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "cget")
(PUNCT "(")
(LIT "bg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "txt")
(PUNCT ",")
(ID "align")
(PUNCT ",")
(ID "font")
(PUNCT ",")
(ID "pencolor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write txt at pos in canvas with specified font\n        and color.\n        Return text item and x-coord of right bottom corner\n        of text's bounding box.")
(NEWLINE)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(ID "x")
(PUNCT "=")
(ID "x")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "xscale")
(NEWLINE)
(ID "y")
(PUNCT "=")
(ID "y")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "yscale")
(NEWLINE)
(ID "anchor")
(PUNCT "=")
(PUNCT "{")
(LIT "left")
(PUNCT ":")
(LIT "sw")
(PUNCT ",")
(LIT "center")
(PUNCT ":")
(LIT "s")
(PUNCT ",")
(LIT "right")
(PUNCT ":")
(LIT "se")
(PUNCT "}")
(NEWLINE)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "create_text")
(PUNCT "(")
(ID "x")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(ID "y")
(PUNCT ",")
(ID "text")
(PUNCT "=")
(ID "txt")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(ID "anchor")
(PUNCT "[")
(ID "align")
(PUNCT "]")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "pencolor")
(PUNCT ",")
(ID "font")
(PUNCT "=")
(ID "font")
(PUNCT ")")
(NEWLINE)
(ID "x0")
(PUNCT ",")
(ID "y0")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "bbox")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "item")
(PUNCT ",")
(ID "x1")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_onclick")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "num")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-click event on turtle.\n        fun must be a function with two arguments, the coordinates\n        of the clicked point on the canvas.\n        num, the number of the mouse-button defaults to 1\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_unbind")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(LIT "<Button-%s>")
(PUNCT "%")
(ID "num")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "eventfun")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasx")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "x")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasy")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "y")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(NEWLINE)
(ID "fun")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_bind")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(LIT "<Button-%s>")
(PUNCT "%")
(ID "num")
(PUNCT ",")
(ID "eventfun")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_onrelease")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "num")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-button-release event on turtle.\n        fun must be a function with two arguments, the coordinates\n        of the point on the canvas where mouse button is released.\n        num, the number of the mouse-button defaults to 1\n\n        If a turtle is clicked, first _onclick-event will be performed,\n        then _onscreensclick-event.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_unbind")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(LIT "<Button%s-ButtonRelease>")
(PUNCT "%")
(ID "num")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "eventfun")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasx")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "x")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasy")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "y")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(NEWLINE)
(ID "fun")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_bind")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(LIT "<Button%s-ButtonRelease>")
(PUNCT "%")
(ID "num")
(PUNCT ",")
(ID "eventfun")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ondrag")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "num")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-move-event (with pressed mouse button) on turtle.\n        fun must be a function with two arguments, the coordinates of the\n        actual mouse position on the canvas.\n        num, the number of the mouse-button defaults to 1\n\n        Every sequence of mouse-move-events on a turtle is preceded by a\n        mouse-click event on that turtle.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_unbind")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(LIT "<Button%s-Motion>")
(PUNCT "%")
(ID "num")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "eventfun")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasx")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "x")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasy")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "y")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(NEWLINE)
(ID "fun")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_bind")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(LIT "<Button%s-Motion>")
(PUNCT "%")
(ID "num")
(PUNCT ",")
(ID "eventfun")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_onscreenclick")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "num")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-click event on canvas.\n        fun must be a function with two arguments, the coordinates\n        of the clicked point on the canvas.\n        num, the number of the mouse-button defaults to 1\n\n        If a turtle is clicked, first _onclick-event will be performed,\n        then _onscreensclick-event.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(LIT "<Button-%s>")
(PUNCT "%")
(ID "num")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "eventfun")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasx")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "x")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvasy")
(PUNCT "(")
(ID "event")
(PUNCT ".")
(ID "y")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(NEWLINE)
(ID "fun")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Button-%s>")
(PUNCT "%")
(ID "num")
(PUNCT ",")
(ID "eventfun")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_onkeyrelease")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to key-release event of key.\n        Canvas must have focus. See method listen\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(LIT "<KeyRelease-%s>")
(PUNCT "%")
(ID "key")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "eventfun")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fun")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<KeyRelease-%s>")
(PUNCT "%")
(ID "key")
(PUNCT ",")
(ID "eventfun")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_onkeypress")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If key is given, bind fun to key-press event of key.\n        Otherwise bind fun to any key-press.\n        Canvas must have focus. See method listen.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(LIT "<KeyPress>")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(LIT "<KeyPress-%s>")
(PUNCT "%")
(ID "key")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "eventfun")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fun")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "key")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<KeyPress>")
(PUNCT ",")
(ID "eventfun")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<KeyPress-%s>")
(PUNCT "%")
(ID "key")
(PUNCT ",")
(ID "eventfun")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_listen")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set focus on canvas (in order to collect key-events)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "focus_force")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_ontimer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Install a timer, which calls fun after t milliseconds.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "t")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "after_idle")
(PUNCT "(")
(ID "fun")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "after")
(PUNCT "(")
(ID "t")
(PUNCT ",")
(ID "fun")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_createimage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "image")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return image item on canvas.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "create_image")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "image")
(PUNCT "=")
(ID "image")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_drawimage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "image")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure image item as to draw image object\n        at position (x,y) on canvas)\n        ")
(NEWLINE)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT "(")
(ID "x")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(PUNCT "-")
(ID "y")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfig")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "image")
(PUNCT "=")
(ID "image")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setbgpic")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "image")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure image item as to draw image object\n        at center of canvas. Set item to the first item\n        in the displaylist, so it will be drawn below\n        any other item .")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "itemconfig")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "image")
(PUNCT "=")
(ID "image")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "tag_lower")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return 'line' or 'polygon' or 'image' depending on\n        type of item.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "type")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_pointlist")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "returns list of coordinate-pairs of points of item\n        Example (for insiders):\n        >>> from turtle import *\n        >>> getscreen()._pointlist(getturtle().turtle._item)\n        [(0.0, 9.9999999999999982), (0.0, -9.9999999999999982),\n        (9.9999999999999982, 0.0)]\n        >>> ")
(NEWLINE)
(ID "cl")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "pl")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "cl")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(PUNCT "-")
(ID "cl")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "cl")
(PUNCT ")")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "pl")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setscrollregion")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "srx1")
(PUNCT ",")
(ID "sry1")
(PUNCT ",")
(ID "srx2")
(PUNCT ",")
(ID "sry2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "config")
(PUNCT "(")
(ID "scrollregion")
(PUNCT "=")
(PUNCT "(")
(ID "srx1")
(PUNCT ",")
(ID "sry1")
(PUNCT ",")
(ID "srx2")
(PUNCT ",")
(ID "sry2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_rescale")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "xscalefactor")
(PUNCT ",")
(ID "yscalefactor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "find_all")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "coordinates")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "newcoordlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "coordinates")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "coordinates")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "newcoordlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT "*")
(ID "xscalefactor")
(PUNCT ")")
(NEWLINE)
(ID "newcoordlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "y")
(PUNCT "*")
(ID "yscalefactor")
(PUNCT ")")
(NEWLINE)
(ID "coordinates")
(PUNCT "=")
(ID "coordinates")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT "*")
(ID "newcoordlist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_resize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "canvwidth")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "canvheight")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Resize the canvas the turtles are drawing on. Does\n        not alter the drawing window.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ",")
(ID "ScrolledCanvas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "canvwidth")
(KEYWORD is)
(ID "canvheight")
(KEYWORD is)
(ID "bg")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "canvheight")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "canvwidth")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "=")
(ID "canvwidth")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "canvheight")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "=")
(ID "canvheight")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(ID "canvwidth")
(PUNCT ",")
(ID "canvheight")
(PUNCT ",")
(ID "bg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_window_size")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the width and height of the turtle window.\n        ")
(NEWLINE)
(ID "width")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "winfo_width")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "width")
(PUNCT "<=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "width")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT "[")
(LIT "width")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "height")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT ".")
(ID "winfo_height")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "height")
(PUNCT "<=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "height")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cv")
(PUNCT "[")
(LIT "height")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "width")
(PUNCT ",")
(ID "height")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mainloop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Starts event loop - calling Tkinter's mainloop function.\n\n        No argument.\n\n        Must be last statement in a turtle graphics program.\n        Must NOT be used if a script is run from within IDLE in -n mode\n        (No subprocess) - for interactive use of turtle graphics.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.mainloop()\n\n        ")
(NEWLINE)
(ID "TK")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "textinput")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "title")
(PUNCT ",")
(ID "prompt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pop up a dialog window for input of a string.\n\n        Arguments: title is the title of the dialog window,\n        prompt is a text mostly describing what information to input.\n\n        Return the string input\n        If the dialog is canceled, return None.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.textinput(\"NIM\", \"Name of first player:\")\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "simpledialog")
(PUNCT ".")
(ID "askstring")
(PUNCT "(")
(ID "title")
(PUNCT ",")
(ID "prompt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "numinput")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "title")
(PUNCT ",")
(ID "prompt")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "minval")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "maxval")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pop up a dialog window for input of a number.\n\n        Arguments: title is the title of the dialog window,\n        prompt is a text mostly describing what numerical information to input.\n        default: default value\n        minval: minimum value for imput\n        maxval: maximum value for input\n\n        The number input must be in the range minval .. maxval if these are\n        given. If not, a hint is issued and the dialog remains open for\n        correction. Return the number input.\n        If the dialog is canceled,  return None.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "simpledialog")
(PUNCT ".")
(ID "askfloat")
(PUNCT "(")
(ID "title")
(PUNCT ",")
(ID "prompt")
(PUNCT ",")
(ID "initialvalue")
(PUNCT "=")
(ID "default")
(PUNCT ",")
(ID "minvalue")
(PUNCT "=")
(ID "minval")
(PUNCT ",")
(ID "maxvalue")
(PUNCT "=")
(ID "maxval")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Terminator")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Will be raised in TurtleScreen.update, if _RUNNING becomes False.\n\n    This stops execution of a turtle graphics script.\n    Main purpose: use in the Demo-Viewer turtle.Demo.py.\n    ")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TurtleGraphicsError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Some TurtleGraphics Error\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Shape")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Data structure modeling shapes.\n\n    attribute _type is one of \"polygon\", \"image\", \"compound\"\n    attribute _data is - depending on _type a poygon-tuple,\n    an image or a list constructed using the addcomponent method.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type_")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(ID "type_")
(NEWLINE)
(KEYWORD if)
(ID "type_")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "type_")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".gif")
(PUNCT ")")
(KEYWORD and)
(ID "isfile")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "TurtleScreen")
(PUNCT ".")
(ID "_image")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "type_")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "There is no shape type %s")
(PUNCT "%")
(ID "type_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addcomponent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "poly")
(PUNCT ",")
(ID "fill")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add component to a shape of type compound.\n\n        Arguments: poly is a polygon, i. e. a tuple of number pairs.\n        fill is the fillcolor of the component,\n        outline is the outline color of the component.\n\n        call (for a Shapeobject namend s):\n        --   s.addcomponent(((0,0), (10,10), (-10,10)), \"red\", \"blue\")\n\n        Example:\n        >>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n        >>> s = Shape(\"compound\")\n        >>> s.addcomponent(poly, \"red\", \"blue\")\n        >>> # .. add more components and then use register_shape()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "!=")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "Cannot add component to %s Shape")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "outline")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outline")
(PUNCT "=")
(ID "fill")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(ID "poly")
(PUNCT ",")
(ID "fill")
(PUNCT ",")
(ID "outline")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Tbuffer")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ring buffer used as undobuffer for RawTurtle objects.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(LIT 10)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT "=")
(ID "bufsize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "]")
(PUNCT "*")
(ID "bufsize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "bufsize")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT "=")
(ID "bufsize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "]")
(PUNCT "*")
(ID "bufsize")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "push")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "cumulate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "item")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "nr_of_items")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ")")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ptr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TurtleScreen")
(PUNCT "(")
(ID "TurtleScreenBase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Provides screen oriented methods like setbg etc.\n\n    Only relies upon the methods of TurtleScreenBase and NOT\n    upon components of the underlying graphics toolkit -\n    which is Tkinter in this case.\n    ")
(NEWLINE)
(ID "_RUNNING")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "mode")
(PUNCT "]")
(PUNCT ",")
(ID "colormode")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "colormode")
(PUNCT "]")
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "delay")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_shapes")
(PUNCT "=")
(PUNCT "{")
(LIT "arrow")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(PUNCT "-")
(LIT 10)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "turtle")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 2)
(PUNCT ",")
(LIT 14)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 4)
(PUNCT ",")
(LIT 7)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 7)
(PUNCT ",")
(LIT 9)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 9)
(PUNCT ",")
(LIT 8)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 6)
(PUNCT ",")
(LIT 5)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 7)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 5)
(PUNCT ",")
(PUNCT "-")
(LIT 3)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 8)
(PUNCT ",")
(PUNCT "-")
(LIT 6)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 6)
(PUNCT ",")
(PUNCT "-")
(LIT 8)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 4)
(PUNCT ",")
(PUNCT "-")
(LIT 5)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 7)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 4)
(PUNCT ",")
(PUNCT "-")
(LIT 5)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 6)
(PUNCT ",")
(PUNCT "-")
(LIT 8)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 8)
(PUNCT ",")
(PUNCT "-")
(LIT 6)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 5)
(PUNCT ",")
(PUNCT "-")
(LIT 3)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 7)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 6)
(PUNCT ",")
(LIT 5)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 9)
(PUNCT ",")
(LIT 8)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 7)
(PUNCT ",")
(LIT 9)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 4)
(PUNCT ",")
(LIT 7)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT 14)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "circle")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 9.51)
(PUNCT ",")
(LIT 3.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 8.09)
(PUNCT ",")
(LIT 5.88)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 5.88)
(PUNCT ",")
(LIT 8.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 3.09)
(PUNCT ",")
(LIT 9.51)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 3.09)
(PUNCT ",")
(LIT 9.51)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 5.88)
(PUNCT ",")
(LIT 8.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 8.09)
(PUNCT ",")
(LIT 5.88)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 9.51)
(PUNCT ",")
(LIT 3.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 10)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 9.51)
(PUNCT ",")
(PUNCT "-")
(LIT 3.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 8.09)
(PUNCT ",")
(PUNCT "-")
(LIT 5.88)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 5.88)
(PUNCT ",")
(PUNCT "-")
(LIT 8.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 3.09)
(PUNCT ",")
(PUNCT "-")
(LIT 9.51)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 0.0)
(PUNCT ",")
(PUNCT "-")
(LIT 10.0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 3.09)
(PUNCT ",")
(PUNCT "-")
(LIT 9.51)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 5.88)
(PUNCT ",")
(PUNCT "-")
(LIT 8.09)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 8.09)
(PUNCT ",")
(PUNCT "-")
(LIT 5.88)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 9.51)
(PUNCT ",")
(PUNCT "-")
(LIT 3.09)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "square")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(PUNCT "-")
(LIT 10)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 10)
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 10)
(PUNCT ",")
(PUNCT "-")
(LIT 10)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "triangle")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(PUNCT "-")
(LIT 5.77)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 11.55)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 10)
(PUNCT ",")
(PUNCT "-")
(LIT 5.77)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "classic")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(PUNCT "-")
(LIT 5)
(PUNCT ",")
(PUNCT "-")
(LIT 9)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 7)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 5)
(PUNCT ",")
(PUNCT "-")
(LIT 9)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "blank")
(PUNCT ":")
(ID "Shape")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_blankimage")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_bgpics")
(PUNCT "=")
(PUNCT "{")
(LIT "nopic")
(PUNCT ":")
(LIT "")
(PUNCT "}")
(NEWLINE)
(ID "TurtleScreenBase")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cv")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_delayvalue")
(PUNCT "=")
(ID "delay")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_colormode")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "colormode")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rootwindow")
(PUNCT "=")
(ID "cv")
(PUNCT ".")
(ID "winfo_toplevel")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "rootwindow")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "attributes")
(PUNCT ",")
(LIT ".")
(PUNCT ",")
(LIT "-topmost")
(PUNCT ",")
(LIT "1")
(PUNCT ")")
(NEWLINE)
(ID "rootwindow")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "attributes")
(PUNCT ",")
(LIT ".")
(PUNCT ",")
(LIT "-topmost")
(PUNCT ",")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete all drawings and all turtles from the TurtleScreen.\n\n        No argument.\n\n        Reset empty TurtleScreen to its initial state: white background,\n        no backgroundimage, no eventbindings and tracing on.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.clear()\n\n        Note: this method is not available as function.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_delayvalue")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "delay")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_colormode")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "colormode")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(LIT "all")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_bgpic")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_createimage")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_bgpicname")
(PUNCT "=")
(LIT "nopic")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_turtles")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bgcolor")
(PUNCT "(")
(LIT "white")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "btn")
(KEYWORD in)
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ",")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "onclick")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "btn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "onkeypress")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "onkey")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "onkeypress")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "Turtle")
(PUNCT ".")
(ID "_pen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set turtle-mode ('standard', 'logo' or 'world') and perform reset.\n\n        Optional argument:\n        mode -- on of the strings 'standard', 'logo' or 'world'\n\n        Mode 'standard' is compatible with turtle.py.\n        Mode 'logo' is compatible with most Logo-Turtle-Graphics.\n        Mode 'world' uses userdefined 'worldcoordinates'. *Attention*: in\n        this mode angles appear distorted if x/y unit-ratio doesn't equal 1.\n        If mode is not given, return the current mode.\n\n             Mode      Initial turtle heading     positive angles\n         ------------|-------------------------|-------------------\n          'standard'    to the right (east)       counterclockwise\n            'logo'        upward    (north)         clockwise\n\n        Examples:\n        >>> mode('logo')   # resets turtle heading to north\n        >>> mode()\n        'logo'\n        ")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_mode")
(NEWLINE)
(DEDENT)
(ID "mode")
(PUNCT "=")
(ID "mode")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "[")
(LIT "standard")
(PUNCT ",")
(LIT "logo")
(PUNCT ",")
(LIT "world")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "No turtle-graphics-mode %s")
(PUNCT "%")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD in)
(PUNCT "[")
(LIT "standard")
(PUNCT ",")
(LIT "logo")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_setscrollregion")
(PUNCT "(")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "//")
(LIT 2)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "//")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT "=")
(LIT 1.0)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setworldcoordinates")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "llx")
(PUNCT ",")
(ID "lly")
(PUNCT ",")
(ID "urx")
(PUNCT ",")
(ID "ury")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set up a user defined coordinate-system.\n\n        Arguments:\n        llx -- a number, x-coordinate of lower left corner of canvas\n        lly -- a number, y-coordinate of lower left corner of canvas\n        urx -- a number, x-coordinate of upper right corner of canvas\n        ury -- a number, y-coordinate of upper right corner of canvas\n\n        Set up user coodinat-system and switch to mode 'world' if necessary.\n        This performs a screen.reset. If mode 'world' is already active,\n        all drawings are redrawn according to the new coordinates.\n\n        But ATTENTION: in user-defined coordinatesystems angles may appear\n        distorted. (see Screen.mode())\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.setworldcoordinates(-10,-0.5,50,1.5)\n        >>> for _ in range(36):\n        ...     left(10)\n        ...     forward(0.5)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "world")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "(")
(LIT "world")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "xspan")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "urx")
(PUNCT "-")
(ID "llx")
(PUNCT ")")
(NEWLINE)
(ID "yspan")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "ury")
(PUNCT "-")
(ID "lly")
(PUNCT ")")
(NEWLINE)
(ID "wx")
(PUNCT ",")
(ID "wy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_window_size")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screensize")
(PUNCT "(")
(ID "wx")
(PUNCT "-")
(LIT 20)
(PUNCT ",")
(ID "wy")
(PUNCT "-")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "oldxscale")
(PUNCT ",")
(ID "oldyscale")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "yscale")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "/")
(ID "xspan")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "/")
(ID "yspan")
(NEWLINE)
(ID "srx1")
(PUNCT "=")
(ID "llx")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "xscale")
(NEWLINE)
(ID "sry1")
(PUNCT "=")
(PUNCT "-")
(ID "ury")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "yscale")
(NEWLINE)
(ID "srx2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "canvwidth")
(PUNCT "+")
(ID "srx1")
(NEWLINE)
(ID "sry2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "canvheight")
(PUNCT "+")
(ID "sry1")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_setscrollregion")
(PUNCT "(")
(ID "srx1")
(PUNCT ",")
(ID "sry1")
(PUNCT ",")
(ID "srx2")
(PUNCT ",")
(ID "sry2")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rescale")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "xscale")
(PUNCT "/")
(ID "oldxscale")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "yscale")
(PUNCT "/")
(ID "oldyscale")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register_shape")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "shape")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adds a turtle shape to TurtleScreen's shapelist.\n\n        Arguments:\n        (1) name is the name of a gif-file and shape is None.\n            Installs the corresponding image shape.\n            !! Image-shapes DO NOT rotate when turning the turtle,\n            !! so they do not display the heading of the turtle!\n        (2) name is an arbitrary string and shape is a tuple\n            of pairs of coordinates. Installs the corresponding\n            polygon shape\n        (3) name is an arbitrary string and shape is a\n            (compound) Shape object. Installs the corresponding\n            compound shape.\n        To use a shape, you have to issue the command shape(shapename).\n\n        call: register_shape(\"turtle.gif\")\n        --or: register_shape(\"tri\", ((0,0), (10,10), (-10,10)))\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.register_shape(\"triangle\", ((5,-3),(0,5),(-5,-3)))\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "shape")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".gif")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shape")
(PUNCT "=")
(ID "Shape")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_image")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "Bad arguments for register_shape.\n")
(PUNCT "+")
(LIT "Use  help(register_shape)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "shape")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shape")
(PUNCT "=")
(ID "Shape")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(ID "shape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "shape")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_colorstr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "color")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return color string corresponding to args.\n\n        Argument may be a string or a tuple of three\n        numbers corresponding to actual colormode,\n        i.e. in the range 0<=n<=colormode.\n\n        If the argument doesn't represent a color,\n        an error is raised.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "color")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "color")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_iscolorstring")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(KEYWORD or)
(ID "color")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "color")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad color string: %s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT "=")
(ID "color")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad color arguments: %s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_colormode")
(PUNCT "==")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT "=")
(PUNCT "[")
(ID "round")
(PUNCT "(")
(LIT 255.0)
(PUNCT "*")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(PUNCT "(")
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "r")
(PUNCT "<=")
(LIT 255)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "g")
(PUNCT "<=")
(LIT 255)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "b")
(PUNCT "<=")
(LIT 255)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad color sequence: %s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "#%02x%02x%02x")
(PUNCT "%")
(PUNCT "(")
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cstr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "cstr")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "#")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cstr")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "cstr")
(PUNCT ")")
(PUNCT "==")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cl")
(PUNCT "=")
(PUNCT "[")
(ID "int")
(PUNCT "(")
(ID "cstr")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 5)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "cstr")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cl")
(PUNCT "=")
(PUNCT "[")
(LIT 16)
(PUNCT "*")
(ID "int")
(PUNCT "(")
(ID "cstr")
(PUNCT "[")
(ID "h")
(PUNCT "]")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(KEYWORD for)
(ID "h")
(KEYWORD in)
(ID "cstr")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad colorstring: %s")
(PUNCT "%")
(ID "cstr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(PUNCT "[")
(ID "c")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_colormode")
(PUNCT "/")
(LIT 255)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "cl")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "colormode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the colormode or set it to 1.0 or 255.\n\n        Optional argument:\n        cmode -- one of the values 1.0 or 255\n\n        r, g, b values of colortriples have to be in range 0..cmode.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.colormode()\n        1.0\n        >>> screen.colormode(255)\n        >>> pencolor(240,160,80)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "cmode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_colormode")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cmode")
(PUNCT "==")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_colormode")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "cmode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cmode")
(PUNCT "==")
(LIT 255)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_colormode")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "cmode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Reset all Turtles on the Screen to their initial state.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.reset()\n        ")
(NEWLINE)
(KEYWORD for)
(ID "turtle")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_turtles")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "turtle")
(PUNCT ".")
(ID "_setmode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "turtles")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the list of turtles on the screen.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.turtles()\n        [<turtle.Turtle object at 0x00E11FB0>]\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_turtles")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bgcolor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or return backgroundcolor of the TurtleScreen.\n\n        Arguments (if given): a color string or three numbers\n        in the range 0..colormode or a 3-tuple of such numbers.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.bgcolor(\"orange\")\n        >>> screen.bgcolor()\n        'orange'\n        >>> screen.bgcolor(0.5,0,0.5)\n        >>> screen.bgcolor()\n        '#800080'\n        ")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_bgcolor")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "color")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_color")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "color")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tracer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turns turtle animation on/off and set delay for update drawings.\n\n        Optional arguments:\n        n -- nonnegative  integer\n        delay -- nonnegative  integer\n\n        If n is given, only each n-th regular screen update is really performed.\n        (Can be used to accelerate the drawing of complex graphics.)\n        Second arguments sets delay value (see RawTurtle.delay())\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.tracer(8, 25)\n        >>> dist = 2\n        >>> for i in range(200):\n        ...     fd(dist)\n        ...     rt(90)\n        ...     dist += 2\n        ")
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "delay")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_delayvalue")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "delay")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return or set the drawing delay in milliseconds.\n\n        Optional argument:\n        delay -- positive integer\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.delay(15)\n        >>> screen.delay()\n        15\n        ")
(NEWLINE)
(KEYWORD if)
(ID "delay")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_delayvalue")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_delayvalue")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_incrementudc")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Increment update counter.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "TurtleScreen")
(PUNCT ".")
(ID "_RUNNING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TurtleScreen")
(PUNCT ".")
(ID "_RUNNNING")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD raise)
(ID "Terminator")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "%=")
(ID "self")
(PUNCT ".")
(ID "_tracing")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Perform a TurtleScreen update.\n        ")
(NEWLINE)
(ID "tracing")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tracing")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "turtles")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT ".")
(ID "_update_data")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "_drawturtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tracing")
(PUNCT "=")
(ID "tracing")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "window_width")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the width of the turtle window.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.window_width()\n        640\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_window_size")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "window_height")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the height of the turtle window.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.window_height()\n        480\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_window_size")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcanvas")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the Canvas of this TurtleScreen.\n\n        No argument.\n\n        Example (for a Screen instance named screen):\n        >>> cv = screen.getcanvas()\n        >>> cv\n        <turtle.ScrolledCanvas instance at 0x010742D8>\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cv")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getshapes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of names of all currently available turtle shapes.\n\n        No argument.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.getshapes()\n        ['arrow', 'blank', 'circle', ... , 'turtle']\n        ")
(NEWLINE)
(KEYWORD return)
(ID "sorted")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_shapes")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "onclick")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-click event on canvas.\n\n        Arguments:\n        fun -- a function with two arguments, the coordinates of the\n               clicked point on the canvas.\n        num -- the number of the mouse-button, defaults to 1\n\n        Example (for a TurtleScreen instance named screen)\n\n        >>> screen.onclick(goto)\n        >>> # Subsequently clicking into the TurtleScreen will\n        >>> # make the turtle move to the clicked point.\n        >>> screen.onclick(None)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_onscreenclick")
(PUNCT "(")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "onkey")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to key-release event of key.\n\n        Arguments:\n        fun -- a function with no arguments\n        key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n\n        In order to be able to register key-events, TurtleScreen\n        must have focus. (See method listen.)\n\n        Example (for a TurtleScreen instance named screen):\n\n        >>> def f():\n        ...     fd(50)\n        ...     lt(60)\n        ...\n        >>> screen.onkey(f, \"Up\")\n        >>> screen.listen()\n\n        Subsequently the turtle can be moved by repeatedly pressing\n        the up-arrow key, consequently drawing a hexagon\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_onkeyrelease")
(PUNCT "(")
(ID "fun")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "onkeypress")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to key-press event of key if key is given,\n        or to any key-press-event if no key is given.\n\n        Arguments:\n        fun -- a function with no arguments\n        key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n\n        In order to be able to register key-events, TurtleScreen\n        must have focus. (See method listen.)\n\n        Example (for a TurtleScreen instance named screen\n        and a Turtle instance named turtle):\n\n        >>> def f():\n        ...     fd(50)\n        ...     lt(60)\n        ...\n        >>> screen.onkeypress(f, \"Up\")\n        >>> screen.listen()\n\n        Subsequently the turtle can be moved by repeatedly pressing\n        the up-arrow key, or by keeping pressed the up-arrow key.\n        consequently drawing a hexagon.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "fun")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "key")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_keys")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_onkeypress")
(PUNCT "(")
(ID "fun")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "listen")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "xdummy")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ydummy")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set focus on TurtleScreen (in order to collect key-events)\n\n        No arguments.\n        Dummy arguments are provided in order\n        to be able to pass listen to the onclick method.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.listen()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_listen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ontimer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "t")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Install a timer, which calls fun after t milliseconds.\n\n        Arguments:\n        fun -- a function with no arguments.\n        t -- a number >= 0\n\n        Example (for a TurtleScreen instance named screen):\n\n        >>> running = True\n        >>> def f():\n        ...     if running:\n        ...             fd(50)\n        ...             lt(60)\n        ...             screen.ontimer(f, 250)\n        ...\n        >>> f()   # makes the turtle marching around\n        >>> running = False\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ontimer")
(PUNCT "(")
(ID "fun")
(PUNCT ",")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bgpic")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "picname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set background image or return name of current backgroundimage.\n\n        Optional argument:\n        picname -- a string, name of a gif-file or \"nopic\".\n\n        If picname is a filename, set the corresponding image as background.\n        If picname is \"nopic\", delete backgroundimage, if present.\n        If picname is None, return the filename of the current backgroundimage.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.bgpic()\n        'nopic'\n        >>> screen.bgpic(\"landscape.gif\")\n        >>> screen.bgpic()\n        'landscape.gif'\n        ")
(NEWLINE)
(KEYWORD if)
(ID "picname")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bgpicname")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "picname")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_bgpics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_bgpics")
(PUNCT "[")
(ID "picname")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_image")
(PUNCT "(")
(ID "picname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_setbgpic")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_bgpic")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_bgpics")
(PUNCT "[")
(ID "picname")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_bgpicname")
(PUNCT "=")
(ID "picname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "screensize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "canvwidth")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "canvheight")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Resize the canvas the turtles are drawing on.\n\n        Optional arguments:\n        canvwidth -- positive integer, new width of canvas in pixels\n        canvheight --  positive integer, new height of canvas in pixels\n        bg -- colorstring or color-tuple, new backgroundcolor\n        If no arguments are given, return current (canvaswidth, canvasheight)\n\n        Do not alter the drawing window. To observe hidden parts of\n        the canvas use the scrollbars. (Can make visible those parts\n        of a drawing, which were outside the canvas before!)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.screensize(2000,1500)\n        >>> # e.g. to search for an erroneously escaped turtle ;-)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_resize")
(PUNCT "(")
(ID "canvwidth")
(PUNCT ",")
(ID "canvheight")
(PUNCT ",")
(ID "bg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "onscreenclick")
(PUNCT "=")
(ID "onclick")
(NEWLINE)
(ID "resetscreen")
(PUNCT "=")
(ID "reset")
(NEWLINE)
(ID "clearscreen")
(PUNCT "=")
(ID "clear")
(NEWLINE)
(ID "addshape")
(PUNCT "=")
(ID "register_shape")
(NEWLINE)
(ID "onkeyrelease")
(PUNCT "=")
(ID "onkey")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TNavigator")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Navigation part of the RawTurtle.\n    Implements methods for turtle movement.\n    ")
(NEWLINE)
(ID "START_ORIENTATION")
(PUNCT "=")
(PUNCT "{")
(LIT "standard")
(PUNCT ":")
(ID "Vec2D")
(PUNCT "(")
(LIT 1.0)
(PUNCT ",")
(LIT 0.0)
(PUNCT ")")
(PUNCT ",")
(LIT "world")
(PUNCT ":")
(ID "Vec2D")
(PUNCT "(")
(LIT 1.0)
(PUNCT ",")
(LIT 0.0)
(PUNCT ")")
(PUNCT ",")
(LIT "logo")
(PUNCT ":")
(ID "Vec2D")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "DEFAULT_MODE")
(PUNCT "=")
(LIT "standard")
(NEWLINE)
(ID "DEFAULT_ANGLEOFFSET")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "DEFAULT_ANGLEORIENT")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(ID "DEFAULT_MODE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "DEFAULT_ANGLEOFFSET")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "DEFAULT_ANGLEORIENT")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "degrees")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_setmode")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(ID "TNavigator")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "reset turtle to its initial values\n\n        Will be overwritten by parent class\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(LIT 0.0)
(PUNCT ",")
(LIT 0.0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT "=")
(ID "TNavigator")
(PUNCT ".")
(ID "START_ORIENTATION")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setmode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set turtle-mode to 'standard', 'world' or 'logo'.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_mode")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "[")
(LIT "standard")
(PUNCT ",")
(LIT "logo")
(PUNCT ",")
(LIT "world")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD in)
(PUNCT "[")
(LIT "standard")
(PUNCT ",")
(LIT "world")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(PUNCT "/")
(LIT 4.0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_setDegreesPerAU")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullcircle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper function for degrees() and radians()")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(PUNCT "=")
(ID "fullcircle")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(PUNCT "=")
(LIT 360)
(PUNCT "/")
(ID "fullcircle")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "==")
(LIT "standard")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "=")
(ID "fullcircle")
(PUNCT "/")
(LIT 4.0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "degrees")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullcircle")
(PUNCT "=")
(LIT 360.0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Set angle measurement units to degrees.\n\n        Optional argument:\n        fullcircle -  a number\n\n        Set angle measurement units, i. e. set number\n        of 'degrees' for a full circle. Dafault value is\n        360 degrees.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.left(90)\n        >>> turtle.heading()\n        90\n\n        Change angle measurement unit to grad (also known as gon,\n        grade, or gradian and equals 1/100-th of the right angle.)\n        >>> turtle.degrees(400.0)\n        >>> turtle.heading()\n        100\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_setDegreesPerAU")
(PUNCT "(")
(ID "fullcircle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "radians")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Set the angle measurement units to radians.\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.heading()\n        90\n        >>> turtle.radians()\n        >>> turtle.heading()\n        1.5707963267948966\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_setDegreesPerAU")
(PUNCT "(")
(LIT 2)
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_go")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "distance")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "move turtle forward by specified distance")
(NEWLINE)
(ID "ende")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT "*")
(ID "distance")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_goto")
(PUNCT "(")
(ID "ende")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_rotate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn turtle counterclockwise by specified angle if angle > 0.")
(NEWLINE)
(ID "angle")
(PUNCT "*=")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT ".")
(ID "rotate")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_goto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "move turtle to position end.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "=")
(ID "end")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "forward")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "distance")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move the turtle forward by the specified distance.\n\n        Aliases: forward | fd\n\n        Argument:\n        distance -- a number (integer or float)\n\n        Move the turtle forward by the specified distance, in the direction\n        the turtle is headed.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 0.00)\n        >>> turtle.forward(25)\n        >>> turtle.position()\n        (25.00,0.00)\n        >>> turtle.forward(-75)\n        >>> turtle.position()\n        (-50.00,0.00)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_go")
(PUNCT "(")
(ID "distance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "back")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "distance")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move the turtle backward by distance.\n\n        Aliases: back | backward | bk\n\n        Argument:\n        distance -- a number\n\n        Move the turtle backward by distance ,opposite to the direction the\n        turtle is headed. Do not change the turtle's heading.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 0.00)\n        >>> turtle.backward(30)\n        >>> turtle.position()\n        (-30.00, 0.00)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_go")
(PUNCT "(")
(PUNCT "-")
(ID "distance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "right")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn turtle right by angle units.\n\n        Aliases: right | rt\n\n        Argument:\n        angle -- a number (integer or float)\n\n        Turn turtle right by angle units. (Units are by default degrees,\n        but can be set via the degrees() and radians() functions.)\n        Angle orientation depends on mode. (See this.)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.heading()\n        22.0\n        >>> turtle.right(45)\n        >>> turtle.heading()\n        337.0\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(PUNCT "-")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "left")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn turtle left by angle units.\n\n        Aliases: left | lt\n\n        Argument:\n        angle -- a number (integer or float)\n\n        Turn turtle left by angle units. (Units are by default degrees,\n        but can be set via the degrees() and radians() functions.)\n        Angle orientation depends on mode. (See this.)\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.heading()\n        22.0\n        >>> turtle.left(45)\n        >>> turtle.heading()\n        67.0\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pos")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the turtle's current location (x,y), as a Vec2D-vector.\n\n        Aliases: pos | position\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pos()\n        (0.00, 240.00)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_position")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xcor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the turtle's x coordinate.\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> reset()\n        >>> turtle.left(60)\n        >>> turtle.forward(100)\n        >>> print turtle.xcor()\n        50.0\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ycor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the turtle's y coordinate\n        ---\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> reset()\n        >>> turtle.left(60)\n        >>> turtle.forward(100)\n        >>> print turtle.ycor()\n        86.6025403784\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "goto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move turtle to an absolute position.\n\n        Aliases: setpos | setposition | goto:\n\n        Arguments:\n        x -- a number      or     a pair/vector of numbers\n        y -- a number             None\n\n        call: goto(x, y)         # two coordinates\n        --or: goto((x, y))       # a pair (tuple) of coordinates\n        --or: goto(vec)          # e.g. as returned by pos()\n\n        Move turtle to an absolute position. If the pen is down,\n        a line will be drawn. The turtle's orientation does not change.\n\n        Example (for a Turtle instance named turtle):\n        >>> tp = turtle.pos()\n        >>> tp\n        (0.00, 0.00)\n        >>> turtle.setpos(60,30)\n        >>> turtle.pos()\n        (60.00,30.00)\n        >>> turtle.setpos((20,80))\n        >>> turtle.pos()\n        (20.00,80.00)\n        >>> turtle.setpos(tp)\n        >>> turtle.pos()\n        (0.00,0.00)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "y")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_goto")
(PUNCT "(")
(ID "Vec2D")
(PUNCT "(")
(PUNCT "*")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_goto")
(PUNCT "(")
(ID "Vec2D")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "home")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move turtle to the origin - coordinates (0,0).\n\n        No arguments.\n\n        Move turtle to the origin - coordinates (0,0) and set its\n        heading to its start-orientation (which depends on mode).\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.home()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "goto")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setheading")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setx")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the turtle's first coordinate to x\n\n        Argument:\n        x -- a number (integer or float)\n\n        Set the turtle's first coordinate to x, leave second coordinate\n        unchanged.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 240.00)\n        >>> turtle.setx(10)\n        >>> turtle.position()\n        (10.00, 240.00)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_goto")
(PUNCT "(")
(ID "Vec2D")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sety")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the turtle's second coordinate to y\n\n        Argument:\n        y -- a number (integer or float)\n\n        Set the turtle's first coordinate to x, second coordinate remains\n        unchanged.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00, 40.00)\n        >>> turtle.sety(-10)\n        >>> turtle.position()\n        (0.00, -10.00)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_goto")
(PUNCT "(")
(ID "Vec2D")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "distance")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the distance from the turtle to (x,y) in turtle step units.\n\n        Arguments:\n        x -- a number   or  a pair/vector of numbers   or   a turtle instance\n        y -- a number       None                            None\n\n        call: distance(x, y)         # two coordinates\n        --or: distance((x, y))       # a pair (tuple) of coordinates\n        --or: distance(vec)          # e.g. as returned by pos()\n        --or: distance(mypen)        # where mypen is another turtle\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pos()\n        (0.00, 0.00)\n        >>> turtle.distance(30,40)\n        50.0\n        >>> pen = Turtle()\n        >>> pen.forward(77)\n        >>> turtle.distance(pen)\n        77.0\n        ")
(NEWLINE)
(KEYWORD if)
(ID "y")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "Vec2D")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(PUNCT "*")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "TNavigator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "x")
(PUNCT ".")
(ID "_position")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "abs")
(PUNCT "(")
(ID "pos")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "towards")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the angle of the line from the turtle's position to (x, y).\n\n        Arguments:\n        x -- a number   or  a pair/vector of numbers   or   a turtle instance\n        y -- a number       None                            None\n\n        call: distance(x, y)         # two coordinates\n        --or: distance((x, y))       # a pair (tuple) of coordinates\n        --or: distance(vec)          # e.g. as returned by pos()\n        --or: distance(mypen)        # where mypen is another turtle\n\n        Return the angle, between the line from turtle-position to position\n        specified by x, y and the turtle's start orientation. (Depends on\n        modes - \"standard\" or \"logo\")\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pos()\n        (10.00, 10.00)\n        >>> turtle.towards(0,0)\n        225.0\n        ")
(NEWLINE)
(KEYWORD if)
(ID "y")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "Vec2D")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(PUNCT "*")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "TNavigator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "x")
(PUNCT ".")
(ID "_position")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "pos")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "_position")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "round")
(PUNCT "(")
(ID "math")
(PUNCT ".")
(ID "atan2")
(PUNCT "(")
(ID "y")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT "*")
(LIT 180.0)
(PUNCT "/")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT "%")
(LIT 360.0)
(NEWLINE)
(ID "result")
(PUNCT "/=")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(PUNCT "*")
(ID "result")
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "heading")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return the turtle's current heading.\n\n        No arguments.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.left(67)\n        >>> turtle.heading()\n        67.0\n        ")
(NEWLINE)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_orient")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "round")
(PUNCT "(")
(ID "math")
(PUNCT ".")
(ID "atan2")
(PUNCT "(")
(ID "y")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT "*")
(LIT 180.0)
(PUNCT "/")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(PUNCT "%")
(LIT 360.0)
(NEWLINE)
(ID "result")
(PUNCT "/=")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_angleOffset")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(PUNCT "*")
(ID "result")
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setheading")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "to_angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the orientation of the turtle to to_angle.\n\n        Aliases:  setheading | seth\n\n        Argument:\n        to_angle -- a number (integer or float)\n\n        Set the orientation of the turtle to to_angle.\n        Here are some common directions in degrees:\n\n         standard - mode:          logo-mode:\n        -------------------|--------------------\n           0 - east                0 - north\n          90 - north              90 - east\n         180 - west              180 - south\n         270 - south             270 - west\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.setheading(90)\n        >>> turtle.heading()\n        90\n        ")
(NEWLINE)
(ID "angle")
(PUNCT "=")
(PUNCT "(")
(ID "to_angle")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "heading")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(NEWLINE)
(ID "full")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(NEWLINE)
(ID "angle")
(PUNCT "=")
(PUNCT "(")
(ID "angle")
(PUNCT "+")
(ID "full")
(PUNCT "/")
(LIT 2.0)
(PUNCT ")")
(PUNCT "%")
(ID "full")
(PUNCT "-")
(ID "full")
(PUNCT "/")
(LIT 2.0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "circle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "radius")
(PUNCT ",")
(ID "extent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "steps")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Draw a circle with given radius.\n\n        Arguments:\n        radius -- a number\n        extent (optional) -- a number\n        steps (optional) -- an integer\n\n        Draw a circle with given radius. The center is radius units left\n        of the turtle; extent - an angle - determines which part of the\n        circle is drawn. If extent is not given, draw the entire circle.\n        If extent is not a full circle, one endpoint of the arc is the\n        current pen position. Draw the arc in counterclockwise direction\n        if radius is positive, otherwise in clockwise direction. Finally\n        the direction of the turtle is changed by the amount of extent.\n\n        As the circle is approximated by an inscribed regular polygon,\n        steps determines the number of steps to use. If not given,\n        it will be calculated automatically. Maybe used to draw regular\n        polygons.\n\n        call: circle(radius)                  # full circle\n        --or: circle(radius, extent)          # arc\n        --or: circle(radius, extent, steps)\n        --or: circle(radius, steps=6)         # 6-sided polygon\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.circle(50)\n        >>> turtle.circle(120, 180)  # semicircle\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "[")
(LIT "seq")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "speed")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "extent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extent")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "steps")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "frac")
(PUNCT "=")
(ID "abs")
(PUNCT "(")
(ID "extent")
(PUNCT ")")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(NEWLINE)
(ID "steps")
(PUNCT "=")
(LIT 1)
(PUNCT "+")
(ID "int")
(PUNCT "(")
(ID "min")
(PUNCT "(")
(LIT 11)
(PUNCT "+")
(ID "abs")
(PUNCT "(")
(ID "radius")
(PUNCT ")")
(PUNCT "/")
(LIT 6.0)
(PUNCT ",")
(LIT 59.0)
(PUNCT ")")
(PUNCT "*")
(ID "frac")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "w")
(PUNCT "=")
(LIT 1.0)
(PUNCT "*")
(ID "extent")
(PUNCT "/")
(ID "steps")
(NEWLINE)
(ID "w2")
(PUNCT "=")
(LIT 0.5)
(PUNCT "*")
(ID "w")
(NEWLINE)
(ID "l")
(PUNCT "=")
(LIT 2.0)
(PUNCT "*")
(ID "radius")
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "sin")
(PUNCT "(")
(ID "w2")
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT "/")
(LIT 180.0)
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "radius")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT ",")
(ID "w")
(PUNCT ",")
(ID "w2")
(PUNCT "=")
(PUNCT "-")
(ID "l")
(PUNCT ",")
(PUNCT "-")
(ID "w")
(PUNCT ",")
(PUNCT "-")
(ID "w2")
(NEWLINE)
(DEDENT)
(ID "tr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tracer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dl")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_delay")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "speed")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tracer")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(ID "w2")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "steps")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(ID "speed")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_go")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(PUNCT "-")
(ID "w2")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "speed")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tracer")
(PUNCT "(")
(ID "tr")
(PUNCT ",")
(ID "dl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(ID "speed")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "speed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_tracer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "b")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_delay")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(ID "fd")
(PUNCT "=")
(ID "forward")
(NEWLINE)
(ID "bk")
(PUNCT "=")
(ID "back")
(NEWLINE)
(ID "backward")
(PUNCT "=")
(ID "back")
(NEWLINE)
(ID "rt")
(PUNCT "=")
(ID "right")
(NEWLINE)
(ID "lt")
(PUNCT "=")
(ID "left")
(NEWLINE)
(ID "position")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(ID "setpos")
(PUNCT "=")
(ID "goto")
(NEWLINE)
(ID "setposition")
(PUNCT "=")
(ID "goto")
(NEWLINE)
(ID "seth")
(PUNCT "=")
(ID "setheading")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TPen")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Drawing part of the RawTurtle.\n    Implements drawing properties.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "resizemode")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "resizemode")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "=")
(ID "resizemode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "TPen")
(PUNCT ".")
(ID "_reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_reset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pencolor")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "pencolor")
(PUNCT "]")
(PUNCT ",")
(ID "fillcolor")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "fillcolor")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shown")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT "=")
(ID "pencolor")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT "=")
(ID "fillcolor")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(PUNCT "=")
(PUNCT "(")
(LIT 1.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shearfactor")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shapetrafo")
(PUNCT "=")
(PUNCT "(")
(LIT 1.0)
(PUNCT ",")
(LIT 0.0)
(PUNCT ",")
(LIT 0.0)
(PUNCT ",")
(LIT 1.0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resizemode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rmode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".\n\n        (Optional) Argument:\n        rmode -- one of the strings \"auto\", \"user\", \"noresize\"\n\n        Different resizemodes have the following effects:\n          - \"auto\" adapts the appearance of the turtle\n                   corresponding to the value of pensize.\n          - \"user\" adapts the appearance of the turtle according to the\n                   values of stretchfactor and outlinewidth (outline),\n                   which are set by shapesize()\n          - \"noresize\" no adaption of the turtle's appearance takes place.\n        If no argument is given, return current resizemode.\n        resizemode(\"user\") is called by a call of shapesize with arguments.\n\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.resizemode(\"noresize\")\n        >>> turtle.resizemode()\n        'noresize'\n        ")
(NEWLINE)
(KEYWORD if)
(ID "rmode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(NEWLINE)
(DEDENT)
(ID "rmode")
(PUNCT "=")
(ID "rmode")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rmode")
(KEYWORD in)
(PUNCT "[")
(LIT "auto")
(PUNCT ",")
(LIT "user")
(PUNCT ",")
(LIT "noresize")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "resizemode")
(PUNCT "=")
(ID "rmode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pensize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or return the line thickness.\n\n        Aliases:  pensize | width\n\n        Argument:\n        width -- positive number\n\n        Set the line thickness to width or return it. If resizemode is set\n        to \"auto\" and turtleshape is a polygon, that polygon is drawn with\n        the same line thickness. If no argument is given, current pensize\n        is returned.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pensize()\n        1\n        >>> turtle.pensize(10)   # from here on lines of width 10 are drawn\n        ")
(NEWLINE)
(KEYWORD if)
(ID "width")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_pensize")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "pensize")
(PUNCT "=")
(ID "width")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "penup")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pull the pen up -- no drawing when moving.\n\n        Aliases: penup | pu | up\n\n        No argument\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.penup()\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "pendown")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pendown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pull the pen down -- drawing when moving.\n\n        Aliases: pendown | pd | down\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pendown()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "pendown")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isdown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if pen is down, False if it's up.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.penup()\n        >>> turtle.isdown()\n        False\n        >>> turtle.pendown()\n        >>> turtle.isdown()\n        True\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "speed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "speed")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return or set the turtle's speed.\n\n        Optional argument:\n        speed -- an integer in the range 0..10 or a speedstring (see below)\n\n        Set the turtle's speed to an integer value in the range 0 .. 10.\n        If no argument is given: return current speed.\n\n        If input is a number greater than 10 or smaller than 0.5,\n        speed is set to 0.\n        Speedstrings  are mapped to speedvalues in the following way:\n            'fastest' :  0\n            'fast'    :  10\n            'normal'  :  6\n            'slow'    :  3\n            'slowest' :  1\n        speeds from 1 to 10 enforce increasingly faster animation of\n        line drawing and turtle turning.\n\n        Attention:\n        speed = 0 : *no* animation takes place. forward/back makes turtle jump\n        and likewise left/right make the turtle turn instantly.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.speed(3)\n        ")
(NEWLINE)
(ID "speeds")
(PUNCT "=")
(PUNCT "{")
(LIT "fastest")
(PUNCT ":")
(LIT 0)
(PUNCT ",")
(LIT "fast")
(PUNCT ":")
(LIT 10)
(PUNCT ",")
(LIT "normal")
(PUNCT ":")
(LIT 6)
(PUNCT ",")
(LIT "slow")
(PUNCT ":")
(LIT 3)
(PUNCT ",")
(LIT "slowest")
(PUNCT ":")
(LIT 1)
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "speed")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_speed")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "speed")
(KEYWORD in)
(ID "speeds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "speed")
(PUNCT "=")
(ID "speeds")
(PUNCT "[")
(ID "speed")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT 0.5)
(PUNCT "<")
(ID "speed")
(PUNCT "<")
(LIT 10.5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "speed")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "round")
(PUNCT "(")
(ID "speed")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "speed")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "speed")
(PUNCT "=")
(ID "speed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "color")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return or set the pencolor and fillcolor.\n\n        Arguments:\n        Several input formats are allowed.\n        They use 0, 1, 2, or 3 arguments as follows:\n\n        color()\n            Return the current pencolor and the current fillcolor\n            as a pair of color specification strings as are returned\n            by pencolor and fillcolor.\n        color(colorstring), color((r,g,b)), color(r,g,b)\n            inputs as in pencolor, set both, fillcolor and pencolor,\n            to the given value.\n        color(colorstring1, colorstring2),\n        color((r1,g1,b1), (r2,g2,b2))\n            equivalent to pencolor(colorstring1) and fillcolor(colorstring2)\n            and analogously, if the other input format is used.\n\n        If turtleshape is a polygon, outline and interior of that polygon\n        is drawn with the newly set colors.\n        For mor info see: pencolor, fillcolor\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color('red', 'green')\n        >>> turtle.color()\n        ('red', 'green')\n        >>> colormode(255)\n        >>> color((40, 80, 120), (160, 200, 240))\n        >>> color()\n        ('#285078', '#a0c8f0')\n        ")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "l")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pcolor")
(PUNCT "=")
(ID "fcolor")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "l")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pcolor")
(PUNCT ",")
(ID "fcolor")
(PUNCT "=")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "l")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pcolor")
(PUNCT "=")
(ID "fcolor")
(PUNCT "=")
(ID "args")
(NEWLINE)
(DEDENT)
(ID "pcolor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "pcolor")
(PUNCT ")")
(NEWLINE)
(ID "fcolor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "fcolor")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "pencolor")
(PUNCT "=")
(ID "pcolor")
(PUNCT ",")
(ID "fillcolor")
(PUNCT "=")
(ID "fcolor")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pencolor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return or set the pencolor.\n\n        Arguments:\n        Four input formats are allowed:\n          - pencolor()\n            Return the current pencolor as color specification string,\n            possibly in hex-number format (see example).\n            May be used as input to another color/pencolor/fillcolor call.\n          - pencolor(colorstring)\n            s is a Tk color specification string, such as \"red\" or \"yellow\"\n          - pencolor((r, g, b))\n            *a tuple* of r, g, and b, which represent, an RGB color,\n            and each of r, g, and b are in the range 0..colormode,\n            where colormode is either 1.0 or 255\n          - pencolor(r, g, b)\n            r, g, and b represent an RGB color, and each of r, g, and b\n            are in the range 0..colormode\n\n        If turtleshape is a polygon, the outline of that polygon is drawn\n        with the newly set pencolor.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.pencolor('brown')\n        >>> tup = (0.2, 0.8, 0.55)\n        >>> turtle.pencolor(tup)\n        >>> turtle.pencolor()\n        '#33cc8c'\n        ")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "color")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "pencolor")
(PUNCT "=")
(ID "color")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "fillcolor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Return or set the fillcolor.\n\n        Arguments:\n        Four input formats are allowed:\n          - fillcolor()\n            Return the current fillcolor as color specification string,\n            possibly in hex-number format (see example).\n            May be used as input to another color/pencolor/fillcolor call.\n          - fillcolor(colorstring)\n            s is a Tk color specification string, such as \"red\" or \"yellow\"\n          - fillcolor((r, g, b))\n            *a tuple* of r, g, and b, which represent, an RGB color,\n            and each of r, g, and b are in the range 0..colormode,\n            where colormode is either 1.0 or 255\n          - fillcolor(r, g, b)\n            r, g, and b represent an RGB color, and each of r, g, and b\n            are in the range 0..colormode\n\n        If turtleshape is a polygon, the interior of that polygon is drawn\n        with the newly set fillcolor.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.fillcolor('violet')\n        >>> col = turtle.pencolor()\n        >>> turtle.fillcolor(col)\n        >>> turtle.fillcolor(0, .5, 0)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "color")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "fillcolor")
(PUNCT "=")
(ID "color")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "showturtle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Makes the turtle visible.\n\n        Aliases: showturtle | st\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.hideturtle()\n        >>> turtle.showturtle()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "shown")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "hideturtle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Makes the turtle invisible.\n\n        Aliases: hideturtle | ht\n\n        No argument.\n\n        It's a good idea to do this while you're in the\n        middle of a complicated drawing, because hiding\n        the turtle speeds up the drawing observably.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.hideturtle()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "shown")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isvisible")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the Turtle is shown, False if it's hidden.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.hideturtle()\n        >>> print turtle.isvisible():\n        False\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_shown")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pen")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "pendict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return or set the pen's attributes.\n\n        Arguments:\n            pen -- a dictionary with some or all of the below listed keys.\n            **pendict -- one or more keyword-arguments with the below\n                         listed keys as keywords.\n\n        Return or set the pen's attributes in a 'pen-dictionary'\n        with the following key/value pairs:\n           \"shown\"      :   True/False\n           \"pendown\"    :   True/False\n           \"pencolor\"   :   color-string or color-tuple\n           \"fillcolor\"  :   color-string or color-tuple\n           \"pensize\"    :   positive number\n           \"speed\"      :   number in range 0..10\n           \"resizemode\" :   \"auto\" or \"user\" or \"noresize\"\n           \"stretchfactor\": (positive number, positive number)\n           \"shearfactor\":   number\n           \"outline\"    :   positive number\n           \"tilt\"       :   number\n\n        This dictionary can be used as argument for a subsequent\n        pen()-call to restore the former pen-state. Moreover one\n        or more of these attributes can be provided as keyword-arguments.\n        This can be used to set several pen attributes in one statement.\n\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n        >>> turtle.pen()\n        {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n        'pencolor': 'red', 'pendown': True, 'fillcolor': 'black',\n        'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n        >>> penstate=turtle.pen()\n        >>> turtle.color(\"yellow\",\"\")\n        >>> turtle.penup()\n        >>> turtle.pen()\n        {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n        'pencolor': 'yellow', 'pendown': False, 'fillcolor': '',\n        'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n        >>> p.pen(penstate, fillcolor=\"green\")\n        >>> p.pen()\n        {'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n        'pencolor': 'red', 'pendown': True, 'fillcolor': 'green',\n        'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n        ")
(NEWLINE)
(ID "_pd")
(PUNCT "=")
(PUNCT "{")
(LIT "shown")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_shown")
(PUNCT ",")
(LIT "pendown")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ",")
(LIT "pencolor")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ",")
(LIT "fillcolor")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ",")
(LIT "pensize")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ",")
(LIT "speed")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT ",")
(LIT "resizemode")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT ",")
(LIT "stretchfactor")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(PUNCT ",")
(LIT "shearfactor")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_shearfactor")
(PUNCT ",")
(LIT "outline")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(PUNCT ",")
(LIT "tilt")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "pen")
(KEYWORD or)
(ID "pendict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_pd")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "pen")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "pen")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "pendict")
(PUNCT ")")
(NEWLINE)
(ID "_p_buf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_p_buf")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "_pd")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "pen")
(PUNCT ",")
(ID "_p_buf")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "newLine")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(LIT "pendown")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT "!=")
(ID "p")
(PUNCT "[")
(LIT "pendown")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newLine")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(LIT "pencolor")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "p")
(PUNCT "[")
(LIT "pencolor")
(PUNCT "]")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "[")
(LIT "pencolor")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(PUNCT "(")
(ID "p")
(PUNCT "[")
(LIT "pencolor")
(PUNCT "]")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT "!=")
(ID "p")
(PUNCT "[")
(LIT "pencolor")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newLine")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(LIT "pensize")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "!=")
(ID "p")
(PUNCT "[")
(LIT "pensize")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newLine")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "newLine")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_newLine")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "pendown")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "pendown")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "pencolor")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "pencolor")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "pensize")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "pensize")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "fillcolor")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "p")
(PUNCT "[")
(LIT "fillcolor")
(PUNCT "]")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "[")
(LIT "fillcolor")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(PUNCT "(")
(ID "p")
(PUNCT "[")
(LIT "fillcolor")
(PUNCT "]")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "fillcolor")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "speed")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "speed")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "resizemode")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "resizemode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "stretchfactor")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sf")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "stretchfactor")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "sf")
(PUNCT ",")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sf")
(PUNCT "=")
(PUNCT "(")
(ID "sf")
(PUNCT ",")
(ID "sf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(PUNCT "=")
(ID "sf")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "shearfactor")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_shearfactor")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "shearfactor")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "outline")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "outline")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "shown")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_shown")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "shown")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "tilt")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT "=")
(ID "p")
(PUNCT "[")
(LIT "tilt")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "stretchfactor")
(KEYWORD in)
(ID "p")
(KEYWORD or)
(LIT "tilt")
(KEYWORD in)
(ID "p")
(KEYWORD or)
(LIT "shearfactor")
(KEYWORD in)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scx")
(PUNCT ",")
(ID "scy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(NEWLINE)
(ID "shf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shearfactor")
(NEWLINE)
(ID "sa")
(PUNCT ",")
(ID "ca")
(PUNCT "=")
(ID "math")
(PUNCT ".")
(ID "sin")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT ")")
(PUNCT ",")
(ID "math")
(PUNCT ".")
(ID "cos")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shapetrafo")
(PUNCT "=")
(PUNCT "(")
(ID "scx")
(PUNCT "*")
(ID "ca")
(PUNCT ",")
(ID "scy")
(PUNCT "*")
(PUNCT "(")
(ID "shf")
(PUNCT "*")
(ID "ca")
(PUNCT "+")
(ID "sa")
(PUNCT ")")
(PUNCT ",")
(PUNCT "-")
(ID "scx")
(PUNCT "*")
(ID "sa")
(PUNCT ",")
(ID "scy")
(PUNCT "*")
(PUNCT "(")
(ID "ca")
(PUNCT "-")
(ID "shf")
(PUNCT "*")
(ID "sa")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_newLine")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usePos")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_update")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "count")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "forced")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_colorstr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "dummy method - to be overwritten by child class")
(NEWLINE)
(DEDENT)
(ID "width")
(PUNCT "=")
(ID "pensize")
(NEWLINE)
(ID "up")
(PUNCT "=")
(ID "penup")
(NEWLINE)
(ID "pu")
(PUNCT "=")
(ID "penup")
(NEWLINE)
(ID "pd")
(PUNCT "=")
(ID "pendown")
(NEWLINE)
(ID "down")
(PUNCT "=")
(ID "pendown")
(NEWLINE)
(ID "st")
(PUNCT "=")
(ID "showturtle")
(NEWLINE)
(ID "ht")
(PUNCT "=")
(ID "hideturtle")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_TurtleImage")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper class: Datatype to store Turtle attributes\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "screen")
(PUNCT ",")
(ID "shapeIndex")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "screen")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_setshape")
(PUNCT "(")
(ID "shapeIndex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setshape")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "shapeIndex")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT "=")
(ID "shapeIndex")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "polygon")
(PUNCT "==")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "shapeIndex")
(PUNCT "]")
(PUNCT ".")
(ID "_type")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "image")
(PUNCT "==")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "shapeIndex")
(PUNCT "]")
(PUNCT ".")
(ID "_type")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(KEYWORD in)
(PUNCT "[")
(LIT "image")
(PUNCT ",")
(LIT "polygon")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_item")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "shapeIndex")
(PUNCT "]")
(PUNCT ".")
(ID "_type")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_item")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_item")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createimage")
(PUNCT "(")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(LIT "blank")
(PUNCT "]")
(PUNCT ".")
(ID "_data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_item")
(PUNCT "=")
(PUNCT "[")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "shapeIndex")
(PUNCT "]")
(PUNCT ".")
(ID "_data")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "RawTurtle")
(PUNCT "(")
(ID "TPen")
(PUNCT ",")
(ID "TNavigator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Animation part of the RawTurtle.\n    Puts RawTurtle upon a TurtleScreen and provides tools for\n    its animation.\n    ")
(NEWLINE)
(ID "screens")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "canvas")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "shape")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "shape")
(PUNCT "]")
(PUNCT ",")
(ID "undobuffersize")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "undobuffersize")
(PUNCT "]")
(PUNCT ",")
(ID "visible")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "visible")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "canvas")
(PUNCT ",")
(ID "_Screen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "canvas")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "canvas")
(PUNCT ",")
(ID "TurtleScreen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "canvas")
(KEYWORD not)
(KEYWORD in)
(ID "RawTurtle")
(PUNCT ".")
(ID "screens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "RawTurtle")
(PUNCT ".")
(ID "screens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "canvas")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "canvas")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "canvas")
(PUNCT ",")
(PUNCT "(")
(ID "ScrolledCanvas")
(PUNCT ",")
(ID "Canvas")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "screen")
(KEYWORD in)
(ID "RawTurtle")
(PUNCT ".")
(ID "screens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "screen")
(PUNCT ".")
(ID "cv")
(PUNCT "==")
(ID "canvas")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "screen")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "TurtleScreen")
(PUNCT "(")
(ID "canvas")
(PUNCT ")")
(NEWLINE)
(ID "RawTurtle")
(PUNCT ".")
(ID "screens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad canvas argument %s")
(PUNCT "%")
(ID "canvas")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "TNavigator")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "screen")
(PUNCT ".")
(ID "mode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "TPen")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_turtles")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "drawingLineItem")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT "=")
(ID "_TurtleImage")
(PUNCT "(")
(ID "screen")
(PUNCT ",")
(ID "shape")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_creatingPoly")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shown")
(PUNCT "=")
(ID "visible")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_hidden_from_screen")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_undobuffersize")
(PUNCT "=")
(ID "undobuffersize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT "=")
(ID "Tbuffer")
(PUNCT "(")
(ID "undobuffersize")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete the turtle's drawings and restore its default values.\n\n        No argument.\n\n        Delete the turtle's drawings from the screen, re-center the turtle\n        and set variables to the default values.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.position()\n        (0.00,-22.00)\n        >>> turtle.heading()\n        100.0\n        >>> turtle.reset()\n        >>> turtle.position()\n        (0.00,0.00)\n        >>> turtle.heading()\n        0.0\n        ")
(NEWLINE)
(ID "TNavigator")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "TPen")
(PUNCT ".")
(ID "_reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_drawturtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setundobuffer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or disable undobuffer.\n\n        Argument:\n        size -- an integer or None\n\n        If size is an integer an empty undobuffer of given size is installed.\n        Size gives the maximum number of turtle-actions that can be undone\n        by the undo() function.\n        If size is None, no undobuffer is present.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.setundobuffer(42)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "size")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT "=")
(ID "Tbuffer")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "undobufferentries")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return count of entries in the undobuffer.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> while undobufferentries():\n        ...     undo()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "nr_of_items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete all of pen's drawings")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_createline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "clearstamps")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setundobuffer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_undobuffersize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete the turtle's drawings from the screen. Do not move turtle.\n\n        No arguments.\n\n        Delete the turtle's drawings from the screen. Do not move turtle.\n        State and position of the turtle as well as drawings of other\n        turtles are not affected.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.clear()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_update_data")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_incrementudc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_update")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Perform a Turtle-data update.\n        ")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(KEYWORD if)
(ID "screen")
(PUNCT ".")
(ID "_tracing")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "screen")
(PUNCT ".")
(ID "_tracing")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_update_data")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_drawturtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_delay")
(PUNCT "(")
(ID "screen")
(PUNCT ".")
(ID "_delayvalue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_update_data")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "screen")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "screen")
(PUNCT ".")
(ID "turtles")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT ".")
(ID "_drawturtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "screen")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_tracer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flag")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turns turtle animation on/off and set delay for update drawings.\n\n        Optional arguments:\n        n -- nonnegative  integer\n        delay -- nonnegative  integer\n\n        If n is given, only each n-th regular screen update is really performed.\n        (Can be used to accelerate the drawing of complex graphics.)\n        Second arguments sets delay value (see RawTurtle.delay())\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.tracer(8, 25)\n        >>> dist = 2\n        >>> for i in range(200):\n        ...     turtle.fd(dist)\n        ...     turtle.rt(90)\n        ...     dist += 2\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "tracer")
(PUNCT "(")
(ID "flag")
(PUNCT ",")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_color")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_color")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_colorstr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert colortriples to hexstrings.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT "=")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad color arguments: %s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_colormode")
(PUNCT "==")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT "=")
(PUNCT "[")
(ID "round")
(PUNCT "(")
(LIT 255.0)
(PUNCT "*")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(PUNCT "(")
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "r")
(PUNCT "<=")
(LIT 255)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "g")
(PUNCT "<=")
(LIT 255)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(LIT 0)
(PUNCT "<=")
(ID "b")
(PUNCT "<=")
(LIT 255)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "bad color sequence: %s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "#%02x%02x%02x")
(PUNCT "%")
(PUNCT "(")
(ID "r")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clone")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return a clone of the turtle.\n\n        No argument.\n\n        Create and return a clone of the turtle with same position, heading\n        and turtle properties.\n\n        Example (for a Turtle instance named mick):\n        mick = Turtle()\n        joe = mick.clone()\n        ")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_newLine")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "turtle")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "q")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "screen")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT "=")
(ID "turtle")
(NEWLINE)
(ID "q")
(PUNCT ".")
(ID "screen")
(PUNCT "=")
(ID "screen")
(NEWLINE)
(ID "q")
(PUNCT ".")
(ID "turtle")
(PUNCT "=")
(ID "_TurtleImage")
(PUNCT "(")
(ID "screen")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_turtles")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "q")
(PUNCT ")")
(NEWLINE)
(ID "ttype")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT "]")
(PUNCT ".")
(ID "_type")
(NEWLINE)
(KEYWORD if)
(ID "ttype")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createimage")
(PUNCT "(")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(LIT "blank")
(PUNCT "]")
(PUNCT ".")
(ID "_data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(PUNCT "=")
(PUNCT "[")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT "]")
(PUNCT ".")
(ID "_data")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "q")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "q")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "q")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shape")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set turtle shape to shape with given name / return current shapename.\n\n        Optional argument:\n        name -- a string, which is a valid shapename\n\n        Set turtle shape to shape with given name or, if name is not given,\n        return name of current shape.\n        Shape with name must exist in the TurtleScreen's shape dictionary.\n        Initially there are the following polygon shapes:\n        'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.\n        To learn about how to deal with shapes see Screen-method register_shape.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.shape()\n        'arrow'\n        >>> turtle.shape(\"turtle\")\n        >>> turtle.shape()\n        'turtle'\n        ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "getshapes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "There is no shape named %s")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_setshape")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shapesize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stretch_wid")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stretch_len")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set/return turtle's stretchfactors/outline. Set resizemode to \"user\".\n\n        Optional arguments:\n           stretch_wid : positive number\n           stretch_len : positive number\n           outline  : positive number\n\n        Return or set the pen's attributes x/y-stretchfactors and/or outline.\n        Set resizemode to \"user\".\n        If and only if resizemode is set to \"user\", the turtle will be displayed\n        stretched according to its stretchfactors:\n        stretch_wid is stretchfactor perpendicular to orientation\n        stretch_len is stretchfactor in direction of turtles orientation.\n        outline determines the width of the shapes's outline.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.resizemode(\"user\")\n        >>> turtle.shapesize(5, 5, 12)\n        >>> turtle.shapesize(outline=8)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "stretch_wid")
(KEYWORD is)
(ID "stretch_len")
(KEYWORD is)
(ID "outline")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stretch_wid")
(PUNCT ",")
(ID "stretch_len")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(NEWLINE)
(KEYWORD return)
(ID "stretch_wid")
(PUNCT ",")
(ID "stretch_len")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stretch_wid")
(PUNCT "==")
(LIT 0)
(KEYWORD or)
(ID "stretch_len")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "stretch_wid/stretch_len must not be zero")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stretch_wid")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stretch_len")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stretchfactor")
(PUNCT "=")
(ID "stretch_wid")
(PUNCT ",")
(ID "stretch_wid")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stretchfactor")
(PUNCT "=")
(ID "stretch_wid")
(PUNCT ",")
(ID "stretch_len")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "stretch_len")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stretchfactor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "stretch_len")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stretchfactor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "outline")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "resizemode")
(PUNCT "=")
(LIT "user")
(PUNCT ",")
(ID "stretchfactor")
(PUNCT "=")
(ID "stretchfactor")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(ID "outline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shearfactor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "shear")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or return the current shearfactor.\n\n        Optional argument: shear -- number, tangent of the shear angle\n\n        Shear the turtleshape according to the given shearfactor shear,\n        which is the tangent of the shear angle. DO NOT change the\n        turtle's heading (direction of movement).\n        If shear is not given: return the current shearfactor, i. e. the\n        tangent of the shear angle, by which lines parallel to the\n        heading of the turtle are sheared.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape(\"circle\")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.shearfactor(0.5)\n        >>> turtle.shearfactor()\n        >>> 0.5\n        ")
(NEWLINE)
(KEYWORD if)
(ID "shear")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_shearfactor")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "resizemode")
(PUNCT "=")
(LIT "user")
(PUNCT ",")
(ID "shearfactor")
(PUNCT "=")
(ID "shear")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "settiltangle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Rotate the turtleshape to point in the specified direction\n\n        Argument: angle -- number\n\n        Rotate the turtleshape to point in the direction specified by angle,\n        regardless of its current tilt-angle. DO NOT change the turtle's\n        heading (direction of movement).\n\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape(\"circle\")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.settiltangle(45)\n        >>> stamp()\n        >>> turtle.fd(50)\n        >>> turtle.settiltangle(-45)\n        >>> stamp()\n        >>> turtle.fd(50)\n        ")
(NEWLINE)
(ID "tilt")
(PUNCT "=")
(PUNCT "-")
(ID "angle")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(NEWLINE)
(ID "tilt")
(PUNCT "=")
(PUNCT "(")
(ID "tilt")
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT "/")
(LIT 180.0)
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(LIT 2)
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "resizemode")
(PUNCT "=")
(LIT "user")
(PUNCT ",")
(ID "tilt")
(PUNCT "=")
(ID "tilt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tiltangle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or return the current tilt-angle.\n\n        Optional argument: angle -- number\n\n        Rotate the turtleshape to point in the direction specified by angle,\n        regardless of its current tilt-angle. DO NOT change the turtle's\n        heading (direction of movement).\n        If angle is not given: return the current tilt-angle, i. e. the angle\n        between the orientation of the turtleshape and the heading of the\n        turtle (its direction of movement).\n\n        Deprecated since Python 3.1\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape(\"circle\")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.tilt(45)\n        >>> turtle.tiltangle()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "angle")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tilt")
(PUNCT "=")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT "*")
(PUNCT "(")
(LIT 180.0)
(PUNCT "/")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT ")")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_angleOrient")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "tilt")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_fullcircle")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "settiltangle")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tilt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Rotate the turtleshape by angle.\n\n        Argument:\n        angle - a number\n\n        Rotate the turtleshape by angle from its current tilt-angle,\n        but do NOT change the turtle's heading (direction of movement).\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape(\"circle\")\n        >>> turtle.shapesize(5,2)\n        >>> turtle.tilt(30)\n        >>> turtle.fd(50)\n        >>> turtle.tilt(30)\n        >>> turtle.fd(50)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "settiltangle")
(PUNCT "(")
(ID "angle")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "tiltangle")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shapetransform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "t11")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "t12")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "t21")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "t22")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or return the current transformation matrix of the turtle shape.\n\n        Optional arguments: t11, t12, t21, t22 -- numbers.\n\n        If none of the matrix elements are given, return the transformation\n        matrix.\n        Otherwise set the given elements and transform the turtleshape\n        according to the matrix consisting of first row t11, t12 and\n        second row t21, 22.\n        Modify stretchfactor, shearfactor and tiltangle according to the\n        given matrix.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape(\"square\")\n        >>> turtle.shapesize(4,2)\n        >>> turtle.shearfactor(-0.5)\n        >>> turtle.shapetransform()\n        (4.0, -1.0, -0.0, 2.0)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "t11")
(KEYWORD is)
(ID "t12")
(KEYWORD is)
(ID "t21")
(KEYWORD is)
(ID "t22")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_shapetrafo")
(NEWLINE)
(DEDENT)
(ID "m11")
(PUNCT ",")
(ID "m12")
(PUNCT ",")
(ID "m21")
(PUNCT ",")
(ID "m22")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shapetrafo")
(NEWLINE)
(KEYWORD if)
(ID "t11")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "m11")
(PUNCT "=")
(ID "t11")
(NEWLINE)
(KEYWORD if)
(ID "t12")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "m12")
(PUNCT "=")
(ID "t12")
(NEWLINE)
(KEYWORD if)
(ID "t21")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "m21")
(PUNCT "=")
(ID "t21")
(NEWLINE)
(KEYWORD if)
(ID "t22")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(ID "m22")
(PUNCT "=")
(ID "t22")
(NEWLINE)
(KEYWORD if)
(ID "t11")
(PUNCT "*")
(ID "t22")
(PUNCT "-")
(ID "t12")
(PUNCT "*")
(ID "t21")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TurtleGraphicsError")
(PUNCT "(")
(LIT "Bad shape transform matrix: must not be singular")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_shapetrafo")
(PUNCT "=")
(PUNCT "(")
(ID "m11")
(PUNCT ",")
(ID "m12")
(PUNCT ",")
(ID "m21")
(PUNCT ",")
(ID "m22")
(PUNCT ")")
(NEWLINE)
(ID "alfa")
(PUNCT "=")
(ID "math")
(PUNCT ".")
(ID "atan2")
(PUNCT "(")
(PUNCT "-")
(ID "m21")
(PUNCT ",")
(ID "m11")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(LIT 2)
(PUNCT "*")
(ID "math")
(PUNCT ".")
(ID "pi")
(PUNCT ")")
(NEWLINE)
(ID "sa")
(PUNCT ",")
(ID "ca")
(PUNCT "=")
(ID "math")
(PUNCT ".")
(ID "sin")
(PUNCT "(")
(ID "alfa")
(PUNCT ")")
(PUNCT ",")
(ID "math")
(PUNCT ".")
(ID "cos")
(PUNCT "(")
(ID "alfa")
(PUNCT ")")
(NEWLINE)
(ID "a11")
(PUNCT ",")
(ID "a12")
(PUNCT ",")
(ID "a21")
(PUNCT ",")
(ID "a22")
(PUNCT "=")
(PUNCT "(")
(ID "ca")
(PUNCT "*")
(ID "m11")
(PUNCT "-")
(ID "sa")
(PUNCT "*")
(ID "m21")
(PUNCT ",")
(ID "ca")
(PUNCT "*")
(ID "m12")
(PUNCT "-")
(ID "sa")
(PUNCT "*")
(ID "m22")
(PUNCT ",")
(ID "sa")
(PUNCT "*")
(ID "m11")
(PUNCT "+")
(ID "ca")
(PUNCT "*")
(ID "m21")
(PUNCT ",")
(ID "sa")
(PUNCT "*")
(ID "m12")
(PUNCT "+")
(ID "ca")
(PUNCT "*")
(ID "m22")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_stretchfactor")
(PUNCT "=")
(ID "a11")
(PUNCT ",")
(ID "a22")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shearfactor")
(PUNCT "=")
(ID "a12")
(PUNCT "/")
(ID "a22")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tilt")
(PUNCT "=")
(ID "alfa")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "resizemode")
(PUNCT "=")
(LIT "user")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_polytrafo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "poly")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Computes transformed polygon shapes from a shape\n        according to current position and heading.\n        ")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "p0")
(PUNCT ",")
(ID "p1")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_position")
(NEWLINE)
(ID "e0")
(PUNCT ",")
(ID "e1")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_orient")
(NEWLINE)
(ID "e")
(PUNCT "=")
(ID "Vec2D")
(PUNCT "(")
(ID "e0")
(PUNCT ",")
(ID "e1")
(PUNCT "*")
(ID "screen")
(PUNCT ".")
(ID "yscale")
(PUNCT "/")
(ID "screen")
(PUNCT ".")
(ID "xscale")
(PUNCT ")")
(NEWLINE)
(ID "e0")
(PUNCT ",")
(ID "e1")
(PUNCT "=")
(PUNCT "(")
(LIT 1.0)
(PUNCT "/")
(ID "abs")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(PUNCT "*")
(ID "e")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(PUNCT "(")
(ID "p0")
(PUNCT "+")
(PUNCT "(")
(ID "e1")
(PUNCT "*")
(ID "x")
(PUNCT "+")
(ID "e0")
(PUNCT "*")
(ID "y")
(PUNCT ")")
(PUNCT "/")
(ID "screen")
(PUNCT ".")
(ID "xscale")
(PUNCT ",")
(ID "p1")
(PUNCT "+")
(PUNCT "(")
(PUNCT "-")
(ID "e0")
(PUNCT "*")
(ID "x")
(PUNCT "+")
(ID "e1")
(PUNCT "*")
(ID "y")
(PUNCT ")")
(PUNCT "/")
(ID "screen")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(KEYWORD for)
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(KEYWORD in)
(ID "poly")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_shapepoly")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current shape polygon as tuple of coordinate pairs.\n\n        No argument.\n\n        Examples (for a Turtle instance named turtle):\n        >>> turtle.shape(\"square\")\n        >>> turtle.shapetransform(4, -1, 0, 2)\n        >>> turtle.get_shapepoly()\n        ((50, -20), (30, 20), (-50, 20), (-30, -20))\n\n        ")
(NEWLINE)
(ID "shape")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "shape")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getshapepoly")
(PUNCT "(")
(ID "shape")
(PUNCT ".")
(ID "_data")
(PUNCT ",")
(ID "shape")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "compound")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_getshapepoly")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "polygon")
(PUNCT ",")
(ID "compound")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate transformed shape polygon according to resizemode\n        and shapetransform.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "user")
(KEYWORD or)
(ID "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t11")
(PUNCT ",")
(ID "t12")
(PUNCT ",")
(ID "t21")
(PUNCT ",")
(ID "t22")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shapetrafo")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "auto")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "/")
(LIT 5.0)
(PUNCT ")")
(NEWLINE)
(ID "t11")
(PUNCT ",")
(ID "t12")
(PUNCT ",")
(ID "t21")
(PUNCT ",")
(ID "t22")
(PUNCT "=")
(ID "l")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "l")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "noresize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "polygon")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "t11")
(PUNCT "*")
(ID "x")
(PUNCT "+")
(ID "t12")
(PUNCT "*")
(ID "y")
(PUNCT ",")
(ID "t21")
(PUNCT "*")
(ID "x")
(PUNCT "+")
(ID "t22")
(PUNCT "*")
(ID "y")
(PUNCT ")")
(KEYWORD for)
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(KEYWORD in)
(ID "polygon")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_drawturtle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Manages the correct rendering of the turtle with respect to\n        its shape, resizemode, stretch and tilt etc.")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "shape")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT "]")
(NEWLINE)
(ID "ttype")
(PUNCT "=")
(ID "shape")
(PUNCT ".")
(ID "_type")
(NEWLINE)
(ID "titem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_shown")
(KEYWORD and)
(ID "screen")
(PUNCT ".")
(ID "_updatecounter")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "screen")
(PUNCT ".")
(ID "_tracing")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_hidden_from_screen")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "tshape")
(PUNCT "=")
(ID "shape")
(PUNCT ".")
(ID "_data")
(NEWLINE)
(KEYWORD if)
(ID "ttype")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "noresize")
(PUNCT ":")
(ID "w")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "auto")
(PUNCT ":")
(ID "w")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "w")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(NEWLINE)
(ID "shape")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_polytrafo")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_getshapepoly")
(PUNCT "(")
(ID "tshape")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fc")
(PUNCT ",")
(ID "oc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "titem")
(PUNCT ",")
(ID "shape")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "fc")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(ID "oc")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "w")
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawimage")
(PUNCT "(")
(ID "titem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ",")
(ID "tshape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "item")
(PUNCT ",")
(PUNCT "(")
(ID "poly")
(PUNCT ",")
(ID "fc")
(PUNCT ",")
(ID "oc")
(PUNCT ")")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "titem")
(PUNCT ",")
(ID "tshape")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "poly")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_polytrafo")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_getshapepoly")
(PUNCT "(")
(ID "poly")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "poly")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cc")
(PUNCT "(")
(ID "fc")
(PUNCT ")")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cc")
(PUNCT "(")
(ID "oc")
(PUNCT ")")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_hidden_from_screen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ttype")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "titem")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawimage")
(PUNCT "(")
(ID "titem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ",")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(LIT "blank")
(PUNCT "]")
(PUNCT ".")
(ID "_data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "titem")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_hidden_from_screen")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "stamp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stamp a copy of the turtleshape onto the canvas and return its id.\n\n        No argument.\n\n        Stamp a copy of the turtle shape onto the canvas at the current\n        turtle position. Return a stamp_id for that stamp, which can be\n        used to delete it by calling clearstamp(stamp_id).\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color(\"blue\")\n        >>> turtle.stamp()\n        13\n        >>> turtle.fd(50)\n        ")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "shape")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_shapes")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "shapeIndex")
(PUNCT "]")
(NEWLINE)
(ID "ttype")
(PUNCT "=")
(ID "shape")
(PUNCT ".")
(ID "_type")
(NEWLINE)
(ID "tshape")
(PUNCT "=")
(ID "shape")
(PUNCT ".")
(ID "_data")
(NEWLINE)
(KEYWORD if)
(ID "ttype")
(PUNCT "==")
(LIT "polygon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stitem")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "noresize")
(PUNCT ":")
(ID "w")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_resizemode")
(PUNCT "==")
(LIT "auto")
(PUNCT ":")
(ID "w")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "w")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(NEWLINE)
(ID "shape")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_polytrafo")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_getshapepoly")
(PUNCT "(")
(ID "tshape")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fc")
(PUNCT ",")
(ID "oc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "stitem")
(PUNCT ",")
(ID "shape")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "fc")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(ID "oc")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "w")
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stitem")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createimage")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_drawimage")
(PUNCT "(")
(ID "stitem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ",")
(ID "tshape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ttype")
(PUNCT "==")
(LIT "compound")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stitem")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "element")
(KEYWORD in)
(ID "tshape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "stitem")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stitem")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "stitem")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(PUNCT ",")
(PUNCT "(")
(ID "poly")
(PUNCT ",")
(ID "fc")
(PUNCT ",")
(ID "oc")
(PUNCT ")")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "stitem")
(PUNCT ",")
(ID "tshape")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "poly")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_polytrafo")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_getshapepoly")
(PUNCT "(")
(ID "poly")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "poly")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cc")
(PUNCT "(")
(ID "fc")
(PUNCT ")")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_cc")
(PUNCT "(")
(ID "oc")
(PUNCT ")")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_outlinewidth")
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stitem")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "stamp")
(PUNCT ",")
(ID "stitem")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "stitem")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_clearstamp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stampid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "does the work for clearstamp() and clearstamps()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "stampid")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "stampid")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "subitem")
(KEYWORD in)
(ID "stampid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "subitem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "stampid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "stampid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "item")
(PUNCT "=")
(PUNCT "(")
(LIT "stamp")
(PUNCT ",")
(ID "stampid")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(NEWLINE)
(KEYWORD if)
(ID "item")
(KEYWORD not)
(KEYWORD in)
(ID "buf")
(PUNCT ".")
(ID "buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "index")
(PUNCT "=")
(ID "buf")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index")
(PUNCT "<=")
(ID "buf")
(PUNCT ".")
(ID "ptr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT ".")
(ID "ptr")
(PUNCT "=")
(PUNCT "(")
(ID "buf")
(PUNCT ".")
(ID "ptr")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(ID "buf")
(PUNCT ".")
(ID "bufsize")
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(PUNCT "(")
(ID "buf")
(PUNCT ".")
(ID "ptr")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(ID "buf")
(PUNCT ".")
(ID "bufsize")
(PUNCT ",")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clearstamp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stampid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete stamp with given stampid\n\n        Argument:\n        stampid - an integer, must be return value of previous stamp() call.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color(\"blue\")\n        >>> astamp = turtle.stamp()\n        >>> turtle.fd(50)\n        >>> turtle.clearstamp(astamp)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clearstamp")
(PUNCT "(")
(ID "stampid")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clearstamps")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete all or first/last n of turtle's stamps.\n\n        Optional argument:\n        n -- an integer\n\n        If n is None, delete all of pen's stamps,\n        else if n > 0 delete first n stamps\n        else if n < 0 delete last n stamps.\n\n        Example (for a Turtle instance named turtle):\n        >>> for i in range(8):\n        ...     turtle.stamp(); turtle.fd(30)\n        ...\n        >>> turtle.clearstamps(2)\n        >>> turtle.clearstamps(-2)\n        >>> turtle.clearstamps()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toDelete")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toDelete")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT "[")
(PUNCT ":")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toDelete")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stampItems")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "toDelete")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_clearstamp")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_goto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move the pen to the point end, thereby drawing a line\n        if pen is down. All other methods for turtle movement depend\n        on this one.\n        ")
(NEWLINE)
(ID "go_modes")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ",")
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(ID "undo_entry")
(PUNCT "=")
(PUNCT "(")
(LIT "go")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "go_modes")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "screen")
(PUNCT ".")
(ID "_pointlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(ID "undo_entry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "start")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_position")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_speed")
(KEYWORD and)
(ID "screen")
(PUNCT ".")
(ID "_tracing")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "diff")
(PUNCT "=")
(PUNCT "(")
(ID "end")
(PUNCT "-")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "diffsq")
(PUNCT "=")
(PUNCT "(")
(ID "diff")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "screen")
(PUNCT ".")
(ID "xscale")
(PUNCT ")")
(PUNCT "**")
(LIT 2)
(PUNCT "+")
(PUNCT "(")
(ID "diff")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "screen")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(PUNCT "**")
(LIT 2)
(NEWLINE)
(ID "nhops")
(PUNCT "=")
(LIT 1)
(PUNCT "+")
(ID "int")
(PUNCT "(")
(PUNCT "(")
(ID "diffsq")
(PUNCT "**")
(LIT 0.5)
(PUNCT ")")
(PUNCT "/")
(PUNCT "(")
(LIT 3)
(PUNCT "*")
(PUNCT "(")
(LIT 1.1)
(PUNCT "**")
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT ")")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "delta")
(PUNCT "=")
(ID "diff")
(PUNCT "*")
(PUNCT "(")
(LIT 1.0)
(PUNCT "/")
(ID "nhops")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "nhops")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "top")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "top")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "=")
(ID "start")
(PUNCT "+")
(ID "delta")
(PUNCT "*")
(ID "n")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "drawingLineItem")
(PUNCT ",")
(PUNCT "(")
(ID "start")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ",")
(ID "top")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "drawingLineItem")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_creatingPoly")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ")")
(PUNCT ">")
(LIT 42)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_newLine")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_undogoto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Reverse a _goto. Used for undo()\n        ")
(NEWLINE)
(ID "old")
(PUNCT ",")
(ID "new")
(PUNCT ",")
(ID "go_modes")
(PUNCT ",")
(ID "coodata")
(PUNCT "=")
(ID "entry")
(NEWLINE)
(ID "drawing")
(PUNCT ",")
(ID "pc")
(PUNCT ",")
(ID "ps")
(PUNCT ",")
(ID "filling")
(PUNCT "=")
(ID "go_modes")
(NEWLINE)
(ID "cLI")
(PUNCT ",")
(ID "cL")
(PUNCT ",")
(ID "pl")
(PUNCT ",")
(ID "items")
(PUNCT "=")
(ID "coodata")
(NEWLINE)
(ID "screen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(KEYWORD if)
(ID "abs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "-")
(ID "new")
(PUNCT ")")
(PUNCT ">")
(LIT 0.5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "undogoto: HALLO-DA-STIMMT-WAS-NICHT!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "=")
(ID "cLI")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT "=")
(ID "cL")
(NEWLINE)
(KEYWORD if)
(ID "pl")
(PUNCT "==")
(PUNCT "[")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "usepc")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "usepc")
(PUNCT "=")
(ID "pc")
(NEWLINE)
(DEDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "cLI")
(PUNCT ",")
(ID "pl")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "usepc")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "ps")
(PUNCT ")")
(NEWLINE)
(ID "todelete")
(PUNCT "=")
(PUNCT "[")
(ID "i")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(KEYWORD if)
(PUNCT "(")
(ID "i")
(KEYWORD not)
(KEYWORD in)
(ID "items")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "screen")
(PUNCT ".")
(ID "_type")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(PUNCT "==")
(LIT "line")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "todelete")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "start")
(PUNCT "=")
(ID "old")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_speed")
(KEYWORD and)
(ID "screen")
(PUNCT ".")
(ID "_tracing")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "diff")
(PUNCT "=")
(ID "old")
(PUNCT "-")
(ID "new")
(NEWLINE)
(ID "diffsq")
(PUNCT "=")
(PUNCT "(")
(ID "diff")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "screen")
(PUNCT ".")
(ID "xscale")
(PUNCT ")")
(PUNCT "**")
(LIT 2)
(PUNCT "+")
(PUNCT "(")
(ID "diff")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "*")
(ID "screen")
(PUNCT ".")
(ID "yscale")
(PUNCT ")")
(PUNCT "**")
(LIT 2)
(NEWLINE)
(ID "nhops")
(PUNCT "=")
(LIT 1)
(PUNCT "+")
(ID "int")
(PUNCT "(")
(PUNCT "(")
(ID "diffsq")
(PUNCT "**")
(LIT 0.5)
(PUNCT ")")
(PUNCT "/")
(PUNCT "(")
(LIT 3)
(PUNCT "*")
(PUNCT "(")
(LIT 1.1)
(PUNCT "**")
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT ")")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "delta")
(PUNCT "=")
(ID "diff")
(PUNCT "*")
(PUNCT "(")
(LIT 1.0)
(PUNCT "/")
(ID "nhops")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "nhops")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "top")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "top")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "=")
(ID "new")
(PUNCT "+")
(ID "delta")
(PUNCT "*")
(ID "n")
(NEWLINE)
(KEYWORD if)
(ID "drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "drawingLineItem")
(PUNCT ",")
(PUNCT "(")
(ID "start")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ")")
(PUNCT ",")
(ID "pc")
(PUNCT ",")
(ID "ps")
(PUNCT ",")
(ID "top")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "drawing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "drawingLineItem")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "ps")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "=")
(ID "old")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_creatingPoly")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_creatingPoly")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "filling")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Unwahrscheinlich in _undogoto!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_rotate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "angle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turns pen clockwise by angle.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "rot")
(PUNCT ",")
(ID "angle")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "angle")
(PUNCT "*=")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(NEWLINE)
(ID "neworient")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT ".")
(ID "rotate")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(NEWLINE)
(ID "tracing")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_tracing")
(NEWLINE)
(KEYWORD if)
(ID "tracing")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_speed")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "anglevel")
(PUNCT "=")
(LIT 3.0)
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_speed")
(NEWLINE)
(ID "steps")
(PUNCT "=")
(LIT 1)
(PUNCT "+")
(ID "int")
(PUNCT "(")
(ID "abs")
(PUNCT "(")
(ID "angle")
(PUNCT ")")
(PUNCT "/")
(ID "anglevel")
(PUNCT ")")
(NEWLINE)
(ID "delta")
(PUNCT "=")
(LIT 1.0)
(PUNCT "*")
(ID "angle")
(PUNCT "/")
(ID "steps")
(NEWLINE)
(KEYWORD for)
(ID "_")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "steps")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT ".")
(ID "rotate")
(PUNCT "(")
(ID "delta")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_orient")
(PUNCT "=")
(ID "neworient")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_newLine")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "usePos")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Closes current line item and starts a new one.\n           Remark: if current line became too long, animation\n           performance (via _drawline) slowed down considerably.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_createline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_drawline")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "currentLineItem")
(PUNCT ",")
(ID "top")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "usePos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "currentLine")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "filling")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return fillstate (True if filling, False else).\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.begin_fill()\n        >>> if turtle.filling():\n        ...     turtle.pensize(5)\n        ... else:\n        ...     turtle.pensize(3)\n        ")
(NEWLINE)
(KEYWORD return)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "begin_fill")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called just before drawing a shape to be filled.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color(\"black\", \"red\")\n        >>> turtle.begin_fill()\n        >>> turtle.circle(60)\n        >>> turtle.end_fill()\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "filling")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_createpoly")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_newLine")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "beginfill")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_fill")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fill the shape drawn after the call begin_fill().\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.color(\"black\", \"red\")\n        >>> turtle.begin_fill()\n        >>> turtle.circle(60)\n        >>> turtle.end_fill()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "filling")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillcolor")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "dofill")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "dot")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "color")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Draw a dot with diameter size, using color.\n\n        Optional arguments:\n        size -- an integer >= 1 (if given)\n        color -- a colorstring or a numeric color tuple\n\n        Draw a circular dot with diameter size, using color.\n        If size is not given, the maximum of pensize+4 and 2*pensize is used.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.dot()\n        >>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "color")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "size")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "+")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "+")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT "+")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pensize")
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "color")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_colorstr")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ",")
(LIT "_dot")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_dot")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ",")
(ID "size")
(PUNCT ",")
(ID "color")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "dot")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "[")
(LIT "seq")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "resizemode")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "auto")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ht")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pendown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pensize")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pencolor")
(PUNCT "(")
(ID "color")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "forward")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "pen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "txt")
(PUNCT ",")
(ID "align")
(PUNCT ",")
(ID "font")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Performs the writing for write()\n        ")
(NEWLINE)
(ID "item")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT ",")
(ID "txt")
(PUNCT ",")
(ID "align")
(PUNCT ",")
(ID "font")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pencolor")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "(")
(LIT "wri")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "end")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "arg")
(PUNCT ",")
(ID "move")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "align")
(PUNCT "=")
(LIT "left")
(PUNCT ",")
(ID "font")
(PUNCT "=")
(PUNCT "(")
(LIT "Arial")
(PUNCT ",")
(LIT 8)
(PUNCT ",")
(LIT "normal")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write text at the current turtle position.\n\n        Arguments:\n        arg -- info, which is to be written to the TurtleScreen\n        move (optional) -- True/False\n        align (optional) -- one of the strings \"left\", \"center\" or right\"\n        font (optional) -- a triple (fontname, fontsize, fonttype)\n\n        Write text - the string representation of arg - at the current\n        turtle position according to align (\"left\", \"center\" or right\")\n        and with the given font.\n        If move is True, the pen is moved to the bottom-right corner\n        of the text. By default, move is False.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.write('Home = ', True, align=\"center\")\n        >>> turtle.write((0,0), True)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(PUNCT "[")
(LIT "seq")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "end")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_write")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ",")
(ID "align")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "font")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "move")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setpos")
(PUNCT "(")
(ID "end")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "cumulate")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "begin_poly")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Start recording the vertices of a polygon.\n\n        No argument.\n\n        Start recording the vertices of a polygon. Current turtle position\n        is first point of polygon.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.begin_poly()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_position")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_creatingPoly")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_poly")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop recording the vertices of a polygon.\n\n        No argument.\n\n        Stop recording the vertices of a polygon. Current turtle position is\n        last point of polygon. This will be connected with the first point.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.end_poly()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_creatingPoly")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_poly")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the lastly recorded polygon.\n\n        No argument.\n\n        Example (for a Turtle instance named turtle):\n        >>> p = turtle.get_poly()\n        >>> turtle.register_shape(\"myFavouriteShape\", p)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_poly")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_poly")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getscreen")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the TurtleScreen object, the turtle is drawing  on.\n\n        No argument.\n\n        Return the TurtleScreen object, the turtle is drawing  on.\n        So TurtleScreen-methods can be called for that object.\n\n        Example (for a Turtle instance named turtle):\n        >>> ts = turtle.getscreen()\n        >>> ts\n        <turtle.TurtleScreen object at 0x0106B770>\n        >>> ts.bgcolor(\"pink\")\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "screen")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getturtle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the Turtleobject itself.\n\n        No argument.\n\n        Only reasonable use: as a function to return the 'anonymous turtle':\n\n        Example:\n        >>> pet = getturtle()\n        >>> pet.fd(50)\n        >>> pet\n        <turtle.Turtle object at 0x0187D810>\n        >>> turtles()\n        [<turtle.Turtle object at 0x0187D810>]\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(ID "getpen")
(PUNCT "=")
(ID "getturtle")
(NEWLINE)
(KEYWORD def)
(ID "_delay")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delay")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set delay value which determines speed of turtle animation.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "delay")
(PUNCT "(")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "onclick")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-click event on this turtle on canvas.\n\n        Arguments:\n        fun --  a function with two arguments, to which will be assigned\n                the coordinates of the clicked point on the canvas.\n        num --  number of the mouse-button defaults to 1 (left mouse button).\n        add --  True or False. If True, new binding will be added, otherwise\n                it will replace a former binding.\n\n        Example for the anonymous turtle, i. e. the procedural way:\n\n        >>> def turn(x, y):\n        ...     left(360)\n        ...\n        >>> onclick(turn)  # Now clicking into the turtle will turn it.\n        >>> onclick(None)  # event-binding will be removed\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_onclick")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "onrelease")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-button-release event on this turtle on canvas.\n\n        Arguments:\n        fun -- a function with two arguments, to which will be assigned\n                the coordinates of the clicked point on the canvas.\n        num --  number of the mouse-button defaults to 1 (left mouse button).\n\n        Example (for a MyTurtle instance named joe):\n        >>> class MyTurtle(Turtle):\n        ...     def glow(self,x,y):\n        ...             self.fillcolor(\"red\")\n        ...     def unglow(self,x,y):\n        ...             self.fillcolor(\"\")\n        ...\n        >>> joe = MyTurtle()\n        >>> joe.onclick(joe.glow)\n        >>> joe.onrelease(joe.unglow)\n\n        Clicking on joe turns fillcolor red, unclicking turns it to\n        transparent.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_onrelease")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ondrag")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind fun to mouse-move event on this turtle on canvas.\n\n        Arguments:\n        fun -- a function with two arguments, to which will be assigned\n               the coordinates of the clicked point on the canvas.\n        num -- number of the mouse-button defaults to 1 (left mouse button).\n\n        Every sequence of mouse-move-events on a turtle is preceded by a\n        mouse-click event on that turtle.\n\n        Example (for a Turtle instance named turtle):\n        >>> turtle.ondrag(turtle.goto)\n\n        Subsequently clicking and dragging a Turtle will move it\n        across the screen thereby producing handdrawings (if pen is\n        down).\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_ondrag")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "turtle")
(PUNCT ".")
(ID "_item")
(PUNCT ",")
(ID "fun")
(PUNCT ",")
(ID "btn")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_undo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "action")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Does the main part of the work for undo()\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "rot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "angle")
(PUNCT ",")
(ID "degPAU")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rotate")
(PUNCT "(")
(PUNCT "-")
(ID "angle")
(PUNCT "*")
(ID "degPAU")
(PUNCT "/")
(ID "self")
(PUNCT ".")
(ID "_degreesPerAU")
(PUNCT ")")
(NEWLINE)
(ID "dummy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "stamp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stitem")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "clearstamp")
(PUNCT "(")
(ID "stitem")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "go")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_undogoto")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(KEYWORD in)
(PUNCT "[")
(LIT "wri")
(PUNCT ",")
(LIT "dot")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "dofill")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_drawpoly")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "outline")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "beginfill")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fillitem")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fillpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "item")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "screen")
(PUNCT ".")
(ID "_delete")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "items")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "pen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TPen")
(PUNCT ".")
(ID "pen")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "undo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "undo (repeatedly) the last turtle action.\n\n        No argument.\n\n        undo (repeatedly) the last turtle action.\n        Number of available undo actions is determined by the size of\n        the undobuffer.\n\n        Example (for a Turtle instance named turtle):\n        >>> for i in range(4):\n        ...     turtle.fd(50); turtle.lt(80)\n        ...\n        >>> for i in range(8):\n        ...     turtle.undo()\n        ...\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "undobuffer")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "action")
(PUNCT "=")
(ID "item")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "item")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "seq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_undo")
(PUNCT "(")
(ID "item")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "item")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_undo")
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "turtlesize")
(PUNCT "=")
(ID "shapesize")
(NEWLINE)
(DEDENT)
(ID "RawPen")
(PUNCT "=")
(ID "RawTurtle")
(NEWLINE)
(KEYWORD def)
(ID "Screen")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the singleton screen object.\n    If none exists at the moment, create a new one and return it,\n    else return the existing one.")
(NEWLINE)
(KEYWORD if)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(PUNCT "=")
(ID "_Screen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Screen")
(PUNCT "(")
(ID "TurtleScreen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_canvas")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_title")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "title")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_Screen")
(PUNCT ".")
(ID "_root")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_Screen")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(ID "_Root")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(ID "_Screen")
(PUNCT ".")
(ID "_title")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "ondestroy")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_destroy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_Screen")
(PUNCT ".")
(ID "_canvas")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "width")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "width")
(PUNCT "]")
(NEWLINE)
(ID "height")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "height")
(PUNCT "]")
(NEWLINE)
(ID "canvwidth")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "canvwidth")
(PUNCT "]")
(NEWLINE)
(ID "canvheight")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "canvheight")
(PUNCT "]")
(NEWLINE)
(ID "leftright")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "leftright")
(PUNCT "]")
(NEWLINE)
(ID "topbottom")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "topbottom")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "setupcanvas")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "canvwidth")
(PUNCT ",")
(ID "canvheight")
(PUNCT ")")
(NEWLINE)
(ID "_Screen")
(PUNCT ".")
(ID "_canvas")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "_getcanvas")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "TurtleScreen")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "_Screen")
(PUNCT ".")
(ID "_canvas")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setup")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "leftright")
(PUNCT ",")
(ID "topbottom")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "setup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "width")
(PUNCT "]")
(PUNCT ",")
(ID "height")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "height")
(PUNCT "]")
(PUNCT ",")
(ID "startx")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "leftright")
(PUNCT "]")
(PUNCT ",")
(ID "starty")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "topbottom")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Set the size and position of the main window.\n\n        Arguments:\n        width: as integer a size in pixels, as float a fraction of the screen.\n          Default is 50% of screen.\n        height: as integer the height in pixels, as float a fraction of the\n          screen. Default is 75% of screen.\n        startx: if positive, starting position in pixels from the left\n          edge of the screen, if negative from the right edge\n          Default, startx=None is to center window horizontally.\n        starty: if positive, starting position in pixels from the top\n          edge of the screen, if negative from the bottom edge\n          Default, starty=None is to center window vertically.\n\n        Examples (for a Screen instance named screen):\n        >>> screen.setup (width=200, height=200, startx=0, starty=0)\n\n        sets window to 200x200 pixels, in upper left of screen\n\n        >>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n\n        sets window to 75% of screen by 50% of screen and centers\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ",")
(LIT "set_geometry")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "sw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "win_width")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sh")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "win_height")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(KEYWORD and)
(LIT 0)
(PUNCT "<=")
(ID "width")
(PUNCT "<=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "width")
(PUNCT "=")
(ID "sw")
(PUNCT "*")
(ID "width")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "startx")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startx")
(PUNCT "=")
(PUNCT "(")
(ID "sw")
(PUNCT "-")
(ID "width")
(PUNCT ")")
(PUNCT "/")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "height")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(KEYWORD and)
(LIT 0)
(PUNCT "<=")
(ID "height")
(PUNCT "<=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "height")
(PUNCT "=")
(ID "sh")
(PUNCT "*")
(ID "height")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "starty")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "starty")
(PUNCT "=")
(PUNCT "(")
(ID "sh")
(PUNCT "-")
(ID "height")
(PUNCT ")")
(PUNCT "/")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "set_geometry")
(PUNCT "(")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "startx")
(PUNCT ",")
(ID "starty")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "title")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "titlestring")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set title of turtle-window\n\n        Argument:\n        titlestring -- a string, to appear in the titlebar of the\n                       turtle graphics window.\n\n        This is a method of Screen-class. Not available for TurtleScreen-\n        objects.\n\n        Example (for a Screen instance named screen):\n        >>> screen.title(\"Welcome to the turtle-zoo!\")\n        ")
(NEWLINE)
(KEYWORD if)
(ID "_Screen")
(PUNCT ".")
(ID "_root")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_Screen")
(PUNCT ".")
(ID "_root")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(ID "titlestring")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_Screen")
(PUNCT ".")
(ID "_title")
(PUNCT "=")
(ID "titlestring")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(NEWLINE)
(KEYWORD if)
(ID "root")
(KEYWORD is)
(ID "_Screen")
(PUNCT ".")
(ID "_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Turtle")
(PUNCT ".")
(ID "_pen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_Screen")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_Screen")
(PUNCT ".")
(ID "_canvas")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "TurtleScreen")
(PUNCT ".")
(ID "_RUNNING")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bye")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shut the turtlegraphics window.\n\n        Example (for a TurtleScreen instance named screen):\n        >>> screen.bye()\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exitonclick")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Go into mainloop until the mouse is clicked.\n\n        No arguments.\n\n        Bind bye() method to mouseclick on TurtleScreen.\n        If \"using_IDLE\" - value in configuration dictionary is False\n        (default value), enter mainloop.\n        If IDLE with -n switch (no subprocess) is used, this value should be\n        set to True in turtle.cfg. In this case IDLE's mainloop\n        is active also for the client script.\n\n        This is a method of the Screen-class and not available for\n        TurtleScreen instances.\n\n        Example (for a Screen instance named screen):\n        >>> screen.exitonclick()\n\n        ")
(NEWLINE)
(KEYWORD def)
(ID "exitGracefully")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Screen.bye() with two dummy-parameters")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bye")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "onclick")
(PUNCT "(")
(ID "exitGracefully")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_CFG")
(PUNCT "[")
(LIT "using_IDLE")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Turtle")
(PUNCT "(")
(ID "RawTurtle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "RawTurtle auto-creating (scrolled) canvas.\n\n    When a Turtle object is created or a function derived from some\n    Turtle method is called a TurtleScreen object is automatically created.\n    ")
(NEWLINE)
(ID "_pen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_screen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "shape")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "shape")
(PUNCT "]")
(PUNCT ",")
(ID "undobuffersize")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "undobuffersize")
(PUNCT "]")
(PUNCT ",")
(ID "visible")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "visible")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(PUNCT "=")
(ID "Screen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "RawTurtle")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(PUNCT ",")
(ID "shape")
(PUNCT "=")
(ID "shape")
(PUNCT ",")
(ID "undobuffersize")
(PUNCT "=")
(ID "undobuffersize")
(PUNCT ",")
(ID "visible")
(PUNCT "=")
(ID "visible")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "Pen")
(PUNCT "=")
(ID "Turtle")
(NEWLINE)
(KEYWORD def)
(ID "_getpen")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create the 'anonymous' turtle if not already present.")
(NEWLINE)
(KEYWORD if)
(ID "Turtle")
(PUNCT ".")
(ID "_pen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Turtle")
(PUNCT ".")
(ID "_pen")
(PUNCT "=")
(ID "Turtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Turtle")
(PUNCT ".")
(ID "_pen")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getscreen")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a TurtleScreen if not already present.")
(NEWLINE)
(KEYWORD if)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(PUNCT "=")
(ID "Screen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Turtle")
(PUNCT ".")
(ID "_screen")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_docstringdict")
(PUNCT "(")
(ID "filename")
(PUNCT "=")
(LIT "turtle_docstringdict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and write docstring-dictionary to file.\n\n    Optional argument:\n    filename -- a string, used as filename\n                default value is turtle_docstringdict\n\n    Has to be called explicitly, (not used by the turtle-graphics classes)\n    The docstring dictionary will be written to the Python script <filname>.py\n    It is intended to serve as a template for translation of the docstrings\n    into different languages.\n    ")
(NEWLINE)
(ID "docsdict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "methodname")
(KEYWORD in)
(ID "_tg_screen_functions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(LIT "_Screen.")
(PUNCT "+")
(ID "methodname")
(NEWLINE)
(ID "docsdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "methodname")
(KEYWORD in)
(ID "_tg_turtle_functions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(LIT "Turtle.")
(PUNCT "+")
(ID "methodname")
(NEWLINE)
(ID "docsdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(LIT "%s.py")
(PUNCT "%")
(ID "filename")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keys")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "docsdict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "_alias_list")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "docsdict = {\n\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "keys")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s :\n")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "        \"\"\"%s\n\"\"\",\n\n")
(PUNCT "%")
(ID "docsdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "keys")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s :\n")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "        \"\"\"%s\n\"\"\"\n\n")
(PUNCT "%")
(ID "docsdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "}\n")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read_docstrings")
(PUNCT "(")
(ID "lang")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read in docstrings from lang-specific docstring dictionary.\n\n    Transfer docstrings, translated to lang, from a dictionary-file\n    to the methods of classes Screen and Turtle and - in revised form -\n    to the corresponding functions.\n    ")
(NEWLINE)
(ID "modname")
(PUNCT "=")
(LIT "turtle_docstringdict_%(language)s")
(PUNCT "%")
(PUNCT "{")
(LIT "language")
(PUNCT ":")
(ID "lang")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(ID "modname")
(PUNCT ")")
(NEWLINE)
(ID "docsdict")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "docsdict")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "docsdict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eval")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "docsdict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Bad docstring-entry: %s")
(PUNCT "%")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_LANGUAGE")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "language")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_LANGUAGE")
(PUNCT "!=")
(LIT "english")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "read_docstrings")
(PUNCT "(")
(ID "_LANGUAGE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Cannot find docsdict for")
(PUNCT ",")
(ID "_LANGUAGE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Unknown Error when trying to import %s-docstring-dictionary")
(PUNCT "%")
(ID "_LANGUAGE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmethparlist")
(PUNCT "(")
(ID "ob")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get strings describing the arguments for the given object\n\n    Returns a pair of strings representing function parameter lists\n    including parenthesis.  The first string is suitable for use in\n    function definition and the second is suitable for use in function\n    call.  The \"self\" parameter is not included.\n    ")
(NEWLINE)
(ID "defText")
(PUNCT "=")
(ID "callText")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "args")
(PUNCT ",")
(ID "varargs")
(PUNCT ",")
(ID "varkw")
(PUNCT "=")
(ID "inspect")
(PUNCT ".")
(ID "getargs")
(PUNCT "(")
(ID "ob")
(PUNCT ".")
(ID "__code__")
(PUNCT ")")
(NEWLINE)
(ID "items2")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "realArgs")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(ID "ob")
(PUNCT ".")
(ID "__defaults__")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(PUNCT "[")
(LIT "=%r")
(PUNCT "%")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT ")")
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "defaults")
(PUNCT "]")
(NEWLINE)
(ID "defaults")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(PUNCT "*")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "realArgs")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "defaults")
(NEWLINE)
(ID "items1")
(PUNCT "=")
(PUNCT "[")
(ID "arg")
(PUNCT "+")
(ID "dflt")
(KEYWORD for)
(ID "arg")
(PUNCT ",")
(ID "dflt")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "realArgs")
(PUNCT ",")
(ID "defaults")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "varargs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items1")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "*")
(PUNCT "+")
(ID "varargs")
(PUNCT ")")
(NEWLINE)
(ID "items2")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "*")
(PUNCT "+")
(ID "varargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "varkw")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items1")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "**")
(PUNCT "+")
(ID "varkw")
(PUNCT ")")
(NEWLINE)
(ID "items2")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "**")
(PUNCT "+")
(ID "varkw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "defText")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "items1")
(PUNCT ")")
(NEWLINE)
(ID "defText")
(PUNCT "=")
(LIT "(%s)")
(PUNCT "%")
(ID "defText")
(NEWLINE)
(ID "callText")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "items2")
(PUNCT ")")
(NEWLINE)
(ID "callText")
(PUNCT "=")
(LIT "(%s)")
(PUNCT "%")
(ID "callText")
(NEWLINE)
(KEYWORD return)
(ID "defText")
(PUNCT ",")
(ID "callText")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_turtle_docrevise")
(PUNCT "(")
(ID "docstr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "To reduce docstrings from RawTurtle class for functions\n    ")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD if)
(ID "docstr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "turtlename")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "exampleturtle")
(PUNCT "]")
(NEWLINE)
(ID "newdocstr")
(PUNCT "=")
(ID "docstr")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "%s.")
(PUNCT "%")
(ID "turtlename")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "parexp")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT " \\(.+ %s\\):")
(PUNCT "%")
(ID "turtlename")
(PUNCT ")")
(NEWLINE)
(ID "newdocstr")
(PUNCT "=")
(ID "parexp")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(ID "newdocstr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "newdocstr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_screen_docrevise")
(PUNCT "(")
(ID "docstr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "To reduce docstrings from TurtleScreen class for functions\n    ")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD if)
(ID "docstr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "screenname")
(PUNCT "=")
(ID "_CFG")
(PUNCT "[")
(LIT "examplescreen")
(PUNCT "]")
(NEWLINE)
(ID "newdocstr")
(PUNCT "=")
(ID "docstr")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "%s.")
(PUNCT "%")
(ID "screenname")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "parexp")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT " \\(.+ %s\\):")
(PUNCT "%")
(ID "screenname")
(PUNCT ")")
(NEWLINE)
(ID "newdocstr")
(PUNCT "=")
(ID "parexp")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(ID "newdocstr")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "newdocstr")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "methodname")
(KEYWORD in)
(ID "_tg_screen_functions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pl1")
(PUNCT ",")
(ID "pl2")
(PUNCT "=")
(ID "getmethparlist")
(PUNCT "(")
(ID "eval")
(PUNCT "(")
(LIT "_Screen.")
(PUNCT "+")
(ID "methodname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pl1")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT ">>>>>>")
(PUNCT ",")
(ID "pl1")
(PUNCT ",")
(ID "pl2")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "defstr")
(PUNCT "=")
(PUNCT "(")
(LIT "def %(key)s%(pl1)s: return _getscreen().%(key)s%(pl2)s")
(PUNCT "%")
(PUNCT "{")
(LIT "key")
(PUNCT ":")
(ID "methodname")
(PUNCT ",")
(LIT "pl1")
(PUNCT ":")
(ID "pl1")
(PUNCT ",")
(LIT "pl2")
(PUNCT ":")
(ID "pl2")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(ID "defstr")
(PUNCT ")")
(NEWLINE)
(ID "eval")
(PUNCT "(")
(ID "methodname")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "_screen_docrevise")
(PUNCT "(")
(ID "eval")
(PUNCT "(")
(LIT "_Screen.")
(PUNCT "+")
(ID "methodname")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "methodname")
(KEYWORD in)
(ID "_tg_turtle_functions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pl1")
(PUNCT ",")
(ID "pl2")
(PUNCT "=")
(ID "getmethparlist")
(PUNCT "(")
(ID "eval")
(PUNCT "(")
(LIT "Turtle.")
(PUNCT "+")
(ID "methodname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pl1")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT ">>>>>>")
(PUNCT ",")
(ID "pl1")
(PUNCT ",")
(ID "pl2")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "defstr")
(PUNCT "=")
(PUNCT "(")
(LIT "def %(key)s%(pl1)s: return _getpen().%(key)s%(pl2)s")
(PUNCT "%")
(PUNCT "{")
(LIT "key")
(PUNCT ":")
(ID "methodname")
(PUNCT ",")
(LIT "pl1")
(PUNCT ":")
(ID "pl1")
(PUNCT ",")
(LIT "pl2")
(PUNCT ":")
(ID "pl2")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(ID "defstr")
(PUNCT ")")
(NEWLINE)
(ID "eval")
(PUNCT "(")
(ID "methodname")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "_turtle_docrevise")
(PUNCT "(")
(ID "eval")
(PUNCT "(")
(LIT "Turtle.")
(PUNCT "+")
(ID "methodname")
(PUNCT ")")
(PUNCT ".")
(ID "__doc__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "done")
(PUNCT "=")
(ID "mainloop")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "switchpen")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isdown")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pu")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "demo1")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Demo of old turtle.py - module")
(NEWLINE)
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tracer")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "up")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "backward")
(PUNCT "(")
(LIT 100)
(PUNCT ")")
(NEWLINE)
(ID "down")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "width")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "begin_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "_")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "forward")
(PUNCT "(")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "left")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "color")
(PUNCT "(")
(LIT "maroon")
(PUNCT ")")
(NEWLINE)
(ID "end_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "up")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "forward")
(PUNCT "(")
(LIT 30)
(PUNCT ")")
(NEWLINE)
(ID "down")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "width")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "color")
(PUNCT "(")
(LIT "black")
(PUNCT ")")
(NEWLINE)
(ID "tracer")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "up")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "forward")
(PUNCT "(")
(LIT 100)
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "forward")
(PUNCT "(")
(LIT 100)
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "(")
(LIT 180)
(PUNCT ")")
(NEWLINE)
(ID "down")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "startstart")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "start")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "color")
(PUNCT "(")
(LIT "red")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 5)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "forward")
(PUNCT "(")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "left")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "forward")
(PUNCT "(")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tracer")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "begin_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 5)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "forward")
(PUNCT "(")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "left")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "forward")
(PUNCT "(")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "right")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "end_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "demo2")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Demo of some new features.")
(NEWLINE)
(ID "speed")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "st")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pensize")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(ID "setheading")
(PUNCT "(")
(ID "towards")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "radius")
(PUNCT "=")
(ID "distance")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "/")
(LIT 2.0)
(NEWLINE)
(ID "rt")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "_")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 18)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "switchpen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "circle")
(PUNCT "(")
(ID "radius")
(PUNCT ",")
(LIT 10)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "wait a moment...")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "undobufferentries")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "undo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "lt")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "colormode")
(PUNCT "(")
(LIT 255)
(PUNCT ")")
(NEWLINE)
(ID "laenge")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(ID "pencolor")
(PUNCT "(")
(LIT "green")
(PUNCT ")")
(NEWLINE)
(ID "pensize")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(ID "lt")
(PUNCT "(")
(LIT 180)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(PUNCT "-")
(LIT 2)
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "begin_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fillcolor")
(PUNCT "(")
(LIT 255)
(PUNCT "-")
(LIT 15)
(PUNCT "*")
(ID "i")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 15)
(PUNCT "*")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "_")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 3)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fd")
(PUNCT "(")
(ID "laenge")
(PUNCT ")")
(NEWLINE)
(ID "lt")
(PUNCT "(")
(LIT 120)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "end_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "laenge")
(PUNCT "+=")
(LIT 10)
(NEWLINE)
(ID "lt")
(PUNCT "(")
(LIT 15)
(PUNCT ")")
(NEWLINE)
(ID "speed")
(PUNCT "(")
(PUNCT "(")
(ID "speed")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(LIT 12)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lt")
(PUNCT "(")
(LIT 120)
(PUNCT ")")
(NEWLINE)
(ID "pu")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fd")
(PUNCT "(")
(LIT 70)
(PUNCT ")")
(NEWLINE)
(ID "rt")
(PUNCT "(")
(LIT 30)
(PUNCT ")")
(NEWLINE)
(ID "pd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "color")
(PUNCT "(")
(LIT "red")
(PUNCT ",")
(LIT "yellow")
(PUNCT ")")
(NEWLINE)
(ID "speed")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "begin_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "_")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "circle")
(PUNCT "(")
(LIT 50)
(PUNCT ",")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "rt")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "fd")
(PUNCT "(")
(LIT 30)
(PUNCT ")")
(NEWLINE)
(ID "rt")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "end_fill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "lt")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "pu")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fd")
(PUNCT "(")
(LIT 30)
(PUNCT ")")
(NEWLINE)
(ID "pd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "shape")
(PUNCT "(")
(LIT "turtle")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT "=")
(ID "getturtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "resizemode")
(PUNCT "(")
(LIT "auto")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT "=")
(ID "Turtle")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "resizemode")
(PUNCT "(")
(LIT "auto")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "shape")
(PUNCT "(")
(LIT "turtle")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "left")
(PUNCT "(")
(LIT 90)
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "up")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "goto")
(PUNCT "(")
(LIT 280)
(PUNCT ",")
(LIT 40)
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "lt")
(PUNCT "(")
(LIT 30)
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "down")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(LIT 6)
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "color")
(PUNCT "(")
(LIT "blue")
(PUNCT ",")
(LIT "orange")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "pensize")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "speed")
(PUNCT "(")
(LIT 6)
(PUNCT ")")
(NEWLINE)
(ID "setheading")
(PUNCT "(")
(ID "towards")
(PUNCT "(")
(ID "turtle")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "count")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "tri")
(PUNCT ".")
(ID "distance")
(PUNCT "(")
(ID "turtle")
(PUNCT ")")
(PUNCT ">")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "turtle")
(PUNCT ".")
(ID "fd")
(PUNCT "(")
(LIT 3.5)
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "lt")
(PUNCT "(")
(LIT 0.6)
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "setheading")
(PUNCT "(")
(ID "tri")
(PUNCT ".")
(ID "towards")
(PUNCT "(")
(ID "turtle")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "fd")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "count")
(PUNCT "%")
(LIT 20)
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "turtle")
(PUNCT ".")
(ID "stamp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "stamp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "switchpen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "tri")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "CAUGHT! ")
(PUNCT ",")
(ID "font")
(PUNCT "=")
(PUNCT "(")
(LIT "Arial")
(PUNCT ",")
(LIT 16)
(PUNCT ",")
(LIT "bold")
(PUNCT ")")
(PUNCT ",")
(ID "align")
(PUNCT "=")
(LIT "right")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "pencolor")
(PUNCT "(")
(LIT "black")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "pencolor")
(PUNCT "(")
(LIT "red")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "baba")
(PUNCT "(")
(ID "xdummy")
(PUNCT ",")
(ID "ydummy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "clearscreen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "bye")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "time")
(PUNCT ".")
(ID "sleep")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "undobufferentries")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tri")
(PUNCT ".")
(ID "undo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "turtle")
(PUNCT ".")
(ID "undo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tri")
(PUNCT ".")
(ID "fd")
(PUNCT "(")
(LIT 50)
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "  Click me!")
(PUNCT ",")
(ID "font")
(PUNCT "=")
(PUNCT "(")
(LIT "Courier")
(PUNCT ",")
(LIT 12)
(PUNCT ",")
(LIT "bold")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "tri")
(PUNCT ".")
(ID "onclick")
(PUNCT "(")
(ID "baba")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "demo1")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "demo2")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "exitonclick")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
