(LIT "An XML Reader is the SAX 2 name for an XML parser. XML Parsers\nshould be based on this code. ")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "handler")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "_exceptions")
(KEYWORD import)
(ID "SAXNotSupportedException")
(PUNCT ",")
(ID "SAXNotRecognizedException")
(NEWLINE)
(KEYWORD class)
(ID "XMLReader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Interface for reading an XML document using callbacks.\n\n    XMLReader is the interface that an XML parser's SAX2 driver must\n    implement. This interface allows an application to set and query\n    features and properties in the parser, to register event handlers\n    for document processing, and to initiate a document parse.\n\n    All SAX interfaces are assumed to be synchronous: the parse\n    methods must not return until parsing is complete, and readers\n    must wait for an event-handler callback to return before reporting\n    the next event.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cont_handler")
(PUNCT "=")
(ID "handler")
(PUNCT ".")
(ID "ContentHandler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dtd_handler")
(PUNCT "=")
(ID "handler")
(PUNCT ".")
(ID "DTDHandler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ent_handler")
(PUNCT "=")
(ID "handler")
(PUNCT ".")
(ID "EntityResolver")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_err_handler")
(PUNCT "=")
(ID "handler")
(PUNCT ".")
(ID "ErrorHandler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse an XML document from a system identifier or an InputSource.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "This method must be implemented!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getContentHandler")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the current ContentHandler.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cont_handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setContentHandler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Registers a new object to receive document content events.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cont_handler")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getDTDHandler")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the current DTD handler.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_dtd_handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setDTDHandler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register an object to receive basic DTD-related events.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dtd_handler")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getEntityResolver")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the current EntityResolver.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_ent_handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setEntityResolver")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "resolver")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register an object to resolve external entities.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ent_handler")
(PUNCT "=")
(ID "resolver")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getErrorHandler")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the current ErrorHandler.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_err_handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setErrorHandler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register an object to receive error-message events.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_err_handler")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setLocale")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "locale")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Allow an application to set the locale for errors and warnings.\n\n        SAX parsers are not required to provide localization for errors\n        and warnings; if they cannot support the requested locale,\n        however, they must raise a SAX exception. Applications may\n        request a locale change in the middle of a parse.")
(NEWLINE)
(KEYWORD raise)
(ID "SAXNotSupportedException")
(PUNCT "(")
(LIT "Locale support not implemented")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getFeature")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Looks up and returns the state of a SAX2 feature.")
(NEWLINE)
(KEYWORD raise)
(ID "SAXNotRecognizedException")
(PUNCT "(")
(LIT "Feature '%s' not recognized")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setFeature")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the state of a SAX2 feature.")
(NEWLINE)
(KEYWORD raise)
(ID "SAXNotRecognizedException")
(PUNCT "(")
(LIT "Feature '%s' not recognized")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getProperty")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Looks up and returns the value of a SAX2 property.")
(NEWLINE)
(KEYWORD raise)
(ID "SAXNotRecognizedException")
(PUNCT "(")
(LIT "Property '%s' not recognized")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setProperty")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the value of a SAX2 property.")
(NEWLINE)
(KEYWORD raise)
(ID "SAXNotRecognizedException")
(PUNCT "(")
(LIT "Property '%s' not recognized")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalParser")
(PUNCT "(")
(ID "XMLReader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This interface adds three extra methods to the XMLReader\n    interface that allow XML parsers to support incremental\n    parsing. Support for this interface is optional, since not all\n    underlying XML parsers support this functionality.\n\n    When the parser is instantiated it is ready to begin accepting\n    data from the feed method immediately. After parsing has been\n    finished with a call to close the reset method must be called to\n    make the parser ready to accept new data, either from feed or\n    using the parse method.\n\n    Note that these methods must _not_ be called during parsing, that\n    is, after parse has been called and before it returns.\n\n    By default, the class also implements the parse method of the XMLReader\n    interface using the feed, close and reset methods of the\n    IncrementalParser interface as a convenience to SAX 2.0 driver\n    writers.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(LIT 2)
(PUNCT "**")
(LIT 16)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_bufsize")
(PUNCT "=")
(ID "bufsize")
(NEWLINE)
(ID "XMLReader")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "saxutils")
(NEWLINE)
(ID "source")
(PUNCT "=")
(ID "saxutils")
(PUNCT ".")
(ID "prepare_input_source")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prepareParser")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "source")
(PUNCT ".")
(ID "getByteStream")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "buffer")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(ID "buffer")
(PUNCT ")")
(NEWLINE)
(ID "buffer")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_bufsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "feed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This method gives the raw XML data in the data parameter to\n        the parser and makes it parse the data, emitting the\n        corresponding events. It is allowed for XML constructs to be\n        split across several calls to feed.\n\n        feed may raise SAXException.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "This method must be implemented!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prepareParser")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This method is called by the parse implementation to allow\n        the SAX 2.0 driver to prepare itself for parsing.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "prepareParser must be overridden!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This method is called when the entire XML document has been\n        passed to the parser through the feed method, to notify the\n        parser that there are no more data. This allows the parser to\n        do the final checks on the document and empty the internal\n        data buffer.\n\n        The parser will not be ready to parse another document until\n        the reset method has been called.\n\n        close may raise SAXException.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "This method must be implemented!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This method is called after close has been called to reset\n        the parser so that it is ready to parse new documents. The\n        results of calling parse or feed after close without calling\n        reset are undefined.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "This method must be implemented!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Locator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Interface for associating a SAX event with a document\n    location. A locator object will return valid results only during\n    calls to DocumentHandler methods; at any other time, the\n    results are unpredictable.")
(NEWLINE)
(KEYWORD def)
(ID "getColumnNumber")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the column number where the current event ends.")
(NEWLINE)
(KEYWORD return)
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getLineNumber")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the line number where the current event ends.")
(NEWLINE)
(KEYWORD return)
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getPublicId")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the public identifier for the current event.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getSystemId")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the system identifier for the current event.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "InputSource")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encapsulation of the information needed by the XMLReader to\n    read entities.\n\n    This class may include information about the public identifier,\n    system identifier, byte stream (possibly with character encoding\n    information) and/or the character stream of an entity.\n\n    Applications will create objects of this class for use in the\n    XMLReader.parse method and for returning from\n    EntityResolver.resolveEntity.\n\n    An InputSource belongs to the application, the XMLReader is not\n    allowed to modify InputSource objects passed to it from the\n    application, although it may make copies and modify those.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "system_id")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__system_id")
(PUNCT "=")
(ID "system_id")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__public_id")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__encoding")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__bytefile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__charfile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setPublicId")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "public_id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the public identifier of this InputSource.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__public_id")
(PUNCT "=")
(ID "public_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getPublicId")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the public identifier of this InputSource.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__public_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setSystemId")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "system_id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the system identifier of this InputSource.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__system_id")
(PUNCT "=")
(ID "system_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getSystemId")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the system identifier of this InputSource.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__system_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setEncoding")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the character encoding of this InputSource.\n\n        The encoding must be a string acceptable for an XML encoding\n        declaration (see section 4.3.3 of the XML recommendation).\n\n        The encoding attribute of the InputSource is ignored if the\n        InputSource also contains a character stream.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getEncoding")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the character encoding of this InputSource.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__encoding")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setByteStream")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "bytefile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the byte stream (a Python file-like object which does\n        not perform byte-to-character conversion) for this input\n        source.\n\n        The SAX parser will ignore this if there is also a character\n        stream specified, but it will use a byte stream in preference\n        to opening a URI connection itself.\n\n        If the application knows the character encoding of the byte\n        stream, it should set it with the setEncoding method.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__bytefile")
(PUNCT "=")
(ID "bytefile")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getByteStream")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the byte stream for this input source.\n\n        The getEncoding method will return the character encoding for\n        this byte stream, or None if unknown.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__bytefile")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setCharacterStream")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the character stream for this input source. (The stream\n        must be a Python 2.0 Unicode-wrapped file-like that performs\n        conversion to Unicode strings.)\n\n        If there is a character stream specified, the SAX parser will\n        ignore any byte stream and will not attempt to open a URI\n        connection to the system identifier.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__charfile")
(PUNCT "=")
(ID "charfile")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getCharacterStream")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the character stream for this input source.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__charfile")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AttributesImpl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Non-NS-aware implementation.\n\n        attrs should be of the form {name : value}.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT "=")
(ID "attrs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getLength")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getType")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "CDATA")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getValue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getValueByQName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getNameByQName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getQNameByName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getNames")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getQNames")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "keys")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "alternative")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "alternative")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "items")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "values")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AttributesNSImpl")
(PUNCT "(")
(ID "AttributesImpl")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs")
(PUNCT ",")
(ID "qnames")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "NS-aware implementation.\n\n        attrs should be of the form {(ns_uri, lname): value, ...}.\n        qnames of the form {(ns_uri, lname): qname, ...}.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT "=")
(ID "attrs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_qnames")
(PUNCT "=")
(ID "qnames")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getValueByQName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "nsname")
(PUNCT ",")
(ID "qname")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_qnames")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "qname")
(PUNCT "==")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT "[")
(ID "nsname")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getNameByQName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "nsname")
(PUNCT ",")
(ID "qname")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_qnames")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "qname")
(PUNCT "==")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "nsname")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getQNameByName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_qnames")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getQNames")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_qnames")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_attrs")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_qnames")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "XMLReader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "IncrementalParser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "Locator")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
