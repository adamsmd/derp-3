(LIT "Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a match object for each match.\n    compile   Compile a pattern into a RegexObject.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nSome of the functions in this module takes flags as optional parameters:\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.\n\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "sre_compile")
(NEWLINE)
(KEYWORD import)
(ID "sre_parse")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_locale")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_locale")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "match")
(PUNCT ",")
(LIT "fullmatch")
(PUNCT ",")
(LIT "search")
(PUNCT ",")
(LIT "sub")
(PUNCT ",")
(LIT "subn")
(PUNCT ",")
(LIT "split")
(PUNCT ",")
(LIT "findall")
(PUNCT ",")
(LIT "compile")
(PUNCT ",")
(LIT "purge")
(PUNCT ",")
(LIT "template")
(PUNCT ",")
(LIT "escape")
(PUNCT ",")
(LIT "A")
(PUNCT ",")
(LIT "I")
(PUNCT ",")
(LIT "L")
(PUNCT ",")
(LIT "M")
(PUNCT ",")
(LIT "S")
(PUNCT ",")
(LIT "X")
(PUNCT ",")
(LIT "U")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ",")
(LIT "IGNORECASE")
(PUNCT ",")
(LIT "LOCALE")
(PUNCT ",")
(LIT "MULTILINE")
(PUNCT ",")
(LIT "DOTALL")
(PUNCT ",")
(LIT "VERBOSE")
(PUNCT ",")
(LIT "UNICODE")
(PUNCT ",")
(LIT "error")
(PUNCT "]")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "2.2.1")
(NEWLINE)
(ID "A")
(PUNCT "=")
(ID "ASCII")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_ASCII")
(NEWLINE)
(ID "I")
(PUNCT "=")
(ID "IGNORECASE")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_IGNORECASE")
(NEWLINE)
(ID "L")
(PUNCT "=")
(ID "LOCALE")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_LOCALE")
(NEWLINE)
(ID "U")
(PUNCT "=")
(ID "UNICODE")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_UNICODE")
(NEWLINE)
(ID "M")
(PUNCT "=")
(ID "MULTILINE")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_MULTILINE")
(NEWLINE)
(ID "S")
(PUNCT "=")
(ID "DOTALL")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_DOTALL")
(NEWLINE)
(ID "X")
(PUNCT "=")
(ID "VERBOSE")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_VERBOSE")
(NEWLINE)
(ID "T")
(PUNCT "=")
(ID "TEMPLATE")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_TEMPLATE")
(NEWLINE)
(ID "DEBUG")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "SRE_FLAG_DEBUG")
(NEWLINE)
(ID "error")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "error")
(NEWLINE)
(KEYWORD def)
(ID "match")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fullmatch")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to apply the pattern to all of the string, returning\n    a match object, or None if no match was found.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "fullmatch")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "search")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sub")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "repl")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "count")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the match object and must return\n    a replacement string to be used.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "repl")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "subn")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "repl")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "count")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the match object and must\n    return a replacement string to be used.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "subn")
(PUNCT "(")
(ID "repl")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "split")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "maxsplit")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "maxsplit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "findall")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "findall")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "hexversion")
(PUNCT ">=")
(LIT 33685504)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "finditer")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "finditer")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an iterator over all non-overlapping matches in the\n        string.  For each match, the iterator returns a match object.\n\n        Empty matches are included in the result.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ".")
(ID "finditer")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile a regular expression pattern, returning a pattern object.")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "purge")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the regular expression caches")
(NEWLINE)
(ID "_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_cache_repl")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "template")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile a template pattern, returning a pattern object")
(NEWLINE)
(KEYWORD return)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT "|")
(ID "T")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_alphanum_str")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(LIT "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890")
(PUNCT ")")
(NEWLINE)
(ID "_alphanum_bytes")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(LIT #"_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "escape")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Escape all the characters in pattern except ASCII letters, numbers and '_'.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alphanum")
(PUNCT "=")
(ID "_alphanum_str")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "c")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "c")
(KEYWORD not)
(KEYWORD in)
(ID "alphanum")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "\u0000")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT "\\000")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(LIT "\\")
(PUNCT "+")
(ID "c")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alphanum")
(PUNCT "=")
(ID "_alphanum_bytes")
(NEWLINE)
(ID "s")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "esc")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(LIT #"\\")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "pattern")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "c")
(KEYWORD in)
(ID "alphanum")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(LIT #"\\000")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "esc")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "bytes")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_cache_repl")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_pattern_type")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "sre_compile")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_MAXCACHE")
(PUNCT "=")
(LIT 512)
(NEWLINE)
(KEYWORD def)
(ID "_compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bypass_cache")
(PUNCT "=")
(ID "flags")
(PUNCT "&")
(ID "DEBUG")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "bypass_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT ",")
(ID "loc")
(PUNCT "=")
(ID "_cache")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "loc")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "loc")
(PUNCT "==")
(ID "_locale")
(PUNCT ".")
(ID "setlocale")
(PUNCT "(")
(ID "_locale")
(PUNCT ".")
(ID "LC_CTYPE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "_pattern_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Cannot process flags argument with a compiled pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pattern")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sre_compile")
(PUNCT ".")
(ID "isstring")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "first argument must be string or compiled pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "bypass_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "_cache")
(PUNCT ")")
(PUNCT ">=")
(ID "_MAXCACHE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "p")
(PUNCT ".")
(ID "flags")
(PUNCT "&")
(ID "LOCALE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_locale")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "p")
(NEWLINE)
(DEDENT)
(ID "loc")
(PUNCT "=")
(ID "_locale")
(PUNCT ".")
(ID "setlocale")
(PUNCT "(")
(ID "_locale")
(PUNCT ".")
(ID "LC_CTYPE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "_cache")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "flags")
(PUNCT "]")
(PUNCT "=")
(ID "p")
(PUNCT ",")
(ID "loc")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_compile_repl")
(PUNCT "(")
(ID "repl")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_cache_repl")
(PUNCT "[")
(ID "repl")
(PUNCT ",")
(ID "pattern")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "sre_parse")
(PUNCT ".")
(ID "parse_template")
(PUNCT "(")
(ID "repl")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "_cache_repl")
(PUNCT ")")
(PUNCT ">=")
(ID "_MAXCACHE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_cache_repl")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_cache_repl")
(PUNCT "[")
(ID "repl")
(PUNCT ",")
(ID "pattern")
(PUNCT "]")
(PUNCT "=")
(ID "p")
(NEWLINE)
(KEYWORD return)
(ID "p")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_expand")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "match")
(PUNCT ",")
(ID "template")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "template")
(PUNCT "=")
(ID "sre_parse")
(PUNCT ".")
(ID "parse_template")
(PUNCT "(")
(ID "template")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sre_parse")
(PUNCT ".")
(ID "expand_template")
(PUNCT "(")
(ID "template")
(PUNCT ",")
(ID "match")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_subx")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "template")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "template")
(PUNCT "=")
(ID "_compile_repl")
(PUNCT "(")
(ID "template")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "template")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "template")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "template")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "filter")
(PUNCT "(")
(ID "match")
(PUNCT ",")
(ID "template")
(PUNCT "=")
(ID "template")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sre_parse")
(PUNCT ".")
(ID "expand_template")
(PUNCT "(")
(ID "template")
(PUNCT ",")
(ID "match")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "filter")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "copyreg")
(NEWLINE)
(KEYWORD def)
(ID "_pickle")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_compile")
(PUNCT ",")
(PUNCT "(")
(ID "p")
(PUNCT ".")
(ID "pattern")
(PUNCT ",")
(ID "p")
(PUNCT ".")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "copyreg")
(PUNCT ".")
(ID "pickle")
(PUNCT "(")
(ID "_pattern_type")
(PUNCT ",")
(ID "_pickle")
(PUNCT ",")
(ID "_compile")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Scanner")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lexicon")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "sre_constants")
(KEYWORD import)
(ID "BRANCH")
(PUNCT ",")
(ID "SUBPATTERN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lexicon")
(PUNCT "=")
(ID "lexicon")
(NEWLINE)
(ID "p")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "sre_parse")
(PUNCT ".")
(ID "Pattern")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT ".")
(ID "flags")
(PUNCT "=")
(ID "flags")
(NEWLINE)
(KEYWORD for)
(ID "phrase")
(PUNCT ",")
(ID "action")
(KEYWORD in)
(ID "lexicon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sre_parse")
(PUNCT ".")
(ID "SubPattern")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(ID "SUBPATTERN")
(PUNCT ",")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(ID "sre_parse")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "phrase")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT ".")
(ID "groups")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "sre_parse")
(PUNCT ".")
(ID "SubPattern")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(ID "BRANCH")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "p")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "scanner")
(PUNCT "=")
(ID "sre_compile")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "append")
(PUNCT "=")
(ID "result")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "match")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "scanner")
(PUNCT ".")
(ID "scanner")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "match")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "j")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(ID "j")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "action")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "lexicon")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "lastindex")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "action")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "match")
(PUNCT "=")
(ID "m")
(NEWLINE)
(ID "action")
(PUNCT "=")
(ID "action")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "action")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "append")
(PUNCT "(")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "j")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(PUNCT ",")
(ID "string")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
