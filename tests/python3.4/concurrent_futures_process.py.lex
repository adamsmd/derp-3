(LIT "Implements ProcessPoolExecutor.\n\nThe follow diagram and text describe the data-flow through the system:\n\n|======================= In-process =====================|== Out-of-process ==|\n\n+----------+     +----------+       +--------+     +-----------+    +---------+\n|          |  => | Work Ids |    => |        |  => | Call Q    | => |         |\n|          |     +----------+       |        |     +-----------+    |         |\n|          |     | ...      |       |        |     | ...       |    |         |\n|          |     | 6        |       |        |     | 5, call() |    |         |\n|          |     | 7        |       |        |     | ...       |    |         |\n| Process  |     | ...      |       | Local  |     +-----------+    | Process |\n|  Pool    |     +----------+       | Worker |                      |  #1..n  |\n| Executor |                        | Thread |                      |         |\n|          |     +----------- +     |        |     +-----------+    |         |\n|          | <=> | Work Items | <=> |        | <=  | Result Q  | <= |         |\n|          |     +------------+     |        |     +-----------+    |         |\n|          |     | 6: call()  |     |        |     | ...       |    |         |\n|          |     |    future  |     |        |     | 4, result |    |         |\n|          |     | ...        |     |        |     | 3, except |    |         |\n+----------+     +------------+     +--------+     +-----------+    +---------+\n\nExecutor.submit() called:\n- creates a uniquely numbered _WorkItem and adds it to the \"Work Items\" dict\n- adds the id of the _WorkItem to the \"Work Ids\" queue\n\nLocal worker thread:\n- reads work ids from the \"Work Ids\" queue and looks up the corresponding\n  WorkItem from the \"Work Items\" dict: if the work item has been cancelled then\n  it is simply removed from the dict, otherwise it is repackaged as a\n  _CallItem and put in the \"Call Q\". New _CallItems are put in the \"Call Q\"\n  until \"Call Q\" is full. NOTE: the size of the \"Call Q\" is kept small because\n  calls placed in the \"Call Q\" can no longer be cancelled with Future.cancel().\n- reads _ResultItems from \"Result Q\", updates the future stored in the\n  \"Work Items\" dict and deletes the dict entry\n\nProcess #1..n:\n- reads _CallItems from \"Call Q\", executes the calls, and puts the resulting\n  _ResultItems in \"Result Q\"\n")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Brian Quinlan (brian@sweetapp.com)")
(NEWLINE)
(KEYWORD import)
(ID "atexit")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "concurrent")
(PUNCT ".")
(ID "futures")
(KEYWORD import)
(ID "_base")
(NEWLINE)
(KEYWORD import)
(ID "queue")
(NEWLINE)
(KEYWORD from)
(ID "queue")
(KEYWORD import)
(ID "Full")
(NEWLINE)
(KEYWORD import)
(ID "multiprocessing")
(NEWLINE)
(KEYWORD from)
(ID "multiprocessing")
(KEYWORD import)
(ID "SimpleQueue")
(NEWLINE)
(KEYWORD from)
(ID "multiprocessing")
(PUNCT ".")
(ID "connection")
(KEYWORD import)
(ID "wait")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "weakref")
(NEWLINE)
(ID "_threads_queues")
(PUNCT "=")
(ID "weakref")
(PUNCT ".")
(ID "WeakKeyDictionary")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_shutdown")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "_python_exit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_shutdown")
(NEWLINE)
(ID "_shutdown")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "_threads_queues")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "t")
(PUNCT ",")
(ID "q")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "t")
(PUNCT ",")
(ID "q")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "EXTRA_QUEUED_CALLS")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD class)
(ID "_WorkItem")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "future")
(PUNCT ",")
(ID "fn")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "future")
(PUNCT "=")
(ID "future")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fn")
(PUNCT "=")
(ID "fn")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "kwargs")
(PUNCT "=")
(ID "kwargs")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ResultItem")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "work_id")
(PUNCT ",")
(ID "exception")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "result")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "work_id")
(PUNCT "=")
(ID "work_id")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exception")
(PUNCT "=")
(ID "exception")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "result")
(PUNCT "=")
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_CallItem")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "work_id")
(PUNCT ",")
(ID "fn")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "work_id")
(PUNCT "=")
(ID "work_id")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fn")
(PUNCT "=")
(ID "fn")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "kwargs")
(PUNCT "=")
(ID "kwargs")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_process_worker")
(PUNCT "(")
(ID "call_queue")
(PUNCT ",")
(ID "result_queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Evaluates calls from call_queue and places the results in result_queue.\n\n    This worker is run in a separate process.\n\n    Args:\n        call_queue: A multiprocessing.Queue of _CallItems that will be read and\n            evaluated by the worker.\n        result_queue: A multiprocessing.Queue of _ResultItems that will written\n            to by the worker.\n        shutdown: A multiprocessing.Event that will be set as a signal to the\n            worker that it should exit when call_queue is empty.\n    ")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "call_item")
(PUNCT "=")
(ID "call_queue")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "block")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "call_item")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_queue")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "call_item")
(PUNCT ".")
(ID "fn")
(PUNCT "(")
(PUNCT "*")
(ID "call_item")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "call_item")
(PUNCT ".")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "BaseException")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_queue")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "_ResultItem")
(PUNCT "(")
(ID "call_item")
(PUNCT ".")
(ID "work_id")
(PUNCT ",")
(ID "exception")
(PUNCT "=")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_queue")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "_ResultItem")
(PUNCT "(")
(ID "call_item")
(PUNCT ".")
(ID "work_id")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "r")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_add_call_item_to_queue")
(PUNCT "(")
(ID "pending_work_items")
(PUNCT ",")
(ID "work_ids")
(PUNCT ",")
(ID "call_queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fills call_queue with _WorkItems from pending_work_items.\n\n    This function never blocks.\n\n    Args:\n        pending_work_items: A dict mapping work ids to _WorkItems e.g.\n            {5: <_WorkItem...>, 6: <_WorkItem...>, ...}\n        work_ids: A queue.Queue of work ids e.g. Queue([5, 6, ...]). Work ids\n            are consumed and the corresponding _WorkItems from\n            pending_work_items are transformed into _CallItems and put in\n            call_queue.\n        call_queue: A multiprocessing.Queue that will be filled with _CallItems\n            derived from _WorkItems.\n    ")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "call_queue")
(PUNCT ".")
(ID "full")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "work_id")
(PUNCT "=")
(ID "work_ids")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "block")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "queue")
(PUNCT ".")
(ID "Empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "work_item")
(PUNCT "=")
(ID "pending_work_items")
(PUNCT "[")
(ID "work_id")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "work_item")
(PUNCT ".")
(ID "future")
(PUNCT ".")
(ID "set_running_or_notify_cancel")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "call_queue")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "_CallItem")
(PUNCT "(")
(ID "work_id")
(PUNCT ",")
(ID "work_item")
(PUNCT ".")
(ID "fn")
(PUNCT ",")
(ID "work_item")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "work_item")
(PUNCT ".")
(ID "kwargs")
(PUNCT ")")
(PUNCT ",")
(ID "block")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "pending_work_items")
(PUNCT "[")
(ID "work_id")
(PUNCT "]")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_queue_management_worker")
(PUNCT "(")
(ID "executor_reference")
(PUNCT ",")
(ID "processes")
(PUNCT ",")
(ID "pending_work_items")
(PUNCT ",")
(ID "work_ids_queue")
(PUNCT ",")
(ID "call_queue")
(PUNCT ",")
(ID "result_queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Manages the communication between this process and the worker processes.\n\n    This function is run in a local thread.\n\n    Args:\n        executor_reference: A weakref.ref to the ProcessPoolExecutor that owns\n            this thread. Used to determine if the ProcessPoolExecutor has been\n            garbage collected and that this function can exit.\n        process: A list of the multiprocessing.Process instances used as\n            workers.\n        pending_work_items: A dict mapping work ids to _WorkItems e.g.\n            {5: <_WorkItem...>, 6: <_WorkItem...>, ...}\n        work_ids_queue: A queue.Queue of work ids e.g. Queue([5, 6, ...]).\n        call_queue: A multiprocessing.Queue that will be filled with _CallItems\n            derived from _WorkItems for processing by the process workers.\n        result_queue: A multiprocessing.Queue of _ResultItems generated by the\n            process workers.\n    ")
(NEWLINE)
(ID "executor")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "shutting_down")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_shutdown")
(KEYWORD or)
(ID "executor")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "executor")
(PUNCT ".")
(ID "_shutdown_thread")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shutdown_worker")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nb_children_alive")
(PUNCT "=")
(ID "sum")
(PUNCT "(")
(ID "p")
(PUNCT ".")
(ID "is_alive")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "processes")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "nb_children_alive")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "call_queue")
(PUNCT ".")
(ID "put_nowait")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "call_queue")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "processes")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "reader")
(PUNCT "=")
(ID "result_queue")
(PUNCT ".")
(ID "_reader")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_add_call_item_to_queue")
(PUNCT "(")
(ID "pending_work_items")
(PUNCT ",")
(ID "work_ids_queue")
(PUNCT ",")
(ID "call_queue")
(PUNCT ")")
(NEWLINE)
(ID "sentinels")
(PUNCT "=")
(PUNCT "[")
(ID "p")
(PUNCT ".")
(ID "sentinel")
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "processes")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD assert)
(ID "sentinels")
(NEWLINE)
(ID "ready")
(PUNCT "=")
(ID "wait")
(PUNCT "(")
(PUNCT "[")
(ID "reader")
(PUNCT "]")
(PUNCT "+")
(ID "sentinels")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reader")
(KEYWORD in)
(ID "ready")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result_item")
(PUNCT "=")
(ID "reader")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executor")
(PUNCT "=")
(ID "executor_reference")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "executor")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executor")
(PUNCT ".")
(ID "_broken")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "executor")
(PUNCT ".")
(ID "_shutdown_thread")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "executor")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "work_id")
(PUNCT ",")
(ID "work_item")
(KEYWORD in)
(ID "pending_work_items")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "work_item")
(PUNCT ".")
(ID "future")
(PUNCT ".")
(ID "set_exception")
(PUNCT "(")
(ID "BrokenProcessPool")
(PUNCT "(")
(LIT "A process in the process pool was ")
(LIT "terminated abruptly while the future was ")
(LIT "running or pending.")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "work_item")
(NEWLINE)
(DEDENT)
(ID "pending_work_items")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "processes")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT ".")
(ID "terminate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "shutdown_worker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "result_item")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "shutting_down")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "processes")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "result_item")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "processes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutdown_worker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "result_item")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "work_item")
(PUNCT "=")
(ID "pending_work_items")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "result_item")
(PUNCT ".")
(ID "work_id")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "work_item")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "result_item")
(PUNCT ".")
(ID "exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "work_item")
(PUNCT ".")
(ID "future")
(PUNCT ".")
(ID "set_exception")
(PUNCT "(")
(ID "result_item")
(PUNCT ".")
(ID "exception")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "work_item")
(PUNCT ".")
(ID "future")
(PUNCT ".")
(ID "set_result")
(PUNCT "(")
(ID "result_item")
(PUNCT ".")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "work_item")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "executor")
(PUNCT "=")
(ID "executor_reference")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "shutting_down")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "pending_work_items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutdown_worker")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Full")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "executor")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_system_limits_checked")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "_system_limited")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_check_system_limits")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_system_limits_checked")
(PUNCT ",")
(ID "_system_limited")
(NEWLINE)
(KEYWORD if)
(ID "_system_limits_checked")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_system_limited")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(ID "_system_limited")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_system_limits_checked")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nsems_max")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "sysconf")
(PUNCT "(")
(LIT "SC_SEM_NSEMS_MAX")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nsems_max")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nsems_max")
(PUNCT ">=")
(LIT 256)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "_system_limited")
(PUNCT "=")
(LIT "system provides too few semaphores (%d available, 256 necessary)")
(PUNCT "%")
(ID "nsems_max")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(ID "_system_limited")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BrokenProcessPool")
(PUNCT "(")
(ID "RuntimeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised when a process in a ProcessPoolExecutor terminated abruptly\n    while a future was in the running state.\n    ")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ProcessPoolExecutor")
(PUNCT "(")
(ID "_base")
(PUNCT ".")
(ID "Executor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "max_workers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initializes a new ProcessPoolExecutor instance.\n\n        Args:\n            max_workers: The maximum number of processes that can be used to\n                execute the given calls. If None or not given then as many\n                worker processes will be created as the machine has processors.\n        ")
(NEWLINE)
(ID "_check_system_limits")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "max_workers")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_max_workers")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "cpu_count")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_max_workers")
(PUNCT "=")
(ID "max_workers")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_call_queue")
(PUNCT "=")
(ID "multiprocessing")
(PUNCT ".")
(ID "Queue")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_max_workers")
(PUNCT "+")
(ID "EXTRA_QUEUED_CALLS")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_call_queue")
(PUNCT ".")
(ID "_ignore_epipe")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT "=")
(ID "SimpleQueue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_work_ids")
(PUNCT "=")
(ID "queue")
(PUNCT ".")
(ID "Queue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_processes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shutdown_thread")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shutdown_lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_broken")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_queue_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pending_work_items")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_start_queue_management_thread")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "weakref_cb")
(PUNCT "(")
(ID "_")
(PUNCT ",")
(ID "q")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "q")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_adjust_process_count")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "_queue_management_worker")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "weakref")
(PUNCT ".")
(ID "ref")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "weakref_cb")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_processes")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_pending_work_items")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_work_ids")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_call_queue")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT ".")
(ID "daemon")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_threads_queues")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_adjust_process_count")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "_")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_processes")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_max_workers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(ID "multiprocessing")
(PUNCT ".")
(ID "Process")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "_process_worker")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_call_queue")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_processes")
(PUNCT "[")
(ID "p")
(PUNCT ".")
(ID "pid")
(PUNCT "]")
(PUNCT "=")
(ID "p")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "submit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fn")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_shutdown_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_broken")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BrokenProcessPool")
(PUNCT "(")
(LIT "A child process terminated ")
(LIT "abruptly, the process pool is not usable anymore")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_shutdown_thread")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "cannot schedule new futures after shutdown")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "_base")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "w")
(PUNCT "=")
(ID "_WorkItem")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "fn")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pending_work_items")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_queue_count")
(PUNCT "]")
(PUNCT "=")
(ID "w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_work_ids")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_queue_count")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_queue_count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_start_queue_management_thread")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "submit")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "_base")
(PUNCT ".")
(ID "Executor")
(PUNCT ".")
(ID "submit")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(KEYWORD def)
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "wait")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_shutdown_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_shutdown_thread")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "wait")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_queue_management_thread")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_call_queue")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_result_queue")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_processes")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "shutdown")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "_base")
(PUNCT ".")
(ID "Executor")
(PUNCT ".")
(ID "shutdown")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(DEDENT)
(ID "atexit")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "_python_exit")
(PUNCT ")")
(NEWLINE)
(ENDMARKER)
