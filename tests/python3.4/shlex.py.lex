(LIT "A lexical analyzer class for simple shell-like syntaxes.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "deque")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "StringIO")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "shlex")
(PUNCT ",")
(LIT "split")
(PUNCT ",")
(LIT "quote")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "shlex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A lexical analyzer class for simple shell-like syntaxes.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "instream")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "infile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "posix")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "instream")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "instream")
(PUNCT "=")
(ID "StringIO")
(PUNCT "(")
(ID "instream")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "instream")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT "=")
(ID "instream")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT "=")
(ID "infile")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "posix")
(PUNCT "=")
(ID "posix")
(NEWLINE)
(KEYWORD if)
(ID "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "commenters")
(PUNCT "=")
(LIT "#")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wordchars")
(PUNCT "=")
(PUNCT "(")
(LIT "abcdfeghijklmnopqrstuvwxyz")
(LIT "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "wordchars")
(PUNCT "+=")
(PUNCT "(")
(LIT "ßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ")
(LIT "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "whitespace")
(PUNCT "=")
(LIT " \t\r\n")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "whitespace_split")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "quotes")
(PUNCT "=")
(LIT "'\"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT "=")
(LIT "\\")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "escapedquotes")
(PUNCT "=")
(LIT "\"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pushback")
(PUNCT "=")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filestack")
(PUNCT "=")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "source")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: reading from %s, line %d")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "push_token")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tok")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Push a token onto the stack popped by the get_token method")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: pushing token ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "tok")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pushback")
(PUNCT ".")
(ID "appendleft")
(PUNCT "(")
(ID "tok")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "push_source")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newstream")
(PUNCT ",")
(ID "newfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Push an input source onto the lexer's input source stack.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "newstream")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newstream")
(PUNCT "=")
(ID "StringIO")
(PUNCT "(")
(ID "newstream")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "filestack")
(PUNCT ".")
(ID "appendleft")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT "=")
(ID "newfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT "=")
(ID "newstream")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "newfile")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: pushing to file %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: pushing to stream %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pop_source")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pop the input source stack.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filestack")
(PUNCT ".")
(ID "popleft")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: popping to %s, line %d")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_token")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a token from the input stream (or from stack if it's nonempty)")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pushback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tok")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pushback")
(PUNCT ".")
(ID "popleft")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: popping token ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "tok")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tok")
(NEWLINE)
(DEDENT)
(ID "raw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read_token")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "source")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "raw")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "source")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sourcehook")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "read_token")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "newfile")
(PUNCT ",")
(ID "newstream")
(PUNCT ")")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "push_source")
(PUNCT "(")
(ID "newstream")
(PUNCT ",")
(ID "newfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "raw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_token")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(ID "raw")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "filestack")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "eof")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pop_source")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "raw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_token")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "raw")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: token=")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "raw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: token=EOF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "raw")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_token")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quoted")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "escapedstate")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nextchar")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "nextchar")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: in state")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT ")")
(PUNCT ",")
(LIT "I see character:")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "nextchar")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "==")
(LIT " ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "nextchar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "whitespace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: I see whitespace in whitespace state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "token")
(KEYWORD or)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "quoted")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "commenters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escapedstate")
(PUNCT "=")
(LIT "a")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "wordchars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "a")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "quotes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "whitespace_split")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "a")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "token")
(KEYWORD or)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "quoted")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "quotes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quoted")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "nextchar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: I see EOF in quotes state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "No closing quotation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nextchar")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "+")
(ID "nextchar")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT "a")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "escape")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "escapedquotes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escapedstate")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "state")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "+")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "nextchar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: I see EOF in escape state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "No escaped character")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "escapedstate")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "quotes")
(KEYWORD and)
(ID "nextchar")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "state")
(KEYWORD and)
(ID "nextchar")
(PUNCT "!=")
(ID "escapedstate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "state")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "+")
(ID "nextchar")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "escapedstate")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "==")
(LIT "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "nextchar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "whitespace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: I see whitespace in word state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "token")
(KEYWORD or)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "quoted")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "commenters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "instream")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "token")
(KEYWORD or)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "quoted")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "quotes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "escape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escapedstate")
(PUNCT "=")
(LIT "a")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "wordchars")
(KEYWORD or)
(ID "nextchar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "quotes")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "whitespace_split")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "+")
(ID "nextchar")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pushback")
(PUNCT ".")
(ID "appendleft")
(PUNCT "(")
(ID "nextchar")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: I see punctuation in word state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "token")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "token")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "posix")
(KEYWORD and)
(KEYWORD not)
(ID "quoted")
(KEYWORD and)
(ID "result")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: raw token=")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "shlex: raw token=EOF")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sourcehook")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hook called on a filename to be sourced.")
(NEWLINE)
(KEYWORD if)
(ID "newfile")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newfile")
(PUNCT "=")
(ID "newfile")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isabs")
(PUNCT "(")
(ID "newfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "infile")
(PUNCT ")")
(PUNCT ",")
(ID "newfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "newfile")
(PUNCT ",")
(ID "open")
(PUNCT "(")
(ID "newfile")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "error_leader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "infile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "lineno")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Emit a C-compiler-like, Emacs-friendly error-message leader.")
(NEWLINE)
(KEYWORD if)
(ID "infile")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "infile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "infile")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "lineno")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "lineno")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "\"%s\", line %d: ")
(PUNCT "%")
(PUNCT "(")
(ID "infile")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_token")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "token")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StopIteration")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "token")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "split")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "comments")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "posix")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lex")
(PUNCT "=")
(ID "shlex")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "posix")
(PUNCT "=")
(ID "posix")
(PUNCT ")")
(NEWLINE)
(ID "lex")
(PUNCT ".")
(ID "whitespace_split")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "comments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lex")
(PUNCT ".")
(ID "commenters")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "lex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_find_unsafe")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[^\\w@%+=:,./-]")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(PUNCT ".")
(ID "search")
(NEWLINE)
(KEYWORD def)
(ID "quote")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a shell-escaped version of the string *s*.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "''")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_find_unsafe")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "'")
(PUNCT "+")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "'\"'\"'")
(PUNCT ")")
(PUNCT "+")
(LIT "'")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_print_tokens")
(PUNCT "(")
(ID "lexer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tt")
(PUNCT "=")
(ID "lexer")
(PUNCT ".")
(ID "get_token")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "tt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "Token: ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "tt")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_print_tokens")
(PUNCT "(")
(ID "shlex")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_print_tokens")
(PUNCT "(")
(ID "shlex")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "fn")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
