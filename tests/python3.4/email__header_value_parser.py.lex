(LIT "Header value parser implementing various email-related RFC parsing rules.\n\nThe parsing methods defined in this module implement various email related\nparsing rules.  Principal among them is RFC 5322, which is the followon\nto RFC 2822 and primarily a clarification of the former.  It also implements\nRFC 2047 encoded word decoding.\n\nRFC 5322 goes to considerable trouble to maintain backward compatibility with\nRFC 822 in the parse phase, while cleaning up the structure on the generation\nphase.  This parser supports correct RFC 5322 generation by tagging white space\nas folding white space only when folding is allowed in the non-obsolete rule\nsets.  Actually, the parser is even more generous when accepting input than RFC\n5322 mandates, following the spirit of Postel's Law, which RFC 5322 encourages.\nWhere possible deviations from the standard are annotated on the 'defects'\nattribute of tokens that deviate.\n\nThe general structure of the parser follows RFC 5322, and uses its terminology\nwhere there is a direct correspondence.  Where the implementation requires a\nsomewhat different structure than that used by the formal grammar, new terms\nthat mimic the closest existing terms are used.  Thus, it really helps to have\na copy of RFC 5322 handy when studying this code.\n\nInput to the parser is a string that has already been unfolded according to\nRFC 5322 rules.  According to the RFC this unfolding is the very first step, and\nthis parser leaves the unfolding step to a higher level message parser, which\nwill have already detected the line breaks that need unfolding while\ndetermining the beginning and end of each header.\n\nThe output of the parser is a TokenList object, which is a list subclass.  A\nTokenList is a recursive data structure.  The terminal nodes of the structure\nare Terminal objects, which are subclasses of str.  These do not correspond\ndirectly to terminal objects in the formal grammar, but are instead more\npractical higher level combinations of true terminals.\n\nAll TokenList and Terminal objects have a 'value' attribute, which produces the\nsemantically meaningful value of that part of the parse subtree.  The value of\nall whitespace tokens (no matter how many sub-tokens they may contain) is a\nsingle space, as per the RFC rules.  This includes 'CFWS', which is herein\nincluded in the general class of whitespace tokens.  There is one exception to\nthe rule that whitespace tokens are collapsed into single spaces in values: in\nthe value of a 'bare-quoted-string' (a quoted-string with no leading or\ntrailing whitespace), any whitespace that appeared between the quotation marks\nis preserved in the returned value.  Note that in all Terminal strings quoted\npairs are turned into their unquoted values.\n\nAll TokenList and Terminal objects also have a string value, which attempts to\nbe a \"canonical\" representation of the RFC-compliant form of the substring that\nproduced the parsed subtree, including minimal use of quoted pair quoting.\nWhitespace runs are not collapsed.\n\nComment tokens also have a 'content' attribute providing the string found\nbetween the parens (including any nested comments) with whitespace preserved.\n\nAll TokenList and Terminal objects have a 'defects' attribute which is a\npossibly empty list all of the defects found while creating the token.  Defects\nmay appear on any token in the tree, and a composite list of all defects in the\nsubtree is available through the 'all_defects' attribute of any node.  (For\nTerminal notes x.defects == x.all_defects.)\n\nEach object in a parse tree is called a 'token', and each has a 'token_type'\nattribute that gives the name from the RFC 5322 grammar that it represents.\nNot all RFC 5322 nodes are produced, and there is one non-RFC 5322 node that\nmay be produced: 'ptext'.  A 'ptext' is a string of printable ascii characters.\nIt is returned in place of lists of (ctext/quoted-pair) and\n(qtext/quoted-pair).\n\nXXX: provide complete list of token types.\n")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(NEWLINE)
(KEYWORD from)
(ID "string")
(KEYWORD import)
(ID "hexdigits")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "OrderedDict")
(NEWLINE)
(KEYWORD from)
(ID "email")
(KEYWORD import)
(ID "_encoded_words")
(KEYWORD as)
(ID "_ew")
(NEWLINE)
(KEYWORD from)
(ID "email")
(KEYWORD import)
(ID "errors")
(NEWLINE)
(KEYWORD from)
(ID "email")
(KEYWORD import)
(ID "utils")
(NEWLINE)
(ID "WSP")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(LIT " \t")
(PUNCT ")")
(NEWLINE)
(ID "CFWS_LEADER")
(PUNCT "=")
(ID "WSP")
(PUNCT "|")
(ID "set")
(PUNCT "(")
(LIT "(")
(PUNCT ")")
(NEWLINE)
(ID "SPECIALS")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(LIT "()<>@,:;.\\\"[]")
(PUNCT ")")
(NEWLINE)
(ID "ATOM_ENDS")
(PUNCT "=")
(ID "SPECIALS")
(PUNCT "|")
(ID "WSP")
(NEWLINE)
(ID "DOT_ATOM_ENDS")
(PUNCT "=")
(ID "ATOM_ENDS")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "PHRASE_ENDS")
(PUNCT "=")
(ID "SPECIALS")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(LIT ".\"(")
(PUNCT ")")
(NEWLINE)
(ID "TSPECIALS")
(PUNCT "=")
(PUNCT "(")
(ID "SPECIALS")
(PUNCT "|")
(ID "set")
(PUNCT "(")
(LIT "/?=")
(PUNCT ")")
(PUNCT ")")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "TOKEN_ENDS")
(PUNCT "=")
(ID "TSPECIALS")
(PUNCT "|")
(ID "WSP")
(NEWLINE)
(ID "ASPECIALS")
(PUNCT "=")
(ID "TSPECIALS")
(PUNCT "|")
(ID "set")
(PUNCT "(")
(LIT "*'%")
(PUNCT ")")
(NEWLINE)
(ID "ATTRIBUTE_ENDS")
(PUNCT "=")
(ID "ASPECIALS")
(PUNCT "|")
(ID "WSP")
(NEWLINE)
(ID "EXTENDED_ATTRIBUTE_ENDS")
(PUNCT "=")
(ID "ATTRIBUTE_ENDS")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(LIT "%")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "quote_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "\"")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\\\"")
(PUNCT ")")
(PUNCT "+")
(LIT "\"")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_Folded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxlen")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "maxlen")
(PUNCT "=")
(ID "maxlen")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "policy")
(PUNCT "=")
(ID "policy")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "firstline")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "done")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "newline")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "done")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "done")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "policy")
(PUNCT ".")
(ID "linesep")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "done")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stoken")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append_if_fits")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "stoken")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stoken")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stoken")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stickyspace_len")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "+")
(ID "stickyspace_len")
(PUNCT "+")
(ID "l")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "+=")
(ID "stickyspace_len")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "+=")
(ID "l")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "firstline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "has_fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ws")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "pop_leading_fws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ws")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "+=")
(ID "str")
(PUNCT "(")
(ID "ws")
(PUNCT ")")
(NEWLINE)
(ID "stickyspace_len")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "ws")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ".")
(ID "_fold")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stickyspace_len")
(KEYWORD and)
(ID "l")
(PUNCT "+")
(LIT 1)
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "margin")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "maxlen")
(PUNCT "-")
(ID "l")
(NEWLINE)
(KEYWORD if)
(LIT 0)
(PUNCT "<")
(ID "margin")
(PUNCT "<")
(ID "stickyspace_len")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "trim")
(PUNCT "=")
(ID "stickyspace_len")
(PUNCT "-")
(ID "margin")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "[")
(PUNCT ":")
(ID "trim")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "[")
(ID "trim")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "stickyspace_len")
(PUNCT "=")
(ID "trim")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(ID "l")
(PUNCT "+")
(ID "stickyspace_len")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "firstline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "firstline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "firstline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "+")
(ID "l")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "+=")
(ID "l")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "l")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stoken")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(ID "l")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TokenList")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{}({})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__repr__")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "value")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_defects")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sum")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "all_defects")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parts")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__class__")
(NEWLINE)
(ID "this")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "startswith_fws")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "this")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "this")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "this")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD else)
(ID "klass")
(PUNCT "(")
(ID "this")
(PUNCT ")")
(NEWLINE)
(ID "this")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "end_ws")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "pop_trailing_ws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "this")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "end_ws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "klass")
(PUNCT "(")
(ID "this")
(PUNCT ")")
(NEWLINE)
(ID "this")
(PUNCT "=")
(PUNCT "[")
(ID "end_ws")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "this")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "this")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "this")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD else)
(ID "klass")
(PUNCT "(")
(ID "this")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "startswith_fws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "startswith_fws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop_leading_fws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "pop_leading_fws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop_trailing_ws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "pop_trailing_ws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "has_fws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "part")
(PUNCT ".")
(ID "has_fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_leading_comment")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "has_leading_comment")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "comments")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comments")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "comments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "comments")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "maxlen")
(PUNCT "=")
(ID "policy")
(PUNCT ".")
(ID "max_line_length")
(KEYWORD or)
(ID "float")
(PUNCT "(")
(LIT "+inf")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT "=")
(ID "_Folded")
(PUNCT "(")
(ID "maxlen")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fold")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "finalize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "as_encoded_word")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "ws")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pop_leading_fws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ws")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "trailer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(KEYWORD if)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "fws")
(KEYWORD else)
(LIT "")
(NEWLINE)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_ew")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "trailer")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cte_encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ".")
(ID "cte_encode")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_fold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "folded")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tstr")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(ID "tlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "tstr")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "errors")
(PUNCT ".")
(ID "UndecodableBytesDefect")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "part")
(PUNCT ".")
(ID "all_defects")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(LIT "unknown-8bit")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(ID "tstr")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "cte_encode")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "folded")
(PUNCT ".")
(ID "policy")
(PUNCT ")")
(NEWLINE)
(ID "tlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "tstr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "folded")
(PUNCT ".")
(ID "append_if_fits")
(PUNCT "(")
(ID "part")
(PUNCT ",")
(ID "tstr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "ws")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "pop_leading_fws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ws")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "folded")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "folded")
(PUNCT ".")
(ID "append_if_fits")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "part")
(PUNCT ".")
(ID "has_fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT ".")
(ID "_fold")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "folded")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tstr")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pprint")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pp")
(PUNCT "(")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ppstr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_pp")
(PUNCT "(")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_pp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "{}{}/{}(")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "indent")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "token_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "token")
(PUNCT ",")
(LIT "_pp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "    !! invalid element in token ")
(LIT "list: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "token")
(PUNCT ".")
(ID "_pp")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "    ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT "=")
(LIT " Defects: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(LIT "{}){}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "indent")
(PUNCT ",")
(ID "extra")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "WhiteSpaceTokenList")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT " ")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "comments")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "x")
(PUNCT ".")
(ID "content")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "comment")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UnstructuredTokenList")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "unstructured")
(NEWLINE)
(KEYWORD def)
(ID "_fold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "folded")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tstr")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(ID "is_ew")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "errors")
(PUNCT ".")
(ID "UndecodableBytesDefect")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "part")
(PUNCT ".")
(ID "all_defects")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(LIT "unknown-8bit")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "last_ew")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "get_unstructured")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "tstr")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "as_encoded_word")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(ID "oldlastlen")
(PUNCT "=")
(ID "sum")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT "[")
(PUNCT ":")
(ID "last_ew")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "schunk")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(ID "lchunk")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "schunk")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "oldlastlen")
(PUNCT "+")
(ID "lchunk")
(PUNCT "<=")
(ID "folded")
(PUNCT ".")
(ID "maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "schunk")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(ID "oldlastlen")
(PUNCT "+")
(ID "lchunk")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "tstr")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "as_encoded_word")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(ID "is_ew")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "folded")
(PUNCT ".")
(ID "append_if_fits")
(PUNCT "(")
(ID "part")
(PUNCT ",")
(ID "tstr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "is_ew")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "is_ew")
(KEYWORD or)
(ID "last_ew")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT ".")
(ID "_fold_as_ew")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "ws")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "pop_leading_fws")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ws")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "folded")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "ws")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "folded")
(PUNCT ".")
(ID "append_if_fits")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "part")
(PUNCT ".")
(ID "has_fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT ".")
(ID "fold")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "folded")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tstr")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "newline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "cte_encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spart")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spart")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "spart")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "last_ew")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ".")
(ID "cte_encode")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "last_ew")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tl")
(PUNCT "=")
(ID "get_unstructured")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "spart")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tl")
(PUNCT ".")
(ID "as_encoded_word")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Phrase")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "phrase")
(NEWLINE)
(KEYWORD def)
(ID "_fold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "folded")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tstr")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(ID "tlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "tstr")
(PUNCT ")")
(NEWLINE)
(ID "has_ew")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "errors")
(PUNCT ".")
(ID "UndecodableBytesDefect")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "part")
(PUNCT ".")
(ID "all_defects")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(LIT "unknown-8bit")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "last_ew")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "part")
(PUNCT ".")
(ID "has_leading_comment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "part")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD and)
(ID "part")
(PUNCT ".")
(ID "comments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remainder")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remainder")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "token")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "UnstructuredTokenList")
(PUNCT "(")
(ID "token")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "chunk")
(PUNCT "=")
(ID "get_unstructured")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "tstr")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "as_encoded_word")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(ID "schunk")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(ID "lchunk")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "schunk")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "last_ew")
(PUNCT "+")
(ID "lchunk")
(PUNCT "<=")
(ID "folded")
(PUNCT ".")
(ID "maxlen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "schunk")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(ID "sum")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "tstr")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "as_encoded_word")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(ID "tlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "tstr")
(PUNCT ")")
(NEWLINE)
(ID "has_ew")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "folded")
(PUNCT ".")
(ID "append_if_fits")
(PUNCT "(")
(ID "part")
(PUNCT ",")
(ID "tstr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "has_ew")
(KEYWORD and)
(KEYWORD not)
(ID "part")
(PUNCT ".")
(ID "comments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "part")
(PUNCT ".")
(ID "comments")
(KEYWORD or)
(ID "part")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "part")
(PUNCT ".")
(ID "_fold")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "cte_encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "is_ew")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spart")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spart")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "spart")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_ew")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "last_ew")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "part")
(PUNCT ".")
(ID "comments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ".")
(ID "cte_encode")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "part")
(PUNCT ".")
(ID "has_leading_comment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "part")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD and)
(ID "part")
(PUNCT ".")
(ID "comments")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remainder")
(PUNCT "=")
(ID "part")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remainder")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "token")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "UnstructuredTokenList")
(PUNCT "(")
(ID "token")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "tl")
(PUNCT "=")
(ID "get_unstructured")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "spart")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "[")
(ID "last_ew")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "tl")
(PUNCT ".")
(ID "as_encoded_word")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "part")
(PUNCT ".")
(ID "comments")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "is_ew")
(KEYWORD and)
(ID "part")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "quoted-string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_ew")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Word")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "word")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CFWSList")
(PUNCT "(")
(ID "WhiteSpaceTokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "cfws")
(NEWLINE)
(KEYWORD def)
(ID "has_leading_comment")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "comments")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Atom")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "atom")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Token")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "token")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "EncodedWord")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "encoded-word")
(NEWLINE)
(ID "cte")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "charset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "lang")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "encoded")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "cte")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cte")
(NEWLINE)
(DEDENT)
(ID "_ew")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "QuotedString")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "quoted-string")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "content")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "quoted_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "stripped_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BareQuotedString")
(PUNCT "(")
(ID "QuotedString")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "bare-quoted-string")
(NEWLINE)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "quote_string")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Comment")
(PUNCT "(")
(ID "WhiteSpaceTokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "comment")
(NEWLINE)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sum")
(PUNCT "(")
(PUNCT "[")
(PUNCT "[")
(LIT "(")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "quote")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(LIT ")")
(PUNCT "]")
(PUNCT ",")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quote")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "comment")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT "\\(")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ")")
(PUNCT ",")
(LIT "\\)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "content")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "comments")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "content")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AddressList")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "address-list")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "addresses")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "address")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sum")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "mailboxes")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "address")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sum")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "all_mailboxes")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "address")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Address")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "address")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "display_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "group")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "display_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "mailbox")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "invalid-mailbox")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "mailboxes")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "mailbox")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "invalid-mailbox")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "all_mailboxes")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MailboxList")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "mailbox-list")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "mailbox")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(KEYWORD in)
(PUNCT "(")
(LIT "mailbox")
(PUNCT ",")
(LIT "invalid-mailbox")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "GroupList")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "group-list")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(KEYWORD or)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "mailbox-list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "mailboxes")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(KEYWORD or)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "mailbox-list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "all_mailboxes")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Group")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "group")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "group-list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "mailboxes")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_mailboxes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "group-list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "all_mailboxes")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "display_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "display_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NameAddr")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "name-addr")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "display_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "display_name")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "local_part")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "local_part")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "route")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "route")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "addr_spec")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "addr_spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AngleAddr")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "angle-addr")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "local_part")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "addr-spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "local_part")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "addr-spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "route")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "obs-route")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "domains")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "addr_spec")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "addr-spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "addr_spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<>")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ObsRoute")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "obs-route")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domains")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "x")
(PUNCT ".")
(ID "domain")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "domain")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Mailbox")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "mailbox")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "display_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "name-addr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "display_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "local_part")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "local_part")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "route")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "name-addr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "route")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "addr_spec")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "addr_spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "InvalidMailbox")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "invalid-mailbox")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "display_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "local_part")
(PUNCT "=")
(ID "domain")
(PUNCT "=")
(ID "route")
(PUNCT "=")
(ID "addr_spec")
(PUNCT "=")
(ID "display_name")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Domain")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "domain")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DotAtom")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "dot-atom")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "DotAtomText")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "dot-atom-text")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "AddrSpec")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "addr-spec")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "local_part")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "local_part")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "<")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "<")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(PUNCT "+")
(ID "self")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "addr_spec")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nameset")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "local_part")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "nameset")
(PUNCT ")")
(PUNCT ">")
(ID "len")
(PUNCT "(")
(ID "nameset")
(PUNCT "-")
(ID "DOT_ATOM_ENDS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lp")
(PUNCT "=")
(ID "quote_string")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "local_part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "local_part")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "domain")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "lp")
(PUNCT "+")
(LIT "@")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "domain")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "lp")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ObsLocalPart")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "obs-local-part")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "DisplayName")
(PUNCT "(")
(ID "Phrase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "display-name")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "display_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "TokenList")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "res")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "res")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "TokenList")
(PUNCT "(")
(ID "res")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "res")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "res")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "TokenList")
(PUNCT "(")
(ID "res")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "res")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "quote")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pre")
(PUNCT "=")
(ID "post")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD or)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pre")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD or)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "post")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pre")
(PUNCT "+")
(ID "quote_string")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "display_name")
(PUNCT ")")
(PUNCT "+")
(ID "post")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LocalPart")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "local-part")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "quoted_value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "local_part")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(ID "DOT")
(PUNCT "]")
(NEWLINE)
(ID "last")
(PUNCT "=")
(ID "DOT")
(NEWLINE)
(ID "last_is_tl")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "tok")
(KEYWORD in)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "DOT")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tok")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "last_is_tl")
(KEYWORD and)
(ID "tok")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot")
(KEYWORD and)
(ID "last")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "TokenList")
(PUNCT "(")
(ID "last")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "is_tl")
(PUNCT "=")
(ID "isinstance")
(PUNCT "(")
(ID "tok")
(PUNCT ",")
(ID "TokenList")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "is_tl")
(KEYWORD and)
(ID "last")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot")
(KEYWORD and)
(ID "tok")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "TokenList")
(PUNCT "(")
(ID "tok")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tok")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "last")
(PUNCT "=")
(ID "res")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "last_is_tl")
(PUNCT "=")
(ID "is_tl")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "TokenList")
(PUNCT "(")
(ID "res")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "res")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DomainLiteral")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "domain-literal")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "domain")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "ip")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "ptext")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MIMEVersion")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "mime-version")
(NEWLINE)
(ID "major")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "minor")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Parameter")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "parameter")
(NEWLINE)
(ID "sectioned")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "extended")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "charset")
(PUNCT "=")
(LIT "us-ascii")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "section_number")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "number")
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sectioned")
(KEYWORD else)
(LIT 0)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "param_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "stripped_value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "token")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "token")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "stripped_value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "InvalidParameter")
(PUNCT "(")
(ID "Parameter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "invalid-parameter")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Attribute")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "attribute")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "stripped_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "attrtext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Section")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "section")
(NEWLINE)
(ID "number")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Value")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "value")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "stripped_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT "quoted-string")
(PUNCT ",")
(LIT "attribute")
(PUNCT ",")
(LIT "extended-attribute")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "stripped_value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MimeParameters")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "mime-parameters")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "params")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "parameter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "token")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "attribute")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "token")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "params")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "params")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "section_number")
(PUNCT ",")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "parts")
(KEYWORD in)
(ID "params")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(ID "value_parts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "charset")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "charset")
(NEWLINE)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(PUNCT "(")
(ID "section_number")
(PUNCT ",")
(ID "param")
(PUNCT ")")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "section_number")
(PUNCT "!=")
(ID "i")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "inconsistent multipart parameter numbering")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "param")
(PUNCT ".")
(ID "param_value")
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "extended")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote_to_bytes")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "LookupError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "utils")
(PUNCT ".")
(ID "_has_surrogates")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "UndecodableBytesDefect")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "value_parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "value_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "name")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "params")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "{}={}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "quote_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "params")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "params")
(PUNCT "=")
(LIT "; ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT " ")
(PUNCT "+")
(ID "params")
(KEYWORD if)
(ID "params")
(KEYWORD else)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ParameterizedHeaderValue")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "params")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "mime-parameters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "token")
(PUNCT ".")
(ID "params")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parts")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(KEYWORD and)
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "mime-parameters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "TokenList")
(PUNCT "(")
(ID "self")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "self")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "TokenList")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "parts")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ContentType")
(PUNCT "(")
(ID "ParameterizedHeaderValue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "content-type")
(NEWLINE)
(ID "maintype")
(PUNCT "=")
(LIT "text")
(NEWLINE)
(ID "subtype")
(PUNCT "=")
(LIT "plain")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ContentDisposition")
(PUNCT "(")
(ID "ParameterizedHeaderValue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "content-disposition")
(NEWLINE)
(ID "content_disposition")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ContentTransferEncoding")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "content-transfer-encoding")
(NEWLINE)
(ID "cte")
(PUNCT "=")
(LIT "7bit")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HeaderLabel")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "header-label")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Header")
(PUNCT "(")
(ID "TokenList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(LIT "header")
(NEWLINE)
(KEYWORD def)
(ID "_fold")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "folded")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "folded")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "lastlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "folded")
(PUNCT ".")
(ID "current")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "folded")
(PUNCT ".")
(ID "stickyspace")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(KEYWORD if)
(ID "self")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD else)
(LIT "")
(NEWLINE)
(ID "rest")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Malformed Header token list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rest")
(PUNCT ".")
(ID "_fold")
(PUNCT "(")
(ID "folded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Terminal")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "token_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "token_type")
(PUNCT "=")
(ID "token_type")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{}({})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__repr__")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "all_defects")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_pp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "{}{}/{}({}){}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "indent")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "token_type")
(PUNCT ",")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__repr__")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "")
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "defects")
(KEYWORD else)
(LIT " {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "defects")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cte_encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "us-ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_ew")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pop_trailing_ws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop_leading_fws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "comments")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_leading_comment")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getnewargs__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "token_type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "WhiteSpaceTerminal")
(PUNCT "(")
(ID "Terminal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "startswith_fws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "has_fws")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ValueTerminal")
(PUNCT "(")
(ID "Terminal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "startswith_fws")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "has_fws")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "as_encoded_word")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_ew")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "EWWhiteSpaceTerminal")
(PUNCT "(")
(ID "WhiteSpaceTerminal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "encoded")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(ID "has_fws")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "DOT")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT "dot")
(PUNCT ")")
(NEWLINE)
(ID "ListSeparator")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ",")
(PUNCT ",")
(LIT "list-separator")
(PUNCT ")")
(NEWLINE)
(ID "RouteComponentMarker")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "@")
(PUNCT ",")
(LIT "route-component-marker")
(PUNCT ")")
(NEWLINE)
(ID "_wsp_splitter")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([{}]+)")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "WSP")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(NEWLINE)
(ID "_non_atom_end_matcher")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[^{}]+")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "ATOM_ENDS")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "]")
(PUNCT ",")
(LIT "\\]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(NEWLINE)
(ID "_non_printable_finder")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[\\x00-\\x20\\x7F]")
(PUNCT ")")
(PUNCT ".")
(ID "findall")
(NEWLINE)
(ID "_non_token_end_matcher")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[^{}]+")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "TOKEN_ENDS")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "]")
(PUNCT ",")
(LIT "\\]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(NEWLINE)
(ID "_non_attribute_end_matcher")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[^{}]+")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "ATTRIBUTE_ENDS")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "]")
(PUNCT ",")
(LIT "\\]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(NEWLINE)
(ID "_non_extended_attribute_end_matcher")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[^{}]+")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "EXTENDED_ATTRIBUTE_ENDS")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "\\\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "]")
(PUNCT ",")
(LIT "\\]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(NEWLINE)
(KEYWORD def)
(ID "_validate_xtext")
(PUNCT "(")
(ID "xtext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If input token contains ASCII non-printables, register a defect.")
(NEWLINE)
(ID "non_printables")
(PUNCT "=")
(ID "_non_printable_finder")
(PUNCT "(")
(ID "xtext")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "non_printables")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "xtext")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "NonPrintableDefect")
(PUNCT "(")
(ID "non_printables")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "utils")
(PUNCT ".")
(ID "_has_surrogates")
(PUNCT "(")
(ID "xtext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "xtext")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "UndecodableBytesDefect")
(PUNCT "(")
(LIT "Non-ASCII characters found in header token")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_ptext_to_endchars")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "endchars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scan printables/quoted-pairs until endchars and return unquoted ptext.\n\n    This function turns a run of qcontent, ccontent-without-comments, or\n    dtext-with-quoted-printables into a single string by unquoting any\n    quoted printables.  It returns the string, the remaining value, and\n    a flag that is True iff there were any quoted printables decoded.\n\n    ")
(NEWLINE)
(ID "fragment")
(PUNCT ",")
(PUNCT "*")
(ID "remainder")
(PUNCT "=")
(ID "_wsp_splitter")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "vchars")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "escape")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "had_qp")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "pos")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "fragment")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fragment")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "escape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escape")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "had_qp")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escape")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "escape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escape")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "fragment")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(ID "endchars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "vchars")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "fragment")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "pos")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "vchars")
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "fragment")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(PUNCT "+")
(ID "remainder")
(PUNCT ")")
(PUNCT ",")
(ID "had_qp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "FWS = 1*WSP\n\n    This isn't the RFC definition.  We're using fws to represent tokens where\n    folding can be done, but when we are parsing the *un*folding has already\n    been done so we don't need to watch out for CRLF.\n\n    ")
(NEWLINE)
(ID "newvalue")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fws")
(PUNCT "=")
(ID "WhiteSpaceTerminal")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "newvalue")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(LIT "fws")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "fws")
(PUNCT ",")
(ID "newvalue")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_encoded_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n\n    ")
(NEWLINE)
(ID "ew")
(PUNCT "=")
(ID "EncodedWord")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "=?")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected encoded word but found {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tok")
(PUNCT ",")
(PUNCT "*")
(ID "remainder")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "?=")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tok")
(PUNCT "==")
(ID "value")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected encoded word but found {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "remstr")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "remstr")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(KEYWORD and)
(ID "remstr")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "hexdigits")
(KEYWORD and)
(ID "remstr")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(ID "hexdigits")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT ",")
(PUNCT "*")
(ID "remainder")
(PUNCT "=")
(ID "remstr")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "?=")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "tok")
(PUNCT "=")
(ID "tok")
(PUNCT "+")
(LIT "?=")
(PUNCT "+")
(ID "rest")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "tok")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ew")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "whitespace inside encoded word")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ew")
(PUNCT ".")
(ID "cte")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "value")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "lang")
(PUNCT ",")
(ID "defects")
(PUNCT "=")
(ID "_ew")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "=?")
(PUNCT "+")
(ID "tok")
(PUNCT "+")
(LIT "?=")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "encoded word format invalid: '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "ew")
(PUNCT ".")
(ID "cte")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ew")
(PUNCT ".")
(ID "charset")
(PUNCT "=")
(ID "charset")
(NEWLINE)
(ID "ew")
(PUNCT ".")
(ID "lang")
(PUNCT "=")
(ID "lang")
(NEWLINE)
(ID "ew")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "defects")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "text")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "text")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "text")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(ID "ew")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "chars")
(PUNCT ",")
(PUNCT "*")
(ID "remainder")
(PUNCT "=")
(ID "_wsp_splitter")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "vtext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "chars")
(PUNCT ",")
(LIT "vtext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "vtext")
(PUNCT ")")
(NEWLINE)
(ID "ew")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "vtext")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ew")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_unstructured")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "unstructured = (*([FWS] vchar) *WSP) / obs-unstruct\n       obs-unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS)\n       obs-utext = %d0 / obs-NO-WS-CTL / LF / CR\n\n       obs-NO-WS-CTL is control characters except WSP/CR/LF.\n\n    So, basically, we have printable runs, plus control characters or nulls in\n    the obsolete syntax, separated by whitespace.  Since RFC 2047 uses the\n    obsolete syntax in its specification, but requires whitespace on either\n    side of the encoded words, I can see no reason to need to separate the\n    non-printable-non-whitespace from the printable runs if they occur, so we\n    parse this into xtext tokens separated by WSP tokens.\n\n    Because an 'unstructured' value must by definition constitute the entire\n    value, this 'get' routine does not return a remaining value, only the\n    parsed TokenList.\n\n    ")
(NEWLINE)
(ID "unstructured")
(PUNCT "=")
(ID "UnstructuredTokenList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "unstructured")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "=?")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_encoded_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "have_ws")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "unstructured")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "unstructured")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "fws")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unstructured")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "missing whitespace before encoded word")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "have_ws")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "have_ws")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "unstructured")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "unstructured")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "encoded-word")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unstructured")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "EWWhiteSpaceTerminal")
(PUNCT "(")
(ID "unstructured")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "fws")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "unstructured")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "tok")
(PUNCT ",")
(PUNCT "*")
(ID "remainder")
(PUNCT "=")
(ID "_wsp_splitter")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "vtext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "tok")
(PUNCT ",")
(LIT "vtext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "vtext")
(PUNCT ")")
(NEWLINE)
(ID "unstructured")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "vtext")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "unstructured")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_qp_ctext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "ctext = <printable ascii except \\ ( )>\n\n    This is not the RFC ctext, since we are handling nested comments in comment\n    and unquoting quoted-pairs here.  We allow anything except the '()'\n    characters, but if we find any ASCII other than the RFC defined printable\n    ASCII an NonPrintableDefect is added to the token's defects list.  Since\n    quoted pairs are converted to their unquoted values, what is returned is\n    a 'ptext' token.  In this case it is a WhiteSpaceTerminal, so it's value\n    is ' '.\n\n    ")
(NEWLINE)
(ID "ptext")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "_get_ptext_to_endchars")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "()")
(PUNCT ")")
(NEWLINE)
(ID "ptext")
(PUNCT "=")
(ID "WhiteSpaceTerminal")
(PUNCT "(")
(ID "ptext")
(PUNCT ",")
(LIT "ptext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "ptext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ptext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_qcontent")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "qcontent = qtext / quoted-pair\n\n    We allow anything except the DQUOTE character, but if we find any ASCII\n    other than the RFC defined printable ASCII an NonPrintableDefect is\n    added to the token's defects list.  Any quoted pairs are converted to their\n    unquoted values, so what is returned is a 'ptext' token.  In this case it\n    is a ValueTerminal.\n\n    ")
(NEWLINE)
(ID "ptext")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "_get_ptext_to_endchars")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "\"")
(PUNCT ")")
(NEWLINE)
(ID "ptext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "ptext")
(PUNCT ",")
(LIT "ptext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "ptext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ptext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_atext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "atext = <matches _atext_matcher>\n\n    We allow any non-ATOM_ENDS in atext, but add an InvalidATextDefect to\n    the token's defects list if we find non-atext characters.\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_non_atom_end_matcher")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected atext but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "atext")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "atext")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "atext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "atext")
(PUNCT ",")
(LIT "atext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "atext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "atext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_bare_quoted_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "bare-quoted-string = DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n\n    A quoted-string without the leading or trailing white space.  Its\n    value is the text between the quote marks, with whitespace\n    preserved and quoted pairs decoded.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected '\"' but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bare_quoted_string")
(PUNCT "=")
(ID "BareQuotedString")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "=?")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_encoded_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "bare_quoted_string")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "encoded word inside quoted string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_qcontent")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_qcontent")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bare_quoted_string")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bare_quoted_string")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "end of header inside quoted string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "bare_quoted_string")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "bare_quoted_string")
(PUNCT ",")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_comment")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "comment = \"(\" *([FWS] ccontent) [FWS] \")\"\n       ccontent = ctext / quoted-pair / comment\n\n    We handle nested comments here, and quoted-pair in our qp-ctext routine.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected '(' but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "comment")
(PUNCT "=")
(ID "Comment")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "(")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_comment")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_qp_ctext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "comment")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comment")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "end of header inside comment")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "comment")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "comment")
(PUNCT ",")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "CFWS = (1*([FWS] comment) [FWS]) / FWS\n\n    ")
(NEWLINE)
(ID "cfws")
(PUNCT "=")
(ID "CFWSList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_comment")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cfws")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cfws")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_quoted_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "quoted-string = [CFWS] <bare-quoted-string> [CFWS]\n\n    'bare-quoted-string' is an intermediate class defined by this\n    parser and not by the RFC grammar.  It is the quoted string\n    without any attached CFWS.\n    ")
(NEWLINE)
(ID "quoted_string")
(PUNCT "=")
(ID "QuotedString")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "quoted_string")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_bare_quoted_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "quoted_string")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "quoted_string")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "quoted_string")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_atom")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "atom = [CFWS] 1*atext [CFWS]\n\n    An atom could be an rfc2047 encoded word.\n    ")
(NEWLINE)
(ID "atom")
(PUNCT "=")
(ID "Atom")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "atom")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "ATOM_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected atom but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "=?")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_encoded_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_atext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_atext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "atom")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "atom")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "atom")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_dot_atom_text")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " dot-text = 1*atext *(\".\" 1*atext)\n\n    ")
(NEWLINE)
(ID "dot_atom_text")
(PUNCT "=")
(ID "DotAtomText")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "ATOM_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected atom at a start of ")
(LIT "dot-atom-text but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "ATOM_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_atext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "dot_atom_text")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dot_atom_text")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "DOT")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "dot_atom_text")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD is)
(ID "DOT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected atom at end of dot-atom-text ")
(LIT "but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT ".")
(PUNCT "+")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dot_atom_text")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_dot_atom")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " dot-atom = [CFWS] dot-atom-text [CFWS]\n\n    Any place we can have a dot atom, we could instead have an rfc2047 encoded\n    word.\n    ")
(NEWLINE)
(ID "dot_atom")
(PUNCT "=")
(ID "DotAtom")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "dot_atom")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "=?")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_encoded_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_dot_atom_text")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_dot_atom_text")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dot_atom")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "dot_atom")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dot_atom")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "word = atom / quoted-string\n\n    Either atom or quoted-string may start with CFWS.  We have to peel off this\n    CFWS first to determine which type of word to parse.  Afterward we splice\n    the leading CFWS, if any, into the parsed sub-token.\n\n    If neither an atom or a quoted-string is found before the next special, a\n    HeaderParseError is raised.\n\n    The token returned is either an Atom or a QuotedString, as appropriate.\n    This means the 'word' level of the formal grammar is not represented in the\n    parse tree; this is because having that extra layer when manipulating the\n    parse tree is more confusing than it is helpful.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_quoted_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "SPECIALS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected 'atom' or 'quoted-string' ")
(LIT "but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_atom")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "token")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_phrase")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " phrase = 1*word / obs-phrase\n        obs-phrase = word *(word / \".\" / CFWS)\n\n    This means a phrase can be a sequence of words, periods, and CFWS in any\n    order as long as it starts with at least one word.  If anything other than\n    words is detected, an ObsoleteHeaderDefect is added to the token's defect\n    list.  We also accept a phrase that starts with CFWS followed by a dot;\n    this is registered as an InvalidHeaderDefect, since it is not supported by\n    even the obsolete grammar.\n\n    ")
(NEWLINE)
(ID "phrase")
(PUNCT "=")
(ID "Phrase")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "phrase")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "phrase")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "phrase does not start with word")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "phrase")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "DOT")
(PUNCT ")")
(NEWLINE)
(ID "phrase")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "period in 'phrase'")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "phrase")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "comment found without atom")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "phrase")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "phrase")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_local_part")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " local-part = dot-atom / quoted-string / obs-local-part\n\n    ")
(NEWLINE)
(ID "local_part")
(PUNCT "=")
(ID "LocalPart")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected local-part but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_dot_atom")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "\\")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT "=")
(ID "TokenList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "local_part")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\\")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_obs_local_part")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "local_part")
(PUNCT ")")
(PUNCT "+")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "obs_local_part")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "invalid-obs-local-part")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "local-part is not dot-atom, quoted-string, or obs-local-part")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "local-part is not a dot-atom (contains CFWS)")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "local_part")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "obs_local_part")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "local_part")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "NonASCIILocalPartDefect")
(PUNCT "(")
(LIT "local-part contains non-ASCII characters)")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "local_part")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_obs_local_part")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " obs-local-part = word *(\".\" word)\n    ")
(NEWLINE)
(ID "obs_local_part")
(PUNCT "=")
(ID "ObsLocalPart")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "last_non_ws_was_dot")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\\")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "last_non_ws_was_dot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid repeated '.'")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "DOT")
(PUNCT ")")
(NEWLINE)
(ID "last_non_ws_was_dot")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "misplaced-special")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "obs_local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "'\\' character outside of quoted-string/ccontent")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "last_non_ws_was_dot")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obs_local_part")
(KEYWORD and)
(ID "obs_local_part")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "!=")
(LIT "dot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "missing '.' between words")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_word")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "last_non_ws_was_dot")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "obs_local_part")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot")
(KEYWORD or)
(ID "obs_local_part")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD and)
(ID "obs_local_part")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Invalid leading '.' in local part")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "obs_local_part")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot")
(KEYWORD or)
(ID "obs_local_part")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "cfws")
(KEYWORD and)
(ID "obs_local_part")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Invalid trailing '.' in local part")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obs_local_part")
(PUNCT ".")
(ID "defects")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_local_part")
(PUNCT ".")
(ID "token_type")
(PUNCT "=")
(LIT "invalid-obs-local-part")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "obs_local_part")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_dtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " dtext = <printable ascii except \\ [ ]> / obs-dtext\n        obs-dtext = obs-NO-WS-CTL / quoted-pair\n\n    We allow anything except the excluded characters, but if we find any\n    ASCII other than the RFC defined printable ASCII an NonPrintableDefect is\n    added to the token's defects list.  Quoted pairs are converted to their\n    unquoted values, so what is returned is a ptext token, in this case a\n    ValueTerminal.  If there were quoted-printables, an ObsoleteHeaderDefect is\n    added to the returned token's defect list.\n\n    ")
(NEWLINE)
(ID "ptext")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "had_qp")
(PUNCT "=")
(ID "_get_ptext_to_endchars")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "[]")
(PUNCT ")")
(NEWLINE)
(ID "ptext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "ptext")
(PUNCT ",")
(LIT "ptext")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "had_qp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ptext")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "quoted printable found in domain-literal")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_validate_xtext")
(PUNCT "(")
(ID "ptext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ptext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_for_early_dl_end")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "domain_literal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "end of input inside domain-literal")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "]")
(PUNCT ",")
(LIT "domain-literal-end")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_domain_literal")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " domain-literal = [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n\n    ")
(NEWLINE)
(ID "domain_literal")
(PUNCT "=")
(ID "DomainLiteral")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected domain-literal")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "[")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected '[' at start of domain-literal ")
(LIT "but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "_check_for_early_dl_end")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "domain_literal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "domain_literal")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "[")
(PUNCT ",")
(LIT "domain-literal-start")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_dtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_check_for_early_dl_end")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "domain_literal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "domain_literal")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_check_for_early_dl_end")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "domain_literal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "domain_literal")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected ']' at end of domain-literal ")
(LIT "but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "]")
(PUNCT ",")
(LIT "domain-literal-end")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "domain_literal")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "domain_literal")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_domain")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " domain = dot-atom / domain-literal / obs-domain\n        obs-domain = atom *(\".\" atom))\n\n    ")
(NEWLINE)
(ID "domain")
(PUNCT "=")
(ID "Domain")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected domain but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "[")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_domain_literal")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "domain")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "domain")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_dot_atom")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_atom")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "domain")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "domain is not a dot-atom (contains CFWS)")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "domain")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "dot-atom")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "domain")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "DOT")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_atom")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "domain")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "domain")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_addr_spec")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " addr-spec = local-part \"@\" domain\n\n    ")
(NEWLINE)
(ID "addr_spec")
(PUNCT "=")
(ID "AddrSpec")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_local_part")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "addr_spec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "@")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr_spec")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "add-spec local part with no domain")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addr_spec")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "addr_spec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "@")
(PUNCT ",")
(LIT "address-at-symbol")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_domain")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "addr_spec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addr_spec")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_obs_route")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " obs-route = obs-domain-list \":\"\n        obs-domain-list = *(CFWS / \",\") \"@\" domain *(\",\" [CFWS] [\"@\" domain])\n\n        Returns an obs-route token with the appropriate sub-tokens (that is,\n        there is no obs-domain-list in the parse tree).\n    ")
(NEWLINE)
(ID "obs_route")
(PUNCT "=")
(ID "ObsRoute")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ListSeparator")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "@")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected obs-route domain but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "RouteComponentMarker")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_domain")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ListSeparator")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "@")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "RouteComponentMarker")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_domain")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "end of header while parsing obs-route")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected ':' marking end of ")
(LIT "obs-route but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obs_route")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT "end-of-obs-route-marker")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "obs_route")
(PUNCT ",")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_angle_addr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " angle-addr = [CFWS] \"<\" addr-spec \">\" [CFWS] / obs-angle-addr\n        obs-angle-addr = [CFWS] \"<\" obs-route addr-spec \">\" [CFWS]\n\n    ")
(NEWLINE)
(ID "angle_addr")
(PUNCT "=")
(ID "AngleAddr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "<")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected angle-addr but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "<")
(PUNCT ",")
(LIT "angle-addr-start")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ">")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ">")
(PUNCT ",")
(LIT "angle-addr-end")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "angle_addr")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "null addr-spec in angle-addr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "angle_addr")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_addr_spec")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_obs_route")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "angle_addr")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "obsolete route specification in angle-addr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected addr-spec or obs-route but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_addr_spec")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ">")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "angle_addr")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "missing trailing '>' on angle-addr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ">")
(PUNCT ",")
(LIT "angle-addr-end")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "angle_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "angle_addr")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_display_name")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " display-name = phrase\n\n    Because this is simply a name-rule, we don't return a display-name\n    token containing a phrase, but rather a display-name token with\n    the content of the phrase.\n\n    ")
(NEWLINE)
(ID "display_name")
(PUNCT "=")
(ID "DisplayName")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_phrase")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "display_name")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "token")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "display_name")
(PUNCT ".")
(ID "defects")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "defects")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "display_name")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_name_addr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " name-addr = [display-name] angle-addr\n\n    ")
(NEWLINE)
(ID "name_addr")
(PUNCT "=")
(ID "NameAddr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected name-addr but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "<")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected name-addr but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_display_name")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected name-addr but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "name_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_angle_addr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "name_addr")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "name_addr")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " mailbox = name-addr / addr-spec\n\n    ")
(NEWLINE)
(ID "mailbox")
(PUNCT "=")
(ID "Mailbox")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_name_addr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_addr_spec")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected mailbox but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "token")
(PUNCT ".")
(ID "all_defects")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox")
(PUNCT ".")
(ID "token_type")
(PUNCT "=")
(LIT "invalid-mailbox")
(NEWLINE)
(DEDENT)
(ID "mailbox")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "mailbox")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "endchars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Read everything up to one of the chars in endchars.\n\n    This is outside the formal grammar.  The InvalidMailbox TokenList that is\n    returned acts like a Mailbox, but the data attributes are None.\n\n    ")
(NEWLINE)
(ID "invalid_mailbox")
(PUNCT "=")
(ID "InvalidMailbox")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "endchars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "invalid_mailbox")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "misplaced-special")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_phrase")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "invalid_mailbox")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "invalid_mailbox")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_mailbox_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " mailbox-list = (mailbox *(\",\" mailbox)) / obs-mbox-list\n        obs-mbox-list = *([CFWS] \",\") mailbox *(\",\" [mailbox / CFWS])\n\n    For this routine we go outside the formal grammar in order to improve error\n    handling.  We recognize the end of the mailbox list only at the end of the\n    value or at a ';' (the group terminator).  This is so that we can turn\n    invalid mailboxes into InvalidMailbox tokens and continue parsing any\n    remaining valid mailboxes.  We also allow all mailbox entries to be null,\n    and this condition is handled appropriately at a higher level.\n\n    ")
(NEWLINE)
(ID "mailbox_list")
(PUNCT "=")
(ID "MailboxList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mailbox_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(LIT ",;")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(ID "mailbox_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "empty element in mailbox-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT ",;")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "mailbox_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "mailbox_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid mailbox in mailbox-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "empty element in mailbox-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT ",;")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "mailbox_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "mailbox_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid mailbox in mailbox-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(LIT ",;")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox")
(PUNCT "=")
(ID "mailbox_list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "mailbox")
(PUNCT ".")
(ID "token_type")
(PUNCT "=")
(LIT "invalid-mailbox")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT ",;")
(PUNCT ")")
(NEWLINE)
(ID "mailbox")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "mailbox_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid mailbox in mailbox-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ListSeparator")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "mailbox_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_group_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " group-list = mailbox-list / CFWS / obs-group-list\n        obs-group-list = 1*([CFWS] \",\") [CFWS]\n\n    ")
(NEWLINE)
(ID "group_list")
(PUNCT "=")
(ID "GroupList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "end of header before group-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "end of header in group-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "group_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_mailbox_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "all_mailboxes")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "group_list")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "group_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "group-list with empty entries")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "group_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_group")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " group = display-name \":\" [group-list] \";\" [CFWS]\n\n    ")
(NEWLINE)
(ID "group")
(PUNCT "=")
(ID "Group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_display_name")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected ':' at end of group ")
(LIT "display name but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "group")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT "group-display-name-terminator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "group-terminator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "group")
(PUNCT ",")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_group_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "group")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "end of header in group")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected ';' at end of group but found {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "group")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "group-terminator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "group")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_address")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " address = mailbox / group\n\n    Note that counter-intuitively, an address can be either a single address or\n    a list of addresses (a group).  This is why the returned Address object has\n    a 'mailboxes' attribute which treats a single address as a list of length\n    one.  When you need to differentiate between to two cases, extract the single\n    element, which is either a mailbox or a group token.\n\n    ")
(NEWLINE)
(ID "address")
(PUNCT "=")
(ID "Address")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_group")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected address but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "address")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "address")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_address_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " address_list = (address *(\",\" address)) / obs-addr-list\n        obs-addr-list = *([CFWS] \",\") address *(\",\" [address / CFWS])\n\n    We depart from the formal grammar here by continuing to parse until the end\n    of the input, assuming the input to be entirely composed of an\n    address-list.  This is always true in email parsing, and allows us\n    to skip invalid addresses to parse additional valid ones.\n\n    ")
(NEWLINE)
(ID "address_list")
(PUNCT "=")
(ID "AddressList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_address")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "address_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "address_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(ID "address_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "address-list entry with no content")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "address_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Address")
(PUNCT "(")
(PUNCT "[")
(ID "token")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "address_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid address in address-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "address_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "ObsoleteHeaderDefect")
(PUNCT "(")
(LIT "empty element in address-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "address_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "Address")
(PUNCT "(")
(PUNCT "[")
(ID "token")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "address_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid address in address-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mailbox")
(PUNCT "=")
(ID "address_list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "mailbox")
(PUNCT ".")
(ID "token_type")
(PUNCT "=")
(LIT "invalid-mailbox")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_mailbox")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "mailbox")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "address_list")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid address in address-list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "address_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ",")
(PUNCT ",")
(LIT "list-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "address_list")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_mime_version")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " mime-version = [CFWS] 1*digit [CFWS] \".\" [CFWS] 1*digit [CFWS]\n\n    ")
(NEWLINE)
(ID "mime_version")
(PUNCT "=")
(ID "MIMEVersion")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "HeaderMissingRequiredValue")
(PUNCT "(")
(LIT "Missing MIME version number (eg: 1.0)")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "mime_version")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "HeaderMissingRequiredValue")
(PUNCT "(")
(LIT "Expected MIME version number but found only CFWS")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "digits")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ".")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "digits")
(PUNCT "+=")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "digits")
(PUNCT ".")
(ID "isdigit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Expected MIME major version number but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "digits")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "digits")
(PUNCT ",")
(LIT "xtext")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "major")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "digits")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "digits")
(PUNCT ",")
(LIT "digits")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mime_version")
(PUNCT ".")
(ID "major")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Incomplete MIME version; found only major number")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "xtext")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "mime_version")
(NEWLINE)
(DEDENT)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT "version-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mime_version")
(PUNCT ".")
(ID "major")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Incomplete MIME version; found only major number")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "mime_version")
(NEWLINE)
(DEDENT)
(ID "digits")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "digits")
(PUNCT "+=")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "digits")
(PUNCT ".")
(ID "isdigit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Expected MIME minor version number but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "digits")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "digits")
(PUNCT ",")
(LIT "xtext")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "minor")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "digits")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "digits")
(PUNCT ",")
(LIT "digits")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_version")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Excess non-CFWS text after MIME version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "mime_version")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "xtext")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "mime_version")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_invalid_parameter")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Read everything up to the next ';'.\n\n    This is outside the formal grammar.  The InvalidParameter TokenList that is\n    returned acts like a Parameter, but the data attributes are None.\n\n    ")
(NEWLINE)
(ID "invalid_parameter")
(PUNCT "=")
(ID "InvalidParameter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "invalid_parameter")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "misplaced-special")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_phrase")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "invalid_parameter")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "invalid_parameter")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_ttext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "ttext = <matches _ttext_matcher>\n\n    We allow any non-TOKEN_ENDS in ttext, but add defects to the token's\n    defects list if we find non-ttext characters.  We also register defects for\n    *any* non-printables even though the RFC doesn't exclude all of them,\n    because we follow the spirit of RFC 5322.\n\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_non_token_end_matcher")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected ttext but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ttext")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "ttext")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "ttext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "ttext")
(PUNCT ",")
(LIT "ttext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "ttext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ttext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_token")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "token = [CFWS] 1*ttext [CFWS]\n\n    The RFC equivalent of ttext is any US-ASCII chars except space, ctls, or\n    tspecials.  We also exclude tabs even though the RFC doesn't.\n\n    The RFC implies the CFWS but is not explicit about it in the BNF.\n\n    ")
(NEWLINE)
(ID "mtoken")
(PUNCT "=")
(ID "Token")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mtoken")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "TOKEN_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected token but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_ttext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mtoken")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mtoken")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "mtoken")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_attrtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "attrtext = 1*(any non-ATTRIBUTE_ENDS character)\n\n    We allow any non-ATTRIBUTE_ENDS in attrtext, but add defects to the\n    token's defects list if we find non-attrtext characters.  We also register\n    defects for *any* non-printables even though the RFC doesn't exclude all of\n    them, because we follow the spirit of RFC 5322.\n\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_non_attribute_end_matcher")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected attrtext but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "attrtext")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "attrtext")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "attrtext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "attrtext")
(PUNCT ",")
(LIT "attrtext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "attrtext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "attrtext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_attribute")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " [CFWS] 1*attrtext [CFWS]\n\n    This version of the BNF makes the CFWS explicit, and as usual we use a\n    value terminal for the actual run of characters.  The RFC equivalent of\n    attrtext is the token characters, with the subtraction of '*', \"'\", and '%'.\n    We include tab in the excluded set just as we do for token.\n\n    ")
(NEWLINE)
(ID "attribute")
(PUNCT "=")
(ID "Attribute")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "ATTRIBUTE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected token but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_attrtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "attribute")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_extended_attrtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "attrtext = 1*(any non-ATTRIBUTE_ENDS character plus '%')\n\n    This is a special parsing routine so that we get a value that\n    includes % escapes as a single string (which we decode as a single\n    string later).\n\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_non_extended_attribute_end_matcher")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected extended attrtext but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "attrtext")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "attrtext")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "attrtext")
(PUNCT "=")
(ID "ValueTerminal")
(PUNCT "(")
(ID "attrtext")
(PUNCT ",")
(LIT "extended-attrtext")
(PUNCT ")")
(NEWLINE)
(ID "_validate_xtext")
(PUNCT "(")
(ID "attrtext")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "attrtext")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_extended_attribute")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " [CFWS] 1*extended_attrtext [CFWS]\n\n    This is like the non-extended version except we allow % characters, so that\n    we can pick up an encoded value as a single string.\n\n    ")
(NEWLINE)
(ID "attribute")
(PUNCT "=")
(ID "Attribute")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "EXTENDED_ATTRIBUTE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "expected token but found '{}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_extended_attrtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "attribute")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "attribute")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_section")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " '*' digits\n\n    The formal BNF is more complicated because leading 0s are not allowed.  We\n    check for that and add a defect.  We also assume no CFWS is allowed between\n    the '*' and the digits, though the RFC is not crystal clear on that.\n    The caller should already have dealt with leading CFWS.\n\n    ")
(NEWLINE)
(ID "section")
(PUNCT "=")
(ID "Section")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "*")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected section but found {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "section")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "*")
(PUNCT ",")
(LIT "section-marker")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(KEYWORD not)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "isdigit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected section number but ")
(LIT "found {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "digits")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "isdigit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "digits")
(PUNCT "+=")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "digits")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "0")
(KEYWORD and)
(ID "digits")
(PUNCT "!=")
(LIT "0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "section")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderError")
(PUNCT "(")
(LIT "section number")
(LIT "has an invalid leading 0")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "section")
(PUNCT ".")
(ID "number")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "digits")
(PUNCT ")")
(NEWLINE)
(ID "section")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "digits")
(PUNCT ",")
(LIT "digits")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "section")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " quoted-string / attribute\n\n    ")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "Value")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected value but found end of string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected value but found ")
(LIT "only {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_quoted_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_extended_attribute")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "v")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "v")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_parameter")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " attribute [section] [\"*\"] [CFWS] \"=\" value\n\n    The CFWS is implied by the RFC but not made explicit in the BNF.  This\n    simplified form of the BNF from the RFC is made to conform with the RFC BNF\n    through some extra checks.  We do it this way because it makes both error\n    recovery and working with the resulting parse tree easier.\n    ")
(NEWLINE)
(ID "param")
(PUNCT "=")
(ID "Parameter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_attribute")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Parameter contains ")
(LIT "name ({}) but no value")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "param")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "*")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_section")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "sectioned")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Incomplete parameter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "*")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "*")
(PUNCT ",")
(LIT "extended-parameter-marker")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "extended")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "=")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Parameter not followed by '='")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "param")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "=")
(PUNCT ",")
(LIT "parameter-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "remainder")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "appendto")
(PUNCT "=")
(ID "param")
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "extended")
(KEYWORD and)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "qstring")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "get_quoted_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "inner_value")
(PUNCT "=")
(ID "qstring")
(PUNCT ".")
(ID "stripped_value")
(NEWLINE)
(ID "semi_valid")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "param")
(PUNCT ".")
(ID "section_number")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "inner_value")
(KEYWORD and)
(ID "inner_value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "semi_valid")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "get_attrtext")
(PUNCT "(")
(ID "inner_value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rest")
(KEYWORD and)
(ID "rest")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "semi_valid")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "get_extended_attrtext")
(PUNCT "(")
(ID "inner_value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "rest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "semi_valid")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "semi_valid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Quoted string value for extended parameter is invalid")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "qstring")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "qstring")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "t")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "bare-quoted-string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "appendto")
(PUNCT "=")
(ID "t")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "inner_value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remainder")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Parameter marked as extended but appears to have a ")
(LIT "quoted string value that is non-encoded")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "param")
(PUNCT ".")
(ID "extended")
(KEYWORD or)
(ID "param")
(PUNCT ".")
(ID "section_number")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "value")
(PUNCT ",")
(ID "value")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "remainder")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "param")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Apparent initial-extended-value but attribute ")
(LIT "was not marked as extended or was not initial section")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Missing required charset/lang delimiters")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "param")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "token")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "t")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "extended-attrtext")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "t")
(PUNCT ".")
(ID "token_type")
(PUNCT "==")
(LIT "attrtext")
(NEWLINE)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "charset")
(PUNCT "=")
(ID "t")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected RFC2231 char/lang encoding ")
(LIT "delimiter, but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "RFC2231 delimiter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_attrtext")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "lang")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "value")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "'")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT "(")
(LIT "Expected RFC2231 char/lang encoding ")
(LIT "delimiter, but found {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "RFC2231 delimiter")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "remainder")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "Value")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "WSP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_fws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_qcontent")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "v")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "appendto")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "value")
(PUNCT ",")
(ID "value")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "remainder")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "param")
(PUNCT ",")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_mime_parameters")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " parameter *( \";\" parameter )\n\n    That BNF is meant to indicate this routine should only be called after\n    finding and handling the leading ';'.  There is no corresponding rule in\n    the formal RFC grammar, but it is more convenient for us for the set of\n    parameters to be treated as its own TokenList.\n\n    This is 'parse' routine because it consumes the reminaing value, but it\n    would never be called to parse a full header.  Instead it is called to\n    parse everything after the non-parameter value of a specific MIME header.\n\n    ")
(NEWLINE)
(ID "mime_parameters")
(PUNCT "=")
(ID "MimeParameters")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_parameter")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mime_parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "CFWS_LEADER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "leader")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_cfws")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "mime_parameters")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "leader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "leader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "mime_parameters")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "parameter entry with no content")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_parameter")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "leader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "leader")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "mime_parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "mime_parameters")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "invalid parameter {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "param")
(PUNCT "=")
(ID "mime_parameters")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "token_type")
(PUNCT "=")
(LIT "invalid-parameter")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_invalid_parameter")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "param")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "mime_parameters")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "parameter with invalid trailing text {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mime_parameters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "parameter-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "mime_parameters")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "tokenlist")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do our best to find the parameters in an invalid MIME header\n\n    ")
(NEWLINE)
(KEYWORD while)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokenlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "misplaced-special")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_phrase")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "tokenlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "tokenlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "parameter-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "tokenlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "parse_mime_parameters")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_content_type_header")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " maintype \"/\" subtype *( \";\" parameter )\n\n    The maintype and substype are tokens.  Theoretically they could\n    be checked against the official IANA list + x-token, but we\n    don't do that.\n    ")
(NEWLINE)
(ID "ctype")
(PUNCT "=")
(ID "ContentType")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "recover")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctype")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "HeaderMissingRequiredValue")
(PUNCT "(")
(LIT "Missing content type specification")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_token")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctype")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Expected content maintype but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "ctype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(ID "ctype")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(KEYWORD or)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctype")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Invalid content type")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "ctype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(ID "ctype")
(PUNCT ".")
(ID "maintype")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ctype")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT "content-type-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_token")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctype")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Expected content subtype but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "ctype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(ID "ctype")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "ctype")
(PUNCT ".")
(ID "subtype")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ctype")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Only parameters are valid after content type, but ")
(LIT "found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "ctype")
(PUNCT ".")
(ID "maintype")
(PUNCT ",")
(ID "ctype")
(PUNCT ".")
(ID "subtype")
(NEWLINE)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "ctype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(ID "ctype")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "parameter-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "ctype")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "parse_mime_parameters")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ctype")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_content_disposition_header")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " disposition-type *( \";\" parameter )\n\n    ")
(NEWLINE)
(ID "disp_header")
(PUNCT "=")
(ID "ContentDisposition")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "disp_header")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "HeaderMissingRequiredValue")
(PUNCT "(")
(LIT "Missing content disposition")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "disp_header")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_token")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "disp_header")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Expected content disposition but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "disp_header")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "disp_header")
(NEWLINE)
(DEDENT)
(ID "disp_header")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "disp_header")
(PUNCT ".")
(ID "content_disposition")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "disp_header")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT ";")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "disp_header")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Only parameters are valid after content disposition, but ")
(LIT "found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_find_mime_parameters")
(PUNCT "(")
(ID "disp_header")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "disp_header")
(NEWLINE)
(DEDENT)
(ID "disp_header")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "parameter-separator")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "disp_header")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "parse_mime_parameters")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "disp_header")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_content_transfer_encoding_header")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " mechanism\n\n    ")
(NEWLINE)
(ID "cte_header")
(PUNCT "=")
(ID "ContentTransferEncoding")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cte_header")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "HeaderMissingRequiredValue")
(PUNCT "(")
(LIT "Missing content transfer encoding")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "cte_header")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_token")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "errors")
(PUNCT ".")
(ID "HeaderParseError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cte_header")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Expected content transfer encoding but found {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cte_header")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "cte_header")
(PUNCT ".")
(ID "cte")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cte_header")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cte_header")
(PUNCT ".")
(ID "defects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errors")
(PUNCT ".")
(ID "InvalidHeaderDefect")
(PUNCT "(")
(LIT "Extra text after content transfer encoding")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "PHRASE_ENDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cte_header")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ValueTerminal")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "misplaced-special")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "get_phrase")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "cte_header")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cte_header")
(NEWLINE)
(DEDENT)
(ENDMARKER)
