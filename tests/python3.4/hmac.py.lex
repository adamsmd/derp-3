(LIT "HMAC (Keyed-Hashing for Message Authentication) Python module.\n\nImplements the HMAC algorithm as described by RFC 2104.\n")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(KEYWORD as)
(ID "_warnings")
(NEWLINE)
(KEYWORD from)
(ID "_operator")
(KEYWORD import)
(ID "_compare_digest")
(KEYWORD as)
(ID "compare_digest")
(NEWLINE)
(KEYWORD import)
(ID "hashlib")
(KEYWORD as)
(ID "_hashlib")
(NEWLINE)
(ID "trans_5C")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT "^")
(LIT 92)
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "trans_36")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT "^")
(LIT 54)
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "digest_size")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD class)
(ID "HMAC")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "RFC 2104 HMAC class.  Also complies with RFC 4231.\n\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    ")
(NEWLINE)
(ID "blocksize")
(PUNCT "=")
(LIT 64)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "digestmod")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new HMAC object.\n\n        key:       key for the keyed hash object.\n        msg:       Initial input for the hash, if provided.\n        digestmod: A module supporting PEP 247.  *OR*\n                   A hashlib constructor returning a new hash object. *OR*\n                   A hash name suitable for hashlib.new().\n                   Defaults to hashlib.md5.\n                   Implicit default to hashlib.md5 is deprecated and will be\n                   removed in Python 3.6.\n\n        Note: key and msg must be a bytes or bytearray objects.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "key: expected bytes or bytearray, but got %r")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "digestmod")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "HMAC() without an explicit digestmod argument ")
(LIT "is deprecated.")
(PUNCT ",")
(ID "PendingDeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "digestmod")
(PUNCT "=")
(ID "_hashlib")
(PUNCT ".")
(ID "md5")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "digestmod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "=")
(ID "digestmod")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "digestmod")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "=")
(KEYWORD lambda)
(ID "d")
(PUNCT "=")
(LIT #"")
(PUNCT ":")
(ID "_hashlib")
(PUNCT ".")
(ID "new")
(PUNCT "(")
(ID "digestmod")
(PUNCT ",")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "=")
(KEYWORD lambda)
(ID "d")
(PUNCT "=")
(LIT #"")
(PUNCT ":")
(ID "digestmod")
(PUNCT ".")
(ID "new")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "outer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "digest_size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "digest_size")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ",")
(LIT "block_size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "blocksize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "block_size")
(NEWLINE)
(KEYWORD if)
(ID "blocksize")
(PUNCT "<")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "block_size of %d seems too small; using our ")
(LIT "default of %d.")
(PUNCT "%")
(PUNCT "(")
(ID "blocksize")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "blocksize")
(PUNCT ")")
(PUNCT ",")
(ID "RuntimeWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "blocksize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "blocksize")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "No block_size attribute on given digest object; ")
(LIT "Assuming %d.")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "blocksize")
(PUNCT ")")
(PUNCT ",")
(ID "RuntimeWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "blocksize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "blocksize")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "block_size")
(PUNCT "=")
(ID "blocksize")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ">")
(ID "blocksize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "key")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "blocksize")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "outer")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "trans_5C")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "trans_36")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "msg")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "hmac-")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Update this hashing object with the string msg.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a separate copy of this hashing object.\n\n        An update to this copy won't affect the original object.\n        ")
(NEWLINE)
(ID "other")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(ID "other")
(PUNCT ".")
(ID "digest_cons")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "digest_cons")
(NEWLINE)
(ID "other")
(PUNCT ".")
(ID "digest_size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "digest_size")
(NEWLINE)
(ID "other")
(PUNCT ".")
(ID "inner")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "other")
(PUNCT ".")
(ID "outer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "outer")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_current")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a hash object for the current state.\n\n        To be used only internally with digest() and hexdigest().\n        ")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "outer")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "inner")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "h")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "digest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the hash value of this hashing object.\n\n        This returns a string containing 8-bit data.  The object is\n        not altered in any way by this function; you can continue\n        updating the object after calling this function.\n        ")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "h")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "hexdigest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like digest(), but returns a string of hexadecimal digits instead.\n        ")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "h")
(PUNCT ".")
(ID "hexdigest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "new")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "digestmod")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new hashing object and return it.\n\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "HMAC")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "digestmod")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
