(LIT "Tokenization help for Python programs.\n\ntokenize(readline) is a generator that breaks a stream of bytes into\nPython tokens.  It decodes the bytes according to PEP-0263 for\ndetermining source file encoding.\n\nIt accepts a readline-like method which is called repeatedly to get the\nnext line of input (or b\"\" for EOF).  It generates 5-tuples with these\nmembers:\n\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\n\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators.  Additionally, all token lists start with an ENCODING token\nwhich tells you which encoding was used to decode the bytes stream.\n")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Ka-Ping Yee <ping@lfw.org>")
(NEWLINE)
(ID "__credits__")
(PUNCT "=")
(PUNCT "(")
(LIT "GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, ")
(LIT "Skip Montanaro, Raymond Hettinger, Trent Nelson, ")
(LIT "Michael Foord")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "codecs")
(KEYWORD import)
(ID "lookup")
(PUNCT ",")
(ID "BOM_UTF8")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "TextIOWrapper")
(NEWLINE)
(KEYWORD from)
(ID "itertools")
(KEYWORD import)
(ID "chain")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "token")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(ID "cookie_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[ \\t\\f]*#.*coding[:=][ \\t]*([-\\w.]+)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "blank_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"^[ \\t\\f]*(?:[#\\r\\n]|$)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "token")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "__all__")
(PUNCT "+")
(PUNCT "[")
(LIT "COMMENT")
(PUNCT ",")
(LIT "tokenize")
(PUNCT ",")
(LIT "detect_encoding")
(PUNCT ",")
(LIT "NL")
(PUNCT ",")
(LIT "untokenize")
(PUNCT ",")
(LIT "ENCODING")
(PUNCT ",")
(LIT "TokenInfo")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "token")
(NEWLINE)
(ID "COMMENT")
(PUNCT "=")
(ID "N_TOKENS")
(NEWLINE)
(ID "tok_name")
(PUNCT "[")
(ID "COMMENT")
(PUNCT "]")
(PUNCT "=")
(LIT "COMMENT")
(NEWLINE)
(ID "NL")
(PUNCT "=")
(ID "N_TOKENS")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "tok_name")
(PUNCT "[")
(ID "NL")
(PUNCT "]")
(PUNCT "=")
(LIT "NL")
(NEWLINE)
(ID "ENCODING")
(PUNCT "=")
(ID "N_TOKENS")
(PUNCT "+")
(LIT 2)
(NEWLINE)
(ID "tok_name")
(PUNCT "[")
(ID "ENCODING")
(PUNCT "]")
(PUNCT "=")
(LIT "ENCODING")
(NEWLINE)
(ID "N_TOKENS")
(PUNCT "+=")
(LIT 3)
(NEWLINE)
(ID "EXACT_TOKEN_TYPES")
(PUNCT "=")
(PUNCT "{")
(LIT "(")
(PUNCT ":")
(ID "LPAR")
(PUNCT ",")
(LIT ")")
(PUNCT ":")
(ID "RPAR")
(PUNCT ",")
(LIT "[")
(PUNCT ":")
(ID "LSQB")
(PUNCT ",")
(LIT "]")
(PUNCT ":")
(ID "RSQB")
(PUNCT ",")
(LIT ":")
(PUNCT ":")
(ID "COLON")
(PUNCT ",")
(LIT ",")
(PUNCT ":")
(ID "COMMA")
(PUNCT ",")
(LIT ";")
(PUNCT ":")
(ID "SEMI")
(PUNCT ",")
(LIT "+")
(PUNCT ":")
(ID "PLUS")
(PUNCT ",")
(LIT "-")
(PUNCT ":")
(ID "MINUS")
(PUNCT ",")
(LIT "*")
(PUNCT ":")
(ID "STAR")
(PUNCT ",")
(LIT "/")
(PUNCT ":")
(ID "SLASH")
(PUNCT ",")
(LIT "|")
(PUNCT ":")
(ID "VBAR")
(PUNCT ",")
(LIT "&")
(PUNCT ":")
(ID "AMPER")
(PUNCT ",")
(LIT "<")
(PUNCT ":")
(ID "LESS")
(PUNCT ",")
(LIT ">")
(PUNCT ":")
(ID "GREATER")
(PUNCT ",")
(LIT "=")
(PUNCT ":")
(ID "EQUAL")
(PUNCT ",")
(LIT ".")
(PUNCT ":")
(ID "DOT")
(PUNCT ",")
(LIT "%")
(PUNCT ":")
(ID "PERCENT")
(PUNCT ",")
(LIT "{")
(PUNCT ":")
(ID "LBRACE")
(PUNCT ",")
(LIT "}")
(PUNCT ":")
(ID "RBRACE")
(PUNCT ",")
(LIT "==")
(PUNCT ":")
(ID "EQEQUAL")
(PUNCT ",")
(LIT "!=")
(PUNCT ":")
(ID "NOTEQUAL")
(PUNCT ",")
(LIT "<=")
(PUNCT ":")
(ID "LESSEQUAL")
(PUNCT ",")
(LIT ">=")
(PUNCT ":")
(ID "GREATEREQUAL")
(PUNCT ",")
(LIT "~")
(PUNCT ":")
(ID "TILDE")
(PUNCT ",")
(LIT "^")
(PUNCT ":")
(ID "CIRCUMFLEX")
(PUNCT ",")
(LIT "<<")
(PUNCT ":")
(ID "LEFTSHIFT")
(PUNCT ",")
(LIT ">>")
(PUNCT ":")
(ID "RIGHTSHIFT")
(PUNCT ",")
(LIT "**")
(PUNCT ":")
(ID "DOUBLESTAR")
(PUNCT ",")
(LIT "+=")
(PUNCT ":")
(ID "PLUSEQUAL")
(PUNCT ",")
(LIT "-=")
(PUNCT ":")
(ID "MINEQUAL")
(PUNCT ",")
(LIT "*=")
(PUNCT ":")
(ID "STAREQUAL")
(PUNCT ",")
(LIT "/=")
(PUNCT ":")
(ID "SLASHEQUAL")
(PUNCT ",")
(LIT "%=")
(PUNCT ":")
(ID "PERCENTEQUAL")
(PUNCT ",")
(LIT "&=")
(PUNCT ":")
(ID "AMPEREQUAL")
(PUNCT ",")
(LIT "|=")
(PUNCT ":")
(ID "VBAREQUAL")
(PUNCT ",")
(LIT "^=")
(PUNCT ":")
(ID "CIRCUMFLEXEQUAL")
(PUNCT ",")
(LIT "<<=")
(PUNCT ":")
(ID "LEFTSHIFTEQUAL")
(PUNCT ",")
(LIT ">>=")
(PUNCT ":")
(ID "RIGHTSHIFTEQUAL")
(PUNCT ",")
(LIT "**=")
(PUNCT ":")
(ID "DOUBLESTAREQUAL")
(PUNCT ",")
(LIT "//")
(PUNCT ":")
(ID "DOUBLESLASH")
(PUNCT ",")
(LIT "//=")
(PUNCT ":")
(ID "DOUBLESLASHEQUAL")
(PUNCT ",")
(LIT "@")
(PUNCT ":")
(ID "AT")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "TokenInfo")
(PUNCT "(")
(ID "collections")
(PUNCT ".")
(ID "namedtuple")
(PUNCT "(")
(LIT "TokenInfo")
(PUNCT ",")
(LIT "type string start end line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "annotated_type")
(PUNCT "=")
(LIT "%d (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "tok_name")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(LIT "TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_replace")
(PUNCT "(")
(ID "type")
(PUNCT "=")
(ID "annotated_type")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "exact_type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "OP")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "string")
(KEYWORD in)
(ID "EXACT_TOKEN_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "EXACT_TOKEN_TYPES")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "string")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "group")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(LIT "(")
(PUNCT "+")
(LIT "|")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "choices")
(PUNCT ")")
(PUNCT "+")
(LIT ")")
(NEWLINE)
(KEYWORD def)
(ID "any")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "group")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT "+")
(LIT "*")
(NEWLINE)
(KEYWORD def)
(ID "maybe")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "group")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT "+")
(LIT "?")
(NEWLINE)
(ID "Whitespace")
(PUNCT "=")
(LIT "[ \\f\\t]*")
(NEWLINE)
(ID "Comment")
(PUNCT "=")
(LIT "#[^\\r\\n]*")
(NEWLINE)
(ID "Ignore")
(PUNCT "=")
(ID "Whitespace")
(PUNCT "+")
(ID "any")
(PUNCT "(")
(LIT "\\\\\\r?\\n")
(PUNCT "+")
(ID "Whitespace")
(PUNCT ")")
(PUNCT "+")
(ID "maybe")
(PUNCT "(")
(ID "Comment")
(PUNCT ")")
(NEWLINE)
(ID "Name")
(PUNCT "=")
(LIT "\\w+")
(NEWLINE)
(ID "Hexnumber")
(PUNCT "=")
(LIT "0[xX][0-9a-fA-F]+")
(NEWLINE)
(ID "Binnumber")
(PUNCT "=")
(LIT "0[bB][01]+")
(NEWLINE)
(ID "Octnumber")
(PUNCT "=")
(LIT "0[oO][0-7]+")
(NEWLINE)
(ID "Decnumber")
(PUNCT "=")
(LIT "(?:0+|[1-9][0-9]*)")
(NEWLINE)
(ID "Intnumber")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Hexnumber")
(PUNCT ",")
(ID "Binnumber")
(PUNCT ",")
(ID "Octnumber")
(PUNCT ",")
(ID "Decnumber")
(PUNCT ")")
(NEWLINE)
(ID "Exponent")
(PUNCT "=")
(LIT "[eE][-+]?[0-9]+")
(NEWLINE)
(ID "Pointfloat")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "[0-9]+\\.[0-9]*")
(PUNCT ",")
(LIT "\\.[0-9]+")
(PUNCT ")")
(PUNCT "+")
(ID "maybe")
(PUNCT "(")
(ID "Exponent")
(PUNCT ")")
(NEWLINE)
(ID "Expfloat")
(PUNCT "=")
(LIT "[0-9]+")
(PUNCT "+")
(ID "Exponent")
(NEWLINE)
(ID "Floatnumber")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Pointfloat")
(PUNCT ",")
(ID "Expfloat")
(PUNCT ")")
(NEWLINE)
(ID "Imagnumber")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "[0-9]+[jJ]")
(PUNCT ",")
(ID "Floatnumber")
(PUNCT "+")
(LIT "[jJ]")
(PUNCT ")")
(NEWLINE)
(ID "Number")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Imagnumber")
(PUNCT ",")
(ID "Floatnumber")
(PUNCT ",")
(ID "Intnumber")
(PUNCT ")")
(NEWLINE)
(ID "StringPrefix")
(PUNCT "=")
(LIT "(?:[bB][rR]?|[rR][bB]?|[uU])?")
(NEWLINE)
(ID "Single")
(PUNCT "=")
(LIT "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'")
(NEWLINE)
(ID "Double")
(PUNCT "=")
(LIT "[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"")
(NEWLINE)
(ID "Single3")
(PUNCT "=")
(LIT "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''")
(NEWLINE)
(ID "Double3")
(PUNCT "=")
(LIT "[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"")
(NEWLINE)
(ID "Triple")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "StringPrefix")
(PUNCT "+")
(LIT "'''")
(PUNCT ",")
(ID "StringPrefix")
(PUNCT "+")
(LIT "\"\"\"")
(PUNCT ")")
(NEWLINE)
(ID "String")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "StringPrefix")
(PUNCT "+")
(LIT "'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'")
(PUNCT ",")
(ID "StringPrefix")
(PUNCT "+")
(LIT "\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"")
(PUNCT ")")
(NEWLINE)
(ID "Operator")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\*\\*=?")
(PUNCT ",")
(LIT ">>=?")
(PUNCT ",")
(LIT "<<=?")
(PUNCT ",")
(LIT "!=")
(PUNCT ",")
(LIT "//=?")
(PUNCT ",")
(LIT "->")
(PUNCT ",")
(LIT "[+\\-*/%&|^=<>]=?")
(PUNCT ",")
(LIT "~")
(PUNCT ")")
(NEWLINE)
(ID "Bracket")
(PUNCT "=")
(LIT "[][(){}]")
(NEWLINE)
(ID "Special")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\r?\\n")
(PUNCT ",")
(LIT "\\.\\.\\.")
(PUNCT ",")
(LIT "[:;.,@]")
(PUNCT ")")
(NEWLINE)
(ID "Funny")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Operator")
(PUNCT ",")
(ID "Bracket")
(PUNCT ",")
(ID "Special")
(PUNCT ")")
(NEWLINE)
(ID "PlainToken")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Number")
(PUNCT ",")
(ID "Funny")
(PUNCT ",")
(ID "String")
(PUNCT ",")
(ID "Name")
(PUNCT ")")
(NEWLINE)
(ID "Token")
(PUNCT "=")
(ID "Ignore")
(PUNCT "+")
(ID "PlainToken")
(NEWLINE)
(ID "ContStr")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "StringPrefix")
(PUNCT "+")
(LIT "'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*")
(PUNCT "+")
(ID "group")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "\\\\\\r?\\n")
(PUNCT ")")
(PUNCT ",")
(ID "StringPrefix")
(PUNCT "+")
(LIT "\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*")
(PUNCT "+")
(ID "group")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\\\\\\r?\\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "PseudoExtras")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\\\\\r?\\n|\\Z")
(PUNCT ",")
(ID "Comment")
(PUNCT ",")
(ID "Triple")
(PUNCT ")")
(NEWLINE)
(ID "PseudoToken")
(PUNCT "=")
(ID "Whitespace")
(PUNCT "+")
(ID "group")
(PUNCT "(")
(ID "PseudoExtras")
(PUNCT ",")
(ID "Number")
(PUNCT ",")
(ID "Funny")
(PUNCT ",")
(ID "ContStr")
(PUNCT ",")
(ID "Name")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_compile")
(PUNCT "(")
(ID "expr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "expr")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "UNICODE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "endpats")
(PUNCT "=")
(PUNCT "{")
(LIT "'")
(PUNCT ":")
(ID "Single")
(PUNCT ",")
(LIT "\"")
(PUNCT ":")
(ID "Double")
(PUNCT ",")
(LIT "'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "r'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "r\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "b'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "b\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "R'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "R\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "B'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "B\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "br'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "br\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "bR'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "bR\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "Br'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "Br\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "BR'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "BR\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "rb'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "rb\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "Rb'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "Rb\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "rB'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "rB\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "RB'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "RB\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "u'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "u\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "R'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "R\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "U'''")
(PUNCT ":")
(ID "Single3")
(PUNCT ",")
(LIT "U\"\"\"")
(PUNCT ":")
(ID "Double3")
(PUNCT ",")
(LIT "r")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "R")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "b")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "B")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "u")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "U")
(PUNCT ":")
(KEYWORD None)
(PUNCT "}")
(NEWLINE)
(ID "triple_quoted")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(PUNCT "(")
(LIT "'''")
(PUNCT ",")
(LIT "\"\"\"")
(PUNCT ",")
(LIT "r'''")
(PUNCT ",")
(LIT "r\"\"\"")
(PUNCT ",")
(LIT "R'''")
(PUNCT ",")
(LIT "R\"\"\"")
(PUNCT ",")
(LIT "b'''")
(PUNCT ",")
(LIT "b\"\"\"")
(PUNCT ",")
(LIT "B'''")
(PUNCT ",")
(LIT "B\"\"\"")
(PUNCT ",")
(LIT "br'''")
(PUNCT ",")
(LIT "br\"\"\"")
(PUNCT ",")
(LIT "Br'''")
(PUNCT ",")
(LIT "Br\"\"\"")
(PUNCT ",")
(LIT "bR'''")
(PUNCT ",")
(LIT "bR\"\"\"")
(PUNCT ",")
(LIT "BR'''")
(PUNCT ",")
(LIT "BR\"\"\"")
(PUNCT ",")
(LIT "rb'''")
(PUNCT ",")
(LIT "rb\"\"\"")
(PUNCT ",")
(LIT "rB'''")
(PUNCT ",")
(LIT "rB\"\"\"")
(PUNCT ",")
(LIT "Rb'''")
(PUNCT ",")
(LIT "Rb\"\"\"")
(PUNCT ",")
(LIT "RB'''")
(PUNCT ",")
(LIT "RB\"\"\"")
(PUNCT ",")
(LIT "u'''")
(PUNCT ",")
(LIT "u\"\"\"")
(PUNCT ",")
(LIT "U'''")
(PUNCT ",")
(LIT "U\"\"\"")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "triple_quoted")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "t")
(NEWLINE)
(DEDENT)
(ID "single_quoted")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "\"")
(PUNCT ",")
(LIT "r'")
(PUNCT ",")
(LIT "r\"")
(PUNCT ",")
(LIT "R'")
(PUNCT ",")
(LIT "R\"")
(PUNCT ",")
(LIT "b'")
(PUNCT ",")
(LIT "b\"")
(PUNCT ",")
(LIT "B'")
(PUNCT ",")
(LIT "B\"")
(PUNCT ",")
(LIT "br'")
(PUNCT ",")
(LIT "br\"")
(PUNCT ",")
(LIT "Br'")
(PUNCT ",")
(LIT "Br\"")
(PUNCT ",")
(LIT "bR'")
(PUNCT ",")
(LIT "bR\"")
(PUNCT ",")
(LIT "BR'")
(PUNCT ",")
(LIT "BR\"")
(PUNCT ",")
(LIT "rb'")
(PUNCT ",")
(LIT "rb\"")
(PUNCT ",")
(LIT "rB'")
(PUNCT ",")
(LIT "rB\"")
(PUNCT ",")
(LIT "Rb'")
(PUNCT ",")
(LIT "Rb\"")
(PUNCT ",")
(LIT "RB'")
(PUNCT ",")
(LIT "RB\"")
(PUNCT ",")
(LIT "u'")
(PUNCT ",")
(LIT "u\"")
(PUNCT ",")
(LIT "U'")
(PUNCT ",")
(LIT "U\"")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "single_quoted")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "t")
(NEWLINE)
(DEDENT)
(ID "tabsize")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(KEYWORD class)
(ID "TokenError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "StopTokenizing")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "Untokenizer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_whitespace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "row")
(PUNCT ",")
(ID "col")
(PUNCT "=")
(ID "start")
(NEWLINE)
(KEYWORD if)
(ID "row")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "prev_row")
(KEYWORD or)
(ID "row")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "prev_row")
(KEYWORD and)
(ID "col")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "start ({},{}) precedes previous end ({},{})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "row")
(PUNCT ",")
(ID "col")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "row_offset")
(PUNCT "=")
(ID "row")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "prev_row")
(NEWLINE)
(KEYWORD if)
(ID "row_offset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\\\n")
(PUNCT "*")
(ID "row_offset")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "col_offset")
(PUNCT "=")
(ID "col")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "prev_col")
(NEWLINE)
(KEYWORD if)
(ID "col_offset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT " ")
(PUNCT "*")
(ID "col_offset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "untokenize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "it")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "it")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compat")
(PUNCT "(")
(ID "t")
(PUNCT ",")
(ID "it")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "tok_type")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "line")
(PUNCT "=")
(ID "t")
(NEWLINE)
(KEYWORD if)
(ID "tok_type")
(PUNCT "==")
(ID "ENCODING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "token")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tok_type")
(PUNCT "==")
(ID "ENDMARKER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "add_whitespace")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD if)
(ID "tok_type")
(KEYWORD in)
(PUNCT "(")
(ID "NEWLINE")
(PUNCT ",")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compat")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "toks_append")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "startline")
(PUNCT "=")
(ID "token")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(PUNCT "(")
(ID "NEWLINE")
(PUNCT ",")
(ID "NL")
(PUNCT ")")
(NEWLINE)
(ID "prevstring")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "tok")
(KEYWORD in)
(ID "chain")
(PUNCT "(")
(PUNCT "[")
(ID "token")
(PUNCT "]")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toknum")
(PUNCT ",")
(ID "tokval")
(PUNCT "=")
(ID "tok")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "toknum")
(PUNCT "==")
(ID "ENCODING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "tokval")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "toknum")
(KEYWORD in)
(PUNCT "(")
(ID "NAME")
(PUNCT ",")
(ID "NUMBER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokval")
(PUNCT "+=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "toknum")
(PUNCT "==")
(ID "STRING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "prevstring")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokval")
(PUNCT "=")
(LIT " ")
(PUNCT "+")
(ID "tokval")
(NEWLINE)
(DEDENT)
(ID "prevstring")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prevstring")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "toknum")
(PUNCT "==")
(ID "INDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tokval")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "toknum")
(PUNCT "==")
(ID "DEDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "toknum")
(KEYWORD in)
(PUNCT "(")
(ID "NEWLINE")
(PUNCT ",")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startline")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "startline")
(KEYWORD and)
(ID "indents")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toks_append")
(PUNCT "(")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "startline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "toks_append")
(PUNCT "(")
(ID "tokval")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "untokenize")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n\n    Round-trip invariant for limited intput:\n        # Output bytes will tokenize the back to the input\n        t1 = [tok[:2] for tok in tokenize(f.readline)]\n        newcode = untokenize(t1)\n        readline = BytesIO(newcode).readline\n        t2 = [tok[:2] for tok in tokenize(readline)]\n        assert t1 == t2\n    ")
(NEWLINE)
(ID "ut")
(PUNCT "=")
(ID "Untokenizer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT "=")
(ID "ut")
(PUNCT ".")
(ID "untokenize")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ut")
(PUNCT ".")
(ID "encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT "=")
(ID "out")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "ut")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "out")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_normal_name")
(PUNCT "(")
(ID "orig_enc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Imitates get_normal_name in tokenizer.c.")
(NEWLINE)
(ID "enc")
(PUNCT "=")
(ID "orig_enc")
(PUNCT "[")
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "_")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "enc")
(PUNCT "==")
(LIT "utf-8")
(KEYWORD or)
(ID "enc")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "utf-8-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "enc")
(KEYWORD in)
(PUNCT "(")
(LIT "latin-1")
(PUNCT ",")
(LIT "iso-8859-1")
(PUNCT ",")
(LIT "iso-latin-1")
(PUNCT ")")
(KEYWORD or)
(ID "enc")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(PUNCT "(")
(LIT "latin-1-")
(PUNCT ",")
(LIT "iso-8859-1-")
(PUNCT ",")
(LIT "iso-latin-1-")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "iso-8859-1")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "orig_enc")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "detect_encoding")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argument, readline,\n    in the same way as the tokenize() generator.\n\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an\n    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n    'utf-8-sig' is returned.\n\n    If no encoding is specified, then the default of 'utf-8' will be returned.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "readline")
(PUNCT ".")
(ID "__self__")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "bom_found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "default")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(KEYWORD def)
(ID "read_or_stop")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_cookie")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line_string")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "invalid or missing encoding declaration")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "{} for {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "SyntaxError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "match")
(PUNCT "=")
(ID "cookie_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line_string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "=")
(ID "_get_normal_name")
(PUNCT "(")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "codec")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "LookupError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "unknown encoding: ")
(PUNCT "+")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "unknown encoding for {!r}: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "SyntaxError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bom_found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "encoding")
(PUNCT "!=")
(LIT "utf-8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "encoding problem: utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "encoding problem for {!r}: utf-8")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "SyntaxError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "+=")
(LIT "-sig")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "encoding")
(NEWLINE)
(DEDENT)
(ID "first")
(PUNCT "=")
(ID "read_or_stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "first")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "BOM_UTF8")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bom_found")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "first")
(PUNCT "=")
(ID "first")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "default")
(PUNCT "=")
(LIT "utf-8-sig")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "=")
(ID "find_cookie")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "encoding")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "blank_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "second")
(PUNCT "=")
(ID "read_or_stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "=")
(ID "find_cookie")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "encoding")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_builtin_open")
(PUNCT "=")
(ID "open")
(NEWLINE)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    ")
(NEWLINE)
(ID "buffer")
(PUNCT "=")
(ID "_builtin_open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "encoding")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "detect_encoding")
(PUNCT "(")
(ID "buffer")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(ID "buffer")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "TextIOWrapper")
(PUNCT "(")
(ID "buffer")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "line_buffering")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(LIT "r")
(NEWLINE)
(KEYWORD return)
(ID "text")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tokenize")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The tokenize() generator requires one argment, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found.  The line passed is the\n    logical line; continuation lines are included.\n\n    The first token sequence will always be an ENCODING token\n    which tells you which encoding was used to decode the bytes stream.\n    ")
(NEWLINE)
(KEYWORD from)
(ID "itertools")
(KEYWORD import)
(ID "chain")
(PUNCT ",")
(ID "repeat")
(NEWLINE)
(ID "encoding")
(PUNCT ",")
(ID "consumed")
(PUNCT "=")
(ID "detect_encoding")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(ID "rl_gen")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(ID "empty")
(PUNCT "=")
(ID "repeat")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_tokenize")
(PUNCT "(")
(ID "chain")
(PUNCT "(")
(ID "consumed")
(PUNCT ",")
(ID "rl_gen")
(PUNCT ",")
(ID "empty")
(PUNCT ")")
(PUNCT ".")
(ID "__next__")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_tokenize")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lnum")
(PUNCT "=")
(ID "parenlev")
(PUNCT "=")
(ID "continued")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "numchars")
(PUNCT "=")
(LIT "0123456789")
(NEWLINE)
(ID "contstr")
(PUNCT ",")
(ID "needcont")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(LIT 0)
(NEWLINE)
(ID "contline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "indents")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "encoding")
(PUNCT "==")
(LIT "utf-8-sig")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "ENCODING")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lnum")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "pos")
(PUNCT ",")
(ID "max")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "contstr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TokenError")
(PUNCT "(")
(LIT "EOF in multi-line string")
(PUNCT ",")
(ID "strstart")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "endmatch")
(PUNCT "=")
(ID "endprog")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "endmatch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "end")
(PUNCT "=")
(ID "endmatch")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "STRING")
(PUNCT ",")
(ID "contstr")
(PUNCT "+")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(PUNCT ",")
(ID "strstart")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ",")
(ID "contline")
(PUNCT "+")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT ",")
(ID "needcont")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(LIT 0)
(NEWLINE)
(ID "contline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "needcont")
(KEYWORD and)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(LIT "\\\n")
(KEYWORD and)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(LIT "\\\r\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "ERRORTOKEN")
(PUNCT ",")
(ID "contstr")
(PUNCT "+")
(ID "line")
(PUNCT ",")
(ID "strstart")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "contline")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "contline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "contstr")
(PUNCT "=")
(ID "contstr")
(PUNCT "+")
(ID "line")
(NEWLINE)
(ID "contline")
(PUNCT "=")
(ID "contline")
(PUNCT "+")
(ID "line")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "parenlev")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "continued")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "pos")
(PUNCT "<")
(ID "max")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT " ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "column")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "column")
(PUNCT "=")
(PUNCT "(")
(ID "column")
(PUNCT "//")
(ID "tabsize")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "*")
(ID "tabsize")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pos")
(PUNCT "==")
(ID "max")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(LIT "#\r\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comment_token")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ")")
(NEWLINE)
(ID "nl_pos")
(PUNCT "=")
(ID "pos")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "comment_token")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "COMMENT")
(PUNCT ",")
(ID "comment_token")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "comment_token")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "NL")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "nl_pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "nl_pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(PUNCT "(")
(ID "NL")
(PUNCT ",")
(ID "COMMENT")
(PUNCT ")")
(PUNCT "[")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT "]")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "column")
(PUNCT ">")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "column")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "INDENT")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "column")
(PUNCT "<")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "column")
(KEYWORD not)
(KEYWORD in)
(ID "indents")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IndentationError")
(PUNCT "(")
(LIT "unindent does not match any outer indentation level")
(PUNCT ",")
(PUNCT "(")
(LIT "<tokenize>")
(PUNCT ",")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "indents")
(PUNCT "=")
(ID "indents")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "DEDENT")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TokenError")
(PUNCT "(")
(LIT "EOF in multi-line statement")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "continued")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "pos")
(PUNCT "<")
(ID "max")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pseudomatch")
(PUNCT "=")
(ID "_compile")
(PUNCT "(")
(ID "PseudoToken")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pseudomatch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "pseudomatch")
(PUNCT ".")
(ID "span")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "pos")
(PUNCT "=")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(NEWLINE)
(KEYWORD if)
(ID "start")
(PUNCT "==")
(ID "end")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ",")
(ID "initial")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "initial")
(KEYWORD in)
(ID "numchars")
(KEYWORD or)
(PUNCT "(")
(ID "initial")
(PUNCT "==")
(LIT ".")
(KEYWORD and)
(ID "token")
(PUNCT "!=")
(LIT ".")
(KEYWORD and)
(ID "token")
(PUNCT "!=")
(LIT "...")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "NUMBER")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(LIT "\r\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "NL")
(KEYWORD if)
(ID "parenlev")
(PUNCT ">")
(LIT 0)
(KEYWORD else)
(ID "NEWLINE")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "token")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "COMMENT")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(KEYWORD in)
(ID "triple_quoted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endprog")
(PUNCT "=")
(ID "_compile")
(PUNCT "(")
(ID "endpats")
(PUNCT "[")
(ID "token")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "endmatch")
(PUNCT "=")
(ID "endprog")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "endmatch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "endmatch")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(NEWLINE)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "STRING")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strstart")
(PUNCT "=")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "contline")
(PUNCT "=")
(ID "line")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(ID "single_quoted")
(KEYWORD or)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(KEYWORD in)
(ID "single_quoted")
(KEYWORD or)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD in)
(ID "single_quoted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strstart")
(PUNCT "=")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "endprog")
(PUNCT "=")
(ID "_compile")
(PUNCT "(")
(ID "endpats")
(PUNCT "[")
(ID "initial")
(PUNCT "]")
(KEYWORD or)
(ID "endpats")
(PUNCT "[")
(ID "token")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(KEYWORD or)
(ID "endpats")
(PUNCT "[")
(ID "token")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT ",")
(ID "needcont")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT 1)
(NEWLINE)
(ID "contline")
(PUNCT "=")
(ID "line")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "STRING")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(PUNCT ".")
(ID "isidentifier")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "NAME")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "continued")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "initial")
(KEYWORD in)
(LIT "([{")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parenlev")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(LIT ")]}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parenlev")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "OP")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "ERRORTOKEN")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "indent")
(KEYWORD in)
(ID "indents")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "DEDENT")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "TokenInfo")
(PUNCT "(")
(ID "ENDMARKER")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "generate_tokens")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_tokenize")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(KEYWORD def)
(ID "perror")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "error")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "location")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "location")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "location")
(PUNCT "+")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "perror")
(PUNCT "(")
(LIT "%s:%d:%d: error: %s")
(PUNCT "%")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "perror")
(PUNCT "(")
(LIT "%s: error: %s")
(PUNCT "%")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "perror")
(PUNCT "(")
(LIT "error: %s")
(PUNCT "%")
(ID "message")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(ID "prog")
(PUNCT "=")
(LIT "python -m tokenize")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(ID "dest")
(PUNCT "=")
(LIT "filename")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "?")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "filename.py")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "the file to tokenize; defaults to stdin")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-e")
(PUNCT ",")
(LIT "--exact")
(PUNCT ",")
(ID "dest")
(PUNCT "=")
(LIT "exact")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "display token names using the exact type")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD with)
(ID "_builtin_open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokens")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "tokenize")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(LIT "<stdin>")
(NEWLINE)
(ID "tokens")
(PUNCT "=")
(ID "_tokenize")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "readline")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "token")
(KEYWORD in)
(ID "tokens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "type")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "exact")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token_type")
(PUNCT "=")
(ID "token")
(PUNCT ".")
(ID "exact_type")
(NEWLINE)
(DEDENT)
(ID "token_range")
(PUNCT "=")
(LIT "%d,%d-%d,%d:")
(PUNCT "%")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "start")
(PUNCT "+")
(ID "token")
(PUNCT ".")
(ID "end")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%-20s%-15s%-15r")
(PUNCT "%")
(PUNCT "(")
(ID "token_range")
(PUNCT ",")
(ID "tok_name")
(PUNCT "[")
(ID "token_type")
(PUNCT "]")
(PUNCT ",")
(ID "token")
(PUNCT ".")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "IndentationError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(ID "err")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "error")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TokenError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(ID "err")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "error")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SyntaxError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "error")
(PUNCT "(")
(ID "err")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "error")
(PUNCT "(")
(ID "err")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "interrupted\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "perror")
(PUNCT "(")
(LIT "unexpected error: %s")
(PUNCT "%")
(ID "err")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
