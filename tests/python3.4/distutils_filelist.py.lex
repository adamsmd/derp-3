(LIT "distutils.filelist\n\nProvides the FileList class, used for poking about the filesystem\nand building lists of files.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "fnmatch")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "convert_path")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsTemplateError")
(PUNCT ",")
(ID "DistutilsInternalError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD class)
(ID "FileList")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A list of files built by on exploring the filesystem and filtered by\n    applying various patterns to what we find there.\n\n    Instance attributes:\n      dir\n        directory from which files will be taken -- only used if\n        'allfiles' not supplied to constructor\n      files\n        list of filenames currently being built/filtered/manipulated\n      allfiles\n        complete list of files under consideration (ie. without any\n        filtering applied)\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "warn")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug_print")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "allfiles")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_allfiles")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "allfiles")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "allfiles")
(PUNCT "=")
(ID "allfiles")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "findall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "allfiles")
(PUNCT "=")
(ID "findall")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "debug_print")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print 'msg' to stdout if the global DEBUG (taken from the\n        DISTUTILS_DEBUG environment variable) flag is true.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "debug")
(KEYWORD import)
(ID "DEBUG")
(NEWLINE)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sort")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sortable_files")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "sort_tuple")
(KEYWORD in)
(ID "sortable_files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "*")
(ID "sort_tuple")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "remove_duplicates")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_parse_template_line")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "words")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "action")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "patterns")
(PUNCT "=")
(ID "dir")
(PUNCT "=")
(ID "dir_pattern")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "action")
(KEYWORD in)
(PUNCT "(")
(LIT "include")
(PUNCT ",")
(LIT "exclude")
(PUNCT ",")
(LIT "global-include")
(PUNCT ",")
(LIT "global-exclude")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT "<")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsTemplateError")
(PUNCT "(")
(LIT "'%s' expects <pattern1> <pattern2> ...")
(PUNCT "%")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "patterns")
(PUNCT "=")
(PUNCT "[")
(ID "convert_path")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(KEYWORD for)
(ID "w")
(KEYWORD in)
(ID "words")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(KEYWORD in)
(PUNCT "(")
(LIT "recursive-include")
(PUNCT ",")
(LIT "recursive-exclude")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT "<")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsTemplateError")
(PUNCT "(")
(LIT "'%s' expects <dir> <pattern1> <pattern2> ...")
(PUNCT "%")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dir")
(PUNCT "=")
(ID "convert_path")
(PUNCT "(")
(ID "words")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "patterns")
(PUNCT "=")
(PUNCT "[")
(ID "convert_path")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(KEYWORD for)
(ID "w")
(KEYWORD in)
(ID "words")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "action")
(KEYWORD in)
(PUNCT "(")
(LIT "graft")
(PUNCT ",")
(LIT "prune")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsTemplateError")
(PUNCT "(")
(LIT "'%s' expects a single <dir_pattern>")
(PUNCT "%")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dir_pattern")
(PUNCT "=")
(ID "convert_path")
(PUNCT "(")
(ID "words")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsTemplateError")
(PUNCT "(")
(LIT "unknown action '%s'")
(PUNCT "%")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "patterns")
(PUNCT ",")
(ID "dir")
(PUNCT ",")
(ID "dir_pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "process_template_line")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "action")
(PUNCT ",")
(ID "patterns")
(PUNCT ",")
(ID "dir")
(PUNCT ",")
(ID "dir_pattern")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parse_template_line")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "action")
(PUNCT "==")
(LIT "include")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "include ")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "patterns")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "patterns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "include_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "warning: no files found matching '%s'")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "exclude")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "exclude ")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "patterns")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "patterns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "warning: no previously-included files ")
(LIT "found matching '%s'")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "global-include")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "global-include ")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "patterns")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "patterns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "include_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "warning: no files found matching '%s' ")
(LIT "anywhere in distribution")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "global-exclude")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "global-exclude ")
(PUNCT "+")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "patterns")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "patterns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "warning: no previously-included files matching ")
(LIT "'%s' found anywhere in distribution")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "recursive-include")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "recursive-include %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "patterns")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "patterns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "include_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "warning: no files found matching '%s' ")
(LIT "under directory '%s'")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "recursive-exclude")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "recursive-exclude %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "patterns")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "patterns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "warning: no previously-included files matching ")
(LIT "'%s' found under directory '%s'")
(PUNCT ")")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "graft")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "graft ")
(PUNCT "+")
(ID "dir_pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "include_pattern")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "dir_pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "warning: no directories found matching '%s'")
(PUNCT ",")
(ID "dir_pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "action")
(PUNCT "==")
(LIT "prune")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "prune ")
(PUNCT "+")
(ID "dir_pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "dir_pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "no previously-included directories found ")
(LIT "matching '%s'")
(PUNCT ")")
(PUNCT ",")
(ID "dir_pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsInternalError")
(PUNCT "(")
(LIT "this cannot happen: invalid action '%s'")
(PUNCT "%")
(ID "action")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "include_pattern")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "is_regex")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.\n\n        If 'anchor' is true (the default), then the pattern match is more\n        stringent: \"*.py\" will match \"foo.py\" but not \"foo/bar.py\".  If\n        'anchor' is false, both of these will match.\n\n        If 'prefix' is supplied, then only filenames starting with 'prefix'\n        (itself a pattern) and ending with 'pattern', with anything in between\n        them, will match.  'anchor' is ignored in this case.\n\n        If 'is_regex' is true, 'anchor' and 'prefix' are ignored, and\n        'pattern' is assumed to be either a string containing a regex or a\n        regex object -- no translation is done, the regex is just compiled\n        and used as-is.\n\n        Selected strings will be added to self.files.\n\n        Return True if files are found, False otherwise.\n        ")
(NEWLINE)
(ID "files_found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "pattern_re")
(PUNCT "=")
(ID "translate_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "is_regex")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "include_pattern: applying regex r'%s'")
(PUNCT "%")
(ID "pattern_re")
(PUNCT ".")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "allfiles")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "findall")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "allfiles")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pattern_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT " adding ")
(PUNCT "+")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "files_found")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "files_found")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exclude_pattern")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "is_regex")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        ")
(NEWLINE)
(ID "files_found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "pattern_re")
(PUNCT "=")
(ID "translate_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "is_regex")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "exclude_pattern: applying regex r'%s'")
(PUNCT "%")
(ID "pattern_re")
(PUNCT ".")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pattern_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT " removing ")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "files_found")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "files_found")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "findall")
(PUNCT "(")
(ID "dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find all files under 'dir' and return the list of full filenames\n    (relative to 'dir').\n    ")
(NEWLINE)
(KEYWORD from)
(ID "stat")
(KEYWORD import)
(ID "ST_MODE")
(PUNCT ",")
(ID "S_ISREG")
(PUNCT ",")
(ID "S_ISDIR")
(PUNCT ",")
(ID "S_ISLNK")
(NEWLINE)
(ID "list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "stack")
(PUNCT "=")
(PUNCT "[")
(ID "dir")
(PUNCT "]")
(NEWLINE)
(ID "pop")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "pop")
(NEWLINE)
(ID "push")
(PUNCT "=")
(ID "stack")
(PUNCT ".")
(ID "append")
(NEWLINE)
(KEYWORD while)
(ID "stack")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "dir")
(PUNCT "!=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fullname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fullname")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(ID "stat")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "stat")
(PUNCT "[")
(ID "ST_MODE")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "S_ISREG")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "S_ISDIR")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "S_ISLNK")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "push")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "list")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "glob_to_re")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Translate a shell-like glob pattern to a regular expression; return\n    a string containing the regex.  Differs from 'fnmatch.translate()' in\n    that '*' does not match \"special characters\" (which are\n    platform-specific).\n    ")
(NEWLINE)
(ID "pattern_re")
(PUNCT "=")
(ID "fnmatch")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "sep")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "\\\\\\\\")
(NEWLINE)
(DEDENT)
(ID "escaped")
(PUNCT "=")
(LIT "\\1[^%s]")
(PUNCT "%")
(ID "sep")
(NEWLINE)
(ID "pattern_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "((?<!\\\\)(\\\\\\\\)*)\\.")
(PUNCT ",")
(ID "escaped")
(PUNCT ",")
(ID "pattern_re")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "pattern_re")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "translate_pattern")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "is_regex")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Translate a shell-like wildcard pattern to a compiled regular\n    expression.  Return the compiled regex.  If 'is_regex' true,\n    then 'pattern' is directly compiled to a regex (if it's a string)\n    or just returned as-is (assumes it's a regex object).\n    ")
(NEWLINE)
(KEYWORD if)
(ID "is_regex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "pattern")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "pattern")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern_re")
(PUNCT "=")
(ID "glob_to_re")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern_re")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "prefix")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "empty_pattern")
(PUNCT "=")
(ID "glob_to_re")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "prefix_re")
(PUNCT "=")
(ID "glob_to_re")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "empty_pattern")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "sep")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "\\\\")
(NEWLINE)
(DEDENT)
(ID "pattern_re")
(PUNCT "=")
(LIT "^")
(PUNCT "+")
(ID "sep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "(")
(ID "prefix_re")
(PUNCT ",")
(LIT ".*")
(PUNCT "+")
(ID "pattern_re")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "anchor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pattern_re")
(PUNCT "=")
(LIT "^")
(PUNCT "+")
(ID "pattern_re")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "pattern_re")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
