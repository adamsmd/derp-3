(LIT "\nDefine names for built-in types that aren't directly accessible as a builtin.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD def)
(ID "_f")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(ID "FunctionType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "_f")
(PUNCT ")")
(NEWLINE)
(ID "LambdaType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(KEYWORD lambda)
(PUNCT ":")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "CodeType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "_f")
(PUNCT ".")
(ID "__code__")
(PUNCT ")")
(NEWLINE)
(ID "MappingProxyType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "type")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(ID "SimpleNamespace")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_g")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "GeneratorType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "_g")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_C")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_m")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "MethodType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "_C")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_m")
(PUNCT ")")
(NEWLINE)
(ID "BuiltinFunctionType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "len")
(PUNCT ")")
(NEWLINE)
(ID "BuiltinMethodType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT ")")
(NEWLINE)
(ID "ModuleType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "sys")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "TracebackType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(ID "FrameType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "tb")
(PUNCT ".")
(ID "tb_frame")
(PUNCT ")")
(NEWLINE)
(ID "tb")
(PUNCT "=")
(KEYWORD None)
(PUNCT ";")
(KEYWORD del)
(ID "tb")
(NEWLINE)
(DEDENT)
(ID "GetSetDescriptorType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "FunctionType")
(PUNCT ".")
(ID "__code__")
(PUNCT ")")
(NEWLINE)
(ID "MemberDescriptorType")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "FunctionType")
(PUNCT ".")
(ID "__globals__")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "sys")
(PUNCT ",")
(ID "_f")
(PUNCT ",")
(ID "_g")
(PUNCT ",")
(ID "_C")
(PUNCT ",")
(NEWLINE)
(KEYWORD def)
(ID "new_class")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "bases")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "kwds")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "exec_body")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a class object dynamically using the appropriate metaclass.")
(NEWLINE)
(ID "meta")
(PUNCT ",")
(ID "ns")
(PUNCT ",")
(ID "kwds")
(PUNCT "=")
(ID "prepare_class")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "bases")
(PUNCT ",")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exec_body")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec_body")
(PUNCT "(")
(ID "ns")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "meta")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "bases")
(PUNCT ",")
(ID "ns")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prepare_class")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "bases")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "kwds")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call the __prepare__ method of the appropriate metaclass.\n\n    Returns (metaclass, namespace, kwds) as a 3-tuple\n\n    *metaclass* is the appropriate metaclass\n    *namespace* is the prepared class namespace\n    *kwds* is an updated copy of the passed in kwds argument with any\n    'metaclass' entry removed. If no kwds argument is passed in, this will\n    be an empty dict.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "kwds")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwds")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kwds")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "metaclass")
(KEYWORD in)
(ID "kwds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meta")
(PUNCT "=")
(ID "kwds")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "metaclass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "bases")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meta")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "bases")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meta")
(PUNCT "=")
(ID "type")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "meta")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meta")
(PUNCT "=")
(ID "_calculate_meta")
(PUNCT "(")
(ID "meta")
(PUNCT ",")
(ID "bases")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "meta")
(PUNCT ",")
(LIT "__prepare__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT "=")
(ID "meta")
(PUNCT ".")
(ID "__prepare__")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "bases")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "meta")
(PUNCT ",")
(ID "ns")
(PUNCT ",")
(ID "kwds")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_calculate_meta")
(PUNCT "(")
(ID "meta")
(PUNCT ",")
(ID "bases")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate the most derived metaclass.")
(NEWLINE)
(ID "winner")
(PUNCT "=")
(ID "meta")
(NEWLINE)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "bases")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base_meta")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "winner")
(PUNCT ",")
(ID "base_meta")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "base_meta")
(PUNCT ",")
(ID "winner")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "winner")
(PUNCT "=")
(ID "base_meta")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "metaclass conflict: ")
(LIT "the metaclass of a derived class ")
(LIT "must be a (non-strict) subclass ")
(LIT "of the metaclasses of all its bases")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "winner")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "DynamicClassAttribute")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Route attribute access on a class to __getattr__.\n\n    This is a descriptor, used to define attributes that act differently when\n    accessed through an instance and through a class.  Instance access remains\n    normal, but access to an attribute through a class will be routed to the\n    class's __getattr__ method; this is done by raising AttributeError.\n\n    This allows one to have properties active on an instance, and have virtual\n    attributes on the class with the same name (see Enum for an example).\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fget")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fset")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fdel")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "doc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fget")
(PUNCT "=")
(ID "fget")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fset")
(PUNCT "=")
(ID "fset")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fdel")
(PUNCT "=")
(ID "fdel")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "doc")
(KEYWORD or)
(ID "fget")
(PUNCT ".")
(ID "__doc__")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "overwrite_doc")
(PUNCT "=")
(ID "doc")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__isabstractmethod__")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "fget")
(PUNCT ",")
(LIT "__isabstractmethod__")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__get__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "instance")
(PUNCT ",")
(ID "ownerclass")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "instance")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__isabstractmethod__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "fget")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "unreadable attribute")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "fget")
(PUNCT "(")
(ID "instance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__set__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "instance")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fset")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "can't set attribute")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fset")
(PUNCT "(")
(ID "instance")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__delete__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "instance")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fdel")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "can't delete attribute")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fdel")
(PUNCT "(")
(ID "instance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fdoc")
(PUNCT "=")
(ID "fget")
(PUNCT ".")
(ID "__doc__")
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "overwrite_doc")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "(")
(ID "fget")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fset")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fdel")
(PUNCT ",")
(ID "fdoc")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__doc__")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "overwrite_doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "overwrite_doc")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fget")
(PUNCT ",")
(ID "fset")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fdel")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__doc__")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "overwrite_doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "overwrite_doc")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "deleter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fdel")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fget")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fset")
(PUNCT ",")
(ID "fdel")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__doc__")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "overwrite_doc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "overwrite_doc")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
