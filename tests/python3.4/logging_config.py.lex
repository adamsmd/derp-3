(LIT "\nConfiguration functions for the logging package for Python. The core package\nis based on PEP 282 and comments thereto in comp.lang.python, and influenced\nby Apache's log4j system.\n\nCopyright (C) 2001-2014 Vinay Sajip. All Rights Reserved.\n\nTo use, simply 'import logging' and log away!\n")
(NEWLINE)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(PUNCT ".")
(ID "handlers")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_thread")
(KEYWORD as)
(ID "thread")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thread")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "socketserver")
(KEYWORD import)
(ID "ThreadingTCPServer")
(PUNCT ",")
(ID "StreamRequestHandler")
(NEWLINE)
(ID "DEFAULT_LOGGING_CONFIG_PORT")
(PUNCT "=")
(LIT 9030)
(NEWLINE)
(ID "RESET_ERROR")
(PUNCT "=")
(ID "errno")
(PUNCT ".")
(ID "ECONNRESET")
(NEWLINE)
(ID "_listener")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "fileConfig")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "defaults")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "disable_existing_loggers")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Read the logging configuration from a ConfigParser-format file.\n\n    This can be called several times from an application, allowing an end user\n    the ability to select from various pre-canned configurations (if the\n    developer provides a mechanism to present the choices and load the chosen\n    configuration).\n    ")
(NEWLINE)
(KEYWORD import)
(ID "configparser")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "configparser")
(PUNCT ".")
(ID "RawConfigParser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cp")
(PUNCT "=")
(ID "fname")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cp")
(PUNCT "=")
(ID "configparser")
(PUNCT ".")
(ID "ConfigParser")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(LIT "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cp")
(PUNCT ".")
(ID "read_file")
(PUNCT "(")
(ID "fname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "fname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "formatters")
(PUNCT "=")
(ID "_create_formatters")
(PUNCT "(")
(ID "cp")
(PUNCT ")")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "logging")
(PUNCT ".")
(ID "_handlerList")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "handlers")
(PUNCT "=")
(ID "_install_handlers")
(PUNCT "(")
(ID "cp")
(PUNCT ",")
(ID "formatters")
(PUNCT ")")
(NEWLINE)
(ID "_install_loggers")
(PUNCT "(")
(ID "cp")
(PUNCT ",")
(ID "handlers")
(PUNCT ",")
(ID "disable_existing_loggers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_resolve")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Resolve a dotted name to a global object.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "used")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "found")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(ID "used")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "used")
(PUNCT "=")
(ID "used")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "n")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "found")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "used")
(PUNCT ")")
(NEWLINE)
(ID "found")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "found")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "found")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_strip_spaces")
(PUNCT "(")
(ID "alist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "map")
(PUNCT "(")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(ID "x")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "alist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_formatters")
(PUNCT "(")
(ID "cp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return formatters")
(NEWLINE)
(ID "flist")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(LIT "formatters")
(PUNCT "]")
(PUNCT "[")
(LIT "keys")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "len")
(PUNCT "(")
(ID "flist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "flist")
(PUNCT "=")
(ID "flist")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "flist")
(PUNCT "=")
(ID "_strip_spaces")
(PUNCT "(")
(ID "flist")
(PUNCT ")")
(NEWLINE)
(ID "formatters")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "form")
(KEYWORD in)
(ID "flist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sectname")
(PUNCT "=")
(LIT "formatter_%s")
(PUNCT "%")
(ID "form")
(NEWLINE)
(ID "fs")
(PUNCT "=")
(ID "cp")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "sectname")
(PUNCT ",")
(LIT "format")
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "fallback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "dfs")
(PUNCT "=")
(ID "cp")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "sectname")
(PUNCT ",")
(LIT "datefmt")
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "fallback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "Formatter")
(NEWLINE)
(ID "class_name")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(ID "sectname")
(PUNCT "]")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "class")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "class_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "_resolve")
(PUNCT "(")
(ID "class_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "c")
(PUNCT "(")
(ID "fs")
(PUNCT ",")
(ID "dfs")
(PUNCT ")")
(NEWLINE)
(ID "formatters")
(PUNCT "[")
(ID "form")
(PUNCT "]")
(PUNCT "=")
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "formatters")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_install_handlers")
(PUNCT "(")
(ID "cp")
(PUNCT ",")
(ID "formatters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Install and return handlers")
(NEWLINE)
(ID "hlist")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(LIT "handlers")
(PUNCT "]")
(PUNCT "[")
(LIT "keys")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "len")
(PUNCT "(")
(ID "hlist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "hlist")
(PUNCT "=")
(ID "hlist")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "hlist")
(PUNCT "=")
(ID "_strip_spaces")
(PUNCT "(")
(ID "hlist")
(PUNCT ")")
(NEWLINE)
(ID "handlers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "fixups")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "hand")
(KEYWORD in)
(ID "hlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "section")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(LIT "handler_%s")
(PUNCT "%")
(ID "hand")
(PUNCT "]")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "class")
(PUNCT "]")
(NEWLINE)
(ID "fmt")
(PUNCT "=")
(ID "section")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "formatter")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "vars")
(PUNCT "(")
(ID "logging")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "NameError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "_resolve")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "args")
(PUNCT "]")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "vars")
(PUNCT "(")
(ID "logging")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "klass")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "level")
(KEYWORD in)
(ID "section")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "level")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "level")
(PUNCT "]")
(NEWLINE)
(ID "h")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "fmt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "setFormatter")
(PUNCT "(")
(ID "formatters")
(PUNCT "[")
(ID "fmt")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "handlers")
(PUNCT ".")
(ID "MemoryHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT "=")
(ID "section")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "target")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fixups")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "h")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "handlers")
(PUNCT "[")
(ID "hand")
(PUNCT "]")
(PUNCT "=")
(ID "h")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "h")
(PUNCT ",")
(ID "t")
(KEYWORD in)
(ID "fixups")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "setTarget")
(PUNCT "(")
(ID "handlers")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "handlers")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_handle_existing_loggers")
(PUNCT "(")
(ID "existing")
(PUNCT ",")
(ID "child_loggers")
(PUNCT ",")
(ID "disable_existing")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    When (re)configuring logging, handle loggers which were in the previous\n    configuration but are not in the new configuration. There's no point\n    deleting them as other threads may continue to hold references to them;\n    and by disabling them, you stop them doing any logging.\n\n    However, don't disable children of named loggers, as that's probably not\n    what was intended by the user. Also, allow existing loggers to NOT be\n    disabled if disable_existing is false.\n    ")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "root")
(NEWLINE)
(KEYWORD for)
(ID "log")
(KEYWORD in)
(ID "existing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "manager")
(PUNCT ".")
(ID "loggerDict")
(PUNCT "[")
(ID "log")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "log")
(KEYWORD in)
(ID "child_loggers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "NOTSET")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "handlers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "propagate")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "disabled")
(PUNCT "=")
(ID "disable_existing")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_install_loggers")
(PUNCT "(")
(ID "cp")
(PUNCT ",")
(ID "handlers")
(PUNCT ",")
(ID "disable_existing")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and install loggers")
(NEWLINE)
(ID "llist")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(LIT "loggers")
(PUNCT "]")
(PUNCT "[")
(LIT "keys")
(PUNCT "]")
(NEWLINE)
(ID "llist")
(PUNCT "=")
(ID "llist")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "llist")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(ID "x")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "llist")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "llist")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(LIT "root")
(PUNCT ")")
(NEWLINE)
(ID "section")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(LIT "logger_root")
(PUNCT "]")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "root")
(NEWLINE)
(ID "log")
(PUNCT "=")
(ID "root")
(NEWLINE)
(KEYWORD if)
(LIT "level")
(KEYWORD in)
(ID "section")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "level")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "level")
(PUNCT "]")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "h")
(KEYWORD in)
(ID "root")
(PUNCT ".")
(ID "handlers")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT ".")
(ID "removeHandler")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "hlist")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "handlers")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "hlist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hlist")
(PUNCT "=")
(ID "hlist")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "hlist")
(PUNCT "=")
(ID "_strip_spaces")
(PUNCT "(")
(ID "hlist")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "hand")
(KEYWORD in)
(ID "hlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "addHandler")
(PUNCT "(")
(ID "handlers")
(PUNCT "[")
(ID "hand")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "existing")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "root")
(PUNCT ".")
(ID "manager")
(PUNCT ".")
(ID "loggerDict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "existing")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "child_loggers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "log")
(KEYWORD in)
(ID "llist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "section")
(PUNCT "=")
(ID "cp")
(PUNCT "[")
(LIT "logger_%s")
(PUNCT "%")
(ID "log")
(PUNCT "]")
(NEWLINE)
(ID "qn")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "qualname")
(PUNCT "]")
(NEWLINE)
(ID "propagate")
(PUNCT "=")
(ID "section")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(LIT "propagate")
(PUNCT ",")
(ID "fallback")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(ID "qn")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "qn")
(KEYWORD in)
(ID "existing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "existing")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "qn")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "prefixed")
(PUNCT "=")
(ID "qn")
(PUNCT "+")
(LIT ".")
(NEWLINE)
(ID "pflen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "prefixed")
(PUNCT ")")
(NEWLINE)
(ID "num_existing")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "existing")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "num_existing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "existing")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(ID "pflen")
(PUNCT "]")
(PUNCT "==")
(ID "prefixed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "child_loggers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "existing")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "existing")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "qn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "level")
(KEYWORD in)
(ID "section")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "level")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "level")
(PUNCT "]")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "h")
(KEYWORD in)
(ID "logger")
(PUNCT ".")
(ID "handlers")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "removeHandler")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "logger")
(PUNCT ".")
(ID "propagate")
(PUNCT "=")
(ID "propagate")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "disabled")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "hlist")
(PUNCT "=")
(ID "section")
(PUNCT "[")
(LIT "handlers")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "hlist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hlist")
(PUNCT "=")
(ID "hlist")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(ID "hlist")
(PUNCT "=")
(ID "_strip_spaces")
(PUNCT "(")
(ID "hlist")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "hand")
(KEYWORD in)
(ID "hlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "addHandler")
(PUNCT "(")
(ID "handlers")
(PUNCT "[")
(ID "hand")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_handle_existing_loggers")
(PUNCT "(")
(ID "existing")
(PUNCT ",")
(ID "child_loggers")
(PUNCT ",")
(ID "disable_existing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "IDENTIFIER")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[a-z_][a-z0-9_]*$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "valid_ident")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "IDENTIFIER")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Not a valid Python identifier: %r")
(PUNCT "%")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ConvertingMixin")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "For ConvertingXXX's, this mixin class provides common functions")
(NEWLINE)
(KEYWORD def)
(ID "convert_with_key")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "replace")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configurator")
(PUNCT ".")
(ID "convert")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD not)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "replace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(ID "ConvertingDict")
(PUNCT ",")
(ID "ConvertingList")
(PUNCT ",")
(ID "ConvertingTuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "parent")
(PUNCT "=")
(ID "self")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "key")
(PUNCT "=")
(ID "key")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "convert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configurator")
(PUNCT ".")
(ID "convert")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD not)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(ID "ConvertingDict")
(PUNCT ",")
(ID "ConvertingList")
(PUNCT ",")
(ID "ConvertingTuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "parent")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ConvertingDict")
(PUNCT "(")
(ID "dict")
(PUNCT ",")
(ID "ConvertingMixin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A converting dictionary wrapper.")
(NEWLINE)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "convert_with_key")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "convert_with_key")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "convert_with_key")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "replace")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ConvertingList")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "ConvertingMixin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A converting list wrapper.")
(NEWLINE)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "list")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "convert_with_key")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "idx")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "list")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "idx")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "convert")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ConvertingTuple")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "ConvertingMixin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A converting tuple wrapper.")
(NEWLINE)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "tuple")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "convert_with_key")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "replace")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BaseConfigurator")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The configurator base class which defines some useful defaults.\n    ")
(NEWLINE)
(ID "CONVERT_PATTERN")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(?P<prefix>[a-z]+)://(?P<suffix>.*)$")
(PUNCT ")")
(NEWLINE)
(ID "WORD_PATTERN")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\s*(\\w+)\\s*")
(PUNCT ")")
(NEWLINE)
(ID "DOT_PATTERN")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\.\\s*(\\w+)\\s*")
(PUNCT ")")
(NEWLINE)
(ID "INDEX_PATTERN")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\[\\s*(\\w+)\\s*\\]\\s*")
(PUNCT ")")
(NEWLINE)
(ID "DIGIT_PATTERN")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\d+$")
(PUNCT ")")
(NEWLINE)
(ID "value_converters")
(PUNCT "=")
(PUNCT "{")
(LIT "ext")
(PUNCT ":")
(LIT "ext_convert")
(PUNCT ",")
(LIT "cfg")
(PUNCT ":")
(LIT "cfg_convert")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "importer")
(PUNCT "=")
(ID "staticmethod")
(PUNCT "(")
(ID "__import__")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "config")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT "=")
(ID "ConvertingDict")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT ".")
(ID "configurator")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resolve")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Resolve strings to objects using standard import and attribute\n        syntax.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "used")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "importer")
(PUNCT "(")
(ID "used")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "frag")
(KEYWORD in)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "used")
(PUNCT "+=")
(LIT ".")
(PUNCT "+")
(ID "frag")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "found")
(PUNCT ",")
(ID "frag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "importer")
(PUNCT "(")
(ID "used")
(PUNCT ")")
(NEWLINE)
(ID "found")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "found")
(PUNCT ",")
(ID "frag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "found")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT ",")
(ID "tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "v")
(PUNCT "=")
(ID "ValueError")
(PUNCT "(")
(LIT "Cannot resolve %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "v")
(PUNCT ".")
(ID "__cause__")
(PUNCT ",")
(ID "v")
(PUNCT ".")
(ID "__traceback__")
(PUNCT "=")
(ID "e")
(PUNCT ",")
(ID "tb")
(NEWLINE)
(KEYWORD raise)
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "ext_convert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default converter for the ext:// protocol.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "resolve")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cfg_convert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default converter for the cfg:// protocol.")
(NEWLINE)
(ID "rest")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "WORD_PATTERN")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to convert %r")
(PUNCT "%")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT "=")
(ID "rest")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "rest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "DOT_PATTERN")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "INDEX_PATTERN")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idx")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "DIGIT_PATTERN")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "idx")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "idx")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT "=")
(ID "rest")
(PUNCT "[")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to convert ")
(LIT "%r at %r")
(PUNCT "%")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "convert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Convert values to an appropriate type. dicts, lists and tuples are\n        replaced by their converting alternatives. Strings are checked to\n        see if they have a conversion format and are converted if they do.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "ConvertingDict")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "ConvertingDict")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "configurator")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "ConvertingList")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "ConvertingList")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "configurator")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "ConvertingTuple")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "ConvertingTuple")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "configurator")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "CONVERT_PATTERN")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groupdict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(LIT "prefix")
(PUNCT "]")
(NEWLINE)
(ID "converter")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "value_converters")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "converter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffix")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(LIT "suffix")
(PUNCT "]")
(NEWLINE)
(ID "converter")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "converter")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "converter")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "configure_custom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "config")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure an object with a user-supplied factory.")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "()")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "resolve")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "props")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "kwargs")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "config")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "config")
(KEYWORD if)
(ID "valid_ident")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "c")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "props")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "props")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "as_tuple")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Utility function which converts lists to tuples.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DictConfigurator")
(PUNCT "(")
(ID "BaseConfigurator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Configure logging using a dictionary-like object to describe the\n    configuration.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do the configuration.")
(NEWLINE)
(ID "config")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "config")
(NEWLINE)
(KEYWORD if)
(LIT "version")
(KEYWORD not)
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "dictionary doesn't specify a version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "config")
(PUNCT "[")
(LIT "version")
(PUNCT "]")
(PUNCT "!=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unsupported version: %s")
(PUNCT "%")
(ID "config")
(PUNCT "[")
(LIT "version")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "incremental")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "incremental")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "EMPTY_DICT")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "incremental")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handlers")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "handlers")
(PUNCT ",")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "No handler found with ")
(LIT "name %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(ID "handler_config")
(PUNCT "=")
(ID "handlers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(ID "level")
(PUNCT "=")
(ID "handler_config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "level")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "level")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "_checkLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure handler ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "loggers")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "loggers")
(PUNCT ",")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "loggers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "configure_logger")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loggers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure logger ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "root")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "root")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "configure_root")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure root ")
(LIT "logger: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "disable_existing")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "disable_existing_loggers")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_handlers")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "logging")
(PUNCT ".")
(ID "_handlerList")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "formatters")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "formatters")
(PUNCT ",")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "formatters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatters")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_formatter")
(PUNCT "(")
(ID "formatters")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure ")
(LIT "formatter %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "filters")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "filters")
(PUNCT ",")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "filters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filters")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_filter")
(PUNCT "(")
(ID "filters")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure ")
(LIT "filter %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "handlers")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "handlers")
(PUNCT ",")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(ID "deferred")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "handlers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_handler")
(PUNCT "(")
(ID "handlers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "handlers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "target not configured yet")
(KEYWORD in)
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "deferred")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure handler ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "deferred")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_handler")
(PUNCT "(")
(ID "handlers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "handlers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure handler ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "root")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "root")
(NEWLINE)
(ID "existing")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "root")
(PUNCT ".")
(ID "manager")
(PUNCT ".")
(ID "loggerDict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "existing")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "child_loggers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "loggers")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "loggers")
(PUNCT ",")
(ID "EMPTY_DICT")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "loggers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "existing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "existing")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "prefixed")
(PUNCT "=")
(ID "name")
(PUNCT "+")
(LIT ".")
(NEWLINE)
(ID "pflen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "prefixed")
(PUNCT ")")
(NEWLINE)
(ID "num_existing")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "existing")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "num_existing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "existing")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(ID "pflen")
(PUNCT "]")
(PUNCT "==")
(ID "prefixed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "child_loggers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "existing")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "existing")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "configure_logger")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loggers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure logger ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_handle_existing_loggers")
(PUNCT "(")
(ID "existing")
(PUNCT ",")
(ID "child_loggers")
(PUNCT ",")
(ID "disable_existing")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "root")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "configure_root")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to configure root ")
(LIT "logger: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "configure_formatter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "config")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a formatter from a dictionary.")
(NEWLINE)
(KEYWORD if)
(LIT "()")
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "factory")
(PUNCT "=")
(ID "config")
(PUNCT "[")
(LIT "()")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_custom")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "te")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "'format'")
(KEYWORD not)
(KEYWORD in)
(ID "str")
(PUNCT "(")
(ID "te")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "config")
(PUNCT "[")
(LIT "fmt")
(PUNCT "]")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "format")
(PUNCT ")")
(NEWLINE)
(ID "config")
(PUNCT "[")
(LIT "()")
(PUNCT "]")
(PUNCT "=")
(ID "factory")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_custom")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "format")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "dfmt")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "datefmt")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "style")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "style")
(PUNCT ",")
(LIT "%")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "Formatter")
(PUNCT "(")
(ID "fmt")
(PUNCT ",")
(ID "dfmt")
(PUNCT ",")
(ID "style")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "configure_filter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "config")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a filter from a dictionary.")
(NEWLINE)
(KEYWORD if)
(LIT "()")
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "configure_custom")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "Filter")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_filters")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filterer")
(PUNCT ",")
(ID "filters")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add filters to a filterer from a list of names.")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "filters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filterer")
(PUNCT ".")
(ID "addFilter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT "[")
(LIT "filters")
(PUNCT "]")
(PUNCT "[")
(ID "f")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to add filter %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "configure_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "config")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a handler from a dictionary.")
(NEWLINE)
(ID "config_copy")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(NEWLINE)
(ID "formatter")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "formatter")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "formatter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formatter")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT "[")
(LIT "formatters")
(PUNCT "]")
(PUNCT "[")
(ID "formatter")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to set formatter ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "formatter")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "level")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "level")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "filters")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "filters")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "()")
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "()")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "resolve")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "factory")
(PUNCT "=")
(ID "c")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cname")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "class")
(PUNCT ")")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "resolve")
(PUNCT "(")
(ID "cname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "handlers")
(PUNCT ".")
(ID "MemoryHandler")
(PUNCT ")")
(KEYWORD and)
(LIT "target")
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "th")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT "[")
(LIT "handlers")
(PUNCT "]")
(PUNCT "[")
(ID "config")
(PUNCT "[")
(LIT "target")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "th")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "Handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "config_copy")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "target not configured yet")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "config")
(PUNCT "[")
(LIT "target")
(PUNCT "]")
(PUNCT "=")
(ID "th")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to set target handler ")
(LIT "%r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "config")
(PUNCT "[")
(LIT "target")
(PUNCT "]")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "issubclass")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "handlers")
(PUNCT ".")
(ID "SMTPHandler")
(PUNCT ")")
(KEYWORD and)
(LIT "mailhost")
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config")
(PUNCT "[")
(LIT "mailhost")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "as_tuple")
(PUNCT "(")
(ID "config")
(PUNCT "[")
(LIT "mailhost")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "issubclass")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(ID "logging")
(PUNCT ".")
(ID "handlers")
(PUNCT ".")
(ID "SysLogHandler")
(PUNCT ")")
(KEYWORD and)
(LIT "address")
(KEYWORD in)
(ID "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config")
(PUNCT "[")
(LIT "address")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "as_tuple")
(PUNCT "(")
(ID "config")
(PUNCT "[")
(LIT "address")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "factory")
(PUNCT "=")
(ID "klass")
(NEWLINE)
(DEDENT)
(ID "props")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "kwargs")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "config")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "config")
(KEYWORD if)
(ID "valid_ident")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "factory")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "te")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "'stream'")
(KEYWORD not)
(KEYWORD in)
(ID "str")
(PUNCT "(")
(ID "te")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "kwargs")
(PUNCT "[")
(LIT "strm")
(PUNCT "]")
(PUNCT "=")
(ID "kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "stream")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "factory")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "formatter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "setFormatter")
(PUNCT "(")
(ID "formatter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "level")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "_checkLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "filters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_filters")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "filters")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "props")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "props")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "result")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_handlers")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "logger")
(PUNCT ",")
(ID "handlers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add handlers to a logger from a list of names.")
(NEWLINE)
(KEYWORD for)
(ID "h")
(KEYWORD in)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "addHandler")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "config")
(PUNCT "[")
(LIT "handlers")
(PUNCT "]")
(PUNCT "[")
(ID "h")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unable to add handler %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "h")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "common_logger_config")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "logger")
(PUNCT ",")
(ID "config")
(PUNCT ",")
(ID "incremental")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Perform configuration which is common to root and non-root loggers.\n        ")
(NEWLINE)
(ID "level")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "level")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "level")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "_checkLevel")
(PUNCT "(")
(ID "level")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "incremental")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "h")
(KEYWORD in)
(ID "logger")
(PUNCT ".")
(ID "handlers")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "removeHandler")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "handlers")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "handlers")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_handlers")
(PUNCT "(")
(ID "logger")
(PUNCT ",")
(ID "handlers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "filters")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "filters")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_filters")
(PUNCT "(")
(ID "logger")
(PUNCT ",")
(ID "filters")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "configure_logger")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "config")
(PUNCT ",")
(ID "incremental")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a non-root logger from a dictionary.")
(NEWLINE)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "common_logger_config")
(PUNCT "(")
(ID "logger")
(PUNCT ",")
(ID "config")
(PUNCT ",")
(ID "incremental")
(PUNCT ")")
(NEWLINE)
(ID "propagate")
(PUNCT "=")
(ID "config")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "propagate")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "propagate")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "propagate")
(PUNCT "=")
(ID "propagate")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "configure_root")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "config")
(PUNCT ",")
(ID "incremental")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a root logger from a dictionary.")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "common_logger_config")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "config")
(PUNCT ",")
(ID "incremental")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dictConfigClass")
(PUNCT "=")
(ID "DictConfigurator")
(NEWLINE)
(KEYWORD def)
(ID "dictConfig")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure logging using a dictionary.")
(NEWLINE)
(ID "dictConfigClass")
(PUNCT "(")
(ID "config")
(PUNCT ")")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "listen")
(PUNCT "(")
(ID "port")
(PUNCT "=")
(ID "DEFAULT_LOGGING_CONFIG_PORT")
(PUNCT ",")
(ID "verify")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Start up a socket server on the specified port, and listen for new\n    configurations.\n\n    These will be sent as a file suitable for processing by fileConfig().\n    Returns a Thread object on which you can call start() to start the server,\n    and which you can join() when appropriate. To stop the server, call\n    stopListening().\n\n    Use the ``verify`` argument to verify any bytes received across the wire\n    from a client. If specified, it should be a callable which receives a\n    single argument - the bytes of configuration data received across the\n    network - and it should return either ``None``, to indicate that the\n    passed in bytes could not be verified and should be discarded, or a\n    byte string which is then passed to the configuration machinery as\n    normal. Note that you can return transformed bytes, e.g. by decrypting\n    the bytes passed in.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "thread")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "listen() needs threading to work")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ConfigStreamHandler")
(PUNCT "(")
(ID "StreamRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Handler for a logging configuration request.\n\n        It expects a completely new logging configuration and uses fileConfig\n        to install it.\n        ")
(NEWLINE)
(KEYWORD def)
(ID "handle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n            Handle a request.\n\n            Each request is expected to be a 4-byte length, packed using\n            struct.pack(\">L\", n), followed by the config file.\n            Uses fileConfig() to do the grunt work.\n            ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "connection")
(NEWLINE)
(ID "chunk")
(PUNCT "=")
(ID "conn")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slen")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT ">L")
(PUNCT ",")
(ID "chunk")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "chunk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "connection")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(ID "slen")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(PUNCT "<")
(ID "slen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "chunk")
(PUNCT "+")
(ID "conn")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(ID "slen")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "verify")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "verify")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "chunk")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "chunk")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "json")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "json")
(PUNCT ".")
(ID "loads")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(ID "dictConfig")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileConfig")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "traceback")
(PUNCT ".")
(ID "print_exc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "ready")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "ready")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "RESET_ERROR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ConfigSocketReceiver")
(PUNCT "(")
(ID "ThreadingTCPServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        A simple TCP socket-based logging config receiver.\n        ")
(NEWLINE)
(ID "allow_reuse_address")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "localhost")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "DEFAULT_LOGGING_CONFIG_PORT")
(PUNCT ",")
(ID "handler")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ready")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "verify")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ThreadingTCPServer")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "abort")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ready")
(PUNCT "=")
(ID "ready")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "verify")
(PUNCT "=")
(ID "verify")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "serve_until_stopped")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "select")
(NEWLINE)
(ID "abort")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "abort")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rd")
(PUNCT ",")
(ID "wr")
(PUNCT ",")
(ID "ex")
(PUNCT "=")
(ID "select")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handle_request")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "abort")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "abort")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Server")
(PUNCT "(")
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rcvr")
(PUNCT ",")
(ID "hdlr")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "verify")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(ID "Server")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rcvr")
(PUNCT "=")
(ID "rcvr")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "hdlr")
(PUNCT "=")
(ID "hdlr")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "verify")
(PUNCT "=")
(ID "verify")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ready")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Event")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "server")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rcvr")
(PUNCT "(")
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ",")
(ID "handler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "hdlr")
(PUNCT ",")
(ID "ready")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ready")
(PUNCT ",")
(ID "verify")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "verify")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "server")
(PUNCT ".")
(ID "server_address")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ready")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD global)
(ID "_listener")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_listener")
(PUNCT "=")
(ID "server")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "server")
(PUNCT ".")
(ID "serve_until_stopped")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "Server")
(PUNCT "(")
(ID "ConfigSocketReceiver")
(PUNCT ",")
(ID "ConfigStreamHandler")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "verify")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stopListening")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Stop the listening server which was created with a call to listen().\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_listener")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "_acquireLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_listener")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_listener")
(PUNCT ".")
(ID "abort")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_listener")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logging")
(PUNCT ".")
(ID "_releaseLock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
