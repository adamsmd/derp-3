(LIT "subprocess - Subprocesses with accessible I/O streams\n\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.  This module\nintends to replace several older modules and functions:\n\nos.system\nos.spawn*\n\nInformation about how the subprocess module can be used to replace these\nmodules and functions can be found below.\n\n\n\nUsing the subprocess module\n===========================\nThis module defines one class called Popen:\n\nclass Popen(args, bufsize=-1, executable=None,\n            stdin=None, stdout=None, stderr=None,\n            preexec_fn=None, close_fds=True, shell=False,\n            cwd=None, env=None, universal_newlines=False,\n            startupinfo=None, creationflags=0,\n            restore_signals=True, start_new_session=False, pass_fds=()):\n\n\nArguments are:\n\nargs should be a string, or a sequence of program arguments.  The\nprogram to execute is normally the first item in the args sequence or\nstring, but can be explicitly set by using the executable argument.\n\nOn POSIX, with shell=False (default): In this case, the Popen class\nuses os.execvp() to execute the child program.  args should normally\nbe a sequence.  A string will be treated as a sequence with the string\nas the only item (the program to execute).\n\nOn POSIX, with shell=True: If args is a string, it specifies the\ncommand string to execute through the shell.  If args is a sequence,\nthe first item specifies the command string, and any additional items\nwill be treated as additional shell arguments.\n\nOn Windows: the Popen class uses CreateProcess() to execute the child\nprogram, which operates on strings.  If args is a sequence, it will be\nconverted to a string using the list2cmdline method.  Please note that\nnot all MS Windows applications interpret the command line the same\nway: The list2cmdline is designed for applications using the same\nrules as the MS C runtime.\n\nbufsize will be supplied as the corresponding argument to the io.open()\nfunction when creating the stdin/stdout/stderr pipe file objects:\n0 means unbuffered (read & write are one system call and can return short),\n1 means line buffered, any other positive value means use a buffer of\napproximately that size.  A negative bufsize, the default, means the system\ndefault of io.DEFAULT_BUFFER_SIZE will be used.\n\nstdin, stdout and stderr specify the executed programs' standard\ninput, standard output and standard error file handles, respectively.\nValid values are PIPE, an existing file descriptor (a positive\ninteger), an existing file object, and None.  PIPE indicates that a\nnew pipe to the child should be created.  With None, no redirection\nwill occur; the child's file handles will be inherited from the\nparent.  Additionally, stderr can be STDOUT, which indicates that the\nstderr data from the applications should be captured into the same\nfile handle as for stdout.\n\nOn POSIX, if preexec_fn is set to a callable object, this object will be\ncalled in the child process just before the child is executed.  The use\nof preexec_fn is not thread safe, using it in the presence of threads\ncould lead to a deadlock in the child process before the new executable\nis executed.\n\nIf close_fds is true, all file descriptors except 0, 1 and 2 will be\nclosed before the child process is executed.  The default for close_fds\nvaries by platform:  Always true on POSIX.  True when stdin/stdout/stderr\nare None on Windows, false otherwise.\n\npass_fds is an optional sequence of file descriptors to keep open between the\nparent and child.  Providing any pass_fds implicitly sets close_fds to true.\n\nif shell is true, the specified command will be executed through the\nshell.\n\nIf cwd is not None, the current directory will be changed to cwd\nbefore the child is executed.\n\nOn POSIX, if restore_signals is True all signals that Python sets to\nSIG_IGN are restored to SIG_DFL in the child process before the exec.\nCurrently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals.  This\nparameter does nothing on Windows.\n\nOn POSIX, if start_new_session is True, the setsid() system call will be made\nin the child process prior to executing the command.\n\nIf env is not None, it defines the environment variables for the new\nprocess.\n\nIf universal_newlines is false, the file objects stdin, stdout and stderr\nare opened as binary files, and no line ending conversion is done.\n\nIf universal_newlines is true, the file objects stdout and stderr are\nopened as a text files, but lines may be terminated by any of '\\n',\nthe Unix end-of-line convention, '\\r', the old Macintosh convention or\n'\\r\\n', the Windows convention.  All of these external representations\nare seen as '\\n' by the Python program.  Also, the newlines attribute\nof the file objects stdout, stdin and stderr are not updated by the\ncommunicate() method.\n\nThe startupinfo and creationflags, if given, will be passed to the\nunderlying CreateProcess() function.  They can specify things such as\nappearance of the main window and priority for the new process.\n(Windows only)\n\n\nThis module also defines some shortcut functions:\n\ncall(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> retcode = subprocess.call([\"ls\", \"-l\"])\n\ncheck_call(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete.  If the\n    exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> subprocess.check_call([\"ls\", \"-l\"])\n    0\n\ngetstatusoutput(cmd):\n    Return (status, output) of executing cmd in a shell.\n\n    Execute the string 'cmd' in a shell with 'check_output' and\n    return a 2-tuple (status, output). Universal newlines mode is used,\n    meaning that the result with be decoded to a string.\n\n    A trailing newline is stripped from the output.\n    The exit status for the command can be interpreted\n    according to the rules for the function 'wait'.  Example:\n\n    >>> subprocess.getstatusoutput('ls /bin/ls')\n    (0, '/bin/ls')\n    >>> subprocess.getstatusoutput('cat /bin/junk')\n    (256, 'cat: /bin/junk: No such file or directory')\n    >>> subprocess.getstatusoutput('/bin/junk')\n    (256, 'sh: /bin/junk: not found')\n\ngetoutput(cmd):\n    Return output (stdout or stderr) of executing cmd in a shell.\n\n    Like getstatusoutput(), except the exit status is ignored and the return\n    value is a string containing the command's output.  Example:\n\n    >>> subprocess.getoutput('ls /bin/ls')\n    '/bin/ls'\n\ncheck_output(*popenargs, **kwargs):\n    Run command with arguments and return its output.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> output = subprocess.check_output([\"ls\", \"-l\", \"/dev/null\"])\n\n    There is an additional optional argument, \"input\", allowing you to\n    pass a string to the subprocess's stdin.  If you use this argument\n    you may not also use the Popen constructor's \"stdin\" argument.\n\nExceptions\n----------\nExceptions raised in the child process, before the new program has\nstarted to execute, will be re-raised in the parent.  Additionally,\nthe exception object will have one extra attribute called\n'child_traceback', which is a string containing traceback information\nfrom the child's point of view.\n\nThe most common exception raised is OSError.  This occurs, for\nexample, when trying to execute a non-existent file.  Applications\nshould prepare for OSErrors.\n\nA ValueError will be raised if Popen is called with invalid arguments.\n\nExceptions defined within this module inherit from SubprocessError.\ncheck_call() and check_output() will raise CalledProcessError if the\ncalled process returns a non-zero return code.  TimeoutExpired\nbe raised if a timeout was specified and expired.\n\n\nSecurity\n--------\nUnlike some other popen functions, this implementation will never call\n/bin/sh implicitly.  This means that all characters, including shell\nmetacharacters, can safely be passed to child processes.\n\n\nPopen objects\n=============\nInstances of the Popen class have the following methods:\n\npoll()\n    Check if child process has terminated.  Returns returncode\n    attribute.\n\nwait()\n    Wait for child process to terminate.  Returns returncode attribute.\n\ncommunicate(input=None)\n    Interact with process: Send data to stdin.  Read data from stdout\n    and stderr, until end-of-file is reached.  Wait for process to\n    terminate.  The optional input argument should be a string to be\n    sent to the child process, or None, if no data should be sent to\n    the child.\n\n    communicate() returns a tuple (stdout, stderr).\n\n    Note: The data read is buffered in memory, so do not use this\n    method if the data size is large or unlimited.\n\nThe following attributes are also available:\n\nstdin\n    If the stdin argument is PIPE, this attribute is a file object\n    that provides input to the child process.  Otherwise, it is None.\n\nstdout\n    If the stdout argument is PIPE, this attribute is a file object\n    that provides output from the child process.  Otherwise, it is\n    None.\n\nstderr\n    If the stderr argument is PIPE, this attribute is file object that\n    provides error output from the child process.  Otherwise, it is\n    None.\n\npid\n    The process ID of the child process.\n\nreturncode\n    The child return code.  A None value indicates that the process\n    hasn't terminated yet.  A negative value -N indicates that the\n    child was terminated by signal N (POSIX only).\n\n\nReplacing older functions with the subprocess module\n====================================================\nIn this section, \"a ==> b\" means that b can be used as a replacement\nfor a.\n\nNote: All functions in this section fail (more or less) silently if\nthe executed program cannot be found; this module raises an OSError\nexception.\n\nIn the following examples, we assume that the subprocess module is\nimported with \"from subprocess import *\".\n\n\nReplacing /bin/sh shell backquote\n---------------------------------\noutput=`mycmd myarg`\n==>\noutput = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]\n\n\nReplacing shell pipe line\n-------------------------\noutput=`dmesg | grep hda`\n==>\np1 = Popen([\"dmesg\"], stdout=PIPE)\np2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\noutput = p2.communicate()[0]\n\n\nReplacing os.system()\n---------------------\nsts = os.system(\"mycmd\" + \" myarg\")\n==>\np = Popen(\"mycmd\" + \" myarg\", shell=True)\npid, sts = os.waitpid(p.pid, 0)\n\nNote:\n\n* Calling the program through the shell is usually not required.\n\n* It's easier to look at the returncode attribute than the\n  exitstatus.\n\nA more real-world example would look like this:\n\ntry:\n    retcode = call(\"mycmd\" + \" myarg\", shell=True)\n    if retcode < 0:\n        print(\"Child was terminated by signal\", -retcode, file=sys.stderr)\n    else:\n        print(\"Child returned\", retcode, file=sys.stderr)\nexcept OSError as e:\n    print(\"Execution failed:\", e, file=sys.stderr)\n\n\nReplacing os.spawn*\n-------------------\nP_NOWAIT example:\n\npid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n==>\npid = Popen([\"/bin/mycmd\", \"myarg\"]).pid\n\n\nP_WAIT example:\n\nretcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n==>\nretcode = call([\"/bin/mycmd\", \"myarg\"])\n\n\nVector example:\n\nos.spawnvp(os.P_NOWAIT, path, args)\n==>\nPopen([path] + args[1:])\n\n\nEnvironment example:\n\nos.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\n==>\nPopen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(ID "mswindows")
(PUNCT "=")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ")")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "signal")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "time")
(KEYWORD import)
(ID "monotonic")
(KEYWORD as)
(ID "_time")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "time")
(KEYWORD import)
(ID "time")
(KEYWORD as)
(ID "_time")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SubprocessError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "CalledProcessError")
(PUNCT "(")
(ID "SubprocessError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This exception is raised when a process run by check_call() or\n    check_output() returns a non-zero exit status.\n    The exit status will be stored in the returncode attribute;\n    check_output() will also store the output in the output attribute.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "returncode")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "output")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(ID "returncode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "output")
(PUNCT "=")
(ID "output")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "Command '%s' returned non-zero exit status %d")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cmd")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "SubprocessError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This exception is raised when the timeout expires while waiting for a\n    child process.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "output")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "output")
(PUNCT "=")
(ID "output")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "Command '%s' timed out after %s seconds")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cmd")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "mswindows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "msvcrt")
(NEWLINE)
(KEYWORD import)
(ID "_winapi")
(NEWLINE)
(KEYWORD class)
(ID "STARTUPINFO")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dwFlags")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "hStdInput")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "hStdOutput")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "hStdError")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "wShowWindow")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_posixsubprocess")
(NEWLINE)
(KEYWORD import)
(ID "select")
(NEWLINE)
(KEYWORD import)
(ID "selectors")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "dummy_threading")
(KEYWORD as)
(ID "threading")
(NEWLINE)
(DEDENT)
(ID "_PIPE_BUF")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "select")
(PUNCT ",")
(LIT "PIPE_BUF")
(PUNCT ",")
(LIT 512)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "selectors")
(PUNCT ",")
(LIT "PollSelector")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PopenSelector")
(PUNCT "=")
(ID "selectors")
(PUNCT ".")
(ID "PollSelector")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PopenSelector")
(PUNCT "=")
(ID "selectors")
(PUNCT ".")
(ID "SelectSelector")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Popen")
(PUNCT ",")
(LIT "PIPE")
(PUNCT ",")
(LIT "STDOUT")
(PUNCT ",")
(LIT "call")
(PUNCT ",")
(LIT "check_call")
(PUNCT ",")
(LIT "getstatusoutput")
(PUNCT ",")
(LIT "getoutput")
(PUNCT ",")
(LIT "check_output")
(PUNCT ",")
(LIT "CalledProcessError")
(PUNCT ",")
(LIT "DEVNULL")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "mswindows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_winapi")
(KEYWORD import)
(PUNCT "(")
(ID "CREATE_NEW_CONSOLE")
(PUNCT ",")
(ID "CREATE_NEW_PROCESS_GROUP")
(PUNCT ",")
(ID "STD_INPUT_HANDLE")
(PUNCT ",")
(ID "STD_OUTPUT_HANDLE")
(PUNCT ",")
(ID "STD_ERROR_HANDLE")
(PUNCT ",")
(ID "SW_HIDE")
(PUNCT ",")
(ID "STARTF_USESTDHANDLES")
(PUNCT ",")
(ID "STARTF_USESHOWWINDOW")
(PUNCT ")")
(NEWLINE)
(ID "__all__")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "CREATE_NEW_CONSOLE")
(PUNCT ",")
(LIT "CREATE_NEW_PROCESS_GROUP")
(PUNCT ",")
(LIT "STD_INPUT_HANDLE")
(PUNCT ",")
(LIT "STD_OUTPUT_HANDLE")
(PUNCT ",")
(LIT "STD_ERROR_HANDLE")
(PUNCT ",")
(LIT "SW_HIDE")
(PUNCT ",")
(LIT "STARTF_USESTDHANDLES")
(PUNCT ",")
(LIT "STARTF_USESHOWWINDOW")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Handle")
(PUNCT "(")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "Close")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "CloseHandle")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CloseHandle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "CloseHandle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "Detach")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "already closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "Handle(%d)")
(PUNCT "%")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__del__")
(PUNCT "=")
(ID "Close")
(NEWLINE)
(ID "__str__")
(PUNCT "=")
(ID "__repr__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "MAXFD")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "sysconf")
(PUNCT "(")
(LIT "SC_OPEN_MAX")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "MAXFD")
(PUNCT "=")
(LIT 256)
(NEWLINE)
(DEDENT)
(ID "_active")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "_cleanup")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "inst")
(KEYWORD in)
(ID "_active")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "inst")
(PUNCT ".")
(ID "_internal_poll")
(PUNCT "(")
(ID "_deadstate")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "res")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_active")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "inst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "PIPE")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "STDOUT")
(PUNCT "=")
(PUNCT "-")
(LIT 2)
(NEWLINE)
(ID "DEVNULL")
(PUNCT "=")
(PUNCT "-")
(LIT 3)
(NEWLINE)
(KEYWORD def)
(ID "_eintr_retry_call")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "InterruptedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_args_from_interpreter_flags")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of command-line arguments reproducing the current\n    settings in sys.flags and sys.warnoptions.")
(NEWLINE)
(ID "flag_opt_map")
(PUNCT "=")
(PUNCT "{")
(LIT "debug")
(PUNCT ":")
(LIT "d")
(PUNCT ",")
(LIT "optimize")
(PUNCT ":")
(LIT "O")
(PUNCT ",")
(LIT "dont_write_bytecode")
(PUNCT ":")
(LIT "B")
(PUNCT ",")
(LIT "no_user_site")
(PUNCT ":")
(LIT "s")
(PUNCT ",")
(LIT "no_site")
(PUNCT ":")
(LIT "S")
(PUNCT ",")
(LIT "ignore_environment")
(PUNCT ":")
(LIT "E")
(PUNCT ",")
(LIT "verbose")
(PUNCT ":")
(LIT "v")
(PUNCT ",")
(LIT "bytes_warning")
(PUNCT ":")
(LIT "b")
(PUNCT ",")
(LIT "quiet")
(PUNCT ":")
(LIT "q")
(PUNCT ",")
(LIT "hash_randomization")
(PUNCT ":")
(LIT "R")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "flag")
(PUNCT ",")
(ID "opt")
(KEYWORD in)
(ID "flag_opt_map")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ",")
(ID "flag")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "v")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flag")
(PUNCT "==")
(LIT "hash_randomization")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-")
(PUNCT "+")
(ID "opt")
(PUNCT "*")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "warnoptions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-W")
(PUNCT "+")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call")
(PUNCT "(")
(PUNCT "*")
(ID "popenargs")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run command with arguments.  Wait for command to complete or\n    timeout, then return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call([\"ls\", \"-l\"])\n    ")
(NEWLINE)
(KEYWORD with)
(ID "Popen")
(PUNCT "(")
(PUNCT "*")
(ID "popenargs")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(KEYWORD as)
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "p")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check_call")
(PUNCT "(")
(PUNCT "*")
(ID "popenargs")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run command with arguments.  Wait for command to complete.  If\n    the exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the call function.  Example:\n\n    check_call([\"ls\", \"-l\"])\n    ")
(NEWLINE)
(ID "retcode")
(PUNCT "=")
(ID "call")
(PUNCT "(")
(PUNCT "*")
(ID "popenargs")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "retcode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "kwargs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cmd")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "popenargs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "CalledProcessError")
(PUNCT "(")
(ID "retcode")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_output")
(PUNCT "(")
(PUNCT "*")
(ID "popenargs")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run command with arguments and return its output.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> check_output([\"ls\", \"-l\", \"/dev/null\"])\n    b'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n\n    The stdout argument is not allowed as it is used internally.\n    To capture standard error in the result, use stderr=STDOUT.\n\n    >>> check_output([\"/bin/sh\", \"-c\",\n    ...               \"ls -l non_existent_file ; exit 0\"],\n    ...              stderr=STDOUT)\n    b'ls: non_existent_file: No such file or directory\\n'\n\n    There is an additional optional argument, \"input\", allowing you to\n    pass a string to the subprocess's stdin.  If you use this argument\n    you may not also use the Popen constructor's \"stdin\" argument, as\n    it too will be used internally.  Example:\n\n    >>> check_output([\"sed\", \"-e\", \"s/foo/bar/\"],\n    ...              input=b\"when in the course of fooman events\\n\")\n    b'when in the course of barman events\\n'\n\n    If universal_newlines=True is passed, the return value will be a\n    string rather than bytes.\n    ")
(NEWLINE)
(KEYWORD if)
(LIT "stdout")
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "stdout argument not allowed, it will be overridden.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "input")
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "stdin")
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "stdin and input arguments may not both be used.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "inputdata")
(PUNCT "=")
(ID "kwargs")
(PUNCT "[")
(LIT "input")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "kwargs")
(PUNCT "[")
(LIT "input")
(PUNCT "]")
(NEWLINE)
(ID "kwargs")
(PUNCT "[")
(LIT "stdin")
(PUNCT "]")
(PUNCT "=")
(ID "PIPE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inputdata")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "Popen")
(PUNCT "(")
(PUNCT "*")
(ID "popenargs")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "PIPE")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(KEYWORD as)
(ID "process")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ",")
(ID "unused_err")
(PUNCT "=")
(ID "process")
(PUNCT ".")
(ID "communicate")
(PUNCT "(")
(ID "inputdata")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TimeoutExpired")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "process")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "output")
(PUNCT ",")
(ID "unused_err")
(PUNCT "=")
(ID "process")
(PUNCT ".")
(ID "communicate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "process")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "output")
(PUNCT "=")
(ID "output")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "process")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "process")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "retcode")
(PUNCT "=")
(ID "process")
(PUNCT ".")
(ID "poll")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "retcode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CalledProcessError")
(PUNCT "(")
(ID "retcode")
(PUNCT ",")
(ID "process")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "output")
(PUNCT "=")
(ID "output")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "output")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "list2cmdline")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Translate a sequence of arguments into a command line\n    string, using the same rules as the MS C runtime:\n\n    1) Arguments are delimited by white space, which is either a\n       space or a tab.\n\n    2) A string surrounded by double quotation marks is\n       interpreted as a single argument, regardless of white space\n       contained within.  A quoted string can be embedded in an\n       argument.\n\n    3) A double quotation mark preceded by a backslash is\n       interpreted as a literal double quotation mark.\n\n    4) Backslashes are interpreted literally, unless they\n       immediately precede a double quotation mark.\n\n    5) If backslashes immediately precede a double quotation mark,\n       every pair of backslashes is interpreted as a literal\n       backslash.  If the number of backslashes is odd, the last\n       backslash escapes the next double quotation mark as\n       described in rule 3.\n    ")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "needquote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "seq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bs_buf")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "needquote")
(PUNCT "=")
(PUNCT "(")
(LIT " ")
(KEYWORD in)
(ID "arg")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(LIT "\t")
(KEYWORD in)
(ID "arg")
(PUNCT ")")
(KEYWORD or)
(KEYWORD not)
(ID "arg")
(NEWLINE)
(KEYWORD if)
(ID "needquote")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "arg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bs_buf")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "c")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\\")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "bs_buf")
(PUNCT ")")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "bs_buf")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\\\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "bs_buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "bs_buf")
(PUNCT ")")
(NEWLINE)
(ID "bs_buf")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "bs_buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "bs_buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "needquote")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "bs_buf")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getstatusoutput")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "    Return (status, output) of executing cmd in a shell.\n\n    Execute the string 'cmd' in a shell with 'check_output' and\n    return a 2-tuple (status, output). Universal newlines mode is used,\n    meaning that the result with be decoded to a string.\n\n    A trailing newline is stripped from the output.\n    The exit status for the command can be interpreted\n    according to the rules for the function 'wait'. Example:\n\n    >>> import subprocess\n    >>> subprocess.getstatusoutput('ls /bin/ls')\n    (0, '/bin/ls')\n    >>> subprocess.getstatusoutput('cat /bin/junk')\n    (256, 'cat: /bin/junk: No such file or directory')\n    >>> subprocess.getstatusoutput('/bin/junk')\n    (256, 'sh: /bin/junk: not found')\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "check_output")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "universal_newlines")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "STDOUT")
(PUNCT ")")
(NEWLINE)
(ID "status")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "CalledProcessError")
(KEYWORD as)
(ID "ex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "ex")
(PUNCT ".")
(ID "output")
(NEWLINE)
(ID "status")
(PUNCT "=")
(ID "ex")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "data")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "status")
(PUNCT ",")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getoutput")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return output (stdout or stderr) of executing cmd in a shell.\n\n    Like getstatusoutput(), except the exit status is ignored and the return\n    value is a string containing the command's output.  Example:\n\n    >>> import subprocess\n    >>> subprocess.getoutput('ls /bin/ls')\n    '/bin/ls'\n    ")
(NEWLINE)
(KEYWORD return)
(ID "getstatusoutput")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_PLATFORM_DEFAULT_CLOSE_FDS")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Popen")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_child_created")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "executable")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "preexec_fn")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "close_fds")
(PUNCT "=")
(ID "_PLATFORM_DEFAULT_CLOSE_FDS")
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "cwd")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "env")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "universal_newlines")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "startupinfo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "creationflags")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "restore_signals")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "start_new_session")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "pass_fds")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create new Popen instance.")
(NEWLINE)
(ID "_cleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_waitpid_lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_communication_started")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "bufsize")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bufsize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "bufsize")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "bufsize must be an integer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mswindows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "preexec_fn")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "preexec_fn is not supported on Windows ")
(LIT "platforms")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "any_stdio_set")
(PUNCT "=")
(PUNCT "(")
(ID "stdin")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "stderr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "close_fds")
(KEYWORD is)
(ID "_PLATFORM_DEFAULT_CLOSE_FDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "any_stdio_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "close_fds")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "close_fds")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "close_fds")
(KEYWORD and)
(ID "any_stdio_set")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "close_fds is not supported on Windows platforms")
(LIT " if you redirect stdin/stdout/stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "close_fds")
(KEYWORD is)
(ID "_PLATFORM_DEFAULT_CLOSE_FDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "close_fds")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pass_fds")
(KEYWORD and)
(KEYWORD not)
(ID "close_fds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "pass_fds overriding close_fds.")
(PUNCT ",")
(ID "RuntimeWarning")
(PUNCT ")")
(NEWLINE)
(ID "close_fds")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "startupinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "startupinfo is only supported on Windows ")
(LIT "platforms")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "creationflags")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "creationflags is only supported on Windows ")
(LIT "platforms")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "universal_newlines")
(PUNCT "=")
(ID "universal_newlines")
(NEWLINE)
(PUNCT "(")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_handles")
(PUNCT "(")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mswindows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p2cwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "open_osfhandle")
(PUNCT "(")
(ID "p2cwrite")
(PUNCT ".")
(ID "Detach")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c2pread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pread")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "open_osfhandle")
(PUNCT "(")
(ID "c2pread")
(PUNCT ".")
(ID "Detach")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "errread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errread")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "open_osfhandle")
(PUNCT "(")
(ID "errread")
(PUNCT ".")
(ID "Detach")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "p2cwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "p2cwrite")
(PUNCT ",")
(LIT "wb")
(PUNCT ",")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "universal_newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "TextIOWrapper")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ",")
(ID "write_through")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "line_buffering")
(PUNCT "=")
(PUNCT "(")
(ID "bufsize")
(PUNCT "==")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "c2pread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "c2pread")
(PUNCT ",")
(LIT "rb")
(PUNCT ",")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "universal_newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "TextIOWrapper")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "errread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "errread")
(PUNCT ",")
(LIT "rb")
(PUNCT ",")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "universal_newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "TextIOWrapper")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_closed_child_pipe_fds")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_execute_child")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "executable")
(PUNCT ",")
(ID "preexec_fn")
(PUNCT ",")
(ID "close_fds")
(PUNCT ",")
(ID "pass_fds")
(PUNCT ",")
(ID "cwd")
(PUNCT ",")
(ID "env")
(PUNCT ",")
(ID "startupinfo")
(PUNCT ",")
(ID "creationflags")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ",")
(ID "restore_signals")
(PUNCT ",")
(ID "start_new_session")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_closed_child_pipe_fds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_close")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "stdin")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_close")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "p2cread")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stdout")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_close")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c2pwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_close")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_devnull")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to_close")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_devnull")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "fd")
(KEYWORD in)
(ID "to_close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_translate_newlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\r")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "traceback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "_maxsize")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_child_created")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_internal_poll")
(PUNCT "(")
(ID "_deadstate")
(PUNCT "=")
(ID "_maxsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "_active")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_active")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_devnull")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_devnull")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_devnull")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "devnull")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "O_RDWR")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_devnull")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "communicate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Interact with process: Send data to stdin.  Read data from\n        stdout and stderr, until end-of-file is reached.  Wait for\n        process to terminate.  The optional input argument should be\n        bytes to be sent to the child process, or None, if no data\n        should be sent to the child.\n\n        communicate() returns a tuple (stdout, stderr).")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_communication_started")
(KEYWORD and)
(ID "input")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Cannot send input after starting communication")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "timeout")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_communication_started")
(KEYWORD and)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "stderr")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "input")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "EPIPE")
(KEYWORD and)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "EINVAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(ID "_eintr_retry_call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "read")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stderr")
(PUNCT "=")
(ID "_eintr_retry_call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "read")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endtime")
(PUNCT "=")
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "timeout")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endtime")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_communicate")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "endtime")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_communication_started")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "sts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "poll")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_internal_poll")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_remaining_time")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "endtime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convenience for _communicate when computing timeouts.")
(NEWLINE)
(KEYWORD if)
(ID "endtime")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "endtime")
(PUNCT "-")
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_timeout")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "endtime")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convenience for checking if a timeout has expired.")
(NEWLINE)
(KEYWORD if)
(ID "endtime")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">")
(ID "endtime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "mswindows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_get_handles")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            ")
(NEWLINE)
(KEYWORD if)
(ID "stdin")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "stdout")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "stderr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "stdin")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "GetStdHandle")
(PUNCT "(")
(ID "_winapi")
(PUNCT ".")
(ID "STD_INPUT_HANDLE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p2cread")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreatePipe")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "p2cread")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "p2cread")
(PUNCT ")")
(NEWLINE)
(ID "_winapi")
(PUNCT ".")
(ID "CloseHandle")
(PUNCT "(")
(ID "_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "stdin")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreatePipe")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "p2cread")
(PUNCT ")")
(PUNCT ",")
(ID "Handle")
(PUNCT "(")
(ID "p2cwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stdin")
(PUNCT "==")
(ID "DEVNULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_get_devnull")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "stdin")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "stdin")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "stdin")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p2cread")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_inheritable")
(PUNCT "(")
(ID "p2cread")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "GetStdHandle")
(PUNCT "(")
(ID "_winapi")
(PUNCT ".")
(ID "STD_OUTPUT_HANDLE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "c2pwrite")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreatePipe")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "c2pwrite")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "c2pwrite")
(PUNCT ")")
(NEWLINE)
(ID "_winapi")
(PUNCT ".")
(ID "CloseHandle")
(PUNCT "(")
(ID "_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "stdout")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreatePipe")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "c2pread")
(PUNCT ")")
(PUNCT ",")
(ID "Handle")
(PUNCT "(")
(ID "c2pwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stdout")
(PUNCT "==")
(ID "DEVNULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_get_devnull")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "stdout")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "stdout")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_inheritable")
(PUNCT "(")
(ID "c2pwrite")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stderr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "GetStdHandle")
(PUNCT "(")
(ID "_winapi")
(PUNCT ".")
(ID "STD_ERROR_HANDLE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "errwrite")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_")
(PUNCT ",")
(ID "errwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreatePipe")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "errwrite")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(ID "_winapi")
(PUNCT ".")
(ID "CloseHandle")
(PUNCT "(")
(ID "_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "stderr")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreatePipe")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "errread")
(PUNCT ")")
(PUNCT ",")
(ID "Handle")
(PUNCT "(")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stderr")
(PUNCT "==")
(ID "STDOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "c2pwrite")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stderr")
(PUNCT "==")
(ID "DEVNULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_get_devnull")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "stderr")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "msvcrt")
(PUNCT ".")
(ID "get_osfhandle")
(PUNCT "(")
(ID "stderr")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "errwrite")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_inheritable")
(PUNCT "(")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_inheritable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a duplicate of handle, which is inheritable")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "DuplicateHandle")
(PUNCT "(")
(ID "_winapi")
(PUNCT ".")
(ID "GetCurrentProcess")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "handle")
(PUNCT ",")
(ID "_winapi")
(PUNCT ".")
(ID "GetCurrentProcess")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(ID "_winapi")
(PUNCT ".")
(ID "DUPLICATE_SAME_ACCESS")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "Handle")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_execute_child")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "executable")
(PUNCT ",")
(ID "preexec_fn")
(PUNCT ",")
(ID "close_fds")
(PUNCT ",")
(ID "pass_fds")
(PUNCT ",")
(ID "cwd")
(PUNCT ",")
(ID "env")
(PUNCT ",")
(ID "startupinfo")
(PUNCT ",")
(ID "creationflags")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ",")
(ID "unused_restore_signals")
(PUNCT ",")
(ID "unused_start_new_session")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute program (MS Windows version)")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "pass_fds")
(PUNCT ",")
(LIT "pass_fds not supported on Windows.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "list2cmdline")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "startupinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startupinfo")
(PUNCT "=")
(ID "STARTUPINFO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "-")
(LIT 1)
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "p2cread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errwrite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startupinfo")
(PUNCT ".")
(ID "dwFlags")
(PUNCT "|=")
(ID "_winapi")
(PUNCT ".")
(ID "STARTF_USESTDHANDLES")
(NEWLINE)
(ID "startupinfo")
(PUNCT ".")
(ID "hStdInput")
(PUNCT "=")
(ID "p2cread")
(NEWLINE)
(ID "startupinfo")
(PUNCT ".")
(ID "hStdOutput")
(PUNCT "=")
(ID "c2pwrite")
(NEWLINE)
(ID "startupinfo")
(PUNCT ".")
(ID "hStdError")
(PUNCT "=")
(ID "errwrite")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startupinfo")
(PUNCT ".")
(ID "dwFlags")
(PUNCT "|=")
(ID "_winapi")
(PUNCT ".")
(ID "STARTF_USESHOWWINDOW")
(NEWLINE)
(ID "startupinfo")
(PUNCT ".")
(ID "wShowWindow")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "SW_HIDE")
(NEWLINE)
(ID "comspec")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "COMSPEC")
(PUNCT ",")
(LIT "cmd.exe")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(LIT "{} /c \"{}\"")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "comspec")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hp")
(PUNCT ",")
(ID "ht")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "tid")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "CreateProcess")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "int")
(PUNCT "(")
(KEYWORD not)
(ID "close_fds")
(PUNCT ")")
(PUNCT ",")
(ID "creationflags")
(PUNCT ",")
(ID "env")
(PUNCT ",")
(ID "cwd")
(PUNCT ",")
(ID "startupinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "p2cread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT ".")
(ID "Close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c2pwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT ".")
(ID "Close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "errwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT ".")
(ID "Close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_devnull")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_devnull")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_child_created")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT "=")
(ID "Handle")
(PUNCT "(")
(ID "hp")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT "=")
(ID "pid")
(NEWLINE)
(ID "_winapi")
(PUNCT ".")
(ID "CloseHandle")
(PUNCT "(")
(ID "ht")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_internal_poll")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "_deadstate")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_WaitForSingleObject")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "WaitForSingleObject")
(PUNCT ",")
(ID "_WAIT_OBJECT_0")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "WAIT_OBJECT_0")
(PUNCT ",")
(ID "_GetExitCodeProcess")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "GetExitCodeProcess")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it can only refer to objects\n            in its local scope.\n\n            ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_WaitForSingleObject")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "==")
(ID "_WAIT_OBJECT_0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(ID "_GetExitCodeProcess")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wait")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "endtime")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wait for child process to terminate.  Returns returncode\n            attribute.")
(NEWLINE)
(KEYWORD if)
(ID "endtime")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "timeout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout_millis")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "INFINITE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout_millis")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "timeout")
(PUNCT "*")
(LIT 1000)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "WaitForSingleObject")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT ",")
(ID "timeout_millis")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT "==")
(ID "_winapi")
(PUNCT ".")
(ID "WAIT_TIMEOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "GetExitCodeProcess")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_readerthread")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fh")
(PUNCT ",")
(ID "buffer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "fh")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fh")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_communicate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "endtime")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(KEYWORD and)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_stdout_buff")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_stdout_buff")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout_thread")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readerthread")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_stdout_buff")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout_thread")
(PUNCT ".")
(ID "daemon")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout_thread")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(KEYWORD and)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_stderr_buff")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_stderr_buff")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr_thread")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readerthread")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_stderr_buff")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr_thread")
(PUNCT ".")
(ID "daemon")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr_thread")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "input")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EPIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EINVAL")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "poll")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdout_thread")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout_thread")
(PUNCT ".")
(ID "is_alive")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stderr_thread")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr_thread")
(PUNCT ".")
(ID "is_alive")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "stdout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "stderr")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stdout_buff")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stderr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stderr_buff")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(ID "stdout")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stderr")
(PUNCT "=")
(ID "stderr")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send_signal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a signal to the process\n            ")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(PUNCT "==")
(ID "signal")
(PUNCT ".")
(ID "SIGTERM")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "terminate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sig")
(PUNCT "==")
(ID "signal")
(PUNCT ".")
(ID "CTRL_C_EVENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ",")
(ID "signal")
(PUNCT ".")
(ID "CTRL_C_EVENT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sig")
(PUNCT "==")
(ID "signal")
(PUNCT ".")
(ID "CTRL_BREAK_EVENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ",")
(ID "signal")
(PUNCT ".")
(ID "CTRL_BREAK_EVENT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unsupported signal: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "terminate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Terminates the process\n            ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_winapi")
(PUNCT ".")
(ID "TerminateProcess")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "PermissionError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rc")
(PUNCT "=")
(ID "_winapi")
(PUNCT ".")
(ID "GetExitCodeProcess")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "rc")
(PUNCT "==")
(ID "_winapi")
(PUNCT ".")
(ID "STILL_ACTIVE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(ID "rc")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "kill")
(PUNCT "=")
(ID "terminate")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_get_handles")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            ")
(NEWLINE)
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "stdin")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stdin")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stdin")
(PUNCT "==")
(ID "DEVNULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_devnull")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "stdin")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "stdin")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p2cread")
(PUNCT "=")
(ID "stdin")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stdout")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stdout")
(PUNCT "==")
(ID "DEVNULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_devnull")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "stdout")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "stdout")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c2pwrite")
(PUNCT "=")
(ID "stdout")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stderr")
(PUNCT "==")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stderr")
(PUNCT "==")
(ID "STDOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "c2pwrite")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stderr")
(PUNCT "==")
(ID "DEVNULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_devnull")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "stderr")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "stderr")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errwrite")
(PUNCT "=")
(ID "stderr")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close_fds")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fds_to_keep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start_fd")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(KEYWORD for)
(ID "fd")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "fds_to_keep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fd")
(PUNCT ">=")
(ID "start_fd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "closerange")
(PUNCT "(")
(ID "start_fd")
(PUNCT ",")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(ID "start_fd")
(PUNCT "=")
(ID "fd")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "start_fd")
(PUNCT "<=")
(ID "MAXFD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "closerange")
(PUNCT "(")
(ID "start_fd")
(PUNCT ",")
(ID "MAXFD")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_execute_child")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "executable")
(PUNCT ",")
(ID "preexec_fn")
(PUNCT ",")
(ID "close_fds")
(PUNCT ",")
(ID "pass_fds")
(PUNCT ",")
(ID "cwd")
(PUNCT ",")
(ID "env")
(PUNCT ",")
(ID "startupinfo")
(PUNCT ",")
(ID "creationflags")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ",")
(ID "restore_signals")
(PUNCT ",")
(ID "start_new_session")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute program (POSIX version)")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "args")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(LIT "/bin/sh")
(PUNCT ",")
(LIT "-c")
(PUNCT "]")
(PUNCT "+")
(ID "args")
(NEWLINE)
(KEYWORD if)
(ID "executable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "executable")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "orig_executable")
(PUNCT "=")
(ID "executable")
(NEWLINE)
(ID "errpipe_read")
(PUNCT ",")
(ID "errpipe_write")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pipe")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "low_fds_to_close")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "errpipe_write")
(PUNCT "<")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "low_fds_to_close")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "errpipe_write")
(PUNCT ")")
(NEWLINE)
(ID "errpipe_write")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "dup")
(PUNCT "(")
(ID "errpipe_write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "low_fd")
(KEYWORD in)
(ID "low_fds_to_close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "low_fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "env")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env_list")
(PUNCT "=")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT "+")
(LIT #"=")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "env")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env_list")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "executable")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable_list")
(PUNCT "=")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable_list")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "fsencode")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT ",")
(ID "executable")
(PUNCT ")")
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "get_exec_path")
(PUNCT "(")
(ID "env")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fds_to_keep")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "pass_fds")
(PUNCT ")")
(NEWLINE)
(ID "fds_to_keep")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "errpipe_write")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT "=")
(ID "_posixsubprocess")
(PUNCT ".")
(ID "fork_exec")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "executable_list")
(PUNCT ",")
(ID "close_fds")
(PUNCT ",")
(ID "sorted")
(PUNCT "(")
(ID "fds_to_keep")
(PUNCT ")")
(PUNCT ",")
(ID "cwd")
(PUNCT ",")
(ID "env_list")
(PUNCT ",")
(ID "p2cread")
(PUNCT ",")
(ID "p2cwrite")
(PUNCT ",")
(ID "c2pread")
(PUNCT ",")
(ID "c2pwrite")
(PUNCT ",")
(ID "errread")
(PUNCT ",")
(ID "errwrite")
(PUNCT ",")
(ID "errpipe_read")
(PUNCT ",")
(ID "errpipe_write")
(PUNCT ",")
(ID "restore_signals")
(PUNCT ",")
(ID "start_new_session")
(PUNCT ",")
(ID "preexec_fn")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_child_created")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "errpipe_write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "devnull_fd")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_devnull")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p2cread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "p2cwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "p2cread")
(PUNCT "!=")
(ID "devnull_fd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "p2cread")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c2pwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "c2pread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "c2pwrite")
(PUNCT "!=")
(ID "devnull_fd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "c2pwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "errwrite")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "errread")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "errwrite")
(PUNCT "!=")
(ID "devnull_fd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "errwrite")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "devnull_fd")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "devnull_fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_closed_child_pipe_fds")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "errpipe_data")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT "=")
(ID "_eintr_retry_call")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "read")
(PUNCT ",")
(ID "errpipe_read")
(PUNCT ",")
(LIT 50000)
(PUNCT ")")
(NEWLINE)
(ID "errpipe_data")
(PUNCT "+=")
(ID "part")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "part")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "errpipe_data")
(PUNCT ")")
(PUNCT ">")
(LIT 50000)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "errpipe_read")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "errpipe_data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_eintr_retry_call")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "ECHILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exception_name")
(PUNCT ",")
(ID "hex_errno")
(PUNCT ",")
(ID "err_msg")
(PUNCT "=")
(PUNCT "(")
(ID "errpipe_data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT #":")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exception_name")
(PUNCT "=")
(LIT #"SubprocessError")
(NEWLINE)
(ID "hex_errno")
(PUNCT "=")
(LIT #"0")
(NEWLINE)
(ID "err_msg")
(PUNCT "=")
(PUNCT "(")
(LIT #"Bad exception data from child: ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "errpipe_data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "child_exception_type")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "builtins")
(PUNCT ",")
(ID "exception_name")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "SubprocessError")
(PUNCT ")")
(NEWLINE)
(ID "err_msg")
(PUNCT "=")
(ID "err_msg")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "errors")
(PUNCT "=")
(LIT "surrogatepass")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "child_exception_type")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(KEYWORD and)
(ID "hex_errno")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errno_num")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "hex_errno")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "child_exec_never_called")
(PUNCT "=")
(PUNCT "(")
(ID "err_msg")
(PUNCT "==")
(LIT "noexec")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "child_exec_never_called")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err_msg")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "errno_num")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err_msg")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "strerror")
(PUNCT "(")
(ID "errno_num")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "errno_num")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "ENOENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "child_exec_never_called")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err_msg")
(PUNCT "+=")
(LIT ": ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "cwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err_msg")
(PUNCT "+=")
(LIT ": ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "orig_executable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "child_exception_type")
(PUNCT "(")
(ID "errno_num")
(PUNCT ",")
(ID "err_msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "child_exception_type")
(PUNCT "(")
(ID "err_msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_handle_exitstatus")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sts")
(PUNCT ",")
(ID "_WIFSIGNALED")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "WIFSIGNALED")
(PUNCT ",")
(ID "_WTERMSIG")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "WTERMSIG")
(PUNCT ",")
(ID "_WIFEXITED")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "WIFEXITED")
(PUNCT ",")
(ID "_WEXITSTATUS")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "WEXITSTATUS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "All callers to this function MUST hold self._waitpid_lock.")
(NEWLINE)
(KEYWORD if)
(ID "_WIFSIGNALED")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(PUNCT "-")
(ID "_WTERMSIG")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_WIFEXITED")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(ID "_WEXITSTATUS")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SubprocessError")
(PUNCT "(")
(LIT "Unknown child exit status!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_internal_poll")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "_deadstate")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_waitpid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT ",")
(ID "_WNOHANG")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "WNOHANG")
(PUNCT ",")
(ID "_ECHILD")
(PUNCT "=")
(ID "errno")
(PUNCT ".")
(ID "ECHILD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it cannot reference anything\n            outside of the local scope (nor can any methods it calls).\n\n            ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_waitpid_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(ID "pid")
(PUNCT ",")
(ID "sts")
(PUNCT "=")
(ID "_waitpid")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ",")
(ID "_WNOHANG")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pid")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handle_exitstatus")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_deadstate")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(ID "_deadstate")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "_ECHILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "returncode")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_waitpid_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_try_wait")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "wait_flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "All callers to this function MUST hold self._waitpid_lock.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "sts")
(PUNCT ")")
(PUNCT "=")
(ID "_eintr_retry_call")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ",")
(ID "wait_flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "ECHILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "pid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pid")
(NEWLINE)
(ID "sts")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wait")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "endtime")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wait for child process to terminate.  Returns returncode\n            attribute.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "endtime")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "endtime")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endtime")
(PUNCT "=")
(ID "_time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "timeout")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "timeout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "endtime")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delay")
(PUNCT "=")
(LIT 0.0005)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_waitpid_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "sts")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_try_wait")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "WNOHANG")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "pid")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "pid")
(KEYWORD or)
(ID "pid")
(PUNCT "==")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "pid")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handle_exitstatus")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_waitpid_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "remaining")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remaining")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "delay")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "delay")
(PUNCT "*")
(LIT 2)
(PUNCT ",")
(ID "remaining")
(PUNCT ",")
(LIT 0.05)
(PUNCT ")")
(NEWLINE)
(ID "time")
(PUNCT ".")
(ID "sleep")
(PUNCT "(")
(ID "delay")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_waitpid_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "returncode")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "sts")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_try_wait")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pid")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handle_exitstatus")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_communicate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "endtime")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdin")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_communication_started")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "input")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "stdout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "stderr")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_communication_started")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fileobj2output")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fileobj2output")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fileobj2output")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fileobj2output")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stderr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fileobj2output")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_save_input")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_view")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "_PopenSelector")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "selector")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdin")
(KEYWORD and)
(ID "input")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_WRITE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_READ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_READ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "selector")
(PUNCT ".")
(ID "get_map")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "timeout")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TimeoutExpired")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ready")
(PUNCT "=")
(ID "selector")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_timeout")
(PUNCT "(")
(ID "endtime")
(PUNCT ",")
(ID "orig_timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "events")
(KEYWORD in)
(ID "ready")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(PUNCT ".")
(ID "fileobj")
(KEYWORD is)
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "input_view")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_input_offset")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_input_offset")
(PUNCT "+")
(ID "_PIPE_BUF")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_input_offset")
(PUNCT "+=")
(ID "os")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "fd")
(PUNCT ",")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EPIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT ".")
(ID "unregister")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_input_offset")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT ".")
(ID "unregister")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "key")
(PUNCT ".")
(ID "fileobj")
(KEYWORD in)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "fd")
(PUNCT ",")
(LIT 32768)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT ".")
(ID "unregister")
(PUNCT "(")
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_fileobj2output")
(PUNCT "[")
(ID "key")
(PUNCT ".")
(ID "fileobj")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remaining_time")
(PUNCT "(")
(ID "endtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stderr")
(PUNCT "=")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "universal_newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_translate_newlines")
(PUNCT "(")
(ID "stdout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stderr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_translate_newlines")
(PUNCT "(")
(ID "stderr")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_save_input")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "stdin")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_input")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_input_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT "=")
(ID "input")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "universal_newlines")
(KEYWORD and)
(ID "input")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_input")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_signal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a signal to the process\n            ")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "kill")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pid")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "terminate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Terminate the process with SIGTERM\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_signal")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGTERM")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "kill")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Kill the process with SIGKILL\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_signal")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGKILL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
