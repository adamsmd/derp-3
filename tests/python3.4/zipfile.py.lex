(LIT "\nRead and write ZIP files.\n\nXXX references to utf-8 need further investigation.\n")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(PUNCT ".")
(ID "util")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(NEWLINE)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD import)
(ID "binascii")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "zlib")
(NEWLINE)
(ID "crc32")
(PUNCT "=")
(ID "zlib")
(PUNCT ".")
(ID "crc32")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zlib")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "crc32")
(PUNCT "=")
(ID "binascii")
(PUNCT ".")
(ID "crc32")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "bz2")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bz2")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "lzma")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lzma")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "BadZipFile")
(PUNCT ",")
(LIT "BadZipfile")
(PUNCT ",")
(LIT "error")
(PUNCT ",")
(LIT "ZIP_STORED")
(PUNCT ",")
(LIT "ZIP_DEFLATED")
(PUNCT ",")
(LIT "ZIP_BZIP2")
(PUNCT ",")
(LIT "ZIP_LZMA")
(PUNCT ",")
(LIT "is_zipfile")
(PUNCT ",")
(LIT "ZipInfo")
(PUNCT ",")
(LIT "ZipFile")
(PUNCT ",")
(LIT "PyZipFile")
(PUNCT ",")
(LIT "LargeZipFile")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "BadZipFile")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "LargeZipFile")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised when writing a zipfile, the zipfile requires ZIP64 extensions\n    and those extensions are disabled.\n    ")
(NEWLINE)
(DEDENT)
(ID "error")
(PUNCT "=")
(ID "BadZipfile")
(PUNCT "=")
(ID "BadZipFile")
(NEWLINE)
(ID "ZIP64_LIMIT")
(PUNCT "=")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(LIT 31)
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "ZIP_FILECOUNT_LIMIT")
(PUNCT "=")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "ZIP_MAX_COMMENT")
(PUNCT "=")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "ZIP_STORED")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "ZIP_DEFLATED")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "ZIP_BZIP2")
(PUNCT "=")
(LIT 12)
(NEWLINE)
(ID "ZIP_LZMA")
(PUNCT "=")
(LIT 14)
(NEWLINE)
(ID "DEFAULT_VERSION")
(PUNCT "=")
(LIT 20)
(NEWLINE)
(ID "ZIP64_VERSION")
(PUNCT "=")
(LIT 45)
(NEWLINE)
(ID "BZIP2_VERSION")
(PUNCT "=")
(LIT 46)
(NEWLINE)
(ID "LZMA_VERSION")
(PUNCT "=")
(LIT 63)
(NEWLINE)
(ID "MAX_EXTRACT_VERSION")
(PUNCT "=")
(LIT 63)
(NEWLINE)
(ID "structEndArchive")
(PUNCT "=")
(LIT #"<4s4H2LH")
(NEWLINE)
(ID "stringEndArchive")
(PUNCT "=")
(LIT #"PK\5\6")
(NEWLINE)
(ID "sizeEndCentDir")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(ID "structEndArchive")
(PUNCT ")")
(NEWLINE)
(ID "_ECD_SIGNATURE")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "_ECD_DISK_NUMBER")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_ECD_DISK_START")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "_ECD_ENTRIES_THIS_DISK")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "_ECD_ENTRIES_TOTAL")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "_ECD_SIZE")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_ECD_OFFSET")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "_ECD_COMMENT_SIZE")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "_ECD_COMMENT")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "_ECD_LOCATION")
(PUNCT "=")
(LIT 9)
(NEWLINE)
(ID "structCentralDir")
(PUNCT "=")
(LIT "<4s4B4HL2L5H2L")
(NEWLINE)
(ID "stringCentralDir")
(PUNCT "=")
(LIT #"PK\1\2")
(NEWLINE)
(ID "sizeCentralDir")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(ID "structCentralDir")
(PUNCT ")")
(NEWLINE)
(ID "_CD_SIGNATURE")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "_CD_CREATE_VERSION")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_CD_CREATE_SYSTEM")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "_CD_EXTRACT_VERSION")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "_CD_EXTRACT_SYSTEM")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "_CD_FLAG_BITS")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_CD_COMPRESS_TYPE")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "_CD_TIME")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "_CD_DATE")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "_CD_CRC")
(PUNCT "=")
(LIT 9)
(NEWLINE)
(ID "_CD_COMPRESSED_SIZE")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(ID "_CD_UNCOMPRESSED_SIZE")
(PUNCT "=")
(LIT 11)
(NEWLINE)
(ID "_CD_FILENAME_LENGTH")
(PUNCT "=")
(LIT 12)
(NEWLINE)
(ID "_CD_EXTRA_FIELD_LENGTH")
(PUNCT "=")
(LIT 13)
(NEWLINE)
(ID "_CD_COMMENT_LENGTH")
(PUNCT "=")
(LIT 14)
(NEWLINE)
(ID "_CD_DISK_NUMBER_START")
(PUNCT "=")
(LIT 15)
(NEWLINE)
(ID "_CD_INTERNAL_FILE_ATTRIBUTES")
(PUNCT "=")
(LIT 16)
(NEWLINE)
(ID "_CD_EXTERNAL_FILE_ATTRIBUTES")
(PUNCT "=")
(LIT 17)
(NEWLINE)
(ID "_CD_LOCAL_HEADER_OFFSET")
(PUNCT "=")
(LIT 18)
(NEWLINE)
(ID "structFileHeader")
(PUNCT "=")
(LIT "<4s2B4HL2L2H")
(NEWLINE)
(ID "stringFileHeader")
(PUNCT "=")
(LIT #"PK\3\4")
(NEWLINE)
(ID "sizeFileHeader")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(ID "structFileHeader")
(PUNCT ")")
(NEWLINE)
(ID "_FH_SIGNATURE")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "_FH_EXTRACT_VERSION")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_FH_EXTRACT_SYSTEM")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "_FH_GENERAL_PURPOSE_FLAG_BITS")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "_FH_COMPRESSION_METHOD")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "_FH_LAST_MOD_TIME")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_FH_LAST_MOD_DATE")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "_FH_CRC")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "_FH_COMPRESSED_SIZE")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "_FH_UNCOMPRESSED_SIZE")
(PUNCT "=")
(LIT 9)
(NEWLINE)
(ID "_FH_FILENAME_LENGTH")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(ID "_FH_EXTRA_FIELD_LENGTH")
(PUNCT "=")
(LIT 11)
(NEWLINE)
(ID "structEndArchive64Locator")
(PUNCT "=")
(LIT "<4sLQL")
(NEWLINE)
(ID "stringEndArchive64Locator")
(PUNCT "=")
(LIT #"PK\6\a")
(NEWLINE)
(ID "sizeEndCentDir64Locator")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(ID "structEndArchive64Locator")
(PUNCT ")")
(NEWLINE)
(ID "structEndArchive64")
(PUNCT "=")
(LIT "<4sQ2H2L4Q")
(NEWLINE)
(ID "stringEndArchive64")
(PUNCT "=")
(LIT #"PK\6\6")
(NEWLINE)
(ID "sizeEndCentDir64")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(ID "structEndArchive64")
(PUNCT ")")
(NEWLINE)
(ID "_CD64_SIGNATURE")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "_CD64_DIRECTORY_RECSIZE")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_CD64_CREATE_VERSION")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "_CD64_EXTRACT_VERSION")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "_CD64_DISK_NUMBER")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "_CD64_DISK_NUMBER_START")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_CD64_NUMBER_ENTRIES_THIS_DISK")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "_CD64_NUMBER_ENTRIES_TOTAL")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "_CD64_DIRECTORY_SIZE")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(ID "_CD64_OFFSET_START_CENTDIR")
(PUNCT "=")
(LIT 9)
(NEWLINE)
(KEYWORD def)
(ID "_check_zipfile")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_EndRecData")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_zipfile")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quickly see if a file is a ZIP file by checking the magic number.\n\n    The filename argument may be a file or file-like object too.\n    ")
(NEWLINE)
(ID "result")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "read")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "_check_zipfile")
(PUNCT "(")
(ID "fp")
(PUNCT "=")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "_check_zipfile")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_EndRecData64")
(PUNCT "(")
(ID "fpin")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "endrec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Read the ZIP64 end-of-archive records and use that to update endrec\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fpin")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT "-")
(ID "sizeEndCentDir64Locator")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "endrec")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "fpin")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "sizeEndCentDir64Locator")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "!=")
(ID "sizeEndCentDir64Locator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "endrec")
(NEWLINE)
(DEDENT)
(ID "sig")
(PUNCT ",")
(ID "diskno")
(PUNCT ",")
(ID "reloff")
(PUNCT ",")
(ID "disks")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "structEndArchive64Locator")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(PUNCT "!=")
(ID "stringEndArchive64Locator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "endrec")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "diskno")
(PUNCT "!=")
(LIT 0)
(KEYWORD or)
(ID "disks")
(PUNCT "!=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "zipfiles that span multiple disks are not supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fpin")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT "-")
(ID "sizeEndCentDir64Locator")
(PUNCT "-")
(ID "sizeEndCentDir64")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "fpin")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "sizeEndCentDir64")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "!=")
(ID "sizeEndCentDir64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "endrec")
(NEWLINE)
(DEDENT)
(ID "sig")
(PUNCT ",")
(ID "sz")
(PUNCT ",")
(ID "create_version")
(PUNCT ",")
(ID "read_version")
(PUNCT ",")
(ID "disk_num")
(PUNCT ",")
(ID "disk_dir")
(PUNCT ",")
(ID "dircount")
(PUNCT ",")
(ID "dircount2")
(PUNCT ",")
(ID "dirsize")
(PUNCT ",")
(ID "diroffset")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "structEndArchive64")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sig")
(PUNCT "!=")
(ID "stringEndArchive64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "endrec")
(NEWLINE)
(DEDENT)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_SIGNATURE")
(PUNCT "]")
(PUNCT "=")
(ID "sig")
(NEWLINE)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_DISK_NUMBER")
(PUNCT "]")
(PUNCT "=")
(ID "disk_num")
(NEWLINE)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_DISK_START")
(PUNCT "]")
(PUNCT "=")
(ID "disk_dir")
(NEWLINE)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_ENTRIES_THIS_DISK")
(PUNCT "]")
(PUNCT "=")
(ID "dircount")
(NEWLINE)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_ENTRIES_TOTAL")
(PUNCT "]")
(PUNCT "=")
(ID "dircount2")
(NEWLINE)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_SIZE")
(PUNCT "]")
(PUNCT "=")
(ID "dirsize")
(NEWLINE)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_OFFSET")
(PUNCT "]")
(PUNCT "=")
(ID "diroffset")
(NEWLINE)
(KEYWORD return)
(ID "endrec")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_EndRecData")
(PUNCT "(")
(ID "fpin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return data from the \"End of Central Directory\" record, or None.\n\n    The data is a list of the nine items in the ZIP \"End of central dir\"\n    record followed by a tenth item, the file seek offset of this record.")
(NEWLINE)
(ID "fpin")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "filesize")
(PUNCT "=")
(ID "fpin")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fpin")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(PUNCT "-")
(ID "sizeEndCentDir")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "fpin")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "==")
(ID "sizeEndCentDir")
(KEYWORD and)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(ID "stringEndArchive")
(KEYWORD and)
(ID "data")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT #"\0\0")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endrec")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "structEndArchive")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "endrec")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "endrec")
(PUNCT ")")
(NEWLINE)
(ID "endrec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(ID "endrec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "filesize")
(PUNCT "-")
(ID "sizeEndCentDir")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_EndRecData64")
(PUNCT "(")
(ID "fpin")
(PUNCT ",")
(PUNCT "-")
(ID "sizeEndCentDir")
(PUNCT ",")
(ID "endrec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "maxCommentStart")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "filesize")
(PUNCT "-")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ")")
(PUNCT "-")
(ID "sizeEndCentDir")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "fpin")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "maxCommentStart")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "fpin")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "start")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(ID "stringEndArchive")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "start")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "recData")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "start")
(PUNCT "+")
(ID "sizeEndCentDir")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "recData")
(PUNCT ")")
(PUNCT "!=")
(ID "sizeEndCentDir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "endrec")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "structEndArchive")
(PUNCT ",")
(ID "recData")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "commentSize")
(PUNCT "=")
(ID "endrec")
(PUNCT "[")
(ID "_ECD_COMMENT_SIZE")
(PUNCT "]")
(NEWLINE)
(ID "comment")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "start")
(PUNCT "+")
(ID "sizeEndCentDir")
(PUNCT ":")
(ID "start")
(PUNCT "+")
(ID "sizeEndCentDir")
(PUNCT "+")
(ID "commentSize")
(PUNCT "]")
(NEWLINE)
(ID "endrec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "comment")
(PUNCT ")")
(NEWLINE)
(ID "endrec")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "maxCommentStart")
(PUNCT "+")
(ID "start")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_EndRecData64")
(PUNCT "(")
(ID "fpin")
(PUNCT ",")
(ID "maxCommentStart")
(PUNCT "+")
(ID "start")
(PUNCT "-")
(ID "filesize")
(PUNCT ",")
(ID "endrec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ZipInfo")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class with attributes describing each file in the ZIP archive.")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "orig_filename")
(PUNCT ",")
(LIT "filename")
(PUNCT ",")
(LIT "date_time")
(PUNCT ",")
(LIT "compress_type")
(PUNCT ",")
(LIT "comment")
(PUNCT ",")
(LIT "extra")
(PUNCT ",")
(LIT "create_system")
(PUNCT ",")
(LIT "create_version")
(PUNCT ",")
(LIT "extract_version")
(PUNCT ",")
(LIT "reserved")
(PUNCT ",")
(LIT "flag_bits")
(PUNCT ",")
(LIT "volume")
(PUNCT ",")
(LIT "internal_attr")
(PUNCT ",")
(LIT "external_attr")
(PUNCT ",")
(LIT "header_offset")
(PUNCT ",")
(LIT "CRC")
(PUNCT ",")
(LIT "compress_size")
(PUNCT ",")
(LIT "file_size")
(PUNCT ",")
(LIT "_raw_time")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(LIT "NoName")
(PUNCT ",")
(ID "date_time")
(PUNCT "=")
(PUNCT "(")
(LIT 1980)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "orig_filename")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(ID "null_byte")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "chr")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "null_byte")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "null_byte")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "!=")
(LIT "/")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "sep")
(KEYWORD in)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "date_time")
(PUNCT "=")
(ID "date_time")
(NEWLINE)
(KEYWORD if)
(ID "date_time")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "<")
(LIT 1980)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "ZIP does not support timestamps before 1980")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "compress_type")
(PUNCT "=")
(ID "ZIP_STORED")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "comment")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extra")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "create_system")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "create_system")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "create_version")
(PUNCT "=")
(ID "DEFAULT_VERSION")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extract_version")
(PUNCT "=")
(ID "DEFAULT_VERSION")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reserved")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "volume")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "internal_attr")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "external_attr")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "FileHeader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "zip64")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the per-file header as a string.")
(NEWLINE)
(ID "dt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "date_time")
(NEWLINE)
(ID "dosdate")
(PUNCT "=")
(PUNCT "(")
(ID "dt")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 1980)
(PUNCT ")")
(PUNCT "<<")
(LIT 9)
(PUNCT "|")
(ID "dt")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "<<")
(LIT 5)
(PUNCT "|")
(ID "dt")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "dostime")
(PUNCT "=")
(ID "dt")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT "<<")
(LIT 11)
(PUNCT "|")
(ID "dt")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT "<<")
(LIT 5)
(PUNCT "|")
(PUNCT "(")
(ID "dt")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(PUNCT "//")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CRC")
(PUNCT "=")
(ID "compress_size")
(PUNCT "=")
(ID "file_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CRC")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "CRC")
(NEWLINE)
(ID "compress_size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compress_size")
(NEWLINE)
(ID "file_size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file_size")
(NEWLINE)
(DEDENT)
(ID "extra")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "extra")
(NEWLINE)
(ID "min_version")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "zip64")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zip64")
(PUNCT "=")
(ID "file_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(KEYWORD or)
(ID "compress_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(LIT "<HHQQ")
(NEWLINE)
(ID "extra")
(PUNCT "=")
(ID "extra")
(PUNCT "+")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "fmt")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(ID "fmt")
(PUNCT ")")
(PUNCT "-")
(LIT 4)
(PUNCT ",")
(ID "file_size")
(PUNCT ",")
(ID "compress_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "file_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(KEYWORD or)
(ID "compress_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "zip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LargeZipFile")
(PUNCT "(")
(LIT "Filesize would require ZIP64 extensions")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "file_size")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(ID "compress_size")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(ID "min_version")
(PUNCT "=")
(ID "ZIP64_VERSION")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_BZIP2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "min_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "BZIP2_VERSION")
(PUNCT ",")
(ID "min_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "min_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "LZMA_VERSION")
(PUNCT ",")
(ID "min_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "extract_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "min_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "extract_version")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "create_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "min_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "create_version")
(PUNCT ")")
(NEWLINE)
(ID "filename")
(PUNCT ",")
(ID "flag_bits")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_encodeFilenameFlags")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "header")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "structFileHeader")
(PUNCT ",")
(ID "stringFileHeader")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "extract_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "reserved")
(PUNCT ",")
(ID "flag_bits")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "compress_type")
(PUNCT ",")
(ID "dostime")
(PUNCT ",")
(ID "dosdate")
(PUNCT ",")
(ID "CRC")
(PUNCT ",")
(ID "compress_size")
(PUNCT ",")
(ID "file_size")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "extra")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "header")
(PUNCT "+")
(ID "filename")
(PUNCT "+")
(ID "extra")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_encodeFilenameFlags")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "flag_bits")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "|")
(LIT 2048)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_decodeExtra")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "extra")
(NEWLINE)
(ID "unpack")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "extra")
(PUNCT ")")
(PUNCT ">=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tp")
(PUNCT ",")
(ID "ln")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<HH")
(PUNCT ",")
(ID "extra")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tp")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ln")
(PUNCT ">=")
(LIT 24)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<QQQ")
(PUNCT ",")
(ID "extra")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 28)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ln")
(PUNCT "==")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<QQ")
(PUNCT ",")
(ID "extra")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 20)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ln")
(PUNCT "==")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts")
(PUNCT "=")
(ID "unpack")
(PUNCT "(")
(LIT "<Q")
(PUNCT ",")
(ID "extra")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ln")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "counts")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Corrupt extra field %s")
(PUNCT "%")
(PUNCT "(")
(ID "ln")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "idx")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "file_size")
(KEYWORD in)
(PUNCT "(")
(LIT 18446744073709551615)
(PUNCT ",")
(LIT 4294967295)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file_size")
(PUNCT "=")
(ID "counts")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(NEWLINE)
(ID "idx")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "compress_size")
(PUNCT "==")
(LIT 4294967295)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(ID "counts")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(NEWLINE)
(ID "idx")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "header_offset")
(PUNCT "==")
(LIT 4294967295)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "old")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "header_offset")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "header_offset")
(PUNCT "=")
(ID "counts")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(NEWLINE)
(ID "idx")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "extra")
(PUNCT "=")
(ID "extra")
(PUNCT "[")
(ID "ln")
(PUNCT "+")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ZipDecrypter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class to handle decryption of files stored within a ZIP archive.\n\n    ZIP supports a password-based form of encryption. Even though known\n    plaintext attacks have been found against it, it is still useful\n    to be able to get data out of such a file.\n\n    Usage:\n        zd = _ZipDecrypter(mypwd)\n        plain_char = zd(cypher_char)\n        plain_text = map(zd, cypher_text)\n    ")
(NEWLINE)
(KEYWORD def)
(ID "_GenerateCRCTable")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate a CRC-32 table.\n\n        ZIP encryption uses the CRC32 one-byte primitive for scrambling some\n        internal keys. We noticed that a direct implementation is faster than\n        relying on binascii.crc32().\n        ")
(NEWLINE)
(ID "poly")
(PUNCT "=")
(LIT 3988292384)
(NEWLINE)
(ID "table")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(LIT 256)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "crc")
(PUNCT "=")
(ID "i")
(NEWLINE)
(KEYWORD for)
(ID "j")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "crc")
(PUNCT "&")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "crc")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "crc")
(PUNCT ">>")
(LIT 1)
(PUNCT ")")
(PUNCT "&")
(LIT 2147483647)
(PUNCT ")")
(PUNCT "^")
(ID "poly")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "crc")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "crc")
(PUNCT ">>")
(LIT 1)
(PUNCT ")")
(PUNCT "&")
(LIT 2147483647)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "table")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "crc")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "table")
(NEWLINE)
(DEDENT)
(ID "crctable")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_crc32")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ch")
(PUNCT ",")
(ID "crc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compute the CRC32 primitive on one byte.")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(PUNCT "(")
(ID "crc")
(PUNCT ">>")
(LIT 8)
(PUNCT ")")
(PUNCT "&")
(LIT 16777215)
(PUNCT ")")
(PUNCT "^")
(ID "self")
(PUNCT ".")
(ID "crctable")
(PUNCT "[")
(PUNCT "(")
(ID "crc")
(PUNCT "^")
(ID "ch")
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pwd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_ZipDecrypter")
(PUNCT ".")
(ID "crctable")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_ZipDecrypter")
(PUNCT ".")
(ID "crctable")
(PUNCT "=")
(ID "_ZipDecrypter")
(PUNCT ".")
(ID "_GenerateCRCTable")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "key0")
(PUNCT "=")
(LIT 305419896)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key1")
(PUNCT "=")
(LIT 591751049)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key2")
(PUNCT "=")
(LIT 878082192)
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "pwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_UpdateKeys")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_UpdateKeys")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "key0")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_crc32")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "key0")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key1")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "key1")
(PUNCT "+")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "key0")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key1")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "key1")
(PUNCT "*")
(LIT 134775813)
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_crc32")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "key1")
(PUNCT ">>")
(LIT 24)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "key2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decrypt a single character.")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(NEWLINE)
(ID "k")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "key2")
(PUNCT "|")
(LIT 2)
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "c")
(PUNCT "^")
(PUNCT "(")
(PUNCT "(")
(PUNCT "(")
(ID "k")
(PUNCT "*")
(PUNCT "(")
(ID "k")
(PUNCT "^")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ">>")
(LIT 8)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_UpdateKeys")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "c")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LZMACompressor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_comp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "props")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "_encode_filter_properties")
(PUNCT "(")
(PUNCT "{")
(LIT "id")
(PUNCT ":")
(ID "lzma")
(PUNCT ".")
(ID "FILTER_LZMA1")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_comp")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "LZMACompressor")
(PUNCT "(")
(ID "lzma")
(PUNCT ".")
(ID "FORMAT_RAW")
(PUNCT ",")
(ID "filters")
(PUNCT "=")
(PUNCT "[")
(ID "lzma")
(PUNCT ".")
(ID "_decode_filter_properties")
(PUNCT "(")
(ID "lzma")
(PUNCT ".")
(ID "FILTER_LZMA1")
(PUNCT ",")
(ID "props")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<BBH")
(PUNCT ",")
(LIT 9)
(PUNCT ",")
(LIT 4)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "props")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "props")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compress")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_comp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_comp")
(PUNCT ".")
(ID "compress")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_comp")
(PUNCT ".")
(ID "compress")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_comp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_comp")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_comp")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LZMADecompressor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_decomp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decompress")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_decomp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT "+=")
(ID "data")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT ")")
(PUNCT "<=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "psize")
(PUNCT ",")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT "<H")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT ")")
(PUNCT "<=")
(LIT 4)
(PUNCT "+")
(ID "psize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_decomp")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "LZMADecompressor")
(PUNCT "(")
(ID "lzma")
(PUNCT ".")
(ID "FORMAT_RAW")
(PUNCT ",")
(ID "filters")
(PUNCT "=")
(PUNCT "[")
(ID "lzma")
(PUNCT ".")
(ID "_decode_filter_properties")
(PUNCT "(")
(ID "lzma")
(PUNCT ".")
(ID "FILTER_LZMA1")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 4)
(PUNCT "+")
(ID "psize")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(PUNCT "[")
(LIT 4)
(PUNCT "+")
(ID "psize")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_unconsumed")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decomp")
(PUNCT ".")
(ID "decompress")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "eof")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decomp")
(PUNCT ".")
(ID "eof")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "compressor_names")
(PUNCT "=")
(PUNCT "{")
(LIT 0)
(PUNCT ":")
(LIT "store")
(PUNCT ",")
(LIT 1)
(PUNCT ":")
(LIT "shrink")
(PUNCT ",")
(LIT 2)
(PUNCT ":")
(LIT "reduce")
(PUNCT ",")
(LIT 3)
(PUNCT ":")
(LIT "reduce")
(PUNCT ",")
(LIT 4)
(PUNCT ":")
(LIT "reduce")
(PUNCT ",")
(LIT 5)
(PUNCT ":")
(LIT "reduce")
(PUNCT ",")
(LIT 6)
(PUNCT ":")
(LIT "implode")
(PUNCT ",")
(LIT 7)
(PUNCT ":")
(LIT "tokenize")
(PUNCT ",")
(LIT 8)
(PUNCT ":")
(LIT "deflate")
(PUNCT ",")
(LIT 9)
(PUNCT ":")
(LIT "deflate64")
(PUNCT ",")
(LIT 10)
(PUNCT ":")
(LIT "implode")
(PUNCT ",")
(LIT 12)
(PUNCT ":")
(LIT "bzip2")
(PUNCT ",")
(LIT 14)
(PUNCT ":")
(LIT "lzma")
(PUNCT ",")
(LIT 18)
(PUNCT ":")
(LIT "terse")
(PUNCT ",")
(LIT 19)
(PUNCT ":")
(LIT "lz77")
(PUNCT ",")
(LIT 97)
(PUNCT ":")
(LIT "wavpack")
(PUNCT ",")
(LIT 98)
(PUNCT ":")
(LIT "ppmd")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_check_compression")
(PUNCT "(")
(ID "compression")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "compression")
(PUNCT "==")
(ID "ZIP_STORED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "compression")
(PUNCT "==")
(ID "ZIP_DEFLATED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "zlib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Compression requires the (missing) zlib module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "compression")
(PUNCT "==")
(ID "ZIP_BZIP2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "bz2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Compression requires the (missing) bz2 module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "compression")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "lzma")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Compression requires the (missing) lzma module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "That compression method is not supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_compressor")
(PUNCT "(")
(ID "compress_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_DEFLATED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "zlib")
(PUNCT ".")
(ID "compressobj")
(PUNCT "(")
(ID "zlib")
(PUNCT ".")
(ID "Z_DEFAULT_COMPRESSION")
(PUNCT ",")
(ID "zlib")
(PUNCT ".")
(ID "DEFLATED")
(PUNCT ",")
(PUNCT "-")
(LIT 15)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_BZIP2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bz2")
(PUNCT ".")
(ID "BZ2Compressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "LZMACompressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_decompressor")
(PUNCT "(")
(ID "compress_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_STORED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_DEFLATED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "zlib")
(PUNCT ".")
(ID "decompressobj")
(PUNCT "(")
(PUNCT "-")
(LIT 15)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_BZIP2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bz2")
(PUNCT ".")
(ID "BZ2Decompressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "LZMADecompressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "descr")
(PUNCT "=")
(ID "compressor_names")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "compress_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "descr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "compression type %d (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "compress_type")
(PUNCT ",")
(ID "descr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "compression type %d")
(PUNCT "%")
(PUNCT "(")
(ID "compress_type")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ZipExtFile")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "BufferedIOBase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "File-like object for reading an archive member.\n       Is returned by ZipFile.open().\n    ")
(NEWLINE)
(ID "MAX_N")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 31)
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "MIN_READ_SIZE")
(PUNCT "=")
(LIT 4096)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"^(?P<chunk>[^\\r\\n]+)|(?P<newline>\\n|\\r\\n?)")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "zipinfo")
(PUNCT ",")
(ID "decrypter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "close_fileobj")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fileobj")
(PUNCT "=")
(ID "fileobj")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_decrypter")
(PUNCT "=")
(ID "decrypter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_close_fileobj")
(PUNCT "=")
(ID "close_fileobj")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_compress_type")
(PUNCT "=")
(ID "zipinfo")
(PUNCT ".")
(ID "compress_type")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "=")
(ID "zipinfo")
(PUNCT ".")
(ID "compress_size")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_left")
(PUNCT "=")
(ID "zipinfo")
(PUNCT ".")
(ID "file_size")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT "=")
(ID "_get_decompressor")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_compress_type")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_universal")
(PUNCT "=")
(LIT "U")
(KEYWORD in)
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "newlines")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_decrypter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "-=")
(LIT 12)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "zipinfo")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "zipinfo")
(PUNCT ",")
(LIT "CRC")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_expected_crc")
(PUNCT "=")
(ID "zipinfo")
(PUNCT ".")
(ID "CRC")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_running_crc")
(PUNCT "=")
(ID "crc32")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_expected_crc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read and return a line from the stream.\n\n        If limit is specified, at most limit bytes will be read.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_universal")
(KEYWORD and)
(ID "limit")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT #"\n")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(ID "i")
(NEWLINE)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_universal")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "io")
(PUNCT ".")
(ID "BufferedIOBase")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "limit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD while)
(ID "limit")
(PUNCT "<")
(LIT 0)
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "<")
(ID "limit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "readahead")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "peek")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "readahead")
(PUNCT "==")
(LIT #"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(ID "match")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "PATTERN")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "readahead")
(PUNCT ")")
(NEWLINE)
(ID "newline")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "newline")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "newline")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "newlines")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newlines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "newline")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "newlines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "newline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "newline")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "line")
(PUNCT "+")
(LIT #"\n")
(NEWLINE)
(DEDENT)
(ID "chunk")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "chunk")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "limit")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "chunk")
(PUNCT "[")
(PUNCT ":")
(ID "limit")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "+=")
(ID "chunk")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "peek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns buffered bytes without advancing the position.")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(ID "chunk")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "+")
(LIT 512)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read and return up to n bytes.\n        If the argument is omitted, None, or negative, data is read and returned until EOF is reached..\n        ")
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "n")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_read1")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "MAX_N")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(ID "end")
(PUNCT "=")
(ID "n")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_offset")
(NEWLINE)
(KEYWORD if)
(ID "end")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "end")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "n")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read1")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(ID "n")
(NEWLINE)
(ID "buf")
(PUNCT "+=")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(ID "n")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT "+=")
(ID "data")
(NEWLINE)
(ID "n")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_update_crc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newdata")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_expected_crc")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_running_crc")
(PUNCT "=")
(ID "crc32")
(PUNCT "(")
(ID "newdata")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_running_crc")
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_eof")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_running_crc")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_expected_crc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "Bad CRC-32 for file %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read1")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read up to n bytes with at most one read() system call.")
(NEWLINE)
(KEYWORD if)
(ID "n")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "n")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read1")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "MAX_N")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "data")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(ID "end")
(PUNCT "=")
(ID "n")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_offset")
(NEWLINE)
(KEYWORD if)
(ID "end")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "end")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read1")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_readbuffer")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_offset")
(PUNCT "=")
(ID "n")
(NEWLINE)
(ID "buf")
(PUNCT "+=")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(ID "n")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "data")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read1")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_eof")
(KEYWORD or)
(ID "n")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_compress_type")
(PUNCT "==")
(ID "ZIP_DEFLATED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "unconsumed_tail")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_read2")
(PUNCT "(")
(ID "n")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read2")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_compress_type")
(PUNCT "==")
(ID "ZIP_STORED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "<=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_compress_type")
(PUNCT "==")
(ID "ZIP_DEFLATED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "MIN_READ_SIZE")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "decompress")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "eof")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "<=")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "unconsumed_tail")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "decompress")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decompressor")
(PUNCT ".")
(ID "eof")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "<=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_left")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_left")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_left")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_eof")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_update_crc")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read2")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "MIN_READ_SIZE")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_compress_left")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EOFError")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_decrypter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_decrypter")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_close_fileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ZipFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Class with methods to open, read, write, close, list zip files.\n\n    z = ZipFile(file, mode=\"r\", compression=ZIP_STORED, allowZip64=True)\n\n    file: Either the path to the file, or a file-like object.\n          If it is a path, the file will be opened and closed by ZipFile.\n    mode: The mode can be either read \"r\", write \"w\" or append \"a\".\n    compression: ZIP_STORED (no compression), ZIP_DEFLATED (requires zlib),\n                 ZIP_BZIP2 (requires bz2) or ZIP_LZMA (requires lzma).\n    allowZip64: if True ZipFile will create files with ZIP64 extensions when\n                needed, otherwise it will raise an exception when this would\n                be necessary.\n\n    ")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_windows_illegal_name_trans_table")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "compression")
(PUNCT "=")
(ID "ZIP_STORED")
(PUNCT ",")
(ID "allowZip64")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open the ZIP file with mode read \"r\", write \"w\" or append \"a\".")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(LIT "a")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "ZipFile() requires mode \"r\", \"w\", or \"a\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_check_compression")
(PUNCT "(")
(ID "compression")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_allowZip64")
(PUNCT "=")
(ID "allowZip64")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compression")
(PUNCT "=")
(ID "compression")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "key")
(PUNCT "=")
(ID "mode")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "b")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_comment")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "modeDict")
(PUNCT "=")
(PUNCT "{")
(LIT "r")
(PUNCT ":")
(LIT "rb")
(PUNCT ",")
(LIT "w")
(PUNCT ":")
(LIT "wb")
(PUNCT ",")
(LIT "a")
(PUNCT ":")
(LIT "r+b")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "modeDict")
(PUNCT "[")
(ID "mode")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "key")
(PUNCT "=")
(LIT "w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "modeDict")
(PUNCT "[")
(ID "mode")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_RealGetContents")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(PUNCT "==")
(LIT "w")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(PUNCT "==")
(LIT "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_RealGetContents")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "start_dir")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "BadZipFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Mode must be \"r\", \"w\" or \"a\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "traceback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_RealGetContents")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read in the table of contents for the ZIP file.")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endrec")
(PUNCT "=")
(ID "_EndRecData")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "File is not a zip file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "endrec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "File is not a zip file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "endrec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "size_cd")
(PUNCT "=")
(ID "endrec")
(PUNCT "[")
(ID "_ECD_SIZE")
(PUNCT "]")
(NEWLINE)
(ID "offset_cd")
(PUNCT "=")
(ID "endrec")
(PUNCT "[")
(ID "_ECD_OFFSET")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_comment")
(PUNCT "=")
(ID "endrec")
(PUNCT "[")
(ID "_ECD_COMMENT")
(PUNCT "]")
(NEWLINE)
(ID "concat")
(PUNCT "=")
(ID "endrec")
(PUNCT "[")
(ID "_ECD_LOCATION")
(PUNCT "]")
(PUNCT "-")
(ID "size_cd")
(PUNCT "-")
(ID "offset_cd")
(NEWLINE)
(KEYWORD if)
(ID "endrec")
(PUNCT "[")
(ID "_ECD_SIGNATURE")
(PUNCT "]")
(PUNCT "==")
(ID "stringEndArchive64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "concat")
(PUNCT "-=")
(PUNCT "(")
(ID "sizeEndCentDir64")
(PUNCT "+")
(ID "sizeEndCentDir64Locator")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inferred")
(PUNCT "=")
(ID "concat")
(PUNCT "+")
(ID "offset_cd")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "given, inferred, offset")
(PUNCT ",")
(ID "offset_cd")
(PUNCT ",")
(ID "inferred")
(PUNCT ",")
(ID "concat")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "start_dir")
(PUNCT "=")
(ID "offset_cd")
(PUNCT "+")
(ID "concat")
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "start_dir")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size_cd")
(PUNCT ")")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "total")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "total")
(PUNCT "<")
(ID "size_cd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "centdir")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "sizeCentralDir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "centdir")
(PUNCT ")")
(PUNCT "!=")
(ID "sizeCentralDir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "Truncated central directory")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "centdir")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "structCentralDir")
(PUNCT ",")
(ID "centdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "centdir")
(PUNCT "[")
(ID "_CD_SIGNATURE")
(PUNCT "]")
(PUNCT "!=")
(ID "stringCentralDir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "Bad magic number for central directory")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "centdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "centdir")
(PUNCT "[")
(ID "_CD_FILENAME_LENGTH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "centdir")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "flags")
(PUNCT "&")
(LIT 2048)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "cp437")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT "=")
(ID "ZipInfo")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "extra")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "centdir")
(PUNCT "[")
(ID "_CD_EXTRA_FIELD_LENGTH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "comment")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "centdir")
(PUNCT "[")
(ID "_CD_COMMENT_LENGTH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "header_offset")
(PUNCT "=")
(ID "centdir")
(PUNCT "[")
(ID "_CD_LOCAL_HEADER_OFFSET")
(PUNCT "]")
(NEWLINE)
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "create_version")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "create_system")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "extract_version")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "reserved")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "flag_bits")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "compress_type")
(PUNCT ",")
(ID "t")
(PUNCT ",")
(ID "d")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "CRC")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "compress_size")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "file_size")
(PUNCT ")")
(PUNCT "=")
(ID "centdir")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "extract_version")
(PUNCT ">")
(ID "MAX_EXTRACT_VERSION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "zip file version %.1f")
(PUNCT "%")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "extract_version")
(PUNCT "/")
(LIT 10)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT ".")
(ID "volume")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "internal_attr")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "external_attr")
(PUNCT "=")
(ID "centdir")
(PUNCT "[")
(LIT 15)
(PUNCT ":")
(LIT 18)
(PUNCT "]")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "_raw_time")
(PUNCT "=")
(ID "t")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "date_time")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "d")
(PUNCT ">>")
(LIT 9)
(PUNCT ")")
(PUNCT "+")
(LIT 1980)
(PUNCT ",")
(PUNCT "(")
(ID "d")
(PUNCT ">>")
(LIT 5)
(PUNCT ")")
(PUNCT "&")
(LIT 15)
(PUNCT ",")
(ID "d")
(PUNCT "&")
(LIT 31)
(PUNCT ",")
(ID "t")
(PUNCT ">>")
(LIT 11)
(PUNCT ",")
(PUNCT "(")
(ID "t")
(PUNCT ">>")
(LIT 5)
(PUNCT ")")
(PUNCT "&")
(LIT 63)
(PUNCT ",")
(PUNCT "(")
(ID "t")
(PUNCT "&")
(LIT 31)
(PUNCT ")")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "_decodeExtra")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "header_offset")
(PUNCT "=")
(ID "x")
(PUNCT ".")
(ID "header_offset")
(PUNCT "+")
(ID "concat")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT "[")
(ID "x")
(PUNCT ".")
(ID "filename")
(PUNCT "]")
(PUNCT "=")
(ID "x")
(NEWLINE)
(ID "total")
(PUNCT "=")
(PUNCT "(")
(ID "total")
(PUNCT "+")
(ID "sizeCentralDir")
(PUNCT "+")
(ID "centdir")
(PUNCT "[")
(ID "_CD_FILENAME_LENGTH")
(PUNCT "]")
(PUNCT "+")
(ID "centdir")
(PUNCT "[")
(ID "_CD_EXTRA_FIELD_LENGTH")
(PUNCT "]")
(PUNCT "+")
(ID "centdir")
(PUNCT "[")
(ID "_CD_COMMENT_LENGTH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "total")
(PUNCT ",")
(ID "total")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "namelist")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of file names in the archive.")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "data")
(PUNCT ".")
(ID "filename")
(KEYWORD for)
(ID "data")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "infolist")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of class ZipInfo instances for files in the\n        archive.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "filelist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "printdir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print a table of contents for the zip file.")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%-46s %19s %12s")
(PUNCT "%")
(PUNCT "(")
(LIT "File Name")
(PUNCT ",")
(LIT "Modified    ")
(PUNCT ",")
(LIT "Size")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "zinfo")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "date")
(PUNCT "=")
(LIT "%d-%02d-%02d %02d:%02d:%02d")
(PUNCT "%")
(ID "zinfo")
(PUNCT ".")
(ID "date_time")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%-46s %s %12d")
(PUNCT "%")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT ",")
(ID "date")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "testzip")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read all the files and check the CRC.")
(NEWLINE)
(ID "chunk_size")
(PUNCT "=")
(LIT 2)
(PUNCT "**")
(LIT 20)
(NEWLINE)
(KEYWORD for)
(ID "zinfo")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "chunk_size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "BadZipFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the instance of ZipInfo given 'name'.")
(NEWLINE)
(ID "info")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "info")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "There is no item named %r in the archive")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "info")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setpassword")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pwd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set default password for encrypted files.")
(NEWLINE)
(KEYWORD if)
(ID "pwd")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "pwd")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "pwd: expected bytes, got %s")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "pwd")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pwd")
(PUNCT "=")
(ID "pwd")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "comment")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The comment text associated with the ZIP file.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_comment")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "comment")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "comment")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "comment")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "comment")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "comment: expected bytes, got %s")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "comment")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "comment")
(PUNCT ")")
(PUNCT ">")
(ID "ZIP_MAX_COMMENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Archive comment is too long; truncating to %d bytes")
(PUNCT "%")
(ID "ZIP_MAX_COMMENT")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "comment")
(PUNCT "=")
(ID "comment")
(PUNCT "[")
(PUNCT ":")
(ID "ZIP_MAX_COMMENT")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_comment")
(PUNCT "=")
(ID "comment")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return file bytes (as a string) for name.")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "r")
(PUNCT ",")
(ID "pwd")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return file-like object for 'name'.")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "U")
(PUNCT ",")
(LIT "rU")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "open() requires mode \"r\", \"U\", or \"rU\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "U")
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "'U' mode is deprecated")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pwd")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "pwd")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "pwd: expected bytes, got %s")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "pwd")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Attempt to read ZIP archive that was already closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zef_file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zef_file")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "ZipInfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getinfo")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "zef_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "fheader")
(PUNCT "=")
(ID "zef_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "sizeFileHeader")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "fheader")
(PUNCT ")")
(PUNCT "!=")
(ID "sizeFileHeader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "Truncated file header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fheader")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "structFileHeader")
(PUNCT ",")
(ID "fheader")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fheader")
(PUNCT "[")
(ID "_FH_SIGNATURE")
(PUNCT "]")
(PUNCT "!=")
(ID "stringFileHeader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "Bad magic number for file header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fname")
(PUNCT "=")
(ID "zef_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "fheader")
(PUNCT "[")
(ID "_FH_FILENAME_LENGTH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fheader")
(PUNCT "[")
(ID "_FH_EXTRA_FIELD_LENGTH")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zef_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "fheader")
(PUNCT "[")
(ID "_FH_EXTRA_FIELD_LENGTH")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "compressed patched data (flag bit 5)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 64)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "strong encryption (flag bit 6)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 2048)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname_str")
(PUNCT "=")
(ID "fname")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname_str")
(PUNCT "=")
(ID "fname")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "cp437")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fname_str")
(PUNCT "!=")
(ID "zinfo")
(PUNCT ".")
(ID "orig_filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadZipFile")
(PUNCT "(")
(LIT "File name in directory %r and header %r differ.")
(PUNCT "%")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "orig_filename")
(PUNCT ",")
(ID "fname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "is_encrypted")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 1)
(NEWLINE)
(ID "zd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "is_encrypted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "pwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pwd")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "pwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "File %s is encrypted, password ")
(LIT "required for extraction")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "zd")
(PUNCT "=")
(ID "_ZipDecrypter")
(PUNCT "(")
(ID "pwd")
(PUNCT ")")
(NEWLINE)
(ID "header")
(PUNCT "=")
(ID "zef_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 12)
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "zd")
(PUNCT ",")
(ID "header")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_byte")
(PUNCT "=")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "_raw_time")
(PUNCT ">>")
(LIT 8)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_byte")
(PUNCT "=")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT ">>")
(LIT 24)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "h")
(PUNCT "[")
(LIT 11)
(PUNCT "]")
(PUNCT "!=")
(ID "check_byte")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Bad password for file")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "ZipExtFile")
(PUNCT "(")
(ID "zef_file")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "zinfo")
(PUNCT ",")
(ID "zd")
(PUNCT ",")
(ID "close_fileobj")
(PUNCT "=")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zef_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "extract")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "member")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract a member from the archive to the current working directory,\n           using its full name. Its file information is extracted as accurately\n           as possible. `member' may be a filename or a ZipInfo object. You can\n           specify a different directory using `path'.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "member")
(PUNCT ",")
(ID "ZipInfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "member")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getinfo")
(PUNCT "(")
(ID "member")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_extract_member")
(PUNCT "(")
(ID "member")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "pwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "extractall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "members")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract all members from the archive to the current working\n           directory. `path' specifies a different directory to extract to.\n           `members' is optional and must be a subset of the list returned\n           by namelist().\n        ")
(NEWLINE)
(KEYWORD if)
(ID "members")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "members")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "namelist")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "zipinfo")
(KEYWORD in)
(ID "members")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "extract")
(PUNCT "(")
(ID "zipinfo")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "pwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_sanitize_windows_name")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "arcname")
(PUNCT ",")
(ID "pathsep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replace bad characters and remove trailing dots from parts.")
(NEWLINE)
(ID "table")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_windows_illegal_name_trans_table")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "illegal")
(PUNCT "=")
(LIT ":<>|\"?*")
(NEWLINE)
(ID "table")
(PUNCT "=")
(ID "str")
(PUNCT ".")
(ID "maketrans")
(PUNCT "(")
(ID "illegal")
(PUNCT ",")
(LIT "_")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "illegal")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "cls")
(PUNCT ".")
(ID "_windows_illegal_name_trans_table")
(PUNCT "=")
(ID "table")
(NEWLINE)
(DEDENT)
(ID "arcname")
(PUNCT "=")
(ID "arcname")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "table")
(PUNCT ")")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "arcname")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "pathsep")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "pathsep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "arcname")
(KEYWORD if)
(ID "x")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "arcname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_extract_member")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "member")
(PUNCT ",")
(ID "targetpath")
(PUNCT ",")
(ID "pwd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract the ZipInfo object 'member' to a physical\n           file on the path targetpath.\n        ")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "member")
(PUNCT ".")
(ID "filename")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "altsep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "arcname")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "altsep")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "arcname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "arcname")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "invalid_path_parts")
(PUNCT "=")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "curdir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "arcname")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(KEYWORD not)
(KEYWORD in)
(ID "invalid_path_parts")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sanitize_windows_name")
(PUNCT "(")
(ID "arcname")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "targetpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(ID "targetpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(ID "upperdirs")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "upperdirs")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "upperdirs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "upperdirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "member")
(PUNCT ".")
(ID "filename")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "targetpath")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "member")
(PUNCT ",")
(ID "pwd")
(PUNCT "=")
(ID "pwd")
(PUNCT ")")
(KEYWORD as)
(ID "source")
(PUNCT ",")
(ID "open")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(KEYWORD as)
(ID "target")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "copyfileobj")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "targetpath")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_writecheck")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "zinfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check for errors before writing a file to the archive.")
(NEWLINE)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Duplicate name: %r")
(PUNCT "%")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "w")
(PUNCT ",")
(LIT "a")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "write() requires mode \"w\" or \"a\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Attempt to write ZIP archive that was already closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_check_compression")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_allowZip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ")")
(PUNCT ">=")
(ID "ZIP_FILECOUNT_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(LIT "Files count")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(LIT "Filesize")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(LIT "Zipfile size")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "requires_zip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LargeZipFile")
(PUNCT "(")
(ID "requires_zip64")
(PUNCT "+")
(LIT " would require ZIP64 extensions")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "compress_type")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put the bytes from filename into the archive under the name\n        arcname.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Attempt to write to ZIP archive that was already closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "st")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "isdir")
(PUNCT "=")
(ID "stat")
(PUNCT ".")
(ID "S_ISDIR")
(PUNCT "(")
(ID "st")
(PUNCT ".")
(ID "st_mode")
(PUNCT ")")
(NEWLINE)
(ID "mtime")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "st")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(NEWLINE)
(ID "date_time")
(PUNCT "=")
(ID "mtime")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "arcname")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(DEDENT)
(ID "arcname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "arcname")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "arcname")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "altsep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "arcname")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "+=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "zinfo")
(PUNCT "=")
(ID "ZipInfo")
(PUNCT "(")
(ID "arcname")
(PUNCT ",")
(ID "date_time")
(PUNCT ")")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT "=")
(PUNCT "(")
(ID "st")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "&")
(LIT 65535)
(PUNCT ")")
(PUNCT "<<")
(LIT 16)
(NEWLINE)
(KEYWORD if)
(ID "compress_type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compression")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "=")
(ID "compress_type")
(NEWLINE)
(DEDENT)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT "=")
(ID "st")
(PUNCT ".")
(ID "st_size")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "|=")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_writecheck")
(PUNCT "(")
(ID "zinfo")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "isdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT "|=")
(LIT 16)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "zinfo")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT "[")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT "]")
(PUNCT "=")
(ID "zinfo")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "FileHeader")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "cmpr")
(PUNCT "=")
(ID "_get_compressor")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT "=")
(ID "CRC")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(ID "compress_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "zip64")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_allowZip64")
(KEYWORD and)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT "*")
(LIT 1.05)
(PUNCT ">")
(ID "ZIP64_LIMIT")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "FileHeader")
(PUNCT "(")
(ID "zip64")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1024)
(PUNCT "*")
(LIT 8)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "file_size")
(PUNCT "=")
(ID "file_size")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "CRC")
(PUNCT "=")
(ID "crc32")
(PUNCT "(")
(ID "buf")
(PUNCT ",")
(ID "CRC")
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(KEYWORD if)
(ID "cmpr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "cmpr")
(PUNCT ".")
(ID "compress")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "compress_size")
(PUNCT "=")
(ID "compress_size")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "cmpr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "cmpr")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "compress_size")
(PUNCT "=")
(ID "compress_size")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(ID "compress_size")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(ID "file_size")
(NEWLINE)
(DEDENT)
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT "=")
(ID "CRC")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT "=")
(ID "file_size")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "zip64")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_allowZip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "file_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "File size has increased during compressing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "compress_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Compressed size larger than uncompressed size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "position")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "FileHeader")
(PUNCT "(")
(ID "zip64")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "position")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "zinfo")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT "[")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT "]")
(PUNCT "=")
(ID "zinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writestr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "zinfo_or_arcname")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "compress_type")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write a file into the archive.  The contents is 'data', which\n        may be either a 'str' or a 'bytes' instance; if it is a 'str',\n        it is encoded as UTF-8 first.\n        'zinfo_or_arcname' is either a ZipInfo instance or\n        the name of the file in the archive.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "zinfo_or_arcname")
(PUNCT ",")
(ID "ZipInfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT "=")
(ID "ZipInfo")
(PUNCT "(")
(ID "filename")
(PUNCT "=")
(ID "zinfo_or_arcname")
(PUNCT ",")
(ID "date_time")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compression")
(NEWLINE)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT "=")
(LIT 16893)
(PUNCT "<<")
(LIT 16)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT "|=")
(LIT 16)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT "=")
(LIT 384)
(PUNCT "<<")
(LIT 16)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT "=")
(ID "zinfo_or_arcname")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Attempt to write to ZIP archive that was already closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "compress_type")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "=")
(ID "compress_type")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "|=")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_writecheck")
(PUNCT "(")
(ID "zinfo")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT "=")
(ID "crc32")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(ID "co")
(PUNCT "=")
(ID "_get_compressor")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "co")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "compress")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "+")
(ID "co")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(NEWLINE)
(DEDENT)
(ID "zip64")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(KEYWORD or)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(NEWLINE)
(KEYWORD if)
(ID "zip64")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_allowZip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LargeZipFile")
(PUNCT "(")
(LIT "Filesize would require ZIP64 extensions")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "FileHeader")
(PUNCT "(")
(ID "zip64")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT "&")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(LIT "<LQQ")
(KEYWORD if)
(ID "zip64")
(KEYWORD else)
(LIT "<LLL")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "fmt")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "zinfo")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "NameToInfo")
(PUNCT "[")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT "]")
(PUNCT "=")
(ID "zinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call the \"close()\" method in case the user forgot.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the file, and for mode \"w\" and \"a\" write the ending\n        records.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "w")
(PUNCT ",")
(LIT "a")
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_didModify")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos1")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "zinfo")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "date_time")
(NEWLINE)
(ID "dosdate")
(PUNCT "=")
(PUNCT "(")
(ID "dt")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "-")
(LIT 1980)
(PUNCT ")")
(PUNCT "<<")
(LIT 9)
(PUNCT "|")
(ID "dt")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "<<")
(LIT 5)
(PUNCT "|")
(ID "dt")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "dostime")
(PUNCT "=")
(ID "dt")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT "<<")
(LIT 11)
(PUNCT "|")
(ID "dt")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT "<<")
(LIT 5)
(PUNCT "|")
(PUNCT "(")
(ID "dt")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(PUNCT "//")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "extra")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(KEYWORD or)
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(PUNCT ")")
(NEWLINE)
(ID "extra")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(PUNCT ")")
(NEWLINE)
(ID "file_size")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(ID "compress_size")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file_size")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "file_size")
(NEWLINE)
(ID "compress_size")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "compress_size")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(PUNCT ")")
(NEWLINE)
(ID "header_offset")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header_offset")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "header_offset")
(NEWLINE)
(DEDENT)
(ID "extra_data")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "extra")
(NEWLINE)
(ID "min_version")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "extra")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_data")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<HH")
(PUNCT "+")
(LIT "Q")
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "extra")
(PUNCT ")")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 8)
(PUNCT "*")
(ID "len")
(PUNCT "(")
(ID "extra")
(PUNCT ")")
(PUNCT ",")
(PUNCT "*")
(ID "extra")
(PUNCT ")")
(PUNCT "+")
(ID "extra_data")
(NEWLINE)
(ID "min_version")
(PUNCT "=")
(ID "ZIP64_VERSION")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_BZIP2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "min_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "BZIP2_VERSION")
(PUNCT ",")
(ID "min_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT "==")
(ID "ZIP_LZMA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "min_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "LZMA_VERSION")
(PUNCT ",")
(ID "min_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "extract_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "min_version")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "extract_version")
(PUNCT ")")
(NEWLINE)
(ID "create_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "min_version")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "create_version")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT ",")
(ID "flag_bits")
(PUNCT "=")
(ID "zinfo")
(PUNCT ".")
(ID "_encodeFilenameFlags")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "centdir")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "structCentralDir")
(PUNCT ",")
(ID "stringCentralDir")
(PUNCT ",")
(ID "create_version")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "create_system")
(PUNCT ",")
(ID "extract_version")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "reserved")
(PUNCT ",")
(ID "flag_bits")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT ",")
(ID "dostime")
(PUNCT ",")
(ID "dosdate")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT ",")
(ID "compress_size")
(PUNCT ",")
(ID "file_size")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "extra_data")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "comment")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "internal_attr")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT ",")
(ID "header_offset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DeprecationWarning")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT "(")
(ID "structCentralDir")
(PUNCT ",")
(ID "stringCentralDir")
(PUNCT ",")
(ID "create_version")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "create_system")
(PUNCT ",")
(ID "extract_version")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "reserved")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "flag_bits")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "compress_type")
(PUNCT ",")
(ID "dostime")
(PUNCT ",")
(ID "dosdate")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "CRC")
(PUNCT ",")
(ID "compress_size")
(PUNCT ",")
(ID "file_size")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "filename")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "extra_data")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "comment")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "internal_attr")
(PUNCT ",")
(ID "zinfo")
(PUNCT ".")
(ID "external_attr")
(PUNCT ",")
(ID "header_offset")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "centdir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "extra_data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zinfo")
(PUNCT ".")
(ID "comment")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pos2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "centDirCount")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ")")
(NEWLINE)
(ID "centDirSize")
(PUNCT "=")
(ID "pos2")
(PUNCT "-")
(ID "pos1")
(NEWLINE)
(ID "centDirOffset")
(PUNCT "=")
(ID "pos1")
(NEWLINE)
(ID "requires_zip64")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "centDirCount")
(PUNCT ">")
(ID "ZIP_FILECOUNT_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(LIT "Files count")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "centDirOffset")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(LIT "Central directory offset")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "centDirSize")
(PUNCT ">")
(ID "ZIP64_LIMIT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "requires_zip64")
(PUNCT "=")
(LIT "Central directory size")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "requires_zip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_allowZip64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LargeZipFile")
(PUNCT "(")
(ID "requires_zip64")
(PUNCT "+")
(LIT " would require ZIP64 extensions")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "zip64endrec")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "structEndArchive64")
(PUNCT ",")
(ID "stringEndArchive64")
(PUNCT ",")
(LIT 44)
(PUNCT ",")
(LIT 45)
(PUNCT ",")
(LIT 45)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "centDirCount")
(PUNCT ",")
(ID "centDirCount")
(PUNCT ",")
(ID "centDirSize")
(PUNCT ",")
(ID "centDirOffset")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zip64endrec")
(PUNCT ")")
(NEWLINE)
(ID "zip64locrec")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "structEndArchive64Locator")
(PUNCT ",")
(ID "stringEndArchive64Locator")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "pos2")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "zip64locrec")
(PUNCT ")")
(NEWLINE)
(ID "centDirCount")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "centDirCount")
(PUNCT ",")
(LIT 65535)
(PUNCT ")")
(NEWLINE)
(ID "centDirSize")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "centDirSize")
(PUNCT ",")
(LIT 4294967295)
(PUNCT ")")
(NEWLINE)
(ID "centDirOffset")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "centDirOffset")
(PUNCT ",")
(LIT 4294967295)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "endrec")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "structEndArchive")
(PUNCT ",")
(ID "stringEndArchive")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "centDirCount")
(PUNCT ",")
(ID "centDirCount")
(PUNCT ",")
(ID "centDirSize")
(PUNCT ",")
(ID "centDirOffset")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_comment")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "endrec")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_comment")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_filePassed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PyZipFile")
(PUNCT "(")
(ID "ZipFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class to create ZIP archives with Python library files and packages.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "compression")
(PUNCT "=")
(ID "ZIP_STORED")
(PUNCT ",")
(ID "allowZip64")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ZipFile")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(ID "mode")
(PUNCT ",")
(ID "compression")
(PUNCT "=")
(ID "compression")
(PUNCT ",")
(ID "allowZip64")
(PUNCT "=")
(ID "allowZip64")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_optimize")
(PUNCT "=")
(ID "optimize")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writepy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pathname")
(PUNCT ",")
(ID "basename")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "filterfunc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add all files from \"pathname\" to the ZIP archive.\n\n        If pathname is a package directory, search the directory and\n        all package subdirectories recursively for all *.py and enter\n        the modules into the archive.  If pathname is a plain\n        directory, listdir *.py and enter all modules.  Else, pathname\n        must be a Python *.py file and the module will be put into the\n        archive.  Added modules are always module.pyo or module.pyc.\n        This method will compile the module.py into module.pyc if\n        necessary.\n        If filterfunc(pathname) is given, it is called with every argument.\n        When it is False, the file or directory is skipped.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "filterfunc")
(KEYWORD and)
(KEYWORD not)
(ID "filterfunc")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "label")
(PUNCT "=")
(LIT "path")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(KEYWORD else)
(LIT "file")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%s \"%s\" skipped by filterfunc")
(PUNCT "%")
(PUNCT "(")
(ID "label")
(PUNCT ",")
(ID "pathname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "dir")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "initname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "pathname")
(PUNCT ",")
(LIT "__init__.py")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "initname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "basename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "basename")
(PUNCT "=")
(LIT "%s/%s")
(PUNCT "%")
(PUNCT "(")
(ID "basename")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "basename")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Adding package in")
(PUNCT ",")
(ID "pathname")
(PUNCT ",")
(LIT "as")
(PUNCT ",")
(ID "basename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_codename")
(PUNCT "(")
(ID "initname")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "basename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Adding")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(ID "dirlist")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(ID "dirlist")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(LIT "__init__.py")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "dirlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "pathname")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "__init__.py")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writepy")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "basename")
(PUNCT ",")
(ID "filterfunc")
(PUNCT "=")
(ID "filterfunc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(PUNCT "==")
(LIT ".py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filterfunc")
(KEYWORD and)
(KEYWORD not)
(ID "filterfunc")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "file \"%s\" skipped by filterfunc")
(PUNCT "%")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_codename")
(PUNCT "(")
(ID "path")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "basename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Adding")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Adding files from directory")
(PUNCT ",")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "pathname")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(PUNCT "==")
(LIT ".py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filterfunc")
(KEYWORD and)
(KEYWORD not)
(ID "filterfunc")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "file \"%s\" skipped by filterfunc")
(PUNCT "%")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_codename")
(PUNCT "(")
(ID "path")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "basename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Adding")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pathname")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(LIT ".py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Files added with writepy() must end with \".py\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_codename")
(PUNCT "(")
(ID "pathname")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "basename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Adding file")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_codename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pathname")
(PUNCT ",")
(ID "basename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return (filename, archivename) for the path.\n\n        Given a module name path, return the correct file path and\n        archive name, compiling if necessary.  For example, given\n        /python/lib/string, return (/python/lib/string.pyc, string).\n        ")
(NEWLINE)
(KEYWORD def)
(ID "_compile")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "py_compile")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Compiling")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "py_compile")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "doraise")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(ID "optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "py_compile")
(PUNCT ".")
(ID "PyCompileError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "file_py")
(PUNCT "=")
(ID "pathname")
(PUNCT "+")
(LIT ".py")
(NEWLINE)
(ID "file_pyc")
(PUNCT "=")
(ID "pathname")
(PUNCT "+")
(LIT ".pyc")
(NEWLINE)
(ID "file_pyo")
(PUNCT "=")
(ID "pathname")
(PUNCT "+")
(LIT ".pyo")
(NEWLINE)
(ID "pycache_pyc")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "cache_from_source")
(PUNCT "(")
(ID "file_py")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "pycache_pyo")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "cache_from_source")
(PUNCT "(")
(ID "file_py")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_optimize")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "file_pyo")
(PUNCT ")")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_pyo")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ">=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_py")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "fname")
(PUNCT "=")
(ID "file_pyo")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "file_pyc")
(PUNCT ")")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_pyc")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ">=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_py")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "fname")
(PUNCT "=")
(ID "file_pyc")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "pycache_pyc")
(PUNCT ")")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "pycache_pyc")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ">=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_py")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "pycache_pyc")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "file_pyc")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "pycache_pyo")
(PUNCT ")")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "pycache_pyo")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ">=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_py")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "pycache_pyo")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "file_pyo")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_compile")
(PUNCT "(")
(ID "file_py")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(PUNCT "(")
(ID "pycache_pyc")
(KEYWORD if)
(ID "__debug__")
(KEYWORD else)
(ID "pycache_pyo")
(PUNCT ")")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(PUNCT "(")
(ID "file_pyc")
(KEYWORD if)
(ID "__debug__")
(KEYWORD else)
(ID "file_pyo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "arcname")
(PUNCT "=")
(ID "file_py")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_optimize")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "pycache_pyc")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "file_pyc")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "pycache_pyo")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "file_pyo")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fname")
(PUNCT ")")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "fname")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ">=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "file_py")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_compile")
(PUNCT "(")
(ID "file_py")
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_optimize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "arcname")
(PUNCT "=")
(ID "file_py")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "archivename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "arcname")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "basename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "archivename")
(PUNCT "=")
(LIT "%s/%s")
(PUNCT "%")
(PUNCT "(")
(ID "basename")
(PUNCT ",")
(ID "archivename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(ID "archivename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "textwrap")
(NEWLINE)
(ID "USAGE")
(PUNCT "=")
(ID "textwrap")
(PUNCT ".")
(ID "dedent")
(PUNCT "(")
(LIT "        Usage:\n            zipfile.py -l zipfile.zip        # Show listing of a zipfile\n            zipfile.py -t zipfile.zip        # Test if a zipfile is valid\n            zipfile.py -e zipfile.zip target # Extract zipfile into target dir\n            zipfile.py -c zipfile.zip src ... # Create zipfile from sources\n        ")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(KEYWORD or)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "-l")
(PUNCT ",")
(LIT "-c")
(PUNCT ",")
(LIT "-e")
(PUNCT ",")
(LIT "-t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "USAGE")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "USAGE")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "ZipFile")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "zf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zf")
(PUNCT ".")
(ID "printdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "USAGE")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "ZipFile")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "zf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "badfile")
(PUNCT "=")
(ID "zf")
(PUNCT ".")
(ID "testzip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "badfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "The following enclosed file is corrupted: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "badfile")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "Done testing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "!=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "USAGE")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "ZipFile")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "zf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zf")
(PUNCT ".")
(ID "extractall")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-c")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "<")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "USAGE")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addToZip")
(PUNCT "(")
(ID "zf")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "zippath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zf")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "zippath")
(PUNCT ",")
(ID "ZIP_DEFLATED")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "zippath")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zf")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "zippath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "nm")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addToZip")
(PUNCT "(")
(ID "zf")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "nm")
(PUNCT ")")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "zippath")
(PUNCT ",")
(ID "nm")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD with)
(ID "ZipFile")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(KEYWORD as)
(ID "zf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "path")
(KEYWORD in)
(ID "args")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zippath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "zippath")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zippath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "zippath")
(KEYWORD in)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zippath")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "addToZip")
(PUNCT "(")
(ID "zf")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "zippath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
