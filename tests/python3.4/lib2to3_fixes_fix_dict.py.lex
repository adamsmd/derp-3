(LIT "Fixer for dict methods.\n\nd.keys() -> list(d.keys())\nd.items() -> list(d.items())\nd.values() -> list(d.values())\n\nd.iterkeys() -> iter(d.keys())\nd.iteritems() -> iter(d.items())\nd.itervalues() -> iter(d.values())\n\nd.viewkeys() -> d.keys()\nd.viewitems() -> d.items()\nd.viewvalues() -> d.values()\n\nExcept in certain very specific contexts: the iter() can be dropped\nwhen the context is list(), sorted(), iter() or for...in; the list()\ncan be dropped when the context is list() or sorted() (but not iter()\nor for...in!). Special contexts that apply to both: list(), sorted(), tuple()\nset(), any(), all(), sum().\n\nNote: iter(d.keys()) could be written as iter(d) but since the\noriginal d.iterkeys() was also redundant we don't fix this.  And there\nare (rare) contexts where it makes a difference (e.g. when passing it\nas an argument to a function that introspects the argument).\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "pytree")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "patcomp")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(PUNCT ",")
(ID "Call")
(PUNCT ",")
(ID "LParen")
(PUNCT ",")
(ID "RParen")
(PUNCT ",")
(ID "ArgList")
(PUNCT ",")
(ID "Dot")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_util")
(NEWLINE)
(ID "iter_exempt")
(PUNCT "=")
(ID "fixer_util")
(PUNCT ".")
(ID "consuming_calls")
(PUNCT "|")
(PUNCT "{")
(LIT "iter")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "FixDict")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n    power< head=any+\n         trailer< '.' method=('keys'|'items'|'values'|\n                              'iterkeys'|'iteritems'|'itervalues'|\n                              'viewkeys'|'viewitems'|'viewvalues') >\n         parens=trailer< '(' ')' >\n         tail=any*\n    >\n    ")
(NEWLINE)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "head")
(PUNCT "]")
(NEWLINE)
(ID "method")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "method")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "tail")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "tail")
(PUNCT "]")
(NEWLINE)
(ID "syms")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "syms")
(NEWLINE)
(ID "method_name")
(PUNCT "=")
(ID "method")
(PUNCT ".")
(ID "value")
(NEWLINE)
(ID "isiter")
(PUNCT "=")
(ID "method_name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "iter")
(PUNCT ")")
(NEWLINE)
(ID "isview")
(PUNCT "=")
(ID "method_name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "view")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isiter")
(KEYWORD or)
(ID "isview")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_name")
(PUNCT "=")
(ID "method_name")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "method_name")
(KEYWORD in)
(PUNCT "(")
(LIT "keys")
(PUNCT ",")
(LIT "items")
(PUNCT ",")
(LIT "values")
(PUNCT ")")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "method")
(PUNCT ")")
(NEWLINE)
(ID "head")
(PUNCT "=")
(PUNCT "[")
(ID "n")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "head")
(PUNCT "]")
(NEWLINE)
(ID "tail")
(PUNCT "=")
(PUNCT "[")
(ID "n")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "tail")
(PUNCT "]")
(NEWLINE)
(ID "special")
(PUNCT "=")
(KEYWORD not)
(ID "tail")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "in_special_context")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "isiter")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "head")
(PUNCT "+")
(PUNCT "[")
(ID "pytree")
(PUNCT ".")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "trailer")
(PUNCT ",")
(PUNCT "[")
(ID "Dot")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "Name")
(PUNCT "(")
(ID "method_name")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "method")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "results")
(PUNCT "[")
(LIT "parens")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "power")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "special")
(KEYWORD or)
(ID "isview")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "iter")
(KEYWORD if)
(ID "isiter")
(KEYWORD else)
(LIT "list")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(ID "new")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tail")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "pytree")
(PUNCT ".")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "power")
(PUNCT ",")
(PUNCT "[")
(ID "new")
(PUNCT "]")
(PUNCT "+")
(ID "tail")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD return)
(ID "new")
(NEWLINE)
(DEDENT)
(ID "P1")
(PUNCT "=")
(LIT "power< func=NAME trailer< '(' node=any ')' > any* >")
(NEWLINE)
(ID "p1")
(PUNCT "=")
(ID "patcomp")
(PUNCT ".")
(ID "compile_pattern")
(PUNCT "(")
(ID "P1")
(PUNCT ")")
(NEWLINE)
(ID "P2")
(PUNCT "=")
(LIT "for_stmt< 'for' any 'in' node=any ':' any* >\n            | comp_for< 'for' any 'in' node=any any* >\n         ")
(NEWLINE)
(ID "p2")
(PUNCT "=")
(ID "patcomp")
(PUNCT ".")
(ID "compile_pattern")
(PUNCT "(")
(ID "P2")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "in_special_context")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "isiter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "parent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "results")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "parent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "p1")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "parent")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(KEYWORD and)
(ID "results")
(PUNCT "[")
(LIT "node")
(PUNCT "]")
(KEYWORD is)
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isiter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "results")
(PUNCT "[")
(LIT "func")
(PUNCT "]")
(PUNCT ".")
(ID "value")
(KEYWORD in)
(ID "iter_exempt")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "results")
(PUNCT "[")
(LIT "func")
(PUNCT "]")
(PUNCT ".")
(ID "value")
(KEYWORD in)
(ID "fixer_util")
(PUNCT ".")
(ID "consuming_calls")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isiter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "p2")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "parent")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(KEYWORD and)
(ID "results")
(PUNCT "[")
(LIT "node")
(PUNCT "]")
(KEYWORD is)
(ID "node")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
