(LIT "Fixer for import statements.\nIf spam is being imported from the local directory, this import:\n    from spam import eggs\nBecomes:\n    from .spam import eggs\n\nAnd this import:\n    import spam\nBecomes:\n    from . import spam\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(ID "os")
(PUNCT ".")
(ID "path")
(KEYWORD import)
(ID "dirname")
(PUNCT ",")
(ID "join")
(PUNCT ",")
(ID "exists")
(PUNCT ",")
(ID "sep")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "FromImport")
(PUNCT ",")
(ID "syms")
(PUNCT ",")
(ID "token")
(NEWLINE)
(KEYWORD def)
(ID "traverse_imports")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Walks over all the names imported in a dotted_as_names node.\n    ")
(NEWLINE)
(ID "pending")
(PUNCT "=")
(PUNCT "[")
(ID "names")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "pending")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT "=")
(ID "pending")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "NAME")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "node")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "dotted_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "ch")
(PUNCT ".")
(ID "value")
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "dotted_as_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pending")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "dotted_as_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pending")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "unknown node type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FixImport")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n    import_from< 'from' imp=any 'import' ['('] any [')'] >\n    |\n    import_name< 'import' imp=any >\n    ")
(NEWLINE)
(KEYWORD def)
(ID "start_tree")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tree")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(ID "FixImport")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "start_tree")
(PUNCT "(")
(ID "tree")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "skip")
(PUNCT "=")
(LIT "absolute_import")
(KEYWORD in)
(ID "tree")
(PUNCT ".")
(ID "future_features")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "skip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "imp")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "imp")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "import_from")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "imp")
(PUNCT ",")
(LIT "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "imp")
(PUNCT "=")
(ID "imp")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "probably_a_local_import")
(PUNCT "(")
(ID "imp")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "imp")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(LIT ".")
(PUNCT "+")
(ID "imp")
(PUNCT ".")
(ID "value")
(NEWLINE)
(ID "imp")
(PUNCT ".")
(ID "changed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "have_local")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "have_absolute")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "mod_name")
(KEYWORD in)
(ID "traverse_imports")
(PUNCT "(")
(ID "imp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "probably_a_local_import")
(PUNCT "(")
(ID "mod_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "have_local")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "have_absolute")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "have_absolute")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "have_local")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(LIT "absolute and local imports together")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT "=")
(ID "FromImport")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(PUNCT "[")
(ID "imp")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD return)
(ID "new")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "probably_a_local_import")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "imp_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "imp_name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "imp_name")
(PUNCT "=")
(ID "imp_name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "base_path")
(PUNCT "=")
(ID "dirname")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "base_path")
(PUNCT "=")
(ID "join")
(PUNCT "(")
(ID "base_path")
(PUNCT ",")
(ID "imp_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "exists")
(PUNCT "(")
(ID "join")
(PUNCT "(")
(ID "dirname")
(PUNCT "(")
(ID "base_path")
(PUNCT ")")
(PUNCT ",")
(LIT "__init__.py")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "ext")
(KEYWORD in)
(PUNCT "[")
(LIT ".py")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(LIT ".pyc")
(PUNCT ",")
(LIT ".so")
(PUNCT ",")
(LIT ".sl")
(PUNCT ",")
(LIT ".pyd")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exists")
(PUNCT "(")
(ID "base_path")
(PUNCT "+")
(ID "ext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
