(LIT "This module provides some more Pythonic support for SSL.\n\nObject types:\n\n  SSLSocket -- subtype of socket.socket which does SSL over the socket\n\nExceptions:\n\n  SSLError -- exception raised for I/O errors\n\nFunctions:\n\n  cert_time_to_seconds -- convert time string used for certificate\n                          notBefore and notAfter functions to integer\n                          seconds past the Epoch (the time values\n                          returned from time.time())\n\n  fetch_server_certificate (HOST, PORT) -- fetch the certificate provided\n                          by the server running on HOST at port PORT.  No\n                          validation of the certificate is performed.\n\nInteger constants:\n\nSSL_ERROR_ZERO_RETURN\nSSL_ERROR_WANT_READ\nSSL_ERROR_WANT_WRITE\nSSL_ERROR_WANT_X509_LOOKUP\nSSL_ERROR_SYSCALL\nSSL_ERROR_SSL\nSSL_ERROR_WANT_CONNECT\n\nSSL_ERROR_EOF\nSSL_ERROR_INVALID_ERROR_CODE\n\nThe following group define certificate requirements that one side is\nallowing/requiring from the other side:\n\nCERT_NONE - no certificates from the other side are required (or will\n            be looked at if provided)\nCERT_OPTIONAL - certificates are not required, but if provided will be\n                validated, and if validation fails, the connection will\n                also fail\nCERT_REQUIRED - certificates are required, and will be validated, and\n                if validation fails, the connection will also fail\n\nThe following constants identify various SSL protocol variants:\n\nPROTOCOL_SSLv2\nPROTOCOL_SSLv3\nPROTOCOL_SSLv23\nPROTOCOL_TLSv1\nPROTOCOL_TLSv1_1\nPROTOCOL_TLSv1_2\n\nThe following constants identify various SSL alert message descriptions as per\nhttp://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-6\n\nALERT_DESCRIPTION_CLOSE_NOTIFY\nALERT_DESCRIPTION_UNEXPECTED_MESSAGE\nALERT_DESCRIPTION_BAD_RECORD_MAC\nALERT_DESCRIPTION_RECORD_OVERFLOW\nALERT_DESCRIPTION_DECOMPRESSION_FAILURE\nALERT_DESCRIPTION_HANDSHAKE_FAILURE\nALERT_DESCRIPTION_BAD_CERTIFICATE\nALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE\nALERT_DESCRIPTION_CERTIFICATE_REVOKED\nALERT_DESCRIPTION_CERTIFICATE_EXPIRED\nALERT_DESCRIPTION_CERTIFICATE_UNKNOWN\nALERT_DESCRIPTION_ILLEGAL_PARAMETER\nALERT_DESCRIPTION_UNKNOWN_CA\nALERT_DESCRIPTION_ACCESS_DENIED\nALERT_DESCRIPTION_DECODE_ERROR\nALERT_DESCRIPTION_DECRYPT_ERROR\nALERT_DESCRIPTION_PROTOCOL_VERSION\nALERT_DESCRIPTION_INSUFFICIENT_SECURITY\nALERT_DESCRIPTION_INTERNAL_ERROR\nALERT_DESCRIPTION_USER_CANCELLED\nALERT_DESCRIPTION_NO_RENEGOTIATION\nALERT_DESCRIPTION_UNSUPPORTED_EXTENSION\nALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE\nALERT_DESCRIPTION_UNRECOGNIZED_NAME\nALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE\nALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE\nALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY\n")
(NEWLINE)
(KEYWORD import)
(ID "textwrap")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "namedtuple")
(NEWLINE)
(KEYWORD from)
(ID "enum")
(KEYWORD import)
(ID "Enum")
(KEYWORD as)
(ID "_Enum")
(NEWLINE)
(KEYWORD import)
(ID "_ssl")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "OPENSSL_VERSION_NUMBER")
(PUNCT ",")
(ID "OPENSSL_VERSION_INFO")
(PUNCT ",")
(ID "OPENSSL_VERSION")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "_SSLContext")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(PUNCT "(")
(ID "SSLError")
(PUNCT ",")
(ID "SSLZeroReturnError")
(PUNCT ",")
(ID "SSLWantReadError")
(PUNCT ",")
(ID "SSLWantWriteError")
(PUNCT ",")
(ID "SSLSyscallError")
(PUNCT ",")
(ID "SSLEOFError")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "CERT_NONE")
(PUNCT ",")
(ID "CERT_OPTIONAL")
(PUNCT ",")
(ID "CERT_REQUIRED")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(PUNCT "(")
(ID "VERIFY_DEFAULT")
(PUNCT ",")
(ID "VERIFY_CRL_CHECK_LEAF")
(PUNCT ",")
(ID "VERIFY_CRL_CHECK_CHAIN")
(PUNCT ",")
(ID "VERIFY_X509_STRICT")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "txt2obj")
(KEYWORD as)
(ID "_txt2obj")
(PUNCT ",")
(ID "nid2obj")
(KEYWORD as)
(ID "_nid2obj")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "RAND_status")
(PUNCT ",")
(ID "RAND_add")
(PUNCT ",")
(ID "RAND_bytes")
(PUNCT ",")
(ID "RAND_pseudo_bytes")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "RAND_egd")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_import_symbols")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "_ssl")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "_ssl")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_import_symbols")
(PUNCT "(")
(LIT "OP_")
(PUNCT ")")
(NEWLINE)
(ID "_import_symbols")
(PUNCT "(")
(LIT "ALERT_DESCRIPTION_")
(PUNCT ")")
(NEWLINE)
(ID "_import_symbols")
(PUNCT "(")
(LIT "SSL_ERROR_")
(PUNCT ")")
(NEWLINE)
(ID "_import_symbols")
(PUNCT "(")
(LIT "PROTOCOL_")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "HAS_SNI")
(PUNCT ",")
(ID "HAS_ECDH")
(PUNCT ",")
(ID "HAS_NPN")
(NEWLINE)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "_OPENSSL_API_VERSION")
(NEWLINE)
(ID "_PROTOCOL_NAMES")
(PUNCT "=")
(PUNCT "{")
(ID "value")
(PUNCT ":")
(ID "name")
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "PROTOCOL_")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "PROTOCOL_SSLv2")
(NEWLINE)
(ID "_SSLv2_IF_EXISTS")
(PUNCT "=")
(ID "PROTOCOL_SSLv2")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_SSLv2_IF_EXISTS")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROTOCOL_NAMES")
(PUNCT "[")
(ID "PROTOCOL_SSLv2")
(PUNCT "]")
(PUNCT "=")
(LIT "SSLv2")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "PROTOCOL_TLSv1_1")
(PUNCT ",")
(ID "PROTOCOL_TLSv1_2")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_PROTOCOL_NAMES")
(PUNCT "[")
(ID "PROTOCOL_TLSv1_1")
(PUNCT "]")
(PUNCT "=")
(LIT "TLSv1.1")
(NEWLINE)
(ID "_PROTOCOL_NAMES")
(PUNCT "[")
(ID "PROTOCOL_TLSv1_2")
(PUNCT "]")
(PUNCT "=")
(LIT "TLSv1.2")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ssl")
(KEYWORD import)
(ID "enum_certificates")
(PUNCT ",")
(ID "enum_crls")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "socket")
(KEYWORD import)
(ID "socket")
(PUNCT ",")
(ID "AF_INET")
(PUNCT ",")
(ID "SOCK_STREAM")
(PUNCT ",")
(ID "create_connection")
(NEWLINE)
(KEYWORD from)
(ID "socket")
(KEYWORD import)
(ID "SOL_SOCKET")
(PUNCT ",")
(ID "SO_TYPE")
(NEWLINE)
(KEYWORD import)
(ID "base64")
(NEWLINE)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(ID "socket_error")
(PUNCT "=")
(ID "OSError")
(NEWLINE)
(KEYWORD if)
(ID "_ssl")
(PUNCT ".")
(ID "HAS_TLS_UNIQUE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CHANNEL_BINDING_TYPES")
(PUNCT "=")
(PUNCT "[")
(LIT "tls-unique")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CHANNEL_BINDING_TYPES")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_DEFAULT_CIPHERS")
(PUNCT "=")
(PUNCT "(")
(LIT "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+HIGH:")
(LIT "DH+HIGH:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+HIGH:RSA+3DES:ECDH+RC4:")
(LIT "DH+RC4:RSA+RC4:!aNULL:!eNULL:!MD5")
(PUNCT ")")
(NEWLINE)
(ID "_RESTRICTED_SERVER_CIPHERS")
(PUNCT "=")
(PUNCT "(")
(LIT "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+HIGH:")
(LIT "DH+HIGH:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+HIGH:RSA+3DES:!aNULL:")
(LIT "!eNULL:!MD5:!DSS:!RC4")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "CertificateError")
(PUNCT "(")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dnsname_match")
(PUNCT "(")
(ID "dn")
(PUNCT ",")
(ID "hostname")
(PUNCT ",")
(ID "max_wildcards")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Matching according to RFC 6125, section 6.4.3\n\n    http://tools.ietf.org/html/rfc6125#section-6.4.3\n    ")
(NEWLINE)
(ID "pats")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "leftmost")
(PUNCT ",")
(PUNCT "*")
(ID "remainder")
(PUNCT "=")
(ID "dn")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "wildcards")
(PUNCT "=")
(ID "leftmost")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT "*")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "wildcards")
(PUNCT ">")
(ID "max_wildcards")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CertificateError")
(PUNCT "(")
(LIT "too many wildcards in certificate DNS name: ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "dn")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "wildcards")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dn")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(ID "hostname")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leftmost")
(PUNCT "==")
(LIT "*")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pats")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "[^.]+")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "leftmost")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "xn--")
(PUNCT ")")
(KEYWORD or)
(ID "hostname")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "xn--")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pats")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "re")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "leftmost")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pats")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "re")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "leftmost")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\*")
(PUNCT ",")
(LIT "[^.]*")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "frag")
(KEYWORD in)
(ID "remainder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pats")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "re")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "frag")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\\A")
(PUNCT "+")
(LIT "\\.")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "pats")
(PUNCT ")")
(PUNCT "+")
(LIT "\\Z")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "IGNORECASE")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "pat")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "match_hostname")
(PUNCT "(")
(ID "cert")
(PUNCT ",")
(ID "hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Verify that *cert* (in decoded format as returned by\n    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125\n    rules are followed, but IP addresses are not accepted for *hostname*.\n\n    CertificateError is raised on failure. On success, the function\n    returns nothing.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "cert")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "empty or no certificate, match_hostname needs a ")
(LIT "SSL socket or SSL context with either ")
(LIT "CERT_OPTIONAL or CERT_REQUIRED")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dnsnames")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "san")
(PUNCT "=")
(ID "cert")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "subjectAltName")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "san")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(PUNCT "==")
(LIT "DNS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_dnsname_match")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "dnsnames")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dnsnames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "sub")
(KEYWORD in)
(ID "cert")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "subject")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "sub")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(PUNCT "==")
(LIT "commonName")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_dnsname_match")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "dnsnames")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "dnsnames")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CertificateError")
(PUNCT "(")
(LIT "hostname %r ")
(LIT "doesn't match either of %s")
(PUNCT "%")
(PUNCT "(")
(ID "hostname")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "repr")
(PUNCT ",")
(ID "dnsnames")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "dnsnames")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CertificateError")
(PUNCT "(")
(LIT "hostname %r ")
(LIT "doesn't match %r")
(PUNCT "%")
(PUNCT "(")
(ID "hostname")
(PUNCT ",")
(ID "dnsnames")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CertificateError")
(PUNCT "(")
(LIT "no appropriate commonName or ")
(LIT "subjectAltName fields were found")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "DefaultVerifyPaths")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "DefaultVerifyPaths")
(PUNCT ",")
(LIT "cafile capath openssl_cafile_env openssl_cafile openssl_capath_env ")
(LIT "openssl_capath")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "get_default_verify_paths")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return paths to default cafile and capath.\n    ")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "_ssl")
(PUNCT ".")
(ID "get_default_verify_paths")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cafile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "capath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "DefaultVerifyPaths")
(PUNCT "(")
(ID "cafile")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "cafile")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(PUNCT ",")
(ID "capath")
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "capath")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_ASN1Object")
(PUNCT "(")
(ID "namedtuple")
(PUNCT "(")
(LIT "_ASN1Object")
(PUNCT ",")
(LIT "nid shortname longname oid")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "ASN.1 object identifier lookup\n    ")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "oid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "_txt2obj")
(PUNCT "(")
(ID "oid")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromnid")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "nid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create _ASN1Object from OpenSSL numeric ID\n        ")
(NEWLINE)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "_nid2obj")
(PUNCT "(")
(ID "nid")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromname")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create _ASN1Object from short name, long name or OID\n        ")
(NEWLINE)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "_txt2obj")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Purpose")
(PUNCT "(")
(ID "_ASN1Object")
(PUNCT ",")
(ID "_Enum")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SSLContext purpose flags with X509v3 Extended Key Usage objects\n    ")
(NEWLINE)
(ID "SERVER_AUTH")
(PUNCT "=")
(LIT "1.3.6.1.5.5.7.3.1")
(NEWLINE)
(ID "CLIENT_AUTH")
(PUNCT "=")
(LIT "1.3.6.1.5.5.7.3.2")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SSLContext")
(PUNCT "(")
(ID "_SSLContext")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An SSLContext holds various SSL-related configuration options and\n    data, such as certificates and possibly a private key.")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "protocol")
(PUNCT ",")
(LIT "__weakref__")
(PUNCT ")")
(NEWLINE)
(ID "_windows_cert_stores")
(PUNCT "=")
(PUNCT "(")
(LIT "CA")
(PUNCT ",")
(LIT "ROOT")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT "=")
(ID "_SSLContext")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "protocol")
(PUNCT "!=")
(ID "_SSLv2_IF_EXISTS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_ciphers")
(PUNCT "(")
(ID "_DEFAULT_CIPHERS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "protocol")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "do_handshake_on_connect")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "SSLSocket")
(PUNCT "(")
(ID "sock")
(PUNCT "=")
(ID "sock")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(ID "server_side")
(PUNCT ",")
(ID "do_handshake_on_connect")
(PUNCT "=")
(ID "do_handshake_on_connect")
(PUNCT ",")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(ID "suppress_ragged_eofs")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "server_hostname")
(PUNCT ",")
(ID "_context")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_npn_protocols")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "npn_protocols")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protos")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "protocol")
(KEYWORD in)
(ID "npn_protocols")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "b")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ">")
(LIT 255)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SSLError")
(PUNCT "(")
(LIT "NPN protocols must be 1 to 255 in length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "protos")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "protos")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_set_npn_protocols")
(PUNCT "(")
(ID "protos")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_load_windows_store_certs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "storename")
(PUNCT ",")
(ID "purpose")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "certs")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cert")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "trust")
(KEYWORD in)
(ID "enum_certificates")
(PUNCT "(")
(ID "storename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "encoding")
(PUNCT "==")
(LIT "x509_asn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "trust")
(KEYWORD is)
(KEYWORD True)
(KEYWORD or)
(ID "purpose")
(PUNCT ".")
(ID "oid")
(KEYWORD in)
(ID "trust")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "certs")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "cert")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "load_verify_locations")
(PUNCT "(")
(ID "cadata")
(PUNCT "=")
(ID "certs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "certs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load_default_certs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "purpose")
(PUNCT "=")
(ID "Purpose")
(PUNCT ".")
(ID "SERVER_AUTH")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "purpose")
(PUNCT ",")
(ID "_ASN1Object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "purpose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "storename")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_windows_cert_stores")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_load_windows_store_certs")
(PUNCT "(")
(ID "storename")
(PUNCT ",")
(ID "purpose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_default_verify_paths")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "create_default_context")
(PUNCT "(")
(ID "purpose")
(PUNCT "=")
(ID "Purpose")
(PUNCT ".")
(ID "SERVER_AUTH")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "cafile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "capath")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cadata")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a SSLContext object with default settings.\n\n    NOTE: The protocol and settings may change anytime without prior\n          deprecation. The values represent a fair balance between maximum\n          compatibility and security.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "purpose")
(PUNCT ",")
(ID "_ASN1Object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "purpose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT "=")
(ID "SSLContext")
(PUNCT "(")
(ID "PROTOCOL_SSLv23")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "OP_NO_SSLv2")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "OP_NO_SSLv3")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "getattr")
(PUNCT "(")
(ID "_ssl")
(PUNCT ",")
(LIT "OP_NO_COMPRESSION")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "purpose")
(PUNCT "==")
(ID "Purpose")
(PUNCT ".")
(ID "SERVER_AUTH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "=")
(ID "CERT_REQUIRED")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "check_hostname")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "purpose")
(PUNCT "==")
(ID "Purpose")
(PUNCT ".")
(ID "CLIENT_AUTH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "getattr")
(PUNCT "(")
(ID "_ssl")
(PUNCT ",")
(LIT "OP_CIPHER_SERVER_PREFERENCE")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "getattr")
(PUNCT "(")
(ID "_ssl")
(PUNCT ",")
(LIT "OP_SINGLE_DH_USE")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "getattr")
(PUNCT "(")
(ID "_ssl")
(PUNCT ",")
(LIT "OP_SINGLE_ECDH_USE")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "set_ciphers")
(PUNCT "(")
(ID "_RESTRICTED_SERVER_CIPHERS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cafile")
(KEYWORD or)
(ID "capath")
(KEYWORD or)
(ID "cadata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "load_verify_locations")
(PUNCT "(")
(ID "cafile")
(PUNCT ",")
(ID "capath")
(PUNCT ",")
(ID "cadata")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "context")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "!=")
(ID "CERT_NONE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "load_default_certs")
(PUNCT "(")
(ID "purpose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "context")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create_unverified_context")
(PUNCT "(")
(ID "protocol")
(PUNCT "=")
(ID "PROTOCOL_SSLv23")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "cert_reqs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "check_hostname")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "purpose")
(PUNCT "=")
(ID "Purpose")
(PUNCT ".")
(ID "SERVER_AUTH")
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cafile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "capath")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cadata")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a SSLContext object for Python stdlib modules\n\n    All Python stdlib modules shall use this function to create SSLContext\n    objects in order to keep common settings in one place. The configuration\n    is less restrict than create_default_context()'s to increase backward\n    compatibility.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "purpose")
(PUNCT ",")
(ID "_ASN1Object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "purpose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT "=")
(ID "SSLContext")
(PUNCT "(")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "OP_NO_SSLv2")
(NEWLINE)
(ID "context")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "OP_NO_SSLv3")
(NEWLINE)
(KEYWORD if)
(ID "cert_reqs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "=")
(ID "cert_reqs")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT ".")
(ID "check_hostname")
(PUNCT "=")
(ID "check_hostname")
(NEWLINE)
(KEYWORD if)
(ID "keyfile")
(KEYWORD and)
(KEYWORD not)
(ID "certfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "certfile must be specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "certfile")
(KEYWORD or)
(ID "keyfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "load_cert_chain")
(PUNCT "(")
(ID "certfile")
(PUNCT ",")
(ID "keyfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cafile")
(KEYWORD or)
(ID "capath")
(KEYWORD or)
(ID "cadata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "load_verify_locations")
(PUNCT "(")
(ID "cafile")
(PUNCT ",")
(ID "capath")
(PUNCT ",")
(ID "cadata")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "context")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "!=")
(ID "CERT_NONE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "load_default_certs")
(PUNCT "(")
(ID "purpose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "context")
(NEWLINE)
(DEDENT)
(ID "_create_default_https_context")
(PUNCT "=")
(ID "create_default_context")
(NEWLINE)
(ID "_create_stdlib_context")
(PUNCT "=")
(ID "_create_unverified_context")
(NEWLINE)
(KEYWORD class)
(ID "SSLSocket")
(PUNCT "(")
(ID "socket")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class implements a subtype of socket.socket that wraps\n    the underlying OS socket in an SSL context when necessary, and\n    provides read and write methods over that channel.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "cert_reqs")
(PUNCT "=")
(ID "CERT_NONE")
(PUNCT ",")
(ID "ssl_version")
(PUNCT "=")
(ID "PROTOCOL_SSLv23")
(PUNCT ",")
(ID "ca_certs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "do_handshake_on_connect")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "AF_INET")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "SOCK_STREAM")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "fileno")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "npn_protocols")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ciphers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_context")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT "=")
(ID "_context")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "server_side")
(KEYWORD and)
(KEYWORD not)
(ID "certfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "certfile must be specified for server-side ")
(LIT "operations")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "keyfile")
(KEYWORD and)
(KEYWORD not)
(ID "certfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "certfile must be specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "certfile")
(KEYWORD and)
(KEYWORD not)
(ID "keyfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keyfile")
(PUNCT "=")
(ID "certfile")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT "=")
(ID "SSLContext")
(PUNCT "(")
(ID "ssl_version")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "=")
(ID "cert_reqs")
(NEWLINE)
(KEYWORD if)
(ID "ca_certs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "load_verify_locations")
(PUNCT "(")
(ID "ca_certs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "certfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "load_cert_chain")
(PUNCT "(")
(ID "certfile")
(PUNCT ",")
(ID "keyfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "npn_protocols")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "set_npn_protocols")
(PUNCT "(")
(ID "npn_protocols")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ciphers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "set_ciphers")
(PUNCT "(")
(ID "ciphers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cert_reqs")
(PUNCT "=")
(ID "cert_reqs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ssl_version")
(PUNCT "=")
(ID "ssl_version")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ca_certs")
(PUNCT "=")
(ID "ca_certs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ciphers")
(PUNCT "=")
(ID "ciphers")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sock")
(PUNCT ".")
(ID "getsockopt")
(PUNCT "(")
(ID "SOL_SOCKET")
(PUNCT ",")
(ID "SO_TYPE")
(PUNCT ")")
(PUNCT "!=")
(ID "SOCK_STREAM")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "only stream sockets are supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "server_side")
(KEYWORD and)
(ID "server_hostname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "server_hostname can only be specified ")
(LIT "in client mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "check_hostname")
(KEYWORD and)
(KEYWORD not)
(ID "server_hostname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "check_hostname requires server_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "server_side")
(PUNCT "=")
(ID "server_side")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_hostname")
(PUNCT "=")
(ID "server_hostname")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "do_handshake_on_connect")
(PUNCT "=")
(ID "do_handshake_on_connect")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(ID "suppress_ragged_eofs")
(NEWLINE)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socket")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "proto")
(PUNCT ",")
(ID "fileno")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "sock")
(PUNCT ".")
(ID "gettimeout")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "detach")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "fileno")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socket")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileno")
(PUNCT "=")
(ID "fileno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socket")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "getpeername")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT "!=")
(ID "errno")
(PUNCT ".")
(ID "ENOTCONN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "connected")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connected")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connected")
(PUNCT "=")
(ID "connected")
(NEWLINE)
(KEYWORD if)
(ID "connected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "_wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "server_side")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "do_handshake_on_connect")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gettimeout")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "timeout")
(PUNCT "==")
(LIT 0.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "do_handshake_on_connect should not be specified for non-blocking sockets")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "do_handshake")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "context")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_context")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "context")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "context")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ctx")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT "=")
(ID "ctx")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "context")
(PUNCT "=")
(ID "ctx")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dup")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplemented")
(PUNCT "(")
(LIT "Can't dup() %s instances")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_checkClosed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_connected")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_connected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "getpeername")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "len")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "buffer")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read up to LEN bytes and return them.\n        Return zero-length string on EOF.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Read on closed or unwrapped SSL socket.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "buffer")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT ",")
(ID "buffer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(KEYWORD or)
(LIT 1024)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SSLError")
(KEYWORD as)
(ID "x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "SSL_ERROR_EOF")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "suppress_ragged_eofs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "buffer")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write DATA to the underlying SSL channel.  Returns\n        number of bytes of DATA actually transmitted.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Write on closed or unwrapped SSL socket.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getpeercert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "binary_form")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a formatted version of the data in the\n        certificate provided by the other end of the SSL channel.\n        Return None if no certificate was provided, {} if a\n        certificate was provided, but not validated.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_connected")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "peer_certificate")
(PUNCT "(")
(ID "binary_form")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selected_npn_protocol")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(KEYWORD or)
(KEYWORD not)
(ID "_ssl")
(PUNCT ".")
(ID "HAS_NPN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "selected_npn_protocol")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "cipher")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "cipher")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "compression")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "compression")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-zero flags not allowed in calls to send() on %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SSLError")
(KEYWORD as)
(ID "x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "SSL_ERROR_WANT_READ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "x")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "SSL_ERROR_WANT_WRITE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "sendto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags_or_addr")
(PUNCT ",")
(ID "addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "sendto not allowed on instances of %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "addr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "sendto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags_or_addr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "sendto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags_or_addr")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "sendmsg")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "sendmsg not allowed on instances of %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sendall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-zero flags not allowed in calls to sendall() on %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "amount")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(PUNCT "(")
(ID "count")
(PUNCT "<")
(ID "amount")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(ID "count")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "count")
(PUNCT "+=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "amount")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "recv")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buflen")
(PUNCT "=")
(LIT 1024)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-zero flags not allowed in calls to recv() on %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "buflen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buflen")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "recv_into")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buffer")
(PUNCT ",")
(ID "nbytes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "buffer")
(KEYWORD and)
(PUNCT "(")
(ID "nbytes")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nbytes")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "buffer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nbytes")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nbytes")
(PUNCT "=")
(LIT 1024)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "flags")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "non-zero flags not allowed in calls to recv_into() on %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "nbytes")
(PUNCT ",")
(ID "buffer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "recv_into")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buffer")
(PUNCT ",")
(ID "nbytes")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "recvfrom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buflen")
(PUNCT "=")
(LIT 1024)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "recvfrom not allowed on instances of %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "recvfrom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buflen")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "recvfrom_into")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buffer")
(PUNCT ",")
(ID "nbytes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "recvfrom_into not allowed on instances of %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "recvfrom_into")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "buffer")
(PUNCT ",")
(ID "nbytes")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "recvmsg")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "recvmsg not allowed on instances of %s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "recvmsg_into")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "recvmsg_into not allowed on instances of ")
(LIT "%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pending")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "pending")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "how")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_checkClosed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "socket")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "how")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unwrap")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "No SSL wrapper around ")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_real_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "socket")
(PUNCT ".")
(ID "_real_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "do_handshake")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "block")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Perform a TLS/SSL handshake.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_connected")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "timeout")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gettimeout")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "timeout")
(PUNCT "==")
(LIT 0.0)
(KEYWORD and)
(ID "block")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "do_handshake")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ".")
(ID "check_hostname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "server_hostname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "check_hostname needs server_hostname ")
(LIT "argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "match_hostname")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getpeercert")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_real_connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ",")
(ID "connect_ex")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "server_side")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "can't connect in server-side mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_connected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "attempt to connect already-connected SSLSocket!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ".")
(ID "_wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "connect_ex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rc")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "connect_ex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rc")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "socket")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "rc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_connected")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "do_handshake_on_connect")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "do_handshake")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "rc")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connects to remote ADDR, and then wraps the connection in\n        an SSL channel.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_real_connect")
(PUNCT "(")
(ID "addr")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect_ex")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "addr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connects to remote ADDR, and then wraps the connection in\n        an SSL channel.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_real_connect")
(PUNCT "(")
(ID "addr")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "accept")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Accepts a new connection from a remote client, and returns\n        a tuple containing that new connection wrapped with a server-side\n        SSL channel, and the address of the remote client.")
(NEWLINE)
(ID "newsock")
(PUNCT ",")
(ID "addr")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "accept")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "newsock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "newsock")
(PUNCT ",")
(ID "do_handshake_on_connect")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "do_handshake_on_connect")
(PUNCT ",")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "suppress_ragged_eofs")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "newsock")
(PUNCT ",")
(ID "addr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_channel_binding")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cb_type")
(PUNCT "=")
(LIT "tls-unique")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get channel binding data for current connection.  Raise ValueError\n        if the requested `cb_type` is not supported.  Return bytes of the data\n        or None if the data is not available (e.g. before the handshake).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "cb_type")
(KEYWORD not)
(KEYWORD in)
(ID "CHANNEL_BINDING_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unsupported channel binding type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cb_type")
(PUNCT "!=")
(LIT "tls-unique")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "{0} channel binding type not implemented")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "cb_type")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "tls_unique_cb")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "wrap_socket")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "cert_reqs")
(PUNCT "=")
(ID "CERT_NONE")
(PUNCT ",")
(ID "ssl_version")
(PUNCT "=")
(ID "PROTOCOL_SSLv23")
(PUNCT ",")
(ID "ca_certs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "do_handshake_on_connect")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "ciphers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "SSLSocket")
(PUNCT "(")
(ID "sock")
(PUNCT "=")
(ID "sock")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(ID "server_side")
(PUNCT ",")
(ID "cert_reqs")
(PUNCT "=")
(ID "cert_reqs")
(PUNCT ",")
(ID "ssl_version")
(PUNCT "=")
(ID "ssl_version")
(PUNCT ",")
(ID "ca_certs")
(PUNCT "=")
(ID "ca_certs")
(PUNCT ",")
(ID "do_handshake_on_connect")
(PUNCT "=")
(ID "do_handshake_on_connect")
(PUNCT ",")
(ID "suppress_ragged_eofs")
(PUNCT "=")
(ID "suppress_ragged_eofs")
(PUNCT ",")
(ID "ciphers")
(PUNCT "=")
(ID "ciphers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cert_time_to_seconds")
(PUNCT "(")
(ID "cert_time")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Takes a date-time string in standard ASN1_print form\n    (\"MON DAY 24HOUR:MINUTE:SEC YEAR TIMEZONE\") and return\n    a Python time value in seconds past the epoch.")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD return)
(ID "time")
(PUNCT ".")
(ID "mktime")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "strptime")
(PUNCT "(")
(ID "cert_time")
(PUNCT ",")
(LIT "%b %d %H:%M:%S %Y GMT")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "PEM_HEADER")
(PUNCT "=")
(LIT "-----BEGIN CERTIFICATE-----")
(NEWLINE)
(ID "PEM_FOOTER")
(PUNCT "=")
(LIT "-----END CERTIFICATE-----")
(NEWLINE)
(KEYWORD def)
(ID "DER_cert_to_PEM_cert")
(PUNCT "(")
(ID "der_cert_bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Takes a certificate in binary DER format and returns the\n    PEM version of it as a string.")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "base64")
(PUNCT ".")
(ID "standard_b64encode")
(PUNCT "(")
(ID "der_cert_bytes")
(PUNCT ")")
(PUNCT ",")
(LIT "ASCII")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "PEM_HEADER")
(PUNCT "+")
(LIT "\n")
(PUNCT "+")
(ID "textwrap")
(PUNCT ".")
(ID "fill")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT 64)
(PUNCT ")")
(PUNCT "+")
(LIT "\n")
(PUNCT "+")
(ID "PEM_FOOTER")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "PEM_cert_to_DER_cert")
(PUNCT "(")
(ID "pem_cert_string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Takes a certificate in ASCII PEM format and returns the\n    DER-encoded version of it as a byte sequence")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "pem_cert_string")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "PEM_HEADER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid PEM encoding; must start with %s")
(PUNCT "%")
(ID "PEM_HEADER")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "pem_cert_string")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "PEM_FOOTER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid PEM encoding; must end with %s")
(PUNCT "%")
(ID "PEM_FOOTER")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "=")
(ID "pem_cert_string")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "PEM_HEADER")
(PUNCT ")")
(PUNCT ":")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "PEM_FOOTER")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(PUNCT "(")
(ID "d")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ASCII")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_server_certificate")
(PUNCT "(")
(ID "addr")
(PUNCT ",")
(ID "ssl_version")
(PUNCT "=")
(ID "PROTOCOL_SSLv23")
(PUNCT ",")
(ID "ca_certs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieve the certificate from the server at the specified address,\n    and return it as a PEM-encoded string.\n    If 'ca_certs' is specified, validate the server cert against it.\n    If 'ssl_version' is specified, use it in the connection attempt.")
(NEWLINE)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "addr")
(NEWLINE)
(KEYWORD if)
(ID "ca_certs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cert_reqs")
(PUNCT "=")
(ID "CERT_REQUIRED")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cert_reqs")
(PUNCT "=")
(ID "CERT_NONE")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT "=")
(ID "_create_stdlib_context")
(PUNCT "(")
(ID "ssl_version")
(PUNCT ",")
(ID "cert_reqs")
(PUNCT "=")
(ID "cert_reqs")
(PUNCT ",")
(ID "cafile")
(PUNCT "=")
(ID "ca_certs")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "create_connection")
(PUNCT "(")
(ID "addr")
(PUNCT ")")
(KEYWORD as)
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "sock")
(PUNCT ")")
(KEYWORD as)
(ID "sslsock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dercert")
(PUNCT "=")
(ID "sslsock")
(PUNCT ".")
(ID "getpeercert")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "DER_cert_to_PEM_cert")
(PUNCT "(")
(ID "dercert")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_protocol_name")
(PUNCT "(")
(ID "protocol_code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_PROTOCOL_NAMES")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "protocol_code")
(PUNCT ",")
(LIT "<unknown>")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
