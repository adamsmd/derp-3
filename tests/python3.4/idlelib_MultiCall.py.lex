(LIT "\nMultiCall - a class which inherits its methods from a Tkinter widget (Text, for\nexample), but enables multiple calls of functions per virtual event - all\nmatching events will be called, not only the most specific one. This is done\nby wrapping the event functions - event_add, event_delete and event_info.\nMultiCall recognizes only a subset of legal event sequences. Sequences which\nare not recognized are treated by the original Tk handling mechanism. A\nmore-specific event will be called before a less-specific event.\n\nThe recognized sequences are complete one-event sequences (no emacs-style\nCtrl-X Ctrl-C, no shortcuts like <3>), for all types of events.\nKey/Button Press/Release events can have modifiers.\nThe recognized modifiers are Shift, Control, Option and Command for Mac, and\nControl, Alt, Shift, Meta/M for other platforms.\n\nFor all events which were handled by MultiCall, a new member is added to the\nevent instance passed to the binded functions - mc_type. This is one of the\nevent type constants defined in this module (such as MC_KEYPRESS).\nFor Key/Button events (which are handled by MultiCall and may receive\nmodifiers), another member is added - mc_state. This member gives the state\nof the recognized modifiers, as a combination of the modifier constants\nalso defined in this module (for example, MC_SHIFT).\nUsing these members is absolutely portable.\n\nThe order by which events are called is defined by these rules:\n1. A more-specific event will be called before a less-specific event.\n2. A recently-binded event will be called before a previously-binded event,\n   unless this conflicts with the first rule.\nEach function will be called at most once for each event.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "tkinter")
(NEWLINE)
(ID "MC_KEYPRESS")
(PUNCT "=")
(LIT 0)
(PUNCT ";")
(ID "MC_KEYRELEASE")
(PUNCT "=")
(LIT 1)
(PUNCT ";")
(ID "MC_BUTTONPRESS")
(PUNCT "=")
(LIT 2)
(PUNCT ";")
(ID "MC_BUTTONRELEASE")
(PUNCT "=")
(LIT 3)
(PUNCT ";")
(NEWLINE)
(ID "MC_ACTIVATE")
(PUNCT "=")
(LIT 4)
(PUNCT ";")
(ID "MC_CIRCULATE")
(PUNCT "=")
(LIT 5)
(PUNCT ";")
(ID "MC_COLORMAP")
(PUNCT "=")
(LIT 6)
(PUNCT ";")
(ID "MC_CONFIGURE")
(PUNCT "=")
(LIT 7)
(PUNCT ";")
(NEWLINE)
(ID "MC_DEACTIVATE")
(PUNCT "=")
(LIT 8)
(PUNCT ";")
(ID "MC_DESTROY")
(PUNCT "=")
(LIT 9)
(PUNCT ";")
(ID "MC_ENTER")
(PUNCT "=")
(LIT 10)
(PUNCT ";")
(ID "MC_EXPOSE")
(PUNCT "=")
(LIT 11)
(PUNCT ";")
(ID "MC_FOCUSIN")
(PUNCT "=")
(LIT 12)
(PUNCT ";")
(NEWLINE)
(ID "MC_FOCUSOUT")
(PUNCT "=")
(LIT 13)
(PUNCT ";")
(ID "MC_GRAVITY")
(PUNCT "=")
(LIT 14)
(PUNCT ";")
(ID "MC_LEAVE")
(PUNCT "=")
(LIT 15)
(PUNCT ";")
(ID "MC_MAP")
(PUNCT "=")
(LIT 16)
(PUNCT ";")
(ID "MC_MOTION")
(PUNCT "=")
(LIT 17)
(PUNCT ";")
(NEWLINE)
(ID "MC_MOUSEWHEEL")
(PUNCT "=")
(LIT 18)
(PUNCT ";")
(ID "MC_PROPERTY")
(PUNCT "=")
(LIT 19)
(PUNCT ";")
(ID "MC_REPARENT")
(PUNCT "=")
(LIT 20)
(PUNCT ";")
(ID "MC_UNMAP")
(PUNCT "=")
(LIT 21)
(PUNCT ";")
(ID "MC_VISIBILITY")
(PUNCT "=")
(LIT 22)
(PUNCT ";")
(NEWLINE)
(ID "MC_SHIFT")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 0)
(PUNCT ";")
(ID "MC_CONTROL")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 2)
(PUNCT ";")
(ID "MC_ALT")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 3)
(PUNCT ";")
(ID "MC_META")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 5)
(NEWLINE)
(ID "MC_OPTION")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 6)
(PUNCT ";")
(ID "MC_COMMAND")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(LIT 7)
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_modifiers")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(LIT "Shift")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Control")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Option")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Command")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_modifier_masks")
(PUNCT "=")
(PUNCT "(")
(ID "MC_SHIFT")
(PUNCT ",")
(ID "MC_CONTROL")
(PUNCT ",")
(ID "MC_OPTION")
(PUNCT ",")
(ID "MC_COMMAND")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_modifiers")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(LIT "Control")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Alt")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Shift")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Meta")
(PUNCT ",")
(LIT "M")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_modifier_masks")
(PUNCT "=")
(PUNCT "(")
(ID "MC_CONTROL")
(PUNCT ",")
(ID "MC_ALT")
(PUNCT ",")
(ID "MC_SHIFT")
(PUNCT ",")
(ID "MC_META")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_modifier_names")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "number")
(PUNCT ")")
(KEYWORD for)
(ID "number")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "_modifiers")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "_modifiers")
(PUNCT "[")
(ID "number")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "APPLICATION_GONE")
(PUNCT "=")
(LIT "application has been destroyed")
(NEWLINE)
(KEYWORD class)
(ID "_SimpleBinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "widget")
(PUNCT ",")
(ID "widgetinst")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sequence")
(PUNCT "=")
(LIT "<")
(PUNCT "+")
(ID "_types")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(LIT ">")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT "=")
(ID "widget")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT "=")
(ID "widgetinst")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "handler")
(PUNCT "(")
(ID "event")
(PUNCT ",")
(ID "l")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT ",")
(ID "mc_type")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "event")
(PUNCT ".")
(ID "mc_type")
(PUNCT "=")
(ID "mc_type")
(NEWLINE)
(ID "wascalled")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "l")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "func")
(KEYWORD not)
(KEYWORD in)
(ID "wascalled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wascalled")
(PUNCT "[")
(ID "func")
(PUNCT "]")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sequence")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sequence")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sequence")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "handlerid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "tkinter")
(PUNCT ".")
(ID "TclError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "APPLICATION_GONE")
(KEYWORD in)
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_states")
(PUNCT "=")
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(ID "len")
(PUNCT "(")
(ID "_modifiers")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_state_names")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "m")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(LIT "-")
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "m")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "_modifiers")
(PUNCT ")")
(KEYWORD if)
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(ID "i")
(PUNCT ")")
(PUNCT "&")
(ID "s")
(PUNCT ")")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "_states")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "expand_substates")
(PUNCT "(")
(ID "states")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "For each item of states return a list containing all combinations of\n    that item with individual bits reset, sorted by the number of set bits.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "nbits")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "number of bits set in n base 2")
(NEWLINE)
(ID "nb")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT ",")
(ID "rem")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "nb")
(PUNCT "+=")
(ID "rem")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "nb")
(NEWLINE)
(DEDENT)
(ID "statelist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "state")
(KEYWORD in)
(ID "states")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "substates")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "state")
(PUNCT "&")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "states")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "substates")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(ID "nbits")
(PUNCT ",")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "statelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "substates")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "statelist")
(NEWLINE)
(DEDENT)
(ID "_state_subsets")
(PUNCT "=")
(ID "expand_substates")
(PUNCT "(")
(ID "_states")
(PUNCT ")")
(NEWLINE)
(ID "_state_codes")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "_states")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "_modifiers")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(ID "i")
(PUNCT ")")
(PUNCT "&")
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "|=")
(ID "_modifier_masks")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_state_codes")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_ComplexBinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__create_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lists")
(PUNCT ",")
(ID "mc_type")
(PUNCT ",")
(ID "mc_state")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "handler")
(PUNCT "(")
(ID "event")
(PUNCT ",")
(ID "lists")
(PUNCT "=")
(ID "lists")
(PUNCT ",")
(ID "mc_type")
(PUNCT "=")
(ID "mc_type")
(PUNCT ",")
(ID "mc_state")
(PUNCT "=")
(ID "mc_state")
(PUNCT ",")
(ID "ishandlerrunning")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ishandlerrunning")
(PUNCT ",")
(ID "doafterhandler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "doafterhandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ishandlerrunning")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(KEYWORD True)
(PUNCT "]")
(NEWLINE)
(ID "event")
(PUNCT ".")
(ID "mc_type")
(PUNCT "=")
(ID "mc_type")
(NEWLINE)
(ID "event")
(PUNCT ".")
(ID "mc_state")
(PUNCT "=")
(ID "mc_state")
(NEWLINE)
(ID "wascalled")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "r")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "l")
(KEYWORD in)
(ID "lists")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "l")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "func")
(KEYWORD not)
(KEYWORD in)
(ID "wascalled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wascalled")
(PUNCT "[")
(ID "func")
(PUNCT "]")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "r")
(PUNCT "=")
(ID "l")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ishandlerrunning")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "doafterhandler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "doafterhandler")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "widget")
(PUNCT ",")
(ID "widgetinst")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "typename")
(PUNCT "=")
(ID "_types")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT "=")
(ID "widget")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT "=")
(ID "widgetinst")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "=")
(PUNCT "{")
(KEYWORD None)
(PUNCT ":")
(PUNCT "[")
(PUNCT "[")
(PUNCT "]")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "_states")
(PUNCT "]")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlerids")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ishandlerrunning")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "doafterhandler")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "_states")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lists")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "_state_subsets")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(ID "handler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__create_handler")
(PUNCT "(")
(ID "lists")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "_state_codes")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "seq")
(PUNCT "=")
(LIT "<")
(PUNCT "+")
(ID "_state_names")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "typename")
(PUNCT "+")
(LIT ">")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlerids")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "seq")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT ",")
(ID "seq")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(PUNCT "[")
(PUNCT "]")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "_states")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "_states")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lists")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "[")
(ID "detail")
(PUNCT "]")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD for)
(ID "detail")
(KEYWORD in)
(PUNCT "(")
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "_state_subsets")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(ID "handler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__create_handler")
(PUNCT "(")
(ID "lists")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "_state_codes")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "seq")
(PUNCT "=")
(LIT "<%s%s-%s>")
(PUNCT "%")
(PUNCT "(")
(ID "_state_names")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "typename")
(PUNCT ",")
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlerids")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "seq")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT ",")
(ID "seq")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "doit")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "ishandlerrunning")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "doit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "doafterhandler")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "doit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "doit")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "bindedfuncs")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "ishandlerrunning")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "doit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "doafterhandler")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "doit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "seq")
(PUNCT ",")
(ID "id")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "handlerids")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widgetinst")
(PUNCT ",")
(ID "seq")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "tkinter")
(PUNCT ".")
(ID "TclError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "APPLICATION_GONE")
(KEYWORD in)
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_types")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(LIT "KeyPress")
(PUNCT ",")
(LIT "Key")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "KeyRelease")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "ButtonPress")
(PUNCT ",")
(LIT "Button")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "ButtonRelease")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Activate")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Circulate")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Colormap")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Configure")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Deactivate")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Destroy")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Enter")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Expose")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "FocusIn")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "FocusOut")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Gravity")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Leave")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Map")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Motion")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "MouseWheel")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Property")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Reparent")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Unmap")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "Visibility")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "_binder_classes")
(PUNCT "=")
(PUNCT "(")
(ID "_ComplexBinder")
(PUNCT ",")
(PUNCT ")")
(PUNCT "*")
(LIT 4)
(PUNCT "+")
(PUNCT "(")
(ID "_SimpleBinder")
(PUNCT ",")
(PUNCT ")")
(PUNCT "*")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "_types")
(PUNCT ")")
(PUNCT "-")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(ID "_type_names")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "number")
(PUNCT ")")
(KEYWORD for)
(ID "number")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "_types")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "_types")
(PUNCT "[")
(ID "number")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "_keysym_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^\\w+$")
(PUNCT ")")
(NEWLINE)
(ID "_button_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[1-5]$")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_parse_sequence")
(PUNCT "(")
(ID "sequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a string which should describe an event sequence. If it is\n    successfully parsed as one, return a tuple containing the state (as an int),\n    the event type (as an index of _types), and the detail - None if none, or a\n    string if there is one. If the parsing is unsuccessful, return None.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "sequence")
(KEYWORD or)
(ID "sequence")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "<")
(KEYWORD or)
(ID "sequence")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT ">")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "words")
(PUNCT "=")
(ID "sequence")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "modifiers")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "words")
(KEYWORD and)
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "_modifier_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "modifiers")
(PUNCT "|=")
(LIT 1)
(PUNCT "<<")
(ID "_modifier_names")
(PUNCT "[")
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "words")
(KEYWORD and)
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(ID "_type_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "_type_names")
(PUNCT "[")
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_binder_classes")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(KEYWORD is)
(ID "_SimpleBinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "modifiers")
(KEYWORD or)
(ID "words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "detail")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(KEYWORD in)
(PUNCT "[")
(ID "_type_names")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(PUNCT "(")
(LIT "KeyPress")
(PUNCT ",")
(LIT "KeyRelease")
(PUNCT ")")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type_re")
(PUNCT "=")
(ID "_keysym_re")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type_re")
(PUNCT "=")
(ID "_button_re")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "detail")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "type_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "detail")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "modifiers")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "detail")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_triplet_to_sequence")
(PUNCT "(")
(ID "triplet")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<")
(PUNCT "+")
(ID "_state_names")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "+")
(ID "_types")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(LIT "-")
(PUNCT "+")
(ID "triplet")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "+")
(LIT ">")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<")
(PUNCT "+")
(ID "_state_names")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "+")
(ID "_types")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+")
(LIT ">")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_multicall_dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "MultiCallCreator")
(PUNCT "(")
(ID "widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a MultiCall class which inherits its methods from the\n    given widget class (for example, Tkinter.Text). This is used\n    instead of a templating mechanism.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "widget")
(KEYWORD in)
(ID "_multicall_dict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_multicall_dict")
(PUNCT "[")
(ID "widget")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MultiCall")
(PUNCT "(")
(ID "widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "issubclass")
(PUNCT "(")
(ID "widget")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "Misc")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "=")
(PUNCT "[")
(ID "_binder_classes")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "widget")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "_types")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "sequence")
(PUNCT ")")
(KEYWORD is)
(ID "str")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "sequence")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(KEYWORD and)
(ID "sequence")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "<<")
(KEYWORD and)
(ID "sequence")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT ">>")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sequence")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ei")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "sequence")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "ei")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "triplet")
(KEYWORD in)
(ID "ei")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "triplet")
(PUNCT ",")
(ID "ei")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ei")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "func")
(NEWLINE)
(KEYWORD if)
(ID "ei")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "triplet")
(KEYWORD in)
(ID "ei")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "sequence")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "func")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "widget")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "funcid")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "sequence")
(PUNCT ")")
(KEYWORD is)
(ID "str")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "sequence")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(KEYWORD and)
(ID "sequence")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "<<")
(KEYWORD and)
(ID "sequence")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT ">>")
(KEYWORD and)
(ID "sequence")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT ",")
(ID "triplets")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "sequence")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "func")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "triplet")
(KEYWORD in)
(ID "triplets")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "sequence")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "widget")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "funcid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "event_add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ",")
(PUNCT "*")
(ID "sequences")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "virtual")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "virtual")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "func")
(PUNCT ",")
(ID "triplets")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "virtual")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "seq")
(KEYWORD in)
(ID "sequences")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "triplet")
(PUNCT "=")
(ID "_parse_sequence")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "triplet")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "widget")
(PUNCT ".")
(ID "event_add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ",")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "func")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "triplets")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "triplet")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "event_delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ",")
(PUNCT "*")
(ID "sequences")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "virtual")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "func")
(PUNCT ",")
(ID "triplets")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "virtual")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "seq")
(KEYWORD in)
(ID "sequences")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "triplet")
(PUNCT "=")
(ID "_parse_sequence")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "triplet")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "widget")
(PUNCT ".")
(ID "event_delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ",")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "func")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "triplets")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "triplet")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "event_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "virtual")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "virtual")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "widget")
(PUNCT ".")
(ID "event_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "_triplet_to_sequence")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "virtual")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "widget")
(PUNCT ".")
(ID "event_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "virtual")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT ",")
(ID "triplets")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eventinfo")
(PUNCT "[")
(ID "virtual")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "func")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "triplet")
(KEYWORD in)
(ID "triplets")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__binders")
(PUNCT "[")
(ID "triplet")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(PUNCT ".")
(ID "unbind")
(PUNCT "(")
(ID "triplet")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "tkinter")
(PUNCT ".")
(ID "TclError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "APPLICATION_GONE")
(KEYWORD in)
(ID "e")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_multicall_dict")
(PUNCT "[")
(ID "widget")
(PUNCT "]")
(PUNCT "=")
(ID "MultiCall")
(NEWLINE)
(KEYWORD return)
(ID "MultiCall")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_multi_call")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(ID "tkinter")
(PUNCT ".")
(ID "Tk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(LIT "Test MultiCall")
(PUNCT ")")
(NEWLINE)
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "[x+]")
(PUNCT ",")
(ID "parent")
(PUNCT ".")
(ID "geometry")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "geometry")
(PUNCT "(")
(LIT "+%d+%d")
(PUNCT "%")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "+")
(LIT 150)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "MultiCallCreator")
(PUNCT "(")
(ID "tkinter")
(PUNCT ".")
(ID "Text")
(PUNCT ")")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "bindseq")
(PUNCT "(")
(ID "seq")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "handler")
(PUNCT "(")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<handler%d>>")
(PUNCT "%")
(ID "n")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "event_add")
(PUNCT "(")
(LIT "<<handler%d>>")
(PUNCT "%")
(ID "n")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "bindseq")
(PUNCT "(")
(LIT "<Key>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Control-Key>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Alt-Key-a>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Control-Key-a>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Alt-Control-Key-a>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Key-b>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Control-Button-1>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Button-2>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Alt-Button-1>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<FocusOut>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Enter>")
(PUNCT ")")
(NEWLINE)
(ID "bindseq")
(PUNCT "(")
(LIT "<Leave>")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "idle_test")
(PUNCT ".")
(ID "htest")
(KEYWORD import)
(ID "run")
(NEWLINE)
(ID "run")
(PUNCT "(")
(ID "_multi_call")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
