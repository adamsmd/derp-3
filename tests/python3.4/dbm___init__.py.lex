(LIT "Generic interface to all dbm clones.\n\nUse\n\n        import dbm\n        d = dbm.open(file, 'w', 0o666)\n\nThe returned object is a dbm.gnu, dbm.ndbm or dbm.dumb object, dependent on the\ntype of database being opened (determined by the whichdb function) in the case\nof an existing dbm. If the dbm does not exist and the create or new flag ('c'\nor 'n') was specified, the dbm type will be determined by the availability of\nthe modules (tested in the above order).\n\nIt has the following interface (key and data are strings):\n\n        d[key] = data   # store data at key (may override data at\n                        # existing key)\n        data = d[key]   # retrieve data at key (raise KeyError if no\n                        # such key)\n        del d[key]      # delete data stored at key (raises KeyError\n                        # if no such key)\n        flag = key in d # true if the key exists\n        list = d.keys() # return a list of all existing keys (slow!)\n\nFuture versions may change the order in which implementations are\ntested for existence, and add interfaces to other dbm-like\nimplementations.\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "open")
(PUNCT ",")
(LIT "whichdb")
(PUNCT ",")
(LIT "error")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD class)
(ID "error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "_names")
(PUNCT "=")
(PUNCT "[")
(LIT "dbm.gnu")
(PUNCT ",")
(LIT "dbm.ndbm")
(PUNCT ",")
(LIT "dbm.dumb")
(PUNCT "]")
(NEWLINE)
(ID "_defaultmod")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_modules")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "error")
(PUNCT "=")
(PUNCT "(")
(ID "error")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "dbm")
(KEYWORD import)
(ID "ndbm")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ndbm")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "flag")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 438)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open or create database at path given by *file*.\n\n    Optional argument *flag* can be 'r' (default) for read-only access, 'w'\n    for read-write access of an existing database, 'c' for read-write access\n    to a new or existing database, and 'n' for read-write access to a new\n    database.\n\n    Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it\n    only if it doesn't exist; and 'n' always creates a new database.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_defaultmod")
(NEWLINE)
(KEYWORD if)
(ID "_defaultmod")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "fromlist")
(PUNCT "=")
(PUNCT "[")
(LIT "open")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_defaultmod")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_defaultmod")
(PUNCT "=")
(ID "mod")
(NEWLINE)
(DEDENT)
(ID "_modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "mod")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_defaultmod")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "no dbm clone found; tried %s")
(PUNCT "%")
(ID "_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "whichdb")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(KEYWORD if)
(LIT "n")
(KEYWORD not)
(KEYWORD in)
(ID "flag")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "c")
(KEYWORD in)
(ID "flag")
(KEYWORD or)
(LIT "n")
(KEYWORD in)
(ID "flag")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod")
(PUNCT "=")
(ID "_defaultmod")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "(")
(LIT "need 'c' or 'n' flag to open new db")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "result")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "(")
(LIT "db type could not be determined")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "result")
(KEYWORD not)
(KEYWORD in)
(ID "_modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "error")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "(")
(LIT "db type is {0}, but the module is not ")
(LIT "available")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod")
(PUNCT "=")
(ID "_modules")
(PUNCT "[")
(ID "result")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "mod")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "flag")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "whichdb")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess which db package to use to open a db file.\n\n    Return values:\n\n    - None if the database file can't be read;\n    - empty string if the file can be read but can't be recognized\n    - the name of the dbm submodule (e.g. \"ndbm\" or \"gnu\") if recognized.\n\n    Importing the given module may still fail, and opening the\n    database using that module may still fail.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT ".pag")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT ".dir")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "dbm.ndbm")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT ".db")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ndbm")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "ndbm")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "dbm.ndbm")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT ".dat")
(PUNCT ")")
(NEWLINE)
(ID "size")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT ".dir")
(PUNCT ")")
(PUNCT ".")
(ID "st_size")
(NEWLINE)
(KEYWORD if)
(ID "size")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "dbm.dumb")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT "+")
(LIT ".dir")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT #"'")
(PUNCT ",")
(LIT #"\"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "dbm.dumb")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "s16")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s16")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "!=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "magic")
(PUNCT ",")
(PUNCT ")")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT "=l")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "struct")
(PUNCT ".")
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "magic")
(KEYWORD in)
(PUNCT "(")
(LIT 324508366)
(PUNCT ",")
(LIT 324508365)
(PUNCT ",")
(LIT 324508367)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "dbm.gnu")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "magic")
(PUNCT ",")
(PUNCT ")")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT "=l")
(PUNCT ",")
(ID "s16")
(PUNCT "[")
(PUNCT "-")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "struct")
(PUNCT ".")
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "whichdb")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(KEYWORD or)
(LIT "UNKNOWN")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
