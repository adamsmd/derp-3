(LIT "distutils.cygwinccompiler\n\nProvides the CygwinCCompiler class, a subclass of UnixCCompiler that\nhandles the Cygwin port of the GNU C compiler to Windows.  It also contains\nthe Mingw32CCompiler class which handles the mingw32 port of GCC (same as\ncygwin in no-cygwin mode).\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "copy")
(NEWLINE)
(KEYWORD from)
(ID "subprocess")
(KEYWORD import)
(ID "Popen")
(PUNCT ",")
(ID "PIPE")
(PUNCT ",")
(ID "check_output")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "gen_preprocess_options")
(PUNCT ",")
(ID "gen_lib_options")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "unixccompiler")
(KEYWORD import)
(ID "UnixCCompiler")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "file_util")
(KEYWORD import)
(ID "write_file")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "(")
(ID "DistutilsExecError")
(PUNCT ",")
(ID "CCompilerError")
(PUNCT ",")
(ID "CompileError")
(PUNCT ",")
(ID "UnknownFileError")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "version")
(KEYWORD import)
(ID "LooseVersion")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "spawn")
(KEYWORD import)
(ID "find_executable")
(NEWLINE)
(KEYWORD def)
(ID "get_msvcr")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Include the appropriate MSVC runtime library if Python was built\n    with MSVC 7.0 or later.\n    ")
(NEWLINE)
(ID "msc_pos")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "MSC v.")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "msc_pos")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msc_ver")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(ID "msc_pos")
(PUNCT "+")
(LIT 6)
(PUNCT ":")
(ID "msc_pos")
(PUNCT "+")
(LIT 10)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "msc_ver")
(PUNCT "==")
(LIT "1300")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "msvcr70")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "msc_ver")
(PUNCT "==")
(LIT "1310")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "msvcr71")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "msc_ver")
(PUNCT "==")
(LIT "1400")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "msvcr80")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "msc_ver")
(PUNCT "==")
(LIT "1500")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "msvcr90")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "msc_ver")
(PUNCT "==")
(LIT "1600")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(LIT "msvcr100")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unknown MS Compiler version %s ")
(PUNCT "%")
(ID "msc_ver")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "CygwinCCompiler")
(PUNCT "(")
(ID "UnixCCompiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Handles the Cygwin port of the GNU C compiler to Windows.\n    ")
(NEWLINE)
(ID "compiler_type")
(PUNCT "=")
(LIT "cygwin")
(NEWLINE)
(ID "obj_extension")
(PUNCT "=")
(LIT ".o")
(NEWLINE)
(ID "static_lib_extension")
(PUNCT "=")
(LIT ".a")
(NEWLINE)
(ID "shared_lib_extension")
(PUNCT "=")
(LIT ".dll")
(NEWLINE)
(ID "static_lib_format")
(PUNCT "=")
(LIT "lib%s%s")
(NEWLINE)
(ID "shared_lib_format")
(PUNCT "=")
(LIT "%s%s")
(NEWLINE)
(ID "exe_extension")
(PUNCT "=")
(LIT ".exe")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "UnixCCompiler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT ")")
(NEWLINE)
(ID "status")
(PUNCT ",")
(ID "details")
(PUNCT "=")
(ID "check_config_h")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(LIT "Python's GCC status: %s (details: %s)")
(PUNCT "%")
(PUNCT "(")
(ID "status")
(PUNCT ",")
(ID "details")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "status")
(KEYWORD is)
(KEYWORD not)
(ID "CONFIG_H_OK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Python's pyconfig.h doesn't seem to support your compiler. ")
(LIT "Reason: %s. ")
(LIT "Compiling may fail because of undefined preprocessor macros.")
(PUNCT "%")
(ID "details")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "gcc_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "ld_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "dllwrap_version")
(PUNCT "=")
(ID "get_versions")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug_print")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler_type")
(PUNCT "+")
(LIT ": gcc %s, ld %s, dllwrap %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "gcc_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "ld_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "dllwrap_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ld_version")
(PUNCT ">=")
(LIT "2.10.90")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "linker_dll")
(PUNCT "=")
(LIT "gcc")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "linker_dll")
(PUNCT "=")
(LIT "dllwrap")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ld_version")
(PUNCT ">=")
(LIT "2.13")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shared_option")
(PUNCT "=")
(LIT "-shared")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shared_option")
(PUNCT "=")
(LIT "-mdll -static")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_executables")
(PUNCT "(")
(ID "compiler")
(PUNCT "=")
(LIT "gcc -mcygwin -O -Wall")
(PUNCT ",")
(ID "compiler_so")
(PUNCT "=")
(LIT "gcc -mcygwin -mdll -O -Wall")
(PUNCT ",")
(ID "compiler_cxx")
(PUNCT "=")
(LIT "g++ -mcygwin -O -Wall")
(PUNCT ",")
(ID "linker_exe")
(PUNCT "=")
(LIT "gcc -mcygwin")
(PUNCT ",")
(ID "linker_so")
(PUNCT "=")
(PUNCT "(")
(LIT "%s -mcygwin %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "linker_dll")
(PUNCT ",")
(ID "shared_option")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "gcc_version")
(PUNCT "==")
(LIT "2.91.57")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dll_libraries")
(PUNCT "=")
(PUNCT "[")
(LIT "msvcrt")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Consider upgrading to a newer version of gcc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dll_libraries")
(PUNCT "=")
(ID "get_msvcr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_compile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "src")
(PUNCT ",")
(ID "ext")
(PUNCT ",")
(ID "cc_args")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT ",")
(ID "pp_opts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compiles the source by spawning GCC and windres if needed.")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(PUNCT "==")
(LIT ".rc")
(KEYWORD or)
(ID "ext")
(PUNCT "==")
(LIT ".res")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(LIT "windres")
(PUNCT ",")
(LIT "-i")
(PUNCT ",")
(ID "src")
(PUNCT ",")
(LIT "-o")
(PUNCT ",")
(ID "obj")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler_so")
(PUNCT "+")
(ID "cc_args")
(PUNCT "+")
(PUNCT "[")
(ID "src")
(PUNCT ",")
(LIT "-o")
(PUNCT ",")
(ID "obj")
(PUNCT "]")
(PUNCT "+")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "link")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target_desc")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "export_symbols")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "extra_preargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "build_temp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Link the objects.")
(NEWLINE)
(ID "extra_preargs")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "extra_preargs")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "libraries")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "libraries")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "objects")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "objects")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "libraries")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "dll_libraries")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(PUNCT "(")
(ID "export_symbols")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "target_desc")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "EXECUTABLE")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "linker_dll")
(PUNCT "==")
(LIT "gcc")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "temp_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "objects")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "dll_name")
(PUNCT ",")
(ID "dll_extension")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "def_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "temp_dir")
(PUNCT ",")
(ID "dll_name")
(PUNCT "+")
(LIT ".def")
(PUNCT ")")
(NEWLINE)
(ID "lib_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "temp_dir")
(PUNCT ",")
(LIT "lib")
(PUNCT "+")
(ID "dll_name")
(PUNCT "+")
(LIT ".a")
(PUNCT ")")
(NEWLINE)
(ID "contents")
(PUNCT "=")
(PUNCT "[")
(LIT "LIBRARY %s")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT ",")
(LIT "EXPORTS")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "sym")
(KEYWORD in)
(ID "export_symbols")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "contents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sym")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "execute")
(PUNCT "(")
(ID "write_file")
(PUNCT ",")
(PUNCT "(")
(ID "def_file")
(PUNCT ",")
(ID "contents")
(PUNCT ")")
(PUNCT ",")
(LIT "writing %s")
(PUNCT "%")
(ID "def_file")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "linker_dll")
(PUNCT "==")
(LIT "dllwrap")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_preargs")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "--output-lib")
(PUNCT ",")
(ID "lib_file")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "extra_preargs")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "--def")
(PUNCT ",")
(ID "def_file")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "objects")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "def_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_preargs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "UnixCCompiler")
(PUNCT ".")
(ID "link")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target_desc")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ",")
(ID "output_dir")
(PUNCT ",")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT ",")
(ID "extra_preargs")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT ",")
(ID "build_temp")
(PUNCT ",")
(ID "target_lang")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "object_filenames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source_filenames")
(PUNCT ",")
(ID "strip_dir")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adds supports for rc and res files.")
(NEWLINE)
(KEYWORD if)
(ID "output_dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output_dir")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "obj_names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "src_name")
(KEYWORD in)
(ID "source_filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normcase")
(PUNCT "(")
(ID "src_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "src_extensions")
(PUNCT "+")
(PUNCT "[")
(LIT ".rc")
(PUNCT ",")
(LIT ".res")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnknownFileError")
(PUNCT "(")
(LIT "unknown file type '%s' (from '%s')")
(PUNCT "%")
(PUNCT "(")
(ID "ext")
(PUNCT ",")
(ID "src_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "strip_dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(PUNCT "(")
(LIT ".res")
(PUNCT ",")
(LIT ".rc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "ext")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "obj_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "obj_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "obj_names")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Mingw32CCompiler")
(PUNCT "(")
(ID "CygwinCCompiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Handles the Mingw32 port of the GNU C compiler to Windows.\n    ")
(NEWLINE)
(ID "compiler_type")
(PUNCT "=")
(LIT "mingw32")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CygwinCCompiler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ld_version")
(PUNCT ">=")
(LIT "2.13")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shared_option")
(PUNCT "=")
(LIT "-shared")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shared_option")
(PUNCT "=")
(LIT "-mdll -static")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "gcc_version")
(PUNCT "<=")
(LIT "2.91.57")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entry_point")
(PUNCT "=")
(LIT "--entry _DllMain@12")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entry_point")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "is_cygwingcc")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CCompilerError")
(PUNCT "(")
(LIT "Cygwin gcc cannot be used with --compiler=mingw32")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_executables")
(PUNCT "(")
(ID "compiler")
(PUNCT "=")
(LIT "gcc -O -Wall")
(PUNCT ",")
(ID "compiler_so")
(PUNCT "=")
(LIT "gcc -mdll -O -Wall")
(PUNCT ",")
(ID "compiler_cxx")
(PUNCT "=")
(LIT "g++ -O -Wall")
(PUNCT ",")
(ID "linker_exe")
(PUNCT "=")
(LIT "gcc")
(PUNCT ",")
(ID "linker_so")
(PUNCT "=")
(LIT "%s %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "linker_dll")
(PUNCT ",")
(ID "shared_option")
(PUNCT ",")
(ID "entry_point")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dll_libraries")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dll_libraries")
(PUNCT "=")
(ID "get_msvcr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "CONFIG_H_OK")
(PUNCT "=")
(LIT "ok")
(NEWLINE)
(ID "CONFIG_H_NOTOK")
(PUNCT "=")
(LIT "not ok")
(NEWLINE)
(ID "CONFIG_H_UNCERTAIN")
(PUNCT "=")
(LIT "uncertain")
(NEWLINE)
(KEYWORD def)
(ID "check_config_h")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if the current Python installation appears amenable to building\n    extensions with GCC.\n\n    Returns a tuple (status, details), where 'status' is one of the following\n    constants:\n\n    - CONFIG_H_OK: all is well, go ahead and compile\n    - CONFIG_H_NOTOK: doesn't look good\n    - CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n    'details' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude \"OK\": either 'sys.version' contains\n    the string \"GCC\" (implying that this Python was built with GCC), or the\n    installed \"pyconfig.h\" contains the string \"__GNUC__\".\n    ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(KEYWORD if)
(LIT "GCC")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "CONFIG_H_OK")
(PUNCT ",")
(LIT "sys.version mentions 'GCC'")
(NEWLINE)
(DEDENT)
(ID "fn")
(PUNCT "=")
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_h_filename")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config_h")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "__GNUC__")
(KEYWORD in)
(ID "config_h")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "CONFIG_H_OK")
(PUNCT ",")
(LIT "'%s' mentions '__GNUC__'")
(PUNCT "%")
(ID "fn")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "CONFIG_H_NOTOK")
(PUNCT ",")
(LIT "'%s' does not mention '__GNUC__'")
(PUNCT "%")
(ID "fn")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "config_h")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "CONFIG_H_UNCERTAIN")
(PUNCT ",")
(LIT "couldn't read '%s': %s")
(PUNCT "%")
(PUNCT "(")
(ID "fn")
(PUNCT ",")
(ID "exc")
(PUNCT ".")
(ID "strerror")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "RE_VERSION")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"(\\d+\\.\\d+(\\.\\d+)*)")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_find_exe_version")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the version of an executable by running `cmd` in the shell.\n\n    If the command is not found, or the output does not match\n    `RE_VERSION`, returns None.\n    ")
(NEWLINE)
(ID "executable")
(PUNCT "=")
(ID "cmd")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "find_executable")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "out")
(PUNCT "=")
(ID "Popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "PIPE")
(PUNCT ")")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out_string")
(PUNCT "=")
(ID "out")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "RE_VERSION")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "out_string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "LooseVersion")
(PUNCT "(")
(ID "result")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_versions")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Try to find out the versions of gcc, ld and dllwrap.\n\n    If not possible it returns None for it.\n    ")
(NEWLINE)
(ID "commands")
(PUNCT "=")
(PUNCT "[")
(LIT "gcc -dumpversion")
(PUNCT ",")
(LIT "ld -v")
(PUNCT ",")
(LIT "dllwrap --version")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(PUNCT "[")
(ID "_find_exe_version")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "commands")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_cygwingcc")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to determine if the gcc that would be used is from cygwin.")
(NEWLINE)
(ID "out_string")
(PUNCT "=")
(ID "check_output")
(PUNCT "(")
(PUNCT "[")
(LIT "gcc")
(PUNCT ",")
(LIT "-dumpmachine")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "out_string")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT #"cygwin")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
