(LIT "Abstract base classes related to import.")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "_bootstrap")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "machinery")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_frozen_importlib")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "_frozen_importlib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "_frozen_importlib")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "abc")
(NEWLINE)
(KEYWORD def)
(ID "_register")
(PUNCT "(")
(ID "abstract_cls")
(PUNCT ",")
(PUNCT "*")
(ID "classes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "cls")
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "abstract_cls")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_frozen_importlib")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "frozen_cls")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "_frozen_importlib")
(PUNCT ",")
(ID "cls")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(ID "abstract_cls")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "frozen_cls")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Finder")
(PUNCT "(")
(ID "metaclass")
(PUNCT "=")
(ID "abc")
(PUNCT ".")
(ID "ABCMeta")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Legacy abstract base class for import finders.\n\n    It may be subclassed for compatibility with legacy third party\n    reimplementations of the import system.  Otherwise, finder\n    implementations should derive from the more specific MetaPathFinder\n    or PathEntryFinder ABCs.\n    ")
(NEWLINE)
(PUNCT "@")
(ID "abc")
(PUNCT ".")
(ID "abstractmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An abstract method that should find a module.\n        The fullname is a str and the optional path is a str or None.\n        Returns a Loader object or None.\n        ")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MetaPathFinder")
(PUNCT "(")
(ID "Finder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for import finders on sys.meta_path.")
(NEWLINE)
(KEYWORD def)
(ID "find_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a loader for the module.\n\n        If no module is found, return None.  The fullname is a str and\n        the path is a list of strings or None.\n\n        This method is deprecated in favor of finder.find_spec(). If find_spec()\n        exists then backwards-compatible functionality is provided for this\n        method.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "find_spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "found")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "found")
(PUNCT ".")
(ID "loader")
(KEYWORD if)
(ID "found")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invalidate_caches")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An optional method for clearing the finder's cache, if any.\n        This method is used by importlib.invalidate_caches().\n        ")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_register")
(PUNCT "(")
(ID "MetaPathFinder")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "BuiltinImporter")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "FrozenImporter")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "PathFinder")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "WindowsRegistryFinder")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "PathEntryFinder")
(PUNCT "(")
(ID "Finder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for path entry finders used by PathFinder.")
(NEWLINE)
(KEYWORD def)
(ID "find_loader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return (loader, namespace portion) for the path entry.\n\n        The fullname is a str.  The namespace portion is a sequence of\n        path entries contributing to part of a namespace package. The\n        sequence may be empty.  If loader is not None, the portion will\n        be ignored.\n\n        The portion will be discarded if another path entry finder\n        locates the module as a normal module or package.\n\n        This method is deprecated in favor of finder.find_spec(). If find_spec()\n        is provided than backwards-compatible functionality is provided.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "find_spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "found")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "found")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "found")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "portions")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "portions")
(PUNCT "=")
(ID "found")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "found")
(PUNCT ".")
(ID "loader")
(PUNCT ",")
(ID "portions")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "find_module")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_find_module_shim")
(NEWLINE)
(KEYWORD def)
(ID "invalidate_caches")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An optional method for clearing the finder's cache, if any.\n        This method is used by PathFinder.invalidate_caches().\n        ")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_register")
(PUNCT "(")
(ID "PathEntryFinder")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "FileFinder")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Loader")
(PUNCT "(")
(ID "metaclass")
(PUNCT "=")
(ID "abc")
(PUNCT ".")
(ID "ABCMeta")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for import loaders.")
(NEWLINE)
(KEYWORD def)
(ID "create_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a module to initialize and into which to load.\n\n        This method should raise ImportError if anything prevents it\n        from creating a new module.  It may return None to indicate\n        that the spec should create the new module.\n\n        create_module() is optional.\n\n        ")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the loaded module.\n\n        The module must be added to sys.modules and have import-related\n        attributes set properly.  The fullname is a str.\n\n        ImportError is raised on failure.\n\n        This method is deprecated in favor of loader.exec_module(). If\n        exec_module() exists then it is used to provide a backwards-compatible\n        functionality for this method.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "exec_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_bootstrap")
(PUNCT ".")
(ID "_load_module_shim")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "module_repr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a module's repr.\n\n        Used by the module type when the method does not raise\n        NotImplementedError.\n\n        This method is deprecated.\n\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ResourceLoader")
(PUNCT "(")
(ID "Loader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for loaders which can return data from their\n    back-end storage.\n\n    This ABC represents one of the optional protocols specified by PEP 302.\n\n    ")
(NEWLINE)
(PUNCT "@")
(ID "abc")
(PUNCT ".")
(ID "abstractmethod")
(NEWLINE)
(KEYWORD def)
(ID "get_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract method which when implemented should return the bytes for\n        the specified path.  The path must be a str.")
(NEWLINE)
(KEYWORD raise)
(ID "IOError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "InspectLoader")
(PUNCT "(")
(ID "Loader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for loaders which support inspection about the\n    modules they can load.\n\n    This ABC represents one of the optional protocols specified by PEP 302.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "is_package")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Optional method which when implemented should return whether the\n        module is a package.  The fullname is a str.  Returns a bool.\n\n        Raises ImportError if the module cannot be found.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Method which returns the code object for the module.\n\n        The fullname is a str.  Returns a types.CodeType if possible, else\n        returns None if a code object does not make sense\n        (e.g. built-in module). Raises ImportError if the module cannot be\n        found.\n        ")
(NEWLINE)
(ID "source")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_source")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "source")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "source_to_code")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "abc")
(PUNCT ".")
(ID "abstractmethod")
(NEWLINE)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract method which should return the source code for the\n        module.  The fullname is a str.  Returns a str.\n\n        Raises ImportError if the module cannot be found.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "source_to_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(LIT "<string>")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile 'data' into a code object.\n\n        The 'data' argument can be anything that compile() can handle. The'path'\n        argument should be where the data was retrieved (when applicable).")
(NEWLINE)
(KEYWORD return)
(ID "compile")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(LIT "exec")
(PUNCT ",")
(ID "dont_inherit")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "exec_module")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_LoaderBasics")
(PUNCT ".")
(ID "exec_module")
(NEWLINE)
(ID "load_module")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_LoaderBasics")
(PUNCT ".")
(ID "load_module")
(NEWLINE)
(DEDENT)
(ID "_register")
(PUNCT "(")
(ID "InspectLoader")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "BuiltinImporter")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "FrozenImporter")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "ExecutionLoader")
(PUNCT "(")
(ID "InspectLoader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for loaders that wish to support the execution of\n    modules as scripts.\n\n    This ABC represents one of the optional protocols specified in PEP 302.\n\n    ")
(NEWLINE)
(PUNCT "@")
(ID "abc")
(PUNCT ".")
(ID "abstractmethod")
(NEWLINE)
(KEYWORD def)
(ID "get_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract method which should return the value that __file__ is to be\n        set to.\n\n        Raises ImportError if the module cannot be found.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Method to return the code object for fullname.\n\n        Should return None if not applicable (e.g. built-in module).\n        Raise ImportError if the module cannot be found.\n        ")
(NEWLINE)
(ID "source")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_source")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "source")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_filename")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "source_to_code")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "source_to_code")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_register")
(PUNCT "(")
(ID "ExecutionLoader")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "ExtensionFileLoader")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "FileLoader")
(PUNCT "(")
(ID "_bootstrap")
(PUNCT ".")
(ID "FileLoader")
(PUNCT ",")
(ID "ResourceLoader")
(PUNCT ",")
(ID "ExecutionLoader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class partially implementing the ResourceLoader and\n    ExecutionLoader ABCs.")
(NEWLINE)
(DEDENT)
(ID "_register")
(PUNCT "(")
(ID "FileLoader")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "SourceFileLoader")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "SourcelessFileLoader")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "SourceLoader")
(PUNCT "(")
(ID "_bootstrap")
(PUNCT ".")
(ID "SourceLoader")
(PUNCT ",")
(ID "ResourceLoader")
(PUNCT ",")
(ID "ExecutionLoader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for loading source code (and optionally any\n    corresponding bytecode).\n\n    To support loading from source code, the abstractmethods inherited from\n    ResourceLoader and ExecutionLoader need to be implemented. To also support\n    loading from bytecode, the optional methods specified directly by this ABC\n    is required.\n\n    Inherited abstractmethods not implemented in this ABC:\n\n        * ResourceLoader.get_data\n        * ExecutionLoader.get_filename\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "path_mtime")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the (int) modification time for the path (str).")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "path_stats")
(PUNCT ".")
(ID "__func__")
(KEYWORD is)
(ID "SourceLoader")
(PUNCT ".")
(ID "path_stats")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IOError")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path_stats")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "[")
(LIT "mtime")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "path_stats")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a metadata dict for the source pointed to by the path (str).\n        Possible keys:\n        - 'mtime' (mandatory) is the numeric timestamp of last source\n          code modification;\n        - 'size' (optional) is the size in bytes of the source code.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "path_mtime")
(PUNCT ".")
(ID "__func__")
(KEYWORD is)
(ID "SourceLoader")
(PUNCT ".")
(ID "path_mtime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IOError")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "{")
(LIT "mtime")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "path_mtime")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write the bytes to the path (if possible).\n\n        Accepts a str path and data as bytes.\n\n        Any needed intermediary directories are to be created. If for some\n        reason the file cannot be written because of permissions, fail\n        silently.\n        ")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_register")
(PUNCT "(")
(ID "SourceLoader")
(PUNCT ",")
(ID "machinery")
(PUNCT ".")
(ID "SourceFileLoader")
(PUNCT ")")
(NEWLINE)
(ENDMARKER)
