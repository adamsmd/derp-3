(LIT "distutils.command.sdist\n\nImplements the Distutils 'sdist' command (create a source distribution).")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "string")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "types")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "glob")
(KEYWORD import)
(ID "glob")
(NEWLINE)
(KEYWORD from)
(ID "warnings")
(KEYWORD import)
(ID "warn")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "dir_util")
(PUNCT ",")
(ID "dep_util")
(PUNCT ",")
(ID "file_util")
(PUNCT ",")
(ID "archive_util")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "text_file")
(KEYWORD import)
(ID "TextFile")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "filelist")
(KEYWORD import)
(ID "FileList")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "convert_path")
(NEWLINE)
(KEYWORD def)
(ID "show_formats")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print all possible values for the 'formats' option (used by\n    the \"--help-formats\" command-line option).\n    ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "fancy_getopt")
(KEYWORD import)
(ID "FancyGetopt")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "archive_util")
(KEYWORD import)
(ID "ARCHIVE_FORMATS")
(NEWLINE)
(ID "formats")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "format")
(KEYWORD in)
(ID "ARCHIVE_FORMATS")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "formats")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "formats=")
(PUNCT "+")
(ID "format")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "ARCHIVE_FORMATS")
(PUNCT "[")
(ID "format")
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "formats")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "FancyGetopt")
(PUNCT "(")
(ID "formats")
(PUNCT ")")
(PUNCT ".")
(ID "print_help")
(PUNCT "(")
(LIT "List of available source distribution formats:")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "sdist")
(PUNCT "(")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(LIT "create a source distribution (tarball, zip file, etc.)")
(NEWLINE)
(KEYWORD def)
(ID "checking_metadata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Callable used for the check sub-command.\n\n        Placed here so user_options can view it")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "metadata_check")
(NEWLINE)
(DEDENT)
(ID "user_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "template=")
(PUNCT ",")
(LIT "t")
(PUNCT ",")
(LIT "name of manifest template file [default: MANIFEST.in]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "manifest=")
(PUNCT ",")
(LIT "m")
(PUNCT ",")
(LIT "name of manifest file [default: MANIFEST]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "use-defaults")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "include the default file set in the manifest ")
(LIT "[default; disable with --no-defaults]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "no-defaults")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "don't include the default file set")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "prune")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "specifically exclude files/directories that should not be ")
(LIT "distributed (build tree, RCS/CVS dirs, etc.) ")
(LIT "[default; disable with --no-prune]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "no-prune")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "don't automatically exclude anything")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "manifest-only")
(PUNCT ",")
(LIT "o")
(PUNCT ",")
(LIT "just regenerate the manifest and then stop ")
(LIT "(implies --force-manifest)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "force-manifest")
(PUNCT ",")
(LIT "f")
(PUNCT ",")
(LIT "forcibly regenerate the manifest and carry on as usual. ")
(LIT "Deprecated: now the manifest is always regenerated.")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "formats=")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "formats for source distribution (comma-separated list)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "keep-temp")
(PUNCT ",")
(LIT "k")
(PUNCT ",")
(LIT "keep the distribution tree around after creating ")
(PUNCT "+")
(LIT "archive file(s)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "dist-dir=")
(PUNCT ",")
(LIT "d")
(PUNCT ",")
(LIT "directory to put the source distribution archive(s) in ")
(LIT "[default: dist]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "metadata-check")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "Ensure that all required elements of meta-data ")
(LIT "are supplied. Warn if any missing. [default]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "owner=")
(PUNCT ",")
(LIT "u")
(PUNCT ",")
(LIT "Owner name used when creating a tar file [default: current user]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "group=")
(PUNCT ",")
(LIT "g")
(PUNCT ",")
(LIT "Group name used when creating a tar file [default: current group]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "boolean_options")
(PUNCT "=")
(PUNCT "[")
(LIT "use-defaults")
(PUNCT ",")
(LIT "prune")
(PUNCT ",")
(LIT "manifest-only")
(PUNCT ",")
(LIT "force-manifest")
(PUNCT ",")
(LIT "keep-temp")
(PUNCT ",")
(LIT "metadata-check")
(PUNCT "]")
(NEWLINE)
(ID "help_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "help-formats")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list available distribution formats")
(PUNCT ",")
(ID "show_formats")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "negative_opt")
(PUNCT "=")
(PUNCT "{")
(LIT "no-defaults")
(PUNCT ":")
(LIT "use-defaults")
(PUNCT ",")
(LIT "no-prune")
(PUNCT ":")
(LIT "prune")
(PUNCT "}")
(NEWLINE)
(ID "default_format")
(PUNCT "=")
(PUNCT "{")
(LIT "posix")
(PUNCT ":")
(LIT "gztar")
(PUNCT ",")
(LIT "nt")
(PUNCT ":")
(LIT "zip")
(PUNCT "}")
(NEWLINE)
(ID "sub_commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "check")
(PUNCT ",")
(ID "checking_metadata")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "template")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "use_defaults")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prune")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "manifest_only")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "force_manifest")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "keep_temp")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dist_dir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "archive_files")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "metadata_check")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "group")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "manifest")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT "=")
(LIT "MANIFEST")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "template")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "template")
(PUNCT "=")
(LIT "MANIFEST.in")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ensure_string_list")
(PUNCT "(")
(LIT "formats")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "formats")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "default_format")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "don't know how to create source distributions ")
(LIT "on platform %s")
(PUNCT "%")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "bad_format")
(PUNCT "=")
(ID "archive_util")
(PUNCT ".")
(ID "check_archive_formats")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "bad_format")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(LIT "unknown archive format '%s'")
(PUNCT "%")
(ID "bad_format")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "dist_dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dist_dir")
(PUNCT "=")
(LIT "dist")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT "=")
(ID "FileList")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cmd_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "get_sub_commands")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "run_command")
(PUNCT "(")
(ID "cmd_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "get_file_list")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "manifest_only")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "make_distribution")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_metadata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deprecated API.")
(NEWLINE)
(ID "warn")
(PUNCT "(")
(LIT "distutils.command.sdist.check_metadata is deprecated,               use the check command instead")
(PUNCT ",")
(ID "PendingDeprecationWarning")
(PUNCT ")")
(NEWLINE)
(ID "check")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_command_obj")
(PUNCT "(")
(LIT "check")
(PUNCT ")")
(NEWLINE)
(ID "check")
(PUNCT ".")
(ID "ensure_finalized")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "check")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_file_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Figure out the list of files to include in the source\n        distribution, and put it in 'self.filelist'.  This might involve\n        reading the manifest template (and writing the manifest), or just\n        reading the manifest, or just using the default file set -- it all\n        depends on the user's options.\n        ")
(NEWLINE)
(ID "template_exists")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "template")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "template_exists")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_manifest_is_not_generated")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "read_manifest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "remove_duplicates")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "template_exists")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(PUNCT "(")
(LIT "manifest template '%s' does not exist ")
(PUNCT "+")
(LIT "(using default file list)")
(PUNCT ")")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "template")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "findall")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "use_defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_defaults")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "template_exists")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "read_template")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "prune")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "prune_file_list")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "remove_duplicates")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write_manifest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_defaults")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add all the default files to self.filelist:\n          - README or README.txt\n          - setup.py\n          - test/test*.py\n          - all pure Python modules mentioned in setup script\n          - all files pointed by package_data (build_py)\n          - all files defined in data_files.\n          - all files defined as scripts.\n          - all C sources listed as part of extensions or C libraries\n            in the setup script (doesn't catch C headers!)\n        Warns if (README or README.txt) or setup.py are missing; everything\n        else is optional.\n        ")
(NEWLINE)
(ID "standards")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "README")
(PUNCT ",")
(LIT "README.txt")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "script_name")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "fn")
(KEYWORD in)
(ID "standards")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "fn")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alts")
(PUNCT "=")
(ID "fn")
(NEWLINE)
(ID "got_it")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "fn")
(KEYWORD in)
(ID "alts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "got_it")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "got_it")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "standard file not found: should have one of ")
(PUNCT "+")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "alts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "standard file '%s' not found")
(PUNCT "%")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "optional")
(PUNCT "=")
(PUNCT "[")
(LIT "test/test*.py")
(PUNCT ",")
(LIT "setup.cfg")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "pattern")
(KEYWORD in)
(ID "optional")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "files")
(PUNCT "=")
(ID "filter")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT ",")
(ID "glob")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "files")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "build_py")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build_py")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "has_pure_modules")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "build_py")
(PUNCT ".")
(ID "get_source_files")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "pkg")
(PUNCT ",")
(ID "src_dir")
(PUNCT ",")
(ID "build_dir")
(PUNCT ",")
(ID "filenames")
(KEYWORD in)
(ID "build_py")
(PUNCT ".")
(ID "data_files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "src_dir")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "has_data_files")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "data_files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "convert_path")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirname")
(PUNCT ",")
(ID "filenames")
(PUNCT "=")
(ID "item")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "convert_path")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "has_ext_modules")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "build_ext")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build_ext")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "build_ext")
(PUNCT ".")
(ID "get_source_files")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "has_c_libraries")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "build_clib")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build_clib")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "build_clib")
(PUNCT ".")
(ID "get_source_files")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "has_scripts")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "build_scripts")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build_scripts")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "build_scripts")
(PUNCT ".")
(ID "get_source_files")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read_template")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read and parse manifest template file named by self.template.\n\n        (usually \"MANIFEST.in\") The parsing and processing is done by\n        'self.filelist', which updates itself accordingly.\n        ")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "reading manifest template '%s'")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "template")
(PUNCT ")")
(NEWLINE)
(ID "template")
(PUNCT "=")
(ID "TextFile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "template")
(PUNCT ",")
(ID "strip_comments")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "skip_blanks")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "join_lines")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "lstrip_ws")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "rstrip_ws")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "collapse_join")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "template")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "process_template_line")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "DistutilsTemplateError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "%s, line %d: %s")
(PUNCT "%")
(PUNCT "(")
(ID "template")
(PUNCT ".")
(ID "filename")
(PUNCT ",")
(ID "template")
(PUNCT ".")
(ID "current_line")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "template")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "prune_file_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Prune off branches that might slip into the file list as created\n        by 'read_template()', but really don't belong there:\n          * the build tree (typically \"build\")\n          * the release tree itself (only an issue if we ran \"sdist\"\n            previously with --keep-temp, or it aborted)\n          * any RCS, CVS, .svn, .hg, .git, .bzr, _darcs directories\n        ")
(NEWLINE)
(ID "build")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_finalized_command")
(PUNCT "(")
(LIT "build")
(PUNCT ")")
(NEWLINE)
(ID "base_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_fullname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "build")
(PUNCT ".")
(ID "build_base")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "base_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seps")
(PUNCT "=")
(LIT "/|\\\\")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seps")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "vcs_dirs")
(PUNCT "=")
(PUNCT "[")
(LIT "RCS")
(PUNCT ",")
(LIT "CVS")
(PUNCT ",")
(LIT "\\.svn")
(PUNCT ",")
(LIT "\\.hg")
(PUNCT ",")
(LIT "\\.git")
(PUNCT ",")
(LIT "\\.bzr")
(PUNCT ",")
(LIT "_darcs")
(PUNCT "]")
(NEWLINE)
(ID "vcs_ptrn")
(PUNCT "=")
(LIT "(^|%s)(%s)(%s).*")
(PUNCT "%")
(PUNCT "(")
(ID "seps")
(PUNCT ",")
(LIT "|")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "vcs_dirs")
(PUNCT ")")
(PUNCT ",")
(ID "seps")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "exclude_pattern")
(PUNCT "(")
(ID "vcs_ptrn")
(PUNCT ",")
(ID "is_regex")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_manifest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write the file list in 'self.filelist' (presumably as filled in\n        by 'add_defaults()' and 'read_template()') to the manifest file\n        named by 'self.manifest'.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_manifest_is_not_generated")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "not writing to manually maintained ")
(LIT "manifest file '%s'")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "content")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "files")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "content")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT "# file GENERATED by distutils, do NOT edit")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "execute")
(PUNCT "(")
(ID "file_util")
(PUNCT ".")
(ID "write_file")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ",")
(ID "content")
(PUNCT ")")
(PUNCT ",")
(LIT "writing manifest file '%s'")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_manifest_is_not_generated")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "fp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first_line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "first_line")
(PUNCT "!=")
(LIT "# file GENERATED by distutils, do NOT edit\n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read_manifest")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read the manifest file (named by 'self.manifest') and use it to\n        fill in 'self.filelist', the list of files to include in the source\n        distribution.\n        ")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "reading manifest file '%s'")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ")")
(NEWLINE)
(ID "manifest")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "manifest")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "manifest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "#")
(PUNCT ")")
(KEYWORD or)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "manifest")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_release_tree")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "base_dir")
(PUNCT ",")
(ID "files")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create the directory tree that will become the source\n        distribution archive.  All directories implied by the filenames in\n        'files' are created under 'base_dir', and then we hard link or copy\n        (if hard linking is unavailable) those files into place.\n        Essentially, this duplicates the developer's source tree, but in a\n        directory named after the distribution, containing only the files\n        to be distributed.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mkpath")
(PUNCT "(")
(ID "base_dir")
(PUNCT ")")
(NEWLINE)
(ID "dir_util")
(PUNCT ".")
(ID "create_tree")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "files")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "link")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "link")
(PUNCT "=")
(LIT "hard")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "making hard links in %s...")
(PUNCT "%")
(ID "base_dir")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "link")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "copying files to %s...")
(PUNCT "%")
(ID "base_dir")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "no files to distribute -- empty manifest?")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "'%s' not a regular file -- skipping")
(PUNCT "%")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dest")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "copy_file")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "dest")
(PUNCT ",")
(ID "link")
(PUNCT "=")
(ID "link")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "metadata")
(PUNCT ".")
(ID "write_pkg_info")
(PUNCT "(")
(ID "base_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_distribution")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create the source distribution(s).  First, we create the release\n        tree with 'make_release_tree()'; then, we create all required\n        archive files (according to 'self.formats') from the release tree.\n        Finally, we clean up by blowing away the release tree (unless\n        'self.keep_temp' is true).  The list of archive files created is\n        stored so it can be retrieved later by 'get_archive_files()'.\n        ")
(NEWLINE)
(ID "base_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_fullname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "base_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "dist_dir")
(PUNCT ",")
(ID "base_dir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "make_release_tree")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "filelist")
(PUNCT ".")
(ID "files")
(PUNCT ")")
(NEWLINE)
(ID "archive_files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "tar")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "tar")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "fmt")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "formats")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_archive")
(PUNCT "(")
(ID "base_name")
(PUNCT ",")
(ID "fmt")
(PUNCT ",")
(ID "base_dir")
(PUNCT "=")
(ID "base_dir")
(PUNCT ",")
(ID "owner")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT ",")
(ID "group")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "group")
(PUNCT ")")
(NEWLINE)
(ID "archive_files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "dist_files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "sdist")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "archive_files")
(PUNCT "=")
(ID "archive_files")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "keep_temp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir_util")
(PUNCT ".")
(ID "remove_tree")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_archive_files")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the list of archive files created when the command\n        was run, or None if the command hasn't run yet.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "archive_files")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
