(LIT "A pure Python implementation of import.")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "__import__")
(PUNCT ",")
(LIT "import_module")
(PUNCT ",")
(LIT "invalidate_caches")
(PUNCT ",")
(LIT "reload")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "_imp")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_frozen_importlib")
(KEYWORD as)
(ID "_bootstrap")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "_bootstrap")
(NEWLINE)
(ID "_bootstrap")
(PUNCT ".")
(ID "_setup")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(ID "_imp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_bootstrap")
(PUNCT ".")
(ID "__name__")
(PUNCT "=")
(LIT "importlib._bootstrap")
(NEWLINE)
(ID "_bootstrap")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(LIT "importlib")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_bootstrap")
(PUNCT ".")
(ID "__file__")
(PUNCT "=")
(ID "__file__")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "__init__.py")
(PUNCT ",")
(LIT "_bootstrap.py")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "importlib._bootstrap")
(PUNCT "]")
(PUNCT "=")
(ID "_bootstrap")
(NEWLINE)
(DEDENT)
(ID "_w_long")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_w_long")
(NEWLINE)
(ID "_r_long")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_r_long")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "_bootstrap")
(KEYWORD import)
(ID "__import__")
(NEWLINE)
(KEYWORD def)
(ID "invalidate_caches")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call the invalidate_caches() method on all meta path finders stored in\n    sys.meta_path (where implemented).")
(NEWLINE)
(KEYWORD for)
(ID "finder")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "finder")
(PUNCT ",")
(LIT "invalidate_caches")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "finder")
(PUNCT ".")
(ID "invalidate_caches")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_loader")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the loader for the specified module.\n\n    This is a backward-compatible wrapper around find_spec().\n\n    This function is deprecated in favor of importlib.util.find_spec().\n\n    ")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Use importlib.util.find_spec() instead.")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ".")
(ID "__loader__")
(NEWLINE)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "{}.__loader__ is None")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "loader")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "{}.__loader__ is not set")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_find_spec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "spec for {} missing loader")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "namespace packages do not have loaders")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "spec")
(PUNCT ".")
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "import_module")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Import a module.\n\n    The 'package' argument is required when performing a relative import. It\n    specifies the package to use as the anchor point from which to resolve the\n    relative import to an absolute import.\n\n    ")
(NEWLINE)
(ID "level")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "package")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "the 'package' argument is required to perform a relative ")
(LIT "import for {!r}")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "character")
(KEYWORD in)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "character")
(PUNCT "!=")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "level")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_bootstrap")
(PUNCT ".")
(ID "_gcd_import")
(PUNCT "(")
(ID "name")
(PUNCT "[")
(ID "level")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "package")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_RELOADING")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "reload")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Reload the module and return it.\n\n    The module must have been successfully imported before.\n\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "module")
(KEYWORD or)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "ModuleType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "reload() argument must be module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "module {} not in sys.modules")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "_RELOADING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_RELOADING")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_RELOADING")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "module")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent_name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "parent_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "parent_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "parent {!r} not in sys.modules")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "parent_name")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "parent_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pkgpath")
(PUNCT "=")
(ID "parent")
(PUNCT ".")
(ID "__path__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pkgpath")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "target")
(PUNCT "=")
(ID "module")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_find_spec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "pkgpath")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(ID "methods")
(PUNCT "=")
(ID "_bootstrap")
(PUNCT ".")
(ID "_SpecMethods")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(ID "methods")
(PUNCT ".")
(ID "exec")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_RELOADING")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
