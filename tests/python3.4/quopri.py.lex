(LIT "Conversions to/from quoted-printable transport encoding as per RFC 1521.")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "encode")
(PUNCT ",")
(LIT "decode")
(PUNCT ",")
(LIT "encodestring")
(PUNCT ",")
(LIT "decodestring")
(PUNCT "]")
(NEWLINE)
(ID "ESCAPE")
(PUNCT "=")
(LIT #"=")
(NEWLINE)
(ID "MAXLINESIZE")
(PUNCT "=")
(LIT 76)
(NEWLINE)
(ID "HEX")
(PUNCT "=")
(LIT #"0123456789ABCDEF")
(NEWLINE)
(ID "EMPTYSTRING")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "binascii")
(KEYWORD import)
(ID "a2b_qp")
(PUNCT ",")
(ID "b2a_qp")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a2b_qp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "b2a_qp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "needsquoting")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "quotetabs")
(PUNCT ",")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decide whether a particular byte ordinal needs to be quoted.\n\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    ")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "c")
(KEYWORD in)
(LIT #" \t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "quotetabs")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT #"_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "header")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "c")
(PUNCT "==")
(ID "ESCAPE")
(KEYWORD or)
(KEYWORD not)
(PUNCT "(")
(LIT #" ")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"~")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quote")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quote a single character.")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ESCAPE")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "HEX")
(PUNCT "[")
(ID "c")
(PUNCT "//")
(LIT 16)
(PUNCT "]")
(PUNCT ",")
(ID "HEX")
(PUNCT "[")
(ID "c")
(PUNCT "%")
(LIT 16)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "output")
(PUNCT ",")
(ID "quotetabs")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read 'input', apply quoted-printable encoding, and write to 'output'.\n\n    'input' and 'output' are binary file objects. The 'quotetabs' flag\n    indicates whether embedded tabs and spaces should be quoted. Note that\n    line-ending tabs and spaces are always encoded, as per RFC 1521.\n    The 'header' flag indicates whether we are encoding spaces as _ as per RFC\n    1522.")
(NEWLINE)
(KEYWORD if)
(ID "b2a_qp")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "input")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "odata")
(PUNCT "=")
(ID "b2a_qp")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "quotetabs")
(PUNCT "=")
(ID "quotetabs")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT ")")
(NEWLINE)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "odata")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "output")
(PUNCT "=")
(ID "output")
(PUNCT ",")
(ID "lineEnd")
(PUNCT "=")
(LIT #"\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "s")
(KEYWORD and)
(ID "s")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(LIT #" \t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "+")
(ID "lineEnd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "s")
(PUNCT "==")
(LIT #".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "quote")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "+")
(ID "lineEnd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT "+")
(ID "lineEnd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "prevline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "input")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "outline")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "stripped")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT #"\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "stripped")
(PUNCT "=")
(LIT #"\n")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "needsquoting")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "quotetabs")
(PUNCT ",")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "quote")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "header")
(KEYWORD and)
(ID "c")
(PUNCT "==")
(LIT #" ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outline")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT #"_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outline")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "prevline")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "prevline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "thisline")
(PUNCT "=")
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "outline")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "thisline")
(PUNCT ")")
(PUNCT ">")
(ID "MAXLINESIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "thisline")
(PUNCT "[")
(PUNCT ":")
(ID "MAXLINESIZE")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "lineEnd")
(PUNCT "=")
(LIT #"=\n")
(PUNCT ")")
(NEWLINE)
(ID "thisline")
(PUNCT "=")
(ID "thisline")
(PUNCT "[")
(ID "MAXLINESIZE")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "prevline")
(PUNCT "=")
(ID "thisline")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "prevline")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(ID "prevline")
(PUNCT ",")
(ID "lineEnd")
(PUNCT "=")
(ID "stripped")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "encodestring")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "quotetabs")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "b2a_qp")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "b2a_qp")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "quotetabs")
(PUNCT "=")
(ID "quotetabs")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "BytesIO")
(NEWLINE)
(ID "infp")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "outfp")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "encode")
(PUNCT "(")
(ID "infp")
(PUNCT ",")
(ID "outfp")
(PUNCT ",")
(ID "quotetabs")
(PUNCT ",")
(ID "header")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "outfp")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "output")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read 'input', apply quoted-printable decoding, and write to 'output'.\n    'input' and 'output' are binary file objects.\n    If 'header' is true, decode underscore as space (per RFC 1522).")
(NEWLINE)
(KEYWORD if)
(ID "a2b_qp")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "input")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "odata")
(PUNCT "=")
(ID "a2b_qp")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT ")")
(NEWLINE)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "odata")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "input")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "i")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "line")
(PUNCT "[")
(ID "n")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(ID "n")
(PUNCT "]")
(PUNCT "==")
(LIT #"\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "partial")
(PUNCT "=")
(LIT 0)
(PUNCT ";")
(ID "n")
(PUNCT "=")
(ID "n")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "n")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "line")
(PUNCT "[")
(ID "n")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(ID "n")
(PUNCT "]")
(KEYWORD in)
(LIT #" \t\r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "n")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "partial")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT #"_")
(KEYWORD and)
(ID "header")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "new")
(PUNCT "+")
(LIT #" ")
(PUNCT ";")
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "c")
(PUNCT "!=")
(ID "ESCAPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "new")
(PUNCT "+")
(ID "c")
(PUNCT ";")
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "==")
(ID "n")
(KEYWORD and)
(KEYWORD not)
(ID "partial")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "partial")
(PUNCT "=")
(LIT 1)
(PUNCT ";")
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "<")
(ID "n")
(KEYWORD and)
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "ESCAPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "new")
(PUNCT "+")
(ID "ESCAPE")
(PUNCT ";")
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "i")
(PUNCT "+")
(LIT 2)
(PUNCT "<")
(ID "n")
(KEYWORD and)
(ID "ishex")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(KEYWORD and)
(ID "ishex")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 2)
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "new")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "unhex")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ";")
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 3)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "new")
(PUNCT "+")
(ID "c")
(PUNCT ";")
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "partial")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "new")
(PUNCT "+")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "new")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "new")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "decodestring")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "a2b_qp")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "a2b_qp")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "BytesIO")
(NEWLINE)
(ID "infp")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "outfp")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "decode")
(PUNCT "(")
(ID "infp")
(PUNCT ",")
(ID "outfp")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "outfp")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ishex")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the byte ordinal 'c' is a hexadecimal digit in ASCII.")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT #"0")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"9")
(KEYWORD or)
(LIT #"a")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"f")
(KEYWORD or)
(LIT #"A")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"F")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unhex")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the integer value of a hexadecimal number.")
(NEWLINE)
(ID "bits")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT #"0")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"9")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT #"a")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(LIT "a")
(PUNCT ")")
(PUNCT "-")
(LIT 10)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT #"A")
(PUNCT "<=")
(ID "c")
(PUNCT "<=")
(LIT #"F")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(LIT #"A")
(PUNCT ")")
(PUNCT "-")
(LIT 10)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD False)
(PUNCT ",")
(LIT "non-hex digit ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bits")
(PUNCT "=")
(ID "bits")
(PUNCT "*")
(LIT 16)
(PUNCT "+")
(PUNCT "(")
(ID "ord")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT "-")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "bits")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "getopt")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "td")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "usage: quopri [-t | -d] [file] ...")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "-t: quote tabs")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "-d: decode; default encode")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "deco")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "tabs")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "o")
(PUNCT ",")
(ID "a")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-t")
(PUNCT ":")
(ID "tabs")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-d")
(PUNCT ":")
(ID "deco")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tabs")
(KEYWORD and)
(ID "deco")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "-t and -d are mutually exclusive")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(ID "args")
(PUNCT "=")
(PUNCT "[")
(LIT "-")
(PUNCT "]")
(NEWLINE)
(ID "sts")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "file")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "buffer")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s: can't open (%s)\n")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sts")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "deco")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "decode")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encode")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "buffer")
(PUNCT ",")
(ID "tabs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "file")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
