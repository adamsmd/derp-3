(LIT "Provides access to stored IDLE configuration information.\n\nRefer to the comments at the beginning of config-main.def for a description of\nthe available configuration files and the design implemented to update user\nconfiguration information.  In particular, user configuration choices which\nduplicate the defaults will be removed from the user's configuration files,\nand if a file becomes empty, it will be deleted.\n\nThe contents of the user files may be altered using the Options/Configure IDLE\nmenu to access the configuration GUI (configDialog.py), or manually.\n\nThroughout this module there is an emphasis on returning useable defaults\nwhen a problem occurs in returning a requested configuration value back to\nidle. This is to allow IDLE to continue to function in spite of errors in\nthe retrieval of config information. When a default is returned instead of\na requested config value, a message is printed to stderr to aid in\nconfiguration problem notification and resolution.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "configparser")
(KEYWORD import)
(ID "ConfigParser")
(NEWLINE)
(KEYWORD class)
(ID "InvalidConfigType")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "InvalidConfigSet")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "InvalidFgBg")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "InvalidTheme")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "IdleConfParser")
(PUNCT "(")
(ID "ConfigParser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    A ConfigParser specialised for idle configuration file handling\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cfgFile")
(PUNCT ",")
(ID "cfgDefaults")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        cfgFile - string, fully specified configuration file name\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "cfgFile")
(NEWLINE)
(ID "ConfigParser")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "defaults")
(PUNCT "=")
(ID "cfgDefaults")
(PUNCT ",")
(ID "strict")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "Get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Get an option value for given section/option or return default.\n        If type is specified, return as type.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_option")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(LIT "bool")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(LIT "int")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(ID "raw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "GetOptionList")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of options for given section, else [].")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "options")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "Load")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load the configuration file from disk.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IdleUserConfParser")
(PUNCT "(")
(ID "IdleConfParser")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    IdleConfigParser specialised for user configuration handling.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "AddSection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If section doesn't exist, add it.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "RemoveEmptySections")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove any sections that have no options.")
(NEWLINE)
(KEYWORD for)
(ID "section")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "sections")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "GetOptionList")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "IsEmpty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if no sections after removing empty sections.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "RemoveEmptySections")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "sections")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "RemoveOption")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if option is removed from section, else False.\n\n        False if either section does not exist or did not have option.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "remove_option")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "SetOption")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if option is added or changed to value, else False.\n\n        Add section if required.  False means option already had value.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_option")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT "==")
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_section")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "RemoveFile")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove user config file self.file from disk if it exists.")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "Save")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Update user configuration file.\n\n        Remove empty sections. If resulting config isn't empty, write the file\n        to disk. If config is empty, remove the file from disk if it exists.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "IsEmpty")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgFile")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "fname")
(PUNCT ")")
(NEWLINE)
(ID "cfgFile")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "fname")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "cfgFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "cfgFile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "RemoveFile")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IdleConf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hold config parsers for all idle config files in singleton instance.\n\n    Default config files, self.defaultCfg --\n        for config_type in self.config_types:\n            (idle install dir)/config-{config-type}.def\n\n    User config files, self.userCfg --\n        for config_type in self.config_types:\n        (user home dir)/.idlerc/config-{config-type}.cfg\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "config_types")
(PUNCT "=")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "extensions")
(PUNCT ",")
(LIT "highlight")
(PUNCT ",")
(LIT "keys")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cfg")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "CreateConfigHandlers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "LoadCfgFiles")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "CreateConfigHandlers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Populate default and user config parser dictionaries.")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "!=")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idleDir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idleDir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "userDir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetUserCfgDir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "defCfgFiles")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "usrCfgFiles")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "cfgType")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "config_types")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "defCfgFiles")
(PUNCT "[")
(ID "cfgType")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "idleDir")
(PUNCT ",")
(LIT "config-")
(PUNCT "+")
(ID "cfgType")
(PUNCT "+")
(LIT ".def")
(PUNCT ")")
(NEWLINE)
(ID "usrCfgFiles")
(PUNCT "[")
(ID "cfgType")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "userDir")
(PUNCT ",")
(LIT "config-")
(PUNCT "+")
(ID "cfgType")
(PUNCT "+")
(LIT ".cfg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "cfgType")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "config_types")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(ID "cfgType")
(PUNCT "]")
(PUNCT "=")
(ID "IdleConfParser")
(PUNCT "(")
(ID "defCfgFiles")
(PUNCT "[")
(ID "cfgType")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "cfgType")
(PUNCT "]")
(PUNCT "=")
(ID "IdleUserConfParser")
(PUNCT "(")
(ID "usrCfgFiles")
(PUNCT "[")
(ID "cfgType")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "GetUserCfgDir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a filesystem directory for storing user config files.\n\n        Creates it if required.\n        ")
(NEWLINE)
(ID "cfgDir")
(PUNCT "=")
(LIT ".idlerc")
(NEWLINE)
(ID "userDir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expanduser")
(PUNCT "(")
(LIT "~")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "userDir")
(PUNCT "!=")
(LIT "~")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "userDir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "=")
(PUNCT "(")
(LIT "\n Warning: os.path.expanduser(\"~\") points to\n ")
(PUNCT "+")
(ID "userDir")
(PUNCT "+")
(LIT ",\n but the path does not exist.")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "warn")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "userDir")
(PUNCT "=")
(LIT "~")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "userDir")
(PUNCT "==")
(LIT "~")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "userDir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "userDir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "userDir")
(PUNCT ",")
(ID "cfgDir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "userDir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "userDir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "=")
(PUNCT "(")
(LIT "\n Warning: unable to create user config directory\n")
(PUNCT "+")
(ID "userDir")
(PUNCT "+")
(LIT "\n Check path and permissions.\n Exiting!\n")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "warn")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SystemExit")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "userDir")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetOption")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "configType")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "warn_on_default")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a value for configType section option, or default.\n\n        If type is not None, return a value of that type.  Also pass raw\n        to the config parser.  First try to return a valid value\n        (including type) from a user configuration. If that fails, try\n        the default configuration. If that fails, return default, with a\n        default of None.\n\n        Warn if either user or default configurations have an invalid value.\n        Warn if default is returned and warn_on_default is True.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(PUNCT ".")
(ID "has_option")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(ID "raw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warning")
(PUNCT "=")
(PUNCT "(")
(LIT "\n Warning: configHandler.py - IdleConf.GetOption -\n")
(LIT " invalid %r value for configuration option %r\n")
(LIT " from section %r: %r")
(PUNCT "%")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(ID "raw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "warning")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(PUNCT ".")
(ID "has_option")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ",")
(ID "raw")
(PUNCT "=")
(ID "raw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "warn_on_default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warning")
(PUNCT "=")
(PUNCT "(")
(LIT "\n Warning: configHandler.py - IdleConf.GetOption -\n")
(LIT " problem retrieving configuration option %r\n")
(LIT " from section %r.\n")
(LIT " returning default value: %r")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "warning")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "SetOption")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "configType")
(PUNCT ",")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set section option to value in user config file.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(PUNCT ".")
(ID "SetOption")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetSectionList")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "configSet")
(PUNCT ",")
(ID "configType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return sections for configSet configType configuration.\n\n        configSet must be either 'user' or 'default'\n        configType must be in self.config_types.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "configType")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "config_types")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidConfigType")
(PUNCT "(")
(LIT "Invalid configType specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "configSet")
(PUNCT "==")
(LIT "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgParser")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "configSet")
(PUNCT "==")
(LIT "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgParser")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(ID "configType")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidConfigSet")
(PUNCT "(")
(LIT "Invalid configSet specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cfgParser")
(PUNCT ".")
(ID "sections")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetHighlight")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "theme")
(PUNCT ",")
(ID "element")
(PUNCT ",")
(ID "fgBg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return individual theme element highlight color(s).\n\n        fgBg - string ('fg' or 'bg') or None.\n        If None, return a dictionary containing fg and bg colors with\n        keys 'foreground' and 'background'.  Otherwise, only return\n        fg or bg color, as specified.  Colors are intended to be\n        appropriate for passing to Tkinter in, e.g., a tag_config call).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "highlight")
(PUNCT "]")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "theme")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "themeDict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetThemeDict")
(PUNCT "(")
(LIT "default")
(PUNCT ",")
(ID "theme")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "themeDict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetThemeDict")
(PUNCT "(")
(LIT "user")
(PUNCT ",")
(ID "theme")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fore")
(PUNCT "=")
(ID "themeDict")
(PUNCT "[")
(ID "element")
(PUNCT "+")
(LIT "-foreground")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "element")
(PUNCT "==")
(LIT "cursor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "back")
(PUNCT "=")
(ID "themeDict")
(PUNCT "[")
(LIT "normal-background")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "back")
(PUNCT "=")
(ID "themeDict")
(PUNCT "[")
(ID "element")
(PUNCT "+")
(LIT "-background")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "highlight")
(PUNCT "=")
(PUNCT "{")
(LIT "foreground")
(PUNCT ":")
(ID "fore")
(PUNCT ",")
(LIT "background")
(PUNCT ":")
(ID "back")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "fgBg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "highlight")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fgBg")
(PUNCT "==")
(LIT "fg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "highlight")
(PUNCT "[")
(LIT "foreground")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fgBg")
(PUNCT "==")
(LIT "bg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "highlight")
(PUNCT "[")
(LIT "background")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidFgBg")
(PUNCT "(")
(LIT "Invalid fgBg specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "GetThemeDict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "themeName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return {option:value} dict for elements in themeName.\n\n        type - string, 'default' or 'user' theme type\n        themeName - string, theme name\n        Values are loaded over ultimate fallback defaults to guarantee\n        that all theme elements are present in a newly created theme.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(LIT "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgParser")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(LIT "highlight")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(LIT "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgParser")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "highlight")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidTheme")
(PUNCT "(")
(LIT "Invalid theme type specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "theme")
(PUNCT "=")
(PUNCT "{")
(LIT "normal-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "normal-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "keyword-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "keyword-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "builtin-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "builtin-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "comment-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "comment-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "string-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "string-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "definition-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "definition-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "hilite-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "hilite-background")
(PUNCT ":")
(LIT "gray")
(PUNCT ",")
(LIT "break-foreground")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "break-background")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "hit-foreground")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "hit-background")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "error-foreground")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "error-background")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "cursor-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "stdout-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "stdout-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "stderr-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "stderr-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT ",")
(LIT "console-foreground")
(PUNCT ":")
(LIT "#000000")
(PUNCT ",")
(LIT "console-background")
(PUNCT ":")
(LIT "#ffffff")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "element")
(KEYWORD in)
(ID "theme")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "cfgParser")
(PUNCT ".")
(ID "has_option")
(PUNCT "(")
(ID "themeName")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warning")
(PUNCT "=")
(PUNCT "(")
(LIT "\n Warning: configHandler.IdleConf.GetThemeDict")
(LIT " -\n problem retrieving theme element %r")
(LIT "\n from theme %r.\n")
(LIT " returning default color: %r")
(PUNCT "%")
(PUNCT "(")
(ID "element")
(PUNCT ",")
(ID "themeName")
(PUNCT ",")
(ID "theme")
(PUNCT "[")
(ID "element")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "warning")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "theme")
(PUNCT "[")
(ID "element")
(PUNCT "]")
(PUNCT "=")
(ID "cfgParser")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(ID "themeName")
(PUNCT ",")
(ID "element")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(ID "theme")
(PUNCT "[")
(ID "element")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "theme")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "CurrentTheme")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the currently active theme.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "Theme")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "CurrentKeys")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the currently active key set.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "Keys")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetExtensions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "active_only")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "editor_only")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "shell_only")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return extensions in default and user config-extensions files.\n\n        If active_only True, only return active (enabled) extensions\n        and optionally only editor or shell extensions.\n        If active_only False, return all extensions.\n        ")
(NEWLINE)
(ID "extns")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "RemoveKeyBindNames")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "GetSectionList")
(PUNCT "(")
(LIT "default")
(PUNCT ",")
(LIT "extensions")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "userExtns")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "RemoveKeyBindNames")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "GetSectionList")
(PUNCT "(")
(LIT "user")
(PUNCT ",")
(LIT "extensions")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "extn")
(KEYWORD in)
(ID "userExtns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "extn")
(KEYWORD not)
(KEYWORD in)
(ID "extns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extns")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "extn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "active_only")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "activeExtns")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "extn")
(KEYWORD in)
(ID "extns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "extensions")
(PUNCT ",")
(ID "extn")
(PUNCT ",")
(LIT "enable")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "bool")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "editor_only")
(KEYWORD or)
(ID "shell_only")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "editor_only")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(LIT "enable_editor")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(LIT "enable_shell")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "extensions")
(PUNCT ",")
(ID "extn")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "bool")
(PUNCT ",")
(ID "warn_on_default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "activeExtns")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "extn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "activeExtns")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "extn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "activeExtns")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "extns")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "RemoveKeyBindNames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "extnNameList")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return extnNameList with keybinding section names removed.")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "extnNameList")
(NEWLINE)
(ID "kbNameIndicies")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(PUNCT "(")
(LIT "_bindings")
(PUNCT ",")
(LIT "_cfgBindings")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kbNameIndicies")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "names")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "kbNameIndicies")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "index")
(KEYWORD in)
(ID "kbNameIndicies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(PUNCT "(")
(ID "names")
(PUNCT "[")
(ID "index")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetExtnNameForEvent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtualEvent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the extension binding virtualEvent, or None.\n\n        virtualEvent - string, name of the virtual event to test for,\n                       without the enclosing '<< >>'\n        ")
(NEWLINE)
(ID "extName")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "vEvent")
(PUNCT "=")
(LIT "<<")
(PUNCT "+")
(ID "virtualEvent")
(PUNCT "+")
(LIT ">>")
(NEWLINE)
(KEYWORD for)
(ID "extn")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "GetExtensions")
(PUNCT "(")
(ID "active_only")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "event")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "GetExtensionKeys")
(PUNCT "(")
(ID "extn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "event")
(PUNCT "==")
(ID "vEvent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extName")
(PUNCT "=")
(ID "extn")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "extName")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetExtensionKeys")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "extensionName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict: {configurable extensionName event : active keybinding}.\n\n        Events come from default config extension_cfgBindings section.\n        Keybindings come from GetCurrentKeySet() active key dict,\n        where previously used bindings are disabled.\n        ")
(NEWLINE)
(ID "keysName")
(PUNCT "=")
(ID "extensionName")
(PUNCT "+")
(LIT "_cfgBindings")
(NEWLINE)
(ID "activeKeys")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetCurrentKeySet")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "extKeys")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "extensions")
(PUNCT "]")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "keysName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eventNames")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "extensions")
(PUNCT "]")
(PUNCT ".")
(ID "GetOptionList")
(PUNCT "(")
(ID "keysName")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "eventName")
(KEYWORD in)
(ID "eventNames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "event")
(PUNCT "=")
(LIT "<<")
(PUNCT "+")
(ID "eventName")
(PUNCT "+")
(LIT ">>")
(NEWLINE)
(ID "binding")
(PUNCT "=")
(ID "activeKeys")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(NEWLINE)
(ID "extKeys")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT "=")
(ID "binding")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "extKeys")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__GetRawExtensionKeys")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "extensionName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict {configurable extensionName event : keybinding list}.\n\n        Events come from default config extension_cfgBindings section.\n        Keybindings list come from the splitting of GetOption, which\n        tries user config before default config.\n        ")
(NEWLINE)
(ID "keysName")
(PUNCT "=")
(ID "extensionName")
(PUNCT "+")
(LIT "_cfgBindings")
(NEWLINE)
(ID "extKeys")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "extensions")
(PUNCT "]")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "keysName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eventNames")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "extensions")
(PUNCT "]")
(PUNCT ".")
(ID "GetOptionList")
(PUNCT "(")
(ID "keysName")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "eventName")
(KEYWORD in)
(ID "eventNames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "extensions")
(PUNCT ",")
(ID "keysName")
(PUNCT ",")
(ID "eventName")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "event")
(PUNCT "=")
(LIT "<<")
(PUNCT "+")
(ID "eventName")
(PUNCT "+")
(LIT ">>")
(NEWLINE)
(ID "extKeys")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT "=")
(ID "binding")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "extKeys")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetExtensionBindings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "extensionName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict {extensionName event : active or defined keybinding}.\n\n        Augment self.GetExtensionKeys(extensionName) with mapping of non-\n        configurable events (from default config) to GetOption splits,\n        as in self.__GetRawExtensionKeys.\n        ")
(NEWLINE)
(ID "bindsName")
(PUNCT "=")
(ID "extensionName")
(PUNCT "+")
(LIT "_bindings")
(NEWLINE)
(ID "extBinds")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetExtensionKeys")
(PUNCT "(")
(ID "extensionName")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "extensions")
(PUNCT "]")
(PUNCT ".")
(ID "has_section")
(PUNCT "(")
(ID "bindsName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eventNames")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "extensions")
(PUNCT "]")
(PUNCT ".")
(ID "GetOptionList")
(PUNCT "(")
(ID "bindsName")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "eventName")
(KEYWORD in)
(ID "eventNames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "extensions")
(PUNCT ",")
(ID "bindsName")
(PUNCT ",")
(ID "eventName")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "event")
(PUNCT "=")
(LIT "<<")
(PUNCT "+")
(ID "eventName")
(PUNCT "+")
(LIT ">>")
(NEWLINE)
(ID "extBinds")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT "=")
(ID "binding")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "extBinds")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetKeyBinding")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keySetName")
(PUNCT ",")
(ID "eventStr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the keybinding list for keySetName eventStr.\n\n        keySetName - name of key binding set (config-keys section).\n        eventStr - virtual event, including brackets, as in '<<event>>'.\n        ")
(NEWLINE)
(ID "eventName")
(PUNCT "=")
(ID "eventStr")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "binding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "keys")
(PUNCT ",")
(ID "keySetName")
(PUNCT ",")
(ID "eventName")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "binding")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetCurrentKeySet")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return CurrentKeys with 'darwin' modifications.")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetKeySet")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "CurrentKeys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "result")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v2")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "<Alt-")
(PUNCT ",")
(LIT "<Option-")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "v")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "v")
(PUNCT "!=")
(ID "v2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v2")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetKeySet")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keySetName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return event-key dict for keySetName core plus active extensions.\n\n        If a binding defined in an extension is already in use, the\n        extension binding is disabled by being set to ''\n        ")
(NEWLINE)
(ID "keySet")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetCoreKeys")
(PUNCT "(")
(ID "keySetName")
(PUNCT ")")
(NEWLINE)
(ID "activeExtns")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetExtensions")
(PUNCT "(")
(ID "active_only")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "extn")
(KEYWORD in)
(ID "activeExtns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extKeys")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__GetRawExtensionKeys")
(PUNCT "(")
(ID "extn")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "extKeys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "event")
(KEYWORD in)
(ID "extKeys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "extKeys")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(KEYWORD in)
(ID "keySet")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extKeys")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "keySet")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT "=")
(ID "extKeys")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "keySet")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "IsCoreBinding")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtualEvent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the virtual event is one of the core idle key events.\n\n        virtualEvent - string, name of the virtual event to test for,\n                       without the enclosing '<< >>'\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(LIT "<<")
(PUNCT "+")
(ID "virtualEvent")
(PUNCT "+")
(LIT ">>")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "GetCoreKeys")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetCoreKeys")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keySetName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict of core virtual-key keybindings for keySetName.\n\n        The default keySetName None corresponds to the keyBindings base\n        dict. If keySetName is not None, bindings from the config\n        file(s) are loaded _over_ these defaults, so if there is a\n        problem getting any core binding there will be an 'ultimate last\n        resort fallback' to the CUA-ish bindings defined here.\n        ")
(NEWLINE)
(ID "keyBindings")
(PUNCT "=")
(PUNCT "{")
(LIT "<<copy>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-c>")
(PUNCT ",")
(LIT "<Control-C>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<cut>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-x>")
(PUNCT ",")
(LIT "<Control-X>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<paste>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-v>")
(PUNCT ",")
(LIT "<Control-V>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<beginning-of-line>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-a>")
(PUNCT ",")
(LIT "<Home>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<center-insert>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-l>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<close-all-windows>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-q>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<close-window>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-F4>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<do-nothing>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-x>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<end-of-file>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-d>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<python-docs>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<F1>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<python-context-help>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Shift-F1>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<history-next>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-n>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<history-previous>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-p>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<interrupt-execution>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-c>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<view-restart>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<F6>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<restart-shell>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-F6>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<open-class-browser>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-c>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<open-module>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-m>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<open-new-window>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-n>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<open-window-from-file>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-o>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<plain-newline-and-indent>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-j>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<print-window>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-p>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<redo>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-y>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<remove-selection>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Escape>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<save-copy-of-window-as-file>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Shift-S>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<save-window-as-file>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-s>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<save-window>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-s>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<select-all>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-a>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<toggle-auto-coloring>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-slash>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<undo>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-z>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<find-again>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-g>")
(PUNCT ",")
(LIT "<F3>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<find-in-files>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-F3>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<find-selection>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-F3>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<find>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-f>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<replace>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-h>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<goto-line>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-g>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<smart-backspace>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Key-BackSpace>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<newline-and-indent>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Key-Return>")
(PUNCT ",")
(LIT "<Key-KP_Enter>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<smart-indent>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Key-Tab>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<indent-region>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-Key-bracketright>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<dedent-region>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-Key-bracketleft>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<comment-region>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Key-3>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<uncomment-region>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Key-4>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<tabify-region>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Key-5>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<untabify-region>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Key-6>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<toggle-tabs>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Key-t>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<change-indentwidth>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Alt-Key-u>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<del-word-left>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-Key-BackSpace>")
(PUNCT "]")
(PUNCT ",")
(LIT "<<del-word-right>>")
(PUNCT ":")
(PUNCT "[")
(LIT "<Control-Key-Delete>")
(PUNCT "]")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "keySetName")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "event")
(KEYWORD in)
(ID "keyBindings")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "GetKeyBinding")
(PUNCT "(")
(ID "keySetName")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "binding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keyBindings")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT "=")
(ID "binding")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warning")
(PUNCT "=")
(PUNCT "(")
(LIT "\n Warning: configHandler.py - IdleConf.GetCoreKeys")
(LIT " -\n problem retrieving key binding for event %r")
(LIT "\n from key set %r.\n")
(LIT " returning default value: %r")
(PUNCT "%")
(PUNCT "(")
(ID "event")
(PUNCT ",")
(ID "keySetName")
(PUNCT ",")
(ID "keyBindings")
(PUNCT "[")
(ID "event")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "warning")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "keyBindings")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetExtraHelpSourceList")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "configSet")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of extra help sources from a given configSet.\n\n        Valid configSets are 'user' or 'default'.  Return a list of tuples of\n        the form (menu_item , path_to_help_file , option), or return the empty\n        list.  'option' is the sequence number of the help resource.  'option'\n        values determine the position of the menu items on the Help menu,\n        therefore the returned list must be sorted by 'option'.\n\n        ")
(NEWLINE)
(ID "helpSources")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "configSet")
(PUNCT "==")
(LIT "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgParser")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(LIT "main")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "configSet")
(PUNCT "==")
(LIT "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfgParser")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(LIT "main")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidConfigSet")
(PUNCT "(")
(LIT "Invalid configSet specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "options")
(PUNCT "=")
(ID "cfgParser")
(PUNCT ".")
(ID "GetOptionList")
(PUNCT "(")
(LIT "HelpFiles")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "cfgParser")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(LIT "HelpFiles")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "menuItem")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "helpPath")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(ID "menuItem")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "helpPath")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "menuItem")
(KEYWORD and)
(ID "helpPath")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "helpSources")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "menuItem")
(PUNCT ",")
(ID "helpPath")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "helpSources")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(ID "x")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "helpSources")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "GetAllExtraHelpSourcesList")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of the details of all additional help sources.\n\n        Tuples in the list are those of GetExtraHelpSourceList.\n        ")
(NEWLINE)
(ID "allHelpSources")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "GetExtraHelpSourceList")
(PUNCT "(")
(LIT "default")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "GetExtraHelpSourceList")
(PUNCT "(")
(LIT "user")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "allHelpSources")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "LoadCfgFiles")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load all configuration files.")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "Load")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "Load")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "SaveUserCfgFiles")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write all loaded user configuration files to disk.")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "Save")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "idleConf")
(PUNCT "=")
(ID "IdleConf")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "dumpCfg")
(PUNCT "(")
(ID "cfg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\n")
(PUNCT ",")
(ID "cfg")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "cfg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sections")
(PUNCT "=")
(ID "cfg")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "sections")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "sections")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "section")
(KEYWORD in)
(ID "sections")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "cfg")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "options")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(LIT "=")
(PUNCT ",")
(ID "cfg")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "dumpCfg")
(PUNCT "(")
(ID "idleConf")
(PUNCT ".")
(ID "defaultCfg")
(PUNCT ")")
(NEWLINE)
(ID "dumpCfg")
(PUNCT "(")
(ID "idleConf")
(PUNCT ".")
(ID "userCfg")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "idleConf")
(PUNCT ".")
(ID "userCfg")
(PUNCT "[")
(LIT "main")
(PUNCT "]")
(PUNCT ".")
(ID "Get")
(PUNCT "(")
(LIT "Theme")
(PUNCT ",")
(LIT "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
