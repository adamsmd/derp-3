(LIT "HTTP server classes.\n\nNote: BaseHTTPRequestHandler doesn't implement any HTTP request; see\nSimpleHTTPRequestHandler for simple implementations of GET, HEAD and POST,\nand CGIHTTPRequestHandler for CGI scripts.\n\nIt does, however, optionally implement HTTP/1.1 persistent connections,\nas of version 0.3.\n\nNotes on CGIHTTPRequestHandler\n------------------------------\n\nThis class implements GET and POST requests to cgi-bin scripts.\n\nIf the os.fork() function is not present (e.g. on Windows),\nsubprocess.Popen() is used as a fallback, with slightly altered semantics.\n\nIn all cases, the implementation is intentionally naive -- all\nrequests are executed synchronously.\n\nSECURITY WARNING: DON'T USE THIS CODE UNLESS YOU ARE INSIDE A FIREWALL\n-- it may execute arbitrary Python code or external programs.\n\nNote that status code 200 is sent prior to execution of a CGI script, so\nscripts cannot send other status codes such as 302 (redirect).\n\nXXX To do:\n\n- log requests even later (to capture byte count)\n- log user-agent header and other interesting goodies\n- send error log to separate file\n")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "0.6")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "HTTPServer")
(PUNCT ",")
(LIT "BaseHTTPRequestHandler")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "html")
(NEWLINE)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "client")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "mimetypes")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "posixpath")
(NEWLINE)
(KEYWORD import)
(ID "select")
(NEWLINE)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "socketserver")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(NEWLINE)
(KEYWORD import)
(ID "copy")
(NEWLINE)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(ID "DEFAULT_ERROR_MESSAGE")
(PUNCT "=")
(LIT "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n        \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n        <title>Error response</title>\n    </head>\n    <body>\n        <h1>Error response</h1>\n        <p>Error code: %(code)d</p>\n        <p>Message: %(message)s.</p>\n        <p>Error code explanation: %(code)s - %(explain)s.</p>\n    </body>\n</html>\n")
(NEWLINE)
(ID "DEFAULT_ERROR_CONTENT_TYPE")
(PUNCT "=")
(LIT "text/html;charset=utf-8")
(NEWLINE)
(KEYWORD def)
(ID "_quote_html")
(PUNCT "(")
(ID "html")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "html")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "&")
(PUNCT ",")
(LIT "&amp;")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "<")
(PUNCT ",")
(LIT "&lt;")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ">")
(PUNCT ",")
(LIT "&gt;")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HTTPServer")
(PUNCT "(")
(ID "socketserver")
(PUNCT ".")
(ID "TCPServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "allow_reuse_address")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD def)
(ID "server_bind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override server_bind to store the server name.")
(NEWLINE)
(ID "socketserver")
(PUNCT ".")
(ID "TCPServer")
(PUNCT ".")
(ID "server_bind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "getsockname")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_name")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "getfqdn")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BaseHTTPRequestHandler")
(PUNCT "(")
(ID "socketserver")
(PUNCT ".")
(ID "StreamRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "HTTP request handler base class.\n\n    The following explanation of HTTP serves to guide you through the\n    code as well as to expose any misunderstandings I may have about\n    HTTP (so you don't need to read the code to figure out I'm wrong\n    :-).\n\n    HTTP (HyperText Transfer Protocol) is an extensible protocol on\n    top of a reliable stream transport (e.g. TCP/IP).  The protocol\n    recognizes three parts to a request:\n\n    1. One line identifying the request type and path\n    2. An optional set of RFC-822-style headers\n    3. An optional data part\n\n    The headers and data are separated by a blank line.\n\n    The first line of the request has the form\n\n    <command> <path> <version>\n\n    where <command> is a (case-sensitive) keyword such as GET or POST,\n    <path> is a string containing path information for the request,\n    and <version> should be the string \"HTTP/1.0\" or \"HTTP/1.1\".\n    <path> is encoded using the URL encoding scheme (using %xx to signify\n    the ASCII character with hex code xx).\n\n    The specification specifies that lines are separated by CRLF but\n    for compatibility with the widest range of clients recommends\n    servers also handle LF.  Similarly, whitespace in the request line\n    is treated sensibly (allowing multiple spaces between components\n    and allowing trailing whitespace).\n\n    Similarly, for output, lines ought to be separated by CRLF pairs\n    but most clients grok LF characters just fine.\n\n    If the first line of the request has the form\n\n    <command> <path>\n\n    (i.e. <version> is left out) then this is assumed to be an HTTP\n    0.9 request; this form has no optional headers and data part and\n    the reply consists of just the data.\n\n    The reply form of the HTTP 1.x protocol again has three parts:\n\n    1. One line giving the response code\n    2. An optional set of RFC-822-style headers\n    3. The data\n\n    Again, the headers and data are separated by a blank line.\n\n    The response code line has the form\n\n    <version> <responsecode> <responsestring>\n\n    where <version> is the protocol version (\"HTTP/1.0\" or \"HTTP/1.1\"),\n    <responsecode> is a 3-digit response code indicating success or\n    failure of the request, and <responsestring> is an optional\n    human-readable string explaining what the response code means.\n\n    This server parses the request and the headers, and then calls a\n    function specific to the request type (<command>).  Specifically,\n    a request SPAM will be handled by a method do_SPAM().  If no\n    such method exists the server sends an error response to the\n    client.  If it exists, it is called with no arguments:\n\n    do_SPAM()\n\n    Note that the request name is case sensitive (i.e. SPAM and spam\n    are different requests).\n\n    The various request details are stored in instance variables:\n\n    - client_address is the client IP address in the form (host,\n    port);\n\n    - command, path and version are the broken-down request line;\n\n    - headers is an instance of email.message.Message (or a derived\n    class) containing the header information;\n\n    - rfile is a file object open for reading positioned at the\n    start of the optional input data part;\n\n    - wfile is a file object open for writing.\n\n    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!\n\n    The first thing to be written must be the response line.  Then\n    follow 0 or more header lines, then a blank line, and then the\n    actual data (if any).  The meaning of the header lines depends on\n    the command executed by the server; in most cases, when data is\n    returned, there should be at least one header line of the form\n\n    Content-type: <type>/<subtype>\n\n    where <type> and <subtype> should be registered MIME types,\n    e.g. \"text/html\" or \"text/plain\".\n\n    ")
(NEWLINE)
(ID "sys_version")
(PUNCT "=")
(LIT "Python/")
(PUNCT "+")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "server_version")
(PUNCT "=")
(LIT "BaseHTTP/")
(PUNCT "+")
(ID "__version__")
(NEWLINE)
(ID "error_message_format")
(PUNCT "=")
(ID "DEFAULT_ERROR_MESSAGE")
(NEWLINE)
(ID "error_content_type")
(PUNCT "=")
(ID "DEFAULT_ERROR_CONTENT_TYPE")
(NEWLINE)
(ID "default_request_version")
(PUNCT "=")
(LIT "HTTP/0.9")
(NEWLINE)
(KEYWORD def)
(ID "parse_request")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a request (internal).\n\n        The request should be stored in self.raw_requestline; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return True for success, False for failure; on failure, an\n        error is sent back.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT "=")
(ID "version")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "default_request_version")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "requestline")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "raw_requestline")
(PUNCT ",")
(LIT "iso-8859-1")
(PUNCT ")")
(NEWLINE)
(ID "requestline")
(PUNCT "=")
(ID "requestline")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "requestline")
(PUNCT "=")
(ID "requestline")
(NEWLINE)
(ID "words")
(PUNCT "=")
(ID "requestline")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(ID "words")
(NEWLINE)
(KEYWORD if)
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "!=")
(LIT "HTTP/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 400)
(PUNCT ",")
(LIT "Bad request version (%r)")
(PUNCT "%")
(ID "version")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base_version_number")
(PUNCT "=")
(ID "version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "version_number")
(PUNCT "=")
(ID "base_version_number")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "version_number")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(NEWLINE)
(DEDENT)
(ID "version_number")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "version_number")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "version_number")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 400)
(PUNCT ",")
(LIT "Bad request version (%r)")
(PUNCT "%")
(ID "version")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "version_number")
(PUNCT ">=")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "protocol_version")
(PUNCT ">=")
(LIT "HTTP/1.1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "version_number")
(PUNCT ">=")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 505)
(PUNCT ",")
(LIT "Invalid HTTP Version (%s)")
(PUNCT "%")
(ID "base_version_number")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "words")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "command")
(PUNCT "!=")
(LIT "GET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 400)
(PUNCT ",")
(LIT "Bad HTTP/0.9 request type (%r)")
(PUNCT "%")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 400)
(PUNCT ",")
(LIT "Bad request syntax (%r)")
(PUNCT "%")
(ID "requestline")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT "=")
(ID "command")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "version")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "=")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "parse_headers")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ",")
(ID "_class")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "MessageClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "LineTooLong")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 400)
(PUNCT ",")
(LIT "Line too long")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "conntype")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "Connection")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "conntype")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "conntype")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "keep-alive")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "protocol_version")
(PUNCT ">=")
(LIT "HTTP/1.1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "expect")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "Expect")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "expect")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "100-continue")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "protocol_version")
(PUNCT ">=")
(LIT "HTTP/1.1")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT ">=")
(LIT "HTTP/1.1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "handle_expect_100")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_expect_100")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decide what to do with an \"Expect: 100-continue\" header.\n\n        If the client is expecting a 100 Continue response, we must\n        respond with either a 100 Continue or a final response before\n        waiting for the request body. The default is to always respond\n        with a 100 Continue. You can behave differently (for example,\n        reject unauthorized requests) by overriding this method.\n\n        This method should either return True (possibly after sending\n        a 100 Continue response) or send an error response and return\n        False.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_response_only")
(PUNCT "(")
(LIT 100)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_one_request")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle a single HTTP request.\n\n        You normally don't need to override this method; see the class\n        __doc__ string for information on how to handle specific HTTP\n        commands such as GET and POST.\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "raw_requestline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(LIT 65537)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "raw_requestline")
(PUNCT ")")
(PUNCT ">")
(LIT 65536)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "requestline")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 414)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "raw_requestline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "parse_request")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "mname")
(PUNCT "=")
(LIT "do_")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "command")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 501)
(PUNCT ",")
(LIT "Unsupported method (%r)")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "method")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mname")
(PUNCT ")")
(NEWLINE)
(ID "method")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "timeout")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_error")
(PUNCT "(")
(LIT "Request timed out: %r")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "handle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle multiple requests if necessary.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handle_one_request")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "handle_one_request")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "explain")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send and log an error reply.\n\n        Arguments are\n        * code:    an HTTP error code\n                   3 digits\n        * message: a simple optional 1 line reason phrase.\n                   *( HTAB / SP / VCHAR / %x80-FF )\n                   defaults to short entry matching the response code\n        * explain: a detailed message defaults to the long entry\n                   matching the response code.\n\n        This sends an error response (so it must be called before any\n        output has been generated), logs the error, and finally sends\n        a piece of HTML explaining the error to the user.\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shortmsg")
(PUNCT ",")
(ID "longmsg")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "responses")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shortmsg")
(PUNCT ",")
(ID "longmsg")
(PUNCT "=")
(LIT "???")
(PUNCT ",")
(LIT "???")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "message")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(ID "shortmsg")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "explain")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "explain")
(PUNCT "=")
(ID "longmsg")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "log_error")
(PUNCT "(")
(LIT "code %d, message %s")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(ID "content")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "error_message_format")
(PUNCT "%")
(PUNCT "{")
(LIT "code")
(PUNCT ":")
(ID "code")
(PUNCT ",")
(LIT "message")
(PUNCT ":")
(ID "_quote_html")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(PUNCT ",")
(LIT "explain")
(PUNCT ":")
(ID "_quote_html")
(PUNCT "(")
(ID "explain")
(PUNCT ")")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT "=")
(ID "content")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "UTF-8")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-Type")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "error_content_type")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Connection")
(PUNCT ",")
(LIT "close")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-Length")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT "!=")
(LIT "HEAD")
(KEYWORD and)
(ID "code")
(PUNCT ">=")
(LIT 200)
(KEYWORD and)
(ID "code")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT 204)
(PUNCT ",")
(LIT 304)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add the response header to the headers buffer and log the\n        response code.\n\n        Also send two standard headers with the server software\n        version and the current date.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "log_request")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_response_only")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Server")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "version_string")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Date")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "date_time_string")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send_response_only")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send the response header only.")
(NEWLINE)
(KEYWORD if)
(ID "message")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "code")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "responses")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "responses")
(PUNCT "[")
(ID "code")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT "!=")
(LIT "HTTP/0.9")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_headers_buffer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "%s %d %s\r\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "protocol_version")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keyword")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a MIME header to the headers buffer.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT "!=")
(LIT "HTTP/0.9")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_headers_buffer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "%s: %s\r\n")
(PUNCT "%")
(PUNCT "(")
(ID "keyword")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "keyword")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "connection")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "keep-alive")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_connection")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "end_headers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send the blank line ending the MIME headers.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "request_version")
(PUNCT "!=")
(LIT "HTTP/0.9")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flush_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "flush_headers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_headers_buffer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_headers_buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "log_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT "=")
(LIT "-")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Log an accepted request.\n\n        This is called by send_response().\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "\"%s\" %s %s")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "requestline")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Log an error.\n\n        This is called when a request cannot be fulfilled.  By\n        default it passes the message on to log_message().\n\n        Arguments are the same as for log_message().\n\n        XXX This should go to the separate error log.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(ID "format")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_message")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Log an arbitrary message.\n\n        This is used by all other logging functions.  Override\n        it if you have specific logging wishes.\n\n        The first argument, FORMAT, is a format string for the\n        message to be logged.  If the format string contains\n        any % escapes requiring parameters, they should be\n        specified as subsequent arguments (it's just like\n        printf!).\n\n        The client ip and current date/time are prefixed to\n        every message.\n\n        ")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s - - [%s] %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "address_string")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "log_date_time_string")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "format")
(PUNCT "%")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "version_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the server software version string.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "server_version")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "sys_version")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "date_time_string")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "timestamp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current date and time formatted for a message header.")
(NEWLINE)
(KEYWORD if)
(ID "timestamp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timestamp")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hh")
(PUNCT ",")
(ID "mm")
(PUNCT ",")
(ID "ss")
(PUNCT ",")
(ID "wd")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "z")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "timestamp")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT "%s, %02d %3s %4d %02d:%02d:%02d GMT")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "weekdayname")
(PUNCT "[")
(ID "wd")
(PUNCT "]")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "monthname")
(PUNCT "[")
(ID "month")
(PUNCT "]")
(PUNCT ",")
(ID "year")
(PUNCT ",")
(ID "hh")
(PUNCT ",")
(ID "mm")
(PUNCT ",")
(ID "ss")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_date_time_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current time formatted for logging.")
(NEWLINE)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hh")
(PUNCT ",")
(ID "mm")
(PUNCT ",")
(ID "ss")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "z")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "now")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT "%02d/%3s/%04d %02d:%02d:%02d")
(PUNCT "%")
(PUNCT "(")
(ID "day")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "monthname")
(PUNCT "[")
(ID "month")
(PUNCT "]")
(PUNCT ",")
(ID "year")
(PUNCT ",")
(ID "hh")
(PUNCT ",")
(ID "mm")
(PUNCT ",")
(ID "ss")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(ID "weekdayname")
(PUNCT "=")
(PUNCT "[")
(LIT "Mon")
(PUNCT ",")
(LIT "Tue")
(PUNCT ",")
(LIT "Wed")
(PUNCT ",")
(LIT "Thu")
(PUNCT ",")
(LIT "Fri")
(PUNCT ",")
(LIT "Sat")
(PUNCT ",")
(LIT "Sun")
(PUNCT "]")
(NEWLINE)
(ID "monthname")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT ",")
(LIT "Jan")
(PUNCT ",")
(LIT "Feb")
(PUNCT ",")
(LIT "Mar")
(PUNCT ",")
(LIT "Apr")
(PUNCT ",")
(LIT "May")
(PUNCT ",")
(LIT "Jun")
(PUNCT ",")
(LIT "Jul")
(PUNCT ",")
(LIT "Aug")
(PUNCT ",")
(LIT "Sep")
(PUNCT ",")
(LIT "Oct")
(PUNCT ",")
(LIT "Nov")
(PUNCT ",")
(LIT "Dec")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "address_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the client address.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "client_address")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "protocol_version")
(PUNCT "=")
(LIT "HTTP/1.0")
(NEWLINE)
(ID "MessageClass")
(PUNCT "=")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPMessage")
(NEWLINE)
(ID "responses")
(PUNCT "=")
(PUNCT "{")
(LIT 100)
(PUNCT ":")
(PUNCT "(")
(LIT "Continue")
(PUNCT ",")
(LIT "Request received, please continue")
(PUNCT ")")
(PUNCT ",")
(LIT 101)
(PUNCT ":")
(PUNCT "(")
(LIT "Switching Protocols")
(PUNCT ",")
(LIT "Switching to new protocol; obey Upgrade header")
(PUNCT ")")
(PUNCT ",")
(LIT 200)
(PUNCT ":")
(PUNCT "(")
(LIT "OK")
(PUNCT ",")
(LIT "Request fulfilled, document follows")
(PUNCT ")")
(PUNCT ",")
(LIT 201)
(PUNCT ":")
(PUNCT "(")
(LIT "Created")
(PUNCT ",")
(LIT "Document created, URL follows")
(PUNCT ")")
(PUNCT ",")
(LIT 202)
(PUNCT ":")
(PUNCT "(")
(LIT "Accepted")
(PUNCT ",")
(LIT "Request accepted, processing continues off-line")
(PUNCT ")")
(PUNCT ",")
(LIT 203)
(PUNCT ":")
(PUNCT "(")
(LIT "Non-Authoritative Information")
(PUNCT ",")
(LIT "Request fulfilled from cache")
(PUNCT ")")
(PUNCT ",")
(LIT 204)
(PUNCT ":")
(PUNCT "(")
(LIT "No Content")
(PUNCT ",")
(LIT "Request fulfilled, nothing follows")
(PUNCT ")")
(PUNCT ",")
(LIT 205)
(PUNCT ":")
(PUNCT "(")
(LIT "Reset Content")
(PUNCT ",")
(LIT "Clear input form for further input.")
(PUNCT ")")
(PUNCT ",")
(LIT 206)
(PUNCT ":")
(PUNCT "(")
(LIT "Partial Content")
(PUNCT ",")
(LIT "Partial content follows.")
(PUNCT ")")
(PUNCT ",")
(LIT 300)
(PUNCT ":")
(PUNCT "(")
(LIT "Multiple Choices")
(PUNCT ",")
(LIT "Object has several resources -- see URI list")
(PUNCT ")")
(PUNCT ",")
(LIT 301)
(PUNCT ":")
(PUNCT "(")
(LIT "Moved Permanently")
(PUNCT ",")
(LIT "Object moved permanently -- see URI list")
(PUNCT ")")
(PUNCT ",")
(LIT 302)
(PUNCT ":")
(PUNCT "(")
(LIT "Found")
(PUNCT ",")
(LIT "Object moved temporarily -- see URI list")
(PUNCT ")")
(PUNCT ",")
(LIT 303)
(PUNCT ":")
(PUNCT "(")
(LIT "See Other")
(PUNCT ",")
(LIT "Object moved -- see Method and URL list")
(PUNCT ")")
(PUNCT ",")
(LIT 304)
(PUNCT ":")
(PUNCT "(")
(LIT "Not Modified")
(PUNCT ",")
(LIT "Document has not changed since given time")
(PUNCT ")")
(PUNCT ",")
(LIT 305)
(PUNCT ":")
(PUNCT "(")
(LIT "Use Proxy")
(PUNCT ",")
(LIT "You must use proxy specified in Location to access this ")
(LIT "resource.")
(PUNCT ")")
(PUNCT ",")
(LIT 307)
(PUNCT ":")
(PUNCT "(")
(LIT "Temporary Redirect")
(PUNCT ",")
(LIT "Object moved temporarily -- see URI list")
(PUNCT ")")
(PUNCT ",")
(LIT 400)
(PUNCT ":")
(PUNCT "(")
(LIT "Bad Request")
(PUNCT ",")
(LIT "Bad request syntax or unsupported method")
(PUNCT ")")
(PUNCT ",")
(LIT 401)
(PUNCT ":")
(PUNCT "(")
(LIT "Unauthorized")
(PUNCT ",")
(LIT "No permission -- see authorization schemes")
(PUNCT ")")
(PUNCT ",")
(LIT 402)
(PUNCT ":")
(PUNCT "(")
(LIT "Payment Required")
(PUNCT ",")
(LIT "No payment -- see charging schemes")
(PUNCT ")")
(PUNCT ",")
(LIT 403)
(PUNCT ":")
(PUNCT "(")
(LIT "Forbidden")
(PUNCT ",")
(LIT "Request forbidden -- authorization will not help")
(PUNCT ")")
(PUNCT ",")
(LIT 404)
(PUNCT ":")
(PUNCT "(")
(LIT "Not Found")
(PUNCT ",")
(LIT "Nothing matches the given URI")
(PUNCT ")")
(PUNCT ",")
(LIT 405)
(PUNCT ":")
(PUNCT "(")
(LIT "Method Not Allowed")
(PUNCT ",")
(LIT "Specified method is invalid for this resource.")
(PUNCT ")")
(PUNCT ",")
(LIT 406)
(PUNCT ":")
(PUNCT "(")
(LIT "Not Acceptable")
(PUNCT ",")
(LIT "URI not available in preferred format.")
(PUNCT ")")
(PUNCT ",")
(LIT 407)
(PUNCT ":")
(PUNCT "(")
(LIT "Proxy Authentication Required")
(PUNCT ",")
(LIT "You must authenticate with ")
(LIT "this proxy before proceeding.")
(PUNCT ")")
(PUNCT ",")
(LIT 408)
(PUNCT ":")
(PUNCT "(")
(LIT "Request Timeout")
(PUNCT ",")
(LIT "Request timed out; try again later.")
(PUNCT ")")
(PUNCT ",")
(LIT 409)
(PUNCT ":")
(PUNCT "(")
(LIT "Conflict")
(PUNCT ",")
(LIT "Request conflict.")
(PUNCT ")")
(PUNCT ",")
(LIT 410)
(PUNCT ":")
(PUNCT "(")
(LIT "Gone")
(PUNCT ",")
(LIT "URI no longer exists and has been permanently removed.")
(PUNCT ")")
(PUNCT ",")
(LIT 411)
(PUNCT ":")
(PUNCT "(")
(LIT "Length Required")
(PUNCT ",")
(LIT "Client must specify Content-Length.")
(PUNCT ")")
(PUNCT ",")
(LIT 412)
(PUNCT ":")
(PUNCT "(")
(LIT "Precondition Failed")
(PUNCT ",")
(LIT "Precondition in headers is false.")
(PUNCT ")")
(PUNCT ",")
(LIT 413)
(PUNCT ":")
(PUNCT "(")
(LIT "Request Entity Too Large")
(PUNCT ",")
(LIT "Entity is too large.")
(PUNCT ")")
(PUNCT ",")
(LIT 414)
(PUNCT ":")
(PUNCT "(")
(LIT "Request-URI Too Long")
(PUNCT ",")
(LIT "URI is too long.")
(PUNCT ")")
(PUNCT ",")
(LIT 415)
(PUNCT ":")
(PUNCT "(")
(LIT "Unsupported Media Type")
(PUNCT ",")
(LIT "Entity body in unsupported format.")
(PUNCT ")")
(PUNCT ",")
(LIT 416)
(PUNCT ":")
(PUNCT "(")
(LIT "Requested Range Not Satisfiable")
(PUNCT ",")
(LIT "Cannot satisfy request range.")
(PUNCT ")")
(PUNCT ",")
(LIT 417)
(PUNCT ":")
(PUNCT "(")
(LIT "Expectation Failed")
(PUNCT ",")
(LIT "Expect condition could not be satisfied.")
(PUNCT ")")
(PUNCT ",")
(LIT 428)
(PUNCT ":")
(PUNCT "(")
(LIT "Precondition Required")
(PUNCT ",")
(LIT "The origin server requires the request to be conditional.")
(PUNCT ")")
(PUNCT ",")
(LIT 429)
(PUNCT ":")
(PUNCT "(")
(LIT "Too Many Requests")
(PUNCT ",")
(LIT "The user has sent too many requests ")
(LIT "in a given amount of time (\"rate limiting\").")
(PUNCT ")")
(PUNCT ",")
(LIT 431)
(PUNCT ":")
(PUNCT "(")
(LIT "Request Header Fields Too Large")
(PUNCT ",")
(LIT "The server is unwilling to ")
(LIT "process the request because its header fields are too large.")
(PUNCT ")")
(PUNCT ",")
(LIT 500)
(PUNCT ":")
(PUNCT "(")
(LIT "Internal Server Error")
(PUNCT ",")
(LIT "Server got itself in trouble")
(PUNCT ")")
(PUNCT ",")
(LIT 501)
(PUNCT ":")
(PUNCT "(")
(LIT "Not Implemented")
(PUNCT ",")
(LIT "Server does not support this operation")
(PUNCT ")")
(PUNCT ",")
(LIT 502)
(PUNCT ":")
(PUNCT "(")
(LIT "Bad Gateway")
(PUNCT ",")
(LIT "Invalid responses from another server/proxy.")
(PUNCT ")")
(PUNCT ",")
(LIT 503)
(PUNCT ":")
(PUNCT "(")
(LIT "Service Unavailable")
(PUNCT ",")
(LIT "The server cannot process the request due to a high load")
(PUNCT ")")
(PUNCT ",")
(LIT 504)
(PUNCT ":")
(PUNCT "(")
(LIT "Gateway Timeout")
(PUNCT ",")
(LIT "The gateway server did not receive a timely response")
(PUNCT ")")
(PUNCT ",")
(LIT 505)
(PUNCT ":")
(PUNCT "(")
(LIT "HTTP Version Not Supported")
(PUNCT ",")
(LIT "Cannot fulfill request.")
(PUNCT ")")
(PUNCT ",")
(LIT 511)
(PUNCT ":")
(PUNCT "(")
(LIT "Network Authentication Required")
(PUNCT ",")
(LIT "The client needs to authenticate to gain network access.")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SimpleHTTPRequestHandler")
(PUNCT "(")
(ID "BaseHTTPRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Simple HTTP request handler with GET and HEAD commands.\n\n    This serves files from the current directory and any of its\n    subdirectories.  The MIME type for files is determined by\n    calling the .guess_type() method.\n\n    The GET and HEAD requests are identical except that the HEAD\n    request omits the actual contents of the file.\n\n    ")
(NEWLINE)
(ID "server_version")
(PUNCT "=")
(LIT "SimpleHTTP/")
(PUNCT "+")
(ID "__version__")
(NEWLINE)
(KEYWORD def)
(ID "do_GET")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Serve a GET request.")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "send_head")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "copyfile")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "do_HEAD")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Serve a HEAD request.")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "send_head")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_head")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Common code for GET and HEAD commands.\n\n        This sends the response code and MIME headers.\n\n        Return value is either a file object (which has to be copied\n        to the outputfile by the caller unless the command was HEAD,\n        and must be closed by the caller under all circumstances), or\n        None, in which case the caller has nothing further to do.\n\n        ")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "translate_path")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "urlsplit")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "parts")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 301)
(PUNCT ")")
(NEWLINE)
(ID "new_parts")
(PUNCT "=")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "+")
(LIT "/")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "parts")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "new_url")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "urlunsplit")
(PUNCT "(")
(ID "new_parts")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Location")
(PUNCT ",")
(ID "new_url")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "index")
(KEYWORD in)
(LIT "index.html")
(PUNCT ",")
(LIT "index.htm")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "index")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "list_directory")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ctype")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "guess_type")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 404)
(PUNCT ",")
(LIT "File not found")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 200)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(ID "ctype")
(PUNCT ")")
(NEWLINE)
(ID "fs")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-Length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "fs")
(PUNCT "[")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Last-Modified")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "date_time_string")
(PUNCT "(")
(ID "fs")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "list_directory")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper to produce a directory listing (absent index.html).\n\n        Return value is either a file object, or None (indicating an\n        error).  In either case, the headers are sent, making the\n        interface the same as for send_head().\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 404)
(PUNCT ",")
(LIT "No permission to list directory")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "list")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "a")
(PUNCT ":")
(ID "a")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "displaypath")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogatepass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "displaypath")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "displaypath")
(PUNCT "=")
(ID "html")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "displaypath")
(PUNCT ")")
(NEWLINE)
(ID "enc")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "getfilesystemencoding")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "title")
(PUNCT "=")
(LIT "Directory listing for %s")
(PUNCT "%")
(ID "displaypath")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" ")
(LIT "\"http://www.w3.org/TR/html4/strict.dtd\">")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<html>\n<head>")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<meta http-equiv=\"Content-Type\" ")
(LIT "content=\"text/html; charset=%s\">")
(PUNCT "%")
(ID "enc")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<title>%s</title>\n</head>")
(PUNCT "%")
(ID "title")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<body>\n<h1>%s</h1>")
(PUNCT "%")
(ID "title")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<hr>\n<ul>")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fullname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "displayname")
(PUNCT "=")
(ID "linkname")
(PUNCT "=")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "displayname")
(PUNCT "=")
(ID "name")
(PUNCT "+")
(LIT "/")
(NEWLINE)
(ID "linkname")
(PUNCT "=")
(ID "name")
(PUNCT "+")
(LIT "/")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "displayname")
(PUNCT "=")
(ID "name")
(PUNCT "+")
(LIT "@")
(NEWLINE)
(DEDENT)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "<li><a href=\"%s\">%s</a></li>")
(PUNCT "%")
(PUNCT "(")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "quote")
(PUNCT "(")
(ID "linkname")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogatepass")
(PUNCT ")")
(PUNCT ",")
(ID "html")
(PUNCT ".")
(ID "escape")
(PUNCT "(")
(ID "displayname")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "r")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "</ul>\n<hr>\n</body>\n</html>\n")
(PUNCT ")")
(NEWLINE)
(ID "encoded")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "r")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "enc")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "encoded")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 200)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "text/html; charset=%s")
(PUNCT "%")
(ID "enc")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_header")
(PUNCT "(")
(LIT "Content-Length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "encoded")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "translate_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Translate a /-separated PATH to the local filename syntax.\n\n        Components that mean special things to the local file system\n        (e.g. drive or directory names) are ignored.  (XXX They should\n        probably be diagnosed.)\n\n        ")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "?")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "#")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "trailing_slash")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogatepass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "words")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "words")
(PUNCT "=")
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "words")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "word")
(KEYWORD in)
(ID "words")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drive")
(PUNCT ",")
(ID "word")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "word")
(PUNCT ")")
(NEWLINE)
(ID "head")
(PUNCT ",")
(ID "word")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "word")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "word")
(KEYWORD in)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "curdir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "pardir")
(PUNCT ")")
(PUNCT ":")
(KEYWORD continue)
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "word")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "trailing_slash")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "+=")
(LIT "/")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copyfile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "outputfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy all data between two file objects.\n\n        The SOURCE argument is a file object open for reading\n        (or anything with a read() method) and the DESTINATION\n        argument is a file object open for writing (or\n        anything with a write() method).\n\n        The only reason for overriding this would be to change\n        the block size or perhaps to replace newlines by CRLF\n        -- note however that this the default server uses this\n        to copy binary data as well.\n\n        ")
(NEWLINE)
(ID "shutil")
(PUNCT ".")
(ID "copyfileobj")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "outputfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "guess_type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Guess the type of a file.\n\n        Argument is a PATH (a filename).\n\n        Return value is a string of the form type/subtype,\n        usable for a MIME Content-type header.\n\n        The default implementation looks the file's extension\n        up in the table self.extensions_map, using application/octet-stream\n        as a default; however it would be permissible (if\n        slow) to look inside the data to make a better guess.\n\n        ")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "extensions_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "extensions_map")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "ext")
(PUNCT "=")
(ID "ext")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "extensions_map")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "extensions_map")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "extensions_map")
(PUNCT "[")
(LIT "")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "mimetypes")
(PUNCT ".")
(ID "inited")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mimetypes")
(PUNCT ".")
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "extensions_map")
(PUNCT "=")
(ID "mimetypes")
(PUNCT ".")
(ID "types_map")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "extensions_map")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT "{")
(LIT "")
(PUNCT ":")
(LIT "application/octet-stream")
(PUNCT ",")
(LIT ".py")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".c")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(LIT ".h")
(PUNCT ":")
(LIT "text/plain")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_url_collapse_path")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Given a URL path, remove extra '/'s and '.' path elements and collapse\n    any '..' references and returns a colllapsed path.\n\n    Implements something akin to RFC-2396 5.2 step 6 to parse relative paths.\n    The utility of this function is limited to is_cgi method and helps\n    preventing some security attacks.\n\n    Returns: A tuple of (head, tail) where tail is everything after the final /\n    and head is everything before it.  Head will always start with a '/' and,\n    if it contains anything else, never have a trailing '/'.\n\n    Raises: IndexError if too many '..' occur within the path.\n\n    ")
(NEWLINE)
(ID "path_parts")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "head_parts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "path_parts")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "part")
(PUNCT "==")
(LIT "..")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head_parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "part")
(KEYWORD and)
(ID "part")
(PUNCT "!=")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head_parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "path_parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail_part")
(PUNCT "=")
(ID "path_parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tail_part")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tail_part")
(PUNCT "==")
(LIT "..")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head_parts")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tail_part")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tail_part")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail_part")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail_part")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "splitpath")
(PUNCT "=")
(PUNCT "(")
(LIT "/")
(PUNCT "+")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "head_parts")
(PUNCT ")")
(PUNCT ",")
(ID "tail_part")
(PUNCT ")")
(NEWLINE)
(ID "collapsed_path")
(PUNCT "=")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "splitpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "collapsed_path")
(NEWLINE)
(DEDENT)
(ID "nobody")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "nobody_uid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal routine to get nobody's uid")
(NEWLINE)
(KEYWORD global)
(ID "nobody")
(NEWLINE)
(KEYWORD if)
(ID "nobody")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "nobody")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "pwd")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nobody")
(PUNCT "=")
(ID "pwd")
(PUNCT ".")
(ID "getpwnam")
(PUNCT "(")
(LIT "nobody")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nobody")
(PUNCT "=")
(LIT 1)
(PUNCT "+")
(ID "max")
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "pwd")
(PUNCT ".")
(ID "getpwall")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "nobody")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "executable")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test for executable file.")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "access")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "X_OK")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CGIHTTPRequestHandler")
(PUNCT "(")
(ID "SimpleHTTPRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Complete HTTP server with GET, HEAD and POST commands.\n\n    GET and HEAD also support running CGI scripts.\n\n    The POST command is *only* implemented for CGI scripts.\n\n    ")
(NEWLINE)
(ID "have_fork")
(PUNCT "=")
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "fork")
(PUNCT ")")
(NEWLINE)
(ID "rbufsize")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD def)
(ID "do_POST")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Serve a POST request.\n\n        This is only implemented for CGI scripts.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_cgi")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "run_cgi")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 501)
(PUNCT ",")
(LIT "Can only POST to CGI scripts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_head")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Version of send_head that support CGI scripts")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_cgi")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run_cgi")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "SimpleHTTPRequestHandler")
(PUNCT ".")
(ID "send_head")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_cgi")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether self.path corresponds to a CGI script.\n\n        Returns True and updates the cgi_info attribute to the tuple\n        (dir, rest) if self.path requires running a CGI script.\n        Returns False otherwise.\n\n        If any exception is raised, the caller should assume that\n        self.path was rejected as invalid and act accordingly.\n\n        The default implementation tests whether the normalized url\n        path begins with one of the strings in self.cgi_directories\n        (and the next character is a '/' or the end of the string).\n\n        ")
(NEWLINE)
(ID "collapsed_path")
(PUNCT "=")
(ID "_url_collapse_path")
(PUNCT "(")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "dir_sep")
(PUNCT "=")
(ID "collapsed_path")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "collapsed_path")
(PUNCT "[")
(PUNCT ":")
(ID "dir_sep")
(PUNCT "]")
(PUNCT ",")
(ID "collapsed_path")
(PUNCT "[")
(ID "dir_sep")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "head")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "cgi_directories")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cgi_info")
(PUNCT "=")
(ID "head")
(PUNCT ",")
(ID "tail")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "cgi_directories")
(PUNCT "=")
(PUNCT "[")
(LIT "/cgi-bin")
(PUNCT ",")
(LIT "/htbin")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "is_executable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether argument path is an executable file.")
(NEWLINE)
(KEYWORD return)
(ID "executable")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_python")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether argument path is a Python script.")
(NEWLINE)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "tail")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT ".py")
(PUNCT ",")
(LIT ".pyw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_cgi")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute a CGI script.")
(NEWLINE)
(ID "dir")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cgi_info")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "dir")
(PUNCT "+")
(LIT "/")
(PUNCT "+")
(ID "rest")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nextdir")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "nextrest")
(PUNCT "=")
(ID "path")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "scriptdir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "translate_path")
(PUNCT "(")
(ID "nextdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "scriptdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "nextdir")
(PUNCT ",")
(ID "nextrest")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "rest")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT "?")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rest")
(PUNCT ",")
(ID "query")
(PUNCT "=")
(ID "rest")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "rest")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "query")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "rest")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "rest")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(PUNCT ",")
(ID "rest")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "rest")
(PUNCT ",")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "scriptname")
(PUNCT "=")
(ID "dir")
(PUNCT "+")
(LIT "/")
(PUNCT "+")
(ID "script")
(NEWLINE)
(ID "scriptfile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "translate_path")
(PUNCT "(")
(ID "scriptname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "scriptfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 404)
(PUNCT ",")
(LIT "No such CGI script (%r)")
(PUNCT "%")
(ID "scriptname")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "scriptfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 403)
(PUNCT ",")
(LIT "CGI script is not a plain file (%r)")
(PUNCT "%")
(ID "scriptname")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "ispy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "is_python")
(PUNCT "(")
(ID "scriptname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "have_fork")
(KEYWORD or)
(KEYWORD not)
(ID "ispy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_executable")
(PUNCT "(")
(ID "scriptfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_error")
(PUNCT "(")
(LIT 403)
(PUNCT ",")
(LIT "CGI script is not executable (%r)")
(PUNCT "%")
(ID "scriptname")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "env")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "deepcopy")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ")")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "SERVER_SOFTWARE")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "version_string")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "SERVER_NAME")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "server_name")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "GATEWAY_INTERFACE")
(PUNCT "]")
(PUNCT "=")
(LIT "CGI/1.1")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "SERVER_PROTOCOL")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "protocol_version")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "SERVER_PORT")
(PUNCT "]")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "server_port")
(PUNCT ")")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "REQUEST_METHOD")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command")
(NEWLINE)
(ID "uqrest")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "PATH_INFO")
(PUNCT "]")
(PUNCT "=")
(ID "uqrest")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "PATH_TRANSLATED")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "translate_path")
(PUNCT "(")
(ID "uqrest")
(PUNCT ")")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "SCRIPT_NAME")
(PUNCT "]")
(PUNCT "=")
(ID "scriptname")
(NEWLINE)
(KEYWORD if)
(ID "query")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "QUERY_STRING")
(PUNCT "]")
(PUNCT "=")
(ID "query")
(NEWLINE)
(DEDENT)
(ID "env")
(PUNCT "[")
(LIT "REMOTE_ADDR")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "client_address")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "authorization")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "authorization")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "authorization")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authorization")
(PUNCT "=")
(ID "authorization")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "authorization")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "base64")
(PUNCT ",")
(ID "binascii")
(NEWLINE)
(ID "env")
(PUNCT "[")
(LIT "AUTH_TYPE")
(PUNCT "]")
(PUNCT "=")
(ID "authorization")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "authorization")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "basic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authorization")
(PUNCT "=")
(ID "authorization")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "authorization")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(PUNCT "(")
(ID "authorization")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "binascii")
(PUNCT ".")
(ID "Error")
(PUNCT ",")
(ID "UnicodeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authorization")
(PUNCT "=")
(ID "authorization")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "authorization")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "REMOTE_USER")
(PUNCT "]")
(PUNCT "=")
(ID "authorization")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "content-type")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "CONTENT_TYPE")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get_content_type")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "CONTENT_TYPE")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "[")
(LIT "content-type")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "length")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "content-length")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "length")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "CONTENT_LENGTH")
(PUNCT "]")
(PUNCT "=")
(ID "length")
(NEWLINE)
(DEDENT)
(ID "referer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "referer")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "referer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "HTTP_REFERER")
(PUNCT "]")
(PUNCT "=")
(ID "referer")
(NEWLINE)
(DEDENT)
(ID "accept")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "getallmatchingheaders")
(PUNCT "(")
(LIT "accept")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(LIT "\t\n\r ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "accept")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "accept")
(PUNCT "=")
(ID "accept")
(PUNCT "+")
(ID "line")
(PUNCT "[")
(LIT 7)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "env")
(PUNCT "[")
(LIT "HTTP_ACCEPT")
(PUNCT "]")
(PUNCT "=")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "accept")
(PUNCT ")")
(NEWLINE)
(ID "ua")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "user-agent")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ua")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "HTTP_USER_AGENT")
(PUNCT "]")
(PUNCT "=")
(ID "ua")
(NEWLINE)
(DEDENT)
(ID "co")
(PUNCT "=")
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get_all")
(PUNCT "(")
(LIT "cookie")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "cookie_str")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "co")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cookie_str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT "[")
(LIT "HTTP_COOKIE")
(PUNCT "]")
(PUNCT "=")
(ID "cookie_str")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(PUNCT "(")
(LIT "QUERY_STRING")
(PUNCT ",")
(LIT "REMOTE_HOST")
(PUNCT ",")
(LIT "CONTENT_LENGTH")
(PUNCT ",")
(LIT "HTTP_USER_AGENT")
(PUNCT ",")
(LIT "HTTP_COOKIE")
(PUNCT ",")
(LIT "HTTP_REFERER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "env")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send_response")
(PUNCT "(")
(LIT 200)
(PUNCT ",")
(LIT "Script output follows")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "flush_headers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "decoded_query")
(PUNCT "=")
(ID "query")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "+")
(PUNCT ",")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "have_fork")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "script")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "=")
(KEYWORD not)
(KEYWORD in)
(ID "decoded_query")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "decoded_query")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nobody")
(PUNCT "=")
(ID "nobody_uid")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fork")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pid")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT ",")
(ID "sts")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "select")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_error")
(PUNCT "(")
(LIT "CGI script exit status %#x")
(PUNCT ",")
(ID "sts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "setuid")
(PUNCT "(")
(ID "nobody")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "os")
(PUNCT ".")
(ID "dup2")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "dup2")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "execve")
(PUNCT "(")
(ID "scriptfile")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "env")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "server")
(PUNCT ".")
(ID "handle_error")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "request")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "client_address")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "_exit")
(PUNCT "(")
(LIT 127)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(ID "cmdline")
(PUNCT "=")
(PUNCT "[")
(ID "scriptfile")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_python")
(PUNCT "(")
(ID "scriptfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "interp")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "executable")
(NEWLINE)
(KEYWORD if)
(ID "interp")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "w.exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "interp")
(PUNCT "=")
(ID "interp")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 5)
(PUNCT "]")
(PUNCT "+")
(ID "interp")
(PUNCT "[")
(PUNCT "-")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "cmdline")
(PUNCT "=")
(PUNCT "[")
(ID "interp")
(PUNCT ",")
(LIT "-u")
(PUNCT "]")
(PUNCT "+")
(ID "cmdline")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "=")
(KEYWORD not)
(KEYWORD in)
(ID "query")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmdline")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "query")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "command: %s")
(PUNCT ",")
(ID "subprocess")
(PUNCT ".")
(ID "list2cmdline")
(PUNCT "(")
(ID "cmdline")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nbytes")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "TypeError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nbytes")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "Popen")
(PUNCT "(")
(ID "cmdline")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "env")
(PUNCT "=")
(ID "env")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "command")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "post")
(KEYWORD and)
(ID "nbytes")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "nbytes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "select")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "_sock")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "rfile")
(PUNCT ".")
(ID "_sock")
(PUNCT ".")
(ID "recv")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "communicate")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "stdout")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stderr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_error")
(PUNCT "(")
(LIT "%s")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "status")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "returncode")
(NEWLINE)
(KEYWORD if)
(ID "status")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_error")
(PUNCT "(")
(LIT "CGI script exit status %#x")
(PUNCT ",")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "log_message")
(PUNCT "(")
(LIT "CGI script exited OK")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "test")
(PUNCT "(")
(ID "HandlerClass")
(PUNCT "=")
(ID "BaseHTTPRequestHandler")
(PUNCT ",")
(ID "ServerClass")
(PUNCT "=")
(ID "HTTPServer")
(PUNCT ",")
(ID "protocol")
(PUNCT "=")
(LIT "HTTP/1.0")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 8000)
(PUNCT ",")
(ID "bind")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test the HTTP request handler class.\n\n    This runs an HTTP server on port 8000 (or the first command line\n    argument).\n\n    ")
(NEWLINE)
(ID "server_address")
(PUNCT "=")
(PUNCT "(")
(ID "bind")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(ID "HandlerClass")
(PUNCT ".")
(ID "protocol_version")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(ID "httpd")
(PUNCT "=")
(ID "ServerClass")
(PUNCT "(")
(ID "server_address")
(PUNCT ",")
(ID "HandlerClass")
(PUNCT ")")
(NEWLINE)
(ID "sa")
(PUNCT "=")
(ID "httpd")
(PUNCT ".")
(ID "socket")
(PUNCT ".")
(ID "getsockname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Serving HTTP on")
(PUNCT ",")
(ID "sa")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "port")
(PUNCT ",")
(ID "sa")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "...")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "httpd")
(PUNCT ".")
(ID "serve_forever")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\nKeyboard interrupt received, exiting.")
(PUNCT ")")
(NEWLINE)
(ID "httpd")
(PUNCT ".")
(ID "server_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--cgi")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Run as CGI Server")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "--bind")
(PUNCT ",")
(LIT "-b")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "ADDRESS")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Specify alternate bind address ")
(LIT "[default: all interfaces]")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "port")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT 8000)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "?")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Specify alternate port [default: 8000]")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "cgi")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler_class")
(PUNCT "=")
(ID "CGIHTTPRequestHandler")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler_class")
(PUNCT "=")
(ID "SimpleHTTPRequestHandler")
(NEWLINE)
(DEDENT)
(ID "test")
(PUNCT "(")
(ID "HandlerClass")
(PUNCT "=")
(ID "handler_class")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "port")
(PUNCT ",")
(ID "bind")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "bind")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
