(LIT "A multi-producer, multi-consumer queue.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "dummy_threading")
(KEYWORD as)
(ID "threading")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "deque")
(NEWLINE)
(KEYWORD from)
(ID "heapq")
(KEYWORD import)
(ID "heappush")
(PUNCT ",")
(ID "heappop")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "time")
(KEYWORD import)
(ID "monotonic")
(KEYWORD as)
(ID "time")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "time")
(KEYWORD import)
(ID "time")
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Empty")
(PUNCT ",")
(LIT "Full")
(PUNCT ",")
(LIT "Queue")
(PUNCT ",")
(LIT "PriorityQueue")
(PUNCT ",")
(LIT "LifoQueue")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "Empty")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception raised by Queue.get(block=0)/get_nowait().")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Full")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception raised by Queue.put(block=0)/put_nowait().")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Queue")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxsize")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "maxsize")
(PUNCT "=")
(ID "maxsize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_init")
(PUNCT "(")
(ID "maxsize")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "not_empty")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Condition")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "not_full")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Condition")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "all_tasks_done")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Condition")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "unfinished_tasks")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "task_done")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "all_tasks_done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unfinished")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "unfinished_tasks")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "unfinished")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "unfinished")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "task_done() called too many times")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "all_tasks_done")
(PUNCT ".")
(ID "notify_all")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "unfinished_tasks")
(PUNCT "=")
(ID "unfinished")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "all_tasks_done")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "unfinished_tasks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "all_tasks_done")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "qsize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the approximate size of the queue (not reliable!).")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "empty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the queue is empty, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() == 0\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can grow before the result of empty() or\n        qsize() can be used.\n\n        To create code that needs to wait for all queued tasks to be\n        completed, the preferred technique is to use the join() method.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "full")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the queue is full, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() >= n\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can shrink before the result of full() or\n        qsize() can be used.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "mutex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "maxsize")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "put")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "block")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "not_full")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "maxsize")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "block")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Full")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "timeout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "not_full")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "timeout")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "'timeout' must be a non-negative number")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endtime")
(PUNCT "=")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "timeout")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "maxsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remaining")
(PUNCT "=")
(ID "endtime")
(PUNCT "-")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remaining")
(PUNCT "<=")
(LIT 0.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Full")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "not_full")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "remaining")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_put")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "unfinished_tasks")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "not_empty")
(PUNCT ".")
(ID "notify")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "block")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        ")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "not_empty")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "block")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Empty")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "timeout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "not_empty")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "timeout")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "'timeout' must be a non-negative number")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endtime")
(PUNCT "=")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "timeout")
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_qsize")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "remaining")
(PUNCT "=")
(ID "endtime")
(PUNCT "-")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remaining")
(PUNCT "<=")
(LIT 0.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Empty")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "not_empty")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "remaining")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "not_full")
(PUNCT ".")
(ID "notify")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "item")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "put_nowait")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "put")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "block")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_nowait")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "block")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT "=")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_qsize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_put")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "popleft")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PriorityQueue")
(PUNCT "(")
(ID "Queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Variant of Queue that retrieves open entries in priority order (lowest first).\n\n    Entries are typically tuples of the form:  (priority number, data).\n    ")
(NEWLINE)
(KEYWORD def)
(ID "_init")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_qsize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_put")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "heappush")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "heappop")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LifoQueue")
(PUNCT "(")
(ID "Queue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Variant of Queue that retrieves most recently added entries first.")
(NEWLINE)
(KEYWORD def)
(ID "_init")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_qsize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_put")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "queue")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
