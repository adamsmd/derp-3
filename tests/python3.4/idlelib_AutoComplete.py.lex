(LIT "AutoComplete.py - An IDLE extension for automatically completing names.\n\nThis extension can complete either attribute names of file names. It can pop\na window with all available names, for the user to select from.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "string")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "configHandler")
(KEYWORD import)
(ID "idleConf")
(NEWLINE)
(ID "ID_CHARS")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "ascii_letters")
(PUNCT "+")
(ID "string")
(PUNCT ".")
(ID "digits")
(PUNCT "+")
(LIT "_")
(NEWLINE)
(ID "COMPLETE_ATTRIBUTES")
(PUNCT ",")
(ID "COMPLETE_FILES")
(PUNCT "=")
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(KEYWORD import)
(ID "AutoCompleteWindow")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "HyperParser")
(KEYWORD import)
(ID "HyperParser")
(NEWLINE)
(KEYWORD import)
(ID "__main__")
(NEWLINE)
(ID "SEPS")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "sep")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "altsep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "SEPS")
(PUNCT "+=")
(ID "os")
(PUNCT ".")
(ID "altsep")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "AutoComplete")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "menudefs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "edit")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(LIT "Show Completions")
(PUNCT ",")
(LIT "<<force-open-completions>>")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "popupwait")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "extensions")
(PUNCT ",")
(LIT "AutoComplete")
(PUNCT ",")
(LIT "popupwait")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "int")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "editwin")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT "=")
(ID "editwin")
(NEWLINE)
(KEYWORD if)
(ID "editwin")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT "=")
(ID "editwin")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_index")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_autocomplete_window")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "AutoCompleteWindow")
(PUNCT ".")
(ID "AutoCompleteWindow")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_remove_autocomplete_window")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT ".")
(ID "hide_window")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "force_open_completions_event")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Happens when the user really wants to open a completion list, even\n        if a function call is needed.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "open_completions")
(PUNCT "(")
(KEYWORD True)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "try_open_completions_event")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Happens when it would be nice to open a completion list, but not\n        really necessary, for example after an dot, so function\n        calls won't be made.\n        ")
(NEWLINE)
(ID "lastchar")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "insert-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lastchar")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_open_completions_later")
(PUNCT "(")
(KEYWORD False)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "COMPLETE_ATTRIBUTES")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "lastchar")
(KEYWORD in)
(ID "SEPS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_open_completions_later")
(PUNCT "(")
(KEYWORD False)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "COMPLETE_FILES")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "autocomplete_event")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Happens when the user wants to complete his word, and if necessary,\n        open a completion list after that (if there is more than one\n        completion)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "event")
(PUNCT ",")
(LIT "mc_state")
(PUNCT ")")
(KEYWORD and)
(ID "event")
(PUNCT ".")
(ID "mc_state")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT ".")
(ID "is_active")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT ".")
(ID "complete")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opened")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "open_completions")
(PUNCT "(")
(KEYWORD False)
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "opened")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_open_completions_later")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_index")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "after_cancel")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "after")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "popupwait")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_delayed_open_completions")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_delayed_open_completions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_index")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "open_completions")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_completions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "evalfuncs")
(PUNCT ",")
(ID "complete")
(PUNCT ",")
(ID "userWantsWin")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the completions and create the AutoCompleteWindow.\n        Return True if successful (no syntax error or so found).\n        if complete is True, then if there's nothing to complete and no\n        start of completion, won't open completions and return False.\n        If mode is given, will open a completion list only in this mode.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "after_cancel")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_delayed_completion_id")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "hp")
(PUNCT "=")
(ID "HyperParser")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(ID "curline")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "insert linestart")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "j")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "curline")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hp")
(PUNCT ".")
(ID "is_in_string")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(KEYWORD not)
(ID "mode")
(KEYWORD or)
(ID "mode")
(PUNCT "==")
(ID "COMPLETE_FILES")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_remove_autocomplete_window")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "COMPLETE_FILES")
(NEWLINE)
(KEYWORD while)
(ID "i")
(KEYWORD and)
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(LIT "'\"")
(PUNCT "+")
(ID "SEPS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "comp_start")
(PUNCT "=")
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "j")
(PUNCT "]")
(NEWLINE)
(ID "j")
(PUNCT "=")
(ID "i")
(NEWLINE)
(KEYWORD while)
(ID "i")
(KEYWORD and)
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(LIT "'\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "comp_what")
(PUNCT "=")
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "j")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hp")
(PUNCT ".")
(ID "is_in_code")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(KEYWORD not)
(ID "mode")
(KEYWORD or)
(ID "mode")
(PUNCT "==")
(ID "COMPLETE_ATTRIBUTES")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_remove_autocomplete_window")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "COMPLETE_ATTRIBUTES")
(NEWLINE)
(KEYWORD while)
(ID "i")
(KEYWORD and)
(PUNCT "(")
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(KEYWORD in)
(ID "ID_CHARS")
(KEYWORD or)
(ID "ord")
(PUNCT "(")
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(LIT 127)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "comp_start")
(PUNCT "=")
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "j")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "i")
(KEYWORD and)
(ID "curline")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hp")
(PUNCT ".")
(ID "set_index")
(PUNCT "(")
(LIT "insert-%dc")
(PUNCT "%")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "curline")
(PUNCT ")")
(PUNCT "-")
(PUNCT "(")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "comp_what")
(PUNCT "=")
(ID "hp")
(PUNCT ".")
(ID "get_expression")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "comp_what")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "evalfuncs")
(KEYWORD and)
(ID "comp_what")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "(")
(PUNCT ")")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comp_what")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "complete")
(KEYWORD and)
(KEYWORD not)
(ID "comp_what")
(KEYWORD and)
(KEYWORD not)
(ID "comp_start")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "comp_lists")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fetch_completions")
(PUNCT "(")
(ID "comp_what")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "comp_lists")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_autocomplete_window")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "autocompletewindow")
(PUNCT ".")
(ID "show_window")
(PUNCT "(")
(ID "comp_lists")
(PUNCT ",")
(LIT "insert-%dc")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "comp_start")
(PUNCT ")")
(PUNCT ",")
(ID "complete")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "userWantsWin")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fetch_completions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a pair of lists of completions for something. The first list\n        is a sublist of the second. Both are sorted.\n\n        If there is a Python subprocess, get the comp. list there.  Otherwise,\n        either fetch_completions() is running in the subprocess itself or it\n        was called in an IDLE EditorWindow before any script had been run.\n\n        The subprocess environment is that of the most recently run script.  If\n        two unrelated modules are being edited some calltips in the current\n        module may be inoperative if the module was not the last to run.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rpcclt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT ".")
(ID "flist")
(PUNCT ".")
(ID "pyshell")
(PUNCT ".")
(ID "interp")
(PUNCT ".")
(ID "rpcclt")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rpcclt")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "rpcclt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "rpcclt")
(PUNCT ".")
(ID "remotecall")
(PUNCT "(")
(LIT "exec")
(PUNCT ",")
(LIT "get_the_completion_list")
(PUNCT ",")
(PUNCT "(")
(ID "what")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(ID "COMPLETE_ATTRIBUTES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "what")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "namespace")
(PUNCT "=")
(ID "__main__")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "namespace")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "__main__")
(PUNCT ".")
(ID "__builtins__")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(ID "bigl")
(PUNCT "=")
(ID "eval")
(PUNCT "(")
(LIT "dir()")
(PUNCT ",")
(ID "namespace")
(PUNCT ")")
(NEWLINE)
(ID "bigl")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "__all__")
(KEYWORD in)
(ID "bigl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smalll")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "eval")
(PUNCT "(")
(LIT "__all__")
(PUNCT ",")
(ID "namespace")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smalll")
(PUNCT "=")
(PUNCT "[")
(ID "s")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "bigl")
(KEYWORD if)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "_")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entity")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_entity")
(PUNCT "(")
(ID "what")
(PUNCT ")")
(NEWLINE)
(ID "bigl")
(PUNCT "=")
(ID "dir")
(PUNCT "(")
(ID "entity")
(PUNCT ")")
(NEWLINE)
(ID "bigl")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "__all__")
(KEYWORD in)
(ID "bigl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smalll")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "entity")
(PUNCT ".")
(ID "__all__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smalll")
(PUNCT "=")
(PUNCT "[")
(ID "s")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "bigl")
(KEYWORD if)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "_")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "mode")
(PUNCT "==")
(ID "COMPLETE_FILES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "what")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "what")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expandedpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expanduser")
(PUNCT "(")
(ID "what")
(PUNCT ")")
(NEWLINE)
(ID "bigl")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "expandedpath")
(PUNCT ")")
(NEWLINE)
(ID "bigl")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "smalll")
(PUNCT "=")
(PUNCT "[")
(ID "s")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "bigl")
(KEYWORD if)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT ".")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "smalll")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smalll")
(PUNCT "=")
(ID "bigl")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "smalll")
(PUNCT ",")
(ID "bigl")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_entity")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Lookup name in a namespace spanning sys.modules and __main.dict__")
(NEWLINE)
(ID "namespace")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "namespace")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "__main__")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "eval")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "namespace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "unittest")
(KEYWORD import)
(ID "main")
(NEWLINE)
(ID "main")
(PUNCT "(")
(LIT "idlelib.idle_test.test_autocomplete")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
