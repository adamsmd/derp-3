(LIT "\nBasic statistics module.\n\nThis module provides functions for calculating statistics of data, including\naverages, variance, and standard deviation.\n\nCalculating averages\n--------------------\n\n==================  =============================================\nFunction            Description\n==================  =============================================\nmean                Arithmetic mean (average) of data.\nmedian              Median (middle value) of data.\nmedian_low          Low median of data.\nmedian_high         High median of data.\nmedian_grouped      Median, or 50th percentile, of grouped data.\nmode                Mode (most common value) of data.\n==================  =============================================\n\nCalculate the arithmetic mean (\"the average\") of data:\n\n>>> mean([-1.0, 2.5, 3.25, 5.75])\n2.625\n\n\nCalculate the standard median of discrete data:\n\n>>> median([2, 3, 4, 5])\n3.5\n\n\nCalculate the median, or 50th percentile, of data grouped into class intervals\ncentred on the data values provided. E.g. if your data points are rounded to\nthe nearest whole number:\n\n>>> median_grouped([2, 2, 3, 3, 3, 4])  #doctest: +ELLIPSIS\n2.8333333333...\n\nThis should be interpreted in this way: you have two data points in the class\ninterval 1.5-2.5, three data points in the class interval 2.5-3.5, and one in\nthe class interval 3.5-4.5. The median of these data points is 2.8333...\n\n\nCalculating variability or spread\n---------------------------------\n\n==================  =============================================\nFunction            Description\n==================  =============================================\npvariance           Population variance of data.\nvariance            Sample variance of data.\npstdev              Population standard deviation of data.\nstdev               Sample standard deviation of data.\n==================  =============================================\n\nCalculate the standard deviation of sample data:\n\n>>> stdev([2.5, 3.25, 5.5, 11.25, 11.75])  #doctest: +ELLIPSIS\n4.38961843444...\n\nIf you have previously calculated the mean, you can pass it as the optional\nsecond argument to the four \"spread\" functions to avoid recalculating it:\n\n>>> data = [1, 2, 2, 4, 4, 4, 5, 6]\n>>> mu = mean(data)\n>>> pvariance(data, mu)\n2.5\n\n\nExceptions\n----------\n\nA single exception is defined: StatisticsError is a subclass of ValueError.\n\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "StatisticsError")
(PUNCT ",")
(LIT "pstdev")
(PUNCT ",")
(LIT "pvariance")
(PUNCT ",")
(LIT "stdev")
(PUNCT ",")
(LIT "variance")
(PUNCT ",")
(LIT "median")
(PUNCT ",")
(LIT "median_low")
(PUNCT ",")
(LIT "median_high")
(PUNCT ",")
(LIT "median_grouped")
(PUNCT ",")
(LIT "mean")
(PUNCT ",")
(LIT "mode")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "math")
(NEWLINE)
(KEYWORD from)
(ID "fractions")
(KEYWORD import)
(ID "Fraction")
(NEWLINE)
(KEYWORD from)
(ID "decimal")
(KEYWORD import)
(ID "Decimal")
(NEWLINE)
(KEYWORD class)
(ID "StatisticsError")
(PUNCT "(")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_sum")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "start")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "_sum(data [, start]) -> value\n\n    Return a high-precision sum of the given numeric data. If optional\n    argument ``start`` is given, it is added to the total. If ``data`` is\n    empty, ``start`` (defaulting to 0) is returned.\n\n\n    Examples\n    --------\n\n    >>> _sum([3, 2.25, 4.5, -0.5, 1.0], 0.75)\n    11.0\n\n    Some sources of round-off error will be avoided:\n\n    >>> _sum([1e50, 1, -1e50] * 1000)  # Built-in sum returns zero.\n    1000.0\n\n    Fractions and Decimals are also supported:\n\n    >>> from fractions import Fraction as F\n    >>> _sum([F(2, 3), F(7, 5), F(1, 4), F(5, 6)])\n    Fraction(63, 20)\n\n    >>> from decimal import Decimal as D\n    >>> data = [D(\"0.1375\"), D(\"0.2108\"), D(\"0.3061\"), D(\"0.0419\")]\n    >>> _sum(data)\n    Decimal('0.6963')\n\n    Mixed types are currently treated as an error, except that int is\n    allowed.\n    ")
(NEWLINE)
(ID "allowed_types")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(ID "int")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT ",")
(ID "d")
(PUNCT "=")
(ID "_exact_ratio")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "partials")
(PUNCT "=")
(PUNCT "{")
(ID "d")
(PUNCT ":")
(ID "n")
(PUNCT "}")
(NEWLINE)
(ID "exact_ratio")
(PUNCT "=")
(ID "_exact_ratio")
(NEWLINE)
(ID "partials_get")
(PUNCT "=")
(ID "partials")
(PUNCT ".")
(ID "get")
(NEWLINE)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_check_type")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ",")
(ID "allowed_types")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT ",")
(ID "d")
(PUNCT "=")
(ID "exact_ratio")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "partials")
(PUNCT "[")
(ID "d")
(PUNCT "]")
(PUNCT "=")
(ID "partials_get")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "allowed_types")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "allowed_types")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "allowed_types")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(KEYWORD is)
(ID "int")
(NEWLINE)
(ID "T")
(PUNCT "=")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "T")
(PUNCT "=")
(PUNCT "(")
(ID "allowed_types")
(PUNCT "-")
(ID "set")
(PUNCT "(")
(PUNCT "[")
(ID "int")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD None)
(KEYWORD in)
(ID "partials")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "issubclass")
(PUNCT "(")
(ID "T")
(PUNCT ",")
(PUNCT "(")
(ID "float")
(PUNCT ",")
(ID "Decimal")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "math")
(PUNCT ".")
(ID "isfinite")
(PUNCT "(")
(ID "partials")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "T")
(PUNCT "(")
(ID "partials")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "total")
(PUNCT "=")
(ID "Fraction")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "d")
(PUNCT ",")
(ID "n")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "partials")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "total")
(PUNCT "+=")
(ID "Fraction")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "T")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "total")
(PUNCT ".")
(ID "denominator")
(PUNCT "==")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "T")
(PUNCT "(")
(ID "total")
(PUNCT ".")
(ID "numerator")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "T")
(PUNCT ",")
(ID "Decimal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "T")
(PUNCT "(")
(ID "total")
(PUNCT ".")
(ID "numerator")
(PUNCT ")")
(PUNCT "/")
(ID "total")
(PUNCT ".")
(ID "denominator")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "T")
(PUNCT "(")
(ID "total")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_type")
(PUNCT "(")
(ID "T")
(PUNCT ",")
(ID "allowed")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "T")
(KEYWORD not)
(KEYWORD in)
(ID "allowed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "allowed")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "allowed")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "T")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "types")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "t")
(PUNCT ".")
(ID "__name__")
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "allowed")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "T")
(PUNCT ".")
(ID "__name__")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "unsupported mixed types: %s")
(PUNCT "%")
(ID "types")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_exact_ratio")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert Real number x exactly to (numerator, denominator) pair.\n\n    >>> _exact_ratio(0.25)\n    (1, 4)\n\n    x is expected to be an int, Fraction, Decimal or float.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "numerator")
(PUNCT ",")
(ID "x")
(PUNCT ".")
(ID "denominator")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "as_integer_ratio")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_decimal_to_ratio")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "can't convert type '{}' to numerator/denominator")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OverflowError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "__debug__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "Decimal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "x")
(PUNCT ".")
(ID "is_finite")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "math")
(PUNCT ".")
(ID "isfinite")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "x")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_decimal_to_ratio")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert Decimal d to exact integer ratio (numerator, denominator).\n\n    >>> from decimal import Decimal\n    >>> _decimal_to_ratio(Decimal(\"2.6\"))\n    (26, 10)\n\n    ")
(NEWLINE)
(ID "sign")
(PUNCT ",")
(ID "digits")
(PUNCT ",")
(ID "exp")
(PUNCT "=")
(ID "d")
(PUNCT ".")
(ID "as_tuple")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exp")
(KEYWORD in)
(PUNCT "(")
(LIT "F")
(PUNCT ",")
(LIT "n")
(PUNCT ",")
(LIT "N")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "d")
(PUNCT ".")
(ID "is_finite")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(NEWLINE)
(DEDENT)
(ID "num")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "digit")
(KEYWORD in)
(ID "digits")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num")
(PUNCT "=")
(ID "num")
(PUNCT "*")
(LIT 10)
(PUNCT "+")
(ID "digit")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "exp")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "den")
(PUNCT "=")
(LIT 10)
(PUNCT "**")
(PUNCT "-")
(ID "exp")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num")
(PUNCT "*=")
(LIT 10)
(PUNCT "**")
(ID "exp")
(NEWLINE)
(ID "den")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sign")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num")
(PUNCT "=")
(PUNCT "-")
(ID "num")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "num")
(PUNCT ",")
(ID "den")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_counts")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "table")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "Counter")
(PUNCT "(")
(ID "iter")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "most_common")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "table")
(NEWLINE)
(DEDENT)
(ID "maxfreq")
(PUNCT "=")
(ID "table")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "table")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "table")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(ID "maxfreq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "table")
(PUNCT "=")
(ID "table")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "table")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mean")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the sample arithmetic mean of data.\n\n    >>> mean([1, 2, 3, 4, 4])\n    2.8\n\n    >>> from fractions import Fraction as F\n    >>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])\n    Fraction(13, 21)\n\n    >>> from decimal import Decimal as D\n    >>> mean([D(\"0.5\"), D(\"0.75\"), D(\"0.625\"), D(\"0.375\")])\n    Decimal('0.5625')\n\n    If ``data`` is empty, StatisticsError will be raised.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "iter")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(KEYWORD is)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "mean requires at least one data point")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_sum")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "/")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "median")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the median (middle value) of numeric data.\n\n    When the number of data points is odd, return the middle data point.\n    When the number of data points is even, the median is interpolated by\n    taking the average of the two middle values:\n\n    >>> median([1, 3, 5])\n    3\n    >>> median([1, 3, 5, 7])\n    4.0\n\n    ")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "no median for empty data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "%")
(LIT 2)
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT "//")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "n")
(PUNCT "//")
(LIT 2)
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT "/")
(LIT 2)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "median_low")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the low median of numeric data.\n\n    When the number of data points is odd, the middle value is returned.\n    When it is even, the smaller of the two middle values is returned.\n\n    >>> median_low([1, 3, 5])\n    3\n    >>> median_low([1, 3, 5, 7])\n    3\n\n    ")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "no median for empty data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "%")
(LIT 2)
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT "//")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT "//")
(LIT 2)
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "median_high")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the high median of data.\n\n    When the number of data points is odd, the middle value is returned.\n    When it is even, the larger of the two middle values is returned.\n\n    >>> median_high([1, 3, 5])\n    3\n    >>> median_high([1, 3, 5, 7])\n    5\n\n    ")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "no median for empty data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT "//")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "median_grouped")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "interval")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\"Return the 50th percentile (median) of grouped continuous data.\n\n    >>> median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])\n    3.7\n    >>> median_grouped([52, 52, 53, 54])\n    52.5\n\n    This calculates the median as the 50th percentile, and should be\n    used when your data is continuous and grouped. In the above example,\n    the values 1, 2, 3, etc. actually represent the midpoint of classes\n    0.5-1.5, 1.5-2.5, 2.5-3.5, etc. The middle value falls somewhere in\n    class 3.5-4.5, and interpolation is used to estimate it.\n\n    Optional argument ``interval`` represents the class interval, and\n    defaults to 1. Changing the class interval naturally will change the\n    interpolated 50th percentile value:\n\n    >>> median_grouped([1, 3, 3, 5, 7], interval=1)\n    3.25\n    >>> median_grouped([1, 3, 3, 5, 7], interval=2)\n    3.5\n\n    This function does not check whether the data points are at least\n    ``interval`` apart.\n    ")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "no median for empty data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT "//")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "interval")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected number but got %r")
(PUNCT "%")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "L")
(PUNCT "=")
(ID "x")
(PUNCT "-")
(ID "interval")
(PUNCT "/")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "L")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "-")
(ID "float")
(PUNCT "(")
(ID "interval")
(PUNCT ")")
(PUNCT "/")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "cf")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "L")
(PUNCT "+")
(ID "interval")
(PUNCT "*")
(PUNCT "(")
(ID "n")
(PUNCT "/")
(LIT 2)
(PUNCT "-")
(ID "cf")
(PUNCT ")")
(PUNCT "/")
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the most common data point from discrete or nominal data.\n\n    ``mode`` assumes discrete data, and returns a single value. This is the\n    standard treatment of the mode as commonly taught in schools:\n\n    >>> mode([1, 1, 2, 3, 3, 3, 3, 4])\n    3\n\n    This also works with nominal (non-numeric) data:\n\n    >>> mode([\"red\", \"blue\", \"blue\", \"red\", \"green\", \"red\", \"red\"])\n    'red'\n\n    If there is not exactly one most common value, ``mode`` will raise\n    StatisticsError.\n    ")
(NEWLINE)
(ID "table")
(PUNCT "=")
(ID "_counts")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "table")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "table")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "no unique mode; found %d equally common values")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "table")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "no mode for empty data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ss")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "c")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return sum of square deviations of sequence data.\n\n    If ``c`` is None, the mean is calculated in one pass, and the deviations\n    from the mean are calculated in a second pass. Otherwise, deviations are\n    calculated from ``c`` as given. Use the second case with care, as it can\n    lead to garbage results.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "c")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "mean")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ss")
(PUNCT "=")
(ID "_sum")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT "-")
(ID "c")
(PUNCT ")")
(PUNCT "**")
(LIT 2)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "ss")
(PUNCT "-=")
(ID "_sum")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT "-")
(ID "c")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "data")
(PUNCT ")")
(PUNCT "**")
(LIT 2)
(PUNCT "/")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "ss")
(PUNCT "<")
(LIT 0)
(PUNCT ",")
(LIT "negative sum of square deviations: %f")
(PUNCT "%")
(ID "ss")
(NEWLINE)
(KEYWORD return)
(ID "ss")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "variance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "xbar")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the sample variance of data.\n\n    data should be an iterable of Real-valued numbers, with at least two\n    values. The optional argument xbar, if given, should be the mean of\n    the data. If it is missing or None, the mean is automatically calculated.\n\n    Use this function when your data is a sample from a population. To\n    calculate the variance from the entire population, see ``pvariance``.\n\n    Examples:\n\n    >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n    >>> variance(data)\n    1.3720238095238095\n\n    If you have already calculated the mean of your data, you can pass it as\n    the optional second argument ``xbar`` to avoid recalculating it:\n\n    >>> m = mean(data)\n    >>> variance(data, m)\n    1.3720238095238095\n\n    This function does not check that ``xbar`` is actually the mean of\n    ``data``. Giving arbitrary values for ``xbar`` may lead to invalid or\n    impossible results.\n\n    Decimals and Fractions are supported:\n\n    >>> from decimal import Decimal as D\n    >>> variance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), D(\"41.75\")])\n    Decimal('31.01875')\n\n    >>> from fractions import Fraction as F\n    >>> variance([F(1, 6), F(1, 2), F(5, 3)])\n    Fraction(67, 108)\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "iter")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(KEYWORD is)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "variance requires at least two data points")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ss")
(PUNCT "=")
(ID "_ss")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "xbar")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ss")
(PUNCT "/")
(PUNCT "(")
(ID "n")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pvariance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "mu")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the population variance of ``data``.\n\n    data should be an iterable of Real-valued numbers, with at least one\n    value. The optional argument mu, if given, should be the mean of\n    the data. If it is missing or None, the mean is automatically calculated.\n\n    Use this function to calculate the variance from the entire population.\n    To estimate the variance from a sample, the ``variance`` function is\n    usually a better choice.\n\n    Examples:\n\n    >>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]\n    >>> pvariance(data)\n    1.25\n\n    If you have already calculated the mean of the data, you can pass it as\n    the optional second argument to avoid recalculating it:\n\n    >>> mu = mean(data)\n    >>> pvariance(data, mu)\n    1.25\n\n    This function does not check that ``mu`` is actually the mean of ``data``.\n    Giving arbitrary values for ``mu`` may lead to invalid or impossible\n    results.\n\n    Decimals and Fractions are supported:\n\n    >>> from decimal import Decimal as D\n    >>> pvariance([D(\"27.5\"), D(\"30.25\"), D(\"30.25\"), D(\"34.5\"), D(\"41.75\")])\n    Decimal('24.815')\n\n    >>> from fractions import Fraction as F\n    >>> pvariance([F(1, 4), F(5, 4), F(1, 2)])\n    Fraction(13, 72)\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "iter")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(KEYWORD is)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StatisticsError")
(PUNCT "(")
(LIT "pvariance requires at least one data point")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ss")
(PUNCT "=")
(ID "_ss")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "mu")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ss")
(PUNCT "/")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stdev")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "xbar")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the square root of the sample variance.\n\n    See ``variance`` for arguments and other details.\n\n    >>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n    1.0810874155219827\n\n    ")
(NEWLINE)
(ID "var")
(PUNCT "=")
(ID "variance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "xbar")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "var")
(PUNCT ".")
(ID "sqrt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "math")
(PUNCT ".")
(ID "sqrt")
(PUNCT "(")
(ID "var")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pstdev")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "mu")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the square root of the population variance.\n\n    See ``pvariance`` for arguments and other details.\n\n    >>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])\n    0.986893273527251\n\n    ")
(NEWLINE)
(ID "var")
(PUNCT "=")
(ID "pvariance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "mu")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "var")
(PUNCT ".")
(ID "sqrt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "math")
(PUNCT ".")
(ID "sqrt")
(PUNCT "(")
(ID "var")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
