(LIT "Different kinds of SAX Exceptions")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "java")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "java")
(PUNCT ".")
(ID "lang")
(KEYWORD import)
(ID "Exception")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "sys")
(NEWLINE)
(KEYWORD class)
(ID "SAXException")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encapsulate an XML error or warning. This class can contain\n    basic error or warning information from either the XML parser or\n    the application: you can subclass it to provide additional\n    functionality, or to add localization. Note that although you will\n    receive a SAXException as the argument to the handlers in the\n    ErrorHandler interface, you are not actually required to raise\n    the exception; instead, you can simply read the information in\n    it.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "exception")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates an exception. The message is required, but the exception\n        is optional.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_msg")
(PUNCT "=")
(ID "msg")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_exception")
(PUNCT "=")
(ID "exception")
(NEWLINE)
(ID "Exception")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getMessage")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a message for this exception.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_msg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getException")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the embedded exception, or None if there was none.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_exception")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a string representation of the exception.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_msg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Avoids weird error messages if someone does exception[ix] by\n        mistake, since Exception has __getitem__ defined.")
(NEWLINE)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "__getitem__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SAXParseException")
(PUNCT "(")
(ID "SAXException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encapsulate an XML parse error or warning.\n\n    This exception will include information for locating the error in\n    the original XML document. Note that although the application will\n    receive a SAXParseException as the argument to the handlers in the\n    ErrorHandler interface, the application is not actually required\n    to raise the exception; instead, it can simply read the\n    information in it and take a different action.\n\n    Since this exception is a subclass of SAXException, it inherits\n    the ability to wrap another exception.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "locator")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates the exception. The exception parameter is allowed to be None.")
(NEWLINE)
(ID "SAXException")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "exception")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_locator")
(PUNCT "=")
(ID "locator")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_systemId")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_locator")
(PUNCT ".")
(ID "getSystemId")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_colnum")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_locator")
(PUNCT ".")
(ID "getColumnNumber")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_linenum")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_locator")
(PUNCT ".")
(ID "getLineNumber")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getColumnNumber")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The column number of the end of the text where the exception\n        occurred.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_colnum")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getLineNumber")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The line number of the end of the text where the exception occurred.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_linenum")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getPublicId")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the public identifier of the entity where the exception occurred.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_locator")
(PUNCT ".")
(ID "getPublicId")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getSystemId")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the system identifier of the entity where the exception occurred.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_systemId")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a string representation of the exception.")
(NEWLINE)
(ID "sysid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getSystemId")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sysid")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sysid")
(PUNCT "=")
(LIT "<unknown>")
(NEWLINE)
(DEDENT)
(ID "linenum")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getLineNumber")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "linenum")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linenum")
(PUNCT "=")
(LIT "?")
(NEWLINE)
(DEDENT)
(ID "colnum")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getColumnNumber")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "colnum")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "colnum")
(PUNCT "=")
(LIT "?")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s:%s:%s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "sysid")
(PUNCT ",")
(ID "linenum")
(PUNCT ",")
(ID "colnum")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SAXNotRecognizedException")
(PUNCT "(")
(ID "SAXException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception class for an unrecognized identifier.\n\n    An XMLReader will raise this exception when it is confronted with an\n    unrecognized feature or property. SAX applications and extensions may\n    use this class for similar purposes.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SAXNotSupportedException")
(PUNCT "(")
(ID "SAXException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception class for an unsupported operation.\n\n    An XMLReader will raise this exception when a service it cannot\n    perform is requested (specifically setting a state or value). SAX\n    applications and extensions may use this class for similar\n    purposes.")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SAXReaderNotAvailable")
(PUNCT "(")
(ID "SAXNotSupportedException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception class for a missing driver.\n\n    An XMLReader module (driver) should raise this exception when it\n    is first imported, e.g. when a support module cannot be imported.\n    It also may be raised during parsing, e.g. if executing an external\n    program is not permitted.")
(NEWLINE)
(DEDENT)
(ENDMARKER)
