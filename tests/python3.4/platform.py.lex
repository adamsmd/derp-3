(LIT " This module tries to retrieve as much platform-identifying data as\n    possible. It makes this information available via function APIs.\n\n    If called from the command line, it prints the platform\n    information concatenated as single string to stdout. The output\n    format is useable as part of a filename.\n\n")
(NEWLINE)
(ID "__copyright__")
(PUNCT "=")
(LIT "\n    Copyright (c) 1999-2000, Marc-Andre Lemburg; mailto:mal@lemburg.com\n    Copyright (c) 2000-2010, eGenix.com Software GmbH; mailto:info@egenix.com\n\n    Permission to use, copy, modify, and distribute this software and its\n    documentation for any purpose and without fee or royalty is hereby granted,\n    provided that the above copyright notice appear in all copies and that\n    both that copyright notice and this permission notice appear in\n    supporting documentation or portions thereof, including modifications,\n    that you make.\n\n    EGENIX.COM SOFTWARE GMBH DISCLAIMS ALL WARRANTIES WITH REGARD TO\n    THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n    FITNESS, IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,\n    INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\n    FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n    NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n    WITH THE USE OR PERFORMANCE OF THIS SOFTWARE !\n\n")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "1.0.7")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(PUNCT ",")
(ID "re")
(PUNCT ",")
(ID "subprocess")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "DEV_NULL")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "devnull")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(KEYWORD in)
(PUNCT "(")
(LIT "dos")
(PUNCT ",")
(LIT "win32")
(PUNCT ",")
(LIT "win16")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "DEV_NULL")
(PUNCT "=")
(LIT "NUL")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "DEV_NULL")
(PUNCT "=")
(LIT "/dev/null")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_UNIXCONFDIR")
(PUNCT "=")
(LIT "/etc")
(NEWLINE)
(ID "_libc_search")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"(__libc_init)")
(LIT #"|")
(LIT #"(GLIBC_([0-9.]+))")
(LIT #"|")
(LIT #"(libc(_\\w+)?\\.so(?:\\.(\\d[0-9.]*))?)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "libc_ver")
(PUNCT "(")
(ID "executable")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ",")
(ID "lib")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "chunksize")
(PUNCT "=")
(LIT 16384)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Tries to determine the libc version that the file executable\n        (which defaults to the Python interpreter) is linked against.\n\n        Returns a tuple of strings (lib,version) which default to the\n        given parameters in case the lookup fails.\n\n        Note that the function has intimate knowledge of how different\n        libc versions add symbols to the executable and thus is probably\n        only useable for executables compiled using gcc.\n\n        The file is read and scanned in chunks of chunksize bytes.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(LIT "realpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "realpath")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "binary")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "chunksize")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT #"libc")
(KEYWORD in)
(ID "binary")
(KEYWORD or)
(LIT #"GLIBC")
(KEYWORD in)
(ID "binary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "_libc_search")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "binary")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binary")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "chunksize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "binary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "libcinit")
(PUNCT ",")
(ID "glibc")
(PUNCT ",")
(ID "glibcversion")
(PUNCT ",")
(ID "so")
(PUNCT ",")
(ID "threads")
(PUNCT ",")
(ID "soversion")
(PUNCT "=")
(PUNCT "[")
(ID "s")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "latin1")
(PUNCT ")")
(KEYWORD if)
(ID "s")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD else)
(ID "s")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "libcinit")
(KEYWORD and)
(KEYWORD not)
(ID "lib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib")
(PUNCT "=")
(LIT "libc")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "glibc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lib")
(PUNCT "!=")
(LIT "glibc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib")
(PUNCT "=")
(LIT "glibc")
(NEWLINE)
(ID "version")
(PUNCT "=")
(ID "glibcversion")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "glibcversion")
(PUNCT ">")
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "glibcversion")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "so")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "lib")
(PUNCT "!=")
(LIT "glibc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib")
(PUNCT "=")
(LIT "libc")
(NEWLINE)
(KEYWORD if)
(ID "soversion")
(KEYWORD and)
(ID "soversion")
(PUNCT ">")
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "soversion")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "threads")
(KEYWORD and)
(ID "version")
(PUNCT "[")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "threads")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(ID "threads")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "version")
(PUNCT "+")
(ID "threads")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "pos")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "lib")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_dist_try_harder")
(PUNCT "(")
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Tries some special tricks to get the distribution\n        information in case the default method fails.\n\n        Currently supports older SuSE Linux, Caldera OpenLinux and\n        Slackware Linux distributions.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(LIT "/var/adm/inst-log/info")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "distname")
(PUNCT "=")
(LIT "SuSE")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "open")
(PUNCT "(")
(LIT "/var/adm/inst-log/info")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tv")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "tv")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tag")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "tv")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tag")
(PUNCT "==")
(LIT "MIN_DIST_VERSION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tag")
(PUNCT "==")
(LIT "DIST_IDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "id")
(PUNCT "=")
(ID "values")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(LIT "/etc/.installed")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "open")
(PUNCT "(")
(LIT "/etc/.installed")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pkg")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "pkg")
(PUNCT ")")
(PUNCT ">=")
(LIT 2)
(KEYWORD and)
(ID "pkg")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "OpenLinux")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "OpenLinux")
(PUNCT ",")
(ID "pkg")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(LIT "/usr/lib/setup")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "verfiles")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(LIT "/usr/lib/setup")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "verfiles")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "verfiles")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(PUNCT "[")
(PUNCT ":")
(LIT 14)
(PUNCT "]")
(PUNCT "!=")
(LIT "slack-version-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "verfiles")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "verfiles")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "verfiles")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "distname")
(PUNCT "=")
(LIT "slackware")
(NEWLINE)
(ID "version")
(PUNCT "=")
(ID "verfiles")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 14)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(ID "_release_filename")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(\\w+)[-_](release|version)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "_lsb_release_version")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(.+)")
(LIT " release ")
(LIT "([\\d.]+)")
(LIT "[^(]*(?:\\((.+)\\))?")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "_release_version")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([^0-9]+)")
(LIT "(?: release )?")
(LIT "([\\d.]+)")
(LIT "[^(]*(?:\\((.+)\\))?")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "_supported_dists")
(PUNCT "=")
(PUNCT "(")
(LIT "SuSE")
(PUNCT ",")
(LIT "debian")
(PUNCT ",")
(LIT "fedora")
(PUNCT ",")
(LIT "redhat")
(PUNCT ",")
(LIT "centos")
(PUNCT ",")
(LIT "mandrake")
(PUNCT ",")
(LIT "mandriva")
(PUNCT ",")
(LIT "rocks")
(PUNCT ",")
(LIT "slackware")
(PUNCT ",")
(LIT "yellowdog")
(PUNCT ",")
(LIT "gentoo")
(PUNCT ",")
(LIT "UnitedLinux")
(PUNCT ",")
(LIT "turbolinux")
(PUNCT ",")
(LIT "arch")
(PUNCT ",")
(LIT "mageia")
(PUNCT ",")
(LIT "Ubuntu")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_parse_release_file")
(PUNCT "(")
(ID "firstline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "id")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_lsb_release_version")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "firstline")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_release_version")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "firstline")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "l")
(PUNCT "=")
(ID "firstline")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "l")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "id")
(PUNCT "=")
(ID "l")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(ID "_distributor_id_file_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(?:DISTRIB_ID\\s*=)\\s*(.*)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(NEWLINE)
(ID "_release_file_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(?:DISTRIB_RELEASE\\s*=)\\s*(.*)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(NEWLINE)
(ID "_codename_file_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(?:DISTRIB_CODENAME\\s*=)\\s*(.*)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "linux_distribution")
(PUNCT "(")
(ID "distname")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "id")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "supported_dists")
(PUNCT "=")
(ID "_supported_dists")
(PUNCT ",")
(ID "full_distribution_name")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        supported_dists may be given to define the set of Linux\n        distributions to look for. It defaults to a list of currently\n        supported Linux distributions identified by their release file\n        name.\n\n        If full_distribution_name is true (default), the full\n        distribution read from the OS is returned. Otherwise the short\n        name taken from supported_dists is used.\n\n        Returns a tuple (distname, version, id) which default to the\n        args given as parameters.\n\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(LIT "/etc/lsb-release")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "etclsbrel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "etclsbrel")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "_distributor_id_file_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_u_distname")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_release_file_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_u_version")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "m")
(PUNCT "=")
(ID "_codename_file_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_u_id")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_u_distname")
(KEYWORD and)
(ID "_u_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "_u_distname")
(PUNCT ",")
(ID "_u_version")
(PUNCT ",")
(ID "_u_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "EnvironmentError")
(PUNCT ",")
(ID "UnboundLocalError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "etc")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "_UNIXCONFDIR")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(ID "etc")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "etc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "_release_filename")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_distname")
(PUNCT ",")
(ID "dummy")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_distname")
(KEYWORD in)
(ID "supported_dists")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "distname")
(PUNCT "=")
(ID "_distname")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_dist_try_harder")
(PUNCT "(")
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_UNIXCONFDIR")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ",")
(LIT "r")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogateescape")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "firstline")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_distname")
(PUNCT ",")
(ID "_version")
(PUNCT ",")
(ID "_id")
(PUNCT "=")
(ID "_parse_release_file")
(PUNCT "(")
(ID "firstline")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_distname")
(KEYWORD and)
(ID "full_distribution_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "distname")
(PUNCT "=")
(ID "_distname")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "_version")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_id")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "id")
(PUNCT "=")
(ID "_id")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dist")
(PUNCT "(")
(ID "distname")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "id")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "supported_dists")
(PUNCT "=")
(ID "_supported_dists")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        Returns a tuple (distname, version, id) which default to the\n        args given as parameters.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "linux_distribution")
(PUNCT "(")
(ID "distname")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "id")
(PUNCT ",")
(ID "supported_dists")
(PUNCT "=")
(ID "supported_dists")
(PUNCT ",")
(ID "full_distribution_name")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Portable popen() interface.\n    ")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "use os.popen instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_norm_version")
(PUNCT "(")
(ID "version")
(PUNCT ",")
(ID "build")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Normalize the version and build strings and return a single\n        version string using the format major.minor.build (or patchlevel).\n    ")
(NEWLINE)
(ID "l")
(PUNCT "=")
(ID "version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "build")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "build")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ints")
(PUNCT "=")
(ID "map")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "l")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strings")
(PUNCT "=")
(ID "l")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strings")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "ints")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "version")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "strings")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "version")
(NEWLINE)
(DEDENT)
(ID "_ver_output")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(?:([\\w ]+) ([\\w.]+) ")
(LIT ".*")
(LIT "\\[.* ([\\d.]+)\\])")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_syscmd_ver")
(PUNCT "(")
(ID "system")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "release")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "supported_platforms")
(PUNCT "=")
(PUNCT "(")
(LIT "win32")
(PUNCT ",")
(LIT "win16")
(PUNCT ",")
(LIT "dos")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Tries to figure out the OS version used and returns\n        a tuple (system, release, version).\n\n        It uses the \"ver\" shell command for this which is known\n        to exists on Windows, DOS. XXX Others too ?\n\n        In case this fails, the given parameters are used as\n        defaults.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(KEYWORD not)
(KEYWORD in)
(ID "supported_platforms")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(PUNCT "(")
(LIT "ver")
(PUNCT ",")
(LIT "command /c ver")
(PUNCT ",")
(LIT "cmd /c ver")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pipe")
(PUNCT "=")
(ID "popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(ID "info")
(PUNCT "=")
(ID "pipe")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pipe")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "command failed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "why")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(ID "info")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "_ver_output")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "info")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "release")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(ID "release")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "version")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "version")
(PUNCT "=")
(ID "_norm_version")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_win32_getvalue")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Read a value for name from the registry key.\n\n        In case this fails, default is returned.\n\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "win32api")
(KEYWORD import)
(ID "RegQueryValueEx")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "winreg")
(NEWLINE)
(ID "RegQueryValueEx")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "QueryValueEx")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "RegQueryValueEx")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "win32_ver")
(PUNCT "(")
(ID "release")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "csd")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "ptype")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Get additional version information from the Windows Registry\n        and return a tuple (version, csd, ptype) referring to version\n        number, CSD level (service pack), and OS type (multi/single\n        processor).\n\n        As a hint: ptype returns 'Uniprocessor Free' on single\n        processor NT machines and 'Multiprocessor Free' on multi\n        processor machines. The 'Free' refers to the OS version being\n        free of debugging code. It could also state 'Checked' which\n        means the OS version uses debugging code, i.e. code that\n        checks arguments, ranges, etc. (Thomas Heller).\n\n        Note: this function works best with Mark Hammond's win32\n        package installed, but also on Python 2.3 and later. It\n        obviously only runs on Win32 compatible platforms.\n\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "win32api")
(KEYWORD import)
(ID "RegQueryValueEx")
(PUNCT ",")
(ID "RegOpenKeyEx")
(PUNCT ",")
(ID "RegCloseKey")
(PUNCT ",")
(ID "GetVersionEx")
(NEWLINE)
(KEYWORD from)
(ID "win32con")
(KEYWORD import)
(ID "HKEY_LOCAL_MACHINE")
(PUNCT ",")
(ID "VER_PLATFORM_WIN32_NT")
(PUNCT ",")
(ID "VER_PLATFORM_WIN32_WINDOWS")
(PUNCT ",")
(ID "VER_NT_WORKSTATION")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "getwindowsversion")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "csd")
(PUNCT ",")
(ID "ptype")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "winreg")
(NEWLINE)
(ID "GetVersionEx")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "getwindowsversion")
(NEWLINE)
(ID "RegQueryValueEx")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "QueryValueEx")
(NEWLINE)
(ID "RegOpenKeyEx")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "OpenKeyEx")
(NEWLINE)
(ID "RegCloseKey")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "CloseKey")
(NEWLINE)
(ID "HKEY_LOCAL_MACHINE")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_LOCAL_MACHINE")
(NEWLINE)
(ID "VER_PLATFORM_WIN32_WINDOWS")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "VER_PLATFORM_WIN32_NT")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "VER_NT_WORKSTATION")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "VER_NT_SERVER")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "REG_SZ")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "winver")
(PUNCT "=")
(ID "GetVersionEx")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "maj")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "buildno")
(PUNCT ",")
(ID "plat")
(PUNCT ",")
(ID "csd")
(PUNCT "=")
(ID "winver")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT "%i.%i.%i")
(PUNCT "%")
(PUNCT "(")
(ID "maj")
(PUNCT ",")
(ID "min")
(PUNCT ",")
(ID "buildno")
(PUNCT "&")
(LIT 65535)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "winver")
(PUNCT ",")
(LIT "service_pack")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "winver")
(PUNCT ".")
(ID "service_pack")
(PUNCT "!=")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "csd")
(PUNCT "=")
(LIT "SP%s")
(PUNCT "%")
(ID "winver")
(PUNCT ".")
(ID "service_pack_major")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "csd")
(PUNCT "[")
(PUNCT ":")
(LIT 13)
(PUNCT "]")
(PUNCT "==")
(LIT "Service Pack ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "csd")
(PUNCT "=")
(LIT "SP")
(PUNCT "+")
(ID "csd")
(PUNCT "[")
(LIT 13)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "plat")
(PUNCT "==")
(ID "VER_PLATFORM_WIN32_WINDOWS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "regkey")
(PUNCT "=")
(LIT "SOFTWARE\\Microsoft\\Windows\\CurrentVersion")
(NEWLINE)
(KEYWORD if)
(ID "maj")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "min")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "95")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "min")
(PUNCT "==")
(LIT 10)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "98")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "min")
(PUNCT "==")
(LIT 90)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "Me")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "postMe")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "maj")
(PUNCT "==")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "2000")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "plat")
(PUNCT "==")
(ID "VER_PLATFORM_WIN32_NT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "regkey")
(PUNCT "=")
(LIT "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion")
(NEWLINE)
(KEYWORD if)
(ID "maj")
(PUNCT "<=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "NT")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "maj")
(PUNCT "==")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "min")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "2000")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "min")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "XP")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "min")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "2003Server")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "post2003")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "maj")
(PUNCT "==")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "winver")
(PUNCT ",")
(LIT "product_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "product_type")
(PUNCT "=")
(ID "winver")
(PUNCT ".")
(ID "product_type")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "product_type")
(PUNCT "=")
(ID "VER_NT_WORKSTATION")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "HKEY_LOCAL_MACHINE")
(PUNCT ",")
(ID "regkey")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "RegQueryValueEx")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(LIT "ProductName")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(ID "REG_SZ")
(KEYWORD and)
(ID "name")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "Server")
(PUNCT ")")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "product_type")
(PUNCT "=")
(ID "VER_NT_SERVER")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "min")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "product_type")
(PUNCT "==")
(ID "VER_NT_WORKSTATION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "Vista")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "2008Server")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "min")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "product_type")
(PUNCT "==")
(ID "VER_NT_WORKSTATION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "7")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "2008ServerR2")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "min")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "product_type")
(PUNCT "==")
(ID "VER_NT_WORKSTATION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "8")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "2012Server")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "post2012Server")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "release")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "%i.%i")
(PUNCT "%")
(PUNCT "(")
(ID "maj")
(PUNCT ",")
(ID "min")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "csd")
(PUNCT ",")
(ID "ptype")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keyCurVer")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "HKEY_LOCAL_MACHINE")
(PUNCT ",")
(ID "regkey")
(PUNCT ")")
(NEWLINE)
(ID "RegQueryValueEx")
(PUNCT "(")
(ID "keyCurVer")
(PUNCT ",")
(LIT "SystemRoot")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "csd")
(PUNCT ",")
(ID "ptype")
(NEWLINE)
(DEDENT)
(ID "build")
(PUNCT "=")
(ID "_win32_getvalue")
(PUNCT "(")
(ID "keyCurVer")
(PUNCT ",")
(LIT "CurrentBuildNumber")
(PUNCT ",")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "ptype")
(PUNCT "=")
(ID "_win32_getvalue")
(PUNCT "(")
(ID "keyCurVer")
(PUNCT ",")
(LIT "CurrentType")
(PUNCT ",")
(PUNCT "(")
(ID "ptype")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "version")
(PUNCT "=")
(ID "_norm_version")
(PUNCT "(")
(ID "version")
(PUNCT ",")
(ID "build")
(PUNCT ")")
(NEWLINE)
(ID "RegCloseKey")
(PUNCT "(")
(ID "keyCurVer")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "csd")
(PUNCT ",")
(ID "ptype")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mac_ver_xml")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(LIT "/System/Library/CoreServices/SystemVersion.plist")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "plistlib")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "fn")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pl")
(PUNCT "=")
(ID "plistlib")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "release")
(PUNCT "=")
(ID "pl")
(PUNCT "[")
(LIT "ProductVersion")
(PUNCT "]")
(NEWLINE)
(ID "versioninfo")
(PUNCT "=")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "machine")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "machine")
(NEWLINE)
(KEYWORD if)
(ID "machine")
(KEYWORD in)
(PUNCT "(")
(LIT "ppc")
(PUNCT ",")
(LIT "Power Macintosh")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "PowerPC")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "versioninfo")
(PUNCT ",")
(ID "machine")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mac_ver")
(PUNCT "(")
(ID "release")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "versioninfo")
(PUNCT "=")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "machine")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Get MacOS version information and return it as tuple (release,\n        versioninfo, machine) with versioninfo being a tuple (version,\n        dev_stage, non_release_version).\n\n        Entries which cannot be determined are set to the parameter values\n        which default to ''. All tuple entries are strings.\n    ")
(NEWLINE)
(ID "info")
(PUNCT "=")
(ID "_mac_ver_xml")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "info")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "info")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "versioninfo")
(PUNCT ",")
(ID "machine")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_java_getprop")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "java")
(PUNCT ".")
(ID "lang")
(KEYWORD import)
(ID "System")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "System")
(PUNCT ".")
(ID "getProperty")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "java_ver")
(PUNCT "(")
(ID "release")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "vendor")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "vminfo")
(PUNCT "=")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "osinfo")
(PUNCT "=")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Version interface for Jython.\n\n        Returns a tuple (release, vendor, vminfo, osinfo) with vminfo being\n        a tuple (vm_name, vm_release, vm_vendor) and osinfo being a\n        tuple (os_name, os_version, os_arch).\n\n        Values which cannot be determined are set to the defaults\n        given as parameters (which all default to '').\n\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "java")
(PUNCT ".")
(ID "lang")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "vendor")
(PUNCT ",")
(ID "vminfo")
(PUNCT ",")
(ID "osinfo")
(NEWLINE)
(DEDENT)
(ID "vendor")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.vendor")
(PUNCT ",")
(ID "vendor")
(PUNCT ")")
(NEWLINE)
(ID "release")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.version")
(PUNCT ",")
(ID "release")
(PUNCT ")")
(NEWLINE)
(ID "vm_name")
(PUNCT ",")
(ID "vm_release")
(PUNCT ",")
(ID "vm_vendor")
(PUNCT "=")
(ID "vminfo")
(NEWLINE)
(ID "vm_name")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.vm.name")
(PUNCT ",")
(ID "vm_name")
(PUNCT ")")
(NEWLINE)
(ID "vm_vendor")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.vm.vendor")
(PUNCT ",")
(ID "vm_vendor")
(PUNCT ")")
(NEWLINE)
(ID "vm_release")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.vm.version")
(PUNCT ",")
(ID "vm_release")
(PUNCT ")")
(NEWLINE)
(ID "vminfo")
(PUNCT "=")
(ID "vm_name")
(PUNCT ",")
(ID "vm_release")
(PUNCT ",")
(ID "vm_vendor")
(NEWLINE)
(ID "os_name")
(PUNCT ",")
(ID "os_version")
(PUNCT ",")
(ID "os_arch")
(PUNCT "=")
(ID "osinfo")
(NEWLINE)
(ID "os_arch")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.os.arch")
(PUNCT ",")
(ID "os_arch")
(PUNCT ")")
(NEWLINE)
(ID "os_name")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.os.name")
(PUNCT ",")
(ID "os_name")
(PUNCT ")")
(NEWLINE)
(ID "os_version")
(PUNCT "=")
(ID "_java_getprop")
(PUNCT "(")
(LIT "java.os.version")
(PUNCT ",")
(ID "os_version")
(PUNCT ")")
(NEWLINE)
(ID "osinfo")
(PUNCT "=")
(ID "os_name")
(PUNCT ",")
(ID "os_version")
(PUNCT ",")
(ID "os_arch")
(NEWLINE)
(KEYWORD return)
(ID "release")
(PUNCT ",")
(ID "vendor")
(PUNCT ",")
(ID "vminfo")
(PUNCT ",")
(ID "osinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "system_alias")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns (system, release, version) aliased to common\n        marketing names used for some systems.\n\n        It also does some reordering of the information in some cases\n        where it would otherwise cause confusion.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "Rhapsody")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "MacOS X Server")
(PUNCT ",")
(ID "system")
(PUNCT "+")
(ID "release")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "system")
(PUNCT "==")
(LIT "SunOS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "release")
(PUNCT "<")
(LIT "5")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(ID "l")
(PUNCT "=")
(ID "release")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "major")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "l")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "major")
(PUNCT "=")
(ID "major")
(PUNCT "-")
(LIT 3)
(NEWLINE)
(ID "l")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "major")
(PUNCT ")")
(NEWLINE)
(ID "release")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "release")
(PUNCT "<")
(LIT "6")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "Solaris")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "Solaris")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "system")
(PUNCT "==")
(LIT "IRIX64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "IRIX")
(NEWLINE)
(KEYWORD if)
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "version")
(PUNCT "+")
(LIT " (64bit)")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "64bit")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "system")
(KEYWORD in)
(PUNCT "(")
(LIT "win32")
(PUNCT ",")
(LIT "win16")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "Windows")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_platform")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Helper to format the platform string in a filename\n        compatible format e.g. \"system-version-machine\".\n    ")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(LIT "-")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "filter")
(PUNCT "(")
(ID "len")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ";")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "(")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ")")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "unknown")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cleaned")
(PUNCT "=")
(ID "platform")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "--")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cleaned")
(PUNCT "==")
(ID "platform")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "platform")
(PUNCT "=")
(ID "cleaned")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "platform")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "platform")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_node")
(PUNCT "(")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Helper to determine the node name of this machine.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "gethostname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_follow_symlinks")
(PUNCT "(")
(ID "filepath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " In case filepath is a symlink, follow it until a\n        real file is reached.\n    ")
(NEWLINE)
(ID "filepath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "filepath")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "filepath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filepath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "filepath")
(PUNCT ")")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "readlink")
(PUNCT "(")
(ID "filepath")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "filepath")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_syscmd_uname")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Interface to the system's uname command.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(KEYWORD in)
(PUNCT "(")
(LIT "dos")
(PUNCT ",")
(LIT "win32")
(PUNCT ",")
(LIT "win16")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "popen")
(PUNCT "(")
(LIT "uname %s 2> %s")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "DEV_NULL")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(ID "output")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "rc")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "output")
(KEYWORD or)
(ID "rc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "output")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_syscmd_file")
(PUNCT "(")
(ID "target")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Interface to the system's file command.\n\n        The function uses the -b option of the file command to have it\n        omit the filename in its output. Follow the symlinks. It returns\n        default in case the command should fail.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(KEYWORD in)
(PUNCT "(")
(LIT "dos")
(PUNCT ",")
(LIT "win32")
(PUNCT ",")
(LIT "win16")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(ID "target")
(PUNCT "=")
(ID "_follow_symlinks")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proc")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "Popen")
(PUNCT "(")
(PUNCT "[")
(LIT "file")
(PUNCT ",")
(ID "target")
(PUNCT "]")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "STDOUT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(ID "output")
(PUNCT "=")
(ID "proc")
(PUNCT ".")
(ID "communicate")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(ID "rc")
(PUNCT "=")
(ID "proc")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "output")
(KEYWORD or)
(ID "rc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "output")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_default_architecture")
(PUNCT "=")
(PUNCT "{")
(LIT "win32")
(PUNCT ":")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "WindowsPE")
(PUNCT ")")
(PUNCT ",")
(LIT "win16")
(PUNCT ":")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "Windows")
(PUNCT ")")
(PUNCT ",")
(LIT "dos")
(PUNCT ":")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "MSDOS")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "architecture")
(PUNCT "(")
(ID "executable")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ",")
(ID "bits")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "linkage")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Queries the given executable (defaults to the Python interpreter\n        binary) for various architecture information.\n\n        Returns a tuple (bits, linkage) which contains information about\n        the bit architecture and the linkage format used for the\n        executable. Both values are returned as strings.\n\n        Values that cannot be determined are returned as given by the\n        parameter presets. If bits is given as '', the sizeof(pointer)\n        (or sizeof(long) on Python version < 1.5.2) is used as\n        indicator for the supported pointer size.\n\n        The function relies on the system's \"file\" command to do the\n        actual work. This is available on most if not all Unix\n        platforms. On some non-Unix platforms where the \"file\" command\n        does not exist and the executable is set to the Python interpreter\n        binary defaults from _default_architecture are used.\n\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "bits")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(LIT "P")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "struct")
(PUNCT ".")
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "calcsize")
(PUNCT "(")
(LIT "l")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bits")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "size")
(PUNCT "*")
(LIT 8)
(PUNCT ")")
(PUNCT "+")
(LIT "bit")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "executable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileout")
(PUNCT "=")
(ID "_syscmd_file")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileout")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "fileout")
(KEYWORD and)
(ID "executable")
(PUNCT "==")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(KEYWORD in)
(ID "_default_architecture")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "b")
(PUNCT ",")
(ID "l")
(PUNCT "=")
(ID "_default_architecture")
(PUNCT "[")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bits")
(PUNCT "=")
(ID "b")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkage")
(PUNCT "=")
(ID "l")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "bits")
(PUNCT ",")
(ID "linkage")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "executable")
(KEYWORD not)
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bits")
(PUNCT ",")
(ID "linkage")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "32-bit")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bits")
(PUNCT "=")
(LIT "32bit")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "N32")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bits")
(PUNCT "=")
(LIT "n32bit")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "64-bit")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bits")
(PUNCT "=")
(LIT "64bit")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "ELF")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkage")
(PUNCT "=")
(LIT "ELF")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "PE")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "Windows")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkage")
(PUNCT "=")
(LIT "WindowsPE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkage")
(PUNCT "=")
(LIT "PE")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(LIT "COFF")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkage")
(PUNCT "=")
(LIT "COFF")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "MS-DOS")
(KEYWORD in)
(ID "fileout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkage")
(PUNCT "=")
(LIT "MSDOS")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "bits")
(PUNCT ",")
(ID "linkage")
(NEWLINE)
(DEDENT)
(ID "uname_result")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "namedtuple")
(PUNCT "(")
(LIT "uname_result")
(PUNCT ",")
(LIT "system node release version machine processor")
(PUNCT ")")
(NEWLINE)
(ID "_uname_cache")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Fairly portable uname interface. Returns a tuple\n        of strings (system, node, release, version, machine, processor)\n        identifying the underlying platform.\n\n        Note that unlike the os.uname function this also returns\n        possible processor information as an additional tuple entry.\n\n        Entries which cannot be determined are set to ''.\n\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_uname_cache")
(NEWLINE)
(ID "no_os_uname")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "_uname_cache")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_uname_cache")
(NEWLINE)
(DEDENT)
(ID "processor")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "machine")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "no_os_uname")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "no_os_uname")
(KEYWORD or)
(KEYWORD not)
(ID "list")
(PUNCT "(")
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "no_os_uname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "platform")
(NEWLINE)
(ID "release")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "node")
(PUNCT "=")
(ID "_node")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "machine")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "use_syscmd_ver")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "csd")
(PUNCT ",")
(ID "ptype")
(PUNCT "=")
(ID "win32_ver")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "release")
(KEYWORD and)
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "use_syscmd_ver")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "machine")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "PROCESSOR_ARCHITEW6432")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PROCESSOR_ARCHITEW6432")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PROCESSOR_ARCHITECTURE")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "processor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "processor")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PROCESSOR_IDENTIFIER")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "use_syscmd_ver")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(ID "_syscmd_ver")
(PUNCT "(")
(ID "system")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "Microsoft Windows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "Windows")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "system")
(PUNCT "==")
(LIT "Microsoft")
(KEYWORD and)
(ID "release")
(PUNCT "==")
(LIT "Windows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "Windows")
(NEWLINE)
(KEYWORD if)
(LIT "6.0")
(PUNCT "==")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "Vista")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "system")
(KEYWORD in)
(PUNCT "(")
(LIT "win32")
(PUNCT ",")
(LIT "win16")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "32bit")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "16bit")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "system")
(PUNCT "=")
(LIT "Windows")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "system")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "java")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT ",")
(ID "vendor")
(PUNCT ",")
(ID "vminfo")
(PUNCT ",")
(ID "osinfo")
(PUNCT "=")
(ID "java_ver")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "system")
(PUNCT "=")
(LIT "Java")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "vminfo")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(ID "vendor")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "OpenVMS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "release")
(KEYWORD or)
(ID "release")
(PUNCT "==")
(LIT "0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(ID "version")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "vms_lib")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "csid")
(PUNCT ",")
(ID "cpu_number")
(PUNCT "=")
(ID "vms_lib")
(PUNCT ".")
(ID "getsyi")
(PUNCT "(")
(LIT "SYI$_CPU")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "cpu_number")
(PUNCT ">=")
(LIT 128)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "processor")
(PUNCT "=")
(LIT "Alpha")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "processor")
(PUNCT "=")
(LIT "VAX")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "processor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "processor")
(PUNCT "=")
(ID "_syscmd_uname")
(PUNCT "(")
(LIT "-p")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "unknown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "node")
(PUNCT "==")
(LIT "unknown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "release")
(PUNCT "==")
(LIT "unknown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "version")
(PUNCT "==")
(LIT "unknown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "machine")
(PUNCT "==")
(LIT "unknown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "processor")
(PUNCT "==")
(LIT "unknown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "processor")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "Microsoft")
(KEYWORD and)
(ID "release")
(PUNCT "==")
(LIT "Windows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT "=")
(LIT "Windows")
(NEWLINE)
(ID "release")
(PUNCT "=")
(LIT "Vista")
(NEWLINE)
(DEDENT)
(ID "_uname_cache")
(PUNCT "=")
(ID "uname_result")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "machine")
(PUNCT ",")
(ID "processor")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_uname_cache")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "system")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\n        An empty string is returned if the value cannot be determined.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "system")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "node")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the computer's network name (which may not be fully\n        qualified)\n\n        An empty string is returned if the value cannot be determined.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "node")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "release")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the system's release, e.g. '2.2.0' or 'NT'\n\n        An empty string is returned if the value cannot be determined.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "release")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the system's release version, e.g. '#3 on degas'\n\n        An empty string is returned if the value cannot be determined.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "version")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "machine")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the machine type, e.g. 'i386'\n\n        An empty string is returned if the value cannot be determined.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "machine")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "processor")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the (true) processor name, e.g. 'amdk6'\n\n        An empty string is returned if the value cannot be\n        determined. Note that many platforms do not provide this\n        information or simply return the same value as for machine(),\n        e.g.  NetBSD does this.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "processor")
(NEWLINE)
(DEDENT)
(ID "_sys_version_parser")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\w.+]+)\\s*")
(LIT "\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*")
(LIT "\\[([^\\]]+)\\]?")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "_ironpython_sys_version_parser")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "IronPython\\s*")
(LIT "([\\d\\.]+)")
(LIT "(?: \\(([\\d\\.]+)\\))?")
(LIT " on (.NET [\\d\\.]+)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "_ironpython26_sys_version_parser")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\d.]+)\\s*")
(LIT "\\(IronPython\\s*")
(LIT "[\\d.]+\\s*")
(LIT "\\(([\\d.]+)\\) on ([\\w.]+ [\\d.]+(?: \\(\\d+-bit\\))?)\\)")
(PUNCT ")")
(NEWLINE)
(ID "_pypy_sys_version_parser")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\w.+]+)\\s*")
(LIT "\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*")
(LIT "\\[PyPy [^\\]]+\\]?")
(PUNCT ")")
(NEWLINE)
(ID "_sys_version_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_sys_version")
(PUNCT "(")
(ID "sys_version")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a parsed version of Python's sys.version as tuple\n        (name, version, branch, revision, buildno, builddate, compiler)\n        referring to the Python implementation name, version, branch,\n        revision, build number, build date/time as string and the compiler\n        identification string.\n\n        Note that unlike the Python sys.version, the returned value\n        for the Python version will always include the patchlevel (it\n        defaults to '.0').\n\n        The function returns empty strings for tuple entries that\n        cannot be determined.\n\n        sys_version may be given to parse an alternative version\n        string, e.g. if the version was read from a different Python\n        interpreter.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "sys_version")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys_version")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "_sys_version_cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "sys_version")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "IronPython")
(KEYWORD in)
(ID "sys_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "IronPython")
(NEWLINE)
(KEYWORD if)
(ID "sys_version")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "IronPython")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "_ironpython_sys_version_parser")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "_ironpython26_sys_version_parser")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "match")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "failed to parse IronPython sys.version: %s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "version")
(PUNCT ",")
(ID "alt_version")
(PUNCT ",")
(ID "compiler")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "buildno")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "builddate")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "java")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "Jython")
(NEWLINE)
(ID "match")
(PUNCT "=")
(ID "_sys_version_parser")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "failed to parse Jython sys.version: %s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "version")
(PUNCT ",")
(ID "buildno")
(PUNCT ",")
(ID "builddate")
(PUNCT ",")
(ID "buildtime")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "compiler")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "platform")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "PyPy")
(KEYWORD in)
(ID "sys_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "PyPy")
(NEWLINE)
(ID "match")
(PUNCT "=")
(ID "_pypy_sys_version_parser")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "failed to parse PyPy sys.version: %s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "version")
(PUNCT ",")
(ID "buildno")
(PUNCT ",")
(ID "builddate")
(PUNCT ",")
(ID "buildtime")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "compiler")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "_sys_version_parser")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "failed to parse CPython sys.version: %s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "sys_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "version")
(PUNCT ",")
(ID "buildno")
(PUNCT ",")
(ID "builddate")
(PUNCT ",")
(ID "buildtime")
(PUNCT ",")
(ID "compiler")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "CPython")
(NEWLINE)
(ID "builddate")
(PUNCT "=")
(ID "builddate")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "buildtime")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "_mercurial")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_")
(PUNCT ",")
(ID "branch")
(PUNCT ",")
(ID "revision")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "_mercurial")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "subversion")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_")
(PUNCT ",")
(ID "branch")
(PUNCT ",")
(ID "revision")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "subversion")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "branch")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "revision")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "l")
(PUNCT "=")
(ID "version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "branch")
(PUNCT ",")
(ID "revision")
(PUNCT ",")
(ID "buildno")
(PUNCT ",")
(ID "builddate")
(PUNCT ",")
(ID "compiler")
(PUNCT ")")
(NEWLINE)
(ID "_sys_version_cache")
(PUNCT "[")
(ID "sys_version")
(PUNCT "]")
(PUNCT "=")
(ID "result")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_implementation")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a string identifying the Python implementation.\n\n        Currently, the following implementations are identified:\n          'CPython' (C implementation of Python),\n          'IronPython' (.NET implementation of Python),\n          'Jython' (Java implementation of Python),\n          'PyPy' (Python implementation of Python).\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the Python version as string 'major.minor.patchlevel'\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_version_tuple")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns the Python version as tuple (major, minor, patchlevel)\n        of strings.\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_branch")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a string identifying the Python implementation\n        branch.\n\n        For CPython this is the Subversion branch from which the\n        Python binary was built.\n\n        If not available, an empty string is returned.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_revision")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a string identifying the Python implementation\n        revision.\n\n        For CPython this is the Subversion revision from which the\n        Python binary was built.\n\n        If not available, an empty string is returned.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_build")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a tuple (buildno, builddate) stating the Python\n        build number and date as strings.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "python_compiler")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a string identifying the compiler used for compiling\n        Python.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_sys_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_platform_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "platform")
(PUNCT "(")
(ID "aliased")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "terse")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Returns a single string identifying the underlying platform\n        with as much useful information as possible (but no more :).\n\n        The output is intended to be human readable rather than\n        machine parseable. It may look different on different\n        platforms and this is intended.\n\n        If \"aliased\" is true, the function will use aliases for\n        various platforms that report system names which differ from\n        their common names, e.g. SunOS will be reported as\n        Solaris. The system_alias() function is used to implement\n        this.\n\n        Setting terse to true causes the function to return only the\n        absolute minimum information needed to identify the platform.\n\n    ")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "_platform_cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(PUNCT "(")
(ID "aliased")
(PUNCT ",")
(ID "terse")
(PUNCT ")")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "system")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "machine")
(PUNCT ",")
(ID "processor")
(PUNCT "=")
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "machine")
(PUNCT "==")
(ID "processor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "processor")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "aliased")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(ID "system_alias")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "system")
(PUNCT "==")
(LIT "Windows")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rel")
(PUNCT ",")
(ID "vers")
(PUNCT ",")
(ID "csd")
(PUNCT ",")
(ID "ptype")
(PUNCT "=")
(ID "win32_ver")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "terse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(ID "csd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "system")
(KEYWORD in)
(PUNCT "(")
(LIT "Linux")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "distname")
(PUNCT ",")
(ID "distversion")
(PUNCT ",")
(ID "distid")
(PUNCT "=")
(ID "dist")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "distname")
(KEYWORD and)
(KEYWORD not)
(ID "terse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ",")
(ID "processor")
(PUNCT ",")
(LIT "with")
(PUNCT ",")
(ID "distname")
(PUNCT ",")
(ID "distversion")
(PUNCT ",")
(ID "distid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "libcname")
(PUNCT ",")
(ID "libcversion")
(PUNCT "=")
(ID "libc_ver")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ",")
(ID "processor")
(PUNCT ",")
(LIT "with")
(PUNCT ",")
(ID "libcname")
(PUNCT "+")
(ID "libcversion")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "system")
(PUNCT "==")
(LIT "Java")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT ",")
(ID "v")
(PUNCT ",")
(ID "vminfo")
(PUNCT ",")
(PUNCT "(")
(ID "os_name")
(PUNCT ",")
(ID "os_version")
(PUNCT ",")
(ID "os_arch")
(PUNCT ")")
(PUNCT "=")
(ID "java_ver")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "terse")
(KEYWORD or)
(KEYWORD not)
(ID "os_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "version")
(PUNCT ",")
(LIT "on")
(PUNCT ",")
(ID "os_name")
(PUNCT ",")
(ID "os_version")
(PUNCT ",")
(ID "os_arch")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "system")
(PUNCT "==")
(LIT "MacOS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "terse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "terse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bits")
(PUNCT ",")
(ID "linkage")
(PUNCT "=")
(ID "architecture")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(ID "platform")
(PUNCT "=")
(ID "_platform")
(PUNCT "(")
(ID "system")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ",")
(ID "processor")
(PUNCT ",")
(ID "bits")
(PUNCT ",")
(ID "linkage")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_platform_cache")
(PUNCT "[")
(PUNCT "(")
(ID "aliased")
(PUNCT ",")
(ID "terse")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "platform")
(NEWLINE)
(KEYWORD return)
(ID "platform")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "terse")
(PUNCT "=")
(PUNCT "(")
(LIT "terse")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(KEYWORD or)
(LIT "--terse")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(NEWLINE)
(ID "aliased")
(PUNCT "=")
(PUNCT "(")
(KEYWORD not)
(LIT "nonaliased")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(KEYWORD and)
(KEYWORD not)
(LIT "--nonaliased")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "platform")
(PUNCT "(")
(ID "aliased")
(PUNCT ",")
(ID "terse")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
