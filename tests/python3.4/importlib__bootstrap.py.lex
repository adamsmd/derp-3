(LIT "Core implementation of import.\n\nThis module is NOT meant to be directly imported! It has been designed such\nthat it can be bootstrapped into Python as the implementation of import. As\nsuch it requires the injection of specific modules and attributes in order to\nwork. One should use importlib as the public-facing version of this module.\n\n")
(NEWLINE)
(ID "_CASE_INSENSITIVE_PLATFORMS")
(PUNCT "=")
(LIT "win")
(PUNCT ",")
(LIT "cygwin")
(PUNCT ",")
(LIT "darwin")
(NEWLINE)
(KEYWORD def)
(ID "_make_relax_case")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "_CASE_INSENSITIVE_PLATFORMS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_relax_case")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "True if filenames must be checked case-insensitively.")
(NEWLINE)
(KEYWORD return)
(LIT #"PYTHONCASEOK")
(KEYWORD in)
(ID "_os")
(PUNCT ".")
(ID "environ")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_relax_case")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "True if filenames must be checked case-insensitively.")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_relax_case")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_w_long")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a 32-bit integer to little-endian.")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "&")
(LIT 4294967295)
(PUNCT ")")
(PUNCT ".")
(ID "to_bytes")
(PUNCT "(")
(LIT 4)
(PUNCT ",")
(LIT "little")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_r_long")
(PUNCT "(")
(ID "int_bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert 4 bytes in little-endian to an integer.")
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "int_bytes")
(PUNCT ",")
(LIT "little")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_path_join")
(PUNCT "(")
(PUNCT "*")
(ID "path_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replacement for os.path.join().")
(NEWLINE)
(KEYWORD return)
(ID "path_sep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "part")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(ID "path_separators")
(PUNCT ")")
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "path_parts")
(KEYWORD if)
(ID "part")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_path_split")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replacement for os.path.split().")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "path_separators")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "front")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(ID "path_sep")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "front")
(PUNCT ",")
(ID "tail")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(KEYWORD in)
(ID "path_separators")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "front")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "rsplit")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "maxsplit")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "front")
(PUNCT ",")
(ID "tail")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ",")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_path_stat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stat the path.\n\n    Made a separate function to make it easier to override in experiments\n    (e.g. cache stat results).\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "_os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_path_is_mode_type")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test whether the path is the specified mode type.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stat_info")
(PUNCT "=")
(ID "_path_stat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "stat_info")
(PUNCT ".")
(ID "st_mode")
(PUNCT "&")
(LIT 61440)
(PUNCT ")")
(PUNCT "==")
(ID "mode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_path_isfile")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replacement for os.path.isfile.")
(NEWLINE)
(KEYWORD return)
(ID "_path_is_mode_type")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT 32768)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_path_isdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replacement for os.path.isdir.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_path_is_mode_type")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT 16384)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_atomic")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 438)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Best-effort function to write data to a path atomically.\n    Be prepared to handle a FileExistsError if concurrent writing of the\n    temporary file is attempted.")
(NEWLINE)
(ID "path_tmp")
(PUNCT "=")
(LIT "{}.{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fd")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "path_tmp")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "O_EXCL")
(PUNCT "|")
(ID "_os")
(PUNCT ".")
(ID "O_CREAT")
(PUNCT "|")
(ID "_os")
(PUNCT ".")
(ID "O_WRONLY")
(PUNCT ",")
(ID "mode")
(PUNCT "&")
(LIT 438)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "_io")
(PUNCT ".")
(ID "FileIO")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(KEYWORD as)
(ID "file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_os")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "path_tmp")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "path_tmp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_wrap")
(PUNCT "(")
(ID "new")
(PUNCT ",")
(ID "old")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Simple substitute for functools.update_wrapper.")
(NEWLINE)
(KEYWORD for)
(ID "replace")
(KEYWORD in)
(PUNCT "[")
(LIT "__module__")
(PUNCT ",")
(LIT "__name__")
(PUNCT ",")
(LIT "__qualname__")
(PUNCT ",")
(LIT "__doc__")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "old")
(PUNCT ",")
(ID "replace")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "new")
(PUNCT ",")
(ID "replace")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "old")
(PUNCT ",")
(ID "replace")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "new")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "old")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_new_module")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "sys")
(PUNCT ")")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_code_type")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "_wrap")
(PUNCT ".")
(ID "__code__")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_ManageReload")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Manages the possible clean-up of sys.modules for load_module().")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_is_reload")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_name")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "arg")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_is_reload")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_module_locks")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_blocking_on")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "_DeadlockError")
(PUNCT "(")
(ID "RuntimeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_ModuleLock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "lock")
(PUNCT "=")
(ID "_thread")
(PUNCT ".")
(ID "allocate_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wakeup")
(PUNCT "=")
(ID "_thread")
(PUNCT ".")
(ID "allocate_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "waiters")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_deadlock")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "me")
(PUNCT "=")
(ID "_thread")
(PUNCT ".")
(ID "get_ident")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "owner")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lock")
(PUNCT "=")
(ID "_blocking_on")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "tid")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "tid")
(PUNCT "=")
(ID "lock")
(PUNCT ".")
(ID "owner")
(NEWLINE)
(KEYWORD if)
(ID "tid")
(PUNCT "==")
(ID "me")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "acquire")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Acquire the module lock.  If a potential deadlock is detected,\n        a _DeadlockError is raised.\n        Otherwise, the lock is always acquired and True is returned.\n        ")
(NEWLINE)
(ID "tid")
(PUNCT "=")
(ID "_thread")
(PUNCT ".")
(ID "get_ident")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_blocking_on")
(PUNCT "[")
(ID "tid")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "==")
(LIT 0)
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT "==")
(ID "tid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT "=")
(ID "tid")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_deadlock")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_DeadlockError")
(PUNCT "(")
(LIT "deadlock detected by %r")
(PUNCT "%")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "wakeup")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "waiters")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "wakeup")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wakeup")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_blocking_on")
(PUNCT "[")
(ID "tid")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "release")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tid")
(PUNCT "=")
(ID "_thread")
(PUNCT ".")
(ID "get_ident")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT "!=")
(ID "tid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "cannot release un-acquired lock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "owner")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "waiters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "waiters")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "wakeup")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "_ModuleLock({!r}) at {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_DummyModuleLock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A simple _ModuleLock equivalent for Python builds without\n    multi-threading support.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "acquire")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "release")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "cannot release un-acquired lock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "count")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "_DummyModuleLock({!r}) at {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ModuleLockManager")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT "=")
(ID "_get_module_lock")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_imp")
(PUNCT ".")
(ID "release_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_module_lock")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get or create the module lock for a given module name.\n\n    Should only be called with the import lock taken.")
(NEWLINE)
(ID "lock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lock")
(PUNCT "=")
(ID "_module_locks")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "lock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_thread")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lock")
(PUNCT "=")
(ID "_DummyModuleLock")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lock")
(PUNCT "=")
(ID "_ModuleLock")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cb")
(PUNCT "(")
(ID "_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_module_locks")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "_module_locks")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "_weakref")
(PUNCT ".")
(ID "ref")
(PUNCT "(")
(ID "lock")
(PUNCT ",")
(ID "cb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "lock")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_lock_unlock_module")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Release the global import lock, and acquires then release the\n    module lock for a given module name.\n    This is used to ensure a module is completely initialized, in the\n    event it is being imported by another thread.\n\n    Should only be called with the import lock taken.")
(NEWLINE)
(ID "lock")
(PUNCT "=")
(ID "_get_module_lock")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "_imp")
(PUNCT ".")
(ID "release_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "_DeadlockError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "remove_importlib_frames in import.c will always remove sequences\n    of importlib frames that end with a call to this function\n\n    Use it instead of a normal call in places where including the importlib\n    frames introduces unwanted noise into the traceback (e.g. when executing\n    module code)\n    ")
(NEWLINE)
(KEYWORD return)
(ID "f")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "MAGIC_NUMBER")
(PUNCT "=")
(PUNCT "(")
(LIT 3310)
(PUNCT ")")
(PUNCT ".")
(ID "to_bytes")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "little")
(PUNCT ")")
(PUNCT "+")
(LIT #"\r\n")
(NEWLINE)
(ID "_RAW_MAGIC_NUMBER")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "MAGIC_NUMBER")
(PUNCT ",")
(LIT "little")
(PUNCT ")")
(NEWLINE)
(ID "_PYCACHE")
(PUNCT "=")
(LIT "__pycache__")
(NEWLINE)
(ID "SOURCE_SUFFIXES")
(PUNCT "=")
(PUNCT "[")
(LIT ".py")
(PUNCT "]")
(NEWLINE)
(ID "DEBUG_BYTECODE_SUFFIXES")
(PUNCT "=")
(PUNCT "[")
(LIT ".pyc")
(PUNCT "]")
(NEWLINE)
(ID "OPTIMIZED_BYTECODE_SUFFIXES")
(PUNCT "=")
(PUNCT "[")
(LIT ".pyo")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "cache_from_source")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "debug_override")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Given the path to a .py file, return the path to its .pyc/.pyo file.\n\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc/.pyo file calculated as if the .py file were imported.  The extension\n    will be .pyc unless sys.flags.optimize is non-zero, then it will be .pyo.\n\n    If debug_override is not None, then it must be a boolean and is used in\n    place of sys.flags.optimize.\n\n    If sys.implementation.cache_tag is None then NotImplementedError is raised.\n\n    ")
(NEWLINE)
(ID "debug")
(PUNCT "=")
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "optimize")
(KEYWORD if)
(ID "debug_override")
(KEYWORD is)
(KEYWORD None)
(KEYWORD else)
(ID "debug_override")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffixes")
(PUNCT "=")
(ID "DEBUG_BYTECODE_SUFFIXES")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffixes")
(PUNCT "=")
(ID "OPTIMIZED_BYTECODE_SUFFIXES")
(NEWLINE)
(DEDENT)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "tail")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "tag")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ".")
(ID "cache_tag")
(NEWLINE)
(KEYWORD if)
(ID "tag")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "sys.implementation.cache_tag is None")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "base")
(KEYWORD if)
(ID "base")
(KEYWORD else)
(ID "rest")
(PUNCT ")")
(PUNCT ",")
(ID "sep")
(PUNCT ",")
(ID "tag")
(PUNCT ",")
(ID "suffixes")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_path_join")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "_PYCACHE")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "source_from_cache")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Given the path to a .pyc./.pyo file, return the path to its .py file.\n\n    The .pyc/.pyo file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc/.pyo file.  If path does\n    not conform to PEP 3147 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "implementation")
(PUNCT ".")
(ID "cache_tag")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "sys.implementation.cache_tag is None")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "head")
(PUNCT ",")
(ID "pycache_filename")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "head")
(PUNCT ",")
(ID "pycache")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pycache")
(PUNCT "!=")
(ID "_PYCACHE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "{} not bottom-level directory in ")
(LIT "{!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "_PYCACHE")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pycache_filename")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "expected only 2 dots in ")
(LIT "{!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "pycache_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "base_filename")
(PUNCT "=")
(ID "pycache_filename")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "_path_join")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "base_filename")
(PUNCT "+")
(ID "SOURCE_SUFFIXES")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_sourcefile")
(PUNCT "(")
(ID "bytecode_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a bytecode file path to a source path (if possible).\n\n    This function exists purely for backwards-compatibility for\n    PyImport_ExecCodeModuleWithFilenames() in the C API.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "bytecode_path")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "rest")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "extension")
(PUNCT "=")
(ID "bytecode_path")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "rest")
(KEYWORD or)
(ID "extension")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "py")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bytecode_path")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source_path")
(PUNCT "=")
(ID "source_from_cache")
(PUNCT "(")
(ID "bytecode_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "NotImplementedError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source_path")
(PUNCT "=")
(ID "bytecode_path")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "source_path")
(KEYWORD if)
(ID "_path_isfile")
(PUNCT "(")
(ID "source_path")
(PUNCT ")")
(KEYWORD else)
(ID "bytecode_path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_calc_mode")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate the mode permissions for a bytecode file.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "_path_stat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT 438)
(NEWLINE)
(DEDENT)
(ID "mode")
(PUNCT "|=")
(LIT 128)
(NEWLINE)
(KEYWORD return)
(ID "mode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_verbose_message")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print the message to stderr if -v/PYTHONVERBOSE is turned on.")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "verbose")
(PUNCT ">=")
(ID "verbosity")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "message")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(PUNCT "(")
(LIT "#")
(PUNCT ",")
(LIT "import ")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "# ")
(PUNCT "+")
(ID "message")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "message")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_name")
(PUNCT "(")
(ID "method")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decorator to verify that the module being requested matches the one the\n    loader can handle.\n\n    The first argument (self) must define _name which the second argument is\n    compared against. If the comparison fails then ImportError is raised.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "_check_name_wrapper")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "loader cannot handle %s")
(PUNCT "%")
(ID "name")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "method")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_wrap")
(PUNCT "(")
(ID "_check_name_wrapper")
(PUNCT ",")
(ID "method")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_check_name_wrapper")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_requires_builtin")
(PUNCT "(")
(ID "fxn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decorator to verify the named module is built-in.")
(NEWLINE)
(KEYWORD def)
(ID "_requires_builtin_wrapper")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fullname")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "builtin_module_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "{!r} is not a built-in module")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "fxn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_wrap")
(PUNCT "(")
(ID "_requires_builtin_wrapper")
(PUNCT ",")
(ID "fxn")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_requires_builtin_wrapper")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_requires_frozen")
(PUNCT "(")
(ID "fxn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decorator to verify the named module is frozen.")
(NEWLINE)
(KEYWORD def)
(ID "_requires_frozen_wrapper")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_imp")
(PUNCT ".")
(ID "is_frozen")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "{!r} is not a frozen module")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "fxn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_wrap")
(PUNCT "(")
(ID "_requires_frozen_wrapper")
(PUNCT ",")
(ID "fxn")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_requires_frozen_wrapper")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_module_shim")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to find a loader for the specified module by delegating to\n    self.find_loader().\n\n    This method is deprecated in favor of finder.find_spec().\n\n    ")
(NEWLINE)
(ID "loader")
(PUNCT ",")
(ID "portions")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "portions")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "Not importing directory {}: missing __init__")
(NEWLINE)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "portions")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "ImportWarning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_load_module_shim")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load the specified module into sys.modules and return it.\n\n    This method is deprecated.  Use loader.exec_module instead.\n\n    ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "spec_from_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "methods")
(PUNCT "=")
(ID "_SpecMethods")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fullname")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "fullname")
(PUNCT "]")
(NEWLINE)
(ID "methods")
(PUNCT ".")
(ID "exec")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "fullname")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "methods")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_validate_bytecode_header")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "source_stats")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Validate the header of the passed-in bytecode against source_stats (if\n    given) and returning the bytecode that can be compiled by compile().\n\n    All other arguments are used to enhance error reporting.\n\n    ImportError is raised when the magic number is incorrect or the bytecode is\n    found to be stale. EOFError is raised when the data is found to be\n    truncated.\n\n    ")
(NEWLINE)
(ID "exc_details")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_details")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "<bytecode>")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_details")
(PUNCT "[")
(LIT "path")
(PUNCT "]")
(PUNCT "=")
(ID "path")
(NEWLINE)
(DEDENT)
(ID "magic")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(NEWLINE)
(ID "raw_timestamp")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 8)
(PUNCT "]")
(NEWLINE)
(ID "raw_size")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT 8)
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "magic")
(PUNCT "!=")
(ID "MAGIC_NUMBER")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "bad magic number in {!r}: {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "magic")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(PUNCT "**")
(ID "exc_details")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "raw_timestamp")
(PUNCT ")")
(PUNCT "!=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "reached EOF while reading timestamp in {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "EOFError")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "raw_size")
(PUNCT ")")
(PUNCT "!=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "reached EOF while reading size of source in {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "EOFError")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "source_stats")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source_mtime")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "source_stats")
(PUNCT "[")
(LIT "mtime")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_r_long")
(PUNCT "(")
(ID "raw_timestamp")
(PUNCT ")")
(PUNCT "!=")
(ID "source_mtime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "bytecode is stale for {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(PUNCT "**")
(ID "exc_details")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source_size")
(PUNCT "=")
(ID "source_stats")
(PUNCT "[")
(LIT "size")
(PUNCT "]")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_r_long")
(PUNCT "(")
(ID "raw_size")
(PUNCT ")")
(PUNCT "!=")
(ID "source_size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "bytecode is stale for {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(PUNCT "**")
(ID "exc_details")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "data")
(PUNCT "[")
(LIT 12)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_compile_bytecode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bytecode_path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "source_path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile bytecode as returned by _validate_bytecode_header().")
(NEWLINE)
(ID "code")
(PUNCT "=")
(ID "marshal")
(PUNCT ".")
(ID "loads")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "_code_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "code object from {!r}")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "source_path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_imp")
(PUNCT ".")
(ID "_fix_co_filename")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "code")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "Non-code object in {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "bytecode_path")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "bytecode_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_code_to_bytecode")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "mtime")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "source_size")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile a code object into bytecode for writing out to a byte-compiled\n    file.")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(ID "MAGIC_NUMBER")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "_w_long")
(PUNCT "(")
(ID "mtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "_w_long")
(PUNCT "(")
(ID "source_size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "marshal")
(PUNCT ".")
(ID "dumps")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode_source")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decode bytes representing source code and return the string.\n\n    Universal newline support is used in the decoding.\n    ")
(NEWLINE)
(KEYWORD import)
(ID "tokenize")
(NEWLINE)
(ID "source_bytes_readline")
(PUNCT "=")
(ID "_io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ")")
(PUNCT ".")
(ID "readline")
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "detect_encoding")
(PUNCT "(")
(ID "source_bytes_readline")
(PUNCT ")")
(NEWLINE)
(ID "newline_decoder")
(PUNCT "=")
(ID "_io")
(PUNCT ".")
(ID "IncrementalNewlineDecoder")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "newline_decoder")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoding")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_module_repr")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__loader__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "loader")
(PUNCT ",")
(LIT "module_repr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "loader")
(PUNCT ".")
(ID "module_repr")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_SpecMethods")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ".")
(ID "module_repr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(LIT "?")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__file__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r} ({!r})>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r} from {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_installed_safely")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_module")
(PUNCT "=")
(ID "module")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_spec")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_spec")
(PUNCT ".")
(ID "_initializing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_spec")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_spec")
(NEWLINE)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(ID "arg")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "import {!r} # {!r}")
(PUNCT ",")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_spec")
(PUNCT ".")
(ID "_initializing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ModuleSpec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The specification for a module, used for loading.\n\n    A module's spec is the source for information about the module.  For\n    data associated with the module, including source, use the spec's\n    loader.\n\n    `name` is the absolute name of the module.  `loader` is the loader\n    to use when loading the module.  `parent` is the name of the\n    package the module is in.  The parent is derived from the name.\n\n    `is_package` determines if the module is considered a package or\n    not.  On modules this is reflected by the `__path__` attribute.\n\n    `origin` is the specific location used by the loader from which to\n    load the module, if that information is available.  When filename is\n    set, origin will match.\n\n    `has_location` indicates that a spec's \"origin\" reflects a location.\n    When this is True, `__file__` attribute of the module is set.\n\n    `cached` is the location of the cached bytecode file, if any.  It\n    corresponds to the `__cached__` attribute.\n\n    `submodule_search_locations` is the sequence of path entries to\n    search when importing submodules.  If set, is_package should be\n    True--and False otherwise.\n\n    Packages are simply modules that (may) have submodules.  If a spec\n    has a non-None value in `submodule_search_locations`, the import\n    system will consider modules loaded from the spec as packages.\n\n    Only finders (see importlib.abc.MetaPathFinder and\n    importlib.abc.PathEntryFinder) should modify ModuleSpec instances.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "loader_state")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "is_package")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "loader")
(PUNCT "=")
(ID "loader")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "origin")
(PUNCT "=")
(ID "origin")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "loader_state")
(PUNCT "=")
(ID "loader_state")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(KEYWORD if)
(ID "is_package")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_set_fileattr")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cached")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(LIT "name={!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(LIT "loader={!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "loader")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "origin")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "origin={!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "origin")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "submodule_search_locations={}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "{}({})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "smsl")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "name")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "loader")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "loader")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "origin")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "origin")
(KEYWORD and)
(ID "smsl")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "cached")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "cached")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "has_location")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "has_location")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "cached")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_cached")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "origin")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_set_fileattr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "origin")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "SOURCE_SUFFIXES")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cached")
(PUNCT "=")
(ID "cache_from_source")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NotImplementedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "filename")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "BYTECODE_SUFFIXES")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cached")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cached")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "cached")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "cached")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cached")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cached")
(PUNCT "=")
(ID "cached")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "parent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The name of the module's parent.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "has_location")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_set_fileattr")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "has_location")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "has_location")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_set_fileattr")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "spec_from_loader")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "is_package")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a module spec based on various loader methods.")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "loader")
(PUNCT ",")
(LIT "get_filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "is_package")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec_from_file_location")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT "=")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "search")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(KEYWORD if)
(ID "is_package")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "spec_from_file_location")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT "=")
(ID "loader")
(PUNCT ",")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "search")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "is_package")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "loader")
(PUNCT ",")
(LIT "is_package")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_package")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "is_package")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_package")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_package")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "ModuleSpec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(ID "origin")
(PUNCT ",")
(ID "is_package")
(PUNCT "=")
(ID "is_package")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_POPULATE")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "spec_from_file_location")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "location")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "loader")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "_POPULATE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a module spec based on a file location.\n\n    To indicate that the module is a package, set\n    submodule_search_locations to a list of directory paths.  An\n    empty list is sufficient, though its not otherwise useful to the\n    import system.\n\n    The loader must take a spec as its only __init__() arg.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "location")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "location")
(PUNCT "=")
(LIT "<unknown>")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "loader")
(PUNCT ",")
(LIT "get_filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "location")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "get_filename")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "ModuleSpec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(ID "location")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "_set_fileattr")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "loader_class")
(PUNCT ",")
(ID "suffixes")
(KEYWORD in)
(ID "_get_supported_file_loaders")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "location")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "suffixes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "loader_class")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "location")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT "=")
(ID "loader")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "submodule_search_locations")
(KEYWORD is)
(ID "_POPULATE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "loader")
(PUNCT ",")
(LIT "is_package")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_package")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "is_package")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "is_package")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "submodule_search_locations")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "location")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirname")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "location")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dirname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_spec_from_module")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "loader")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__loader__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "location")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__file__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "location")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "origin")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "location")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "origin")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "_ORIGIN")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "origin")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "origin")
(PUNCT "=")
(ID "location")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cached")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__cached__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cached")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "submodule_search_locations")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__path__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "submodule_search_locations")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "ModuleSpec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(ID "origin")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "_set_fileattr")
(PUNCT "=")
(KEYWORD False)
(KEYWORD if)
(ID "location")
(KEYWORD is)
(KEYWORD None)
(KEYWORD else)
(KEYWORD True)
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "cached")
(PUNCT "=")
(ID "cached")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "submodule_search_locations")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_SpecMethods")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convenience wrapper around spec objects to provide spec-specific\n    methods.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "module_repr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the repr to use for the module.")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "?")
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "name")
(KEYWORD is)
(KEYWORD None)
(KEYWORD else)
(ID "spec")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "origin")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r} ({!r})>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "has_location")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r} from {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "spec")
(PUNCT ".")
(ID "origin")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<module {!r} ({})>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "spec")
(PUNCT ".")
(ID "origin")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "init_module_attrs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "_override")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "_force_name")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the module's attributes.\n\n        All missing import-related module attributes will be set.  Here\n        is how the spec attributes map onto the module:\n\n        spec.name -> module.__name__\n        spec.loader -> module.__loader__\n        spec.parent -> module.__package__\n        spec -> module.__spec__\n\n        Optional:\n        spec.origin -> module.__file__ (if spec.set_fileattr is true)\n        spec.cached -> module.__cached__ (if __file__ also set)\n        spec.submodule_search_locations -> module.__path__ (if set)\n\n        ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "_override")
(KEYWORD or)
(ID "_force_name")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__name__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_override")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__loader__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "loader")
(NEWLINE)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "_NamespaceLoader")
(PUNCT ".")
(ID "__new__")
(PUNCT "(")
(ID "_NamespaceLoader")
(PUNCT ")")
(NEWLINE)
(ID "loader")
(PUNCT ".")
(ID "_path")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__loader__")
(PUNCT "=")
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_override")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__package__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "parent")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__spec__")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_override")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__path__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__path__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "has_location")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_override")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__file__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__file__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "origin")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_override")
(KEYWORD or)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__cached__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "cached")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__cached__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "cached")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "create")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new module to be loaded.\n\n        The import-related module attributes are also set with the\n        appropriate values from the spec.\n\n        ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ",")
(LIT "create_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ".")
(ID "create_module")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "module")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "_new_module")
(PUNCT "(")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "init_module_attrs")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_exec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do everything necessary to execute the module.\n\n        The namespace of `module` is used as the target of execution.\n        This method uses the loader's `exec_module()` method.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ".")
(ID "exec_module")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute the spec in an existing module's namespace.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "name")
(NEWLINE)
(ID "_imp")
(PUNCT ".")
(ID "acquire_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "_ModuleLockManager")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "module")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "module {!r} not in sys.modules")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "missing loader")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "init_module_attrs")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "_override")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "init_module_attrs")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "_override")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ",")
(LIT "exec_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ".")
(ID "load_module")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_exec")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_load_backward_compatible")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ".")
(ID "load_module")
(PUNCT "(")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__loader__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__loader__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__package__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__path__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__spec__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__spec__")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_load_unlocked")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ",")
(LIT "exec_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_load_backward_compatible")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "module")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "create")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "_installed_safely")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "missing loader")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_exec")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new module object, loaded by the spec's loader.\n\n        The module is not added to its parent.\n\n        If a module is already in sys.modules, that existing module gets\n        clobbered.\n\n        ")
(NEWLINE)
(ID "_imp")
(PUNCT ".")
(ID "acquire_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "_ModuleLockManager")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "spec")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_load_unlocked")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_fix_up_module")
(PUNCT "(")
(ID "ns")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "pathname")
(PUNCT ",")
(ID "cpathname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__loader__")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "ns")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__spec__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "loader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "pathname")
(PUNCT "==")
(ID "cpathname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "SourcelessFileLoader")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "SourceFileLoader")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "spec_from_file_location")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "pathname")
(PUNCT ",")
(ID "loader")
(PUNCT "=")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ns")
(PUNCT "[")
(LIT "__spec__")
(PUNCT "]")
(PUNCT "=")
(ID "spec")
(NEWLINE)
(ID "ns")
(PUNCT "[")
(LIT "__loader__")
(PUNCT "]")
(PUNCT "=")
(ID "loader")
(NEWLINE)
(ID "ns")
(PUNCT "[")
(LIT "__file__")
(PUNCT "]")
(PUNCT "=")
(ID "pathname")
(NEWLINE)
(ID "ns")
(PUNCT "[")
(LIT "__cached__")
(PUNCT "]")
(PUNCT "=")
(ID "cpathname")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BuiltinImporter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Meta path import for built-in modules.\n\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n\n    ")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "module_repr")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return repr for the module.\n\n        The method is deprecated.  The import machinery does the job itself.\n\n        ")
(NEWLINE)
(KEYWORD return)
(LIT "<module {!r} (built-in)>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_spec")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_imp")
(PUNCT ".")
(ID "is_builtin")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec_from_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "cls")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(LIT "built-in")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_module")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the built-in module.\n\n        If 'path' is ever specified then the search is considered a failure.\n\n        This method is deprecated.  Use find_spec() instead.\n\n        ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_builtin")
(NEWLINE)
(KEYWORD def)
(ID "load_module")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load a built-in module.")
(NEWLINE)
(KEYWORD with)
(ID "_ManageReload")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "_imp")
(PUNCT ".")
(ID "init_builtin")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "module")
(PUNCT ".")
(ID "__loader__")
(PUNCT "=")
(ID "cls")
(NEWLINE)
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_builtin")
(NEWLINE)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None as built-in modules do not have code objects.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_builtin")
(NEWLINE)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None as built-in modules do not have source code.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_builtin")
(NEWLINE)
(KEYWORD def)
(ID "is_package")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return False as built-in modules are never packages.")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FrozenImporter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Meta path import for frozen modules.\n\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n\n    ")
(NEWLINE)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "module_repr")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return repr for the module.\n\n        The method is deprecated.  The import machinery does the job itself.\n\n        ")
(NEWLINE)
(KEYWORD return)
(LIT "<module {!r} (frozen)>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_spec")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_imp")
(PUNCT ".")
(ID "is_frozen")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec_from_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "cls")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(LIT "frozen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_module")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find a frozen module.\n\n        This method is deprecated.  Use find_spec() instead.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(KEYWORD if)
(ID "_imp")
(PUNCT ".")
(ID "is_frozen")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "exec_module")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_imp")
(PUNCT ".")
(ID "is_frozen")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "{!r} is not a frozen module")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT "=")
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "_imp")
(PUNCT ".")
(ID "get_frozen_object")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "module")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "load_module")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load a frozen module.\n\n        This method is deprecated.  Use exec_module() instead.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_load_module_shim")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_frozen")
(NEWLINE)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the code object for the frozen module.")
(NEWLINE)
(KEYWORD return)
(ID "_imp")
(PUNCT ".")
(ID "get_frozen_object")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_frozen")
(NEWLINE)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None as frozen modules do not have source code.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(PUNCT "@")
(ID "_requires_frozen")
(NEWLINE)
(KEYWORD def)
(ID "is_package")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the frozen module is a package.")
(NEWLINE)
(KEYWORD return)
(ID "_imp")
(PUNCT ".")
(ID "is_frozen_package")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "WindowsRegistryFinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Meta path finder for modules declared in the Windows registry.")
(NEWLINE)
(ID "REGISTRY_KEY")
(PUNCT "=")
(PUNCT "(")
(LIT "Software\\Python\\PythonCore\\{sys_version}")
(LIT "\\Modules\\{fullname}")
(PUNCT ")")
(NEWLINE)
(ID "REGISTRY_KEY_DEBUG")
(PUNCT "=")
(PUNCT "(")
(LIT "Software\\Python\\PythonCore\\{sys_version}")
(LIT "\\Modules\\{fullname}\\Debug")
(PUNCT ")")
(NEWLINE)
(ID "DEBUG_BUILD")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_open_registry")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_winreg")
(PUNCT ".")
(ID "OpenKey")
(PUNCT "(")
(ID "_winreg")
(PUNCT ".")
(ID "HKEY_CURRENT_USER")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_winreg")
(PUNCT ".")
(ID "OpenKey")
(PUNCT "(")
(ID "_winreg")
(PUNCT ".")
(ID "HKEY_LOCAL_MACHINE")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_search_registry")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cls")
(PUNCT ".")
(ID "DEBUG_BUILD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry_key")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "REGISTRY_KEY_DEBUG")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "registry_key")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "REGISTRY_KEY")
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "registry_key")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fullname")
(PUNCT "=")
(ID "fullname")
(PUNCT ",")
(ID "sys_version")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "cls")
(PUNCT ".")
(ID "_open_registry")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(KEYWORD as)
(ID "hkey")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filepath")
(PUNCT "=")
(ID "_winreg")
(PUNCT ".")
(ID "QueryValue")
(PUNCT "(")
(ID "hkey")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "filepath")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_spec")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filepath")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_search_registry")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filepath")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_path_stat")
(PUNCT "(")
(ID "filepath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "loader")
(PUNCT ",")
(ID "suffixes")
(KEYWORD in)
(ID "_get_supported_file_loaders")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "filepath")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "suffixes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "spec_from_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "filepath")
(PUNCT ")")
(PUNCT ",")
(ID "origin")
(PUNCT "=")
(ID "filepath")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_module")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find module named in the registry.\n\n        This method is deprecated.  Use exec_module() instead.\n\n        ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(PUNCT ".")
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_LoaderBasics")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class of common code needed by both SourceLoader and\n    SourcelessFileLoader.")
(NEWLINE)
(KEYWORD def)
(ID "is_package")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Concrete implementation of InspectLoader.is_package by checking if\n        the path returned by get_filename has a filename of '__init__.py'.")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_filename")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "filename_base")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "rsplit")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "tail_name")
(PUNCT "=")
(ID "fullname")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "filename_base")
(PUNCT "==")
(LIT "__init__")
(KEYWORD and)
(ID "tail_name")
(PUNCT "!=")
(LIT "__init__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exec_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute the module.")
(NEWLINE)
(ID "code")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_code")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "cannot load module {!r} when get_code() ")
(LIT "returns None")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "exec")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "module")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "load_module")
(PUNCT "=")
(ID "_load_module_shim")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SourceLoader")
(PUNCT "(")
(ID "_LoaderBasics")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "path_mtime")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Optional method that returns the modification time (an int) for the\n        specified path, where path is a str.\n\n        Raises IOError when the path cannot be handled.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "IOError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "path_stats")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Optional method returning a metadata dict for the specified path\n        to by the path (str).\n        Possible keys:\n        - 'mtime' (mandatory) is the numeric timestamp of last source\n          code modification;\n        - 'size' (optional) is the size in bytes of the source code.\n\n        Implementing this method allows the loader to read bytecode files.\n        Raises IOError when the path cannot be handled.\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "{")
(LIT "mtime")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "path_mtime")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cache_bytecode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source_path")
(PUNCT ",")
(ID "cache_path")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Optional method which writes data (bytes) to a file path (a str).\n\n        Implementing this method allows for the writing of bytecode files.\n\n        The source path is needed in order to correctly transfer permissions\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "set_data")
(PUNCT "(")
(ID "cache_path")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Optional method which writes data (bytes) to a file path (a str).\n\n        Implementing this method allows for the writing of bytecode files.\n        ")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Concrete implementation of InspectLoader.get_source.")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_filename")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source_bytes")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "source not available through get_data()")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ")")
(KEYWORD from)
(ID "exc")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "decode_source")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "source_to_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "_optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the code object compiled from source.\n\n        The 'data' argument can be any object type that compile() supports.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "compile")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(LIT "exec")
(PUNCT ",")
(ID "dont_inherit")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(ID "_optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Concrete implementation of InspectLoader.get_code.\n\n        Reading of bytecode requires path_stats to be implemented. To write\n        bytecode, set_data must also be implemented.\n\n        ")
(NEWLINE)
(ID "source_path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_filename")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(ID "source_mtime")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytecode_path")
(PUNCT "=")
(ID "cache_from_source")
(PUNCT "(")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NotImplementedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytecode_path")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "st")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "path_stats")
(PUNCT "(")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IOError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source_mtime")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "st")
(PUNCT "[")
(LIT "mtime")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(ID "bytecode_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes_data")
(PUNCT "=")
(ID "_validate_bytecode_header")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "source_stats")
(PUNCT "=")
(ID "st")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "bytecode_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ImportError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "{} matches {}")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT ",")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_compile_bytecode")
(PUNCT "(")
(ID "bytes_data")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT "=")
(ID "bytecode_path")
(PUNCT ",")
(ID "source_path")
(PUNCT "=")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "source_bytes")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(ID "code_object")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "source_to_code")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ",")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(LIT "code object from {}")
(PUNCT ",")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "dont_write_bytecode")
(KEYWORD and)
(ID "bytecode_path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "source_mtime")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "_code_to_bytecode")
(PUNCT "(")
(ID "code_object")
(PUNCT ",")
(ID "source_mtime")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cache_bytecode")
(PUNCT "(")
(ID "source_path")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(LIT "wrote {!r}")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NotImplementedError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "code_object")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FileLoader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base file loader class which implements the loader protocol methods that\n    require file system usage.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Cache the module name and the path to the file found by the\n        finder.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "fullname")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT "=")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "__class__")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT "^")
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "_check_name")
(NEWLINE)
(KEYWORD def)
(ID "load_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load a module from a file.\n\n        This method is deprecated.  Use exec_module() instead.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(ID "FileLoader")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "load_module")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "_check_name")
(NEWLINE)
(KEYWORD def)
(ID "get_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the path to the source file as found by the finder.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the data from path as raw bytes.")
(NEWLINE)
(KEYWORD with)
(ID "_io")
(PUNCT ".")
(ID "FileIO")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SourceFileLoader")
(PUNCT "(")
(ID "FileLoader")
(PUNCT ",")
(ID "SourceLoader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Concrete implementation of SourceLoader using the file system.")
(NEWLINE)
(KEYWORD def)
(ID "path_stats")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the metadata for the path.")
(NEWLINE)
(ID "st")
(PUNCT "=")
(ID "_path_stat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "{")
(LIT "mtime")
(PUNCT ":")
(ID "st")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ",")
(LIT "size")
(PUNCT ":")
(ID "st")
(PUNCT ".")
(ID "st_size")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_cache_bytecode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source_path")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "_calc_mode")
(PUNCT "(")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "set_data")
(PUNCT "(")
(ID "bytecode_path")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "_mode")
(PUNCT "=")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "_mode")
(PUNCT "=")
(LIT 438)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write bytes data to a file.")
(NEWLINE)
(ID "parent")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "path_parts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "parent")
(KEYWORD and)
(KEYWORD not)
(ID "_path_isdir")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT ",")
(ID "part")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(ID "path_parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "path_parts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "_path_join")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "could not create {!r}: {!r}")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_write_atomic")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "_mode")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(LIT "created {!r}")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "could not create {!r}: {!r}")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SourcelessFileLoader")
(PUNCT "(")
(ID "FileLoader")
(PUNCT ",")
(ID "_LoaderBasics")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Loader which handles sourceless file imports.")
(NEWLINE)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_filename")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "bytes_data")
(PUNCT "=")
(ID "_validate_bytecode_header")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_compile_bytecode")
(PUNCT "(")
(ID "bytes_data")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "fullname")
(PUNCT ",")
(ID "bytecode_path")
(PUNCT "=")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None as there is no source code.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "EXTENSION_SUFFIXES")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "ExtensionFileLoader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Loader for extension modules.\n\n    The constructor is designed to work with FileFinder.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT "=")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "__class__")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "__dict__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT "^")
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "_check_name")
(NEWLINE)
(KEYWORD def)
(ID "load_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load an extension module.")
(NEWLINE)
(KEYWORD with)
(ID "_ManageReload")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "_imp")
(PUNCT ".")
(ID "load_dynamic")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "extension module loaded from {!r}")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "is_package")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "is_package")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "is_package")
(KEYWORD and)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__path__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__path__")
(PUNCT "=")
(PUNCT "[")
(ID "_path_split")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "module")
(PUNCT ".")
(ID "__loader__")
(PUNCT "=")
(ID "self")
(NEWLINE)
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "is_package")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__package__")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_package")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if the extension module is a package.")
(NEWLINE)
(ID "file_name")
(PUNCT "=")
(ID "_path_split")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "any")
(PUNCT "(")
(ID "file_name")
(PUNCT "==")
(LIT "__init__")
(PUNCT "+")
(ID "suffix")
(KEYWORD for)
(ID "suffix")
(KEYWORD in)
(ID "EXTENSION_SUFFIXES")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None as an extension module cannot create a code object.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None as extension modules have no source code.")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "_check_name")
(NEWLINE)
(KEYWORD def)
(ID "get_filename")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the path to the source file as found by the finder.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "path")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_NamespacePath")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Represents a namespace package's path.  It uses the module name\n    to find its parent module, and from there it looks up the parent's\n    __path__.  When this changes, the module's own path is recomputed,\n    using path_finder.  For top-level modules, the parent module's path\n    is sys.path.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "path_finder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_path")
(PUNCT "=")
(ID "path")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_last_parent_path")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_get_parent_path")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_path_finder")
(PUNCT "=")
(ID "path_finder")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_parent_path_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a tuple of (parent-module-name, parent-path-attr-name)")
(NEWLINE)
(ID "parent")
(PUNCT ",")
(ID "dot")
(PUNCT ",")
(ID "me")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dot")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "sys")
(PUNCT ",")
(LIT "path")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parent")
(PUNCT ",")
(LIT "__path__")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_parent_path")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent_module_name")
(PUNCT ",")
(ID "path_attr_name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_find_parent_path_names")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "parent_module_name")
(PUNCT "]")
(PUNCT ",")
(ID "path_attr_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_recalculate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent_path")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_get_parent_path")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "parent_path")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_last_parent_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_path_finder")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(ID "parent_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_path")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_last_parent_path")
(PUNCT "=")
(ID "parent_path")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_recalculate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__len__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_recalculate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "_NamespacePath({!r})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__contains__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "item")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_recalculate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_NamespaceLoader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "path_finder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_path")
(PUNCT "=")
(ID "_NamespacePath")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "path_finder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "module_repr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return repr for the module.\n\n        The method is deprecated.  The import machinery does the job itself.\n\n        ")
(NEWLINE)
(KEYWORD return)
(LIT "<module {!r} (namespace)>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_package")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_source")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_code")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "compile")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "<string>")
(PUNCT ",")
(LIT "exec")
(PUNCT ",")
(ID "dont_inherit")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exec_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load a namespace module.\n\n        This method is deprecated.  Use exec_module() instead.\n\n        ")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(LIT "namespace module loaded with path {!r}")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_load_module_shim")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PathFinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Meta path finder for sys.path and package __path__ attributes.")
(NEWLINE)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "invalidate_caches")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call the invalidate_caches() method on all path entry finders\n        stored in sys.path_importer_caches (where implemented).")
(NEWLINE)
(KEYWORD for)
(ID "finder")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path_importer_cache")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "finder")
(PUNCT ",")
(LIT "invalidate_caches")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "finder")
(PUNCT ".")
(ID "invalidate_caches")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_path_hooks")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Search sequence of hooks for a finder for 'path'.\n\n        If 'hooks' is false then use sys.path_hooks.\n\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "sys.path_hooks is empty")
(PUNCT ",")
(ID "ImportWarning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "hook")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hook")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_path_importer_cache")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the finder for the path entry from sys.path_importer_cache.\n\n        If the path entry is not in the cache, find the appropriate finder\n        and cache it. If no finder is available, store None.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "path")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "finder")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "path_importer_cache")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "finder")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_path_hooks")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path_importer_cache")
(PUNCT "[")
(ID "path")
(PUNCT "]")
(PUNCT "=")
(ID "finder")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "finder")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_legacy_get_spec")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "finder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "finder")
(PUNCT ",")
(LIT "find_loader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT ",")
(ID "portions")
(PUNCT "=")
(ID "finder")
(PUNCT ".")
(ID "find_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "finder")
(PUNCT ".")
(ID "find_module")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(ID "portions")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec_from_loader")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "ModuleSpec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "portions")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_get_spec")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the loader or namespace_path for this module/package name.")
(NEWLINE)
(ID "namespace_path")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "entry")
(KEYWORD in)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "entry")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "finder")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_path_importer_cache")
(PUNCT "(")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "finder")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "finder")
(PUNCT ",")
(LIT "find_spec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "finder")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_legacy_get_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "finder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(ID "portions")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(KEYWORD if)
(ID "portions")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "spec missing loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "namespace_path")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "portions")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "ModuleSpec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "namespace_path")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_spec")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "find the module on sys.path or 'path' based on sys.path_hooks and\n        sys.path_importer_cache.")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "path")
(NEWLINE)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "_get_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "namespace_path")
(PUNCT "=")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(NEWLINE)
(KEYWORD if)
(ID "namespace_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT ".")
(ID "origin")
(PUNCT "=")
(LIT "namespace")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "_NamespacePath")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "namespace_path")
(PUNCT ",")
(ID "cls")
(PUNCT ".")
(ID "_get_spec")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "find_module")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "find the module on sys.path or 'path' based on sys.path_hooks and\n        sys.path_importer_cache.\n\n        This method is deprecated.  Use find_spec() instead.\n\n        ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "spec")
(PUNCT ".")
(ID "loader")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FileFinder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "File-based finder.\n\n    Interactions with the file system are cached for performance, being\n    refreshed when the directory the finder is handling has been modified.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(ID "loader_details")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize with the path to search on and a variable number of\n        2-tuples containing the loader and the file suffixes the loader\n        recognizes.")
(NEWLINE)
(ID "loaders")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "loader")
(PUNCT ",")
(ID "suffixes")
(KEYWORD in)
(ID "loader_details")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loaders")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "(")
(ID "suffix")
(PUNCT ",")
(ID "loader")
(PUNCT ")")
(KEYWORD for)
(ID "suffix")
(KEYWORD in)
(ID "suffixes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_loaders")
(PUNCT "=")
(ID "loaders")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT "=")
(ID "path")
(KEYWORD or)
(LIT ".")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_path_mtime")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_path_cache")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_relaxed_path_cache")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invalidate_caches")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Invalidate the directory mtime.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_path_mtime")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "find_module")
(PUNCT "=")
(ID "_find_module_shim")
(NEWLINE)
(KEYWORD def)
(ID "find_loader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to find a loader for the specified module, or the namespace\n        package portions. Returns (loader, list-of-portions).\n\n        This method is deprecated.  Use find_spec() instead.\n\n        ")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "spec")
(PUNCT ".")
(ID "loader")
(PUNCT ",")
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_spec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loader_class")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "smsl")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "loader_class")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "spec_from_file_location")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "loader")
(PUNCT "=")
(ID "loader")
(PUNCT ",")
(ID "submodule_search_locations")
(PUNCT "=")
(ID "smsl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_spec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Try to find a loader for the specified module, or the namespace\n        package portions. Returns (loader, list-of-portions).")
(NEWLINE)
(ID "is_namespace")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "tail_module")
(PUNCT "=")
(ID "fullname")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mtime")
(PUNCT "=")
(ID "_path_stat")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(KEYWORD or)
(ID "_os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "st_mtime")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mtime")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mtime")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_path_mtime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fill_cache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_path_mtime")
(PUNCT "=")
(ID "mtime")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_relax_case")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cache")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_relaxed_path_cache")
(NEWLINE)
(ID "cache_module")
(PUNCT "=")
(ID "tail_module")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cache")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_path_cache")
(NEWLINE)
(ID "cache_module")
(PUNCT "=")
(ID "tail_module")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cache_module")
(KEYWORD in)
(ID "cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base_path")
(PUNCT "=")
(ID "_path_join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "tail_module")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "suffix")
(PUNCT ",")
(ID "loader_class")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_loaders")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "init_filename")
(PUNCT "=")
(LIT "__init__")
(PUNCT "+")
(ID "suffix")
(NEWLINE)
(ID "full_path")
(PUNCT "=")
(ID "_path_join")
(PUNCT "(")
(ID "base_path")
(PUNCT ",")
(ID "init_filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_path_isfile")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_get_spec")
(PUNCT "(")
(ID "loader_class")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "full_path")
(PUNCT ",")
(PUNCT "[")
(ID "base_path")
(PUNCT "]")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_namespace")
(PUNCT "=")
(ID "_path_isdir")
(PUNCT "(")
(ID "base_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "suffix")
(PUNCT ",")
(ID "loader_class")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_loaders")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "full_path")
(PUNCT "=")
(ID "_path_join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ",")
(ID "tail_module")
(PUNCT "+")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(ID "_verbose_message")
(PUNCT "(")
(LIT "trying {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cache_module")
(PUNCT "+")
(ID "suffix")
(KEYWORD in)
(ID "cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_path_isfile")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_get_spec")
(PUNCT "(")
(ID "loader_class")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "full_path")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "is_namespace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_verbose_message")
(PUNCT "(")
(LIT "possible namespace for {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "base_path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(ID "ModuleSpec")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(PUNCT "=")
(PUNCT "[")
(ID "base_path")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_fill_cache")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fill the cache of potential modules and packages for this directory.")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "path")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "contents")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "path")
(KEYWORD or)
(ID "_os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "FileNotFoundError")
(PUNCT ",")
(ID "PermissionError")
(PUNCT ",")
(ID "NotADirectoryError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "contents")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "win")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_path_cache")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "contents")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lower_suffix_contents")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "contents")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "dot")
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(ID "item")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_name")
(PUNCT "=")
(LIT "{}.{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "suffix")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(ID "lower_suffix_contents")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "new_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_path_cache")
(PUNCT "=")
(ID "lower_suffix_contents")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "_CASE_INSENSITIVE_PLATFORMS")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_relaxed_path_cache")
(PUNCT "=")
(PUNCT "{")
(ID "fn")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "fn")
(KEYWORD in)
(ID "contents")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "path_hook")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(PUNCT "*")
(ID "loader_details")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A class method which returns a closure to use on sys.path_hook\n        which will return an instance using the specified loaders and the path\n        called on the closure.\n\n        If the path called on the closure is not a directory, ImportError is\n        raised.\n\n        ")
(NEWLINE)
(KEYWORD def)
(ID "path_hook_for_FileFinder")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Path hook for importlib.machinery.FileFinder.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_path_isdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "only directories are supported")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(ID "loader_details")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path_hook_for_FileFinder")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "FileFinder({!r})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_ImportLockContext")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Context manager for the import lock.")
(NEWLINE)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Acquire the import lock.")
(NEWLINE)
(ID "_imp")
(PUNCT ".")
(ID "acquire_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "exc_traceback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Release the import lock regardless of any raised exceptions.")
(NEWLINE)
(ID "_imp")
(PUNCT ".")
(ID "release_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_resolve_name")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Resolve a relative module name to an absolute one.")
(NEWLINE)
(ID "bits")
(PUNCT "=")
(ID "package")
(PUNCT ".")
(ID "rsplit")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(ID "level")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "bits")
(PUNCT ")")
(PUNCT "<")
(ID "level")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "attempted relative import beyond top-level package")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "base")
(PUNCT "=")
(ID "bits")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(LIT "{}.{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(KEYWORD if)
(ID "name")
(KEYWORD else)
(ID "base")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_spec_legacy")
(PUNCT "(")
(ID "finder")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "finder")
(PUNCT ".")
(ID "find_module")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "spec_from_loader")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_spec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "target")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find a module's loader.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "sys.meta_path is empty")
(PUNCT ",")
(ID "ImportWarning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "is_reload")
(PUNCT "=")
(ID "name")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(NEWLINE)
(KEYWORD for)
(ID "finder")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "_ImportLockContext")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "find_spec")
(PUNCT "=")
(ID "finder")
(PUNCT ".")
(ID "find_spec")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "_find_spec_legacy")
(PUNCT "(")
(ID "finder")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "find_spec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_reload")
(KEYWORD and)
(ID "name")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__spec__")
(PUNCT "=")
(ID "module")
(PUNCT ".")
(ID "__spec__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "__spec__")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "__spec__")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "spec")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_sanity_check")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Verify arguments are \"sane\".")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "module name must be str, not {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "level")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "level must be >= 0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "package")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "package")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "__package__ not set to a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "package")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "Parent module {!r} not loaded, cannot perform relative ")
(LIT "import")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "SystemError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "package")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD and)
(ID "level")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Empty module name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_ERR_MSG_PREFIX")
(PUNCT "=")
(LIT "No module named ")
(NEWLINE)
(ID "_ERR_MSG")
(PUNCT "=")
(ID "_ERR_MSG_PREFIX")
(PUNCT "+")
(LIT "{!r}")
(NEWLINE)
(KEYWORD def)
(ID "_find_and_load_unlocked")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "import_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "parent")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "parent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "parent")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "import_")
(PUNCT ",")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "parent_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "parent")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "parent_module")
(PUNCT ".")
(ID "__path__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(ID "_ERR_MSG")
(PUNCT "+")
(LIT "; {!r} is not a package")
(PUNCT ")")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "_find_spec")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "_ERR_MSG")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "_SpecMethods")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(PUNCT ".")
(ID "_load_unlocked")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "parent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "parent")
(PUNCT "]")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "parent_module")
(PUNCT ",")
(ID "name")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_and_load")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "import_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find and load the module, and release the import lock.")
(NEWLINE)
(KEYWORD with)
(ID "_ModuleLockManager")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_find_and_load_unlocked")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "import_")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_gcd_import")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Import and return the module based on its name, the package the call is\n    being made from, and the level adjustment.\n\n    This function represents the greatest common denominator of functionality\n    between import_module and __import__. This includes setting __package__ if\n    the loader did not.\n\n    ")
(NEWLINE)
(ID "_sanity_check")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "level")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "_resolve_name")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_imp")
(PUNCT ".")
(ID "acquire_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_find_and_load")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_gcd_import")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "module")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_imp")
(PUNCT ".")
(ID "release_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "message")
(PUNCT "=")
(PUNCT "(")
(LIT "import of {} halted; ")
(LIT "None in sys.modules")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_lock_unlock_module")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_handle_fromlist")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "fromlist")
(PUNCT ",")
(ID "import_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Figure out what __import__ should return.\n\n    The import_ parameter is a callable which takes the name of module to\n    import. It is required to decouple the function from assuming importlib's\n    import implementation is desired.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__path__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "*")
(KEYWORD in)
(ID "fromlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fromlist")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "fromlist")
(PUNCT ")")
(NEWLINE)
(ID "fromlist")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(LIT "*")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__all__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fromlist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__all__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "fromlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "from_name")
(PUNCT "=")
(LIT "{}.{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_call_with_frames_removed")
(PUNCT "(")
(ID "import_")
(PUNCT ",")
(ID "from_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "str")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "_ERR_MSG_PREFIX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(ID "from_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_calc___package__")
(PUNCT "(")
(ID "globals")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate what __package__ should be.\n\n    __package__ is not guaranteed to be defined or could be set to None\n    to represent that its proper value is unknown.\n\n    ")
(NEWLINE)
(ID "package")
(PUNCT "=")
(ID "globals")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "__package__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "package")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "package")
(PUNCT "=")
(ID "globals")
(PUNCT "[")
(LIT "__name__")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "__path__")
(KEYWORD not)
(KEYWORD in)
(ID "globals")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "package")
(PUNCT "=")
(ID "package")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "package")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_supported_file_loaders")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a list of file-based module loaders.\n\n    Each item is a tuple (loader, suffixes).\n    ")
(NEWLINE)
(ID "extensions")
(PUNCT "=")
(ID "ExtensionFileLoader")
(PUNCT ",")
(ID "_imp")
(PUNCT ".")
(ID "extension_suffixes")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "source")
(PUNCT "=")
(ID "SourceFileLoader")
(PUNCT ",")
(ID "SOURCE_SUFFIXES")
(NEWLINE)
(ID "bytecode")
(PUNCT "=")
(ID "SourcelessFileLoader")
(PUNCT ",")
(ID "BYTECODE_SUFFIXES")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "extensions")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "bytecode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__import__")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "globals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fromlist")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Import a module.\n\n    The 'globals' argument is used to infer where the import is occuring from\n    to handle relative imports. The 'locals' argument is ignored. The\n    'fromlist' argument specifies what should exist as attributes on the module\n    being imported (e.g. ``from module import <fromlist>``).  The 'level'\n    argument represents the package location to import from in a relative\n    import (e.g. ``from ..pkg import mod`` would have a 'level' of 2).\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "level")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "_gcd_import")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "globals_")
(PUNCT "=")
(ID "globals")
(KEYWORD if)
(ID "globals")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD else)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "package")
(PUNCT "=")
(ID "_calc___package__")
(PUNCT "(")
(ID "globals_")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "_gcd_import")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "package")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "fromlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "level")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_gcd_import")
(PUNCT "(")
(ID "name")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "module")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cut_off")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT "-")
(ID "cut_off")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_handle_fromlist")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "fromlist")
(PUNCT ",")
(ID "_gcd_import")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_builtin_from_name")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "BuiltinImporter")
(PUNCT ".")
(ID "find_spec")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "spec")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "no built-in module named ")
(PUNCT "+")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "methods")
(PUNCT "=")
(ID "_SpecMethods")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "methods")
(PUNCT ".")
(ID "_load_unlocked")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setup")
(PUNCT "(")
(ID "sys_module")
(PUNCT ",")
(ID "_imp_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Setup importlib by importing needed built-in modules and injecting them\n    into the global namespace.\n\n    As sys is needed for sys.modules access and _imp is needed to load built-in\n    modules, those two modules must be explicitly passed in.\n\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_imp")
(PUNCT ",")
(ID "sys")
(PUNCT ",")
(ID "BYTECODE_SUFFIXES")
(NEWLINE)
(ID "_imp")
(PUNCT "=")
(ID "_imp_module")
(NEWLINE)
(ID "sys")
(PUNCT "=")
(ID "sys_module")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "optimize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BYTECODE_SUFFIXES")
(PUNCT "=")
(ID "OPTIMIZED_BYTECODE_SUFFIXES")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BYTECODE_SUFFIXES")
(PUNCT "=")
(ID "DEBUG_BYTECODE_SUFFIXES")
(NEWLINE)
(DEDENT)
(ID "module_type")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "sys")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "module")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "module_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "builtin_module_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "BuiltinImporter")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_imp")
(PUNCT ".")
(ID "is_frozen")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "FrozenImporter")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "spec")
(PUNCT "=")
(ID "_spec_from_module")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "loader")
(PUNCT ")")
(NEWLINE)
(ID "methods")
(PUNCT "=")
(ID "_SpecMethods")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(NEWLINE)
(ID "methods")
(PUNCT ".")
(ID "init_module_attrs")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "__name__")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "builtin_name")
(KEYWORD in)
(PUNCT "(")
(LIT "_io")
(PUNCT ",")
(LIT "_warnings")
(PUNCT ",")
(LIT "builtins")
(PUNCT ",")
(LIT "marshal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "builtin_name")
(KEYWORD not)
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtin_module")
(PUNCT "=")
(ID "_builtin_from_name")
(PUNCT "(")
(ID "builtin_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "builtin_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "builtin_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(ID "builtin_name")
(PUNCT ",")
(ID "builtin_module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "os_details")
(PUNCT "=")
(PUNCT "(")
(LIT "posix")
(PUNCT ",")
(PUNCT "[")
(LIT "/")
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(PUNCT "[")
(LIT "\\")
(PUNCT ",")
(LIT "/")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "builtin_os")
(PUNCT ",")
(ID "path_separators")
(KEYWORD in)
(ID "os_details")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "all")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "sep")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD for)
(ID "sep")
(KEYWORD in)
(ID "path_separators")
(PUNCT ")")
(NEWLINE)
(ID "path_sep")
(PUNCT "=")
(ID "path_separators")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "builtin_os")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "builtin_os")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os_module")
(PUNCT "=")
(ID "_builtin_from_name")
(PUNCT "(")
(ID "builtin_os")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "importlib requires posix or nt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "_os")
(PUNCT ",")
(ID "os_module")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "path_sep")
(PUNCT ",")
(ID "path_sep")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "path_separators")
(PUNCT ",")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path_separators")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thread_module")
(PUNCT "=")
(ID "_builtin_from_name")
(PUNCT "(")
(LIT "_thread")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thread_module")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "_thread")
(PUNCT ",")
(ID "thread_module")
(PUNCT ")")
(NEWLINE)
(ID "weakref_module")
(PUNCT "=")
(ID "_builtin_from_name")
(PUNCT "(")
(LIT "_weakref")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "_weakref")
(PUNCT ",")
(ID "weakref_module")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "builtin_os")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "winreg_module")
(PUNCT "=")
(ID "_builtin_from_name")
(PUNCT "(")
(LIT "winreg")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "_winreg")
(PUNCT ",")
(ID "winreg_module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "self_module")
(PUNCT ",")
(LIT "_relax_case")
(PUNCT ",")
(ID "_make_relax_case")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "EXTENSION_SUFFIXES")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "_imp")
(PUNCT ".")
(ID "extension_suffixes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "builtin_os")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "SOURCE_SUFFIXES")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT ".pyw")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "_d.pyd")
(KEYWORD in)
(ID "EXTENSION_SUFFIXES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "WindowsRegistryFinder")
(PUNCT ".")
(ID "DEBUG_BUILD")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_install")
(PUNCT "(")
(ID "sys_module")
(PUNCT ",")
(ID "_imp_module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Install importlib as the implementation of import.")
(NEWLINE)
(ID "_setup")
(PUNCT "(")
(ID "sys_module")
(PUNCT ",")
(ID "_imp_module")
(PUNCT ")")
(NEWLINE)
(ID "supported_loaders")
(PUNCT "=")
(ID "_get_supported_file_loaders")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path_hooks")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(ID "FileFinder")
(PUNCT ".")
(ID "path_hook")
(PUNCT "(")
(PUNCT "*")
(ID "supported_loaders")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "BuiltinImporter")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "FrozenImporter")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "__name__")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "WindowsRegistryFinder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "meta_path")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "PathFinder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
