(LIT "Extension to format a paragraph or selection to a max width.\n\nDoes basic, standard text formatting, and also understands Python\ncomment blocks. Thus, for editing Python source code, this\nextension is really only suitable for reformatting these comment\nblocks or triple-quoted strings.\n\nKnown problems with comment reformatting:\n* If there is a selection marked, and the first line of the\n  selection is not complete, the block will probably not be detected\n  as comments, and will have the normal \"text formatting\" rules\n  applied.\n* If a comment block has leading whitespace that mixes tabs and\n  spaces, they will not be considered part of the same block.\n* Fancy comments, like this bulleted list, aren't handled :-)\n")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "configHandler")
(KEYWORD import)
(ID "idleConf")
(NEWLINE)
(KEYWORD class)
(ID "FormatParagraph")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "menudefs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "format")
(PUNCT ",")
(PUNCT "[")
(PUNCT "(")
(LIT "Format Paragraph")
(PUNCT ",")
(LIT "<<format-paragraph>>")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "editwin")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT "=")
(ID "editwin")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_paragraph_event")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Formats paragraph to a max width specified in idleConf.\n\n        If text is selected, format_paragraph_event will start breaking lines\n        at the max width, starting from the beginning selection.\n\n        If no text is selected, format_paragraph_event uses the current\n        cursor location to determine the paragraph (lines of text surrounded\n        by blank lines) and formats it.\n\n        The length limit parameter is for testing with a known value.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "limit")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "limit")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "extensions")
(PUNCT ",")
(LIT "FormatParagraph")
(PUNCT ",")
(LIT "max-width")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT "int")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT 72)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "editwin")
(PUNCT ".")
(ID "get_selection_indices")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "first")
(KEYWORD and)
(ID "last")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(ID "comment_header")
(PUNCT "=")
(ID "get_comment_header")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ",")
(ID "comment_header")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(ID "find_paragraph")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "text")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "comment_header")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newdata")
(PUNCT "=")
(ID "reformat_comment")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "comment_header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newdata")
(PUNCT "=")
(ID "reformat_paragraph")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "limit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "sel")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "newdata")
(PUNCT "!=")
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(ID "first")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "undo_block_start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "newdata")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "undo_block_stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_paragraph")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "mark")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the start/stop indices enclosing the paragraph that mark is in.\n\n    Also returns the comment format string, if any, and paragraph of text\n    between the start/stop indices.\n    ")
(NEWLINE)
(ID "lineno")
(PUNCT ",")
(ID "col")
(PUNCT "=")
(ID "map")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "mark")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "%d.end")
(PUNCT "%")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "<")
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(KEYWORD and)
(ID "is_all_white")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "%d.end")
(PUNCT "%")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "first_lineno")
(PUNCT "=")
(ID "lineno")
(NEWLINE)
(ID "comment_header")
(PUNCT "=")
(ID "get_comment_header")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "comment_header_len")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "comment_header")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "get_comment_header")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "==")
(ID "comment_header")
(KEYWORD and)
(KEYWORD not)
(ID "is_all_white")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "comment_header_len")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "%d.end")
(PUNCT "%")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "last")
(PUNCT "=")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "first_lineno")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "%d.end")
(PUNCT "%")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "lineno")
(PUNCT ">")
(LIT 0)
(KEYWORD and)
(ID "get_comment_header")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT "==")
(ID "comment_header")
(KEYWORD and)
(KEYWORD not)
(ID "is_all_white")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "comment_header_len")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "=")
(ID "lineno")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "%d.0")
(PUNCT "%")
(ID "lineno")
(PUNCT ",")
(LIT "%d.end")
(PUNCT "%")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "first")
(PUNCT "=")
(LIT "%d.0")
(PUNCT "%")
(PUNCT "(")
(ID "lineno")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ",")
(ID "comment_header")
(PUNCT ",")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reformat_paragraph")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "limit")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return data reformatted to specified width (limit).")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "n")
(KEYWORD and)
(ID "is_all_white")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(ID "indent1")
(PUNCT "=")
(ID "get_indent")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "<")
(ID "n")
(KEYWORD and)
(KEYWORD not)
(ID "is_all_white")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indent2")
(PUNCT "=")
(ID "get_indent")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indent2")
(PUNCT "=")
(ID "indent1")
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT "=")
(ID "lines")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "partial")
(PUNCT "=")
(ID "indent1")
(NEWLINE)
(KEYWORD while)
(ID "i")
(PUNCT "<")
(ID "n")
(KEYWORD and)
(KEYWORD not)
(ID "is_all_white")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "words")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "(\\s+)")
(PUNCT ",")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "j")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "word")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "word")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(PUNCT "(")
(ID "partial")
(PUNCT "+")
(ID "word")
(PUNCT ")")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ">")
(ID "limit")
(KEYWORD and)
(ID "partial")
(PUNCT "!=")
(ID "indent1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "partial")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "partial")
(PUNCT "=")
(ID "indent2")
(NEWLINE)
(DEDENT)
(ID "partial")
(PUNCT "=")
(ID "partial")
(PUNCT "+")
(ID "word")
(PUNCT "+")
(LIT " ")
(NEWLINE)
(KEYWORD if)
(ID "j")
(PUNCT "+")
(LIT 1)
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(KEYWORD and)
(ID "words")
(PUNCT "[")
(ID "j")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT " ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "partial")
(PUNCT "=")
(ID "partial")
(PUNCT "+")
(LIT " ")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "partial")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "lines")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "new")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reformat_comment")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "comment_header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return data reformatted to specified width with comment header.")
(NEWLINE)
(ID "lc")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "comment_header")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "line")
(PUNCT "[")
(ID "lc")
(PUNCT ":")
(PUNCT "]")
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "format_width")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "limit")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "comment_header")
(PUNCT ")")
(PUNCT ",")
(LIT 20)
(PUNCT ")")
(NEWLINE)
(ID "newdata")
(PUNCT "=")
(ID "reformat_paragraph")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "format_width")
(PUNCT ")")
(NEWLINE)
(ID "newdata")
(PUNCT "=")
(ID "newdata")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "block_suffix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "newdata")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "block_suffix")
(PUNCT "=")
(LIT "\n")
(NEWLINE)
(ID "newdata")
(PUNCT "=")
(ID "newdata")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "comment_header")
(PUNCT "+")
(ID "line")
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "newdata")
(PUNCT ")")
(PUNCT "+")
(ID "block_suffix")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_all_white")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if line is empty or all whitespace.")
(NEWLINE)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "^\\s*$")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_indent")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the initial space or tab indent of line.")
(NEWLINE)
(KEYWORD return)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "^([ \\t]*)")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_comment_header")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return string with leading whitespace and '#' from line or ''.\n\n    A null return indicates that the line is not a comment line. A non-\n    null return, such as '    #', will be used to find the other lines of\n    a comment block with the same  indent.\n    ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "^([ \\t]*#*)")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(KEYWORD return)
(LIT "")
(NEWLINE)
(KEYWORD return)
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "unittest")
(NEWLINE)
(ID "unittest")
(PUNCT ".")
(ID "main")
(PUNCT "(")
(LIT "idlelib.idle_test.test_formatparagraph")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 2)
(PUNCT ",")
(ID "exit")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
