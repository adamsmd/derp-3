(LIT "Extract, format and print information about Python stack traces.")
(NEWLINE)
(KEYWORD import)
(ID "linecache")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "operator")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "extract_stack")
(PUNCT ",")
(LIT "extract_tb")
(PUNCT ",")
(LIT "format_exception")
(PUNCT ",")
(LIT "format_exception_only")
(PUNCT ",")
(LIT "format_list")
(PUNCT ",")
(LIT "format_stack")
(PUNCT ",")
(LIT "format_tb")
(PUNCT ",")
(LIT "print_exc")
(PUNCT ",")
(LIT "format_exc")
(PUNCT ",")
(LIT "print_exception")
(PUNCT ",")
(LIT "print_last")
(PUNCT ",")
(LIT "print_stack")
(PUNCT ",")
(LIT "print_tb")
(PUNCT ",")
(LIT "clear_frames")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "_format_list_iter")
(PUNCT "(")
(ID "extracted_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "line")
(KEYWORD in)
(ID "extracted_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(LIT "  File \"{}\", line {}, in {}\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "item")
(PUNCT "+")
(LIT "    {}\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "item")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_list")
(PUNCT "(")
(ID "extracted_list")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print the list of tuples as returned by extract_tb() or\n    extract_stack() as a formatted stack trace to the given file.")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "_format_list_iter")
(PUNCT "(")
(ID "extracted_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "format_list")
(PUNCT "(")
(ID "extracted_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format a list of traceback entry tuples for printing.\n\n    Given a list of tuples as returned by extract_tb() or\n    extract_stack(), return a list of strings ready for printing.\n    Each string in the resulting list corresponds to the item with the\n    same index in the argument list.  Each string ends in a newline;\n    the strings may contain internal newlines as well, for those items\n    whose source text line is not None.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "_format_list_iter")
(PUNCT "(")
(ID "extracted_list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_extract_tb_or_stack_iter")
(PUNCT "(")
(ID "curr")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "extractor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "limit")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "limit")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "tracebacklimit")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "curr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(PUNCT "(")
(ID "limit")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "n")
(PUNCT "<")
(ID "limit")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "next_item")
(PUNCT "=")
(ID "extractor")
(PUNCT "(")
(ID "curr")
(PUNCT ")")
(NEWLINE)
(ID "co")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "f_code")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_filename")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "co")
(PUNCT ".")
(ID "co_name")
(NEWLINE)
(ID "linecache")
(PUNCT ".")
(ID "checkcache")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "linecache")
(PUNCT ".")
(ID "getline")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "f")
(PUNCT ".")
(ID "f_globals")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "curr")
(PUNCT "=")
(ID "next_item")
(NEWLINE)
(ID "n")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_extract_tb_iter")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_extract_tb_or_stack_iter")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "operator")
(PUNCT ".")
(ID "attrgetter")
(PUNCT "(")
(LIT "tb_frame")
(PUNCT ",")
(LIT "tb_lineno")
(PUNCT ",")
(LIT "tb_next")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_tb")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print up to 'limit' stack trace entries from the traceback 'tb'.\n\n    If 'limit' is omitted or None, all entries are printed.  If 'file'\n    is omitted or None, the output goes to sys.stderr; otherwise\n    'file' should be an open file or file-like object with a write()\n    method.\n    ")
(NEWLINE)
(ID "print_list")
(PUNCT "(")
(ID "extract_tb")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_tb")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A shorthand for 'format_list(extract_tb(tb, limit))'.")
(NEWLINE)
(KEYWORD return)
(ID "format_list")
(PUNCT "(")
(ID "extract_tb")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "extract_tb")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of up to limit pre-processed entries from traceback.\n\n    This is useful for alternate formatting of stack traces.  If\n    'limit' is omitted or None, all entries are extracted.  A\n    pre-processed stack trace entry is a quadruple (filename, line\n    number, function name, text) representing the information that is\n    usually printed for a stack trace.  The text is a string with\n    leading and trailing whitespace stripped; if the source is not\n    available it is None.\n    ")
(NEWLINE)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "_extract_tb_iter")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_cause_message")
(PUNCT "=")
(PUNCT "(")
(LIT "\nThe above exception was the direct cause ")
(LIT "of the following exception:\n")
(PUNCT ")")
(NEWLINE)
(ID "_context_message")
(PUNCT "=")
(PUNCT "(")
(LIT "\nDuring handling of the above exception, ")
(LIT "another exception occurred:\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_iter_chain")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "custom_tb")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "seen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "seen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seen")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "seen")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(ID "its")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "context")
(PUNCT "=")
(ID "exc")
(PUNCT ".")
(ID "__context__")
(NEWLINE)
(ID "cause")
(PUNCT "=")
(ID "exc")
(PUNCT ".")
(ID "__cause__")
(NEWLINE)
(KEYWORD if)
(ID "cause")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "cause")
(KEYWORD not)
(KEYWORD in)
(ID "seen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "its")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_iter_chain")
(PUNCT "(")
(ID "cause")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "seen")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "its")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "_cause_message")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "exc")
(PUNCT ".")
(ID "__suppress_context__")
(KEYWORD and)
(ID "context")
(KEYWORD not)
(KEYWORD in)
(ID "seen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "its")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_iter_chain")
(PUNCT "(")
(ID "context")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "seen")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "its")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "_context_message")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "its")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "custom_tb")
(KEYWORD or)
(ID "exc")
(PUNCT ".")
(ID "__traceback__")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "it")
(KEYWORD in)
(ID "its")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "it")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_format_exception_iter")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "chain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "chain")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(ID "_iter_chain")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "value")
(PUNCT ",")
(ID "tb")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "value")
(PUNCT "+")
(LIT "\n")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "Traceback (most recent call last):\n")
(NEWLINE)
(KEYWORD yield)
(KEYWORD from)
(ID "_format_list_iter")
(PUNCT "(")
(ID "_extract_tb_iter")
(PUNCT "(")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "_format_exception_only_iter")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_exception")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.\n\n    This differs from print_tb() in the following ways: (1) if\n    traceback is not None, it prints a header \"Traceback (most recent\n    call last):\"; (2) it prints the exception type and value after the\n    stack trace; (3) if type is SyntaxError and value has the\n    appropriate format, it prints the line where the syntax error\n    occurred with a caret on the next line indicating the approximate\n    position of the error.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "_format_exception_iter")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "chain")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "format_exception")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format a stack trace and the exception information.\n\n    The arguments have the same meaning as the corresponding arguments\n    to print_exception().  The return value is a list of strings, each\n    ending in a newline and some containing internal newlines.  When\n    these lines are concatenated and printed, exactly the same text is\n    printed as does print_exception().\n    ")
(NEWLINE)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "_format_exception_iter")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "chain")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_exception_only")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format the exception part of a traceback.\n\n    The arguments are the exception type and value such as given by\n    sys.last_type and sys.last_value. The return value is a list of\n    strings, each ending in a newline.\n\n    Normally, the list contains a single string; however, for\n    SyntaxError exceptions, it contains several lines that (when\n    printed) display detailed information about where the syntax\n    error occurred.\n\n    The message indicating which exception occurred is always the last\n    string in the list.\n\n    ")
(NEWLINE)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "_format_exception_only_iter")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_exception_only_iter")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "etype")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_format_final_exc_line")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "stype")
(PUNCT "=")
(ID "etype")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(ID "smod")
(PUNCT "=")
(ID "etype")
(PUNCT ".")
(ID "__module__")
(NEWLINE)
(KEYWORD if)
(ID "smod")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "__main__")
(PUNCT ",")
(LIT "builtins")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stype")
(PUNCT "=")
(ID "smod")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "stype")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "issubclass")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "SyntaxError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_format_final_exc_line")
(PUNCT "(")
(ID "stype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "filename")
(KEYWORD or)
(LIT "<string>")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "lineno")
(PUNCT ")")
(KEYWORD or)
(LIT "?")
(NEWLINE)
(KEYWORD yield)
(LIT "  File \"{}\", line {}\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(ID "badline")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "text")
(NEWLINE)
(ID "offset")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "offset")
(NEWLINE)
(KEYWORD if)
(ID "badline")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "    {}\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "badline")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "offset")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "caretspace")
(PUNCT "=")
(ID "badline")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "offset")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "caretspace")
(PUNCT ")")
(PUNCT ",")
(ID "offset")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "caretspace")
(PUNCT "=")
(ID "caretspace")
(PUNCT "[")
(PUNCT ":")
(ID "offset")
(PUNCT "]")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "caretspace")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "c")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(ID "c")
(KEYWORD or)
(LIT " ")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "caretspace")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(LIT "    {}^\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "caretspace")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "msg")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "msg")
(KEYWORD or)
(LIT "<no detail available>")
(NEWLINE)
(KEYWORD yield)
(LIT "{}: {}\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "stype")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_final_exc_line")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "valuestr")
(PUNCT "=")
(ID "_some_str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(KEYWORD not)
(ID "valuestr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT "%s\n")
(PUNCT "%")
(ID "etype")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "valuestr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_some_str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<unprintable %s object>")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_exc")
(PUNCT "(")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shorthand for 'print_exception(*sys.exc_info(), limit, file)'.")
(NEWLINE)
(ID "print_exception")
(PUNCT "(")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(ID "chain")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_exc")
(PUNCT "(")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like print_exc() but return a string.")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "format_exception")
(PUNCT "(")
(PUNCT "*")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(ID "chain")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_last")
(PUNCT "(")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "chain")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This is a shorthand for 'print_exception(sys.last_type,\n    sys.last_value, sys.last_traceback, limit, file)'.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "sys")
(PUNCT ",")
(LIT "last_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no last exception")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print_exception")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "last_type")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "last_value")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "last_traceback")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "chain")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_extract_stack_iter")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_extract_tb_or_stack_iter")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "limit")
(PUNCT ",")
(KEYWORD lambda)
(ID "f")
(PUNCT ":")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "f")
(PUNCT ".")
(ID "f_lineno")
(PUNCT ",")
(ID "f")
(PUNCT ".")
(ID "f_back")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_stack")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "f")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "_getframe")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "f_back")
(PUNCT ".")
(ID "f_back")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_stack")
(PUNCT "(")
(ID "f")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print a stack trace from its invocation point.\n\n    The optional 'f' argument can be used to specify an alternate\n    stack frame at which to start. The optional 'limit' and 'file'\n    arguments have the same meaning as for print_exception().\n    ")
(NEWLINE)
(ID "print_list")
(PUNCT "(")
(ID "extract_stack")
(PUNCT "(")
(ID "_get_stack")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_stack")
(PUNCT "(")
(ID "f")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shorthand for 'format_list(extract_stack(f, limit))'.")
(NEWLINE)
(KEYWORD return)
(ID "format_list")
(PUNCT "(")
(ID "extract_stack")
(PUNCT "(")
(ID "_get_stack")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "extract_stack")
(PUNCT "(")
(ID "f")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract the raw traceback from the current stack frame.\n\n    The return value has the same format as for extract_tb().  The\n    optional 'f' and 'limit' arguments have the same meaning as for\n    print_stack().  Each item in the list is a quadruple (filename,\n    line number, function name, text), and the entries are in order\n    from oldest to newest stack frame.\n    ")
(NEWLINE)
(ID "stack")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "_extract_stack_iter")
(PUNCT "(")
(ID "_get_stack")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ",")
(ID "limit")
(PUNCT "=")
(ID "limit")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "stack")
(PUNCT ".")
(ID "reverse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "stack")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clear_frames")
(PUNCT "(")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear all references to local variables in the frames of a traceback.")
(NEWLINE)
(KEYWORD while)
(ID "tb")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tb")
(PUNCT ".")
(ID "tb_frame")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RuntimeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "tb")
(PUNCT "=")
(ID "tb")
(PUNCT ".")
(ID "tb_next")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
