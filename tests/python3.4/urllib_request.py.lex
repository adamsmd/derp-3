(LIT "An extensible library for opening URLs using a variety of protocols\n\nThe simplest way to use this module is to call the urlopen function,\nwhich accepts a string containing a URL or a Request object (described\nbelow).  It opens the URL and returns the results as file-like\nobject; the returned object has some extra methods described below.\n\nThe OpenerDirector manages a collection of Handler objects that do\nall the actual work.  Each Handler implements a particular protocol or\noption.  The OpenerDirector is a composite object that invokes the\nHandlers needed to open the requested URL.  For example, the\nHTTPHandler performs HTTP GET and POST requests and deals with\nnon-error returns.  The HTTPRedirectHandler automatically deals with\nHTTP 301, 302, 303 and 307 redirect errors, and the HTTPDigestAuthHandler\ndeals with digest authentication.\n\nurlopen(url, data=None) -- Basic usage is the same as original\nurllib.  pass the url and optionally data to post to an HTTP URL, and\nget a file-like object back.  One difference is that you can also pass\na Request instance instead of URL.  Raises a URLError (subclass of\nOSError); for HTTP errors, raises an HTTPError, which can also be\ntreated as a valid response.\n\nbuild_opener -- Function that creates a new OpenerDirector instance.\nWill install the default handlers.  Accepts one or more Handlers as\narguments, either instances or Handler classes that it will\ninstantiate.  If one of the argument is a subclass of the default\nhandler, the argument will be installed instead of the default.\n\ninstall_opener -- Installs a new opener as the default opener.\n\nobjects of interest:\n\nOpenerDirector -- Sets up the User Agent as the Python-urllib client and manages\nthe Handler classes, while dealing with requests and responses.\n\nRequest -- An object that encapsulates the state of a request.  The\nstate can be as simple as the URL.  It can also include extra HTTP\nheaders, e.g. a User-Agent.\n\nBaseHandler --\n\ninternals:\nBaseHandler and parent\n_call_chain conventions\n\nExample usage:\n\nimport urllib.request\n\n# set up authentication info\nauthinfo = urllib.request.HTTPBasicAuthHandler()\nauthinfo.add_password(realm='PDQ Application',\n                      uri='https://mahler:8092/site-updates.py',\n                      user='klem',\n                      passwd='geheim$parole')\n\nproxy_support = urllib.request.ProxyHandler({\"http\" : \"http://ahad-haam:3128\"})\n\n# build a new opener that adds authentication and caching FTP handlers\nopener = urllib.request.build_opener(proxy_support, authinfo,\n                                     urllib.request.CacheFTPHandler)\n\n# install it\nurllib.request.install_opener(opener)\n\nf = urllib.request.urlopen('http://www.python.org/')\n")
(NEWLINE)
(KEYWORD import)
(ID "base64")
(NEWLINE)
(KEYWORD import)
(ID "bisect")
(NEWLINE)
(KEYWORD import)
(ID "email")
(NEWLINE)
(KEYWORD import)
(ID "hashlib")
(NEWLINE)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "client")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "posixpath")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "tempfile")
(NEWLINE)
(KEYWORD import)
(ID "contextlib")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "error")
(KEYWORD import)
(ID "URLError")
(PUNCT ",")
(ID "HTTPError")
(PUNCT ",")
(ID "ContentTooShortError")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(KEYWORD import)
(PUNCT "(")
(ID "urlparse")
(PUNCT ",")
(ID "urlsplit")
(PUNCT ",")
(ID "urljoin")
(PUNCT ",")
(ID "unwrap")
(PUNCT ",")
(ID "quote")
(PUNCT ",")
(ID "unquote")
(PUNCT ",")
(ID "splittype")
(PUNCT ",")
(ID "splithost")
(PUNCT ",")
(ID "splitport")
(PUNCT ",")
(ID "splituser")
(PUNCT ",")
(ID "splitpasswd")
(PUNCT ",")
(ID "splitattr")
(PUNCT ",")
(ID "splitquery")
(PUNCT ",")
(ID "splitvalue")
(PUNCT ",")
(ID "splittag")
(PUNCT ",")
(ID "to_bytes")
(PUNCT ",")
(ID "unquote_to_bytes")
(PUNCT ",")
(ID "urlunparse")
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "response")
(KEYWORD import)
(ID "addinfourl")
(PUNCT ",")
(ID "addclosehook")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_have_ssl")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_have_ssl")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Request")
(PUNCT ",")
(LIT "OpenerDirector")
(PUNCT ",")
(LIT "BaseHandler")
(PUNCT ",")
(LIT "HTTPDefaultErrorHandler")
(PUNCT ",")
(LIT "HTTPRedirectHandler")
(PUNCT ",")
(LIT "HTTPCookieProcessor")
(PUNCT ",")
(LIT "ProxyHandler")
(PUNCT ",")
(LIT "HTTPPasswordMgr")
(PUNCT ",")
(LIT "HTTPPasswordMgrWithDefaultRealm")
(PUNCT ",")
(LIT "AbstractBasicAuthHandler")
(PUNCT ",")
(LIT "HTTPBasicAuthHandler")
(PUNCT ",")
(LIT "ProxyBasicAuthHandler")
(PUNCT ",")
(LIT "AbstractDigestAuthHandler")
(PUNCT ",")
(LIT "HTTPDigestAuthHandler")
(PUNCT ",")
(LIT "ProxyDigestAuthHandler")
(PUNCT ",")
(LIT "HTTPHandler")
(PUNCT ",")
(LIT "FileHandler")
(PUNCT ",")
(LIT "FTPHandler")
(PUNCT ",")
(LIT "CacheFTPHandler")
(PUNCT ",")
(LIT "DataHandler")
(PUNCT ",")
(LIT "UnknownHandler")
(PUNCT ",")
(LIT "HTTPErrorProcessor")
(PUNCT ",")
(LIT "urlopen")
(PUNCT ",")
(LIT "install_opener")
(PUNCT ",")
(LIT "build_opener")
(PUNCT ",")
(LIT "pathname2url")
(PUNCT ",")
(LIT "url2pathname")
(PUNCT ",")
(LIT "getproxies")
(PUNCT ",")
(LIT "urlretrieve")
(PUNCT ",")
(LIT "urlcleanup")
(PUNCT ",")
(LIT "URLopener")
(PUNCT ",")
(LIT "FancyURLopener")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "_opener")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "urlopen")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "cafile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "capath")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cadefault")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_opener")
(NEWLINE)
(KEYWORD if)
(ID "cafile")
(KEYWORD or)
(ID "capath")
(KEYWORD or)
(ID "cadefault")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "You can't pass both context and any of cafile, capath, and ")
(LIT "cadefault")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "SSL support not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "create_default_context")
(PUNCT "(")
(ID "ssl")
(PUNCT ".")
(ID "Purpose")
(PUNCT ".")
(ID "SERVER_AUTH")
(PUNCT ",")
(ID "cafile")
(PUNCT "=")
(ID "cafile")
(PUNCT ",")
(ID "capath")
(PUNCT "=")
(ID "capath")
(PUNCT ")")
(NEWLINE)
(ID "https_handler")
(PUNCT "=")
(ID "HTTPSHandler")
(PUNCT "(")
(ID "context")
(PUNCT "=")
(ID "context")
(PUNCT ")")
(NEWLINE)
(ID "opener")
(PUNCT "=")
(ID "build_opener")
(PUNCT "(")
(ID "https_handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "context")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "https_handler")
(PUNCT "=")
(ID "HTTPSHandler")
(PUNCT "(")
(ID "context")
(PUNCT "=")
(ID "context")
(PUNCT ")")
(NEWLINE)
(ID "opener")
(PUNCT "=")
(ID "build_opener")
(PUNCT "(")
(ID "https_handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_opener")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_opener")
(PUNCT "=")
(ID "opener")
(PUNCT "=")
(ID "build_opener")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opener")
(PUNCT "=")
(ID "_opener")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "opener")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "install_opener")
(PUNCT "(")
(ID "opener")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_opener")
(NEWLINE)
(ID "_opener")
(PUNCT "=")
(ID "opener")
(NEWLINE)
(DEDENT)
(ID "_url_tempfiles")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "urlretrieve")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "reporthook")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Retrieve a URL into a temporary location on disk.\n\n    Requires a URL argument. If a filename is passed, it is used as\n    the temporary file location. The reporthook argument should be\n    a callable that accepts a block number, a read size, and the\n    total file size of the URL target. The data argument should be\n    valid URL encoded data.\n\n    If a filename is passed and the URL points to a local resource,\n    the result is a copy from local file to new file.\n\n    Returns a tuple containing the path to the newly created\n    data file as well as the resulting HTTPMessage object.\n    ")
(NEWLINE)
(ID "url_type")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "contextlib")
(PUNCT ".")
(ID "closing")
(PUNCT "(")
(ID "urlopen")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "url_type")
(PUNCT "==")
(LIT "file")
(KEYWORD and)
(KEYWORD not)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ",")
(ID "headers")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tfp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tfp")
(PUNCT "=")
(ID "tempfile")
(PUNCT ".")
(ID "NamedTemporaryFile")
(PUNCT "(")
(ID "delete")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "tfp")
(PUNCT ".")
(ID "name")
(NEWLINE)
(ID "_url_tempfiles")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "tfp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "filename")
(PUNCT ",")
(ID "headers")
(NEWLINE)
(ID "bs")
(PUNCT "=")
(LIT 1024)
(PUNCT "*")
(LIT 8)
(NEWLINE)
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "read")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "blocknum")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(LIT "content-length")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "headers")
(PUNCT "[")
(LIT "Content-Length")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "reporthook")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reporthook")
(PUNCT "(")
(ID "blocknum")
(PUNCT ",")
(ID "bs")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "block")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "bs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "block")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "read")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "block")
(PUNCT ")")
(NEWLINE)
(ID "tfp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "block")
(PUNCT ")")
(NEWLINE)
(ID "blocknum")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "reporthook")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reporthook")
(PUNCT "(")
(ID "blocknum")
(PUNCT ",")
(ID "bs")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "size")
(PUNCT ">=")
(LIT 0)
(KEYWORD and)
(ID "read")
(PUNCT "<")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ContentTooShortError")
(PUNCT "(")
(LIT "retrieval incomplete: got only %i out of %i bytes")
(PUNCT "%")
(PUNCT "(")
(ID "read")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "urlcleanup")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "temp_file")
(KEYWORD in)
(ID "_url_tempfiles")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "temp_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "_url_tempfiles")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD global)
(ID "_opener")
(NEWLINE)
(KEYWORD if)
(ID "_opener")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_opener")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_cut_port_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT ":\\d+$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "request_host")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    ")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "full_url")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "urlparse")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "get_header")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT "=")
(ID "_cut_port_re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "host")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Request")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "origin_req_host")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "unverifiable")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "full_url")
(PUNCT "=")
(ID "url")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_header")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "origin_req_host")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "origin_req_host")
(PUNCT "=")
(ID "request_host")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "origin_req_host")
(PUNCT "=")
(ID "origin_req_host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "unverifiable")
(PUNCT "=")
(ID "unverifiable")
(NEWLINE)
(KEYWORD if)
(ID "method")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "method")
(PUNCT "=")
(ID "method")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "full_url")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fragment")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "{}#{}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_full_url")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fragment")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_full_url")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "full_url")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "full_url")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_full_url")
(PUNCT "=")
(ID "unwrap")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_full_url")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fragment")
(PUNCT "=")
(ID "splittag")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_full_url")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_parse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "full_url")
(PUNCT ".")
(ID "deleter")
(NEWLINE)
(KEYWORD def)
(ID "full_url")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_full_url")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fragment")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "selector")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "data")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_data")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "data")
(PUNCT ".")
(ID "setter")
(NEWLINE)
(KEYWORD def)
(ID "data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "data")
(PUNCT ".")
(ID "deleter")
(NEWLINE)
(KEYWORD def)
(ID "data")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_full_url")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unknown url type: %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "full_url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_method")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a string indicating the HTTP request method.")
(NEWLINE)
(ID "default_method")
(PUNCT "=")
(LIT "POST")
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "data")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD else)
(LIT "GET")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "method")
(PUNCT ",")
(ID "default_method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_full_url")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "full_url")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_proxy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(LIT "https")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "selector")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "full_url")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_proxy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "selector")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "full_url")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "[")
(ID "key")
(PUNCT ".")
(ID "capitalize")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_unredirected_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT "[")
(ID "key")
(PUNCT ".")
(ID "capitalize")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "header_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "headers")
(KEYWORD or)
(ID "header_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header_name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "header_name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "header_name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "header_name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "header_name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "header_items")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hdrs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "hdrs")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "hdrs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OpenerDirector")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "client_version")
(PUNCT "=")
(LIT "Python-urllib/%s")
(PUNCT "%")
(ID "__version__")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addheaders")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "User-agent")
(PUNCT ",")
(ID "client_version")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handlers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handle_open")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handle_error")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "process_response")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "process_request")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "handler")
(PUNCT ",")
(LIT "add_parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected BaseHandler instance, got %r")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "added")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "meth")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "meth")
(KEYWORD in)
(PUNCT "[")
(LIT "redirect_request")
(PUNCT ",")
(LIT "do_open")
(PUNCT ",")
(LIT "proxy_open")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "meth")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "protocol")
(PUNCT "=")
(ID "meth")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "condition")
(PUNCT "=")
(ID "meth")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "condition")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "error")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "=")
(ID "condition")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "_")
(PUNCT ")")
(PUNCT "+")
(ID "i")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "kind")
(PUNCT "=")
(ID "meth")
(PUNCT "[")
(ID "j")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "lookup")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_error")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "handle_error")
(PUNCT "[")
(ID "protocol")
(PUNCT "]")
(PUNCT "=")
(ID "lookup")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "condition")
(PUNCT "==")
(LIT "open")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(ID "lookup")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_open")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "condition")
(PUNCT "==")
(LIT "response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(ID "lookup")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "process_response")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "condition")
(PUNCT "==")
(LIT "request")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kind")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(ID "lookup")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "process_request")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "handlers")
(PUNCT "=")
(ID "lookup")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(ID "kind")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bisect")
(PUNCT ".")
(ID "insort")
(PUNCT "(")
(ID "handlers")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handlers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "added")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "added")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bisect")
(PUNCT ".")
(ID "insort")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "handlers")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(ID "handler")
(PUNCT ".")
(ID "add_parent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_call_chain")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "chain")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "meth_name")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handlers")
(PUNCT "=")
(ID "chain")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "kind")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "handler")
(KEYWORD in)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "handler")
(PUNCT ",")
(ID "meth_name")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "fullurl")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req")
(PUNCT "=")
(ID "Request")
(PUNCT "(")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req")
(PUNCT "=")
(ID "fullurl")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "req")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(ID "protocol")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "type")
(NEWLINE)
(ID "meth_name")
(PUNCT "=")
(ID "protocol")
(PUNCT "+")
(LIT "_request")
(NEWLINE)
(KEYWORD for)
(ID "processor")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "process_request")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meth")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "processor")
(PUNCT ",")
(ID "meth_name")
(PUNCT ")")
(NEWLINE)
(ID "req")
(PUNCT "=")
(ID "meth")
(PUNCT "(")
(ID "req")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_open")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "meth_name")
(PUNCT "=")
(ID "protocol")
(PUNCT "+")
(LIT "_response")
(NEWLINE)
(KEYWORD for)
(ID "processor")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "process_response")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meth")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "processor")
(PUNCT ",")
(ID "meth_name")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "meth")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_chain")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "handle_open")
(PUNCT ",")
(LIT "default")
(PUNCT ",")
(LIT "default_open")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "protocol")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "type")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_chain")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "handle_open")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "protocol")
(PUNCT "+")
(LIT "_open")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_call_chain")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "handle_open")
(PUNCT ",")
(LIT "unknown")
(PUNCT ",")
(LIT "unknown_open")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "proto")
(KEYWORD in)
(PUNCT "(")
(LIT "http")
(PUNCT ",")
(LIT "https")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_error")
(PUNCT "[")
(LIT "http")
(PUNCT "]")
(NEWLINE)
(ID "proto")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "meth_name")
(PUNCT "=")
(LIT "http_error_%s")
(PUNCT "%")
(ID "proto")
(NEWLINE)
(ID "http_err")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "orig_args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_error")
(NEWLINE)
(ID "meth_name")
(PUNCT "=")
(ID "proto")
(PUNCT "+")
(LIT "_error")
(NEWLINE)
(ID "http_err")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "dict")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "meth_name")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_chain")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "result")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "http_err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "dict")
(PUNCT ",")
(LIT "default")
(PUNCT ",")
(LIT "http_error_default")
(PUNCT ")")
(PUNCT "+")
(ID "orig_args")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_call_chain")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "build_opener")
(PUNCT "(")
(PUNCT "*")
(ID "handlers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an opener object from a list of handlers.\n\n    The opener will use several default handlers, including support\n    for HTTP, FTP and when applicable HTTPS.\n\n    If any of the handlers passed as arguments are subclasses of the\n    default handlers, the default handlers will not be used.\n    ")
(NEWLINE)
(ID "opener")
(PUNCT "=")
(ID "OpenerDirector")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "default_classes")
(PUNCT "=")
(PUNCT "[")
(ID "ProxyHandler")
(PUNCT ",")
(ID "UnknownHandler")
(PUNCT ",")
(ID "HTTPHandler")
(PUNCT ",")
(ID "HTTPDefaultErrorHandler")
(PUNCT ",")
(ID "HTTPRedirectHandler")
(PUNCT ",")
(ID "FTPHandler")
(PUNCT ",")
(ID "FileHandler")
(PUNCT ",")
(ID "HTTPErrorProcessor")
(PUNCT ",")
(ID "DataHandler")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ",")
(LIT "HTTPSConnection")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_classes")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "HTTPSHandler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "skip")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "klass")
(KEYWORD in)
(ID "default_classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "check")
(KEYWORD in)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "check")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "check")
(PUNCT ",")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "check")
(PUNCT ",")
(ID "klass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "klass")
(KEYWORD in)
(ID "skip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_classes")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "klass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "klass")
(KEYWORD in)
(ID "default_classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opener")
(PUNCT ".")
(ID "add_handler")
(PUNCT "(")
(ID "klass")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "h")
(KEYWORD in)
(ID "handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "h")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT "=")
(ID "h")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "opener")
(PUNCT ".")
(ID "add_handler")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "opener")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BaseHandler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler_order")
(PUNCT "=")
(LIT 500)
(NEWLINE)
(KEYWORD def)
(ID "add_parent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT "=")
(ID "parent")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(LIT "handler_order")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "handler_order")
(PUNCT "<")
(ID "other")
(PUNCT ".")
(ID "handler_order")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPErrorProcessor")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process HTTP error responses.")
(NEWLINE)
(ID "handler_order")
(PUNCT "=")
(LIT 1000)
(NEWLINE)
(KEYWORD def)
(ID "http_response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "response")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "hdrs")
(PUNCT "=")
(ID "response")
(PUNCT ".")
(ID "code")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "msg")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(LIT 200)
(PUNCT "<=")
(ID "code")
(PUNCT "<")
(LIT 300)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "http")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "response")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "hdrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(ID "https_response")
(PUNCT "=")
(ID "http_response")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HTTPDefaultErrorHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "hdrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "hdrs")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPRedirectHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_repeats")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "max_redirections")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(KEYWORD def)
(ID "redirect_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "newurl")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a Request or None in response to a redirect.\n\n        This is called by the http_error_30x methods when a\n        redirection response is received.  If a redirection should\n        take place, return a new Request to allow http_error_30x to\n        perform the redirect.  Otherwise, raise HTTPError if no-one\n        else should try to handle this url.  Return None if you can't\n        but another Handler might.\n        ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "get_method")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(PUNCT "(")
(ID "code")
(KEYWORD in)
(PUNCT "(")
(LIT 301)
(PUNCT ",")
(LIT 302)
(PUNCT ",")
(LIT 303)
(PUNCT ",")
(LIT 307)
(PUNCT ")")
(KEYWORD and)
(ID "m")
(KEYWORD in)
(PUNCT "(")
(LIT "GET")
(PUNCT ",")
(LIT "HEAD")
(PUNCT ")")
(KEYWORD or)
(ID "code")
(KEYWORD in)
(PUNCT "(")
(LIT 301)
(PUNCT ",")
(LIT 302)
(PUNCT ",")
(LIT 303)
(PUNCT ")")
(KEYWORD and)
(ID "m")
(PUNCT "==")
(LIT "POST")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "newurl")
(PUNCT "=")
(ID "newurl")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT "%20")
(PUNCT ")")
(NEWLINE)
(ID "CONTENT_HEADERS")
(PUNCT "=")
(PUNCT "(")
(LIT "content-length")
(PUNCT ",")
(LIT "content-type")
(PUNCT ")")
(NEWLINE)
(ID "newheaders")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "req")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "k")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(ID "CONTENT_HEADERS")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "Request")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(ID "newheaders")
(PUNCT ",")
(ID "origin_req_host")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "origin_req_host")
(PUNCT ",")
(ID "unverifiable")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_302")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "location")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newurl")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(LIT "location")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "uri")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newurl")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(LIT "uri")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "urlparts")
(PUNCT "=")
(ID "urlparse")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "urlparts")
(PUNCT ".")
(ID "scheme")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "http")
(PUNCT ",")
(LIT "https")
(PUNCT ",")
(LIT "ftp")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(LIT "%s - Redirection to url '%s' is not allowed")
(PUNCT "%")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "newurl")
(PUNCT ")")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "urlparts")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "urlparts")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "urlparts")
(PUNCT ")")
(NEWLINE)
(ID "urlparts")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "newurl")
(PUNCT "=")
(ID "urlunparse")
(PUNCT "(")
(ID "urlparts")
(PUNCT ")")
(NEWLINE)
(ID "newurl")
(PUNCT "=")
(ID "urljoin")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ",")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "redirect_request")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "new")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(LIT "redirect_dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "visited")
(PUNCT "=")
(ID "new")
(PUNCT ".")
(ID "redirect_dict")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "redirect_dict")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "visited")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "max_repeats")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "visited")
(PUNCT ")")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "max_redirections")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "inf_msg")
(PUNCT "+")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "visited")
(PUNCT "=")
(ID "new")
(PUNCT ".")
(ID "redirect_dict")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "redirect_dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "visited")
(PUNCT "[")
(ID "newurl")
(PUNCT "]")
(PUNCT "=")
(ID "visited")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "new")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "http_error_301")
(PUNCT "=")
(ID "http_error_303")
(PUNCT "=")
(ID "http_error_307")
(PUNCT "=")
(ID "http_error_302")
(NEWLINE)
(ID "inf_msg")
(PUNCT "=")
(LIT "The HTTP server returned a redirect error that would ")
(LIT "lead to an infinite loop.\n")
(LIT "The last 30x error message was:\n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_proxy")
(PUNCT "(")
(ID "proxy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return (scheme, user, password, host/port) given a URL or an authority.\n\n    If a URL is supplied, it must have an authority (host:port) component.\n    According to RFC 3986, having an authority component means the URL must\n    have two slashes after the scheme.\n    ")
(NEWLINE)
(ID "scheme")
(PUNCT ",")
(ID "r_scheme")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "r_scheme")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "authority")
(PUNCT "=")
(ID "proxy")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "r_scheme")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "//")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "proxy URL with no authority: %r")
(PUNCT "%")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "end")
(PUNCT "=")
(ID "r_scheme")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "end")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "end")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "authority")
(PUNCT "=")
(ID "r_scheme")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(ID "end")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "userinfo")
(PUNCT ",")
(ID "hostport")
(PUNCT "=")
(ID "splituser")
(PUNCT "(")
(ID "authority")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "userinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT "=")
(ID "splitpasswd")
(PUNCT "(")
(ID "userinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT "=")
(ID "password")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "scheme")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ",")
(ID "hostport")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ProxyHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler_order")
(PUNCT "=")
(LIT 100)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "proxies")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "proxies")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxies")
(PUNCT "=")
(ID "getproxies")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "hasattr")
(PUNCT "(")
(ID "proxies")
(PUNCT ",")
(LIT "keys")
(PUNCT ")")
(PUNCT ",")
(LIT "proxies must be a mapping")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "=")
(ID "proxies")
(NEWLINE)
(KEYWORD for)
(ID "type")
(PUNCT ",")
(ID "url")
(KEYWORD in)
(ID "proxies")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "%s_open")
(PUNCT "%")
(ID "type")
(PUNCT ",")
(KEYWORD lambda)
(ID "r")
(PUNCT ",")
(ID "proxy")
(PUNCT "=")
(ID "url")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ",")
(ID "meth")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proxy_open")
(PUNCT ":")
(ID "meth")
(PUNCT "(")
(ID "r")
(PUNCT ",")
(ID "proxy")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "proxy_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "proxy")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_type")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "type")
(NEWLINE)
(ID "proxy_type")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ",")
(ID "hostport")
(PUNCT "=")
(ID "_parse_proxy")
(PUNCT "(")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "proxy_type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxy_type")
(PUNCT "=")
(ID "orig_type")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "req")
(PUNCT ".")
(ID "host")
(KEYWORD and)
(ID "proxy_bypass")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "user")
(KEYWORD and)
(ID "password")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_pass")
(PUNCT "=")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "unquote")
(PUNCT "(")
(ID "user")
(PUNCT ")")
(PUNCT ",")
(ID "unquote")
(PUNCT "(")
(ID "password")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "creds")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "b64encode")
(PUNCT "(")
(ID "user_pass")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "req")
(PUNCT ".")
(ID "add_header")
(PUNCT "(")
(LIT "Proxy-authorization")
(PUNCT ",")
(LIT "Basic ")
(PUNCT "+")
(ID "creds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "hostport")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "hostport")
(PUNCT ")")
(NEWLINE)
(ID "req")
(PUNCT ".")
(ID "set_proxy")
(PUNCT "(")
(ID "hostport")
(PUNCT ",")
(ID "proxy_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "orig_type")
(PUNCT "==")
(ID "proxy_type")
(KEYWORD or)
(ID "orig_type")
(PUNCT "==")
(LIT "https")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPPasswordMgr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_password")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "uri")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "uri")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "uri")
(PUNCT "=")
(PUNCT "[")
(ID "uri")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "realm")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT "[")
(ID "realm")
(PUNCT "]")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "default_port")
(KEYWORD in)
(KEYWORD True)
(PUNCT ",")
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reduced_uri")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "reduce_uri")
(PUNCT "(")
(ID "u")
(PUNCT ",")
(ID "default_port")
(PUNCT ")")
(KEYWORD for)
(ID "u")
(KEYWORD in)
(ID "uri")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT "[")
(ID "realm")
(PUNCT "]")
(PUNCT "[")
(ID "reduced_uri")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_user_password")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "authuri")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domains")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "realm")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "default_port")
(KEYWORD in)
(KEYWORD True)
(PUNCT ",")
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reduced_authuri")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "reduce_uri")
(PUNCT "(")
(ID "authuri")
(PUNCT ",")
(ID "default_port")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "uris")
(PUNCT ",")
(ID "authinfo")
(KEYWORD in)
(ID "domains")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "uri")
(KEYWORD in)
(ID "uris")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_suburi")
(PUNCT "(")
(ID "uri")
(PUNCT ",")
(ID "reduced_authuri")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "authinfo")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reduce_uri")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "uri")
(PUNCT ",")
(ID "default_port")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Accept authority or URI and extract only the authority and path.")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "urlsplit")
(PUNCT "(")
(ID "uri")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "authority")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(KEYWORD or)
(LIT "/")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "authority")
(PUNCT "=")
(ID "uri")
(NEWLINE)
(ID "path")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "authority")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "default_port")
(KEYWORD and)
(ID "port")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "scheme")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dport")
(PUNCT "=")
(PUNCT "{")
(LIT "http")
(PUNCT ":")
(LIT 80)
(PUNCT ",")
(LIT "https")
(PUNCT ":")
(LIT 443)
(PUNCT ",")
(PUNCT "}")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "scheme")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dport")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authority")
(PUNCT "=")
(LIT "%s:%d")
(PUNCT "%")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "dport")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "authority")
(PUNCT ",")
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_suburi")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "base")
(PUNCT ",")
(ID "test")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if test is below base in a URI tree\n\n        Both args must be URIs in reduced form.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "base")
(PUNCT "==")
(ID "test")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "base")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(ID "test")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "common")
(PUNCT "=")
(ID "posixpath")
(PUNCT ".")
(ID "commonprefix")
(PUNCT "(")
(PUNCT "(")
(ID "base")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "test")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "common")
(PUNCT ")")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "base")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPPasswordMgrWithDefaultRealm")
(PUNCT "(")
(ID "HTTPPasswordMgr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "find_user_password")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "authuri")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT "=")
(ID "HTTPPasswordMgr")
(PUNCT ".")
(ID "find_user_password")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "authuri")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "user")
(PUNCT ",")
(ID "password")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "HTTPPasswordMgr")
(PUNCT ".")
(ID "find_user_password")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "authuri")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AbstractBasicAuthHandler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rx")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(?:.*,)*[ \t]*([^ \t]+)[ \t]+")
(LIT "realm=([\"']?)([^\"']*)\\2")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "password_mgr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "password_mgr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "password_mgr")
(PUNCT "=")
(ID "HTTPPasswordMgr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT "=")
(ID "password_mgr")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add_password")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ".")
(ID "add_password")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_auth_reqed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "authreq")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authreq")
(PUNCT "=")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "authreq")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "authreq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT "=")
(ID "authreq")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "scheme")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "basic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "AbstractBasicAuthHandler does not")
(LIT " support the following scheme: '%s'")
(PUNCT "%")
(ID "scheme")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mo")
(PUNCT "=")
(ID "AbstractBasicAuthHandler")
(PUNCT ".")
(ID "rx")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "authreq")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT ",")
(ID "quote")
(PUNCT ",")
(ID "realm")
(PUNCT "=")
(ID "mo")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "quote")
(KEYWORD not)
(KEYWORD in)
(PUNCT "[")
(LIT "\"")
(PUNCT ",")
(LIT "'")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Basic Auth Realm was unquoted")
(PUNCT ",")
(ID "UserWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "scheme")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "basic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "retry_http_basic_auth")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "realm")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "retry_http_basic_auth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "realm")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT ",")
(ID "pw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ".")
(ID "find_user_password")
(PUNCT "(")
(ID "realm")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pw")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "raw")
(PUNCT "=")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "pw")
(PUNCT ")")
(NEWLINE)
(ID "auth")
(PUNCT "=")
(LIT "Basic ")
(PUNCT "+")
(ID "base64")
(PUNCT ".")
(ID "b64encode")
(PUNCT "(")
(ID "raw")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "req")
(PUNCT ".")
(ID "get_header")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "auth_header")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "==")
(ID "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "req")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "auth_header")
(PUNCT ",")
(ID "auth")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPBasicAuthHandler")
(PUNCT "(")
(ID "AbstractBasicAuthHandler")
(PUNCT ",")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth_header")
(PUNCT "=")
(LIT "Authorization")
(NEWLINE)
(KEYWORD def)
(ID "http_error_401")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "full_url")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "http_error_auth_reqed")
(PUNCT "(")
(LIT "www-authenticate")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ProxyBasicAuthHandler")
(PUNCT "(")
(ID "AbstractBasicAuthHandler")
(PUNCT ",")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth_header")
(PUNCT "=")
(LIT "Proxy-authorization")
(NEWLINE)
(KEYWORD def)
(ID "http_error_407")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authority")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "host")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "http_error_auth_reqed")
(PUNCT "(")
(LIT "proxy-authenticate")
(PUNCT ",")
(ID "authority")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_randombytes")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "urandom")
(NEWLINE)
(KEYWORD class)
(ID "AbstractDigestAuthHandler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "passwd")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "passwd")
(PUNCT "=")
(ID "HTTPPasswordMgr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT "=")
(ID "passwd")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add_password")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ".")
(ID "add_password")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "retried")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "nonce_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "last_nonce")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset_retry_count")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "retried")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_auth_reqed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "auth_header")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "authreq")
(PUNCT "=")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "auth_header")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "retried")
(PUNCT ">")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ",")
(LIT 401)
(PUNCT ",")
(LIT "digest auth failed")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "retried")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "authreq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT "=")
(ID "authreq")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "scheme")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "digest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "retry_http_digest_auth")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "authreq")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "scheme")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "basic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "AbstractDigestAuthHandler does not support")
(LIT " the following scheme: '%s'")
(PUNCT "%")
(ID "scheme")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "retry_http_digest_auth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "auth")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "token")
(PUNCT ",")
(ID "challenge")
(PUNCT "=")
(ID "auth")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "chal")
(PUNCT "=")
(ID "parse_keqv_list")
(PUNCT "(")
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "parse_http_list")
(PUNCT "(")
(ID "challenge")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "auth")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_authorization")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "chal")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth_val")
(PUNCT "=")
(LIT "Digest %s")
(PUNCT "%")
(ID "auth")
(NEWLINE)
(KEYWORD if)
(ID "req")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "auth_header")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "==")
(ID "auth_val")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "req")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "auth_header")
(PUNCT ",")
(ID "auth_val")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "req")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_cnonce")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nonce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT "%s:%s:%s:")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "nonce_count")
(PUNCT ",")
(ID "nonce")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "ctime")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "b")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(ID "_randombytes")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(NEWLINE)
(ID "dig")
(PUNCT "=")
(ID "hashlib")
(PUNCT ".")
(ID "sha1")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ".")
(ID "hexdigest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "dig")
(PUNCT "[")
(PUNCT ":")
(LIT 16)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_authorization")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "chal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "realm")
(PUNCT "=")
(ID "chal")
(PUNCT "[")
(LIT "realm")
(PUNCT "]")
(NEWLINE)
(ID "nonce")
(PUNCT "=")
(ID "chal")
(PUNCT "[")
(LIT "nonce")
(PUNCT "]")
(NEWLINE)
(ID "qop")
(PUNCT "=")
(ID "chal")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "qop")
(PUNCT ")")
(NEWLINE)
(ID "algorithm")
(PUNCT "=")
(ID "chal")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "algorithm")
(PUNCT ",")
(LIT "MD5")
(PUNCT ")")
(NEWLINE)
(ID "opaque")
(PUNCT "=")
(ID "chal")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "opaque")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "H")
(PUNCT ",")
(ID "KD")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_algorithm_impls")
(PUNCT "(")
(ID "algorithm")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "H")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "user")
(PUNCT ",")
(ID "pw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ".")
(ID "find_user_password")
(PUNCT "(")
(ID "realm")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "req")
(PUNCT ".")
(ID "data")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entdig")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_entity_digest")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "data")
(PUNCT ",")
(ID "chal")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "entdig")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "A1")
(PUNCT "=")
(LIT "%s:%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "pw")
(PUNCT ")")
(NEWLINE)
(ID "A2")
(PUNCT "=")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "get_method")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "selector")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "qop")
(PUNCT "==")
(LIT "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "nonce")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "last_nonce")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "nonce_count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "nonce_count")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "last_nonce")
(PUNCT "=")
(ID "nonce")
(NEWLINE)
(DEDENT)
(ID "ncvalue")
(PUNCT "=")
(LIT "%08x")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "nonce_count")
(NEWLINE)
(ID "cnonce")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_cnonce")
(PUNCT "(")
(ID "nonce")
(PUNCT ")")
(NEWLINE)
(ID "noncebit")
(PUNCT "=")
(LIT "%s:%s:%s:%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "nonce")
(PUNCT ",")
(ID "ncvalue")
(PUNCT ",")
(ID "cnonce")
(PUNCT ",")
(ID "qop")
(PUNCT ",")
(ID "H")
(PUNCT "(")
(ID "A2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "respdig")
(PUNCT "=")
(ID "KD")
(PUNCT "(")
(ID "H")
(PUNCT "(")
(ID "A1")
(PUNCT ")")
(PUNCT ",")
(ID "noncebit")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "qop")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "respdig")
(PUNCT "=")
(ID "KD")
(PUNCT "(")
(ID "H")
(PUNCT "(")
(ID "A1")
(PUNCT ")")
(PUNCT ",")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "nonce")
(PUNCT ",")
(ID "H")
(PUNCT "(")
(ID "A2")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "qop '%s' is not supported.")
(PUNCT "%")
(ID "qop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "base")
(PUNCT "=")
(LIT "username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"%s\", ")
(LIT "response=\"%s\"")
(PUNCT "%")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "nonce")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "selector")
(PUNCT ",")
(ID "respdig")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "opaque")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "+=")
(LIT ", opaque=\"%s\"")
(PUNCT "%")
(ID "opaque")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "entdig")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "+=")
(LIT ", digest=\"%s\"")
(PUNCT "%")
(ID "entdig")
(NEWLINE)
(DEDENT)
(ID "base")
(PUNCT "+=")
(LIT ", algorithm=\"%s\"")
(PUNCT "%")
(ID "algorithm")
(NEWLINE)
(KEYWORD if)
(ID "qop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "+=")
(LIT ", qop=auth, nc=%s, cnonce=\"%s\"")
(PUNCT "%")
(PUNCT "(")
(ID "ncvalue")
(PUNCT ",")
(ID "cnonce")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "base")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_algorithm_impls")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "algorithm")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "algorithm")
(PUNCT "==")
(LIT "MD5")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "H")
(PUNCT "=")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(ID "hashlib")
(PUNCT ".")
(ID "md5")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "hexdigest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "algorithm")
(PUNCT "==")
(LIT "SHA")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "H")
(PUNCT "=")
(KEYWORD lambda)
(ID "x")
(PUNCT ":")
(ID "hashlib")
(PUNCT ".")
(ID "sha1")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "hexdigest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "KD")
(PUNCT "=")
(KEYWORD lambda)
(ID "s")
(PUNCT ",")
(ID "d")
(PUNCT ":")
(ID "H")
(PUNCT "(")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "d")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "H")
(PUNCT ",")
(ID "KD")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_entity_digest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "chal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPDigestAuthHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ",")
(ID "AbstractDigestAuthHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An authentication protocol defined by RFC 2069\n\n    Digest authentication improves on basic authentication because it\n    does not transmit passwords in the clear.\n    ")
(NEWLINE)
(ID "auth_header")
(PUNCT "=")
(LIT "Authorization")
(NEWLINE)
(ID "handler_order")
(PUNCT "=")
(LIT 490)
(NEWLINE)
(KEYWORD def)
(ID "http_error_401")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "urlparse")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "retry")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "http_error_auth_reqed")
(PUNCT "(")
(LIT "www-authenticate")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reset_retry_count")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "retry")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ProxyDigestAuthHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ",")
(ID "AbstractDigestAuthHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth_header")
(PUNCT "=")
(LIT "Proxy-Authorization")
(NEWLINE)
(ID "handler_order")
(PUNCT "=")
(LIT 490)
(NEWLINE)
(KEYWORD def)
(ID "http_error_407")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "host")
(NEWLINE)
(ID "retry")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "http_error_auth_reqed")
(PUNCT "(")
(LIT "proxy-authenticate")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reset_retry_count")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "retry")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AbstractHTTPHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "debuglevel")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_debuglevel")
(PUNCT "=")
(ID "debuglevel")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_http_debuglevel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_debuglevel")
(PUNCT "=")
(ID "level")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "do_request_")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "host")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "no host given")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "request")
(PUNCT ".")
(ID "data")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "request")
(PUNCT ".")
(ID "data")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "POST data should be bytes or an iterable of bytes. ")
(LIT "It cannot be of type str.")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "request")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "application/x-www-form-urlencoded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "request")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mv")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "collections")
(PUNCT ".")
(ID "Iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Content-Length should be specified ")
(LIT "for iterable data of type %r %r")
(PUNCT "%")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(LIT "Content-length")
(PUNCT ",")
(LIT "%d")
(PUNCT "%")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "mv")
(PUNCT ")")
(PUNCT "*")
(ID "mv")
(PUNCT ".")
(ID "itemsize")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "sel_host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(KEYWORD if)
(ID "request")
(PUNCT ".")
(ID "has_proxy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "scheme")
(PUNCT ",")
(ID "sel")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "request")
(PUNCT ".")
(ID "selector")
(PUNCT ")")
(NEWLINE)
(ID "sel_host")
(PUNCT ",")
(ID "sel_path")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "sel")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "request")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(LIT "Host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(ID "sel_host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "addheaders")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "capitalize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "request")
(PUNCT ".")
(ID "has_header")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ".")
(ID "add_unredirected_header")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "request")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "do_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "http_class")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(PUNCT "**")
(ID "http_conn_args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an HTTPResponse object for the request, using http_class.\n\n        http_class must implement the HTTPConnection API from http.client.\n        ")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "host")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "no host given")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT "=")
(ID "http_class")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT ",")
(PUNCT "**")
(ID "http_conn_args")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "unredirected_hdrs")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "dict")
(PUNCT "(")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "req")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "k")
(KEYWORD not)
(KEYWORD in)
(ID "headers")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "[")
(LIT "Connection")
(PUNCT "]")
(PUNCT "=")
(LIT "close")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "req")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tunnel_headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "proxy_auth_hdr")
(PUNCT "=")
(LIT "Proxy-Authorization")
(NEWLINE)
(KEYWORD if)
(ID "proxy_auth_hdr")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tunnel_headers")
(PUNCT "[")
(ID "proxy_auth_hdr")
(PUNCT "]")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(ID "proxy_auth_hdr")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "headers")
(PUNCT "[")
(ID "proxy_auth_hdr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "h")
(PUNCT ".")
(ID "set_tunnel")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(ID "tunnel_headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "request")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "get_method")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "selector")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "data")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(ID "err")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "r")
(PUNCT "=")
(ID "h")
(PUNCT ".")
(ID "getresponse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "h")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "h")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "r")
(PUNCT ".")
(ID "url")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "get_full_url")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "r")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "r")
(PUNCT ".")
(ID "reason")
(NEWLINE)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPHandler")
(PUNCT "(")
(ID "AbstractHTTPHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "http_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "do_open")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPConnection")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "http_request")
(PUNCT "=")
(ID "AbstractHTTPHandler")
(PUNCT ".")
(ID "do_request_")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ",")
(LIT "HTTPSConnection")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "HTTPSHandler")
(PUNCT "(")
(ID "AbstractHTTPHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "debuglevel")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "check_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "AbstractHTTPHandler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "debuglevel")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_hostname")
(PUNCT "=")
(ID "check_hostname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "https_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "do_open")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPSConnection")
(PUNCT ",")
(ID "req")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ",")
(ID "check_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_check_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "https_request")
(PUNCT "=")
(ID "AbstractHTTPHandler")
(PUNCT ".")
(ID "do_request_")
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "HTTPSHandler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HTTPCookieProcessor")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cookiejar")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "cookiejar")
(NEWLINE)
(KEYWORD if)
(ID "cookiejar")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cookiejar")
(PUNCT "=")
(ID "http")
(PUNCT ".")
(ID "cookiejar")
(PUNCT ".")
(ID "CookieJar")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cookiejar")
(PUNCT "=")
(ID "cookiejar")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cookiejar")
(PUNCT ".")
(ID "add_cookie_header")
(PUNCT "(")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "request")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "response")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cookiejar")
(PUNCT ".")
(ID "extract_cookies")
(PUNCT "(")
(ID "response")
(PUNCT ",")
(ID "request")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(ID "https_request")
(PUNCT "=")
(ID "http_request")
(NEWLINE)
(ID "https_response")
(PUNCT "=")
(ID "http_response")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "UnknownHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "unknown_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "type")
(NEWLINE)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "unknown url type: %s")
(PUNCT "%")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "parse_keqv_list")
(PUNCT "(")
(ID "l")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse list of key=value strings where keys are not duplicated.")
(NEWLINE)
(ID "parsed")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "elt")
(KEYWORD in)
(ID "l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT "=")
(ID "elt")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "=")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "v")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(KEYWORD and)
(ID "v")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "v")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "parsed")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parsed")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_http_list")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse lists as described by RFC 2068 Section 2.\n\n    In particular, parse comma-separated lists where the elements of\n    the list may include quoted-strings.  A quoted-string could\n    contain a comma.  A non-quoted string could have quotes in the\n    middle.  Neither commas nor quotes count if they are escaped.\n    Only double-quotes count, not single-quotes.\n    ")
(NEWLINE)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "part")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "escape")
(PUNCT "=")
(ID "quote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "cur")
(KEYWORD in)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "escape")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "part")
(PUNCT "+=")
(ID "cur")
(NEWLINE)
(ID "escape")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "quote")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cur")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "escape")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cur")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quote")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "part")
(PUNCT "+=")
(ID "cur")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cur")
(PUNCT "==")
(LIT ",")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(ID "part")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cur")
(PUNCT "==")
(LIT "\"")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quote")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "part")
(PUNCT "+=")
(ID "cur")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "part")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(ID "part")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "res")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "FileHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "file_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "selector")
(NEWLINE)
(KEYWORD if)
(ID "url")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "//")
(KEYWORD and)
(ID "url")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "/")
(KEYWORD and)
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "host")
(KEYWORD and)
(ID "req")
(PUNCT ".")
(ID "host")
(PUNCT "!=")
(LIT "localhost")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "req")
(PUNCT ".")
(ID "host")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "get_names")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "file:// scheme is supported only on localhost")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open_local_file")
(PUNCT "(")
(ID "req")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "names")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "get_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "FileHandler")
(PUNCT ".")
(ID "names")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "FileHandler")
(PUNCT ".")
(ID "names")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname_ex")
(PUNCT "(")
(LIT "localhost")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "+")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname_ex")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "gaierror")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "FileHandler")
(PUNCT ".")
(ID "names")
(PUNCT "=")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(LIT "localhost")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "FileHandler")
(PUNCT ".")
(ID "names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_local_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "utils")
(NEWLINE)
(KEYWORD import)
(ID "mimetypes")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "host")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "selector")
(NEWLINE)
(ID "localfile")
(PUNCT "=")
(ID "url2pathname")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stats")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "localfile")
(PUNCT ")")
(NEWLINE)
(ID "size")
(PUNCT "=")
(ID "stats")
(PUNCT ".")
(ID "st_size")
(NEWLINE)
(ID "modified")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "utils")
(PUNCT ".")
(ID "formatdate")
(PUNCT "(")
(ID "stats")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ",")
(ID "usegmt")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "mtype")
(PUNCT "=")
(ID "mimetypes")
(PUNCT ".")
(ID "guess_type")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(LIT "Content-type: %s\nContent-length: %d\nLast-modified: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "mtype")
(KEYWORD or)
(LIT "text/plain")
(PUNCT ",")
(ID "size")
(PUNCT ",")
(ID "modified")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(KEYWORD or)
(PUNCT "(")
(KEYWORD not)
(ID "port")
(KEYWORD and)
(ID "_safe_gethostbyname")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "get_names")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "origurl")
(PUNCT "=")
(LIT "file://")
(PUNCT "+")
(ID "host")
(PUNCT "+")
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "origurl")
(PUNCT "=")
(LIT "file://")
(PUNCT "+")
(ID "filename")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "localfile")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "origurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(ID "exp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "file not on local host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_safe_gethostbyname")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "gaierror")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FTPHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "ftp_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ftplib")
(NEWLINE)
(KEYWORD import)
(ID "mimetypes")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "host")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "ftp error: no host given")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "ftplib")
(PUNCT ".")
(ID "FTP_PORT")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "user")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(ID "splituser")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "splitpasswd")
(PUNCT "(")
(ID "user")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "passwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "user")
(PUNCT "=")
(ID "user")
(KEYWORD or)
(LIT "")
(NEWLINE)
(ID "passwd")
(PUNCT "=")
(ID "passwd")
(KEYWORD or)
(LIT "")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT ",")
(ID "attrs")
(PUNCT "=")
(ID "splitattr")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "selector")
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "unquote")
(PUNCT ",")
(ID "dirs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "dirs")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "dirs")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dirs")
(KEYWORD and)
(KEYWORD not)
(ID "dirs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirs")
(PUNCT "=")
(ID "dirs")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fw")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "connect_ftp")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "type")
(PUNCT "=")
(ID "file")
(KEYWORD and)
(LIT "I")
(KEYWORD or)
(LIT "D")
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attr")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "splitvalue")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "attr")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "type")
(KEYWORD and)
(ID "value")
(KEYWORD in)
(PUNCT "(")
(LIT "a")
(PUNCT ",")
(LIT "A")
(PUNCT ",")
(LIT "i")
(PUNCT ",")
(LIT "I")
(PUNCT ",")
(LIT "d")
(PUNCT ",")
(LIT "D")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "fp")
(PUNCT ",")
(ID "retrlen")
(PUNCT "=")
(ID "fw")
(PUNCT ".")
(ID "retrfile")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "mtype")
(PUNCT "=")
(ID "mimetypes")
(PUNCT ".")
(ID "guess_type")
(PUNCT "(")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "mtype")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "+=")
(LIT "Content-type: %s\n")
(PUNCT "%")
(ID "mtype")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "retrlen")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "retrlen")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "+=")
(LIT "Content-length: %d\n")
(PUNCT "%")
(ID "retrlen")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "req")
(PUNCT ".")
(ID "full_url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ftplib")
(PUNCT ".")
(ID "all_errors")
(KEYWORD as)
(ID "exp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc")
(PUNCT "=")
(ID "URLError")
(PUNCT "(")
(LIT "ftp error: %r")
(PUNCT "%")
(ID "exp")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "exc")
(PUNCT ".")
(ID "with_traceback")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "connect_ftp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ftpwrapper")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "persistent")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "CacheFTPHandler")
(PUNCT "(")
(ID "FTPHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "soonest")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "delay")
(PUNCT "=")
(LIT 60)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "max_conns")
(PUNCT "=")
(LIT 16)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setTimeout")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "delay")
(PUNCT "=")
(ID "t")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setMaxConns")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "m")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "max_conns")
(PUNCT "=")
(ID "m")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect_ftp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "user")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirs")
(PUNCT ")")
(PUNCT ",")
(ID "timeout")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "delay")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "ftpwrapper")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "delay")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "check_cache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_cache")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "soonest")
(PUNCT "<=")
(ID "t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(PUNCT "<")
(ID "t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "soonest")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT ")")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "max_conns")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "soonest")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "soonest")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "clear_cache")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "conn")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DataHandler")
(PUNCT "(")
(ID "BaseHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "data_open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "req")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(ID "req")
(PUNCT ".")
(ID "full_url")
(NEWLINE)
(ID "scheme")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(ID "url")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "mediatype")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "unquote_to_bytes")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mediatype")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ";base64")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "mediatype")
(PUNCT "=")
(ID "mediatype")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 7)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "mediatype")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mediatype")
(PUNCT "=")
(LIT "text/plain;charset=US-ASCII")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(LIT "Content-type: %s\nContent-length: %d\n")
(PUNCT "%")
(PUNCT "(")
(ID "mediatype")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "MAXFTPCACHE")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "nturl2path")
(KEYWORD import)
(ID "url2pathname")
(PUNCT ",")
(ID "pathname2url")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "url2pathname")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "OS-specific conversion from a relative URL of the 'file' scheme\n        to a file system path; not recommended for general use.")
(NEWLINE)
(KEYWORD return)
(ID "unquote")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pathname2url")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "OS-specific conversion from a file system path to a relative URL\n        of the 'file' scheme; not recommended for general use.")
(NEWLINE)
(KEYWORD return)
(ID "quote")
(PUNCT "(")
(ID "pathname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ftpcache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "URLopener")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class to open URLs.\n    This is a class rather than just a subroutine because we may need\n    more than one set of global protocol-specific options.\n    Note -- this is a base class for those who don't want the\n    automatic handling of errors type 302 (relocated) and 401\n    (authorization needed).")
(NEWLINE)
(ID "__tempfiles")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT "Python-urllib/%s")
(PUNCT "%")
(ID "__version__")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "proxies")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "x509")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "%(class)s style of invoking requests is deprecated. ")
(LIT "Use newer urlopen functions/methods")
(PUNCT "%")
(PUNCT "{")
(LIT "class")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT "}")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "proxies")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxies")
(PUNCT "=")
(ID "getproxies")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "hasattr")
(PUNCT "(")
(ID "proxies")
(PUNCT ",")
(LIT "keys")
(PUNCT ")")
(PUNCT ",")
(LIT "proxies must be a mapping")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "=")
(ID "proxies")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key_file")
(PUNCT "=")
(ID "x509")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "key_file")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cert_file")
(PUNCT "=")
(ID "x509")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "cert_file")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addheaders")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "User-Agent")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__tempfiles")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__unlink")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "unlink")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT "=")
(ID "ftpcache")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cleanup")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__tempfiles")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__tempfiles")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__unlink")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "__tempfiles")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "addheader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a header to be used by the HTTP interface only\n        e.g. u.addheader('Accept', 'sound/basic')")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addheaders")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use URLopener().open(file) instead of open(file, 'r').")
(NEWLINE)
(ID "fullurl")
(PUNCT "=")
(ID "unwrap")
(PUNCT "(")
(ID "to_bytes")
(PUNCT "(")
(ID "fullurl")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fullurl")
(PUNCT "=")
(ID "quote")
(PUNCT "(")
(ID "fullurl")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "%/:=&?~#+!$,;'@()*[]|")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(KEYWORD and)
(ID "fullurl")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT "[")
(ID "fullurl")
(PUNCT "]")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "fullurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "urltype")
(PUNCT ",")
(ID "url")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "fullurl")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "urltype")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "urltype")
(PUNCT "=")
(LIT "file")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "urltype")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "[")
(ID "urltype")
(PUNCT "]")
(NEWLINE)
(ID "urltype")
(PUNCT ",")
(ID "proxyhost")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "proxyhost")
(PUNCT ")")
(NEWLINE)
(ID "url")
(PUNCT "=")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "fullurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxy")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(LIT "open_")
(PUNCT "+")
(ID "urltype")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "urltype")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "proxy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open_unknown_proxy")
(PUNCT "(")
(ID "proxy")
(PUNCT ",")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open_unknown")
(PUNCT "(")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "HTTPError")
(PUNCT ",")
(ID "URLError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "socket error")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ".")
(ID "with_traceback")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open_unknown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Overridable interface to open unknown URL type.")
(NEWLINE)
(ID "type")
(PUNCT ",")
(ID "url")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "fullurl")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "url error")
(PUNCT ",")
(LIT "unknown url type")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_unknown_proxy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "proxy")
(PUNCT ",")
(ID "fullurl")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Overridable interface to open unknown URL type.")
(NEWLINE)
(ID "type")
(PUNCT ",")
(ID "url")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "fullurl")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "url error")
(PUNCT ",")
(LIT "invalid proxy for %s")
(PUNCT "%")
(ID "type")
(PUNCT ",")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "retrieve")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "reporthook")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "retrieve(url) returns (filename, headers) for a local object\n        or (tempfilename, headers) for a remote object.")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "unwrap")
(PUNCT "(")
(ID "to_bytes")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(KEYWORD and)
(ID "url")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT "[")
(ID "url")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "type")
(PUNCT ",")
(ID "url1")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(PUNCT "(")
(KEYWORD not)
(ID "type")
(KEYWORD or)
(ID "type")
(PUNCT "==")
(LIT "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "open_local_file")
(PUNCT "(")
(ID "url1")
(PUNCT ")")
(NEWLINE)
(ID "hdrs")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "url2pathname")
(PUNCT "(")
(ID "splithost")
(PUNCT "(")
(ID "url1")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "hdrs")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "fp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tfp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "tempfile")
(NEWLINE)
(ID "garbage")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "garbage")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "path")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT ",")
(ID "garbage")
(PUNCT "=")
(ID "splitquery")
(PUNCT "(")
(ID "path")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT ",")
(ID "garbage")
(PUNCT "=")
(ID "splitattr")
(PUNCT "(")
(ID "path")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "suffix")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT "=")
(ID "tempfile")
(PUNCT ".")
(ID "mkstemp")
(PUNCT "(")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__tempfiles")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "tfp")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fdopen")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "filename")
(PUNCT ",")
(ID "headers")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tempcache")
(PUNCT "[")
(ID "url")
(PUNCT "]")
(PUNCT "=")
(ID "result")
(NEWLINE)
(DEDENT)
(ID "bs")
(PUNCT "=")
(LIT 1024)
(PUNCT "*")
(LIT 8)
(NEWLINE)
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "read")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "blocknum")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(LIT "content-length")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "headers")
(PUNCT "[")
(LIT "Content-Length")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "reporthook")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reporthook")
(PUNCT "(")
(ID "blocknum")
(PUNCT ",")
(ID "bs")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "block")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "bs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "block")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "read")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "block")
(PUNCT ")")
(NEWLINE)
(ID "tfp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "block")
(PUNCT ")")
(NEWLINE)
(ID "blocknum")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "reporthook")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reporthook")
(PUNCT "(")
(ID "blocknum")
(PUNCT ",")
(ID "bs")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tfp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "size")
(PUNCT ">=")
(LIT 0)
(KEYWORD and)
(ID "read")
(PUNCT "<")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ContentTooShortError")
(PUNCT "(")
(LIT "retrieval incomplete: got only %i out of %i bytes")
(PUNCT "%")
(PUNCT "(")
(ID "read")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_open_generic_http")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "connection_factory")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make an HTTP connection using connection_class.\n\n        This is an internal method that should be called from\n        open_http() or open_https().\n\n        Arguments:\n        - connection_factory should take a host name and return an\n          HTTPConnection instance.\n        - url is the url to retrieval or a host, relative-path pair.\n        - data is payload for a POST request or None.\n        ")
(NEWLINE)
(ID "user_passwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "proxy_passwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_passwd")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(ID "splituser")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "realhost")
(PUNCT "=")
(ID "host")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "url")
(NEWLINE)
(ID "proxy_passwd")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(ID "splituser")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "urltype")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "selector")
(PUNCT ")")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "rest")
(NEWLINE)
(ID "user_passwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "urltype")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "http")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "realhost")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "realhost")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "realhost")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_passwd")
(PUNCT ",")
(ID "realhost")
(PUNCT "=")
(ID "splituser")
(PUNCT "(")
(ID "realhost")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "user_passwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "selector")
(PUNCT "=")
(LIT "%s://%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "urltype")
(PUNCT ",")
(ID "realhost")
(PUNCT ",")
(ID "rest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "proxy_bypass")
(PUNCT "(")
(ID "realhost")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "realhost")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "http error")
(PUNCT ",")
(LIT "no host given")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "proxy_passwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxy_passwd")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "proxy_passwd")
(PUNCT ")")
(NEWLINE)
(ID "proxy_auth")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "b64encode")
(PUNCT "(")
(ID "proxy_passwd")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxy_auth")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "user_passwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_passwd")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "user_passwd")
(PUNCT ")")
(NEWLINE)
(ID "auth")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "b64encode")
(PUNCT "(")
(ID "user_passwd")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "http_conn")
(PUNCT "=")
(ID "connection_factory")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "proxy_auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "[")
(LIT "Proxy-Authorization")
(PUNCT "]")
(PUNCT "=")
(LIT "Basic %s")
(PUNCT "%")
(ID "proxy_auth")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "[")
(LIT "Authorization")
(PUNCT "]")
(PUNCT "=")
(LIT "Basic %s")
(PUNCT "%")
(ID "auth")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "realhost")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "[")
(LIT "Host")
(PUNCT "]")
(PUNCT "=")
(ID "realhost")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT "[")
(LIT "Connection")
(PUNCT "]")
(PUNCT "=")
(LIT "close")
(NEWLINE)
(KEYWORD for)
(ID "header")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "addheaders")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "[")
(ID "header")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "[")
(LIT "Content-Type")
(PUNCT "]")
(PUNCT "=")
(LIT "application/x-www-form-urlencoded")
(NEWLINE)
(ID "http_conn")
(PUNCT ".")
(ID "request")
(PUNCT "(")
(LIT "POST")
(PUNCT ",")
(ID "selector")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "http_conn")
(PUNCT ".")
(ID "request")
(PUNCT "(")
(LIT "GET")
(PUNCT ",")
(ID "selector")
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "http_conn")
(PUNCT ".")
(ID "getresponse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "BadStatusLine")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "http protocol error: bad status line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT 200)
(PUNCT "<=")
(ID "response")
(PUNCT ".")
(ID "status")
(PUNCT "<")
(LIT 300)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "response")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "msg")
(PUNCT ",")
(LIT "http:")
(PUNCT "+")
(ID "url")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "http_error")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "fp")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "status")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "reason")
(PUNCT ",")
(ID "response")
(PUNCT ".")
(ID "msg")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open_http")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use HTTP protocol.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_open_generic_http")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPConnection")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle http errors.\n\n        Derived class can override this, or provide specific handlers\n        named http_error_DDD where DDD is the 3-digit error code.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "http_error_%d")
(PUNCT "%")
(ID "errcode")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "method")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "method")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "result")
(PUNCT ":")
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default error handler: close the connection and raise OSError.")
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_https_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPSConnection")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "key_file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "key_file")
(PUNCT ",")
(ID "cert_file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cert_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_https")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use HTTPS protocol.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_open_generic_http")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_https_connection")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use local file or FTP depending on form of URL.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "file error: proxy support for file protocol currently not implemented")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "url")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "//")
(KEYWORD and)
(ID "url")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "/")
(KEYWORD and)
(ID "url")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "localhost/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "file:// scheme is supported only on localhost")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open_local_file")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open_local_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use local file.")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "utils")
(NEWLINE)
(KEYWORD import)
(ID "mimetypes")
(NEWLINE)
(ID "host")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "localname")
(PUNCT "=")
(ID "url2pathname")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stats")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "localname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(ID "e")
(PUNCT ".")
(ID "strerror")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "size")
(PUNCT "=")
(ID "stats")
(PUNCT ".")
(ID "st_size")
(NEWLINE)
(ID "modified")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "utils")
(PUNCT ".")
(ID "formatdate")
(PUNCT "(")
(ID "stats")
(PUNCT ".")
(ID "st_mtime")
(PUNCT ",")
(ID "usegmt")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "mtype")
(PUNCT "=")
(ID "mimetypes")
(PUNCT ".")
(ID "guess_type")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(LIT "Content-Type: %s\nContent-Length: %d\nLast-modified: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "mtype")
(KEYWORD or)
(LIT "text/plain")
(PUNCT ",")
(ID "size")
(PUNCT ",")
(ID "modified")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "urlfile")
(PUNCT "=")
(ID "file")
(NEWLINE)
(KEYWORD if)
(ID "file")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "urlfile")
(PUNCT "=")
(LIT "file://")
(PUNCT "+")
(ID "file")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "localname")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "urlfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "port")
(KEYWORD and)
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(KEYWORD in)
(PUNCT "(")
(PUNCT "(")
(ID "localhost")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "thishost")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "urlfile")
(PUNCT "=")
(ID "file")
(NEWLINE)
(KEYWORD if)
(ID "file")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "urlfile")
(PUNCT "=")
(LIT "file://")
(PUNCT "+")
(ID "file")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "file")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "./")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "local file url may start with / or file:. Unknown url of type: %s")
(PUNCT "%")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "localname")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "urlfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "local file error: not on local host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_ftp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use FTP protocol.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "ftp error: proxy support for ftp protocol currently not implemented")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "mimetypes")
(NEWLINE)
(ID "host")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "ftp error: no host given")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "user")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(ID "splituser")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(PUNCT ":")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "splitpasswd")
(PUNCT "(")
(ID "user")
(PUNCT ")")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "passwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "user")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "user")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "passwd")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "passwd")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ftplib")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "ftplib")
(PUNCT ".")
(ID "FTP_PORT")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT ",")
(ID "attrs")
(PUNCT "=")
(ID "splitattr")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "path")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "dirs")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "dirs")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dirs")
(KEYWORD and)
(KEYWORD not)
(ID "dirs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(ID "dirs")
(PUNCT "=")
(ID "dirs")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "dirs")
(KEYWORD and)
(KEYWORD not)
(ID "dirs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(ID "dirs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "user")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dirs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT ")")
(PUNCT ">")
(ID "MAXFTPCACHE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "k")
(PUNCT "!=")
(ID "key")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(ID "v")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "ftpwrapper")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "file")
(PUNCT ":")
(ID "type")
(PUNCT "=")
(LIT "D")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "type")
(PUNCT "=")
(LIT "I")
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attr")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "splitvalue")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "attr")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "type")
(KEYWORD and)
(ID "value")
(KEYWORD in)
(PUNCT "(")
(LIT "a")
(PUNCT ",")
(LIT "A")
(PUNCT ",")
(LIT "i")
(PUNCT ",")
(LIT "I")
(PUNCT ",")
(LIT "d")
(PUNCT ",")
(LIT "D")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "retrlen")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ftpcache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ".")
(ID "retrfile")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(ID "mtype")
(PUNCT "=")
(ID "mimetypes")
(PUNCT ".")
(ID "guess_type")
(PUNCT "(")
(LIT "ftp:")
(PUNCT "+")
(ID "url")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "mtype")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "+=")
(LIT "Content-Type: %s\n")
(PUNCT "%")
(ID "mtype")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "retrlen")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "retrlen")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "headers")
(PUNCT "+=")
(LIT "Content-Length: %d\n")
(PUNCT "%")
(ID "retrlen")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(LIT "ftp:")
(PUNCT "+")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ftperrors")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "exp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "ftp error %r")
(PUNCT "%")
(ID "exp")
(PUNCT ")")
(PUNCT ".")
(ID "with_traceback")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Use \"data\" URL.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "data error: proxy support for data protocol currently not implemented")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "type")
(PUNCT ",")
(ID "data")
(PUNCT "]")
(PUNCT "=")
(ID "url")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "data error")
(PUNCT ",")
(LIT "bad data URL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "type")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(LIT "text/plain;charset=US-ASCII")
(NEWLINE)
(DEDENT)
(ID "semi")
(PUNCT "=")
(ID "type")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "semi")
(PUNCT ">=")
(LIT 0)
(KEYWORD and)
(LIT "=")
(KEYWORD not)
(KEYWORD in)
(ID "type")
(PUNCT "[")
(ID "semi")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "type")
(PUNCT "[")
(ID "semi")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT "[")
(PUNCT ":")
(ID "semi")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "Date: %s")
(PUNCT "%")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%a, %d %b %Y %H:%M:%S GMT")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "Content-type: %s")
(PUNCT "%")
(ID "type")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT "==")
(LIT "base64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(PUNCT "(")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "Content-Length: %d")
(PUNCT "%")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FancyURLopener")
(PUNCT "(")
(ID "URLopener")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Derived class with handlers for errors we can handle (perhaps).")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "auth_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tries")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maxtries")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default error handling -- don't raise an exception.")
(NEWLINE)
(KEYWORD return)
(ID "addinfourl")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(LIT "http:")
(PUNCT "+")
(ID "url")
(PUNCT ",")
(ID "errcode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_302")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error 302 -- relocated (temporarily).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tries")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "maxtries")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "tries")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "maxtries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "http_error_500")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meth")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "http_error_500")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meth")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "http_error_default")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tries")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD return)
(ID "meth")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(LIT 500)
(PUNCT ",")
(LIT "Internal Server Error: Redirect Recursion")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "redirect_internal")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tries")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "redirect_internal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "location")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newurl")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(LIT "location")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "uri")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newurl")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(LIT "uri")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "newurl")
(PUNCT "=")
(ID "urljoin")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "+")
(LIT ":")
(PUNCT "+")
(ID "url")
(PUNCT ",")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(ID "urlparts")
(PUNCT "=")
(ID "urlparse")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "urlparts")
(PUNCT ".")
(ID "scheme")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "http")
(PUNCT ",")
(LIT "https")
(PUNCT ",")
(LIT "ftp")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPError")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT "+")
(LIT " Redirection to url '%s' is not allowed.")
(PUNCT "%")
(ID "newurl")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_301")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error 301 -- also relocated (permanently).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "http_error_302")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_303")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error 303 -- also relocated (essentially identical to 302).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "http_error_302")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "http_error_307")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error 307 -- relocated, but turn POST into error.")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "http_error_302")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "http_error_401")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "retry")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error 401 -- authentication required.\n        This function supports Basic authentication only.")
(NEWLINE)
(KEYWORD if)
(LIT "www-authenticate")
(KEYWORD not)
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stuff")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(LIT "www-authenticate")
(PUNCT "]")
(NEWLINE)
(ID "match")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "[ \t]*([^ \t]+)[ \t]+realm=\"([^\"]*)\"")
(PUNCT ",")
(ID "stuff")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "scheme")
(PUNCT ",")
(ID "realm")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "scheme")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "basic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "retry")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(LIT "retry_")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "+")
(LIT "_basic_auth")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "http_error_407")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "retry")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error 407 -- proxy authentication required.\n        This function supports Basic authentication only.")
(NEWLINE)
(KEYWORD if)
(LIT "proxy-authenticate")
(KEYWORD not)
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stuff")
(PUNCT "=")
(ID "headers")
(PUNCT "[")
(LIT "proxy-authenticate")
(PUNCT "]")
(NEWLINE)
(ID "match")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "[ \t]*([^ \t]+)[ \t]+realm=\"([^\"]*)\"")
(PUNCT ",")
(ID "stuff")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "scheme")
(PUNCT ",")
(ID "realm")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "scheme")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT "basic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "retry")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "URLopener")
(PUNCT ".")
(ID "http_error_default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(LIT "retry_proxy_")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "+")
(LIT "_basic_auth")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "retry_proxy_http_basic_auth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "newurl")
(PUNCT "=")
(LIT "http://")
(PUNCT "+")
(ID "host")
(PUNCT "+")
(ID "selector")
(NEWLINE)
(ID "proxy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "[")
(LIT "http")
(PUNCT "]")
(NEWLINE)
(ID "urltype")
(PUNCT ",")
(ID "proxyhost")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(ID "proxyhost")
(PUNCT ",")
(ID "proxyselector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "proxyhost")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "proxyhost")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "@")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "proxyhost")
(PUNCT "=")
(ID "proxyhost")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_user_passwd")
(PUNCT "(")
(ID "proxyhost")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "user")
(KEYWORD or)
(ID "passwd")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(ID "proxyhost")
(PUNCT "=")
(LIT "%s:%s@%s")
(PUNCT "%")
(PUNCT "(")
(ID "quote")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "quote")
(PUNCT "(")
(ID "passwd")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "proxyhost")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "[")
(LIT "http")
(PUNCT "]")
(PUNCT "=")
(LIT "http://")
(PUNCT "+")
(ID "proxyhost")
(PUNCT "+")
(ID "proxyselector")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "retry_proxy_https_basic_auth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "newurl")
(PUNCT "=")
(LIT "https://")
(PUNCT "+")
(ID "host")
(PUNCT "+")
(ID "selector")
(NEWLINE)
(ID "proxy")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "[")
(LIT "https")
(PUNCT "]")
(NEWLINE)
(ID "urltype")
(PUNCT ",")
(ID "proxyhost")
(PUNCT "=")
(ID "splittype")
(PUNCT "(")
(ID "proxy")
(PUNCT ")")
(NEWLINE)
(ID "proxyhost")
(PUNCT ",")
(ID "proxyselector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "proxyhost")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "proxyhost")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "@")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "proxyhost")
(PUNCT "=")
(ID "proxyhost")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_user_passwd")
(PUNCT "(")
(ID "proxyhost")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "user")
(KEYWORD or)
(ID "passwd")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(ID "proxyhost")
(PUNCT "=")
(LIT "%s:%s@%s")
(PUNCT "%")
(PUNCT "(")
(ID "quote")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "quote")
(PUNCT "(")
(ID "passwd")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "proxyhost")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "proxies")
(PUNCT "[")
(LIT "https")
(PUNCT "]")
(PUNCT "=")
(LIT "https://")
(PUNCT "+")
(ID "proxyhost")
(PUNCT "+")
(ID "proxyselector")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "retry_http_basic_auth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "@")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_user_passwd")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "user")
(KEYWORD or)
(ID "passwd")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(ID "host")
(PUNCT "=")
(LIT "%s:%s@%s")
(PUNCT "%")
(PUNCT "(")
(ID "quote")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "quote")
(PUNCT "(")
(ID "passwd")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "newurl")
(PUNCT "=")
(LIT "http://")
(PUNCT "+")
(ID "host")
(PUNCT "+")
(ID "selector")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "retry_https_basic_auth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(ID "splithost")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "@")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_user_passwd")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "user")
(KEYWORD or)
(ID "passwd")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(ID "host")
(PUNCT "=")
(LIT "%s:%s@%s")
(PUNCT "%")
(PUNCT "(")
(ID "quote")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "quote")
(PUNCT "(")
(ID "passwd")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "newurl")
(PUNCT "=")
(LIT "https://")
(PUNCT "+")
(ID "host")
(PUNCT "+")
(ID "selector")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "newurl")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_user_passwd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "clear_cache")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "realm")
(PUNCT "+")
(LIT "@")
(PUNCT "+")
(ID "host")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "auth_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "clear_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "auth_cache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "auth_cache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "prompt_user_passwd")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "realm")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(KEYWORD or)
(ID "passwd")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "auth_cache")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "user")
(PUNCT ",")
(ID "passwd")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prompt_user_passwd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "realm")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Override this in a GUI environment!")
(NEWLINE)
(KEYWORD import)
(ID "getpass")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(LIT "Enter username for %s at %s: ")
(PUNCT "%")
(PUNCT "(")
(ID "realm")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "passwd")
(PUNCT "=")
(ID "getpass")
(PUNCT ".")
(ID "getpass")
(PUNCT "(")
(LIT "Enter password for %s in %s at %s: ")
(PUNCT "%")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "realm")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "user")
(PUNCT ",")
(ID "passwd")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_localhost")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "localhost")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the IP address of the magic hostname 'localhost'.")
(NEWLINE)
(KEYWORD global)
(ID "_localhost")
(NEWLINE)
(KEYWORD if)
(ID "_localhost")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_localhost")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(LIT "localhost")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_localhost")
(NEWLINE)
(DEDENT)
(ID "_thishost")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "thishost")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the IP addresses of the current host.")
(NEWLINE)
(KEYWORD global)
(ID "_thishost")
(NEWLINE)
(KEYWORD if)
(ID "_thishost")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_thishost")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname_ex")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "gaierror")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_thishost")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname_ex")
(PUNCT "(")
(LIT "localhost")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_thishost")
(NEWLINE)
(DEDENT)
(ID "_ftperrors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "ftperrors")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the set of errors raised by the FTP class.")
(NEWLINE)
(KEYWORD global)
(ID "_ftperrors")
(NEWLINE)
(KEYWORD if)
(ID "_ftperrors")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ftplib")
(NEWLINE)
(ID "_ftperrors")
(PUNCT "=")
(ID "ftplib")
(PUNCT ".")
(ID "all_errors")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_ftperrors")
(NEWLINE)
(DEDENT)
(ID "_noheaders")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "noheaders")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an empty email Message object.")
(NEWLINE)
(KEYWORD global)
(ID "_noheaders")
(NEWLINE)
(KEYWORD if)
(ID "_noheaders")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_noheaders")
(PUNCT "=")
(ID "email")
(PUNCT ".")
(ID "message_from_string")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_noheaders")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ftpwrapper")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class used by open_ftp() for cache of open FTP connections.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT ",")
(ID "passwd")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "persistent")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "user")
(PUNCT "=")
(ID "user")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT "=")
(ID "passwd")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dirs")
(PUNCT "=")
(ID "dirs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "refcount")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "keepalive")
(PUNCT "=")
(ID "persistent")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "init")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ftplib")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "busy")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT "=")
(ID "ftplib")
(PUNCT ".")
(ID "FTP")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "user")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "passwd")
(PUNCT ")")
(NEWLINE)
(ID "_target")
(PUNCT "=")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "dirs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "cwd")
(PUNCT "(")
(ID "_target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "retrfile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ftplib")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "endtransfer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "type")
(KEYWORD in)
(PUNCT "(")
(LIT "d")
(PUNCT ",")
(LIT "D")
(PUNCT ")")
(PUNCT ":")
(ID "cmd")
(PUNCT "=")
(LIT "TYPE A")
(PUNCT ";")
(ID "isdir")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "cmd")
(PUNCT "=")
(LIT "TYPE ")
(PUNCT "+")
(ID "type")
(PUNCT ";")
(ID "isdir")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ftplib")
(PUNCT ".")
(ID "all_errors")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "init")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "conn")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD and)
(KEYWORD not)
(ID "isdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "RETR ")
(PUNCT "+")
(ID "file")
(NEWLINE)
(ID "conn")
(PUNCT ",")
(ID "retrlen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "ntransfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ftplib")
(PUNCT ".")
(ID "error_perm")
(KEYWORD as)
(ID "reason")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "str")
(PUNCT "(")
(ID "reason")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "!=")
(LIT "550")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "ftp error: %r")
(PUNCT "%")
(ID "reason")
(PUNCT ")")
(PUNCT ".")
(ID "with_traceback")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "conn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "voidcmd")
(PUNCT "(")
(LIT "TYPE A")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pwd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "pwd")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "cwd")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ftplib")
(PUNCT ".")
(ID "error_perm")
(KEYWORD as)
(ID "reason")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "URLError")
(PUNCT "(")
(LIT "ftp error: %r")
(PUNCT "%")
(ID "reason")
(PUNCT ")")
(KEYWORD from)
(ID "reason")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "cwd")
(PUNCT "(")
(ID "pwd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cmd")
(PUNCT "=")
(LIT "LIST ")
(PUNCT "+")
(ID "file")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "LIST")
(NEWLINE)
(DEDENT)
(ID "conn")
(PUNCT ",")
(ID "retrlen")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "ntransfercmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "busy")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "ftpobj")
(PUNCT "=")
(ID "addclosehook")
(PUNCT "(")
(ID "conn")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rb")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "file_close")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "refcount")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "conn")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "ftpobj")
(PUNCT ",")
(ID "retrlen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "endtransfer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "busy")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "keepalive")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "refcount")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "real_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "file_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "endtransfer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "refcount")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "refcount")
(PUNCT "<=")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "keepalive")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "real_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "real_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "endtransfer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ftp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ftperrors")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getproxies_environment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a dictionary of scheme -> proxy server URL mappings.\n\n    Scan the environment for variables named <scheme>_proxy;\n    this seems to be the standard convention.  If you need a\n    different way, you can pass a proxies dictionary to the\n    [Fancy]URLopener constructor.\n\n    ")
(NEWLINE)
(ID "proxies")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "name")
(PUNCT "[")
(PUNCT "-")
(LIT 6)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "_proxy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxies")
(PUNCT "[")
(ID "name")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 6)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "proxies")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_bypass_environment")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test if proxies should not be used for a particular host.\n\n    Checks the environment for a variable named no_proxy, which should\n    be a list of DNS suffixes separated by commas, or '*' for all hosts.\n    ")
(NEWLINE)
(ID "no_proxy")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "no_proxy")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "NO_PROXY")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "no_proxy")
(PUNCT "==")
(LIT "*")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "hostonly")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "no_proxy_list")
(PUNCT "=")
(PUNCT "[")
(ID "proxy")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "proxy")
(KEYWORD in)
(ID "no_proxy")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "no_proxy_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD and)
(PUNCT "(")
(ID "hostonly")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD or)
(ID "host")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proxy_bypass_macosx_sysconf")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "proxy_settings")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Return True iff this host shouldn't be accessed using a proxy\n\n    This function uses the MacOSX framework SystemConfiguration\n    to fetch the proxy information.\n\n    proxy_settings come from _scproxy._get_proxy_settings or get mocked ie:\n    { 'exclude_simple': bool,\n      'exceptions': ['foo.bar', '*.bar.com', '127.0.0.1', '10.1', '10.0/16']\n    }\n    ")
(NEWLINE)
(KEYWORD from)
(ID "fnmatch")
(KEYWORD import)
(ID "fnmatch")
(NEWLINE)
(ID "hostonly")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "ip2num")
(PUNCT "(")
(ID "ipAddr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(ID "ipAddr")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "parts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "!=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT "=")
(PUNCT "(")
(ID "parts")
(PUNCT "+")
(PUNCT "[")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "<<")
(LIT 24)
(PUNCT ")")
(PUNCT "|")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "<<")
(LIT 16)
(PUNCT ")")
(PUNCT "|")
(PUNCT "(")
(ID "parts")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "<<")
(LIT 8)
(PUNCT ")")
(PUNCT "|")
(ID "parts")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT ".")
(KEYWORD not)
(KEYWORD in)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "proxy_settings")
(PUNCT "[")
(LIT "exclude_simple")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "hostIP")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "proxy_settings")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "exceptions")
(PUNCT ",")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(KEYWORD continue)
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "(\\d+(?:\\.\\d+)*)(/\\d+)?")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hostIP")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hostIP")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "hostonly")
(PUNCT ")")
(NEWLINE)
(ID "hostIP")
(PUNCT "=")
(ID "ip2num")
(PUNCT "(")
(ID "hostIP")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "base")
(PUNCT "=")
(ID "ip2num")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "mask")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mask")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mask")
(PUNCT "=")
(LIT 8)
(PUNCT "*")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mask")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "mask")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "mask")
(PUNCT "=")
(LIT 32)
(PUNCT "-")
(ID "mask")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "hostIP")
(PUNCT ">>")
(ID "mask")
(PUNCT ")")
(PUNCT "==")
(PUNCT "(")
(ID "base")
(PUNCT ">>")
(ID "mask")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "fnmatch")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_scproxy")
(KEYWORD import)
(ID "_get_proxy_settings")
(PUNCT ",")
(ID "_get_proxies")
(NEWLINE)
(KEYWORD def)
(ID "proxy_bypass_macosx_sysconf")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxy_settings")
(PUNCT "=")
(ID "_get_proxy_settings")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_proxy_bypass_macosx_sysconf")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "proxy_settings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getproxies_macosx_sysconf")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a dictionary of scheme -> proxy server URL mappings.\n\n        This function uses the MacOSX framework SystemConfiguration\n        to fetch the proxy information.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "_get_proxies")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_bypass")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "getproxies_environment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "proxy_bypass_environment")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "proxy_bypass_macosx_sysconf")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getproxies")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getproxies_environment")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "getproxies_macosx_sysconf")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "getproxies_registry")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a dictionary of scheme -> proxy server URL mappings.\n\n        Win32 uses the registry to store proxies.\n\n        ")
(NEWLINE)
(ID "proxies")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "winreg")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "proxies")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "internetSettings")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "OpenKey")
(PUNCT "(")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_CURRENT_USER")
(PUNCT ",")
(LIT "Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings")
(PUNCT ")")
(NEWLINE)
(ID "proxyEnable")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "QueryValueEx")
(PUNCT "(")
(ID "internetSettings")
(PUNCT ",")
(LIT "ProxyEnable")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "proxyEnable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxyServer")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "winreg")
(PUNCT ".")
(ID "QueryValueEx")
(PUNCT "(")
(ID "internetSettings")
(PUNCT ",")
(LIT "ProxyServer")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "=")
(KEYWORD in)
(ID "proxyServer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "proxyServer")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protocol")
(PUNCT ",")
(ID "address")
(PUNCT "=")
(ID "p")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "=")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "^([^/:]+)://")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "address")
(PUNCT "=")
(LIT "%s://%s")
(PUNCT "%")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "proxies")
(PUNCT "[")
(ID "protocol")
(PUNCT "]")
(PUNCT "=")
(ID "address")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "proxyServer")
(PUNCT "[")
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT "==")
(LIT "http:")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxies")
(PUNCT "[")
(LIT "http")
(PUNCT "]")
(PUNCT "=")
(ID "proxyServer")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "proxies")
(PUNCT "[")
(LIT "http")
(PUNCT "]")
(PUNCT "=")
(LIT "http://%s")
(PUNCT "%")
(ID "proxyServer")
(NEWLINE)
(ID "proxies")
(PUNCT "[")
(LIT "https")
(PUNCT "]")
(PUNCT "=")
(LIT "https://%s")
(PUNCT "%")
(ID "proxyServer")
(NEWLINE)
(ID "proxies")
(PUNCT "[")
(LIT "ftp")
(PUNCT "]")
(PUNCT "=")
(LIT "ftp://%s")
(PUNCT "%")
(ID "proxyServer")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "internetSettings")
(PUNCT ".")
(ID "Close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "proxies")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getproxies")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a dictionary of scheme -> proxy server URL mappings.\n\n        Returns settings gathered from the environment, if specified,\n        or the registry.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "getproxies_environment")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "getproxies_registry")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_bypass_registry")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "winreg")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "internetSettings")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "OpenKey")
(PUNCT "(")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_CURRENT_USER")
(PUNCT ",")
(LIT "Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings")
(PUNCT ")")
(NEWLINE)
(ID "proxyEnable")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "QueryValueEx")
(PUNCT "(")
(ID "internetSettings")
(PUNCT ",")
(LIT "ProxyEnable")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "proxyOverride")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "winreg")
(PUNCT ".")
(ID "QueryValueEx")
(PUNCT "(")
(ID "internetSettings")
(PUNCT ",")
(LIT "ProxyOverride")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "proxyEnable")
(KEYWORD or)
(KEYWORD not)
(ID "proxyOverride")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "rawHost")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "splitport")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(PUNCT "[")
(ID "rawHost")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "rawHost")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "addr")
(PUNCT "!=")
(ID "rawHost")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "addr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fqdn")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "getfqdn")
(PUNCT "(")
(ID "rawHost")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fqdn")
(PUNCT "!=")
(ID "rawHost")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "fqdn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "proxyOverride")
(PUNCT "=")
(ID "proxyOverride")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "test")
(KEYWORD in)
(ID "proxyOverride")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "test")
(PUNCT "==")
(LIT "<local>")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT ".")
(KEYWORD not)
(KEYWORD in)
(ID "rawHost")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "test")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(LIT "\\.")
(PUNCT ")")
(NEWLINE)
(ID "test")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "*")
(PUNCT ",")
(LIT ".*")
(PUNCT ")")
(NEWLINE)
(ID "test")
(PUNCT "=")
(ID "test")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "?")
(PUNCT ",")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "val")
(KEYWORD in)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "val")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "I")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_bypass")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a dictionary of scheme -> proxy server URL mappings.\n\n        Returns settings gathered from the environment, if specified,\n        or the registry.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "getproxies_environment")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "proxy_bypass_environment")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "proxy_bypass_registry")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getproxies")
(PUNCT "=")
(ID "getproxies_environment")
(NEWLINE)
(ID "proxy_bypass")
(PUNCT "=")
(ID "proxy_bypass_environment")
(NEWLINE)
(DEDENT)
(ENDMARKER)
