(LIT "Implement Idle Shell history mechanism with History class")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "configHandler")
(KEYWORD import)
(ID "idleConf")
(NEWLINE)
(KEYWORD class)
(ID "History")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Implement Idle Shell history mechanism.\n\n    store - Store source statement (called from PyShell.resetoutput).\n    fetch - Fetch stored statement matching prefix already entered.\n    history_next - Bound to <<history-next>> event (default Alt-N).\n    history_prev - Bound to <<history-prev>> event (default Alt-P).\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize data attributes and bind event methods.\n\n        .text - Idle wrapper of tk Text widget, with .bell().\n        .history - source statements, possibly with multiple lines.\n        .prefix - source already entered at prompt; filters history list.\n        .pointer - index into history.\n        .cyclic - wrap around history list (or not).\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT "=")
(ID "text")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pointer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cyclic")
(PUNCT "=")
(ID "idleConf")
(PUNCT ".")
(ID "GetOption")
(PUNCT "(")
(LIT "main")
(PUNCT ",")
(LIT "History")
(PUNCT ",")
(LIT "cyclic")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT "bool")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<history-previous>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "history_prev")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<history-next>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "history_next")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "history_next")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fetch later statement; start with ealiest if cyclic.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fetch")
(PUNCT "(")
(ID "reverse")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "history_prev")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fetch earlier statement; start with most recent.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fetch")
(PUNCT "(")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "break")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fetch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "reverse")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Fetch statememt and replace current line in text widget.\n\n        Set prefix and pointer as needed for successive fetches.\n        Reset them to None, None when returning to the start line.\n        Sound bell when return to start line or cannot leave a line\n        because cyclic is False.\n        ")
(NEWLINE)
(ID "nhist")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT ")")
(NEWLINE)
(ID "pointer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pointer")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD if)
(ID "pointer")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "prefix")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "compare")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "!=")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT "[")
(ID "pointer")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pointer")
(PUNCT "=")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "mark_set")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "pointer")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "prefix")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reverse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pointer")
(PUNCT "=")
(ID "nhist")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "cyclic")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pointer")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "nprefix")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pointer")
(PUNCT "+=")
(PUNCT "-")
(LIT 1)
(KEYWORD if)
(ID "reverse")
(KEYWORD else)
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "pointer")
(PUNCT "<")
(LIT 0)
(KEYWORD or)
(ID "pointer")
(PUNCT ">=")
(ID "nhist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "bell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "cyclic")
(KEYWORD and)
(ID "pointer")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(PUNCT "!=")
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pointer")
(PUNCT "=")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT "[")
(ID "pointer")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "item")
(PUNCT "[")
(PUNCT ":")
(ID "nprefix")
(PUNCT "]")
(PUNCT "==")
(ID "prefix")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ">")
(ID "nprefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(LIT "end-1c")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT "iomark")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "see")
(PUNCT "(")
(LIT "insert")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "text")
(PUNCT ".")
(ID "tag_remove")
(PUNCT "(")
(LIT "sel")
(PUNCT ",")
(LIT "1.0")
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pointer")
(PUNCT "=")
(ID "pointer")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "prefix")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "store")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store Shell input statement into history list.")
(NEWLINE)
(ID "source")
(PUNCT "=")
(ID "source")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "history")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pointer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "unittest")
(KEYWORD import)
(ID "main")
(NEWLINE)
(ID "main")
(PUNCT "(")
(LIT "idlelib.idle_test.test_idlehistory")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 2)
(PUNCT ",")
(ID "exit")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
