(LIT "Adjust some old Python 2 idioms to their modern counterparts.\n\n* Change some type comparisons to isinstance() calls:\n    type(x) == T -> isinstance(x, T)\n    type(x) is T -> isinstance(x, T)\n    type(x) != T -> not isinstance(x, T)\n    type(x) is not T -> not isinstance(x, T)\n\n* Change \"while 1:\" into \"while True:\".\n\n* Change both\n\n    v = list(EXPR)\n    v.sort()\n    foo(v)\n\nand the more general\n\n    v = EXPR\n    v.sort()\n    foo(v)\n\ninto\n\n    v = sorted(EXPR)\n    foo(v)\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Call")
(PUNCT ",")
(ID "Comma")
(PUNCT ",")
(ID "Name")
(PUNCT ",")
(ID "Node")
(PUNCT ",")
(ID "BlankLine")
(PUNCT ",")
(ID "syms")
(NEWLINE)
(ID "CMP")
(PUNCT "=")
(LIT "(n='!=' | '==' | 'is' | n=comp_op< 'is' 'not' >)")
(NEWLINE)
(ID "TYPE")
(PUNCT "=")
(LIT "power< 'type' trailer< '(' x=any ')' > >")
(NEWLINE)
(KEYWORD class)
(ID "FixIdioms")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "explicit")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n        isinstance=comparison< %s %s T=any >\n        |\n        isinstance=comparison< T=any %s %s >\n        |\n        while_stmt< 'while' while='1' ':' any+ >\n        |\n        sorted=any<\n            any*\n            simple_stmt<\n              expr_stmt< id1=any '='\n                         power< list='list' trailer< '(' (not arglist<any+>) any ')' > >\n              >\n              '\\n'\n            >\n            sort=\n            simple_stmt<\n              power< id2=any\n                     trailer< '.' 'sort' > trailer< '(' ')' >\n              >\n              '\\n'\n            >\n            next=any*\n        >\n        |\n        sorted=any<\n            any*\n            simple_stmt< expr_stmt< id1=any '=' expr=any > '\\n' >\n            sort=\n            simple_stmt<\n              power< id2=any\n                     trailer< '.' 'sort' > trailer< '(' ')' >\n              >\n              '\\n'\n            >\n            next=any*\n        >\n    ")
(PUNCT "%")
(PUNCT "(")
(ID "TYPE")
(PUNCT ",")
(ID "CMP")
(PUNCT ",")
(ID "CMP")
(PUNCT ",")
(ID "TYPE")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "match")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "r")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(ID "FixIdioms")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "r")
(KEYWORD and)
(LIT "sorted")
(KEYWORD in)
(ID "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "r")
(PUNCT "[")
(LIT "id1")
(PUNCT "]")
(PUNCT "==")
(ID "r")
(PUNCT "[")
(LIT "id2")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "r")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "isinstance")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "transform_isinstance")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "while")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "transform_while")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "sorted")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "transform_sort")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Invalid match")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "transform_isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "x")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "T")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "T")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "T")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(ID "test")
(PUNCT "=")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "isinstance")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(ID "x")
(PUNCT ",")
(ID "Comma")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "T")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "n")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(ID "test")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "not_test")
(PUNCT ",")
(PUNCT "[")
(ID "Name")
(PUNCT "(")
(LIT "not")
(PUNCT ")")
(PUNCT ",")
(ID "test")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "test")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD return)
(ID "test")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "transform_while")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "one")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "while")
(PUNCT "]")
(NEWLINE)
(ID "one")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "True")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "one")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "transform_sort")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sort_stmt")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "sort")
(PUNCT "]")
(NEWLINE)
(ID "next_stmt")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "next")
(PUNCT "]")
(NEWLINE)
(ID "list_call")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "list")
(PUNCT ")")
(NEWLINE)
(ID "simple_expr")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "expr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "list_call")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list_call")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "sorted")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "list_call")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "simple_expr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "simple_expr")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "simple_expr")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "sorted")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(ID "new")
(PUNCT "]")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "simple_expr")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "should not have reached here")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sort_stmt")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "btwn")
(PUNCT "=")
(ID "sort_stmt")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD if)
(LIT "\n")
(KEYWORD in)
(ID "btwn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "next_stmt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix_lines")
(PUNCT "=")
(PUNCT "(")
(ID "btwn")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "next_stmt")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "next_stmt")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "prefix_lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "list_call")
(PUNCT ".")
(ID "parent")
(NEWLINE)
(KEYWORD assert)
(ID "list_call")
(PUNCT ".")
(ID "next_sibling")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(ID "end_line")
(PUNCT "=")
(ID "BlankLine")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "list_call")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "end_line")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "list_call")
(PUNCT ".")
(ID "next_sibling")
(KEYWORD is)
(ID "end_line")
(NEWLINE)
(ID "end_line")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "btwn")
(PUNCT ".")
(ID "rpartition")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
