(LIT "distutils.command.check\n\nImplements the Distutils 'check' command.\n")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsSetupError")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "docutils")
(PUNCT ".")
(ID "utils")
(KEYWORD import)
(ID "Reporter")
(NEWLINE)
(KEYWORD from)
(ID "docutils")
(PUNCT ".")
(ID "parsers")
(PUNCT ".")
(ID "rst")
(KEYWORD import)
(ID "Parser")
(NEWLINE)
(KEYWORD from)
(ID "docutils")
(KEYWORD import)
(ID "frontend")
(NEWLINE)
(KEYWORD from)
(ID "docutils")
(KEYWORD import)
(ID "nodes")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "StringIO")
(NEWLINE)
(KEYWORD class)
(ID "SilentReporter")
(PUNCT "(")
(ID "Reporter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "report_level")
(PUNCT ",")
(ID "halt_level")
(PUNCT ",")
(ID "stream")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "ascii")
(PUNCT ",")
(ID "error_handler")
(PUNCT "=")
(LIT "replace")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "messages")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "Reporter")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "report_level")
(PUNCT ",")
(ID "halt_level")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "debug")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "error_handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "system_message")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(PUNCT "*")
(ID "children")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "messages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "children")
(PUNCT ",")
(ID "kwargs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "nodes")
(PUNCT ".")
(ID "system_message")
(PUNCT "(")
(ID "message")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(ID "level")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "levels")
(PUNCT "[")
(ID "level")
(PUNCT "]")
(PUNCT ",")
(PUNCT "*")
(ID "children")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "HAS_DOCUTILS")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "HAS_DOCUTILS")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "check")
(PUNCT "(")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This command checks the meta-data of the package.\n    ")
(NEWLINE)
(ID "description")
(PUNCT "=")
(PUNCT "(")
(LIT "perform some checks on the package")
(PUNCT ")")
(NEWLINE)
(ID "user_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "metadata")
(PUNCT ",")
(LIT "m")
(PUNCT ",")
(LIT "Verify meta-data")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "restructuredtext")
(PUNCT ",")
(LIT "r")
(PUNCT ",")
(PUNCT "(")
(LIT "Checks if long string meta-data syntax ")
(LIT "are reStructuredText-compliant")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "strict")
(PUNCT ",")
(LIT "s")
(PUNCT ",")
(LIT "Will exit with an error if a check fails")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "boolean_options")
(PUNCT "=")
(PUNCT "[")
(LIT "metadata")
(PUNCT ",")
(LIT "restructuredtext")
(PUNCT ",")
(LIT "strict")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets default values for options.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "restructuredtext")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_warnings")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "warn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Counts the number of warnings that occurs.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_warnings")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "Command")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Runs the command.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_metadata")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "restructuredtext")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "HAS_DOCUTILS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_restructuredtext")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "strict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "The docutils package is needed.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "strict")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_warnings")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "Please correct your package.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check_metadata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensures that all required elements of meta-data are supplied.\n\n        name, version, URL, (author and author_email) or\n        (maintainer and maintainer_email)).\n\n        Warns if any are missing.\n        ")
(NEWLINE)
(ID "metadata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "metadata")
(NEWLINE)
(ID "missing")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "version")
(PUNCT ",")
(LIT "url")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "metadata")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(KEYWORD and)
(ID "getattr")
(PUNCT "(")
(ID "metadata")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "missing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "missing required meta-data: %s")
(PUNCT "%")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "missing")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "metadata")
(PUNCT ".")
(ID "author")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "metadata")
(PUNCT ".")
(ID "author_email")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "missing meta-data: if 'author' supplied, ")
(PUNCT "+")
(LIT "'author_email' must be supplied too")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "metadata")
(PUNCT ".")
(ID "maintainer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "metadata")
(PUNCT ".")
(ID "maintainer_email")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "missing meta-data: if 'maintainer' supplied, ")
(PUNCT "+")
(LIT "'maintainer_email' must be supplied too")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "missing meta-data: either (author and author_email) ")
(PUNCT "+")
(LIT "or (maintainer and maintainer_email) ")
(PUNCT "+")
(LIT "must be supplied")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check_restructuredtext")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Checks if the long string fields are reST-compliant.")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_long_description")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "warning")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_check_rst_data")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "warning")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warning")
(PUNCT "=")
(ID "warning")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warning")
(PUNCT "=")
(LIT "%s (line %s)")
(PUNCT "%")
(PUNCT "(")
(ID "warning")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "warning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_rst_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns warnings when the provided data doesn't compile.")
(NEWLINE)
(ID "source_path")
(PUNCT "=")
(ID "StringIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "Parser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "settings")
(PUNCT "=")
(ID "frontend")
(PUNCT ".")
(ID "OptionParser")
(PUNCT "(")
(ID "components")
(PUNCT "=")
(PUNCT "(")
(ID "Parser")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "get_default_values")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "settings")
(PUNCT ".")
(ID "tab_width")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "settings")
(PUNCT ".")
(ID "pep_references")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "settings")
(PUNCT ".")
(ID "rfc_references")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "reporter")
(PUNCT "=")
(ID "SilentReporter")
(PUNCT "(")
(ID "source_path")
(PUNCT ",")
(ID "settings")
(PUNCT ".")
(ID "report_level")
(PUNCT ",")
(ID "settings")
(PUNCT ".")
(ID "halt_level")
(PUNCT ",")
(ID "stream")
(PUNCT "=")
(ID "settings")
(PUNCT ".")
(ID "warning_stream")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "settings")
(PUNCT ".")
(ID "debug")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "settings")
(PUNCT ".")
(ID "error_encoding")
(PUNCT ",")
(ID "error_handler")
(PUNCT "=")
(ID "settings")
(PUNCT ".")
(ID "error_encoding_error_handler")
(PUNCT ")")
(NEWLINE)
(ID "document")
(PUNCT "=")
(ID "nodes")
(PUNCT ".")
(ID "document")
(PUNCT "(")
(ID "settings")
(PUNCT ",")
(ID "reporter")
(PUNCT ",")
(ID "source")
(PUNCT "=")
(ID "source_path")
(PUNCT ")")
(NEWLINE)
(ID "document")
(PUNCT ".")
(ID "note_source")
(PUNCT "(")
(ID "source_path")
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "document")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reporter")
(PUNCT ".")
(ID "messages")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(LIT "Could not finish the parsing: %s.")
(PUNCT "%")
(ID "e")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "reporter")
(PUNCT ".")
(ID "messages")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
