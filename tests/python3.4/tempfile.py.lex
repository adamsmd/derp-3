(LIT "Temporary files.\n\nThis module provides generic, low- and high-level interfaces for\ncreating temporary files and directories.  All of the interfaces\nprovided by this module can be used without fear of race conditions\nexcept for 'mktemp'.  'mktemp' is subject to race conditions and\nshould not be used; it is provided for backward compatibility only.\n\nThis module also provides some data items to the user:\n\n  TMP_MAX  - maximum number of names that will be tried before\n             giving up.\n  tempdir  - If this is set to a string before the first use of\n             any routine from this module, it will be considered as\n             another candidate location to store temporary files.\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "NamedTemporaryFile")
(PUNCT ",")
(LIT "TemporaryFile")
(PUNCT ",")
(LIT "SpooledTemporaryFile")
(PUNCT ",")
(LIT "TemporaryDirectory")
(PUNCT ",")
(LIT "mkstemp")
(PUNCT ",")
(LIT "mkdtemp")
(PUNCT ",")
(LIT "mktemp")
(PUNCT ",")
(LIT "TMP_MAX")
(PUNCT ",")
(LIT "gettempprefix")
(PUNCT ",")
(LIT "tempdir")
(PUNCT ",")
(LIT "gettempdir")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "functools")
(KEYWORD as)
(ID "_functools")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(KEYWORD as)
(ID "_warnings")
(NEWLINE)
(KEYWORD import)
(ID "io")
(KEYWORD as)
(ID "_io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(KEYWORD as)
(ID "_os")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "shutil")
(KEYWORD as)
(ID "_shutil")
(NEWLINE)
(ID "_rmtree")
(PUNCT "=")
(ID "_shutil")
(PUNCT ".")
(ID "rmtree")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(KEYWORD as)
(ID "_sys")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(KEYWORD as)
(ID "_stat")
(NEWLINE)
(KEYWORD def)
(ID "_rmtree_unsafe")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "onerror")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "Cannot call rmtree on a symbolic link")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "listdir")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fullname")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_stat")
(PUNCT ".")
(ID "S_ISDIR")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_rmtree_unsafe")
(PUNCT "(")
(ID "fullname")
(PUNCT ",")
(ID "onerror")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_rmtree_safe_fd")
(PUNCT "(")
(ID "topfd")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "onerror")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "topfd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "path")
(NEWLINE)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "listdir")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fullname")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_st")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "dir_fd")
(PUNCT "=")
(ID "topfd")
(PUNCT ",")
(ID "follow_symlinks")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "orig_st")
(PUNCT ".")
(ID "st_mode")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_stat")
(PUNCT ".")
(ID "S_ISDIR")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirfd")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "O_RDONLY")
(PUNCT ",")
(ID "dir_fd")
(PUNCT "=")
(ID "topfd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "samestat")
(PUNCT "(")
(ID "orig_st")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "dirfd")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_rmtree_safe_fd")
(PUNCT "(")
(ID "dirfd")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "onerror")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "dir_fd")
(PUNCT "=")
(ID "topfd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "Cannot call rmtree on a symbolic ")
(LIT "link")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "dirfd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "dir_fd")
(PUNCT "=")
(ID "topfd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT ",")
(ID "fullname")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_use_fd_functions")
(PUNCT "=")
(PUNCT "(")
(PUNCT "{")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "stat")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT "}")
(PUNCT "<=")
(ID "_os")
(PUNCT ".")
(ID "supports_dir_fd")
(KEYWORD and)
(ID "_os")
(PUNCT ".")
(ID "listdir")
(KEYWORD in)
(ID "_os")
(PUNCT ".")
(ID "supports_fd")
(KEYWORD and)
(ID "_os")
(PUNCT ".")
(ID "stat")
(KEYWORD in)
(ID "_os")
(PUNCT ".")
(ID "supports_follow_symlinks")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_rmtree")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "ignore_errors")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "onerror")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Recursively delete a directory tree.\n\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "ignore_errors")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "onerror")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "onerror")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "onerror")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_use_fd_functions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "fsdecode")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "orig_st")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "lstat")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fd")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "O_RDONLY")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "lstat")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "samestat")
(PUNCT "(")
(ID "orig_st")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_rmtree_safe_fd")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "onerror")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "rmdir")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "Cannot call rmtree on a symbolic link")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "onerror")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_rmtree_unsafe")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "onerror")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD import)
(ID "errno")
(KEYWORD as)
(ID "_errno")
(NEWLINE)
(KEYWORD from)
(ID "random")
(KEYWORD import)
(ID "Random")
(KEYWORD as)
(ID "_Random")
(NEWLINE)
(KEYWORD import)
(ID "weakref")
(KEYWORD as)
(ID "_weakref")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_thread")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_dummy_thread")
(KEYWORD as)
(ID "_thread")
(NEWLINE)
(DEDENT)
(ID "_allocate_lock")
(PUNCT "=")
(ID "_thread")
(PUNCT ".")
(ID "allocate_lock")
(NEWLINE)
(ID "_text_openflags")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "O_RDWR")
(PUNCT "|")
(ID "_os")
(PUNCT ".")
(ID "O_CREAT")
(PUNCT "|")
(ID "_os")
(PUNCT ".")
(ID "O_EXCL")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "_os")
(PUNCT ",")
(LIT "O_NOFOLLOW")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_text_openflags")
(PUNCT "|=")
(ID "_os")
(PUNCT ".")
(ID "O_NOFOLLOW")
(NEWLINE)
(DEDENT)
(ID "_bin_openflags")
(PUNCT "=")
(ID "_text_openflags")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "_os")
(PUNCT ",")
(LIT "O_BINARY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_bin_openflags")
(PUNCT "|=")
(ID "_os")
(PUNCT ".")
(ID "O_BINARY")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "_os")
(PUNCT ",")
(LIT "TMP_MAX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TMP_MAX")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "TMP_MAX")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TMP_MAX")
(PUNCT "=")
(LIT 10000)
(NEWLINE)
(DEDENT)
(ID "template")
(PUNCT "=")
(LIT "tmp")
(NEWLINE)
(ID "_once_lock")
(PUNCT "=")
(ID "_allocate_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "_os")
(PUNCT ",")
(LIT "lstat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_stat")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "lstat")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "_os")
(PUNCT ",")
(LIT "stat")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_stat")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "stat")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_stat")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fd")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "fn")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "O_RDONLY")
(PUNCT ")")
(NEWLINE)
(ID "_os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_exists")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_stat")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_RandomNameSequence")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is six characters long.  Multiple\n    threads can safely use the same instance at the same time.\n\n    _RandomNameSequence is an iterator.")
(NEWLINE)
(ID "characters")
(PUNCT "=")
(LIT "abcdefghijklmnopqrstuvwxyz0123456789_")
(NEWLINE)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "rng")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cur_pid")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cur_pid")
(PUNCT "!=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "_rng_pid")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_rng")
(PUNCT "=")
(ID "_Random")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rng_pid")
(PUNCT "=")
(ID "cur_pid")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_rng")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "characters")
(NEWLINE)
(ID "choose")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "rng")
(PUNCT ".")
(ID "choice")
(NEWLINE)
(ID "letters")
(PUNCT "=")
(PUNCT "[")
(ID "choose")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(KEYWORD for)
(ID "dummy")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "letters")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_candidate_tempdir_list")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate a list of candidate temporary directories which\n    _get_default_tempdir will try.")
(NEWLINE)
(ID "dirlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "envname")
(KEYWORD in)
(LIT "TMPDIR")
(PUNCT ",")
(LIT "TEMP")
(PUNCT ",")
(LIT "TMP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirname")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "getenv")
(PUNCT "(")
(ID "envname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dirname")
(PUNCT ":")
(ID "dirlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dirname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirlist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "c:\\temp")
(PUNCT ",")
(LIT "c:\\tmp")
(PUNCT ",")
(LIT "\\temp")
(PUNCT ",")
(LIT "\\tmp")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirlist")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(LIT "/tmp")
(PUNCT ",")
(LIT "/var/tmp")
(PUNCT ",")
(LIT "/usr/tmp")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "getcwd")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "curdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dirlist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_default_tempdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate the default directory to use for temporary files.\n    This routine should be called exactly once.\n\n    We determine whether or not a candidate temp dir is usable by\n    trying to create and write to a file in that directory.  If this\n    is successful, the test file is deleted.  To prevent denial of\n    service, the name of the test file must be randomized.")
(NEWLINE)
(ID "namer")
(PUNCT "=")
(ID "_RandomNameSequence")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dirlist")
(PUNCT "=")
(ID "_candidate_tempdir_list")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "dirlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "dir")
(PUNCT "!=")
(ID "_os")
(PUNCT ".")
(ID "curdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "seq")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 100)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "namer")
(PUNCT ")")
(NEWLINE)
(ID "filename")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fd")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "_bin_openflags")
(PUNCT ",")
(LIT 384)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "_io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(LIT "wb")
(PUNCT ",")
(ID "closefd")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"blat")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dir")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "FileNotFoundError")
(PUNCT "(")
(ID "_errno")
(PUNCT ".")
(ID "ENOENT")
(PUNCT ",")
(LIT "No usable temporary directory found in %s")
(PUNCT "%")
(ID "dirlist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_name_sequence")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_get_candidate_names")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Common setup sequence for all user-callable interfaces.")
(NEWLINE)
(KEYWORD global)
(ID "_name_sequence")
(NEWLINE)
(KEYWORD if)
(ID "_name_sequence")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_once_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_name_sequence")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_name_sequence")
(PUNCT "=")
(ID "_RandomNameSequence")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_once_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_name_sequence")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mkstemp_inner")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "pre")
(PUNCT ",")
(ID "suf")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Code common to mkstemp, TemporaryFile, and NamedTemporaryFile.")
(NEWLINE)
(ID "names")
(PUNCT "=")
(ID "_get_candidate_names")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "seq")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "TMP_MAX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "pre")
(PUNCT "+")
(ID "name")
(PUNCT "+")
(ID "suf")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fd")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(LIT 384)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "PermissionError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "FileExistsError")
(PUNCT "(")
(ID "_errno")
(PUNCT ".")
(ID "EEXIST")
(PUNCT ",")
(LIT "No usable temporary file name found")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gettempprefix")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Accessor for tempdir.template.")
(NEWLINE)
(KEYWORD return)
(ID "template")
(NEWLINE)
(DEDENT)
(ID "tempdir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Accessor for tempfile.tempdir.")
(NEWLINE)
(KEYWORD global)
(ID "tempdir")
(NEWLINE)
(KEYWORD if)
(ID "tempdir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_once_lock")
(PUNCT ".")
(ID "acquire")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tempdir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tempdir")
(PUNCT "=")
(ID "_get_default_tempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_once_lock")
(PUNCT ".")
(ID "release")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "tempdir")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mkstemp")
(PUNCT "(")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "text")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n\n    If 'suffix' is specified, the file name will end with that suffix,\n    otherwise there will be no suffix.\n\n    If 'prefix' is specified, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n\n    If 'dir' is specified, the file will be created in that directory,\n    otherwise a default directory is used.\n\n    If 'text' is specified and true, the file is opened in text\n    mode.  Else (the default) the file is opened in binary mode.  On\n    some operating systems, this makes no difference.\n\n    The file is readable and writable only by the creating user ID.\n    If the operating system uses permission bits to indicate whether a\n    file is executable, the file is executable by no one. The file\n    descriptor is not inherited by children of this process.\n\n    Caller is responsible for deleting the file when done with it.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "text")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_text_openflags")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_bin_openflags")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_mkstemp_inner")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mkdtemp")
(PUNCT "(")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    The directory is readable, writable, and searchable only by the\n    creating user.\n\n    Caller is responsible for deleting the directory when done with it.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT "=")
(ID "_get_candidate_names")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "seq")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "TMP_MAX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "prefix")
(PUNCT "+")
(ID "name")
(PUNCT "+")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT 448)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "file")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "FileExistsError")
(PUNCT "(")
(ID "_errno")
(PUNCT ".")
(ID "EEXIST")
(PUNCT ",")
(LIT "No usable temporary directory name found")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mktemp")
(PUNCT "(")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "User-callable function to return a unique temporary file name.  The\n    file is not created.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    This function is unsafe and should not be used.  The file name\n    refers to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT "=")
(ID "_get_candidate_names")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "seq")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "TMP_MAX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "next")
(PUNCT "(")
(ID "names")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "prefix")
(PUNCT "+")
(ID "name")
(PUNCT "+")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_exists")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "file")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "FileExistsError")
(PUNCT "(")
(ID "_errno")
(PUNCT ".")
(ID "EEXIST")
(PUNCT ",")
(LIT "No usable temporary filename found")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_TemporaryFileCloser")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A separate object allowing proper closing of a temporary file's\n    underlying file object, without adding a __del__ method to the\n    temporary file.")
(NEWLINE)
(ID "file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "close_called")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "delete")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "delete")
(PUNCT "=")
(ID "delete")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "unlink")
(PUNCT "=")
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "close_called")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "file")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_called")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "delete")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unlink")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "close_called")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close_called")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_TemporaryFileWrapper")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Temporary file wrapper\n\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "delete")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "delete")
(PUNCT "=")
(ID "delete")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closer")
(PUNCT "=")
(ID "_TemporaryFileCloser")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "delete")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "file")
(PUNCT "]")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(LIT "__call__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "a")
(NEWLINE)
(PUNCT "@")
(ID "_functools")
(PUNCT ".")
(ID "wraps")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "func_wrapper")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "func_wrapper")
(PUNCT ".")
(ID "_closer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_closer")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "func_wrapper")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "a")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "a")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "__enter__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "__exit__")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Close the temporary file, possibly deleting it.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closer")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "NamedTemporaryFile")
(PUNCT "(")
(ID "mode")
(PUNCT "=")
(LIT "w+b")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "delete")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return a temporary file.\n    Arguments:\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\n    'mode' -- the mode argument to io.open (default \"w+b\").\n    'buffering' -- the buffer size argument to io.open (default -1).\n    'encoding' -- the encoding argument to io.open (default None)\n    'newline' -- the newline argument to io.open (default None)\n    'delete' -- whether the file is deleted on close (default True).\n    The file is created as mkstemp() would do it.\n\n    Returns an object with a file-like interface; the name of the file\n    is accessible as file.name.  The file will be automatically deleted\n    when it is closed unless the 'delete' argument is set to False.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "flags")
(PUNCT "=")
(ID "_bin_openflags")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(KEYWORD and)
(ID "delete")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_os")
(PUNCT ".")
(ID "O_TEMPORARY")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "=")
(ID "_mkstemp_inner")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "_io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(ID "buffering")
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(ID "newline")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_TemporaryFileWrapper")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "delete")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "posix")
(KEYWORD or)
(ID "_os")
(PUNCT ".")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "cygwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "TemporaryFile")
(PUNCT "=")
(ID "NamedTemporaryFile")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "TemporaryFile")
(PUNCT "(")
(ID "mode")
(PUNCT "=")
(LIT "w+b")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return a temporary file.\n        Arguments:\n        'prefix', 'suffix', 'dir' -- as for mkstemp.\n        'mode' -- the mode argument to io.open (default \"w+b\").\n        'buffering' -- the buffer size argument to io.open (default -1).\n        'encoding' -- the encoding argument to io.open (default None)\n        'newline' -- the newline argument to io.open (default None)\n        The file is created as mkstemp() would do it.\n\n        Returns an object with a file-like interface.  The file has no\n        name, and will cease to exist when it is closed.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dir")
(PUNCT "=")
(ID "gettempdir")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "flags")
(PUNCT "=")
(ID "_bin_openflags")
(NEWLINE)
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "=")
(ID "_mkstemp_inner")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "suffix")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_io")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(ID "buffering")
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(ID "newline")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SpooledTemporaryFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Temporary file wrapper, specialized to switch from BytesIO\n    or StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    ")
(NEWLINE)
(ID "_rolled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "max_size")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "w+b")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "newline")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "b")
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "_io")
(PUNCT ".")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "_io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(ID "newline")
(PUNCT "=")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_max_size")
(PUNCT "=")
(ID "max_size")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rolled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT "=")
(PUNCT "{")
(LIT "mode")
(PUNCT ":")
(ID "mode")
(PUNCT ",")
(LIT "buffering")
(PUNCT ":")
(ID "buffering")
(PUNCT ",")
(LIT "suffix")
(PUNCT ":")
(ID "suffix")
(PUNCT ",")
(LIT "prefix")
(PUNCT ":")
(ID "prefix")
(PUNCT ",")
(LIT "encoding")
(PUNCT ":")
(ID "encoding")
(PUNCT ",")
(LIT "newline")
(PUNCT ":")
(ID "newline")
(PUNCT ",")
(LIT "dir")
(PUNCT ":")
(ID "dir")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_rolled")
(PUNCT ":")
(KEYWORD return)
(NEWLINE)
(ID "max_size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_max_size")
(NEWLINE)
(KEYWORD if)
(ID "max_size")
(KEYWORD and)
(ID "file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(PUNCT ">")
(ID "max_size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rollover")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "rollover")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_rolled")
(PUNCT ":")
(KEYWORD return)
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(NEWLINE)
(ID "newfile")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "TemporaryFile")
(PUNCT "(")
(PUNCT "**")
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(NEWLINE)
(ID "newfile")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "file")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "newfile")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_rolled")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Cannot enter context with closed file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "__iter__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "closed")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "encoding")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "b")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT "[")
(LIT "mode")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT "[")
(LIT "encoding")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "fileno")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rollover")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isatty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "isatty")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "mode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "mode")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT "[")
(LIT "mode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "newlines")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "newlines")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "b")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT "[")
(LIT "mode")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_TemporaryFileArgs")
(PUNCT "[")
(LIT "newline")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readlines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "readlines")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "softspace")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "softspace")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "truncate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "truncate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "_max_size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "rollover")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "truncate")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(NEWLINE)
(ID "rv")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "rv")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writelines")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(NEWLINE)
(ID "rv")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "writelines")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "rv")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TemporaryDirectory")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return a temporary directory.  This has the same\n    behavior as mkdtemp but can be used as a context manager.  For\n    example:\n\n        with TemporaryDirectory() as tmpdir:\n            ...\n\n    Upon exiting the context, the directory and everything contained\n    in it are removed.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "template")
(PUNCT ",")
(ID "dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "mkdtemp")
(PUNCT "(")
(ID "suffix")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_finalizer")
(PUNCT "=")
(ID "_weakref")
(PUNCT ".")
(ID "finalize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_cleanup")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "warn_message")
(PUNCT "=")
(LIT "Implicitly cleaning up {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_cleanup")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "warn_message")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_rmtree")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "_warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "warn_message")
(PUNCT ",")
(ID "ResourceWarning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<{} {!r}>")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cleanup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cleanup")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_finalizer")
(PUNCT ".")
(ID "detach")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_rmtree")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
