(LIT "Shared OS X support functions.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "compiler_fixup")
(PUNCT ",")
(LIT "customize_config_vars")
(PUNCT ",")
(LIT "customize_compiler")
(PUNCT ",")
(LIT "get_platform_osx")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "_UNIVERSAL_CONFIG_VARS")
(PUNCT "=")
(PUNCT "(")
(LIT "CFLAGS")
(PUNCT ",")
(LIT "LDFLAGS")
(PUNCT ",")
(LIT "CPPFLAGS")
(PUNCT ",")
(LIT "BASECFLAGS")
(PUNCT ",")
(LIT "BLDSHARED")
(PUNCT ",")
(LIT "LDSHARED")
(PUNCT ",")
(LIT "CC")
(PUNCT ",")
(LIT "CXX")
(PUNCT ",")
(LIT "PY_CFLAGS")
(PUNCT ",")
(LIT "PY_LDFLAGS")
(PUNCT ",")
(LIT "PY_CPPFLAGS")
(PUNCT ",")
(LIT "PY_CORE_CFLAGS")
(PUNCT ")")
(NEWLINE)
(ID "_COMPILER_CONFIG_VARS")
(PUNCT "=")
(PUNCT "(")
(LIT "BLDSHARED")
(PUNCT ",")
(LIT "LDSHARED")
(PUNCT ",")
(LIT "CC")
(PUNCT ",")
(LIT "CXX")
(PUNCT ")")
(NEWLINE)
(ID "_INITPRE")
(PUNCT "=")
(LIT "_OSX_SUPPORT_INITIAL_")
(NEWLINE)
(KEYWORD def)
(ID "_find_executable")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Tries to find 'executable' in the directories listed in 'path'.\n\n    A string listing directories separated by 'os.pathsep'; defaults to\n    os.environ['PATH'].  Returns the complete filename or None if not found.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "PATH")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "paths")
(PUNCT "=")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "ext")
(PUNCT "!=")
(LIT ".exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executable")
(PUNCT "=")
(ID "executable")
(PUNCT "+")
(LIT ".exe")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "executable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "executable")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "executable")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_read_output")
(PUNCT "(")
(ID "commandstring")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Output from successful command execution or None")
(NEWLINE)
(KEYWORD import)
(ID "contextlib")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "tempfile")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "tempfile")
(PUNCT ".")
(ID "NamedTemporaryFile")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(LIT "/tmp/_osx_support.%s")
(PUNCT "%")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(LIT "w+b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "contextlib")
(PUNCT ".")
(ID "closing")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "%s 2>/dev/null >'%s'")
(PUNCT "%")
(PUNCT "(")
(ID "commandstring")
(PUNCT ",")
(ID "fp")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "system")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_find_build_tool")
(PUNCT "(")
(ID "toolname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find a build tool on current path or using xcrun")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "_find_executable")
(PUNCT "(")
(ID "toolname")
(PUNCT ")")
(KEYWORD or)
(ID "_read_output")
(PUNCT "(")
(LIT "/usr/bin/xcrun -find %s")
(PUNCT "%")
(PUNCT "(")
(ID "toolname")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_SYSTEM_VERSION")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "_get_system_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the OS X system version as a string")
(NEWLINE)
(KEYWORD global)
(ID "_SYSTEM_VERSION")
(NEWLINE)
(KEYWORD if)
(ID "_SYSTEM_VERSION")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_SYSTEM_VERSION")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(LIT "/System/Library/CoreServices/SystemVersion.plist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "<key>ProductUserVisibleVersion</key>\\s*")
(LIT "<string>(.*?)</string>")
(PUNCT ",")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_SYSTEM_VERSION")
(PUNCT "=")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_SYSTEM_VERSION")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_remove_original_values")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove original unmodified values for testing")
(NEWLINE)
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "k")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "_INITPRE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_config_vars")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_save_modified_value")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(ID "newvalue")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Save modified and original unmodified value of configuration var")
(NEWLINE)
(ID "oldvalue")
(PUNCT "=")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cv")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "oldvalue")
(PUNCT "!=")
(ID "newvalue")
(PUNCT ")")
(KEYWORD and)
(PUNCT "(")
(ID "_INITPRE")
(PUNCT "+")
(ID "cv")
(KEYWORD not)
(KEYWORD in)
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_config_vars")
(PUNCT "[")
(ID "_INITPRE")
(PUNCT "+")
(ID "cv")
(PUNCT "]")
(PUNCT "=")
(ID "oldvalue")
(NEWLINE)
(DEDENT)
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(PUNCT "=")
(ID "newvalue")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_supports_universal_builds")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns True if universal builds are supported on this system")
(NEWLINE)
(ID "osx_version")
(PUNCT "=")
(ID "_get_system_version")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "osx_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "osx_version")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "osx_version")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "osx_version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "osx_version")
(PUNCT ">=")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(KEYWORD if)
(ID "osx_version")
(KEYWORD else)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_appropriate_compiler")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find appropriate C compiler for extension module builds")
(NEWLINE)
(KEYWORD if)
(LIT "CC")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(ID "cc")
(PUNCT "=")
(ID "oldcc")
(PUNCT "=")
(ID "_config_vars")
(PUNCT "[")
(LIT "CC")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_find_executable")
(PUNCT "(")
(ID "cc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cc")
(PUNCT "=")
(ID "_find_build_tool")
(PUNCT "(")
(LIT "clang")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "cc")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "gcc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "_read_output")
(PUNCT "(")
(LIT "'%s' --version")
(PUNCT "%")
(PUNCT "(")
(ID "cc")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "'\"'\"'")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(KEYWORD and)
(LIT "llvm-gcc")
(KEYWORD in)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cc")
(PUNCT "=")
(ID "_find_build_tool")
(PUNCT "(")
(LIT "clang")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "cc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemError")
(PUNCT "(")
(LIT "Cannot locate working compiler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cc")
(PUNCT "!=")
(ID "oldcc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "cv")
(KEYWORD in)
(ID "_COMPILER_CONFIG_VARS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cv")
(KEYWORD in)
(ID "_config_vars")
(KEYWORD and)
(ID "cv")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cv_split")
(PUNCT "=")
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cv_split")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "cc")
(KEYWORD if)
(ID "cv")
(PUNCT "!=")
(LIT "CXX")
(KEYWORD else)
(ID "cc")
(PUNCT "+")
(LIT "++")
(NEWLINE)
(ID "_save_modified_value")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "cv_split")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_remove_universal_flags")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove all universal build arguments from config vars")
(NEWLINE)
(KEYWORD for)
(ID "cv")
(KEYWORD in)
(ID "_UNIVERSAL_CONFIG_VARS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cv")
(KEYWORD in)
(ID "_config_vars")
(KEYWORD and)
(ID "cv")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "-arch\\s+\\w+\\s")
(PUNCT ",")
(LIT " ")
(PUNCT ",")
(ID "flags")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "-isysroot [^ \t]*")
(PUNCT ",")
(LIT " ")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "_save_modified_value")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_remove_unsupported_archs")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove any unsupported archs from config vars")
(NEWLINE)
(KEYWORD if)
(LIT "CC")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "-arch\\s+ppc")
(PUNCT ",")
(ID "_config_vars")
(PUNCT "[")
(LIT "CFLAGS")
(PUNCT "]")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "system")
(PUNCT "(")
(LIT "echo 'int main{};' | ")
(LIT "'%s' -c -arch ppc -x c -o /dev/null /dev/null 2>/dev/null")
(PUNCT "%")
(PUNCT "(")
(ID "_config_vars")
(PUNCT "[")
(LIT "CC")
(PUNCT "]")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "'\"'\"'")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "status")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "cv")
(KEYWORD in)
(ID "_UNIVERSAL_CONFIG_VARS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cv")
(KEYWORD in)
(ID "_config_vars")
(KEYWORD and)
(ID "cv")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "-arch\\s+ppc\\w*\\s")
(PUNCT ",")
(LIT " ")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "_save_modified_value")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_override_all_archs")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Allow override of all archs with ARCHFLAGS env var")
(NEWLINE)
(KEYWORD if)
(LIT "ARCHFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arch")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "ARCHFLAGS")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cv")
(KEYWORD in)
(ID "_UNIVERSAL_CONFIG_VARS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cv")
(KEYWORD in)
(ID "_config_vars")
(KEYWORD and)
(LIT "-arch")
(KEYWORD in)
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "-arch\\s+\\w+\\s")
(PUNCT ",")
(LIT " ")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "arch")
(NEWLINE)
(ID "_save_modified_value")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_for_unavailable_sdk")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove references to any SDKs not available")
(NEWLINE)
(ID "cflags")
(PUNCT "=")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "CFLAGS")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "-isysroot\\s+(\\S+)")
(PUNCT ",")
(ID "cflags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sdk")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "sdk")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "cv")
(KEYWORD in)
(ID "_UNIVERSAL_CONFIG_VARS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cv")
(KEYWORD in)
(ID "_config_vars")
(KEYWORD and)
(ID "cv")
(KEYWORD not)
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_config_vars")
(PUNCT "[")
(ID "cv")
(PUNCT "]")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "-isysroot\\s+\\S+(?:\\s|$)")
(PUNCT ",")
(LIT " ")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "_save_modified_value")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "cv")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compiler_fixup")
(PUNCT "(")
(ID "compiler_so")
(PUNCT ",")
(ID "cc_args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    This function will strip '-isysroot PATH' and '-arch ARCH' from the\n    compile flags if the user has specified one them in extra_compile_flags.\n\n    This is needed because '-arch ARCH' adds another architecture to the\n    build, without a way to remove an architecture. Furthermore GCC will\n    barf if multiple '-isysroot' arguments are present.\n    ")
(NEWLINE)
(ID "stripArch")
(PUNCT "=")
(ID "stripSysroot")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "compiler_so")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "compiler_so")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_supports_universal_builds")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stripArch")
(PUNCT "=")
(ID "stripSysroot")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stripArch")
(PUNCT "=")
(LIT "-arch")
(KEYWORD in)
(ID "cc_args")
(NEWLINE)
(ID "stripSysroot")
(PUNCT "=")
(LIT "-isysroot")
(KEYWORD in)
(ID "cc_args")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stripArch")
(KEYWORD or)
(LIT "ARCHFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "compiler_so")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "-arch")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "compiler_so")
(PUNCT "[")
(ID "index")
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(LIT "ARCHFLAGS")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(KEYWORD not)
(ID "stripArch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compiler_so")
(PUNCT "=")
(ID "compiler_so")
(PUNCT "+")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "ARCHFLAGS")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stripSysroot")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "compiler_so")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "-isysroot")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "compiler_so")
(PUNCT "[")
(ID "index")
(PUNCT ":")
(ID "index")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "sysroot")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(LIT "-isysroot")
(KEYWORD in)
(ID "cc_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idx")
(PUNCT "=")
(ID "cc_args")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "-isysroot")
(PUNCT ")")
(NEWLINE)
(ID "sysroot")
(PUNCT "=")
(ID "cc_args")
(PUNCT "[")
(ID "idx")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "-isysroot")
(KEYWORD in)
(ID "compiler_so")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idx")
(PUNCT "=")
(ID "compiler_so")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "-isysroot")
(PUNCT ")")
(NEWLINE)
(ID "sysroot")
(PUNCT "=")
(ID "compiler_so")
(PUNCT "[")
(ID "idx")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sysroot")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "sysroot")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Compiling with an SDK that doesn't seem to exist: %s")
(PUNCT ",")
(ID "sysroot")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "Please check your Xcode installation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "compiler_so")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "customize_config_vars")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Customize Python build configuration variables.\n\n    Called internally from sysconfig with a mutable mapping\n    containing name/value pairs parsed from the configured\n    makefile used to build this interpreter.  Returns\n    the mapping updated as needed to reflect the environment\n    in which the interpreter is running; in the case of\n    a Python from a binary installer, the installed\n    environment may be very different from the build\n    environment, i.e. different OS levels, different\n    built tools, different available CPU architectures.\n\n    This customization is performed whenever\n    distutils.sysconfig.get_config_vars() is first\n    called.  It may be used in environments where no\n    compilers are present, i.e. when installing pure\n    Python dists.  Customization of compiler paths\n    and detection of unavailable archs is deferred\n    until the first extension module build is\n    requested (in distutils.sysconfig.customize_compiler).\n\n    Currently called from distutils.sysconfig\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "_supports_universal_builds")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_remove_universal_flags")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_override_all_archs")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(ID "_check_for_unavailable_sdk")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "customize_compiler")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Customize compiler path and configuration variables.\n\n    This customization is performed when the first\n    extension module build is requested\n    in distutils.sysconfig.customize_compiler).\n    ")
(NEWLINE)
(ID "_find_appropriate_compiler")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(ID "_remove_unsupported_archs")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(ID "_override_all_archs")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_config_vars")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_platform_osx")
(PUNCT "(")
(ID "_config_vars")
(PUNCT ",")
(ID "osname")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Filter values for get_platform()")
(NEWLINE)
(ID "macver")
(PUNCT "=")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "MACOSX_DEPLOYMENT_TARGET")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "macrelease")
(PUNCT "=")
(ID "_get_system_version")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "macver")
(NEWLINE)
(ID "macver")
(PUNCT "=")
(ID "macver")
(KEYWORD or)
(ID "macrelease")
(NEWLINE)
(KEYWORD if)
(ID "macver")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "release")
(PUNCT "=")
(ID "macver")
(NEWLINE)
(ID "osname")
(PUNCT "=")
(LIT "macosx")
(NEWLINE)
(ID "cflags")
(PUNCT "=")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "_INITPRE")
(PUNCT "+")
(LIT "CFLAGS")
(PUNCT ",")
(ID "_config_vars")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "CFLAGS")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "macrelease")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "macrelease")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "macrelease")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "macrelease")
(PUNCT "=")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "macrelease")
(PUNCT "=")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "macrelease")
(PUNCT ">=")
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(KEYWORD and)
(LIT "-arch")
(KEYWORD in)
(ID "cflags")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "fat")
(NEWLINE)
(ID "archs")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "findall")
(PUNCT "(")
(LIT "-arch\\s+(\\S+)")
(PUNCT ",")
(ID "cflags")
(PUNCT ")")
(NEWLINE)
(ID "archs")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "sorted")
(PUNCT "(")
(ID "set")
(PUNCT "(")
(ID "archs")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "archs")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(ID "archs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "archs")
(PUNCT "==")
(PUNCT "(")
(LIT "i386")
(PUNCT ",")
(LIT "ppc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "fat")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "archs")
(PUNCT "==")
(PUNCT "(")
(LIT "i386")
(PUNCT ",")
(LIT "x86_64")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "intel")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "archs")
(PUNCT "==")
(PUNCT "(")
(LIT "i386")
(PUNCT ",")
(LIT "ppc")
(PUNCT ",")
(LIT "x86_64")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "fat3")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "archs")
(PUNCT "==")
(PUNCT "(")
(LIT "ppc64")
(PUNCT ",")
(LIT "x86_64")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "fat64")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "archs")
(PUNCT "==")
(PUNCT "(")
(LIT "i386")
(PUNCT ",")
(LIT "ppc")
(PUNCT ",")
(LIT "ppc64")
(PUNCT ",")
(LIT "x86_64")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "universal")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Don't know machine value for archs=%r")
(PUNCT "%")
(PUNCT "(")
(ID "archs")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "machine")
(PUNCT "==")
(LIT "i386")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ">=")
(LIT 2)
(PUNCT "**")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "x86_64")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "machine")
(KEYWORD in)
(PUNCT "(")
(LIT "PowerPC")
(PUNCT ",")
(LIT "Power_Macintosh")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ">=")
(LIT 2)
(PUNCT "**")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "ppc64")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "machine")
(PUNCT "=")
(LIT "ppc")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "osname")
(PUNCT ",")
(ID "release")
(PUNCT ",")
(ID "machine")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
