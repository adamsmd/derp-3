(LIT "Tokenization help for Python programs.\n\ngenerate_tokens(readline) is a generator that breaks a stream of\ntext into Python tokens.  It accepts a readline-like method which is called\nrepeatedly to get the next line of input (or \"\" for EOF).  It generates\n5-tuples with these members:\n\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\n\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators\n\nOlder entry points\n    tokenize_loop(readline, tokeneater)\n    tokenize(readline, tokeneater=printtoken)\nare the same, except instead of generating tokens, tokeneater is a callback\nfunction to which the 5 fields described above are passed as 5 arguments,\neach time a new token is found.")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Ka-Ping Yee <ping@lfw.org>")
(NEWLINE)
(ID "__credits__")
(PUNCT "=")
(LIT "GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, Skip Montanaro")
(NEWLINE)
(KEYWORD import)
(ID "string")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "codecs")
(KEYWORD import)
(ID "BOM_UTF8")
(PUNCT ",")
(ID "lookup")
(NEWLINE)
(KEYWORD from)
(ID "lib2to3")
(PUNCT ".")
(ID "pgen2")
(PUNCT ".")
(ID "token")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "token")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(KEYWORD if)
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "!=")
(LIT "_")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(LIT "tokenize")
(PUNCT ",")
(LIT "generate_tokens")
(PUNCT ",")
(LIT "untokenize")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "token")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes")
(PUNCT "=")
(ID "str")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "group")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(LIT "(")
(PUNCT "+")
(LIT "|")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "choices")
(PUNCT ")")
(PUNCT "+")
(LIT ")")
(NEWLINE)
(KEYWORD def)
(ID "any")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "group")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT "+")
(LIT "*")
(NEWLINE)
(KEYWORD def)
(ID "maybe")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "group")
(PUNCT "(")
(PUNCT "*")
(ID "choices")
(PUNCT ")")
(PUNCT "+")
(LIT "?")
(NEWLINE)
(ID "Whitespace")
(PUNCT "=")
(LIT "[ \\f\\t]*")
(NEWLINE)
(ID "Comment")
(PUNCT "=")
(LIT "#[^\\r\\n]*")
(NEWLINE)
(ID "Ignore")
(PUNCT "=")
(ID "Whitespace")
(PUNCT "+")
(ID "any")
(PUNCT "(")
(LIT "\\\\\\r?\\n")
(PUNCT "+")
(ID "Whitespace")
(PUNCT ")")
(PUNCT "+")
(ID "maybe")
(PUNCT "(")
(ID "Comment")
(PUNCT ")")
(NEWLINE)
(ID "Name")
(PUNCT "=")
(LIT "[a-zA-Z_]\\w*")
(NEWLINE)
(ID "Binnumber")
(PUNCT "=")
(LIT "0[bB][01]*")
(NEWLINE)
(ID "Hexnumber")
(PUNCT "=")
(LIT "0[xX][\\da-fA-F]*[lL]?")
(NEWLINE)
(ID "Octnumber")
(PUNCT "=")
(LIT "0[oO]?[0-7]*[lL]?")
(NEWLINE)
(ID "Decnumber")
(PUNCT "=")
(LIT "[1-9]\\d*[lL]?")
(NEWLINE)
(ID "Intnumber")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Binnumber")
(PUNCT ",")
(ID "Hexnumber")
(PUNCT ",")
(ID "Octnumber")
(PUNCT ",")
(ID "Decnumber")
(PUNCT ")")
(NEWLINE)
(ID "Exponent")
(PUNCT "=")
(LIT "[eE][-+]?\\d+")
(NEWLINE)
(ID "Pointfloat")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\d+\\.\\d*")
(PUNCT ",")
(LIT "\\.\\d+")
(PUNCT ")")
(PUNCT "+")
(ID "maybe")
(PUNCT "(")
(ID "Exponent")
(PUNCT ")")
(NEWLINE)
(ID "Expfloat")
(PUNCT "=")
(LIT "\\d+")
(PUNCT "+")
(ID "Exponent")
(NEWLINE)
(ID "Floatnumber")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Pointfloat")
(PUNCT ",")
(ID "Expfloat")
(PUNCT ")")
(NEWLINE)
(ID "Imagnumber")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\d+[jJ]")
(PUNCT ",")
(ID "Floatnumber")
(PUNCT "+")
(LIT "[jJ]")
(PUNCT ")")
(NEWLINE)
(ID "Number")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Imagnumber")
(PUNCT ",")
(ID "Floatnumber")
(PUNCT ",")
(ID "Intnumber")
(PUNCT ")")
(NEWLINE)
(ID "Single")
(PUNCT "=")
(LIT "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'")
(NEWLINE)
(ID "Double")
(PUNCT "=")
(LIT "[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"")
(NEWLINE)
(ID "Single3")
(PUNCT "=")
(LIT "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''")
(NEWLINE)
(ID "Double3")
(PUNCT "=")
(LIT "[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"")
(NEWLINE)
(ID "Triple")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "[ubUB]?[rR]?'''")
(PUNCT ",")
(LIT "[ubUB]?[rR]?\"\"\"")
(PUNCT ")")
(NEWLINE)
(ID "String")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'")
(PUNCT ",")
(LIT "[uU]?[rR]?\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"")
(PUNCT ")")
(NEWLINE)
(ID "Operator")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\*\\*=?")
(PUNCT ",")
(LIT ">>=?")
(PUNCT ",")
(LIT "<<=?")
(PUNCT ",")
(LIT "<>")
(PUNCT ",")
(LIT "!=")
(PUNCT ",")
(LIT "//=?")
(PUNCT ",")
(LIT "->")
(PUNCT ",")
(LIT "[+\\-*/%&@|^=<>]=?")
(PUNCT ",")
(LIT "~")
(PUNCT ")")
(NEWLINE)
(ID "Bracket")
(PUNCT "=")
(LIT "[][(){}]")
(NEWLINE)
(ID "Special")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\r?\\n")
(PUNCT ",")
(LIT "[:;.,`@]")
(PUNCT ")")
(NEWLINE)
(ID "Funny")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Operator")
(PUNCT ",")
(ID "Bracket")
(PUNCT ",")
(ID "Special")
(PUNCT ")")
(NEWLINE)
(ID "PlainToken")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(ID "Number")
(PUNCT ",")
(ID "Funny")
(PUNCT ",")
(ID "String")
(PUNCT ",")
(ID "Name")
(PUNCT ")")
(NEWLINE)
(ID "Token")
(PUNCT "=")
(ID "Ignore")
(PUNCT "+")
(ID "PlainToken")
(NEWLINE)
(ID "ContStr")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*")
(PUNCT "+")
(ID "group")
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "\\\\\\r?\\n")
(PUNCT ")")
(PUNCT ",")
(LIT "[uUbB]?[rR]?\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*")
(PUNCT "+")
(ID "group")
(PUNCT "(")
(LIT "\"")
(PUNCT ",")
(LIT "\\\\\\r?\\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "PseudoExtras")
(PUNCT "=")
(ID "group")
(PUNCT "(")
(LIT "\\\\\\r?\\n")
(PUNCT ",")
(ID "Comment")
(PUNCT ",")
(ID "Triple")
(PUNCT ")")
(NEWLINE)
(ID "PseudoToken")
(PUNCT "=")
(ID "Whitespace")
(PUNCT "+")
(ID "group")
(PUNCT "(")
(ID "PseudoExtras")
(PUNCT ",")
(ID "Number")
(PUNCT ",")
(ID "Funny")
(PUNCT ",")
(ID "ContStr")
(PUNCT ",")
(ID "Name")
(PUNCT ")")
(NEWLINE)
(ID "tokenprog")
(PUNCT ",")
(ID "pseudoprog")
(PUNCT ",")
(ID "single3prog")
(PUNCT ",")
(ID "double3prog")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT ",")
(PUNCT "(")
(ID "Token")
(PUNCT ",")
(ID "PseudoToken")
(PUNCT ",")
(ID "Single3")
(PUNCT ",")
(ID "Double3")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "endprogs")
(PUNCT "=")
(PUNCT "{")
(LIT "'")
(PUNCT ":")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "Single")
(PUNCT ")")
(PUNCT ",")
(LIT "\"")
(PUNCT ":")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "Double")
(PUNCT ")")
(PUNCT ",")
(LIT "'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "r'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "r\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "u'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "u\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "b'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "b\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "ur'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "ur\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "br'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "br\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "R'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "R\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "U'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "U\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "B'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "B\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "uR'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "uR\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "Ur'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "Ur\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "UR'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "UR\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "bR'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "bR\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "Br'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "Br\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "BR'''")
(PUNCT ":")
(ID "single3prog")
(PUNCT ",")
(LIT "BR\"\"\"")
(PUNCT ":")
(ID "double3prog")
(PUNCT ",")
(LIT "r")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "R")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "u")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "U")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "b")
(PUNCT ":")
(KEYWORD None)
(PUNCT ",")
(LIT "B")
(PUNCT ":")
(KEYWORD None)
(PUNCT "}")
(NEWLINE)
(ID "triple_quoted")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(PUNCT "(")
(LIT "'''")
(PUNCT ",")
(LIT "\"\"\"")
(PUNCT ",")
(LIT "r'''")
(PUNCT ",")
(LIT "r\"\"\"")
(PUNCT ",")
(LIT "R'''")
(PUNCT ",")
(LIT "R\"\"\"")
(PUNCT ",")
(LIT "u'''")
(PUNCT ",")
(LIT "u\"\"\"")
(PUNCT ",")
(LIT "U'''")
(PUNCT ",")
(LIT "U\"\"\"")
(PUNCT ",")
(LIT "b'''")
(PUNCT ",")
(LIT "b\"\"\"")
(PUNCT ",")
(LIT "B'''")
(PUNCT ",")
(LIT "B\"\"\"")
(PUNCT ",")
(LIT "ur'''")
(PUNCT ",")
(LIT "ur\"\"\"")
(PUNCT ",")
(LIT "Ur'''")
(PUNCT ",")
(LIT "Ur\"\"\"")
(PUNCT ",")
(LIT "uR'''")
(PUNCT ",")
(LIT "uR\"\"\"")
(PUNCT ",")
(LIT "UR'''")
(PUNCT ",")
(LIT "UR\"\"\"")
(PUNCT ",")
(LIT "br'''")
(PUNCT ",")
(LIT "br\"\"\"")
(PUNCT ",")
(LIT "Br'''")
(PUNCT ",")
(LIT "Br\"\"\"")
(PUNCT ",")
(LIT "bR'''")
(PUNCT ",")
(LIT "bR\"\"\"")
(PUNCT ",")
(LIT "BR'''")
(PUNCT ",")
(LIT "BR\"\"\"")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "triple_quoted")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "t")
(NEWLINE)
(DEDENT)
(ID "single_quoted")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(PUNCT "(")
(LIT "'")
(PUNCT ",")
(LIT "\"")
(PUNCT ",")
(LIT "r'")
(PUNCT ",")
(LIT "r\"")
(PUNCT ",")
(LIT "R'")
(PUNCT ",")
(LIT "R\"")
(PUNCT ",")
(LIT "u'")
(PUNCT ",")
(LIT "u\"")
(PUNCT ",")
(LIT "U'")
(PUNCT ",")
(LIT "U\"")
(PUNCT ",")
(LIT "b'")
(PUNCT ",")
(LIT "b\"")
(PUNCT ",")
(LIT "B'")
(PUNCT ",")
(LIT "B\"")
(PUNCT ",")
(LIT "ur'")
(PUNCT ",")
(LIT "ur\"")
(PUNCT ",")
(LIT "Ur'")
(PUNCT ",")
(LIT "Ur\"")
(PUNCT ",")
(LIT "uR'")
(PUNCT ",")
(LIT "uR\"")
(PUNCT ",")
(LIT "UR'")
(PUNCT ",")
(LIT "UR\"")
(PUNCT ",")
(LIT "br'")
(PUNCT ",")
(LIT "br\"")
(PUNCT ",")
(LIT "Br'")
(PUNCT ",")
(LIT "Br\"")
(PUNCT ",")
(LIT "bR'")
(PUNCT ",")
(LIT "bR\"")
(PUNCT ",")
(LIT "BR'")
(PUNCT ",")
(LIT "BR\"")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "single_quoted")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "t")
(NEWLINE)
(DEDENT)
(ID "tabsize")
(PUNCT "=")
(LIT 8)
(NEWLINE)
(KEYWORD class)
(ID "TokenError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD class)
(ID "StopTokenizing")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD def)
(ID "printtoken")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "xxx_todo_changeme")
(PUNCT ",")
(ID "xxx_todo_changeme1")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "srow")
(PUNCT ",")
(ID "scol")
(PUNCT ")")
(PUNCT "=")
(ID "xxx_todo_changeme")
(NEWLINE)
(PUNCT "(")
(ID "erow")
(PUNCT ",")
(ID "ecol")
(PUNCT ")")
(PUNCT "=")
(ID "xxx_todo_changeme1")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "%d,%d-%d,%d:\t%s\t%s")
(PUNCT "%")
(PUNCT "(")
(ID "srow")
(PUNCT ",")
(ID "scol")
(PUNCT ",")
(ID "erow")
(PUNCT ",")
(ID "ecol")
(PUNCT ",")
(ID "tok_name")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tokenize")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(ID "tokeneater")
(PUNCT "=")
(ID "printtoken")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The tokenize() function accepts two parameters: one representing the\n    input stream, and one providing an output mechanism for tokenize().\n\n    The first parameter, readline, must be a callable object which provides\n    the same interface as the readline() method of built-in file objects.\n    Each call to the function should return one line of input as a string.\n\n    The second parameter, tokeneater, must also be a callable object. It is\n    called once for each token, with five arguments, corresponding to the\n    tuples generated by generate_tokens().\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokenize_loop")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(ID "tokeneater")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopTokenizing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tokenize_loop")
(PUNCT "(")
(ID "readline")
(PUNCT ",")
(ID "tokeneater")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "token_info")
(KEYWORD in)
(ID "generate_tokens")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokeneater")
(PUNCT "(")
(PUNCT "*")
(ID "token_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Untokenizer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_whitespace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "row")
(PUNCT ",")
(ID "col")
(PUNCT "=")
(ID "start")
(NEWLINE)
(KEYWORD assert)
(ID "row")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "prev_row")
(NEWLINE)
(ID "col_offset")
(PUNCT "=")
(ID "col")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "prev_col")
(NEWLINE)
(KEYWORD if)
(ID "col_offset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT " ")
(PUNCT "*")
(ID "col_offset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "untokenize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compat")
(PUNCT "(")
(ID "t")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "tok_type")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "line")
(PUNCT "=")
(ID "t")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add_whitespace")
(PUNCT "(")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD if)
(ID "tok_type")
(KEYWORD in)
(PUNCT "(")
(ID "NEWLINE")
(PUNCT ",")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "prev_row")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "prev_col")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compat")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "indents")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "toks_append")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tokens")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "toknum")
(PUNCT ",")
(ID "tokval")
(PUNCT "=")
(ID "token")
(NEWLINE)
(KEYWORD if)
(ID "toknum")
(KEYWORD in)
(PUNCT "(")
(ID "NAME")
(PUNCT ",")
(ID "NUMBER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokval")
(PUNCT "+=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "toknum")
(KEYWORD in)
(PUNCT "(")
(ID "NEWLINE")
(PUNCT ",")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startline")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "tok")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toknum")
(PUNCT ",")
(ID "tokval")
(PUNCT "=")
(ID "tok")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "toknum")
(KEYWORD in)
(PUNCT "(")
(ID "NAME")
(PUNCT ",")
(ID "NUMBER")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tokval")
(PUNCT "+=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "toknum")
(PUNCT "==")
(ID "INDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tokval")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "toknum")
(PUNCT "==")
(ID "DEDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "toknum")
(KEYWORD in)
(PUNCT "(")
(ID "NEWLINE")
(PUNCT ",")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "startline")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "startline")
(KEYWORD and)
(ID "indents")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toks_append")
(PUNCT "(")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "startline")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "toks_append")
(PUNCT "(")
(ID "tokval")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "cookie_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[ \\t\\f]*#.*coding[:=][ \\t]*([-\\w.]+)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(ID "blank_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"^[ \\t\\f]*(?:[#\\r\\n]|$)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_get_normal_name")
(PUNCT "(")
(ID "orig_enc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Imitates get_normal_name in tokenizer.c.")
(NEWLINE)
(ID "enc")
(PUNCT "=")
(ID "orig_enc")
(PUNCT "[")
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "_")
(PUNCT ",")
(LIT "-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "enc")
(PUNCT "==")
(LIT "utf-8")
(KEYWORD or)
(ID "enc")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "utf-8-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "enc")
(KEYWORD in)
(PUNCT "(")
(LIT "latin-1")
(PUNCT ",")
(LIT "iso-8859-1")
(PUNCT ",")
(LIT "iso-latin-1")
(PUNCT ")")
(KEYWORD or)
(ID "enc")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(PUNCT "(")
(LIT "latin-1-")
(PUNCT ",")
(LIT "iso-8859-1-")
(PUNCT ",")
(LIT "iso-latin-1-")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "iso-8859-1")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "orig_enc")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "detect_encoding")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argument, readline,\n    in the same way as the tokenize() generator.\n\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read\n    in.\n\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263. If both a bom and a cookie are present, but\n    disagree, a SyntaxError will be raised. If the encoding cookie is an invalid\n    charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n    'utf-8-sig' is returned.\n\n    If no encoding is specified, then the default of 'utf-8' will be returned.\n    ")
(NEWLINE)
(ID "bom_found")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "default")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(KEYWORD def)
(ID "read_or_stop")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bytes")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_cookie")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line_string")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "match")
(PUNCT "=")
(ID "cookie_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line_string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "=")
(ID "_get_normal_name")
(PUNCT "(")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "codec")
(PUNCT "=")
(ID "lookup")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "LookupError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SyntaxError")
(PUNCT "(")
(LIT "unknown encoding: ")
(PUNCT "+")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bom_found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "codec")
(PUNCT ".")
(ID "name")
(PUNCT "!=")
(LIT "utf-8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SyntaxError")
(PUNCT "(")
(LIT "encoding problem: utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "+=")
(LIT "-sig")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "encoding")
(NEWLINE)
(DEDENT)
(ID "first")
(PUNCT "=")
(ID "read_or_stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "first")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "BOM_UTF8")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bom_found")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "first")
(PUNCT "=")
(ID "first")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "default")
(PUNCT "=")
(LIT "utf-8-sig")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "=")
(ID "find_cookie")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "encoding")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "blank_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "second")
(PUNCT "=")
(ID "read_or_stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "second")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "encoding")
(PUNCT "=")
(ID "find_cookie")
(PUNCT "(")
(ID "second")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "encoding")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "default")
(PUNCT ",")
(PUNCT "[")
(ID "first")
(PUNCT ",")
(ID "second")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "untokenize")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Transform tokens back into Python source code.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n\n    Round-trip invariant for limited intput:\n        # Output text will tokenize the back to the input\n        t1 = [tok[:2] for tok in generate_tokens(f.readline)]\n        newcode = untokenize(t1)\n        readline = iter(newcode.splitlines(1)).next\n        t2 = [tok[:2] for tokin generate_tokens(readline)]\n        assert t1 == t2\n    ")
(NEWLINE)
(ID "ut")
(PUNCT "=")
(ID "Untokenizer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ut")
(PUNCT ".")
(ID "untokenize")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "generate_tokens")
(PUNCT "(")
(ID "readline")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    The generate_tokens() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects. Each call to the function\n    should return one line of input as a string.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile).next    # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found. The line passed is the\n    logical line; continuation lines are included.\n    ")
(NEWLINE)
(ID "lnum")
(PUNCT "=")
(ID "parenlev")
(PUNCT "=")
(ID "continued")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "namechars")
(PUNCT ",")
(ID "numchars")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "ascii_letters")
(PUNCT "+")
(LIT "_")
(PUNCT ",")
(LIT "0123456789")
(NEWLINE)
(ID "contstr")
(PUNCT ",")
(ID "needcont")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(LIT 0)
(NEWLINE)
(ID "contline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "indents")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "lnum")
(PUNCT "=")
(ID "lnum")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "pos")
(PUNCT ",")
(ID "max")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "contstr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TokenError")
(PUNCT "(")
(LIT "EOF in multi-line string")
(PUNCT ",")
(ID "strstart")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "endmatch")
(PUNCT "=")
(ID "endprog")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "endmatch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "end")
(PUNCT "=")
(ID "endmatch")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "STRING")
(PUNCT ",")
(ID "contstr")
(PUNCT "+")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(PUNCT ",")
(ID "strstart")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ",")
(ID "contline")
(PUNCT "+")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT ",")
(ID "needcont")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(LIT 0)
(NEWLINE)
(ID "contline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "needcont")
(KEYWORD and)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(LIT "\\\n")
(KEYWORD and)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT "!=")
(LIT "\\\r\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "ERRORTOKEN")
(PUNCT ",")
(ID "contstr")
(PUNCT "+")
(ID "line")
(PUNCT ",")
(ID "strstart")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "contline")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "contline")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "contstr")
(PUNCT "=")
(ID "contstr")
(PUNCT "+")
(ID "line")
(NEWLINE)
(ID "contline")
(PUNCT "=")
(ID "contline")
(PUNCT "+")
(ID "line")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "parenlev")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(KEYWORD not)
(ID "continued")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "pos")
(PUNCT "<")
(ID "max")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT " ")
(PUNCT ":")
(ID "column")
(PUNCT "=")
(ID "column")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\t")
(PUNCT ":")
(ID "column")
(PUNCT "=")
(PUNCT "(")
(ID "column")
(PUNCT "//")
(ID "tabsize")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "*")
(ID "tabsize")
(NEWLINE)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "\f")
(PUNCT ":")
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(ID "pos")
(PUNCT "=")
(ID "pos")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "pos")
(PUNCT "==")
(ID "max")
(PUNCT ":")
(KEYWORD break)
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(KEYWORD in)
(LIT "#\r\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "comment_token")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ")")
(NEWLINE)
(ID "nl_pos")
(PUNCT "=")
(ID "pos")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "comment_token")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "COMMENT")
(PUNCT ",")
(ID "comment_token")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "comment_token")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "NL")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "nl_pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "nl_pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(PUNCT "(")
(ID "NL")
(PUNCT ",")
(ID "COMMENT")
(PUNCT ")")
(PUNCT "[")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT "==")
(LIT "#")
(PUNCT "]")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "column")
(PUNCT ">")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "indents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "column")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "INDENT")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "column")
(PUNCT "<")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "column")
(KEYWORD not)
(KEYWORD in)
(ID "indents")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IndentationError")
(PUNCT "(")
(LIT "unindent does not match any outer indentation level")
(PUNCT ",")
(PUNCT "(")
(LIT "<tokenize>")
(PUNCT ",")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "indents")
(PUNCT "=")
(ID "indents")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "DEDENT")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TokenError")
(PUNCT "(")
(LIT "EOF in multi-line statement")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "continued")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "pos")
(PUNCT "<")
(ID "max")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pseudomatch")
(PUNCT "=")
(ID "pseudoprog")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pseudomatch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "pseudomatch")
(PUNCT ".")
(ID "span")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "pos")
(PUNCT "=")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ",")
(ID "end")
(NEWLINE)
(ID "token")
(PUNCT ",")
(ID "initial")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "end")
(PUNCT "]")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "initial")
(KEYWORD in)
(ID "numchars")
(KEYWORD or)
(PUNCT "(")
(ID "initial")
(PUNCT "==")
(LIT ".")
(KEYWORD and)
(ID "token")
(PUNCT "!=")
(LIT ".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "NUMBER")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(LIT "\r\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newline")
(PUNCT "=")
(ID "NEWLINE")
(NEWLINE)
(KEYWORD if)
(ID "parenlev")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newline")
(PUNCT "=")
(ID "NL")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "newline")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(PUNCT "==")
(LIT "#")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "token")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "COMMENT")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(KEYWORD in)
(ID "triple_quoted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "endprog")
(PUNCT "=")
(ID "endprogs")
(PUNCT "[")
(ID "token")
(PUNCT "]")
(NEWLINE)
(ID "endmatch")
(PUNCT "=")
(ID "endprog")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "endmatch")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(ID "endmatch")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "STRING")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strstart")
(PUNCT "=")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "contline")
(PUNCT "=")
(ID "line")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(ID "single_quoted")
(KEYWORD or)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(KEYWORD in)
(ID "single_quoted")
(KEYWORD or)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD in)
(ID "single_quoted")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "token")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "\n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "strstart")
(PUNCT "=")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "endprog")
(PUNCT "=")
(PUNCT "(")
(ID "endprogs")
(PUNCT "[")
(ID "initial")
(PUNCT "]")
(KEYWORD or)
(ID "endprogs")
(PUNCT "[")
(ID "token")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(KEYWORD or)
(ID "endprogs")
(PUNCT "[")
(ID "token")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "contstr")
(PUNCT ",")
(ID "needcont")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(ID "start")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT 1)
(NEWLINE)
(ID "contline")
(PUNCT "=")
(ID "line")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "STRING")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(ID "namechars")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "NAME")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "initial")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "NL")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "continued")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "initial")
(KEYWORD in)
(LIT "([{")
(PUNCT ":")
(ID "parenlev")
(PUNCT "=")
(ID "parenlev")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD elif)
(ID "initial")
(KEYWORD in)
(LIT ")]}")
(PUNCT ":")
(ID "parenlev")
(PUNCT "=")
(ID "parenlev")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "OP")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "spos")
(PUNCT ",")
(ID "epos")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "ERRORTOKEN")
(PUNCT ",")
(ID "line")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(ID "pos")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(ID "pos")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "indent")
(KEYWORD in)
(ID "indents")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "DEDENT")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(PUNCT "(")
(ID "ENDMARKER")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "lnum")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(ID "tokenize")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "tokenize")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
