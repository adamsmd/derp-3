(LIT "Routine to \"compile\" a .py file to a .pyc (or .pyo) file.\n\nThis module has intimate knowledge of the format of .pyc files.\n")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(PUNCT ".")
(ID "_bootstrap")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(NEWLINE)
(KEYWORD import)
(ID "importlib")
(PUNCT ".")
(ID "util")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "os")
(PUNCT ".")
(ID "path")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "compile")
(PUNCT ",")
(LIT "main")
(PUNCT ",")
(LIT "PyCompileError")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "PyCompileError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception raised when an error occurs while attempting to\n    compile the file.\n\n    To raise this exception, use\n\n        raise PyCompileError(exc_type,exc_value,file[,msg])\n\n    where\n\n        exc_type:   exception type to be used in error message\n                    type name can be accesses as class variable\n                    'exc_type_name'\n\n        exc_value:  exception value to be used in error message\n                    can be accesses as class variable 'exc_value'\n\n        file:       name of file being compiled to be used in error message\n                    can be accesses as class variable 'file'\n\n        msg:        string message to be written as error message\n                    If no value is given, a default exception message will be\n                    given, consistent with 'standard' py_compile output.\n                    message (or default) can be accesses as class variable\n                    'msg'\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "msg")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_type_name")
(PUNCT "=")
(ID "exc_type")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(KEYWORD if)
(ID "exc_type")
(KEYWORD is)
(ID "SyntaxError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tbtext")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "traceback")
(PUNCT ".")
(ID "format_exception_only")
(PUNCT "(")
(ID "exc_type")
(PUNCT ",")
(ID "exc_value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "errmsg")
(PUNCT "=")
(ID "tbtext")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "File \"<string>\"")
(PUNCT ",")
(LIT "File \"%s\"")
(PUNCT "%")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errmsg")
(PUNCT "=")
(LIT "Sorry: %s: %s")
(PUNCT "%")
(PUNCT "(")
(ID "exc_type_name")
(PUNCT ",")
(ID "exc_value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "Exception")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(KEYWORD or)
(ID "errmsg")
(PUNCT ",")
(ID "exc_type_name")
(PUNCT ",")
(ID "exc_value")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exc_type_name")
(PUNCT "=")
(ID "exc_type_name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exc_value")
(PUNCT "=")
(ID "exc_value")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "msg")
(KEYWORD or)
(ID "errmsg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "msg")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "compile")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "cfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dfile")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "doraise")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "optimize")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Byte-compile one Python source file to Python bytecode.\n\n    :param file: The source file name.\n    :param cfile: The target byte compiled file name.  When not given, this\n        defaults to the PEP 3147 location.\n    :param dfile: Purported file name, i.e. the file name that shows up in\n        error messages.  Defaults to the source file name.\n    :param doraise: Flag indicating whether or not an exception should be\n        raised when a compile error is found.  If an exception occurs and this\n        flag is set to False, a string indicating the nature of the exception\n        will be printed, and the function will return to the caller. If an\n        exception occurs and this flag is set to True, a PyCompileError\n        exception will be raised.\n    :param optimize: The optimization level for the compiler.  Valid values\n        are -1, 0, 1 and 2.  A value of -1 means to use the optimization\n        level of the current interpreter, as given by -O command line options.\n\n    :return: Path to the resulting byte compiled file.\n\n    Note that it isn't necessary to byte-compile Python modules for\n    execution efficiency -- Python itself byte-compiles a module when\n    it is loaded, and if it can, writes out the bytecode to the\n    corresponding .pyc (or .pyo) file.\n\n    However, if a Python installation is shared between users, it is a\n    good idea to byte-compile all modules upon installation, since\n    other users may not be able to write in the source directories,\n    and thus they won't be able to write the .pyc/.pyo file, and then\n    they would be byte-compiling every module each time it is loaded.\n    This can slow down program start-up considerably.\n\n    See compileall.py for a script/module that uses this module to\n    byte-compile all installed files (or all files in selected\n    directories).\n\n    Do note that FileExistsError is raised if cfile ends up pointing at a\n    non-regular file or symlink. Because the compilation uses a file renaming,\n    the resulting file would be regular and thus not the same type of file as\n    it was previously.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "cfile")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "optimize")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfile")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "cache_from_source")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "debug_override")
(PUNCT "=")
(KEYWORD not)
(ID "optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cfile")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "cache_from_source")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "{} is a symlink and will be changed into a regular file if ")
(LIT "import writes a byte-compiled file to it")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "FileExistsError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "{} is a non-regular file and will be changed into a regular ")
(LIT "one if import writes a byte-compiled file to it")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "FileExistsError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "loader")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "machinery")
(PUNCT ".")
(ID "SourceFileLoader")
(PUNCT "(")
(LIT "<py_compile>")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "source_bytes")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "source_to_code")
(PUNCT "(")
(ID "source_bytes")
(PUNCT ",")
(ID "dfile")
(KEYWORD or)
(ID "file")
(PUNCT ",")
(ID "_optimize")
(PUNCT "=")
(ID "optimize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "py_exc")
(PUNCT "=")
(ID "PyCompileError")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "__class__")
(PUNCT ",")
(ID "err")
(PUNCT ",")
(ID "dfile")
(KEYWORD or)
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "doraise")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "py_exc")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "py_exc")
(PUNCT ".")
(ID "msg")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "cfile")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dirname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "dirname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "source_stats")
(PUNCT "=")
(ID "loader")
(PUNCT ".")
(ID "path_stats")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "bytecode")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "_bootstrap")
(PUNCT ".")
(ID "_code_to_bytecode")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "source_stats")
(PUNCT "[")
(LIT "mtime")
(PUNCT "]")
(PUNCT ",")
(ID "source_stats")
(PUNCT "[")
(LIT "size")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "importlib")
(PUNCT ".")
(ID "_bootstrap")
(PUNCT ".")
(ID "_calc_mode")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "importlib")
(PUNCT ".")
(ID "_bootstrap")
(PUNCT ".")
(ID "_write_atomic")
(PUNCT "(")
(ID "cfile")
(PUNCT ",")
(ID "bytecode")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "cfile")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile several source files.\n\n    The files named in 'args' (or on the command line, if 'args' is\n    not specified) are compiled and the resulting bytecode is cached\n    in the normal manner.  This function does not search a directory\n    structure to locate source files; it only compiles files named\n    explicitly.  If '-' is the only parameter in args, the list of\n    files is taken from standard input.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "rv")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT "==")
(PUNCT "[")
(LIT "-")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdin")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "filename")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "filename")
(PUNCT "=")
(ID "filename")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "doraise")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "PyCompileError")
(KEYWORD as)
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s\n")
(PUNCT "%")
(ID "error")
(PUNCT ".")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s\n")
(PUNCT "%")
(ID "error")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "doraise")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "PyCompileError")
(KEYWORD as)
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "error")
(PUNCT ".")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "rv")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
