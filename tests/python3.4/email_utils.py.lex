(LIT "Miscellaneous utilities.")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "collapse_rfc2231_value")
(PUNCT ",")
(LIT "decode_params")
(PUNCT ",")
(LIT "decode_rfc2231")
(PUNCT ",")
(LIT "encode_rfc2231")
(PUNCT ",")
(LIT "formataddr")
(PUNCT ",")
(LIT "formatdate")
(PUNCT ",")
(LIT "format_datetime")
(PUNCT ",")
(LIT "getaddresses")
(PUNCT ",")
(LIT "make_msgid")
(PUNCT ",")
(LIT "mktime_tz")
(PUNCT ",")
(LIT "parseaddr")
(PUNCT ",")
(LIT "parsedate")
(PUNCT ",")
(LIT "parsedate_tz")
(PUNCT ",")
(LIT "parsedate_to_datetime")
(PUNCT ",")
(LIT "unquote")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "random")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "datetime")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "_parseaddr")
(KEYWORD import)
(ID "quote")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "_parseaddr")
(KEYWORD import)
(ID "AddressList")
(KEYWORD as)
(ID "_AddressList")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "_parseaddr")
(KEYWORD import)
(ID "mktime_tz")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "_parseaddr")
(KEYWORD import)
(ID "parsedate")
(PUNCT ",")
(ID "parsedate_tz")
(PUNCT ",")
(ID "_parsedate_tz")
(NEWLINE)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "charset")
(KEYWORD import)
(ID "Charset")
(NEWLINE)
(ID "COMMASPACE")
(PUNCT "=")
(LIT ", ")
(NEWLINE)
(ID "EMPTYSTRING")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "UEMPTYSTRING")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "CRLF")
(PUNCT "=")
(LIT "\r\n")
(NEWLINE)
(ID "TICK")
(PUNCT "=")
(LIT "'")
(NEWLINE)
(ID "specialsre")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[][\\\\()<>@,:;\".]")
(PUNCT ")")
(NEWLINE)
(ID "escapesre")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[\\\\\"]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_has_surrogates")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if s contains surrogate-escaped binary data.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_sanitize")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "original_bytes")
(PUNCT "=")
(ID "string")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "original_bytes")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "formataddr")
(PUNCT "(")
(ID "pair")
(PUNCT ",")
(ID "charset")
(PUNCT "=")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The inverse of parseaddr(), this takes a 2-tuple of the form\n    (realname, email_address) and returns the string value suitable\n    for an RFC 2822 From, To or Cc header.\n\n    If the first element of pair is false, then the second element is\n    returned unmodified.\n\n    Optional charset if given is the character set that is used to encode\n    realname in case realname is not ASCII safe.  Can be an instance of str or\n    a Charset-like object which has a header_encode method.  Default is\n    'utf-8'.\n    ")
(NEWLINE)
(ID "name")
(PUNCT ",")
(ID "address")
(PUNCT "=")
(ID "pair")
(NEWLINE)
(ID "address")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "Charset")
(PUNCT "(")
(ID "charset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "encoded_name")
(PUNCT "=")
(ID "charset")
(PUNCT ".")
(ID "header_encode")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "%s <%s>")
(PUNCT "%")
(PUNCT "(")
(ID "encoded_name")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quotes")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "specialsre")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "quotes")
(PUNCT "=")
(LIT "\"")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "escapesre")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\\\\\g<0>")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "%s%s%s <%s>")
(PUNCT "%")
(PUNCT "(")
(ID "quotes")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "quotes")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "address")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getaddresses")
(PUNCT "(")
(ID "fieldvalues")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of (REALNAME, EMAIL) for each fieldvalue.")
(NEWLINE)
(ID "all")
(PUNCT "=")
(ID "COMMASPACE")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "fieldvalues")
(PUNCT ")")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "_AddressList")
(PUNCT "(")
(ID "all")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "a")
(PUNCT ".")
(ID "addresslist")
(NEWLINE)
(DEDENT)
(ID "ecre")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "\n  =\\?                   # literal =?\n  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset\n  \\?                    # literal ?\n  (?P<encoding>[qb])    # either a \"q\" or a \"b\", case insensitive\n  \\?                    # literal ?\n  (?P<atom>.*?)         # non-greedy up to the next ?= is the atom\n  \\?=                   # literal ?=\n  ")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "VERBOSE")
(PUNCT "|")
(ID "re")
(PUNCT ".")
(ID "IGNORECASE")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_format_timetuple_and_zone")
(PUNCT "(")
(ID "timetuple")
(PUNCT ",")
(ID "zone")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s, %02d %s %04d %02d:%02d:%02d %s")
(PUNCT "%")
(PUNCT "(")
(PUNCT "[")
(LIT "Mon")
(PUNCT ",")
(LIT "Tue")
(PUNCT ",")
(LIT "Wed")
(PUNCT ",")
(LIT "Thu")
(PUNCT ",")
(LIT "Fri")
(PUNCT ",")
(LIT "Sat")
(PUNCT ",")
(LIT "Sun")
(PUNCT "]")
(PUNCT "[")
(ID "timetuple")
(PUNCT "[")
(LIT 6)
(PUNCT "]")
(PUNCT "]")
(PUNCT ",")
(ID "timetuple")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(LIT "Jan")
(PUNCT ",")
(LIT "Feb")
(PUNCT ",")
(LIT "Mar")
(PUNCT ",")
(LIT "Apr")
(PUNCT ",")
(LIT "May")
(PUNCT ",")
(LIT "Jun")
(PUNCT ",")
(LIT "Jul")
(PUNCT ",")
(LIT "Aug")
(PUNCT ",")
(LIT "Sep")
(PUNCT ",")
(LIT "Oct")
(PUNCT ",")
(LIT "Nov")
(PUNCT ",")
(LIT "Dec")
(PUNCT "]")
(PUNCT "[")
(ID "timetuple")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "timetuple")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "timetuple")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "timetuple")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT ",")
(ID "timetuple")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(PUNCT ",")
(ID "zone")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "formatdate")
(PUNCT "(")
(ID "timeval")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "localtime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "usegmt")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a date string as specified by RFC 2822, e.g.:\n\n    Fri, 09 Nov 2001 01:08:47 -0000\n\n    Optional timeval if given is a floating point time value as accepted by\n    gmtime() and localtime(), otherwise the current time is used.\n\n    Optional localtime is a flag that when True, interprets timeval, and\n    returns a date relative to the local timezone instead of UTC, properly\n    taking daylight savings time into account.\n\n    Optional argument usegmt means that the timezone is written out as\n    an ascii string, not numeric one (so \"GMT\" instead of \"+0000\"). This\n    is needed for HTTP, and is only used when localtime==False.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "timeval")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeval")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "localtime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "timeval")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "time")
(PUNCT ".")
(ID "daylight")
(KEYWORD and)
(ID "now")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "altzone")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "timezone")
(NEWLINE)
(DEDENT)
(ID "hours")
(PUNCT ",")
(ID "minutes")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "abs")
(PUNCT "(")
(ID "offset")
(PUNCT ")")
(PUNCT ",")
(LIT 3600)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "offset")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sign")
(PUNCT "=")
(LIT "-")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sign")
(PUNCT "=")
(LIT "+")
(NEWLINE)
(DEDENT)
(ID "zone")
(PUNCT "=")
(LIT "%s%02d%02d")
(PUNCT "%")
(PUNCT "(")
(ID "sign")
(PUNCT ",")
(ID "hours")
(PUNCT ",")
(ID "minutes")
(PUNCT "//")
(LIT 60)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "now")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "timeval")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "usegmt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zone")
(PUNCT "=")
(LIT "GMT")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zone")
(PUNCT "=")
(LIT "-0000")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_format_timetuple_and_zone")
(PUNCT "(")
(ID "now")
(PUNCT ",")
(ID "zone")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "format_datetime")
(PUNCT "(")
(ID "dt")
(PUNCT ",")
(ID "usegmt")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn a datetime into a date string as specified in RFC 2822.\n\n    If usegmt is True, dt must be an aware datetime with an offset of zero.  In\n    this case 'GMT' will be rendered instead of the normal +0000 required by\n    RFC2822.  This is to support HTTP headers involving date stamps.\n    ")
(NEWLINE)
(ID "now")
(PUNCT "=")
(ID "dt")
(PUNCT ".")
(ID "timetuple")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "usegmt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "dt")
(PUNCT ".")
(ID "tzinfo")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "dt")
(PUNCT ".")
(ID "tzinfo")
(PUNCT "!=")
(ID "datetime")
(PUNCT ".")
(ID "timezone")
(PUNCT ".")
(ID "utc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "usegmt option requires a UTC datetime")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "zone")
(PUNCT "=")
(LIT "GMT")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "dt")
(PUNCT ".")
(ID "tzinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zone")
(PUNCT "=")
(LIT "-0000")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "zone")
(PUNCT "=")
(ID "dt")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%z")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_format_timetuple_and_zone")
(PUNCT "(")
(ID "now")
(PUNCT ",")
(ID "zone")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_msgid")
(PUNCT "(")
(ID "idstring")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "domain")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a string suitable for RFC 2822 compliant Message-ID, e.g:\n\n    <20020201195627.33539.96671@nightshade.la.mastaler.com>\n\n    Optional idstring if given is a string used to strengthen the\n    uniqueness of the message id.  Optional domain if given provides the\n    portion of the message id after the '@'.  It defaults to the locally\n    defined hostname.\n    ")
(NEWLINE)
(ID "timeval")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "utcdate")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%Y%m%d%H%M%S")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "timeval")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "pid")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "getpid")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "randint")
(PUNCT "=")
(ID "random")
(PUNCT ".")
(ID "randrange")
(PUNCT "(")
(LIT 100000)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "idstring")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idstring")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "idstring")
(PUNCT "=")
(LIT ".")
(PUNCT "+")
(ID "idstring")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "domain")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "domain")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "getfqdn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msgid")
(PUNCT "=")
(LIT "<%s.%s.%s%s@%s>")
(PUNCT "%")
(PUNCT "(")
(ID "utcdate")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "randint")
(PUNCT ",")
(ID "idstring")
(PUNCT ",")
(ID "domain")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "msgid")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parsedate_to_datetime")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "*")
(ID "dtuple")
(PUNCT ",")
(ID "tz")
(PUNCT "=")
(ID "_parsedate_tz")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tz")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT "(")
(PUNCT "*")
(ID "dtuple")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT "(")
(PUNCT "*")
(ID "dtuple")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ",")
(ID "tzinfo")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "timezone")
(PUNCT "(")
(ID "datetime")
(PUNCT ".")
(ID "timedelta")
(PUNCT "(")
(ID "seconds")
(PUNCT "=")
(ID "tz")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parseaddr")
(PUNCT "(")
(ID "addr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addrs")
(PUNCT "=")
(ID "_AddressList")
(PUNCT "(")
(ID "addr")
(PUNCT ")")
(PUNCT ".")
(ID "addresslist")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "addrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(PUNCT ",")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "addrs")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unquote")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove quotes from a string.")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "str")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "\"")
(PUNCT ")")
(KEYWORD and)
(ID "str")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\\\")
(PUNCT ",")
(LIT "\\")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\\\"")
(PUNCT ",")
(LIT "\"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "str")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "<")
(PUNCT ")")
(KEYWORD and)
(ID "str")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ">")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "str")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode_rfc2231")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decode string according to RFC 2231")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "TICK")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT "<=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "parts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode_rfc2231")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "charset")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "language")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encode string according to RFC 2231.\n\n    If neither charset nor language is given, then s is returned as-is.  If\n    charset is given but not language, the string is encoded using the empty\n    string for language.\n    ")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "quote")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "safe")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "charset")
(KEYWORD or)
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "charset")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "language")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "language")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "language")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s'%s'%s")
(PUNCT "%")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "language")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rfc2231_continuation")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(?P<name>\\w+)\\*((?P<num>[0-9]+)\\*?)?$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "decode_params")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decode parameters list according to RFC 2231.\n\n    params is a sequence of 2-tuples containing (param name, string value).\n    ")
(NEWLINE)
(ID "params")
(PUNCT "=")
(ID "params")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "new_params")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "rfc2231_params")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "params")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "new_params")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "params")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "params")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "*")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoded")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoded")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "unquote")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "mo")
(PUNCT "=")
(ID "rfc2231_continuation")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "num")
(PUNCT "=")
(ID "mo")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "num")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "num")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "num")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rfc2231_params")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "num")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "encoded")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "\"%s\"")
(PUNCT "%")
(ID "quote")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "rfc2231_params")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "continuations")
(KEYWORD in)
(ID "rfc2231_params")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "extended")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "continuations")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "num")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "encoded")
(KEYWORD in)
(ID "continuations")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "encoded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(ID "extended")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "quote")
(PUNCT "(")
(ID "EMPTYSTRING")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "extended")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT ",")
(ID "language")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "decode_rfc2231")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "new_params")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT "(")
(ID "charset")
(PUNCT ",")
(ID "language")
(PUNCT ",")
(LIT "\"%s\"")
(PUNCT "%")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_params")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "\"%s\"")
(PUNCT "%")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "new_params")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "collapse_rfc2231_value")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "replace")
(PUNCT ",")
(ID "fallback_charset")
(PUNCT "=")
(LIT "us-ascii")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "!=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "unquote")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "charset")
(PUNCT ",")
(ID "language")
(PUNCT ",")
(ID "text")
(PUNCT "=")
(ID "value")
(NEWLINE)
(KEYWORD if)
(ID "charset")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "charset")
(PUNCT "=")
(ID "fallback_charset")
(NEWLINE)
(DEDENT)
(ID "rawbytes")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(LIT "raw-unicode-escape")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "rawbytes")
(PUNCT ",")
(ID "charset")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "LookupError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "unquote")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "localtime")
(PUNCT "(")
(ID "dt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "isdst")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return local time as an aware datetime object.\n\n    If called without arguments, return current time.  Otherwise *dt*\n    argument should be a datetime instance, and it is converted to the\n    local time zone according to the system time zone database.  If *dt* is\n    naive (that is, dt.tzinfo is None), it is assumed to be in local time.\n    In this case, a positive or zero value for *isdst* causes localtime to\n    presume initially that summer time (for example, Daylight Saving Time)\n    is or is not (respectively) in effect for the specified time.  A\n    negative value for *isdst* causes the localtime() function to attempt\n    to divine whether summer time is in effect for the specified time.\n\n    ")
(NEWLINE)
(KEYWORD if)
(ID "dt")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "now")
(PUNCT "(")
(ID "datetime")
(PUNCT ".")
(ID "timezone")
(PUNCT ".")
(ID "utc")
(PUNCT ")")
(PUNCT ".")
(ID "astimezone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dt")
(PUNCT ".")
(ID "tzinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dt")
(PUNCT ".")
(ID "astimezone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tm")
(PUNCT "=")
(ID "dt")
(PUNCT ".")
(ID "timetuple")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(PUNCT "(")
(ID "isdst")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "seconds")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "mktime")
(PUNCT "(")
(ID "tm")
(PUNCT ")")
(NEWLINE)
(ID "localtm")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "seconds")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delta")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "timedelta")
(PUNCT "(")
(ID "seconds")
(PUNCT "=")
(ID "localtm")
(PUNCT ".")
(ID "tm_gmtoff")
(PUNCT ")")
(NEWLINE)
(ID "tz")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "timezone")
(PUNCT "(")
(ID "delta")
(PUNCT ",")
(ID "localtm")
(PUNCT ".")
(ID "tm_zone")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delta")
(PUNCT "=")
(ID "dt")
(PUNCT "-")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT "(")
(PUNCT "*")
(ID "time")
(PUNCT ".")
(ID "gmtime")
(PUNCT "(")
(ID "seconds")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "dst")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "daylight")
(KEYWORD and)
(ID "localtm")
(PUNCT ".")
(ID "tm_isdst")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(ID "gmtoff")
(PUNCT "=")
(PUNCT "-")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "altzone")
(KEYWORD if)
(ID "dst")
(KEYWORD else)
(ID "time")
(PUNCT ".")
(ID "timezone")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "delta")
(PUNCT "==")
(ID "datetime")
(PUNCT ".")
(ID "timedelta")
(PUNCT "(")
(ID "seconds")
(PUNCT "=")
(ID "gmtoff")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tz")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "timezone")
(PUNCT "(")
(ID "delta")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "tzname")
(PUNCT "[")
(ID "dst")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tz")
(PUNCT "=")
(ID "datetime")
(PUNCT ".")
(ID "timezone")
(PUNCT "(")
(ID "delta")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "dt")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "tzinfo")
(PUNCT "=")
(ID "tz")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
