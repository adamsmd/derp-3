(LIT "Utilities needed to emulate Python's interactive interpreter.\n\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD from)
(ID "codeop")
(KEYWORD import)
(ID "CommandCompiler")
(PUNCT ",")
(ID "compile_command")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "InteractiveInterpreter")
(PUNCT ",")
(LIT "InteractiveConsole")
(PUNCT ",")
(LIT "interact")
(PUNCT ",")
(LIT "compile_command")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "InteractiveInterpreter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for InteractiveConsole.\n\n    This class deals with parsing and interpreter state (the user's\n    namespace); it doesn't deal with input buffering or prompting or\n    input file naming (the filename is always passed in explicitly).\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructor.\n\n        The optional 'locals' argument specifies the dictionary in\n        which code will be executed; it defaults to a newly created\n        dictionary with key \"__name__\" set to \"__console__\" and key\n        \"__doc__\" set to None.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "locals")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "locals")
(PUNCT "=")
(PUNCT "{")
(LIT "__name__")
(PUNCT ":")
(LIT "__console__")
(PUNCT ",")
(LIT "__doc__")
(PUNCT ":")
(KEYWORD None)
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "locals")
(PUNCT "=")
(ID "locals")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compile")
(PUNCT "=")
(ID "CommandCompiler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runsource")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(LIT "<input>")
(PUNCT ",")
(ID "symbol")
(PUNCT "=")
(LIT "single")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compile and run some source in the interpreter.\n\n        Arguments are as for compile_command().\n\n        One several things can happen:\n\n        1) The input is incorrect; compile_command() raised an\n        exception (SyntaxError or OverflowError).  A syntax traceback\n        will be printed by calling the showsyntaxerror() method.\n\n        2) The input is incomplete, and more input is required;\n        compile_command() returned None.  Nothing happens.\n\n        3) The input is complete; compile_command() returned a code\n        object.  The code is executed by calling self.runcode() (which\n        also handles run-time exceptions, except for SystemExit).\n\n        The return value is True in case 2, False in the other cases (unless\n        an exception is raised).  The return value can be used to\n        decide whether to use sys.ps1 or sys.ps2 to prompt the next\n        line.\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "symbol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OverflowError")
(PUNCT ",")
(ID "SyntaxError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "showsyntaxerror")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "code")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "runcode")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runcode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "code")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Execute a code object.\n\n        When an exception occurs, self.showtraceback() is called to\n        display a traceback.  All exceptions are caught except\n        SystemExit, which is reraised.\n\n        A note about KeyboardInterrupt: this exception may occur\n        elsewhere in this code, and may not always be caught.  The\n        caller should be prepared to deal with it.\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SystemExit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "showtraceback")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "showsyntaxerror")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display the syntax error that just occurred.\n\n        This doesn't display a stack trace because there isn't one.\n\n        If a filename is given, it is stuffed in the exception instead\n        of what was there before (because Python's parser always uses\n        \"<string>\" when reading from a string).\n\n        The output is written by self.write(), below.\n\n        ")
(NEWLINE)
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_type")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_traceback")
(PUNCT "=")
(ID "tb")
(NEWLINE)
(KEYWORD if)
(ID "filename")
(KEYWORD and)
(ID "type")
(KEYWORD is)
(ID "SyntaxError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT ",")
(PUNCT "(")
(ID "dummy_filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "SyntaxError")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(KEYWORD is)
(ID "sys")
(PUNCT ".")
(ID "__excepthook__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(ID "traceback")
(PUNCT ".")
(ID "format_exception_only")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "showtraceback")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display the exception that just occurred.\n\n        We remove the first stack item because it is our own code.\n\n        The output is written by self.write(), below.\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_type")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_traceback")
(PUNCT "=")
(ID "tb")
(NEWLINE)
(ID "tblist")
(PUNCT "=")
(ID "traceback")
(PUNCT ".")
(ID "extract_tb")
(PUNCT "(")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "tblist")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "traceback")
(PUNCT ".")
(ID "format_list")
(PUNCT "(")
(ID "tblist")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT "Traceback (most recent call last):\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lines")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "traceback")
(PUNCT ".")
(ID "format_exception_only")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tblist")
(PUNCT "=")
(ID "tb")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(KEYWORD is)
(ID "sys")
(PUNCT ".")
(ID "__excepthook__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "excepthook")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write a string.\n\n        The base implementation writes to sys.stderr; a subclass may\n        replace this with a different implementation.\n\n        ")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "InteractiveConsole")
(PUNCT "(")
(ID "InteractiveInterpreter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Closely emulate the behavior of the interactive Python interpreter.\n\n    This class builds on InteractiveInterpreter and adds prompting\n    using the familiar sys.ps1 and sys.ps2, and input buffering.\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "locals")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "filename")
(PUNCT "=")
(LIT "<console>")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructor.\n\n        The optional locals argument will be passed to the\n        InteractiveInterpreter base class.\n\n        The optional filename argument should specify the (file)name\n        of the input stream; it will show up in tracebacks.\n\n        ")
(NEWLINE)
(ID "InteractiveInterpreter")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "locals")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT "=")
(ID "filename")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "resetbuffer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resetbuffer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Reset the input buffer.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "interact")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "banner")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Closely emulate the interactive Python console.\n\n        The optional banner argument specifies the banner to print\n        before the first interaction; by default it prints a banner\n        similar to the one printed by the real Python interpreter,\n        followed by the current class name in parentheses (so as not\n        to confuse this with the real interpreter -- since it's so\n        close!).\n\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "ps1")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "ps1")
(PUNCT "=")
(LIT ">>> ")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "ps2")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "ps2")
(PUNCT "=")
(LIT "... ")
(NEWLINE)
(DEDENT)
(ID "cprt")
(PUNCT "=")
(LIT "Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.")
(NEWLINE)
(KEYWORD if)
(ID "banner")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Python %s on %s\n%s\n(%s)\n")
(PUNCT "%")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ",")
(ID "cprt")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "banner")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s\n")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "banner")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "more")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "more")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prompt")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "ps2")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prompt")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "ps1")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "raw_input")
(PUNCT "(")
(ID "prompt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "EOFError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "more")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "push")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\nKeyboardInterrupt\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "resetbuffer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "more")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "push")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Push a line to the interpreter.\n\n        The line should not have a trailing newline; it may have\n        internal newlines.  The line is appended to a buffer and the\n        interpreter's runsource() method is called with the\n        concatenated contents of the buffer as source.  If this\n        indicates that the command was executed or invalid, the buffer\n        is reset; otherwise, the command is incomplete, and the buffer\n        is left as it was after the line was appended.  The return\n        value is 1 if more input is required, 0 if the line was dealt\n        with in some way (this is the same as runsource()).\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "source")
(PUNCT "=")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buffer")
(PUNCT ")")
(NEWLINE)
(ID "more")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "runsource")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "more")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "resetbuffer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "more")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "raw_input")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "prompt")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write a prompt and read a line.\n\n        The returned line does not include the trailing newline.\n        When the user enters the EOF key sequence, EOFError is raised.\n\n        The base implementation uses the built-in function\n        input(); a subclass may replace this with a different\n        implementation.\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "input")
(PUNCT "(")
(ID "prompt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "interact")
(PUNCT "(")
(ID "banner")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "readfunc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "local")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Closely emulate the interactive Python interpreter.\n\n    This is a backwards compatible interface to the InteractiveConsole\n    class.  When readfunc is not specified, it attempts to import the\n    readline module to enable GNU readline if it is available.\n\n    Arguments (all optional, all default to None):\n\n    banner -- passed to InteractiveConsole.interact()\n    readfunc -- if not None, replaces InteractiveConsole.raw_input()\n    local -- passed to InteractiveInterpreter.__init__()\n\n    ")
(NEWLINE)
(ID "console")
(PUNCT "=")
(ID "InteractiveConsole")
(PUNCT "(")
(ID "local")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "readfunc")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "console")
(PUNCT ".")
(ID "raw_input")
(PUNCT "=")
(ID "readfunc")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "readline")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "console")
(PUNCT ".")
(ID "interact")
(PUNCT "(")
(ID "banner")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "interact")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
