(LIT "Conversion pipeline templates.\n\nThe problem:\n------------\n\nSuppose you have some data that you want to convert to another format,\nsuch as from GIF image format to PPM image format.  Maybe the\nconversion involves several steps (e.g. piping it through compress or\nuuencode).  Some of the conversion steps may require that their input\nis a disk file, others may be able to read standard input; similar for\ntheir output.  The input to the entire conversion may also be read\nfrom a disk file or from an open file, and similar for its output.\n\nThe module lets you construct a pipeline template by sticking one or\nmore conversion steps together.  It will take care of creating and\nremoving temporary files if they are necessary to hold intermediate\ndata.  You can then use the template to do conversions from many\ndifferent sources to many different destinations.  The temporary\nfile names used are different each time the template is used.\n\nThe templates are objects so you can create templates for many\ndifferent conversion steps and store them in a dictionary, for\ninstance.\n\n\nDirections:\n-----------\n\nTo create a template:\n    t = Template()\n\nTo add a conversion step to a template:\n   t.append(command, kind)\nwhere kind is a string of two characters: the first is '-' if the\ncommand reads its standard input or 'f' if it requires a file; the\nsecond likewise for the output. The command must be valid /bin/sh\nsyntax.  If input or output files are required, they are passed as\n$IN and $OUT; otherwise, it must be  possible to use the command in\na pipeline.\n\nTo add a conversion step at the beginning:\n   t.prepend(command, kind)\n\nTo convert a file to another file using a template:\n  sts = t.copy(infile, outfile)\nIf infile or outfile are the empty string, standard input is read or\nstandard output is written, respectively.  The return value is the\nexit status of the conversion pipeline.\n\nTo open a file for reading or writing through a conversion pipeline:\n   fp = t.open(file, mode)\nwhere mode is 'r' to read the file, or 'w' to write it -- just like\nfor the built-in function open() or for os.popen().\n\nTo create a new template object initialized to a given one:\n   t2 = t.clone()\n")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "tempfile")
(NEWLINE)
(KEYWORD from)
(ID "shlex")
(KEYWORD import)
(ID "quote")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Template")
(PUNCT "]")
(NEWLINE)
(ID "FILEIN_FILEOUT")
(PUNCT "=")
(LIT "ff")
(NEWLINE)
(ID "STDIN_FILEOUT")
(PUNCT "=")
(LIT "-f")
(NEWLINE)
(ID "FILEIN_STDOUT")
(PUNCT "=")
(LIT "f-")
(NEWLINE)
(ID "STDIN_STDOUT")
(PUNCT "=")
(LIT "--")
(NEWLINE)
(ID "SOURCE")
(PUNCT "=")
(LIT ".-")
(NEWLINE)
(ID "SINK")
(PUNCT "=")
(LIT "-.")
(NEWLINE)
(ID "stepkinds")
(PUNCT "=")
(PUNCT "[")
(ID "FILEIN_FILEOUT")
(PUNCT ",")
(ID "STDIN_FILEOUT")
(PUNCT ",")
(ID "FILEIN_STDOUT")
(PUNCT ",")
(ID "STDIN_STDOUT")
(PUNCT ",")
(ID "SOURCE")
(PUNCT ",")
(ID "SINK")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "Template")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class representing a pipeline template.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Template() returns a fresh pipeline template.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.__repr__() implements repr(t).")
(NEWLINE)
(KEYWORD return)
(LIT "<Template instance, steps=%r>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.reset() restores a pipeline template to its initial state.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clone")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.clone() returns a new pipeline template with identical\n        initial state as the current one.")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "Template")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "steps")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "debugging")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "debugging")
(NEWLINE)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "debug")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flag")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.debug(flag) turns debugging on or off.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT "=")
(ID "flag")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.append(cmd, kind) adds a new step at the end.")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "type")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Template.append: cmd must be a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD not)
(KEYWORD in)
(ID "stepkinds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.append: bad kind %r")
(PUNCT "%")
(PUNCT "(")
(ID "kind")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "==")
(ID "SOURCE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.append: SOURCE can only be prepended")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "steps")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "SINK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.append: already ends with SINK")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD and)
(KEYWORD not)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "\\$IN\\b")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.append: missing $IN in cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD and)
(KEYWORD not)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "\\$OUT\\b")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.append: missing $OUT in cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prepend")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.prepend(cmd, kind) adds a new step at the front.")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(ID "type")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Template.prepend: cmd must be a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(KEYWORD not)
(KEYWORD in)
(ID "stepkinds")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.prepend: bad kind %r")
(PUNCT "%")
(PUNCT "(")
(ID "kind")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "==")
(ID "SINK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.prepend: SINK can only be appended")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "steps")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "SOURCE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.prepend: already begins with SOURCE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD and)
(KEYWORD not)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "\\$IN\\b")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.prepend: missing $IN in cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD and)
(KEYWORD not)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT "\\$OUT\\b")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.prepend: missing $OUT in cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "rw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.open(file, rw) returns a pipe or file object open for\n        reading or writing; the file is the other end of the pipeline.")
(NEWLINE)
(KEYWORD if)
(ID "rw")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open_r")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "rw")
(PUNCT "==")
(LIT "w")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "open_w")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.open: rw must be 'r' or 'w', not %r")
(PUNCT "%")
(PUNCT "(")
(ID "rw")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_r")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "t.open_r(file) and t.open_w(file) implement\n        t.open(file, 'r') and t.open(file, 'w') respectively.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "SINK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.open_r: pipeline ends width SINK")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cmd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "makepipeline")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "open_w")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "SOURCE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Template.open_w: pipeline begins with SOURCE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cmd")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "makepipeline")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "system")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "makepipeline")
(PUNCT "(")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makepipeline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "infile")
(PUNCT ",")
(ID "outfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "makepipeline")
(PUNCT "(")
(ID "infile")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "steps")
(PUNCT ",")
(ID "outfile")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "set -x; ")
(PUNCT "+")
(ID "cmd")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cmd")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "makepipeline")
(PUNCT "(")
(ID "infile")
(PUNCT ",")
(ID "steps")
(PUNCT ",")
(ID "outfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(PUNCT ",")
(ID "kind")
(KEYWORD in)
(ID "steps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(LIT "")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(LIT "")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(LIT "")
(PUNCT ",")
(LIT "cat")
(PUNCT ",")
(LIT "--")
(PUNCT ",")
(LIT "")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "[")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT "]")
(PUNCT "=")
(ID "list")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD and)
(KEYWORD not)
(ID "infile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(PUNCT "[")
(LIT "")
(PUNCT ",")
(LIT "cat")
(PUNCT ",")
(LIT "--")
(PUNCT ",")
(LIT "")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "list")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "infile")
(NEWLINE)
(PUNCT "[")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT "]")
(PUNCT "=")
(ID "list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD and)
(KEYWORD not)
(ID "outfile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "[")
(LIT "")
(PUNCT ",")
(LIT "cat")
(PUNCT ",")
(LIT "--")
(PUNCT ",")
(LIT "")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "list")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "outfile")
(NEWLINE)
(ID "garbage")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lkind")
(PUNCT "=")
(ID "list")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "rkind")
(PUNCT "=")
(ID "list")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "lkind")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(KEYWORD or)
(ID "rkind")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "temp")
(PUNCT ")")
(PUNCT "=")
(ID "tempfile")
(PUNCT ".")
(ID "mkstemp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(ID "garbage")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "temp")
(PUNCT ")")
(NEWLINE)
(ID "list")
(PUNCT "[")
(ID "i")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "list")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "temp")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "inf")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT ",")
(ID "outf")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(NEWLINE)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "OUT=")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "outf")
(PUNCT ")")
(PUNCT "+")
(LIT "; ")
(PUNCT "+")
(ID "cmd")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "IN=")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "inf")
(PUNCT ")")
(PUNCT "+")
(LIT "; ")
(PUNCT "+")
(ID "cmd")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(KEYWORD and)
(ID "inf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(PUNCT "+")
(LIT " <")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "inf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kind")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(KEYWORD and)
(ID "outf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(PUNCT "+")
(LIT " >")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "outf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "item")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "cmd")
(NEWLINE)
(DEDENT)
(ID "cmdlist")
(PUNCT "=")
(ID "list")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "list")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "cmd")
(PUNCT ",")
(ID "kind")
(PUNCT "]")
(PUNCT "=")
(ID "item")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "item")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "f")
(KEYWORD in)
(ID "kind")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "{ ")
(PUNCT "+")
(ID "cmd")
(PUNCT "+")
(LIT "; }")
(NEWLINE)
(DEDENT)
(ID "cmdlist")
(PUNCT "=")
(ID "cmdlist")
(PUNCT "+")
(LIT " |\n")
(PUNCT "+")
(ID "cmd")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmdlist")
(PUNCT "=")
(ID "cmdlist")
(PUNCT "+")
(LIT "\n")
(PUNCT "+")
(ID "cmd")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "garbage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rmcmd")
(PUNCT "=")
(LIT "rm -f")
(NEWLINE)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "garbage")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rmcmd")
(PUNCT "=")
(ID "rmcmd")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "trapcmd")
(PUNCT "=")
(LIT "trap ")
(PUNCT "+")
(ID "quote")
(PUNCT "(")
(ID "rmcmd")
(PUNCT "+")
(LIT "; exit")
(PUNCT ")")
(PUNCT "+")
(LIT " 1 2 3 13 14 15")
(NEWLINE)
(ID "cmdlist")
(PUNCT "=")
(ID "trapcmd")
(PUNCT "+")
(LIT "\n")
(PUNCT "+")
(ID "cmdlist")
(PUNCT "+")
(LIT "\n")
(PUNCT "+")
(ID "rmcmd")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cmdlist")
(NEWLINE)
(DEDENT)
(ENDMARKER)
