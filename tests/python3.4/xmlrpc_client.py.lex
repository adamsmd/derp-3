(LIT "\nAn XML-RPC client interface for Python.\n\nThe marshalling and response parser code can also be used to\nimplement XML-RPC servers.\n\nExported exceptions:\n\n  Error          Base class for client errors\n  ProtocolError  Indicates an HTTP protocol error\n  ResponseError  Indicates a broken response package\n  Fault          Indicates an XML-RPC fault package\n\nExported classes:\n\n  ServerProxy    Represents a logical connection to an XML-RPC server\n\n  MultiCall      Executor of boxcared xmlrpc requests\n  DateTime       dateTime wrapper for an ISO 8601 string or time tuple or\n                 localtime integer value to generate a \"dateTime.iso8601\"\n                 XML-RPC value\n  Binary         binary data wrapper\n\n  Marshaller     Generate an XML-RPC params chunk from a Python data structure\n  Unmarshaller   Unmarshal an XML-RPC response from incoming XML event message\n  Transport      Handles an HTTP transaction to an XML-RPC server\n  SafeTransport  Handles an HTTPS transaction to an XML-RPC server\n\nExported constants:\n\n  (none)\n\nExported functions:\n\n  getparser      Create instance of the fastest available parser & attach\n                 to an unmarshalling object\n  dumps          Convert an argument tuple or a Fault instance to an XML-RPC\n                 request (or response, if the methodresponse option is used).\n  loads          Convert an XML-RPC packet to unmarshalled data plus a method\n                 name (None if not present).\n")
(NEWLINE)
(KEYWORD import)
(ID "base64")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD from)
(ID "datetime")
(KEYWORD import)
(ID "datetime")
(NEWLINE)
(KEYWORD import)
(ID "http")
(PUNCT ".")
(ID "client")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(NEWLINE)
(KEYWORD from)
(ID "xml")
(PUNCT ".")
(ID "parsers")
(KEYWORD import)
(ID "expat")
(NEWLINE)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "BytesIO")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "gzip")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gzip")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "escape")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "&")
(PUNCT ",")
(LIT "&amp;")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "<")
(PUNCT ",")
(LIT "&lt;")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ">")
(PUNCT ",")
(LIT "&gt;")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__version__")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "MAXINT")
(PUNCT "=")
(LIT 2)
(PUNCT "**")
(LIT 31)
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "MININT")
(PUNCT "=")
(PUNCT "-")
(LIT 2)
(PUNCT "**")
(LIT 31)
(NEWLINE)
(ID "PARSE_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32700)
(NEWLINE)
(ID "SERVER_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32600)
(NEWLINE)
(ID "APPLICATION_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32500)
(NEWLINE)
(ID "SYSTEM_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32400)
(NEWLINE)
(ID "TRANSPORT_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32300)
(NEWLINE)
(ID "NOT_WELLFORMED_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32700)
(NEWLINE)
(ID "UNSUPPORTED_ENCODING")
(PUNCT "=")
(PUNCT "-")
(LIT 32701)
(NEWLINE)
(ID "INVALID_ENCODING_CHAR")
(PUNCT "=")
(PUNCT "-")
(LIT 32702)
(NEWLINE)
(ID "INVALID_XMLRPC")
(PUNCT "=")
(PUNCT "-")
(LIT 32600)
(NEWLINE)
(ID "METHOD_NOT_FOUND")
(PUNCT "=")
(PUNCT "-")
(LIT 32601)
(NEWLINE)
(ID "INVALID_METHOD_PARAMS")
(PUNCT "=")
(PUNCT "-")
(LIT 32602)
(NEWLINE)
(ID "INTERNAL_ERROR")
(PUNCT "=")
(PUNCT "-")
(LIT 32603)
(NEWLINE)
(KEYWORD class)
(ID "Error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for client errors.")
(NEWLINE)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ProtocolError")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Indicates an HTTP protocol error.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "errcode")
(PUNCT ",")
(ID "errmsg")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Error")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "url")
(PUNCT "=")
(ID "url")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errcode")
(PUNCT "=")
(ID "errcode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "errmsg")
(PUNCT "=")
(ID "errmsg")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "=")
(ID "headers")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "<ProtocolError for %s: %s %s>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "url")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errcode")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errmsg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ResponseError")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Indicates a broken response package.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Fault")
(PUNCT "(")
(ID "Error")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Indicates an XML-RPC fault package.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "faultCode")
(PUNCT ",")
(ID "faultString")
(PUNCT ",")
(PUNCT "**")
(ID "extra")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Error")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "faultCode")
(PUNCT "=")
(ID "faultCode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "faultString")
(PUNCT "=")
(ID "faultString")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<Fault %s: %r>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "faultCode")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "faultString")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "boolean")
(PUNCT "=")
(ID "Boolean")
(PUNCT "=")
(ID "bool")
(NEWLINE)
(ID "_day0")
(PUNCT "=")
(ID "datetime")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_day0")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%Y")
(PUNCT ")")
(PUNCT "==")
(LIT "0001")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_iso8601_format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%Y%m%dT%H:%M:%S")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "_day0")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%4Y")
(PUNCT ")")
(PUNCT "==")
(LIT "0001")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_iso8601_format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%4Y%m%dT%H:%M:%S")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_iso8601_format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%Y%m%dT%H:%M:%S")
(PUNCT ")")
(PUNCT ".")
(ID "zfill")
(PUNCT "(")
(LIT 17)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "_day0")
(NEWLINE)
(KEYWORD def)
(ID "_strftime")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "datetime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_iso8601_format")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "struct_time")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%04d%02d%02dT%02d:%02d:%02d")
(PUNCT "%")
(ID "value")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "DateTime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "DateTime wrapper for an ISO 8601 string or time tuple or\n    localtime integer value to generate 'dateTime.iso8601' XML-RPC\n    value.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "_strftime")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "make_comparable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "DateTime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "value")
(NEWLINE)
(ID "o")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "datetime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "value")
(NEWLINE)
(ID "o")
(PUNCT "=")
(ID "_iso8601_format")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "value")
(NEWLINE)
(ID "o")
(PUNCT "=")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(LIT "timetuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "timetuple")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "o")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "timetuple")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "otype")
(PUNCT "=")
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(LIT "__class__")
(PUNCT ")")
(KEYWORD and)
(ID "other")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(KEYWORD or)
(ID "type")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can't compare %s and %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "otype")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(PUNCT ",")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "o")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_comparable")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT "<")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__le__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "o")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_comparable")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT "<=")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__gt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "o")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_comparable")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT ">")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ge__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "o")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_comparable")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT ">=")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "o")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_comparable")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT "==")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "o")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_comparable")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT "!=")
(ID "o")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "timetuple")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "time")
(PUNCT ".")
(ID "strptime")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT ",")
(LIT "%Y%m%dT%H:%M:%S")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<DateTime %r at %x>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "out")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "<value><dateTime.iso8601>")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "</dateTime.iso8601></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_datetime")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "DateTime")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_datetime_type")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "strptime")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(LIT "%Y%m%dT%H:%M:%S")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Binary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wrapper for binary data.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "expected bytes or bytearray, not %s")
(PUNCT "%")
(ID "data")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ",")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Binary")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "==")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "Binary")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "other")
(PUNCT "=")
(ID "other")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "!=")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "out")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "<value><base64>\n")
(PUNCT ")")
(NEWLINE)
(ID "encoded")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "encodebytes")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "encoded")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "</base64></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_binary")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "Binary")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(ID "WRAPPERS")
(PUNCT "=")
(PUNCT "(")
(ID "DateTime")
(PUNCT ",")
(ID "Binary")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "ExpatParser")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_parser")
(PUNCT "=")
(ID "parser")
(PUNCT "=")
(ID "expat")
(PUNCT ".")
(ID "ParserCreate")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_target")
(PUNCT "=")
(ID "target")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "StartElementHandler")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "start")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "EndElementHandler")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "end")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "CharacterDataHandler")
(PUNCT "=")
(ID "target")
(PUNCT ".")
(ID "data")
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "target")
(PUNCT ".")
(ID "xml")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "feed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_parser")
(PUNCT ".")
(ID "Parse")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_parser")
(PUNCT ".")
(ID "Parse")
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_target")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_parser")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Marshaller")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate an XML-RPC params chunk from a Python data structure.\n\n    Create a Marshaller instance for each set of parameters, and use\n    the \"dumps\" method to convert your data (represented as a tuple)\n    to an XML-RPC params chunk.  To write a fault response, pass a\n    Fault instance instead.  You may prefer to use the \"dumps\" module\n    function for this purpose.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT "=")
(ID "allow_none")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "dumps")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "out")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "write")
(PUNCT "=")
(ID "out")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "dump")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dump")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "values")
(PUNCT ",")
(ID "Fault")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<fault>\n")
(PUNCT ")")
(NEWLINE)
(ID "dump")
(PUNCT "(")
(PUNCT "{")
(LIT "faultCode")
(PUNCT ":")
(ID "values")
(PUNCT ".")
(ID "faultCode")
(PUNCT ",")
(LIT "faultString")
(PUNCT ":")
(ID "values")
(PUNCT ".")
(ID "faultString")
(PUNCT "}")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</fault>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<params>\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<param>\n")
(PUNCT ")")
(NEWLINE)
(ID "dump")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</param>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "</params>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "out")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__dump")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "__dict__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "cannot marshal %s objects")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "type_")
(KEYWORD in)
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ".")
(ID "__mro__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type_")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "cannot marshal %s objects")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT "[")
(LIT "_arbitrary_instance")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dump_nil")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "allow_none")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "cannot marshal None unless allow_none is enabled")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><nil/></value>")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "dump_nil")
(NEWLINE)
(KEYWORD def)
(ID "dump_bool")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><boolean>")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "value")
(KEYWORD and)
(LIT "1")
(KEYWORD or)
(LIT "0")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</boolean></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "bool")
(PUNCT "]")
(PUNCT "=")
(ID "dump_bool")
(NEWLINE)
(KEYWORD def)
(ID "dump_long")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ">")
(ID "MAXINT")
(KEYWORD or)
(ID "value")
(PUNCT "<")
(ID "MININT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OverflowError")
(PUNCT "(")
(LIT "int exceeds XML-RPC limits")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><int>")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</int></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "int")
(PUNCT "]")
(PUNCT "=")
(ID "dump_long")
(NEWLINE)
(ID "dump_int")
(PUNCT "=")
(ID "dump_long")
(NEWLINE)
(KEYWORD def)
(ID "dump_double")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><double>")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</double></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "float")
(PUNCT "]")
(PUNCT "=")
(ID "dump_double")
(NEWLINE)
(KEYWORD def)
(ID "dump_unicode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ",")
(ID "escape")
(PUNCT "=")
(ID "escape")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><string>")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "escape")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</string></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "str")
(PUNCT "]")
(PUNCT "=")
(ID "dump_unicode")
(NEWLINE)
(KEYWORD def)
(ID "dump_bytes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><base64>\n")
(PUNCT ")")
(NEWLINE)
(ID "encoded")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "encodebytes")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "encoded")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</base64></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "bytes")
(PUNCT "]")
(PUNCT "=")
(ID "dump_bytes")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(ID "bytearray")
(PUNCT "]")
(PUNCT "=")
(ID "dump_bytes")
(NEWLINE)
(KEYWORD def)
(ID "dump_array")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "cannot marshal recursive sequences")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "dump")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dump")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "<value><array><data>\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dump")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "</data></array></value>\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "tuple")
(PUNCT "]")
(PUNCT "=")
(ID "dump_array")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(ID "list")
(PUNCT "]")
(PUNCT "=")
(ID "dump_array")
(NEWLINE)
(KEYWORD def)
(ID "dump_struct")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ",")
(ID "escape")
(PUNCT "=")
(ID "escape")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "cannot marshal recursive dictionaries")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "dump")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__dump")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "<value><struct>\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<member>\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "dictionary key must be string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "<name>%s</name>\n")
(PUNCT "%")
(ID "escape")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "dump")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</member>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "write")
(PUNCT "(")
(LIT "</struct></value>\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "memo")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "dict")
(PUNCT "]")
(PUNCT "=")
(ID "dump_struct")
(NEWLINE)
(KEYWORD def)
(ID "dump_datetime")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "write")
(PUNCT "(")
(LIT "<value><dateTime.iso8601>")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(ID "_strftime")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "write")
(PUNCT "(")
(LIT "</dateTime.iso8601></value>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "datetime")
(PUNCT "]")
(PUNCT "=")
(ID "dump_datetime")
(NEWLINE)
(KEYWORD def)
(ID "dump_instance")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "__class__")
(KEYWORD in)
(ID "WRAPPERS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write")
(PUNCT "=")
(ID "write")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "write")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dump_struct")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "__dict__")
(PUNCT ",")
(ID "write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(ID "DateTime")
(PUNCT "]")
(PUNCT "=")
(ID "dump_instance")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(ID "Binary")
(PUNCT "]")
(PUNCT "=")
(ID "dump_instance")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(LIT "_arbitrary_instance")
(PUNCT "]")
(PUNCT "=")
(ID "dump_instance")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Unmarshaller")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unmarshal an XML-RPC response, based on incoming XML event\n    messages (start, data, end).  Call close() to get the resulting\n    data structure.\n\n    Note that this reader is fairly tolerant, and gladly accepts bogus\n    XML-RPC data without complaining (but not bogus XML).\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "use_datetime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_marks")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_methodname")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT ".")
(ID "append")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_use_datetime")
(PUNCT "=")
(ID "use_builtin_types")
(KEYWORD or)
(ID "use_datetime")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_use_bytes")
(PUNCT "=")
(ID "use_builtin_types")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_marks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ResponseError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "==")
(LIT "fault")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Fault")
(PUNCT "(")
(PUNCT "**")
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmethodname")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_methodname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xml")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "standalone")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "start")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tag")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tag")
(PUNCT "==")
(LIT "array")
(KEYWORD or)
(ID "tag")
(PUNCT "==")
(LIT "struct")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_marks")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(PUNCT "(")
(ID "tag")
(PUNCT "==")
(LIT "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tag")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "f")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "end_dispatch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tag")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT "[")
(ID "tag")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "f")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "end_nil")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "nil")
(PUNCT "]")
(PUNCT "=")
(ID "end_nil")
(NEWLINE)
(KEYWORD def)
(ID "end_boolean")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(PUNCT "==")
(LIT "0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "data")
(PUNCT "==")
(LIT "1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "bad boolean value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "boolean")
(PUNCT "]")
(PUNCT "=")
(ID "end_boolean")
(NEWLINE)
(KEYWORD def)
(ID "end_int")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "i4")
(PUNCT "]")
(PUNCT "=")
(ID "end_int")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(LIT "i8")
(PUNCT "]")
(PUNCT "=")
(ID "end_int")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(LIT "int")
(PUNCT "]")
(PUNCT "=")
(ID "end_int")
(NEWLINE)
(KEYWORD def)
(ID "end_double")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "double")
(PUNCT "]")
(PUNCT "=")
(ID "end_double")
(NEWLINE)
(KEYWORD def)
(ID "end_string")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "string")
(PUNCT "]")
(PUNCT "=")
(ID "end_string")
(NEWLINE)
(ID "dispatch")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(ID "end_string")
(NEWLINE)
(KEYWORD def)
(ID "end_array")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mark")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_marks")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "array")
(PUNCT "]")
(PUNCT "=")
(ID "end_array")
(NEWLINE)
(KEYWORD def)
(ID "end_struct")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mark")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_marks")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "[")
(ID "items")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "items")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_stack")
(PUNCT "[")
(ID "mark")
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "dict")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "struct")
(PUNCT "]")
(PUNCT "=")
(ID "end_struct")
(NEWLINE)
(KEYWORD def)
(ID "end_base64")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "Binary")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_use_bytes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "base64")
(PUNCT "]")
(PUNCT "=")
(ID "end_base64")
(NEWLINE)
(KEYWORD def)
(ID "end_dateTime")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "DateTime")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_use_datetime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_datetime_type")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "dateTime.iso8601")
(PUNCT "]")
(PUNCT "=")
(ID "end_dateTime")
(NEWLINE)
(KEYWORD def)
(ID "end_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "end_string")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "value")
(PUNCT "]")
(PUNCT "=")
(ID "end_value")
(NEWLINE)
(KEYWORD def)
(ID "end_params")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(LIT "params")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "params")
(PUNCT "]")
(PUNCT "=")
(ID "end_params")
(NEWLINE)
(KEYWORD def)
(ID "end_fault")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(LIT "fault")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "fault")
(PUNCT "]")
(PUNCT "=")
(ID "end_fault")
(NEWLINE)
(KEYWORD def)
(ID "end_methodName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_methodname")
(PUNCT "=")
(ID "data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_type")
(PUNCT "=")
(LIT "methodName")
(NEWLINE)
(DEDENT)
(ID "dispatch")
(PUNCT "[")
(LIT "methodName")
(PUNCT "]")
(PUNCT "=")
(ID "end_methodName")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_MultiCallMethod")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "call_list")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__call_list")
(PUNCT "=")
(ID "call_list")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_MultiCallMethod")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__call_list")
(PUNCT ",")
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__call_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__name")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MultiCallIterator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterates over the results of a multicall. Exceptions are\n    raised in response to xmlrpc faults.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "results")
(PUNCT "=")
(ID "results")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "results")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Fault")
(PUNCT "(")
(ID "item")
(PUNCT "[")
(LIT "faultCode")
(PUNCT "]")
(PUNCT ",")
(ID "item")
(PUNCT "[")
(LIT "faultString")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "item")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected type in multicall result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "MultiCall")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "server -> a object used to boxcar method calls\n\n    server should be a ServerProxy object.\n\n    Methods can be added to the MultiCall using normal\n    method call syntax e.g.:\n\n    multicall = MultiCall(server_proxy)\n    multicall.add(2,3)\n    multicall.get_address(\"Guido\")\n\n    To execute the multicall, call the MultiCall object e.g.:\n\n    add_result, address = multicall()\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "server")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__server")
(PUNCT "=")
(ID "server")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__call_list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<MultiCall at %x>")
(PUNCT "%")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__str__")
(PUNCT "=")
(ID "__repr__")
(NEWLINE)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_MultiCallMethod")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__call_list")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "marshalled_list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "args")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__call_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "marshalled_list")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "{")
(LIT "methodName")
(PUNCT ":")
(ID "name")
(PUNCT ",")
(LIT "params")
(PUNCT ":")
(ID "args")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "MultiCallIterator")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__server")
(PUNCT ".")
(ID "system")
(PUNCT ".")
(ID "multicall")
(PUNCT "(")
(ID "marshalled_list")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "FastMarshaller")
(PUNCT "=")
(ID "FastParser")
(PUNCT "=")
(ID "FastUnmarshaller")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "getparser")
(PUNCT "(")
(ID "use_datetime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "getparser() -> parser, unmarshaller\n\n    Create an instance of the fastest available parser, and attach it\n    to an unmarshalling object.  Return both objects.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "FastParser")
(KEYWORD and)
(ID "FastUnmarshaller")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "use_builtin_types")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mkdatetime")
(PUNCT "=")
(ID "_datetime_type")
(NEWLINE)
(ID "mkbytes")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "decodebytes")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "use_datetime")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mkdatetime")
(PUNCT "=")
(ID "_datetime_type")
(NEWLINE)
(ID "mkbytes")
(PUNCT "=")
(ID "_binary")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mkdatetime")
(PUNCT "=")
(ID "_datetime")
(NEWLINE)
(ID "mkbytes")
(PUNCT "=")
(ID "_binary")
(NEWLINE)
(DEDENT)
(ID "target")
(PUNCT "=")
(ID "FastUnmarshaller")
(PUNCT "(")
(KEYWORD True)
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "mkbytes")
(PUNCT ",")
(ID "mkdatetime")
(PUNCT ",")
(ID "Fault")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "FastParser")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT "=")
(ID "Unmarshaller")
(PUNCT "(")
(ID "use_datetime")
(PUNCT "=")
(ID "use_datetime")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "FastParser")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT "=")
(ID "FastParser")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT "=")
(ID "ExpatParser")
(PUNCT "(")
(ID "target")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "parser")
(PUNCT ",")
(ID "target")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dumps")
(PUNCT "(")
(ID "params")
(PUNCT ",")
(ID "methodname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "methodresponse")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "data [,options] -> marshalled data\n\n    Convert an argument tuple or a Fault instance to an XML-RPC\n    request (or response, if the methodresponse option is used).\n\n    In addition to the data object, the following options can be given\n    as keyword arguments:\n\n        methodname: the method name for a methodCall packet\n\n        methodresponse: true to create a methodResponse packet.\n        If this option is used with a tuple, the tuple must be\n        a singleton (i.e. it can contain only one element).\n\n        encoding: the packet encoding (default is UTF-8)\n\n    All byte strings in the data structure are assumed to use the\n    packet encoding.  Unicode strings are automatically converted,\n    where necessary.\n    ")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "params")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "Fault")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "argument must be tuple or Fault instance")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "params")
(PUNCT ",")
(ID "Fault")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "methodresponse")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "methodresponse")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "params")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ",")
(LIT "response tuple must be a singleton")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "FastMarshaller")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "FastMarshaller")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "Marshaller")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(ID "allow_none")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "m")
(PUNCT ".")
(ID "dumps")
(PUNCT "(")
(ID "params")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(PUNCT "!=")
(LIT "utf-8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "xmlheader")
(PUNCT "=")
(LIT "<?xml version='1.0' encoding='%s'?>\n")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "xmlheader")
(PUNCT "=")
(LIT "<?xml version='1.0'?>\n")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "methodname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "methodname")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "methodname")
(PUNCT "=")
(ID "methodname")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(PUNCT "(")
(ID "xmlheader")
(PUNCT ",")
(LIT "<methodCall>\n")
(LIT "<methodName>")
(PUNCT ",")
(ID "methodname")
(PUNCT ",")
(LIT "</methodName>\n")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(LIT "</methodCall>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "methodresponse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "(")
(ID "xmlheader")
(PUNCT ",")
(LIT "<methodResponse>\n")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(LIT "</methodResponse>\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "loads")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "use_datetime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "data -> unmarshalled data, method name\n\n    Convert an XML-RPC packet to unmarshalled data plus a method\n    name (None if not present).\n\n    If the XML-RPC packet represents a fault condition, this function\n    raises a Fault exception.\n    ")
(NEWLINE)
(ID "p")
(PUNCT ",")
(ID "u")
(PUNCT "=")
(ID "getparser")
(PUNCT "(")
(ID "use_datetime")
(PUNCT "=")
(ID "use_datetime")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "u")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "u")
(PUNCT ".")
(ID "getmethodname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gzip_encode")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "data -> gzip encoded data\n\n    Encode data using the gzip content encoding as described in RFC 1952\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "gzip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "gzf")
(PUNCT "=")
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(PUNCT "(")
(ID "mode")
(PUNCT "=")
(LIT "wb")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(ID "f")
(PUNCT ",")
(ID "compresslevel")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "gzf")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "gzf")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "encoded")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "encoded")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gzip_decode")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "max_decode")
(PUNCT "=")
(LIT 20971520)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "gzip encoded data -> unencoded data\n\n    Decode data using the gzip content encoding as described in RFC 1952\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "gzip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "gzf")
(PUNCT "=")
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(PUNCT "(")
(ID "mode")
(PUNCT "=")
(LIT "rb")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "max_decode")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "decoded")
(PUNCT "=")
(ID "gzf")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "decoded")
(PUNCT "=")
(ID "gzf")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "max_decode")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "gzf")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "max_decode")
(PUNCT ">=")
(LIT 0)
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "decoded")
(PUNCT ")")
(PUNCT ">")
(ID "max_decode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "max gzipped payload length exceeded")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "decoded")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "GzipDecodedResponse")
(PUNCT "(")
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(KEYWORD if)
(ID "gzip")
(KEYWORD else)
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "a file-like object to decode a response encoded with the gzip\n    method, as described in RFC 1952.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "response")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "gzip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "response")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "rb")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "io")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_Method")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "send")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__send")
(PUNCT "=")
(ID "send")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_Method")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__send")
(PUNCT ",")
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__send")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__name")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Transport")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handles an HTTP transaction to an XML-RPC server.")
(NEWLINE)
(ID "user_agent")
(PUNCT "=")
(LIT "Python-xmlrpc/%s")
(PUNCT "%")
(ID "__version__")
(NEWLINE)
(ID "accept_gzip_encoding")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "encode_threshold")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "use_datetime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_use_datetime")
(PUNCT "=")
(ID "use_datetime")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "=")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extra_headers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "request_body")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "single_request")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "request_body")
(PUNCT ",")
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(KEYWORD or)
(ID "e")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "errno")
(PUNCT ".")
(ID "ECONNRESET")
(PUNCT ",")
(ID "errno")
(PUNCT ".")
(ID "ECONNABORTED")
(PUNCT ",")
(ID "errno")
(PUNCT ".")
(ID "EPIPE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "BadStatusLine")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "single_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "request_body")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "http_conn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "send_request")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "request_body")
(PUNCT ",")
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "http_conn")
(PUNCT ".")
(ID "getresponse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT ".")
(ID "status")
(PUNCT "==")
(LIT 200)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parse_response")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Fault")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "resp")
(PUNCT ".")
(ID "getheader")
(PUNCT "(")
(LIT "content-length")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ProtocolError")
(PUNCT "(")
(ID "host")
(PUNCT "+")
(ID "handler")
(PUNCT ",")
(ID "resp")
(PUNCT ".")
(ID "status")
(PUNCT ",")
(ID "resp")
(PUNCT ".")
(ID "reason")
(PUNCT ",")
(ID "dict")
(PUNCT "(")
(ID "resp")
(PUNCT ".")
(ID "getheaders")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getparser")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getparser")
(PUNCT "(")
(ID "use_datetime")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_use_datetime")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_use_builtin_types")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_host_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x509")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "x509")
(PUNCT "=")
(ID "host")
(NEWLINE)
(DEDENT)
(ID "auth")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "splituser")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "auth")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "unquote_to_bytes")
(PUNCT "(")
(ID "auth")
(PUNCT ")")
(NEWLINE)
(ID "auth")
(PUNCT "=")
(ID "base64")
(PUNCT ".")
(ID "encodebytes")
(PUNCT "(")
(ID "auth")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "auth")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "auth")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "extra_headers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "Authorization")
(PUNCT ",")
(LIT "Basic ")
(PUNCT "+")
(ID "auth")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_headers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "host")
(PUNCT ",")
(ID "extra_headers")
(PUNCT ",")
(ID "x509")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_connection")
(KEYWORD and)
(ID "host")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "chost")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_extra_headers")
(PUNCT ",")
(ID "x509")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_host_info")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "=")
(ID "host")
(PUNCT ",")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPConnection")
(PUNCT "(")
(ID "chost")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "=")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "request_body")
(PUNCT ",")
(ID "debug")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connection")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "make_connection")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_extra_headers")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connection")
(PUNCT ".")
(ID "set_debuglevel")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "accept_gzip_encoding")
(KEYWORD and)
(ID "gzip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connection")
(PUNCT ".")
(ID "putrequest")
(PUNCT "(")
(LIT "POST")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "skip_accept_encoding")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "Accept-Encoding")
(PUNCT ",")
(LIT "gzip")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connection")
(PUNCT ".")
(ID "putrequest")
(PUNCT "(")
(LIT "POST")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "Content-Type")
(PUNCT ",")
(LIT "text/xml")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT "User-Agent")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "user_agent")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_headers")
(PUNCT "(")
(ID "connection")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send_content")
(PUNCT "(")
(ID "connection")
(PUNCT ",")
(ID "request_body")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "connection")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send_headers")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "connection")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connection")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "send_content")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "connection")
(PUNCT ",")
(ID "request_body")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encode_threshold")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "encode_threshold")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "request_body")
(PUNCT ")")
(KEYWORD and)
(ID "gzip")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connection")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Content-Encoding")
(PUNCT ",")
(LIT "gzip")
(PUNCT ")")
(NEWLINE)
(ID "request_body")
(PUNCT "=")
(ID "gzip_encode")
(PUNCT "(")
(ID "request_body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "connection")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Content-Length")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "request_body")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "connection")
(PUNCT ".")
(ID "endheaders")
(PUNCT "(")
(ID "request_body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_response")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "response")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "response")
(PUNCT ",")
(LIT "getheader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "response")
(PUNCT ".")
(ID "getheader")
(PUNCT "(")
(LIT "Content-Encoding")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT "==")
(LIT "gzip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT "=")
(ID "GzipDecodedResponse")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT "=")
(ID "response")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT "=")
(ID "response")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT ",")
(ID "u")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getparser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "stream")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1024)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "body:")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT ".")
(ID "feed")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stream")
(KEYWORD is)
(KEYWORD not)
(ID "response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "u")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SafeTransport")
(PUNCT "(")
(ID "Transport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handles an HTTPS transaction to an XML-RPC server.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "use_datetime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "use_datetime")
(PUNCT "=")
(ID "use_datetime")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_connection")
(KEYWORD and)
(ID "host")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ",")
(LIT "HTTPSConnection")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(LIT "your version of http.client doesn't support HTTPS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "chost")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_extra_headers")
(PUNCT ",")
(ID "x509")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_host_info")
(PUNCT "(")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "=")
(ID "host")
(PUNCT ",")
(ID "http")
(PUNCT ".")
(ID "client")
(PUNCT ".")
(ID "HTTPSConnection")
(PUNCT "(")
(ID "chost")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "context")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "context")
(PUNCT ",")
(PUNCT "**")
(PUNCT "(")
(ID "x509")
(KEYWORD or)
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_connection")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ServerProxy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "uri [,options] -> a logical connection to an XML-RPC server\n\n    uri is the connection point on the server, given as\n    scheme://host/target.\n\n    The standard implementation always supports the \"http\" scheme.  If\n    SSL socket support is available (Python 2.0), it also supports\n    \"https\".\n\n    If the target part and the slash preceding it are both omitted,\n    \"/RPC2\" is assumed.\n\n    The following options can be given as keyword arguments:\n\n        transport: a transport factory\n        encoding: the request encoding (default is UTF-8)\n\n    All 8-bit strings passed to the server proxy are assumed to use\n    the given encoding.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "uri")
(PUNCT ",")
(ID "transport")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_datetime")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT ",")
(ID "uri")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "splittype")
(PUNCT "(")
(ID "uri")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "type")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "http")
(PUNCT ",")
(LIT "https")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "unsupported XML-RPC protocol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__handler")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "splithost")
(PUNCT "(")
(ID "uri")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "__handler")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__handler")
(PUNCT "=")
(LIT "/RPC2")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "transport")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(LIT "https")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "SafeTransport")
(NEWLINE)
(ID "extra_kwargs")
(PUNCT "=")
(PUNCT "{")
(LIT "context")
(PUNCT ":")
(ID "context")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "Transport")
(NEWLINE)
(ID "extra_kwargs")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "transport")
(PUNCT "=")
(ID "handler")
(PUNCT "(")
(ID "use_datetime")
(PUNCT "=")
(ID "use_datetime")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(PUNCT ",")
(PUNCT "**")
(ID "extra_kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__transport")
(PUNCT "=")
(ID "transport")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__encoding")
(PUNCT "=")
(ID "encoding")
(KEYWORD or)
(LIT "utf-8")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__verbose")
(PUNCT "=")
(ID "verbose")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__allow_none")
(PUNCT "=")
(ID "allow_none")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "methodname")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT "=")
(ID "dumps")
(PUNCT "(")
(ID "params")
(PUNCT ",")
(ID "methodname")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__encoding")
(PUNCT ",")
(ID "allow_none")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__allow_none")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__encoding")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__transport")
(PUNCT ".")
(ID "request")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__handler")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__verbose")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "response")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "<ServerProxy for %s%s>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__handler")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__str__")
(PUNCT "=")
(ID "__repr__")
(NEWLINE)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_Method")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__request")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A workaround to get special attributes on the ServerProxy\n           without interfering with the magic __getattr__\n        ")
(NEWLINE)
(KEYWORD if)
(ID "attr")
(PUNCT "==")
(LIT "close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__close")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "attr")
(PUNCT "==")
(LIT "transport")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__transport")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(LIT "Attribute %r not found")
(PUNCT "%")
(PUNCT "(")
(ID "attr")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "Server")
(PUNCT "=")
(ID "ServerProxy")
(NEWLINE)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "server")
(PUNCT "=")
(ID "ServerProxy")
(PUNCT "(")
(LIT "http://localhost:8000")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "server")
(PUNCT ".")
(ID "currentTime")
(PUNCT ".")
(ID "getCurrentTime")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Error")
(KEYWORD as)
(ID "v")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "ERROR")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "multi")
(PUNCT "=")
(ID "MultiCall")
(PUNCT "(")
(ID "server")
(PUNCT ")")
(NEWLINE)
(ID "multi")
(PUNCT ".")
(ID "getData")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "multi")
(PUNCT ".")
(ID "pow")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT 9)
(PUNCT ")")
(NEWLINE)
(ID "multi")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "response")
(KEYWORD in)
(ID "multi")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "Error")
(KEYWORD as)
(ID "v")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "ERROR")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
