(LIT "Generic (shallow and deep) copying operations.\n\nInterface summary:\n\n        import copy\n\n        x = copy.copy(y)        # make a shallow copy of y\n        x = copy.deepcopy(y)    # make a deep copy of y\n\nFor module specific errors, copy.Error is raised.\n\nThe difference between shallow and deep copying is only relevant for\ncompound objects (objects that contain other objects, like lists or\nclass instances).\n\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\n\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop\n\n b) because deep copy copies *everything* it may copy too much, e.g.\n    administrative data structures that should be shared even between\n    copies\n\nPython's deep copy operation avoids these problems by:\n\n a) keeping a table of objects already copied during the current\n    copying pass\n\n b) letting user-defined classes override the copying operation or the\n    set of components copied\n\nThis version does not copy types like module, class, function, method,\nnor stack trace, stack frame, nor file, socket, window, nor array, nor\nany similar types.\n\nClasses can use the same interfaces to control copying that they use\nto control pickling: they can define methods called __getinitargs__(),\n__getstate__() and __setstate__().  See the documentation for module\n\"pickle\" for information on these methods.\n")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(KEYWORD import)
(ID "weakref")
(NEWLINE)
(KEYWORD from)
(ID "copyreg")
(KEYWORD import)
(ID "dispatch_table")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(KEYWORD class)
(ID "Error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "error")
(PUNCT "=")
(ID "Error")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "org")
(PUNCT ".")
(ID "python")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "PyStringMap")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PyStringMap")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Error")
(PUNCT ",")
(LIT "copy")
(PUNCT ",")
(LIT "deepcopy")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shallow copy operation on arbitrary Python objects.\n\n    See the module's __doc__ string for more info.\n    ")
(NEWLINE)
(ID "cls")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "copier")
(PUNCT "=")
(ID "_copy_dispatch")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "copier")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "copier")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "issc")
(PUNCT "=")
(ID "issubclass")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "issc")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_copy_immutable")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "copier")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(LIT "__copy__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "copier")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "copier")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "reductor")
(PUNCT "=")
(ID "dispatch_table")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reductor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reductor")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reductor")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT "__reduce_ex__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reductor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reductor")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reductor")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT "__reduce__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reductor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reductor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "un(shallow)copyable object of type %s")
(PUNCT "%")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_reconstruct")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "rv")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_copy_dispatch")
(PUNCT "=")
(ID "d")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_copy_immutable")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(PUNCT "(")
(ID "type")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(ID "int")
(PUNCT ",")
(ID "float")
(PUNCT ",")
(ID "bool")
(PUNCT ",")
(ID "str")
(PUNCT ",")
(ID "tuple")
(PUNCT ",")
(ID "bytes")
(PUNCT ",")
(ID "frozenset")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "range")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "BuiltinFunctionType")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "Ellipsis")
(PUNCT ")")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "FunctionType")
(PUNCT ",")
(ID "weakref")
(PUNCT ".")
(ID "ref")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "_copy_immutable")
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "types")
(PUNCT ",")
(LIT "CodeType")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "t")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "_copy_immutable")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "complex")
(PUNCT ",")
(LIT "unicode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "builtins")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "t")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "_copy_immutable")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_copy_with_constructor")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "t")
(KEYWORD in)
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "dict")
(PUNCT ",")
(ID "set")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "t")
(PUNCT "]")
(PUNCT "=")
(ID "_copy_with_constructor")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_copy_with_copy_method")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "PyStringMap")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "PyStringMap")
(PUNCT "]")
(PUNCT "=")
(ID "_copy_with_copy_method")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "d")
(NEWLINE)
(KEYWORD def)
(ID "deepcopy")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "_nil")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deep copy operation on arbitrary Python objects.\n\n    See the module's __doc__ string for more info.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "memo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "memo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "y")
(PUNCT "=")
(ID "memo")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "d")
(PUNCT ",")
(ID "_nil")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "y")
(KEYWORD is)
(KEYWORD not)
(ID "_nil")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "y")
(NEWLINE)
(DEDENT)
(ID "cls")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "copier")
(PUNCT "=")
(ID "_deepcopy_dispatch")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "copier")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "copier")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "issc")
(PUNCT "=")
(ID "issubclass")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "issc")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "issc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "_deepcopy_atomic")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "copier")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT "__deepcopy__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "copier")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "copier")
(PUNCT "(")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reductor")
(PUNCT "=")
(ID "dispatch_table")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reductor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reductor")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reductor")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT "__reduce_ex__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reductor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reductor")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reductor")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT "__reduce__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reductor")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rv")
(PUNCT "=")
(ID "reductor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "un(deep)copyable object of type %s")
(PUNCT "%")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "y")
(PUNCT "=")
(ID "_reconstruct")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "rv")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "y")
(KEYWORD is)
(KEYWORD not)
(ID "x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "memo")
(PUNCT "[")
(ID "d")
(PUNCT "]")
(PUNCT "=")
(ID "y")
(NEWLINE)
(ID "_keep_alive")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "y")
(NEWLINE)
(DEDENT)
(ID "_deepcopy_dispatch")
(PUNCT "=")
(ID "d")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_deepcopy_atomic")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "type")
(PUNCT "(")
(ID "Ellipsis")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "int")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "float")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "bool")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "complex")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "[")
(ID "bytes")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "str")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "types")
(PUNCT ".")
(ID "CodeType")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "range")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "types")
(PUNCT ".")
(ID "BuiltinFunctionType")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "types")
(PUNCT ".")
(ID "FunctionType")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "weakref")
(PUNCT ".")
(ID "ref")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_atomic")
(NEWLINE)
(KEYWORD def)
(ID "_deepcopy_list")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "y")
(NEWLINE)
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "deepcopy")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "y")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "[")
(ID "list")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_list")
(NEWLINE)
(KEYWORD def)
(ID "_deepcopy_tuple")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "a")
(KEYWORD in)
(ID "x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "deepcopy")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "x")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD is)
(KEYWORD not)
(ID "y")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "y")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "y")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "[")
(ID "tuple")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_tuple")
(NEWLINE)
(KEYWORD def)
(ID "_deepcopy_dict")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "y")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "x")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "[")
(ID "deepcopy")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "y")
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "[")
(ID "dict")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_dict")
(NEWLINE)
(KEYWORD if)
(ID "PyStringMap")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(ID "PyStringMap")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_dict")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_deepcopy_method")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "__func__")
(PUNCT ",")
(ID "deepcopy")
(PUNCT "(")
(ID "x")
(PUNCT ".")
(ID "__self__")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_deepcopy_dispatch")
(PUNCT "[")
(ID "types")
(PUNCT ".")
(ID "MethodType")
(PUNCT "]")
(PUNCT "=")
(ID "_deepcopy_method")
(NEWLINE)
(KEYWORD def)
(ID "_keep_alive")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Keeps a reference to the object x in the memo.\n\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "memo")
(PUNCT ")")
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "memo")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(ID "x")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_reconstruct")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "info")
(PUNCT ",")
(ID "deep")
(PUNCT ",")
(ID "memo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "memo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "memo")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "info")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "n")
(KEYWORD in)
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ",")
(LIT 5)
(PUNCT ")")
(NEWLINE)
(ID "callable")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "listiter")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "listiter")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dictiter")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dictiter")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "deep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "y")
(PUNCT "=")
(ID "callable")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "memo")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "y")
(NEWLINE)
(KEYWORD if)
(ID "state")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "deep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "state")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "y")
(PUNCT ",")
(LIT "__setstate__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT ".")
(ID "__setstate__")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "state")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT ",")
(ID "slotstate")
(PUNCT "=")
(ID "state")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "slotstate")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "state")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT ".")
(ID "__dict__")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "slotstate")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "slotstate")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "y")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "listiter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "listiter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "deep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "y")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "dictiter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "dictiter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "deep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "deepcopy")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "memo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "y")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "y")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "d")
(NEWLINE)
(KEYWORD del)
(ID "types")
(NEWLINE)
(KEYWORD class)
(ID "_EmptyClass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ENDMARKER)
