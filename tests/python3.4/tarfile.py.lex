(LIT "Read from and write to tar format archives.\n")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT "0.9.0")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Lars Gustäbel (lars@gustaebel.de)")
(NEWLINE)
(ID "__date__")
(PUNCT "=")
(LIT "$Date: 2011-02-25 17:42:01 +0200 (Fri, 25 Feb 2011) $")
(NEWLINE)
(ID "__cvsid__")
(PUNCT "=")
(LIT "$Id: tarfile.py 88586 2011-02-25 15:42:01Z marc-andre.lemburg $")
(NEWLINE)
(ID "__credits__")
(PUNCT "=")
(LIT "Gustavo Niemeyer, Niels Gustäbel, Richard Townsend.")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "shutil")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD import)
(ID "copy")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "grp")
(PUNCT ",")
(ID "pwd")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "grp")
(PUNCT "=")
(ID "pwd")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "symlink_exception")
(PUNCT "=")
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "NotImplementedError")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "symlink_exception")
(PUNCT "+=")
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NameError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "TarFile")
(PUNCT ",")
(LIT "TarInfo")
(PUNCT ",")
(LIT "is_tarfile")
(PUNCT ",")
(LIT "TarError")
(PUNCT "]")
(NEWLINE)
(ID "NUL")
(PUNCT "=")
(LIT #"\0")
(NEWLINE)
(ID "BLOCKSIZE")
(PUNCT "=")
(LIT 512)
(NEWLINE)
(ID "RECORDSIZE")
(PUNCT "=")
(ID "BLOCKSIZE")
(PUNCT "*")
(LIT 20)
(NEWLINE)
(ID "GNU_MAGIC")
(PUNCT "=")
(LIT #"ustar  \0")
(NEWLINE)
(ID "POSIX_MAGIC")
(PUNCT "=")
(LIT #"ustar\00000")
(NEWLINE)
(ID "LENGTH_NAME")
(PUNCT "=")
(LIT 100)
(NEWLINE)
(ID "LENGTH_LINK")
(PUNCT "=")
(LIT 100)
(NEWLINE)
(ID "LENGTH_PREFIX")
(PUNCT "=")
(LIT 155)
(NEWLINE)
(ID "REGTYPE")
(PUNCT "=")
(LIT #"0")
(NEWLINE)
(ID "AREGTYPE")
(PUNCT "=")
(LIT #"\0")
(NEWLINE)
(ID "LNKTYPE")
(PUNCT "=")
(LIT #"1")
(NEWLINE)
(ID "SYMTYPE")
(PUNCT "=")
(LIT #"2")
(NEWLINE)
(ID "CHRTYPE")
(PUNCT "=")
(LIT #"3")
(NEWLINE)
(ID "BLKTYPE")
(PUNCT "=")
(LIT #"4")
(NEWLINE)
(ID "DIRTYPE")
(PUNCT "=")
(LIT #"5")
(NEWLINE)
(ID "FIFOTYPE")
(PUNCT "=")
(LIT #"6")
(NEWLINE)
(ID "CONTTYPE")
(PUNCT "=")
(LIT #"7")
(NEWLINE)
(ID "GNUTYPE_LONGNAME")
(PUNCT "=")
(LIT #"L")
(NEWLINE)
(ID "GNUTYPE_LONGLINK")
(PUNCT "=")
(LIT #"K")
(NEWLINE)
(ID "GNUTYPE_SPARSE")
(PUNCT "=")
(LIT #"S")
(NEWLINE)
(ID "XHDTYPE")
(PUNCT "=")
(LIT #"x")
(NEWLINE)
(ID "XGLTYPE")
(PUNCT "=")
(LIT #"g")
(NEWLINE)
(ID "SOLARIS_XHDTYPE")
(PUNCT "=")
(LIT #"X")
(NEWLINE)
(ID "USTAR_FORMAT")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "GNU_FORMAT")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "PAX_FORMAT")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "DEFAULT_FORMAT")
(PUNCT "=")
(ID "GNU_FORMAT")
(NEWLINE)
(ID "SUPPORTED_TYPES")
(PUNCT "=")
(PUNCT "(")
(ID "REGTYPE")
(PUNCT ",")
(ID "AREGTYPE")
(PUNCT ",")
(ID "LNKTYPE")
(PUNCT ",")
(ID "SYMTYPE")
(PUNCT ",")
(ID "DIRTYPE")
(PUNCT ",")
(ID "FIFOTYPE")
(PUNCT ",")
(ID "CONTTYPE")
(PUNCT ",")
(ID "CHRTYPE")
(PUNCT ",")
(ID "BLKTYPE")
(PUNCT ",")
(ID "GNUTYPE_LONGNAME")
(PUNCT ",")
(ID "GNUTYPE_LONGLINK")
(PUNCT ",")
(ID "GNUTYPE_SPARSE")
(PUNCT ")")
(NEWLINE)
(ID "REGULAR_TYPES")
(PUNCT "=")
(PUNCT "(")
(ID "REGTYPE")
(PUNCT ",")
(ID "AREGTYPE")
(PUNCT ",")
(ID "CONTTYPE")
(PUNCT ",")
(ID "GNUTYPE_SPARSE")
(PUNCT ")")
(NEWLINE)
(ID "GNU_TYPES")
(PUNCT "=")
(PUNCT "(")
(ID "GNUTYPE_LONGNAME")
(PUNCT ",")
(ID "GNUTYPE_LONGLINK")
(PUNCT ",")
(ID "GNUTYPE_SPARSE")
(PUNCT ")")
(NEWLINE)
(ID "PAX_FIELDS")
(PUNCT "=")
(PUNCT "(")
(LIT "path")
(PUNCT ",")
(LIT "linkpath")
(PUNCT ",")
(LIT "size")
(PUNCT ",")
(LIT "mtime")
(PUNCT ",")
(LIT "uid")
(PUNCT ",")
(LIT "gid")
(PUNCT ",")
(LIT "uname")
(PUNCT ",")
(LIT "gname")
(PUNCT ")")
(NEWLINE)
(ID "PAX_NAME_FIELDS")
(PUNCT "=")
(PUNCT "{")
(LIT "path")
(PUNCT ",")
(LIT "linkpath")
(PUNCT ",")
(LIT "uname")
(PUNCT ",")
(LIT "gname")
(PUNCT "}")
(NEWLINE)
(ID "PAX_NUMBER_FIELDS")
(PUNCT "=")
(PUNCT "{")
(LIT "atime")
(PUNCT ":")
(ID "float")
(PUNCT ",")
(LIT "ctime")
(PUNCT ":")
(ID "float")
(PUNCT ",")
(LIT "mtime")
(PUNCT ":")
(ID "float")
(PUNCT ",")
(LIT "uid")
(PUNCT ":")
(ID "int")
(PUNCT ",")
(LIT "gid")
(PUNCT ":")
(ID "int")
(PUNCT ",")
(LIT "size")
(PUNCT ":")
(ID "int")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ENCODING")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ENCODING")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "getfilesystemencoding")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stn")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "length")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a string to a null-terminated bytes object.\n    ")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "length")
(PUNCT "]")
(PUNCT "+")
(PUNCT "(")
(ID "length")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(PUNCT "*")
(ID "NUL")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "nts")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a null-terminated bytes object to a string.\n    ")
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT #"\0")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "p")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "p")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "nti")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a number field to a python number.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD in)
(PUNCT "(")
(LIT 128)
(PUNCT ",")
(LIT 255)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "<<=")
(LIT 8)
(NEWLINE)
(ID "n")
(PUNCT "+=")
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT 255)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(PUNCT "-")
(PUNCT "(")
(LIT 256)
(PUNCT "**")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "-")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "nts")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(LIT "ascii")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(KEYWORD or)
(LIT "0")
(PUNCT ",")
(LIT 8)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidHeaderError")
(PUNCT "(")
(LIT "invalid header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "itn")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "digits")
(PUNCT "=")
(LIT 8)
(PUNCT ",")
(ID "format")
(PUNCT "=")
(ID "DEFAULT_FORMAT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a python number to a number field.\n    ")
(NEWLINE)
(KEYWORD if)
(LIT 0)
(PUNCT "<=")
(ID "n")
(PUNCT "<")
(LIT 8)
(PUNCT "**")
(PUNCT "(")
(ID "digits")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(LIT "%0*o")
(PUNCT "%")
(PUNCT "(")
(ID "digits")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(ID "NUL")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "format")
(PUNCT "==")
(ID "GNU_FORMAT")
(KEYWORD and)
(PUNCT "-")
(LIT 256)
(PUNCT "**")
(PUNCT "(")
(ID "digits")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "<=")
(ID "n")
(PUNCT "<")
(LIT 256)
(PUNCT "**")
(PUNCT "(")
(ID "digits")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT "[")
(LIT 128)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT "[")
(LIT 255)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(LIT 256)
(PUNCT "**")
(ID "digits")
(PUNCT "+")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "digits")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "n")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT ">>=")
(LIT 8)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "overflow in number field")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "calc_chksums")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    ")
(NEWLINE)
(ID "unsigned_chksum")
(PUNCT "=")
(LIT 256)
(PUNCT "+")
(ID "sum")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "unpack_from")
(PUNCT "(")
(LIT "148B8x356B")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "signed_chksum")
(PUNCT "=")
(LIT 256)
(PUNCT "+")
(ID "sum")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "unpack_from")
(PUNCT "(")
(LIT "148b8x356b")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "unsigned_chksum")
(PUNCT ",")
(ID "signed_chksum")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copyfileobj")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ",")
(ID "length")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "length")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "length")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "shutil")
(PUNCT ".")
(ID "copyfileobj")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "BUFSIZE")
(PUNCT "=")
(LIT 16)
(PUNCT "*")
(LIT 1024)
(NEWLINE)
(ID "blocks")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "length")
(PUNCT ",")
(ID "BUFSIZE")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "b")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "blocks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "src")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "BUFSIZE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT "<")
(ID "BUFSIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "end of file reached")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dst")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "remainder")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "src")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT "<")
(ID "remainder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "end of file reached")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dst")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "filemode")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deprecated in this location; use stat.filemode.")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "deprecated in favor of stat.filemode")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "stat")
(PUNCT ".")
(ID "filemode")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_safe_print")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(LIT "encoding")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(LIT "backslashreplace")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TarError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base exception.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ExtractError")
(PUNCT "(")
(ID "TarError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "General exception for extract errors.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ReadError")
(PUNCT "(")
(ID "TarError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for unreadable tar archives.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CompressionError")
(PUNCT "(")
(ID "TarError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for unavailable compression methods.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "StreamError")
(PUNCT "(")
(ID "TarError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for unsupported operations on stream-like TarFiles.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HeaderError")
(PUNCT "(")
(ID "TarError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base exception for header errors.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "EmptyHeaderError")
(PUNCT "(")
(ID "HeaderError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for empty headers.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TruncatedHeaderError")
(PUNCT "(")
(ID "HeaderError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for truncated headers.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "EOFHeaderError")
(PUNCT "(")
(ID "HeaderError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for end of file headers.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "InvalidHeaderError")
(PUNCT "(")
(ID "HeaderError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for invalid headers.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SubsequentHeaderError")
(PUNCT "(")
(ID "HeaderError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exception for missing and invalid extended headers.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_LowLevelFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(PUNCT "{")
(LIT "r")
(PUNCT ":")
(ID "os")
(PUNCT ".")
(ID "O_RDONLY")
(PUNCT ",")
(LIT "w")
(PUNCT ":")
(ID "os")
(PUNCT ".")
(ID "O_WRONLY")
(PUNCT "|")
(ID "os")
(PUNCT ".")
(ID "O_CREAT")
(PUNCT "|")
(ID "os")
(PUNCT ".")
(ID "O_TRUNC")
(PUNCT ",")
(PUNCT "}")
(PUNCT "[")
(ID "mode")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "O_BINARY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "|=")
(ID "os")
(PUNCT ".")
(ID "O_BINARY")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fd")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(LIT 438)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fd")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fd")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_Stream")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n\n       _Stream is intended to be used only internally.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "comptype")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(ID "bufsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a _Stream object.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT "=")
(ID "_LowLevelFile")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "comptype")
(PUNCT "==")
(LIT "*")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT "=")
(ID "_StreamProxy")
(PUNCT "(")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(ID "comptype")
(PUNCT "=")
(ID "fileobj")
(PUNCT ".")
(ID "getcomptype")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(KEYWORD or)
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "comptype")
(PUNCT "=")
(ID "comptype")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT "=")
(ID "fileobj")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT "=")
(ID "bufsize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "comptype")
(PUNCT "==")
(LIT "gz")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "zlib")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "zlib module is not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT "=")
(ID "zlib")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "crc")
(PUNCT "=")
(ID "zlib")
(PUNCT ".")
(ID "crc32")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_init_read_gz")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exception")
(PUNCT "=")
(ID "zlib")
(PUNCT ".")
(ID "error")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_init_write_gz")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "comptype")
(PUNCT "==")
(LIT "bz2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "bz2")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "bz2 module is not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT "=")
(ID "bz2")
(PUNCT ".")
(ID "BZ2Decompressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exception")
(PUNCT "=")
(ID "OSError")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT "=")
(ID "bz2")
(PUNCT ".")
(ID "BZ2Compressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "comptype")
(PUNCT "==")
(LIT "xz")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "lzma")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "lzma module is not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "LZMADecompressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "exception")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "LZMAError")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "LZMACompressor")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "comptype")
(PUNCT "!=")
(LIT "tar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "unknown compression type %r")
(PUNCT "%")
(ID "comptype")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "closed")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_init_write_gz")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize for writing with gzip compression.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "compressobj")
(PUNCT "(")
(LIT 9)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "DEFLATED")
(PUNCT ",")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "MAX_WBITS")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "DEF_MEM_LEVEL")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "timestamp")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__write")
(PUNCT "(")
(LIT #"\37\213\b\b")
(PUNCT "+")
(ID "timestamp")
(PUNCT "+")
(LIT #"\2\377")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ".gz")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "iso-8859-1")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(PUNCT "+")
(ID "NUL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write string s to the stream.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "comptype")
(PUNCT "==")
(LIT "gz")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "crc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "crc32")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "crc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "comptype")
(PUNCT "!=")
(LIT "tar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT ".")
(ID "compress")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__write")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write string s to the stream if a whole new block\n           is ready to be written.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "+=")
(ID "s")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "[")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the _Stream object. No operation should be\n           done on it afterwards.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "==")
(LIT "w")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "comptype")
(PUNCT "!=")
(LIT "tar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "==")
(LIT "w")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "comptype")
(PUNCT "==")
(LIT "gz")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "crc")
(PUNCT "&")
(LIT 4294967295)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "&")
(LIT 4294967295)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init_read_gz")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize for reading a gzip compressed fileobj.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "decompressobj")
(PUNCT "(")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "zlib")
(PUNCT ".")
(ID "MAX_WBITS")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(PUNCT "!=")
(LIT #"\37\213")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "not a gzip file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "!=")
(LIT #"\b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "unsupported compression method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "flag")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 6)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "flag")
(PUNCT "&")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "xlen")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT 256)
(PUNCT "*")
(ID "ord")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "xlen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "flag")
(PUNCT "&")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(KEYWORD or)
(ID "s")
(PUNCT "==")
(ID "NUL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "flag")
(PUNCT "&")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "s")
(KEYWORD or)
(ID "s")
(PUNCT "==")
(ID "NUL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "flag")
(PUNCT "&")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the stream's file pointer position.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "pos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pos")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the stream's file pointer to pos. Negative seeking\n           is forbidden.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "pos")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "blocks")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "pos")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "blocks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "remainder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StreamError")
(PUNCT "(")
(LIT "seeking backwards is not allowed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "pos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the next size number of bytes from the stream.\n           If size is not defined, return all bytes of the stream\n           up to EOF.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pos")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return size bytes from the stream.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "comptype")
(PUNCT "==")
(LIT "tar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "c")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "c")
(PUNCT "<")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cmp")
(PUNCT ".")
(ID "decompress")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "self")
(PUNCT ".")
(ID "exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "invalid compressed data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "+=")
(ID "buf")
(NEWLINE)
(ID "c")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "[")
(PUNCT ":")
(ID "size")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dbuf")
(PUNCT "[")
(ID "size")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return size bytes from stream. If internal buffer is empty,\n           read another block from the stream.\n        ")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "c")
(PUNCT "<")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "+=")
(ID "buf")
(NEWLINE)
(ID "c")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "[")
(PUNCT ":")
(ID "size")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "[")
(ID "size")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_StreamProxy")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileobj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT "=")
(ID "fileobj")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT #"\37\213\b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "gz")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT "==")
(LIT #"BZh")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 10)
(PUNCT "]")
(PUNCT "==")
(LIT #"1AY&SY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "bz2")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "buf")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(PUNCT "(")
(LIT #"]\0\0\200")
(PUNCT ",")
(LIT #"\3757zXZ")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "xz")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "tar")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_FileInFile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "size")
(PUNCT ",")
(ID "blockinfo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT "=")
(ID "fileobj")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "offset")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT "=")
(ID "size")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "fileobj")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "blockinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "blockinfo")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "map_index")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "map")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "lastpos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "realpos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "offset")
(NEWLINE)
(KEYWORD for)
(ID "offset")
(PUNCT ",")
(ID "size")
(KEYWORD in)
(ID "blockinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "offset")
(PUNCT ">")
(ID "lastpos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "map")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(KEYWORD False)
(PUNCT ",")
(ID "lastpos")
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "map")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(KEYWORD True)
(PUNCT ",")
(ID "offset")
(PUNCT ",")
(ID "offset")
(PUNCT "+")
(ID "size")
(PUNCT ",")
(ID "realpos")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "realpos")
(PUNCT "+=")
(ID "size")
(NEWLINE)
(ID "lastpos")
(PUNCT "=")
(ID "offset")
(PUNCT "+")
(ID "size")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "lastpos")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "map")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(KEYWORD False)
(PUNCT ",")
(ID "lastpos")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seekable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "seekable")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current file position.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "position")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "position")
(PUNCT ",")
(ID "whence")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "SEEK_SET")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Seek to a position in the file.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "whence")
(PUNCT "==")
(ID "io")
(PUNCT ".")
(ID "SEEK_SET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "max")
(PUNCT "(")
(ID "position")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "whence")
(PUNCT "==")
(ID "io")
(PUNCT ".")
(ID "SEEK_CUR")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "position")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "+")
(ID "position")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "+")
(ID "position")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "whence")
(PUNCT "==")
(ID "io")
(PUNCT ".")
(ID "SEEK_END")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "min")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT "+")
(ID "position")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Invalid argument")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "position")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read data from the file.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "position")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "size")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD while)
(ID "size")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "stop")
(PUNCT ",")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "map")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "map_index")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "start")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "<")
(ID "stop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "map_index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "map_index")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "map")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "map_index")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "length")
(PUNCT "=")
(ID "min")
(PUNCT "(")
(ID "size")
(PUNCT ",")
(ID "stop")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT "+")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "-")
(ID "start")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "NUL")
(PUNCT "*")
(ID "length")
(NEWLINE)
(DEDENT)
(ID "size")
(PUNCT "-=")
(ID "length")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "position")
(PUNCT "+=")
(ID "length")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readinto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "b")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "buf")
(NEWLINE)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ExFileObject")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "BufferedReader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT "=")
(ID "_FileInFile")
(PUNCT "(")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "offset_data")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "sparse")
(PUNCT ")")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TarInfo")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    ")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "mode")
(PUNCT ",")
(LIT "uid")
(PUNCT ",")
(LIT "gid")
(PUNCT ",")
(LIT "size")
(PUNCT ",")
(LIT "mtime")
(PUNCT ",")
(LIT "chksum")
(PUNCT ",")
(LIT "type")
(PUNCT ",")
(LIT "linkname")
(PUNCT ",")
(LIT "uname")
(PUNCT ",")
(LIT "gname")
(PUNCT ",")
(LIT "devmajor")
(PUNCT ",")
(LIT "devminor")
(PUNCT ",")
(LIT "offset")
(PUNCT ",")
(LIT "offset_data")
(PUNCT ",")
(LIT "pax_headers")
(PUNCT ",")
(LIT "sparse")
(PUNCT ",")
(LIT "tarfile")
(PUNCT ",")
(LIT "_sparse_structs")
(PUNCT ",")
(LIT "_link_target")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a TarInfo object. name is the optional name\n           of the member.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(LIT 420)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "uid")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gid")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mtime")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chksum")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "REGTYPE")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linkname")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "uname")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "gname")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "devmajor")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "devminor")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset_data")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sparse")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getpath")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(ID "path")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "_getpath")
(PUNCT ",")
(ID "_setpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_getlinkpath")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "linkname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_setlinkpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "linkname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "linkname")
(PUNCT "=")
(ID "linkname")
(NEWLINE)
(DEDENT)
(ID "linkpath")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "_getlinkpath")
(PUNCT ",")
(ID "_setlinkpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s %r at %#x>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the TarInfo's attributes as a dictionary.\n        ")
(NEWLINE)
(ID "info")
(PUNCT "=")
(PUNCT "{")
(LIT "name")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "mode")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "&")
(LIT 4095)
(PUNCT ",")
(LIT "uid")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "uid")
(PUNCT ",")
(LIT "gid")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "gid")
(PUNCT ",")
(LIT "size")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ",")
(LIT "mtime")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "mtime")
(PUNCT ",")
(LIT "chksum")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "chksum")
(PUNCT ",")
(LIT "type")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT ",")
(LIT "linkname")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "linkname")
(PUNCT ",")
(LIT "uname")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "uname")
(PUNCT ",")
(LIT "gname")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "gname")
(PUNCT ",")
(LIT "devmajor")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "devmajor")
(PUNCT ",")
(LIT "devminor")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "devminor")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "info")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(PUNCT "==")
(ID "DIRTYPE")
(KEYWORD and)
(KEYWORD not)
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "+=")
(LIT "/")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "info")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tobuf")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "format")
(PUNCT "=")
(ID "DEFAULT_FORMAT")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(ID "ENCODING")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogateescape")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tar header as a string of 512 byte blocks.\n        ")
(NEWLINE)
(ID "info")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "format")
(PUNCT "==")
(ID "USTAR_FORMAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "create_ustar_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "format")
(PUNCT "==")
(ID "GNU_FORMAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "create_gnu_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "format")
(PUNCT "==")
(ID "PAX_FORMAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "create_pax_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid format")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "create_ustar_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "info")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the object as a ustar header block.\n        ")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "magic")
(PUNCT "]")
(PUNCT "=")
(ID "POSIX_MAGIC")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "linkname")
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(ID "LENGTH_LINK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "linkname is too long")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(ID "LENGTH_NAME")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "[")
(LIT "prefix")
(PUNCT "]")
(PUNCT ",")
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_posix_split_name")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "USTAR_FORMAT")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_gnu_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "info")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the object as a GNU header block sequence.\n        ")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "magic")
(PUNCT "]")
(PUNCT "=")
(ID "GNU_MAGIC")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "linkname")
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(ID "LENGTH_LINK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_create_gnu_long_header")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "linkname")
(PUNCT "]")
(PUNCT ",")
(ID "GNUTYPE_LONGLINK")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(ID "LENGTH_NAME")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_create_gnu_long_header")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ",")
(ID "GNUTYPE_LONGNAME")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "buf")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_create_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "GNU_FORMAT")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_pax_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "info")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the object as a ustar header block. If it cannot be\n           represented this way, prepend a pax extended header sequence\n           with supplement information.\n        ")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "magic")
(PUNCT "]")
(PUNCT "=")
(ID "POSIX_MAGIC")
(NEWLINE)
(ID "pax_headers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "hname")
(PUNCT ",")
(ID "length")
(KEYWORD in)
(PUNCT "(")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(ID "LENGTH_NAME")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "linkname")
(PUNCT ",")
(LIT "linkpath")
(PUNCT ",")
(ID "LENGTH_LINK")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "uname")
(PUNCT ",")
(LIT "uname")
(PUNCT ",")
(LIT 32)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "gname")
(PUNCT ",")
(LIT "gname")
(PUNCT ",")
(LIT 32)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hname")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pax_headers")
(PUNCT "[")
(ID "hname")
(PUNCT "]")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(ID "length")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pax_headers")
(PUNCT "[")
(ID "hname")
(PUNCT "]")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "digits")
(KEYWORD in)
(PUNCT "(")
(PUNCT "(")
(LIT "uid")
(PUNCT ",")
(LIT 8)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "gid")
(PUNCT ",")
(LIT 8)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "size")
(PUNCT ",")
(LIT 12)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "mtime")
(PUNCT ",")
(LIT 12)
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "val")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "val")
(PUNCT "<")
(LIT 8)
(PUNCT "**")
(PUNCT "(")
(ID "digits")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pax_headers")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(ID "info")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_create_pax_generic_header")
(PUNCT "(")
(ID "pax_headers")
(PUNCT ",")
(ID "XHDTYPE")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "buf")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_create_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "USTAR_FORMAT")
(PUNCT ",")
(LIT "ascii")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "create_pax_global_header")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the object as a pax global header block sequence.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "_create_pax_generic_header")
(PUNCT "(")
(ID "pax_headers")
(PUNCT ",")
(ID "XGLTYPE")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_posix_split_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Split a name longer than 100 chars into a prefix\n           and a name part.\n        ")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(PUNCT ":")
(ID "LENGTH_PREFIX")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "prefix")
(KEYWORD and)
(ID "prefix")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "/")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "prefix")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "prefix")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "prefix")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ">")
(ID "LENGTH_NAME")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "name is too long")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "prefix")
(PUNCT ",")
(ID "name")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_create_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a header block. info is a dictionary with file\n           information, format must be one of the *_FORMAT constants.\n        ")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(PUNCT "[")
(ID "stn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 100)
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "mode")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "&")
(LIT 4095)
(PUNCT ",")
(LIT 8)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "uid")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT 8)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "gid")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT 8)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "size")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT 12)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "mtime")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT 12)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(LIT #"        ")
(PUNCT ",")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "type")
(PUNCT ",")
(ID "REGTYPE")
(PUNCT ")")
(PUNCT ",")
(ID "stn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "linkname")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 100)
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ",")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "magic")
(PUNCT ",")
(ID "POSIX_MAGIC")
(PUNCT ")")
(PUNCT ",")
(ID "stn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "uname")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 32)
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ",")
(ID "stn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "gname")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 32)
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "devmajor")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT 8)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "itn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "devminor")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(LIT 8)
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "stn")
(PUNCT "(")
(ID "info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "prefix")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 155)
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "%ds")
(PUNCT "%")
(ID "BLOCKSIZE")
(PUNCT ",")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "chksum")
(PUNCT "=")
(ID "calc_chksums")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(PUNCT "-")
(ID "BLOCKSIZE")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "buf")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 364)
(PUNCT "]")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(LIT "%06o\u0000")
(PUNCT "%")
(ID "chksum")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(ID "buf")
(PUNCT "[")
(PUNCT "-")
(LIT 357)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "staticmethod")
(NEWLINE)
(KEYWORD def)
(ID "_create_payload")
(PUNCT "(")
(ID "payload")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the string payload filled with zero bytes\n           up to the next 512 byte border.\n        ")
(NEWLINE)
(ID "blocks")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "payload")
(PUNCT ")")
(PUNCT ",")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "payload")
(PUNCT "+=")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT "-")
(ID "remainder")
(PUNCT ")")
(PUNCT "*")
(ID "NUL")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "payload")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_create_gnu_long_header")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence\n           for name.\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT "+")
(ID "NUL")
(NEWLINE)
(ID "info")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(LIT "././@LongLink")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "size")
(PUNCT "]")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "magic")
(PUNCT "]")
(PUNCT "=")
(ID "GNU_MAGIC")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "_create_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "USTAR_FORMAT")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT "+")
(ID "cls")
(PUNCT ".")
(ID "_create_payload")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "_create_pax_generic_header")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a POSIX.1-2008 extended or global header sequence\n           that contains a list of keyword, value pairs. The values\n           must be strings.\n        ")
(NEWLINE)
(ID "binary")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD for)
(ID "keyword")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "binary")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "records")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(KEYWORD if)
(ID "binary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "records")
(PUNCT "+=")
(LIT #"21 hdrcharset=BINARY\n")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "keyword")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keyword")
(PUNCT "=")
(ID "keyword")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "binary")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(LIT "surrogateescape")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "keyword")
(PUNCT ")")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "+")
(LIT 3)
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "p")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "l")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(ID "p")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "n")
(NEWLINE)
(DEDENT)
(ID "records")
(PUNCT "+=")
(ID "bytes")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT "+")
(LIT #" ")
(PUNCT "+")
(ID "keyword")
(PUNCT "+")
(LIT #"=")
(PUNCT "+")
(ID "value")
(PUNCT "+")
(LIT #"\n")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(LIT "././@PaxHeader")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "size")
(PUNCT "]")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "records")
(PUNCT ")")
(NEWLINE)
(ID "info")
(PUNCT "[")
(LIT "magic")
(PUNCT "]")
(PUNCT "=")
(ID "POSIX_MAGIC")
(NEWLINE)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "_create_header")
(PUNCT "(")
(ID "info")
(PUNCT ",")
(ID "USTAR_FORMAT")
(PUNCT ",")
(LIT "ascii")
(PUNCT ",")
(LIT "replace")
(PUNCT ")")
(PUNCT "+")
(ID "cls")
(PUNCT ".")
(ID "_create_payload")
(PUNCT "(")
(ID "records")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "frombuf")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "buf")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a TarInfo object from a 512 byte bytes object.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EmptyHeaderError")
(PUNCT "(")
(LIT "empty header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT "!=")
(ID "BLOCKSIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TruncatedHeaderError")
(PUNCT "(")
(LIT "truncated header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "buf")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(ID "NUL")
(PUNCT ")")
(PUNCT "==")
(ID "BLOCKSIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EOFHeaderError")
(PUNCT "(")
(LIT "end of file header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "chksum")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 148)
(PUNCT ":")
(LIT 156)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "chksum")
(KEYWORD not)
(KEYWORD in)
(ID "calc_chksums")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidHeaderError")
(PUNCT "(")
(LIT "bad checksum")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "obj")
(PUNCT "=")
(ID "cls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 100)
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 100)
(PUNCT ":")
(LIT 108)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "uid")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 108)
(PUNCT ":")
(LIT 116)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "gid")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 116)
(PUNCT ":")
(LIT 124)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "size")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 124)
(PUNCT ":")
(LIT 136)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "mtime")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 136)
(PUNCT ":")
(LIT 148)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "chksum")
(PUNCT "=")
(ID "chksum")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "buf")
(PUNCT "[")
(LIT 156)
(PUNCT ":")
(LIT 157)
(PUNCT "]")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "linkname")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 157)
(PUNCT ":")
(LIT 257)
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "uname")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 265)
(PUNCT ":")
(LIT 297)
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "gname")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 297)
(PUNCT ":")
(LIT 329)
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "devmajor")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 329)
(PUNCT ":")
(LIT 337)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "devminor")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 337)
(PUNCT ":")
(LIT 345)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 345)
(PUNCT ":")
(LIT 500)
(PUNCT "]")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "obj")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "AREGTYPE")
(KEYWORD and)
(ID "obj")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "DIRTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "GNUTYPE_SPARSE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "=")
(LIT 386)
(NEWLINE)
(ID "structs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(ID "pos")
(PUNCT "+")
(LIT 12)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "numbytes")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(ID "pos")
(PUNCT "+")
(LIT 12)
(PUNCT ":")
(ID "pos")
(PUNCT "+")
(LIT 24)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "structs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "offset")
(PUNCT ",")
(ID "numbytes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "+=")
(LIT 24)
(NEWLINE)
(DEDENT)
(ID "isextended")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 482)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "origsize")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 483)
(PUNCT ":")
(LIT 495)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "_sparse_structs")
(PUNCT "=")
(PUNCT "(")
(ID "structs")
(PUNCT ",")
(ID "isextended")
(PUNCT ",")
(ID "origsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "obj")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "obj")
(PUNCT ".")
(ID "name")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "prefix")
(KEYWORD and)
(ID "obj")
(PUNCT ".")
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "GNU_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "prefix")
(PUNCT "+")
(LIT "/")
(PUNCT "+")
(ID "obj")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromtarfile")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the next TarInfo object from TarFile object\n           tarfile.\n        ")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "frombuf")
(PUNCT "(")
(ID "buf")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "obj")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "BLOCKSIZE")
(NEWLINE)
(KEYWORD return)
(ID "obj")
(PUNCT ".")
(ID "_proc_member")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_member")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Choose the right processing method depending on\n           the type and call it.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD in)
(PUNCT "(")
(ID "GNUTYPE_LONGNAME")
(PUNCT ",")
(ID "GNUTYPE_LONGLINK")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_proc_gnulong")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "GNUTYPE_SPARSE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_proc_sparse")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD in)
(PUNCT "(")
(ID "XHDTYPE")
(PUNCT ",")
(ID "XGLTYPE")
(PUNCT ",")
(ID "SOLARIS_XHDTYPE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_proc_pax")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_proc_builtin")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_proc_builtin")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a builtin type or an unknown type which\n           will be treated as a regular file.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset_data")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "offset_data")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "isreg")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "SUPPORTED_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_block")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tarfile")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "offset")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_apply_pax_info")
(PUNCT "(")
(ID "tarfile")
(PUNCT ".")
(ID "pax_headers")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_gnulong")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process the blocks that hold a GNU longname\n           or longlink member.\n        ")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_block")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fromtarfile")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "HeaderError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SubsequentHeaderError")
(PUNCT "(")
(LIT "missing or bad subsequent header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "next")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "offset")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "GNUTYPE_LONGNAME")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "GNUTYPE_LONGLINK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next")
(PUNCT ".")
(ID "linkname")
(PUNCT "=")
(ID "nts")
(PUNCT "(")
(ID "buf")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "next")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_sparse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a GNU sparse header plus extra headers.\n        ")
(NEWLINE)
(ID "structs")
(PUNCT ",")
(ID "isextended")
(PUNCT ",")
(ID "origsize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sparse_structs")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_sparse_structs")
(NEWLINE)
(KEYWORD while)
(ID "isextended")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 21)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(ID "pos")
(PUNCT "+")
(LIT 12)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "numbytes")
(PUNCT "=")
(ID "nti")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(ID "pos")
(PUNCT "+")
(LIT 12)
(PUNCT ":")
(ID "pos")
(PUNCT "+")
(LIT 24)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "offset")
(KEYWORD and)
(ID "numbytes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "structs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "offset")
(PUNCT ",")
(ID "numbytes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "+=")
(LIT 24)
(NEWLINE)
(DEDENT)
(ID "isextended")
(PUNCT "=")
(ID "bool")
(PUNCT "(")
(ID "buf")
(PUNCT "[")
(LIT 504)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sparse")
(PUNCT "=")
(ID "structs")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset_data")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tarfile")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "offset_data")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_block")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT "=")
(ID "origsize")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_pax")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an extended or global header as described in\n           POSIX.1-2008.\n        ")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_block")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "XGLTYPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pax_headers")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "pax_headers")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pax_headers")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "pax_headers")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "match")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(LIT #"\\d+ hdrcharset=([^\\n]+)\\n")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pax_headers")
(PUNCT "[")
(LIT "hdrcharset")
(PUNCT "]")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "hdrcharset")
(PUNCT "=")
(ID "pax_headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "hdrcharset")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hdrcharset")
(PUNCT "==")
(LIT "BINARY")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(DEDENT)
(ID "regex")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"(\\d+) ([^=]+)=")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "regex")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "buf")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "length")
(PUNCT ",")
(ID "keyword")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "groups")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "length")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "length")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "buf")
(PUNCT "[")
(ID "match")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(ID "match")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "+")
(ID "length")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "keyword")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decode_pax_field")
(PUNCT "(")
(ID "keyword")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "keyword")
(KEYWORD in)
(ID "PAX_NAME_FIELDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decode_pax_field")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_decode_pax_field")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pax_headers")
(PUNCT "[")
(ID "keyword")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "pos")
(PUNCT "+=")
(ID "length")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fromtarfile")
(PUNCT "(")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "HeaderError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SubsequentHeaderError")
(PUNCT "(")
(LIT "missing or bad subsequent header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "GNU.sparse.map")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_proc_gnusparse_01")
(PUNCT "(")
(ID "next")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "GNU.sparse.size")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_proc_gnusparse_00")
(PUNCT "(")
(ID "next")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "pax_headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "GNU.sparse.major")
(PUNCT ")")
(PUNCT "==")
(LIT "1")
(KEYWORD and)
(ID "pax_headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "GNU.sparse.minor")
(PUNCT ")")
(PUNCT "==")
(LIT "0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_proc_gnusparse_10")
(PUNCT "(")
(ID "next")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD in)
(PUNCT "(")
(ID "XHDTYPE")
(PUNCT ",")
(ID "SOLARIS_XHDTYPE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "next")
(PUNCT ".")
(ID "_apply_pax_info")
(PUNCT "(")
(ID "pax_headers")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "tarfile")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "next")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "offset")
(NEWLINE)
(KEYWORD if)
(LIT "size")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "=")
(ID "next")
(PUNCT ".")
(ID "offset_data")
(NEWLINE)
(KEYWORD if)
(ID "next")
(PUNCT ".")
(ID "isreg")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "next")
(PUNCT ".")
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "SUPPORTED_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "+=")
(ID "next")
(PUNCT ".")
(ID "_block")
(PUNCT "(")
(ID "next")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tarfile")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "offset")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "next")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_gnusparse_00")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "next")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a GNU tar extended sparse header, version 0.0.\n        ")
(NEWLINE)
(ID "offsets")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "match")
(KEYWORD in)
(ID "re")
(PUNCT ".")
(ID "finditer")
(PUNCT "(")
(LIT #"\\d+ GNU.sparse.offset=(\\d+)\\n")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offsets")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "numbytes")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "match")
(KEYWORD in)
(ID "re")
(PUNCT ".")
(ID "finditer")
(PUNCT "(")
(LIT #"\\d+ GNU.sparse.numbytes=(\\d+)\\n")
(PUNCT ",")
(ID "buf")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "numbytes")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "next")
(PUNCT ".")
(ID "sparse")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "zip")
(PUNCT "(")
(ID "offsets")
(PUNCT ",")
(ID "numbytes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_gnusparse_01")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "next")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a GNU tar extended sparse header, version 0.1.\n        ")
(NEWLINE)
(ID "sparse")
(PUNCT "=")
(PUNCT "[")
(ID "int")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "pax_headers")
(PUNCT "[")
(LIT "GNU.sparse.map")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "next")
(PUNCT ".")
(ID "sparse")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "zip")
(PUNCT "(")
(ID "sparse")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "sparse")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_proc_gnusparse_10")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "next")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a GNU tar extended sparse header, version 1.0.\n        ")
(NEWLINE)
(ID "fields")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "sparse")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(ID "fields")
(PUNCT ",")
(ID "buf")
(PUNCT "=")
(ID "buf")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT #"\n")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "fields")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "fields")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "sparse")
(PUNCT ")")
(PUNCT "<")
(ID "fields")
(PUNCT "*")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT #"\n")
(KEYWORD not)
(KEYWORD in)
(ID "buf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "+=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "number")
(PUNCT ",")
(ID "buf")
(PUNCT "=")
(ID "buf")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT #"\n")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "sparse")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "number")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "next")
(PUNCT ".")
(ID "offset_data")
(PUNCT "=")
(ID "tarfile")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "next")
(PUNCT ".")
(ID "sparse")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "zip")
(PUNCT "(")
(ID "sparse")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(ID "sparse")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_apply_pax_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pax_headers")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replace fields with supplemental information from a previous\n           pax extended or global header.\n        ")
(NEWLINE)
(KEYWORD for)
(ID "keyword")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "pax_headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "keyword")
(PUNCT "==")
(LIT "GNU.sparse.name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "path")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "keyword")
(PUNCT "==")
(LIT "GNU.sparse.size")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "size")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "keyword")
(PUNCT "==")
(LIT "GNU.sparse.realsize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "size")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "keyword")
(KEYWORD in)
(ID "PAX_FIELDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "keyword")
(KEYWORD in)
(ID "PAX_NUMBER_FIELDS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "PAX_NUMBER_FIELDS")
(PUNCT "[")
(ID "keyword")
(PUNCT "]")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "keyword")
(PUNCT "==")
(LIT "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "keyword")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT "=")
(ID "pax_headers")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_decode_pax_field")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "encoding")
(PUNCT ",")
(ID "fallback_encoding")
(PUNCT ",")
(ID "fallback_errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Decode a single field from a pax record.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "encoding")
(PUNCT ",")
(LIT "strict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeDecodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "fallback_encoding")
(PUNCT ",")
(ID "fallback_errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_block")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Round up a byte count by BLOCKSIZE and return it,\n           e.g. _block(834) => 1024.\n        ")
(NEWLINE)
(ID "blocks")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "count")
(PUNCT ",")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "blocks")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "blocks")
(PUNCT "*")
(ID "BLOCKSIZE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isreg")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD in)
(ID "REGULAR_TYPES")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isfile")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "isreg")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isdir")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "DIRTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "issym")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "SYMTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "islnk")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "LNKTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ischr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "CHRTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isblk")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "BLKTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isfifo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "FIFOTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "issparse")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "sparse")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isdev")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "type")
(KEYWORD in)
(PUNCT "(")
(ID "CHRTYPE")
(PUNCT ",")
(ID "BLKTYPE")
(PUNCT ",")
(ID "FIFOTYPE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TarFile")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The TarFile Class provides an interface to tar archives.\n    ")
(NEWLINE)
(ID "debug")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "dereference")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "ignore_zeros")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "errorlevel")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "format")
(PUNCT "=")
(ID "DEFAULT_FORMAT")
(NEWLINE)
(ID "encoding")
(PUNCT "=")
(ID "ENCODING")
(NEWLINE)
(ID "errors")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(ID "TarInfo")
(NEWLINE)
(ID "fileobject")
(PUNCT "=")
(ID "ExFileObject")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "format")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "tarinfo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "dereference")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ignore_zeros")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "surrogateescape")
(PUNCT ",")
(ID "pax_headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "errorlevel")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open an (uncompressed) tar archive `name'. `mode' is either 'r' to\n           read from an existing archive, 'a' to append data to an existing\n           file or 'w' to create a new file overwriting an existing one. `mode'\n           defaults to 'r'.\n           If `fileobj' is given, it is used for reading or writing data. If it\n           can be determined, `mode' is overridden by `fileobj's mode.\n           `fileobj' is not closed, when TarFile is closed.\n        ")
(NEWLINE)
(ID "modes")
(PUNCT "=")
(PUNCT "{")
(LIT "r")
(PUNCT ":")
(LIT "rb")
(PUNCT ",")
(LIT "a")
(PUNCT ":")
(LIT "r+b")
(PUNCT ",")
(LIT "w")
(PUNCT ":")
(LIT "wb")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(ID "modes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "mode must be 'r', 'a' or 'w'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "mode")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(ID "modes")
(PUNCT "[")
(ID "mode")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "fileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "==")
(LIT "a")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(LIT "w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(LIT "wb")
(NEWLINE)
(DEDENT)
(ID "fileobj")
(PUNCT "=")
(ID "bltn_open")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "name")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "fileobj")
(PUNCT ",")
(LIT "name")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "fileobj")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "fileobj")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "fileobj")
(PUNCT ",")
(LIT "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_mode")
(PUNCT "=")
(ID "fileobj")
(PUNCT ".")
(ID "mode")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD if)
(ID "name")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT "=")
(ID "fileobj")
(NEWLINE)
(KEYWORD if)
(ID "format")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "=")
(ID "format")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tarinfo")
(PUNCT "=")
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dereference")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "dereference")
(PUNCT "=")
(ID "dereference")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ignore_zeros")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ignore_zeros")
(PUNCT "=")
(ID "ignore_zeros")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "encoding")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT "=")
(ID "encoding")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT "=")
(ID "errors")
(NEWLINE)
(KEYWORD if)
(ID "pax_headers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT "==")
(ID "PAX_FORMAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT "=")
(ID "pax_headers")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "debug")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT "=")
(ID "debug")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "errorlevel")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "errorlevel")
(PUNCT "=")
(ID "errorlevel")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "members")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loaded")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "inodes")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "firstmember")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "firstmember")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "next")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT "==")
(LIT "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarinfo")
(PUNCT ".")
(ID "fromtarfile")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "members")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "EOFHeaderError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "HeaderError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(KEYWORD in)
(LIT "aw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loaded")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarinfo")
(PUNCT ".")
(ID "create_pax_global_header")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pax_headers")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(ID "RECORDSIZE")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open a tar archive for reading, writing or appending. Return\n           an appropriate TarFile class.\n\n           mode:\n           'r' or 'r:*' open for reading with transparent compression\n           'r:'         open for reading exclusively uncompressed\n           'r:gz'       open for reading with gzip compression\n           'r:bz2'      open for reading with bzip2 compression\n           'r:xz'       open for reading with lzma compression\n           'a' or 'a:'  open for appending, creating the file if necessary\n           'w' or 'w:'  open for writing without compression\n           'w:gz'       open for writing with gzip compression\n           'w:bz2'      open for writing with bzip2 compression\n           'w:xz'       open for writing with lzma compression\n\n           'r|*'        open a stream of tar blocks with transparent compression\n           'r|'         open an uncompressed stream of tar blocks for reading\n           'r|gz'       open a gzip compressed stream of tar blocks\n           'r|bz2'      open a bzip2 compressed stream of tar blocks\n           'r|xz'       open an lzma compressed stream of tar blocks\n           'w|'         open an uncompressed stream for writing\n           'w|gz'       open a gzip compressed stream for writing\n           'w|bz2'      open a bzip2 compressed stream for writing\n           'w|xz'       open an lzma compressed stream for writing\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(KEYWORD and)
(KEYWORD not)
(ID "fileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "nothing to open")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "r:*")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "comptype")
(KEYWORD in)
(ID "cls")
(PUNCT ".")
(ID "OPEN_METH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "cls")
(PUNCT ".")
(ID "OPEN_METH")
(PUNCT "[")
(ID "comptype")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "saved_pos")
(PUNCT "=")
(ID "fileobj")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ReadError")
(PUNCT ",")
(ID "CompressionError")
(PUNCT ")")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "saved_pos")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "file could not be opened successfully")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT ":")
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filemode")
(PUNCT ",")
(ID "comptype")
(PUNCT "=")
(ID "mode")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "filemode")
(PUNCT "=")
(ID "filemode")
(KEYWORD or)
(LIT "r")
(NEWLINE)
(ID "comptype")
(PUNCT "=")
(ID "comptype")
(KEYWORD or)
(LIT "tar")
(NEWLINE)
(KEYWORD if)
(ID "comptype")
(KEYWORD in)
(ID "cls")
(PUNCT ".")
(ID "OPEN_METH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "cls")
(PUNCT ".")
(ID "OPEN_METH")
(PUNCT "[")
(ID "comptype")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "unknown compression type %r")
(PUNCT "%")
(ID "comptype")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "func")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "filemode")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "|")
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filemode")
(PUNCT ",")
(ID "comptype")
(PUNCT "=")
(ID "mode")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "|")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "filemode")
(PUNCT "=")
(ID "filemode")
(KEYWORD or)
(LIT "r")
(NEWLINE)
(ID "comptype")
(PUNCT "=")
(ID "comptype")
(KEYWORD or)
(LIT "tar")
(NEWLINE)
(KEYWORD if)
(ID "filemode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "mode must be 'r' or 'w'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stream")
(PUNCT "=")
(ID "_Stream")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "filemode")
(PUNCT ",")
(ID "comptype")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "cls")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "filemode")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "a")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cls")
(PUNCT ".")
(ID "taropen")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "undiscernible mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "taropen")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open uncompressed tar archive name for reading or writing.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "a")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "mode must be 'r', 'a' or 'w'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "gzopen")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "compresslevel")
(PUNCT "=")
(LIT 9)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open gzip compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "mode must be 'r' or 'w'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "gzip")
(NEWLINE)
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ImportError")
(PUNCT ",")
(ID "AttributeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "gzip module is not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT "=")
(ID "gzip")
(PUNCT ".")
(ID "GzipFile")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "+")
(LIT "b")
(PUNCT ",")
(ID "compresslevel")
(PUNCT ",")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "not a gzip file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "taropen")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "not a gzip file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "bz2open")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "compresslevel")
(PUNCT "=")
(LIT 9)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open bzip2 compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "mode must be 'r' or 'w'.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "bz2")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "bz2 module is not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fileobj")
(PUNCT "=")
(ID "bz2")
(PUNCT ".")
(ID "BZ2File")
(PUNCT "(")
(ID "fileobj")
(KEYWORD or)
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "compresslevel")
(PUNCT "=")
(ID "compresslevel")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "taropen")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "not a bzip2 file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "xzopen")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT "r")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "preset")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Open lzma compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "mode must be 'r' or 'w'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "lzma")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompressionError")
(PUNCT "(")
(LIT "lzma module is not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "fileobj")
(PUNCT "=")
(ID "lzma")
(PUNCT ".")
(ID "LZMAFile")
(PUNCT "(")
(ID "fileobj")
(KEYWORD or)
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "preset")
(PUNCT "=")
(ID "preset")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "taropen")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "lzma")
(PUNCT ".")
(ID "LZMAError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mode")
(PUNCT "==")
(LIT "r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "not an lzma file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD return)
(ID "t")
(NEWLINE)
(DEDENT)
(ID "OPEN_METH")
(PUNCT "=")
(PUNCT "{")
(LIT "tar")
(PUNCT ":")
(LIT "taropen")
(PUNCT ",")
(LIT "gz")
(PUNCT ":")
(LIT "gzopen")
(PUNCT ",")
(LIT "bz2")
(PUNCT ":")
(LIT "bz2open")
(PUNCT ",")
(LIT "xz")
(PUNCT ":")
(LIT "xzopen")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the TarFile. In write-mode, two finishing zero blocks are\n           appended to the archive.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "mode")
(KEYWORD in)
(LIT "aw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "NUL")
(PUNCT "*")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "+=")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "blocks")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT ",")
(ID "RECORDSIZE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "NUL")
(PUNCT "*")
(PUNCT "(")
(ID "RECORDSIZE")
(PUNCT "-")
(ID "remainder")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmember")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a TarInfo object for member `name'. If `name' can not be\n           found in the archive, KeyError is raised. If a member occurs more\n           than once in the archive, its last occurrence is assumed to be the\n           most up-to-date version.\n        ")
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getmember")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "filename %r not found")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmembers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the members of the archive as a list of TarInfo objects. The\n           list has the same order as the members in the archive.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_loaded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_load")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "members")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnames")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the members of the archive as a list of their names. It has\n           the same order as the list returned by getmembers().\n        ")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(KEYWORD for)
(ID "tarinfo")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "getmembers")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gettarinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a TarInfo object for either the file `name' or the file\n           object `fileobj' (using os.fstat on its file descriptor). You can\n           modify some of the TarInfo's attributes before you add it using\n           addfile(). If given, `arcname' specifies an alternative name for the\n           file in the archive.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(LIT "aw")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "fileobj")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "arcname")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(ID "drv")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "arcname")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "arcname")
(PUNCT "=")
(ID "arcname")
(PUNCT ".")
(ID "lstrip")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarinfo")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "tarfile")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "lstat")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "dereference")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "statres")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "lstat")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "statres")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "stat")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "statres")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "fileobj")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "linkname")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "stmd")
(PUNCT "=")
(ID "statres")
(PUNCT ".")
(ID "st_mode")
(NEWLINE)
(KEYWORD if)
(ID "stat")
(PUNCT ".")
(ID "S_ISREG")
(PUNCT "(")
(ID "stmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "inode")
(PUNCT "=")
(PUNCT "(")
(ID "statres")
(PUNCT ".")
(ID "st_ino")
(PUNCT ",")
(ID "statres")
(PUNCT ".")
(ID "st_dev")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "dereference")
(KEYWORD and)
(ID "statres")
(PUNCT ".")
(ID "st_nlink")
(PUNCT ">")
(LIT 1)
(KEYWORD and)
(ID "inode")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "inodes")
(KEYWORD and)
(ID "arcname")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "inodes")
(PUNCT "[")
(ID "inode")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "LNKTYPE")
(NEWLINE)
(ID "linkname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "inodes")
(PUNCT "[")
(ID "inode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "REGTYPE")
(NEWLINE)
(KEYWORD if)
(ID "inode")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "inodes")
(PUNCT "[")
(ID "inode")
(PUNCT "]")
(PUNCT "=")
(ID "arcname")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "stat")
(PUNCT ".")
(ID "S_ISDIR")
(PUNCT "(")
(ID "stmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "DIRTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stat")
(PUNCT ".")
(ID "S_ISFIFO")
(PUNCT "(")
(ID "stmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "FIFOTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stat")
(PUNCT ".")
(ID "S_ISLNK")
(PUNCT "(")
(ID "stmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "SYMTYPE")
(NEWLINE)
(ID "linkname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "readlink")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stat")
(PUNCT ".")
(ID "S_ISCHR")
(PUNCT "(")
(ID "stmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "CHRTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "stat")
(PUNCT ".")
(ID "S_ISBLK")
(PUNCT "(")
(ID "stmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "BLKTYPE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "arcname")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(ID "stmd")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "uid")
(PUNCT "=")
(ID "statres")
(PUNCT ".")
(ID "st_uid")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "gid")
(PUNCT "=")
(ID "statres")
(PUNCT ".")
(ID "st_gid")
(NEWLINE)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(ID "REGTYPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT "=")
(ID "statres")
(PUNCT ".")
(ID "st_size")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "mtime")
(PUNCT "=")
(ID "statres")
(PUNCT ".")
(ID "st_mtime")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "type")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT "=")
(ID "linkname")
(NEWLINE)
(KEYWORD if)
(ID "pwd")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "uname")
(PUNCT "=")
(ID "pwd")
(PUNCT ".")
(ID "getpwuid")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "uid")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "grp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "gname")
(PUNCT "=")
(ID "grp")
(PUNCT ".")
(ID "getgrgid")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "gid")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "type")
(KEYWORD in)
(PUNCT "(")
(ID "CHRTYPE")
(PUNCT ",")
(ID "BLKTYPE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "major")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "minor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "devmajor")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "major")
(PUNCT "(")
(ID "statres")
(PUNCT ".")
(ID "st_rdev")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "devminor")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "minor")
(PUNCT "(")
(ID "statres")
(PUNCT ".")
(ID "st_rdev")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print a table of contents to sys.stdout. If `verbose' is False, only\n           the names of the members are printed. If it is True, an `ls -l'-like\n           output is produced.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "tarinfo")
(KEYWORD in)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_safe_print")
(PUNCT "(")
(ID "stat")
(PUNCT ".")
(ID "filemode")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "mode")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_safe_print")
(PUNCT "(")
(LIT "%s/%s")
(PUNCT "%")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "uname")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "uid")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "gname")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "gid")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "ischr")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "isblk")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_safe_print")
(PUNCT "(")
(LIT "%10s")
(PUNCT "%")
(PUNCT "(")
(LIT "%d,%d")
(PUNCT "%")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "devmajor")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "devminor")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_safe_print")
(PUNCT "(")
(LIT "%10d")
(PUNCT "%")
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_safe_print")
(PUNCT "(")
(LIT "%d-%02d-%02d %02d:%02d:%02d")
(PUNCT "%")
(ID "time")
(PUNCT ".")
(ID "localtime")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "mtime")
(PUNCT ")")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_safe_print")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT "+")
(PUNCT "(")
(LIT "/")
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(PUNCT ")")
(KEYWORD else)
(LIT "")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_safe_print")
(PUNCT "(")
(LIT "-> ")
(PUNCT "+")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "islnk")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_safe_print")
(PUNCT "(")
(LIT "link to ")
(PUNCT "+")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "arcname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "recursive")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "exclude")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "filter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add the file `name' to the archive. `name' may be any type of file\n           (directory, fifo, symbolic link, etc.). If given, `arcname'\n           specifies an alternative name for the file in the archive.\n           Directories are added recursively by default. This can be avoided by\n           setting `recursive' to False. `exclude' is a function that should\n           return True for each filename to be excluded. `filter' is a function\n           that expects a TarInfo object argument and returns the changed\n           TarInfo object, if it returns None the TarInfo object will be\n           excluded from the archive.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(LIT "aw")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "arcname")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arcname")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "exclude")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "use the filter argument instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exclude")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "tarfile: Excluded %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "tarfile: Skipped %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "gettarinfo")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "arcname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "tarfile: Unsupported type %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "filter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "filter")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "tarfile: Excluded %r")
(PUNCT "%")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "isreg")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "bltn_open")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addfile")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addfile")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "recursive")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "arcname")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ",")
(ID "recursive")
(PUNCT ",")
(ID "exclude")
(PUNCT ",")
(ID "filter")
(PUNCT "=")
(ID "filter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addfile")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "addfile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "fileobj")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add the TarInfo object `tarinfo' to the archive. If `fileobj' is\n           given, tarinfo.size bytes are read from it and added to the archive.\n           You can create TarInfo objects using gettarinfo().\n           On Windows platforms, `fileobj' should always be opened with mode\n           'rb' to avoid irritation about the file size.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(LIT "aw")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "tarinfo")
(PUNCT ".")
(ID "tobuf")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "format")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "fileobj")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "copyfileobj")
(PUNCT "(")
(ID "fileobj")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "blocks")
(PUNCT ",")
(ID "remainder")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT ",")
(ID "BLOCKSIZE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "remainder")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "NUL")
(PUNCT "*")
(PUNCT "(")
(ID "BLOCKSIZE")
(PUNCT "-")
(ID "remainder")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "blocks")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "+=")
(ID "blocks")
(PUNCT "*")
(ID "BLOCKSIZE")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "members")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "extractall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(LIT ".")
(PUNCT ",")
(ID "members")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. `path' specifies a different directory\n           to extract to. `members' is optional and must be a subset of the\n           list returned by getmembers().\n        ")
(NEWLINE)
(ID "directories")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "members")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "members")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "tarinfo")
(KEYWORD in)
(ID "members")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "directories")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(ID "copy")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT ".")
(ID "mode")
(PUNCT "=")
(LIT 448)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "extract")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "set_attrs")
(PUNCT "=")
(KEYWORD not)
(ID "tarinfo")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "directories")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "a")
(PUNCT ":")
(ID "a")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "directories")
(PUNCT ".")
(ID "reverse")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "tarinfo")
(KEYWORD in)
(ID "directories")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dirpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "chown")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "dirpath")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "utime")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "dirpath")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "dirpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ExtractError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "errorlevel")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "tarfile: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "extract")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "member")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(LIT "")
(PUNCT ",")
(ID "set_attrs")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract a member from the archive to the current working directory,\n           using its full name. Its file information is extracted as accurately\n           as possible. `member' may be a filename or a TarInfo object. You can\n           specify a different directory using `path'. File attributes (owner,\n           mtime, mode) are set unless `set_attrs' is False.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(LIT "r")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "member")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getmember")
(PUNCT "(")
(ID "member")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "member")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "islnk")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT ".")
(ID "_link_target")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_extract_member")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "set_attrs")
(PUNCT "=")
(ID "set_attrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "errorlevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "filename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "tarfile: %s")
(PUNCT "%")
(ID "e")
(PUNCT ".")
(ID "strerror")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "tarfile: %s %r")
(PUNCT "%")
(PUNCT "(")
(ID "e")
(PUNCT ".")
(ID "strerror")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ExtractError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "errorlevel")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "tarfile: %s")
(PUNCT "%")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "extractfile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "member")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract a member from the archive as a file object. `member' may be\n           a filename or a TarInfo object. If `member' is a regular file or a\n           link, an io.BufferedReader object is returned. Otherwise, None is\n           returned.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(LIT "r")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "member")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getmember")
(PUNCT "(")
(ID "member")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "member")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "isreg")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "SUPPORTED_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "fileobject")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "islnk")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ",")
(ID "_Stream")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StreamError")
(PUNCT "(")
(LIT "cannot extract (sym)link as file object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "extractfile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_find_link_target")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_extract_member")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ",")
(ID "set_attrs")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extract the TarInfo object tarinfo to a physical\n           file called targetpath.\n        ")
(NEWLINE)
(ID "targetpath")
(PUNCT "=")
(ID "targetpath")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT "/")
(PUNCT ")")
(NEWLINE)
(ID "targetpath")
(PUNCT "=")
(ID "targetpath")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "/")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(NEWLINE)
(ID "upperdirs")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "upperdirs")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "upperdirs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "makedirs")
(PUNCT "(")
(ID "upperdirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "islnk")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "%s -> %s")
(PUNCT "%")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "isreg")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makedir")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "isfifo")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makefifo")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "ischr")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "isblk")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makedev")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "islnk")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makelink")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tarinfo")
(PUNCT ".")
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "SUPPORTED_TYPES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makeunknown")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "set_attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "chown")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "utime")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "makedir")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a directory called targetpath.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(LIT 448)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "FileExistsError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "makefile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a file called targetpath.\n        ")
(NEWLINE)
(ID "source")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fileobj")
(NEWLINE)
(ID "source")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "offset_data")
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "bltn_open")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(KEYWORD as)
(ID "target")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "sparse")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "offset")
(PUNCT ",")
(ID "size")
(KEYWORD in)
(ID "tarinfo")
(PUNCT ".")
(ID "sparse")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "target")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(ID "copyfileobj")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "target")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "copyfileobj")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "target")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "target")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "size")
(PUNCT ")")
(NEWLINE)
(ID "target")
(PUNCT ".")
(ID "truncate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "makeunknown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a file from a TarInfo object with an unknown type\n           at targetpath.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "tarfile: Unknown file type %r, ")
(LIT "extracted as regular file.")
(PUNCT "%")
(ID "tarinfo")
(PUNCT ".")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makefifo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a fifo called targetpath.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "mkfifo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "mkfifo")
(PUNCT "(")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ExtractError")
(PUNCT "(")
(LIT "fifo not supported by system")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "makedev")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a character or block device called targetpath.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "mknod")
(PUNCT ")")
(KEYWORD or)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "makedev")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ExtractError")
(PUNCT "(")
(LIT "special devices not supported by system")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "mode")
(PUNCT "=")
(ID "tarinfo")
(PUNCT ".")
(ID "mode")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "isblk")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "|=")
(ID "stat")
(PUNCT ".")
(ID "S_IFBLK")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "|=")
(ID "stat")
(PUNCT ".")
(ID "S_IFCHR")
(NEWLINE)
(DEDENT)
(ID "os")
(PUNCT ".")
(ID "mknod")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "makedev")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "devmajor")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "devminor")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makelink")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Make a (symbolic) link called targetpath. If it cannot be created\n          (platform limitation), we try to make a copy of the referenced file\n          instead of a link.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "_link_target")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "link")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "_link_target")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_extract_member")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_find_link_target")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "symlink_exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_extract_member")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_find_link_target")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ExtractError")
(PUNCT "(")
(LIT "unable to resolve link inside archive")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "chown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set owner of targetpath according to tarinfo.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "pwd")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "geteuid")
(PUNCT ")")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "geteuid")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(ID "grp")
(PUNCT ".")
(ID "getgrnam")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "gname")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(ID "tarinfo")
(PUNCT ".")
(ID "gid")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(ID "pwd")
(PUNCT ".")
(ID "getpwnam")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "uname")
(PUNCT ")")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "u")
(PUNCT "=")
(ID "tarinfo")
(PUNCT ".")
(ID "uid")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "lchown")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "lchown")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(ID "u")
(PUNCT ",")
(ID "g")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chown")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(ID "u")
(PUNCT ",")
(ID "g")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ExtractError")
(PUNCT "(")
(LIT "could not change owner")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "chmod")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set file permissions of targetpath according to tarinfo.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "chmod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "chmod")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ExtractError")
(PUNCT "(")
(LIT "could not change mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "utime")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ",")
(ID "targetpath")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set modification time of targetpath according to tarinfo.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "utime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "utime")
(PUNCT "(")
(ID "targetpath")
(PUNCT ",")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "mtime")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "mtime")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ExtractError")
(PUNCT "(")
(LIT "could not change modification time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the next member of the archive as a TarInfo object, when\n           TarFile is opened for reading. Return None if there is no more\n           available.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(LIT "ra")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "firstmember")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "firstmember")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "firstmember")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "m")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(ID "tarinfo")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarinfo")
(PUNCT ".")
(ID "fromtarfile")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "EOFHeaderError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ignore_zeros")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "0x%X: %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "+=")
(ID "BLOCKSIZE")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "InvalidHeaderError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ignore_zeros")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dbg")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "0x%X: %s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "+=")
(ID "BLOCKSIZE")
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "EmptyHeaderError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(LIT "empty file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TruncatedHeaderError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "offset")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "SubsequentHeaderError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ReadError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "members")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loaded")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getmember")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "tarinfo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "normalize")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find an archive member by name from bottom to top.\n           If tarinfo is given, it is used as the starting point.\n        ")
(NEWLINE)
(ID "members")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getmembers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "members")
(PUNCT "=")
(ID "members")
(PUNCT "[")
(PUNCT ":")
(ID "members")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "normalize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "member")
(KEYWORD in)
(ID "reversed")
(PUNCT "(")
(ID "members")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "normalize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "member_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "member")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "member_name")
(PUNCT "=")
(ID "member")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(ID "member_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "member")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_load")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read through the entire archive file and look for readable\n           members.\n        ")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "next")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_loaded")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check if TarFile is still open, and if the operation's mode\n           corresponds to TarFile's mode.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "%s is closed")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "mode")
(KEYWORD not)
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "bad operation for mode %r")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_find_link_target")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the target member of a symlink or hardlink member in the\n           archive.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "tarinfo")
(PUNCT ".")
(ID "issym")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkname")
(PUNCT "=")
(LIT "/")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "filter")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "tarinfo")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "limit")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "linkname")
(PUNCT "=")
(ID "tarinfo")
(PUNCT ".")
(ID "linkname")
(NEWLINE)
(ID "limit")
(PUNCT "=")
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(ID "member")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getmember")
(PUNCT "(")
(ID "linkname")
(PUNCT ",")
(ID "tarinfo")
(PUNCT "=")
(ID "limit")
(PUNCT ",")
(ID "normalize")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "member")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "linkname %r not found")
(PUNCT "%")
(ID "linkname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "member")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Provide an iterator object.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loaded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "iter")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "members")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "TarIter")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_dbg")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write debugging output to sys.stderr.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "level")
(PUNCT "<=")
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_check")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "traceback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_extfileobj")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fileobj")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TarIter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Iterator Class.\n\n       for tarinfo in TarFile(...):\n           suite...\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tarfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a TarIter object.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT "=")
(ID "tarfile")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return iterator object.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__next__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the next item using TarFile's next() method.\n           When all members have been read, set TarFile as _loaded.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "firstmember")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "next")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "members")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "members")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "_loaded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tarinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "next")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "tarinfo")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tarfile")
(PUNCT ".")
(ID "_loaded")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD raise)
(ID "StopIteration")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "StopIteration")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "tarinfo")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_tarfile")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TarError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "bltn_open")
(PUNCT "=")
(ID "open")
(NEWLINE)
(ID "open")
(PUNCT "=")
(ID "TarFile")
(PUNCT ".")
(ID "open")
(NEWLINE)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(ID "description")
(PUNCT "=")
(LIT "A simple command line interface for tarfile module.")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(ID "description")
(PUNCT "=")
(ID "description")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-v")
(PUNCT ",")
(LIT "--verbose")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Verbose output")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "add_mutually_exclusive_group")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-l")
(PUNCT ",")
(LIT "--list")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "<tarfile>")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Show listing of a tarfile")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-e")
(PUNCT ",")
(LIT "--extract")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "+")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(PUNCT "(")
(LIT "<tarfile>")
(PUNCT ",")
(LIT "<output_dir>")
(PUNCT ")")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Extract tarfile into target dir")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-c")
(PUNCT ",")
(LIT "--create")
(PUNCT ",")
(ID "nargs")
(PUNCT "=")
(LIT "+")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(PUNCT "(")
(LIT "<name>")
(PUNCT ",")
(LIT "<file>")
(PUNCT ")")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Create tarfile from sources")
(PUNCT ")")
(NEWLINE)
(ID "group")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-t")
(PUNCT ",")
(LIT "--test")
(PUNCT ",")
(ID "metavar")
(PUNCT "=")
(LIT "<tarfile>")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "Test if a tarfile is valid")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "test")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "test")
(NEWLINE)
(KEYWORD if)
(ID "is_tarfile")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(LIT "r")
(PUNCT ")")
(KEYWORD as)
(ID "tar")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tar")
(PUNCT ".")
(ID "getmembers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "tar")
(PUNCT ".")
(ID "getmembers")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "{!r} is a tar archive.")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "{!r} is not a tar archive.\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT ".")
(ID "list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "list")
(NEWLINE)
(KEYWORD if)
(ID "is_tarfile")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "TarFile")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(LIT "r:*")
(PUNCT ")")
(KEYWORD as)
(ID "tf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tf")
(PUNCT ".")
(ID "list")
(PUNCT "(")
(ID "verbose")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "{!r} is not a tar archive.\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT ".")
(ID "extract")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "extract")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "extract")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "curdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "extract")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT ",")
(ID "curdir")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "extract")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "parser")
(PUNCT ".")
(ID "format_help")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "is_tarfile")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "TarFile")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(LIT "r:*")
(PUNCT ")")
(KEYWORD as)
(ID "tf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tf")
(PUNCT ".")
(ID "extractall")
(PUNCT "(")
(ID "path")
(PUNCT "=")
(ID "curdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "curdir")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "{!r} file is extracted.")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "{!r} file is extracted ")
(LIT "into {!r} directory.")
(PUNCT ")")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "curdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "{!r} is not a tar archive.\n")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "args")
(PUNCT ".")
(ID "create")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tar_name")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "create")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "_")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "tar_name")
(PUNCT ")")
(NEWLINE)
(ID "compressions")
(PUNCT "=")
(PUNCT "{")
(LIT "gz")
(PUNCT ":")
(LIT "gz")
(PUNCT ",")
(LIT "tgz")
(PUNCT ":")
(LIT "gz")
(PUNCT ",")
(LIT "xz")
(PUNCT ":")
(LIT "xz")
(PUNCT ",")
(LIT "txz")
(PUNCT ":")
(LIT "xz")
(PUNCT ",")
(LIT "bz2")
(PUNCT ":")
(LIT "bz2")
(PUNCT ",")
(LIT "tbz")
(PUNCT ":")
(LIT "bz2")
(PUNCT ",")
(LIT "tbz2")
(PUNCT ":")
(LIT "bz2")
(PUNCT ",")
(LIT "tb2")
(PUNCT ":")
(LIT "bz2")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "tar_mode")
(PUNCT "=")
(LIT "w:")
(PUNCT "+")
(ID "compressions")
(PUNCT "[")
(ID "ext")
(PUNCT "]")
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "compressions")
(KEYWORD else)
(LIT "w")
(NEWLINE)
(ID "tar_files")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "create")
(NEWLINE)
(KEYWORD with)
(ID "TarFile")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "tar_name")
(PUNCT ",")
(ID "tar_mode")
(PUNCT ")")
(KEYWORD as)
(ID "tf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "file_name")
(KEYWORD in)
(ID "tar_files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tf")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "file_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "{!r} file created.")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "tar_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "parser")
(PUNCT ".")
(ID "format_help")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
