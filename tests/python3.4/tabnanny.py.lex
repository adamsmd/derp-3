(LIT "The Tab Nanny despises ambiguous indentation.  She knows no mercy.\n\ntabnanny -- Detection of ambiguous indentation\n\nFor the time being this module is intended to be called as a script.\nHowever it is possible to import it into an IDE and use the function\ncheck() described below.\n\nWarning: The API provided by this module is likely to change in future\nreleases; such changes may not be backward compatible.\n")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "6")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "getopt")
(NEWLINE)
(KEYWORD import)
(ID "tokenize")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "tokenize")
(PUNCT ",")
(LIT "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "tokenize.NL doesn't exist -- tokenize module too old")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "check")
(PUNCT ",")
(LIT "NannyNag")
(PUNCT ",")
(LIT "process_tokens")
(PUNCT "]")
(NEWLINE)
(ID "verbose")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "filename_only")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD def)
(ID "errprint")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sep")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "sep")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sep")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "verbose")
(PUNCT ",")
(ID "filename_only")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "qv")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errprint")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "o")
(PUNCT ",")
(ID "a")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-q")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filename_only")
(PUNCT "=")
(ID "filename_only")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "o")
(PUNCT "==")
(LIT "-v")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errprint")
(PUNCT "(")
(LIT "Usage:")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "[-v] file_or_directory ...")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NannyNag")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Raised by tokeneater() if detecting an ambiguous indent.\n    Captured and handled in check().\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lineno")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "lineno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "line")
(PUNCT "=")
(ID "lineno")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_lineno")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "lineno")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_msg")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "msg")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_line")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "line")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "check(file_or_dir)\n\n    If file_or_dir is a directory and not a symbolic link, then recursively\n    descend the directory tree named by file_or_dir, checking all .py files\n    along the way. If file_or_dir is an ordinary Python source file, it is\n    checked for whitespace related problems. The diagnostic messages are\n    written to standard output using the print statement.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%r: listing directory")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "names")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fullname")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(KEYWORD or)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normcase")
(PUNCT "(")
(ID "name")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT "==")
(LIT ".py")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check")
(PUNCT "(")
(ID "fullname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errprint")
(PUNCT "(")
(LIT "%r: I/O Error: %s")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "checking %r ...")
(PUNCT "%")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "process_tokens")
(PUNCT "(")
(ID "tokenize")
(PUNCT ".")
(ID "generate_tokens")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "tokenize")
(PUNCT ".")
(ID "TokenError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errprint")
(PUNCT "(")
(LIT "%r: Token Error: %s")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndentationError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errprint")
(PUNCT "(")
(LIT "%r: Indentation Error: %s")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NannyNag")
(KEYWORD as)
(ID "nag")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "badline")
(PUNCT "=")
(ID "nag")
(PUNCT ".")
(ID "get_lineno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "nag")
(PUNCT ".")
(ID "get_line")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%r: *** Line %d: trouble in tab city! ***")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "badline")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "offending line: %r")
(PUNCT "%")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "nag")
(PUNCT ".")
(ID "get_msg")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT " ")
(KEYWORD in)
(ID "file")
(PUNCT ":")
(ID "file")
(PUNCT "=")
(LIT "\"")
(PUNCT "+")
(ID "file")
(PUNCT "+")
(LIT "\"")
(NEWLINE)
(KEYWORD if)
(ID "filename_only")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "print")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "badline")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "%r: Clean bill of health.")
(PUNCT "%")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Whitespace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "S")
(PUNCT ",")
(ID "T")
(PUNCT "=")
(LIT " \t")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ws")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "raw")
(PUNCT "=")
(ID "ws")
(NEWLINE)
(ID "S")
(PUNCT ",")
(ID "T")
(PUNCT "=")
(ID "Whitespace")
(PUNCT ".")
(ID "S")
(PUNCT ",")
(ID "Whitespace")
(PUNCT ".")
(ID "T")
(NEWLINE)
(ID "count")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "b")
(PUNCT "=")
(ID "n")
(PUNCT "=")
(ID "nt")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "raw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ch")
(PUNCT "==")
(ID "S")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "n")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "b")
(PUNCT "=")
(ID "b")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ch")
(PUNCT "==")
(ID "T")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "n")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "nt")
(PUNCT "=")
(ID "nt")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "b")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count")
(PUNCT "=")
(ID "count")
(PUNCT "+")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(PUNCT "(")
(ID "b")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "count")
(PUNCT "[")
(ID "b")
(PUNCT "]")
(PUNCT "=")
(ID "count")
(PUNCT "[")
(ID "b")
(PUNCT "]")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "b")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "n")
(PUNCT "=")
(ID "n")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "nt")
(PUNCT "=")
(ID "nt")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "norm")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT ",")
(ID "b")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "is_simple")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT "<=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "longest_run_of_spaces")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count")
(PUNCT ",")
(ID "trailing")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "norm")
(NEWLINE)
(KEYWORD return)
(ID "max")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "trailing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "indent_level")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tabsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count")
(PUNCT ",")
(ID "trailing")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "norm")
(NEWLINE)
(ID "il")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "tabsize")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "il")
(PUNCT "=")
(ID "il")
(PUNCT "+")
(ID "i")
(PUNCT "//")
(ID "tabsize")
(PUNCT "*")
(ID "count")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "trailing")
(PUNCT "+")
(ID "tabsize")
(PUNCT "*")
(PUNCT "(")
(ID "il")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "nt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "equal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "norm")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "norm")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "not_equal_witness")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "longest_run_of_spaces")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "other")
(PUNCT ".")
(ID "longest_run_of_spaces")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "a")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "ts")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "n")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT "!=")
(ID "other")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "ts")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ",")
(ID "other")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "a")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "less")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "n")
(PUNCT ">=")
(ID "other")
(PUNCT ".")
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_simple")
(KEYWORD and)
(ID "other")
(PUNCT ".")
(ID "is_simple")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "nt")
(PUNCT "<=")
(ID "other")
(PUNCT ".")
(ID "nt")
(NEWLINE)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "longest_run_of_spaces")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "other")
(PUNCT ".")
(ID "longest_run_of_spaces")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(KEYWORD for)
(ID "ts")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(ID "n")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ">=")
(ID "other")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "not_less_witness")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "longest_run_of_spaces")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "other")
(PUNCT ".")
(ID "longest_run_of_spaces")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "a")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "ts")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "n")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ">=")
(ID "other")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "ts")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ",")
(ID "other")
(PUNCT ".")
(ID "indent_level")
(PUNCT "(")
(ID "ts")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "a")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "format_witnesses")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "firsts")
(PUNCT "=")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "tup")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(KEYWORD for)
(ID "tup")
(KEYWORD in)
(ID "w")
(PUNCT ")")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(LIT "at tab size")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "prefix")
(PUNCT "+")
(LIT "s")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "prefix")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "firsts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "process_tokens")
(PUNCT "(")
(ID "tokens")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "INDENT")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "INDENT")
(NEWLINE)
(ID "DEDENT")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "DEDENT")
(NEWLINE)
(ID "NEWLINE")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "NEWLINE")
(NEWLINE)
(ID "JUNK")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "COMMENT")
(PUNCT ",")
(ID "tokenize")
(PUNCT ".")
(ID "NL")
(NEWLINE)
(ID "indents")
(PUNCT "=")
(PUNCT "[")
(ID "Whitespace")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "check_equal")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(KEYWORD in)
(ID "tokens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(ID "NEWLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_equal")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(ID "INDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_equal")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "thisguy")
(PUNCT "=")
(ID "Whitespace")
(PUNCT "(")
(ID "token")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "less")
(PUNCT "(")
(ID "thisguy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "witness")
(PUNCT "=")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "not_less_witness")
(PUNCT "(")
(ID "thisguy")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "indent not greater e.g. ")
(PUNCT "+")
(ID "format_witnesses")
(PUNCT "(")
(ID "witness")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "NannyNag")
(PUNCT "(")
(ID "start")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "indents")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "thisguy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "type")
(PUNCT "==")
(ID "DEDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_equal")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD del)
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "check_equal")
(KEYWORD and)
(ID "type")
(KEYWORD not)
(KEYWORD in)
(ID "JUNK")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_equal")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "thisguy")
(PUNCT "=")
(ID "Whitespace")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "equal")
(PUNCT "(")
(ID "thisguy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "witness")
(PUNCT "=")
(ID "indents")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "not_equal_witness")
(PUNCT "(")
(ID "thisguy")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "indent not equal e.g. ")
(PUNCT "+")
(ID "format_witnesses")
(PUNCT "(")
(ID "witness")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "NannyNag")
(PUNCT "(")
(ID "start")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
