(LIT "Implementation of JSONEncoder\n")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_json")
(KEYWORD import)
(ID "encode_basestring_ascii")
(KEYWORD as)
(ID "c_encode_basestring_ascii")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_encode_basestring_ascii")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_json")
(KEYWORD import)
(ID "make_encoder")
(KEYWORD as)
(ID "c_make_encoder")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_make_encoder")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "ESCAPE")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[\\x00-\\x1f\\\\\"\\b\\f\\n\\r\\t]")
(PUNCT ")")
(NEWLINE)
(ID "ESCAPE_ASCII")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\\\\"]|[^\\ -~])")
(PUNCT ")")
(NEWLINE)
(ID "HAS_UTF8")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT #"[\200-\377]")
(PUNCT ")")
(NEWLINE)
(ID "ESCAPE_DCT")
(PUNCT "=")
(PUNCT "{")
(LIT "\\")
(PUNCT ":")
(LIT "\\\\")
(PUNCT ",")
(LIT "\"")
(PUNCT ":")
(LIT "\\\"")
(PUNCT ",")
(LIT "\b")
(PUNCT ":")
(LIT "\\b")
(PUNCT ",")
(LIT "\f")
(PUNCT ":")
(LIT "\\f")
(PUNCT ",")
(LIT "\n")
(PUNCT ":")
(LIT "\\n")
(PUNCT ",")
(LIT "\r")
(PUNCT ":")
(LIT "\\r")
(PUNCT ",")
(LIT "\t")
(PUNCT ":")
(LIT "\\t")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 32)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ESCAPE_DCT")
(PUNCT ".")
(ID "setdefault")
(PUNCT "(")
(ID "chr")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(PUNCT ",")
(LIT "\\u{0:04x}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "INFINITY")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(LIT "inf")
(PUNCT ")")
(NEWLINE)
(ID "FLOAT_REPR")
(PUNCT "=")
(ID "repr")
(NEWLINE)
(KEYWORD def)
(ID "encode_basestring")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a JSON representation of a Python string\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "match")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ESCAPE_DCT")
(PUNCT "[")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "\"")
(PUNCT "+")
(ID "ESCAPE")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "replace")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT "+")
(LIT "\"")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "py_encode_basestring_ascii")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return an ASCII-only JSON representation of a Python string\n\n    ")
(NEWLINE)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "match")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ESCAPE_DCT")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT "<")
(LIT 65536)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "\\u{0:04x}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "-=")
(LIT 65536)
(NEWLINE)
(ID "s1")
(PUNCT "=")
(LIT 55296)
(PUNCT "|")
(PUNCT "(")
(PUNCT "(")
(ID "n")
(PUNCT ">>")
(LIT 10)
(PUNCT ")")
(PUNCT "&")
(LIT 1023)
(PUNCT ")")
(NEWLINE)
(ID "s2")
(PUNCT "=")
(LIT 56320)
(PUNCT "|")
(PUNCT "(")
(ID "n")
(PUNCT "&")
(LIT 1023)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "\\u{0:04x}\\u{1:04x}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "s1")
(PUNCT ",")
(ID "s2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "\"")
(PUNCT "+")
(ID "ESCAPE_ASCII")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "replace")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT "+")
(LIT "\"")
(NEWLINE)
(DEDENT)
(ID "encode_basestring_ascii")
(PUNCT "=")
(PUNCT "(")
(ID "c_encode_basestring_ascii")
(KEYWORD or)
(ID "py_encode_basestring_ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "JSONEncoder")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Extensible JSON <http://json.org> encoder for Python data structures.\n\n    Supports the following objects and types by default:\n\n    +-------------------+---------------+\n    | Python            | JSON          |\n    +===================+===============+\n    | dict              | object        |\n    +-------------------+---------------+\n    | list, tuple       | array         |\n    +-------------------+---------------+\n    | str               | string        |\n    +-------------------+---------------+\n    | int, float        | number        |\n    +-------------------+---------------+\n    | True              | true          |\n    +-------------------+---------------+\n    | False             | false         |\n    +-------------------+---------------+\n    | None              | null          |\n    +-------------------+---------------+\n\n    To extend this to recognize other objects, subclass and implement a\n    ``.default()`` method with another method that returns a serializable\n    object for ``o`` if possible, otherwise it should call the superclass\n    implementation (to raise ``TypeError``).\n\n    ")
(NEWLINE)
(ID "item_separator")
(PUNCT "=")
(LIT ", ")
(NEWLINE)
(ID "key_separator")
(PUNCT "=")
(LIT ": ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ensure_ascii")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "check_circular")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "allow_nan")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "separators")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructor for JSONEncoder, with sensible defaults.\n\n        If skipkeys is false, then it is a TypeError to attempt\n        encoding of keys that are not str, int, float or None.  If\n        skipkeys is True, such items are simply skipped.\n\n        If ensure_ascii is true, the output is guaranteed to be str\n        objects with all incoming non-ASCII characters escaped.  If\n        ensure_ascii is false, the output can contain non-ASCII characters.\n\n        If check_circular is true, then lists, dicts, and custom encoded\n        objects will be checked for circular references during encoding to\n        prevent an infinite recursion (which would cause an OverflowError).\n        Otherwise, no such check takes place.\n\n        If allow_nan is true, then NaN, Infinity, and -Infinity will be\n        encoded as such.  This behavior is not JSON specification compliant,\n        but is consistent with most JavaScript based encoders and decoders.\n        Otherwise, it will be a ValueError to encode such floats.\n\n        If sort_keys is true, then the output of dictionaries will be\n        sorted by key; this is useful for regression tests to ensure\n        that JSON serializations can be compared on a day-to-day basis.\n\n        If indent is a non-negative integer, then JSON array\n        elements and object members will be pretty-printed with that\n        indent level.  An indent level of 0 will only insert newlines.\n        None is the most compact representation.\n\n        If specified, separators should be an (item_separator, key_separator)\n        tuple.  The default is (', ', ': ') if *indent* is ``None`` and\n        (',', ': ') otherwise.  To get the most compact JSON representation,\n        you should specify (',', ':') to eliminate whitespace.\n\n        If specified, default is a function that gets called for objects\n        that can't otherwise be serialized.  It should return a JSON encodable\n        version of the object or raise a ``TypeError``.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "skipkeys")
(PUNCT "=")
(ID "skipkeys")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ensure_ascii")
(PUNCT "=")
(ID "ensure_ascii")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "check_circular")
(PUNCT "=")
(ID "check_circular")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "allow_nan")
(PUNCT "=")
(ID "allow_nan")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sort_keys")
(PUNCT "=")
(ID "sort_keys")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "=")
(ID "indent")
(NEWLINE)
(KEYWORD if)
(ID "separators")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "item_separator")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "key_separator")
(PUNCT "=")
(ID "separators")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "indent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "item_separator")
(PUNCT "=")
(LIT ",")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "default")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "default")
(PUNCT "=")
(ID "default")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "default")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "o")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n\n        For example, to support arbitrary iterators, you could\n        implement default like this::\n\n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "repr")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(PUNCT "+")
(LIT " is not JSON serializable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "o")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a JSON string representation of a Python data structure.\n\n        >>> from json.encoder import JSONEncoder\n        >>> JSONEncoder().encode({\"foo\": [\"bar\", \"baz\"]})\n        '{\"foo\": [\"bar\", \"baz\"]}'\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ensure_ascii")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "encode_basestring_ascii")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "encode_basestring")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "chunks")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "iterencode")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "_one_shot")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "chunks")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "chunks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "chunks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "iterencode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "o")
(PUNCT ",")
(ID "_one_shot")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Encode the given object and yield each string\n        representation as available.\n\n        For example::\n\n            for chunk in JSONEncoder().iterencode(bigobject):\n                mysocket.write(chunk)\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "check_circular")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "markers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "markers")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "ensure_ascii")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_encoder")
(PUNCT "=")
(ID "encode_basestring_ascii")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_encoder")
(PUNCT "=")
(ID "encode_basestring")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "floatstr")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "allow_nan")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "allow_nan")
(PUNCT ",")
(ID "_repr")
(PUNCT "=")
(ID "FLOAT_REPR")
(PUNCT ",")
(ID "_inf")
(PUNCT "=")
(ID "INFINITY")
(PUNCT ",")
(ID "_neginf")
(PUNCT "=")
(PUNCT "-")
(ID "INFINITY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "o")
(PUNCT "!=")
(ID "o")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(LIT "NaN")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "o")
(PUNCT "==")
(ID "_inf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(LIT "Infinity")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "o")
(PUNCT "==")
(ID "_neginf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(LIT "-Infinity")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_repr")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "allow_nan")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Out of range float values are not JSON compliant: ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "text")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "_one_shot")
(KEYWORD and)
(ID "c_make_encoder")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "indent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_iterencode")
(PUNCT "=")
(ID "c_make_encoder")
(PUNCT "(")
(ID "markers")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "default")
(PUNCT ",")
(ID "_encoder")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "key_separator")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "item_separator")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sort_keys")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "skipkeys")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "allow_nan")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_iterencode")
(PUNCT "=")
(ID "_make_iterencode")
(PUNCT "(")
(ID "markers")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "default")
(PUNCT ",")
(ID "_encoder")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT ",")
(ID "floatstr")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "key_separator")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "item_separator")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sort_keys")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "skipkeys")
(PUNCT ",")
(ID "_one_shot")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_iterencode")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_make_iterencode")
(PUNCT "(")
(ID "markers")
(PUNCT ",")
(ID "_default")
(PUNCT ",")
(ID "_encoder")
(PUNCT ",")
(ID "_indent")
(PUNCT ",")
(ID "_floatstr")
(PUNCT ",")
(ID "_key_separator")
(PUNCT ",")
(ID "_item_separator")
(PUNCT ",")
(ID "_sort_keys")
(PUNCT ",")
(ID "_skipkeys")
(PUNCT ",")
(ID "_one_shot")
(PUNCT ",")
(ID "ValueError")
(PUNCT "=")
(ID "ValueError")
(PUNCT ",")
(ID "dict")
(PUNCT "=")
(ID "dict")
(PUNCT ",")
(ID "float")
(PUNCT "=")
(ID "float")
(PUNCT ",")
(ID "id")
(PUNCT "=")
(ID "id")
(PUNCT ",")
(ID "int")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "isinstance")
(PUNCT "=")
(ID "isinstance")
(PUNCT ",")
(ID "list")
(PUNCT "=")
(ID "list")
(PUNCT ",")
(ID "str")
(PUNCT "=")
(ID "str")
(PUNCT ",")
(ID "tuple")
(PUNCT "=")
(ID "tuple")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_indent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "_indent")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_indent")
(PUNCT "=")
(LIT " ")
(PUNCT "*")
(ID "_indent")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_iterencode_list")
(PUNCT "(")
(ID "lst")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "lst")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "[]")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "markers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "markerid")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "lst")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "markerid")
(KEYWORD in)
(ID "markers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Circular reference detected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "markers")
(PUNCT "[")
(ID "markerid")
(PUNCT "]")
(PUNCT "=")
(ID "lst")
(NEWLINE)
(DEDENT)
(ID "buf")
(PUNCT "=")
(LIT "[")
(NEWLINE)
(KEYWORD if)
(ID "_indent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_current_indent_level")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "newline_indent")
(PUNCT "=")
(LIT "\n")
(PUNCT "+")
(ID "_indent")
(PUNCT "*")
(ID "_current_indent_level")
(NEWLINE)
(ID "separator")
(PUNCT "=")
(ID "_item_separator")
(PUNCT "+")
(ID "newline_indent")
(NEWLINE)
(ID "buf")
(PUNCT "+=")
(ID "newline_indent")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newline_indent")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "separator")
(PUNCT "=")
(ID "_item_separator")
(NEWLINE)
(DEDENT)
(ID "first")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "lst")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buf")
(PUNCT "=")
(ID "separator")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(PUNCT "+")
(ID "_encoder")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(PUNCT "+")
(LIT "null")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(PUNCT "+")
(LIT "true")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(PUNCT "+")
(LIT "false")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(PUNCT "+")
(ID "_floatstr")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "buf")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "_iterencode_list")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "_iterencode_dict")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "_iterencode")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "chunks")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "newline_indent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_current_indent_level")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD yield)
(LIT "\n")
(PUNCT "+")
(ID "_indent")
(PUNCT "*")
(ID "_current_indent_level")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(LIT "]")
(NEWLINE)
(KEYWORD if)
(ID "markers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "markers")
(PUNCT "[")
(ID "markerid")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_iterencode_dict")
(PUNCT "(")
(ID "dct")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dct")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "{}")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "markers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "markerid")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "dct")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "markerid")
(KEYWORD in)
(ID "markers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Circular reference detected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "markers")
(PUNCT "[")
(ID "markerid")
(PUNCT "]")
(PUNCT "=")
(ID "dct")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(LIT "{")
(NEWLINE)
(KEYWORD if)
(ID "_indent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_current_indent_level")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "newline_indent")
(PUNCT "=")
(LIT "\n")
(PUNCT "+")
(ID "_indent")
(PUNCT "*")
(ID "_current_indent_level")
(NEWLINE)
(ID "item_separator")
(PUNCT "=")
(ID "_item_separator")
(PUNCT "+")
(ID "newline_indent")
(NEWLINE)
(KEYWORD yield)
(ID "newline_indent")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newline_indent")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "item_separator")
(PUNCT "=")
(ID "_item_separator")
(NEWLINE)
(DEDENT)
(ID "first")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "_sort_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "dct")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(KEYWORD lambda)
(ID "kv")
(PUNCT ":")
(ID "kv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "dct")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "_floatstr")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(LIT "true")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(LIT "false")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(LIT "null")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_skipkeys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "key ")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(PUNCT "+")
(LIT " is not a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "item_separator")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "_encoder")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(ID "_key_separator")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_encoder")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "null")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "true")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "false")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "str")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_floatstr")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "_iterencode_list")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "_iterencode_dict")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunks")
(PUNCT "=")
(ID "_iterencode")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "chunks")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "newline_indent")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_current_indent_level")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD yield)
(LIT "\n")
(PUNCT "+")
(ID "_indent")
(PUNCT "*")
(ID "_current_indent_level")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(LIT "}")
(NEWLINE)
(KEYWORD if)
(ID "markers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "markers")
(PUNCT "[")
(ID "markerid")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_iterencode")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_encoder")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "o")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "null")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "o")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "true")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "o")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(LIT "false")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "str")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_floatstr")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "_iterencode_list")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "_iterencode_dict")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "markers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "markerid")
(PUNCT "=")
(ID "id")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "markerid")
(KEYWORD in)
(ID "markers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Circular reference detected")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "markers")
(PUNCT "[")
(ID "markerid")
(PUNCT "]")
(PUNCT "=")
(ID "o")
(NEWLINE)
(DEDENT)
(ID "o")
(PUNCT "=")
(ID "_default")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(KEYWORD from)
(ID "_iterencode")
(PUNCT "(")
(ID "o")
(PUNCT ",")
(ID "_current_indent_level")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "markers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "markers")
(PUNCT "[")
(ID "markerid")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_iterencode")
(NEWLINE)
(DEDENT)
(ENDMARKER)
