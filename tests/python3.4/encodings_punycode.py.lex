(LIT " Codec for the Punicode encoding, as specified in RFC 3492\n\nWritten by Martin v. LÃ¶wis.\n")
(NEWLINE)
(KEYWORD import)
(ID "codecs")
(NEWLINE)
(KEYWORD def)
(ID "segregate")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "3.1 Basic code point segregation")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "extended")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ord")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT "<")
(LIT 128)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "ord")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extended")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "extended")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "extended")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "bytes")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ",")
(ID "extended")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selective_len")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "max")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the length of str, considering only characters below max.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "str")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ord")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(PUNCT "<")
(ID "max")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selective_find")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "char")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering\n    only ordinals up to and including char, and pos is the position in\n    the full string. index/pos is the starting position in the full\n    string.")
(NEWLINE)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "pos")
(PUNCT "==")
(ID "l")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "c")
(PUNCT "=")
(ID "str")
(PUNCT "[")
(ID "pos")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(ID "char")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "index")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(ID "pos")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "c")
(PUNCT "<")
(ID "char")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "insertion_unsort")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "extended")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "3.2 Insertion unsort coding")
(NEWLINE)
(ID "oldchar")
(PUNCT "=")
(LIT 128)
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "oldindex")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "extended")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT "=")
(ID "pos")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "char")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(ID "curlen")
(PUNCT "=")
(ID "selective_len")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "char")
(PUNCT ")")
(NEWLINE)
(ID "delta")
(PUNCT "=")
(PUNCT "(")
(ID "curlen")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "*")
(PUNCT "(")
(ID "char")
(PUNCT "-")
(ID "oldchar")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index")
(PUNCT ",")
(ID "pos")
(PUNCT "=")
(ID "selective_find")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "c")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "delta")
(PUNCT "+=")
(ID "index")
(PUNCT "-")
(ID "oldindex")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "delta")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "oldindex")
(PUNCT "=")
(ID "index")
(NEWLINE)
(ID "delta")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "oldchar")
(PUNCT "=")
(ID "char")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "T")
(PUNCT "(")
(ID "j")
(PUNCT ",")
(ID "bias")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(LIT 36)
(PUNCT "*")
(PUNCT "(")
(ID "j")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "-")
(ID "bias")
(NEWLINE)
(KEYWORD if)
(ID "res")
(PUNCT "<")
(LIT 1)
(PUNCT ":")
(KEYWORD return)
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "res")
(PUNCT ">")
(LIT 26)
(PUNCT ":")
(KEYWORD return)
(LIT 26)
(NEWLINE)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(ID "digits")
(PUNCT "=")
(LIT #"abcdefghijklmnopqrstuvwxyz0123456789")
(NEWLINE)
(KEYWORD def)
(ID "generate_generalized_integer")
(PUNCT "(")
(ID "N")
(PUNCT ",")
(ID "bias")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "3.3 Generalized variable-length integers")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "j")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "T")
(PUNCT "(")
(ID "j")
(PUNCT ",")
(ID "bias")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "N")
(PUNCT "<")
(ID "t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "digits")
(PUNCT "[")
(ID "N")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "bytes")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "digits")
(PUNCT "[")
(ID "t")
(PUNCT "+")
(PUNCT "(")
(PUNCT "(")
(ID "N")
(PUNCT "-")
(ID "t")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(LIT 36)
(PUNCT "-")
(ID "t")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "N")
(PUNCT "=")
(PUNCT "(")
(ID "N")
(PUNCT "-")
(ID "t")
(PUNCT ")")
(PUNCT "//")
(PUNCT "(")
(LIT 36)
(PUNCT "-")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "j")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "adapt")
(PUNCT "(")
(ID "delta")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "numchars")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "first")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delta")
(PUNCT "//=")
(LIT 700)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delta")
(PUNCT "//=")
(LIT 2)
(NEWLINE)
(DEDENT)
(ID "delta")
(PUNCT "+=")
(ID "delta")
(PUNCT "//")
(ID "numchars")
(NEWLINE)
(ID "divisions")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "delta")
(PUNCT ">")
(LIT 455)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delta")
(PUNCT "=")
(ID "delta")
(PUNCT "//")
(LIT 35)
(NEWLINE)
(ID "divisions")
(PUNCT "+=")
(LIT 36)
(NEWLINE)
(DEDENT)
(ID "bias")
(PUNCT "=")
(ID "divisions")
(PUNCT "+")
(PUNCT "(")
(LIT 36)
(PUNCT "*")
(ID "delta")
(PUNCT "//")
(PUNCT "(")
(ID "delta")
(PUNCT "+")
(LIT 38)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "bias")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "generate_integers")
(PUNCT "(")
(ID "baselen")
(PUNCT ",")
(ID "deltas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "3.4 Bias adaptation")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "bias")
(PUNCT "=")
(LIT 72)
(NEWLINE)
(KEYWORD for)
(ID "points")
(PUNCT ",")
(ID "delta")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "deltas")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "generate_generalized_integer")
(PUNCT "(")
(ID "delta")
(PUNCT ",")
(ID "bias")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "bias")
(PUNCT "=")
(ID "adapt")
(PUNCT "(")
(ID "delta")
(PUNCT ",")
(ID "points")
(PUNCT "==")
(LIT 0)
(PUNCT ",")
(ID "baselen")
(PUNCT "+")
(ID "points")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "bytes")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "punycode_encode")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT ",")
(ID "extended")
(PUNCT "=")
(ID "segregate")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(ID "deltas")
(PUNCT "=")
(ID "insertion_unsort")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "extended")
(PUNCT ")")
(NEWLINE)
(ID "extended")
(PUNCT "=")
(ID "generate_integers")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ",")
(ID "deltas")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "base")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "base")
(PUNCT "+")
(LIT #"-")
(PUNCT "+")
(ID "extended")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "extended")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode_generalized_number")
(PUNCT "(")
(ID "extended")
(PUNCT ",")
(ID "extpos")
(PUNCT ",")
(ID "bias")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "3.3 Generalized variable-length integers")
(NEWLINE)
(ID "result")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "w")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "j")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "char")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "extended")
(PUNCT "[")
(ID "extpos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "errors")
(PUNCT "==")
(LIT "strict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnicodeError")
(PUNCT "(")
(LIT "incomplete punicode string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "extpos")
(PUNCT "+")
(LIT 1)
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "extpos")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(LIT 65)
(PUNCT "<=")
(ID "char")
(PUNCT "<=")
(LIT 90)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "digit")
(PUNCT "=")
(ID "char")
(PUNCT "-")
(LIT 65)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT 48)
(PUNCT "<=")
(ID "char")
(PUNCT "<=")
(LIT 57)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "digit")
(PUNCT "=")
(ID "char")
(PUNCT "-")
(LIT 22)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "errors")
(PUNCT "==")
(LIT "strict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnicodeError")
(PUNCT "(")
(LIT "Invalid extended code point '%s'")
(PUNCT "%")
(ID "extended")
(PUNCT "[")
(ID "extpos")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "extpos")
(PUNCT ",")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "t")
(PUNCT "=")
(ID "T")
(PUNCT "(")
(ID "j")
(PUNCT ",")
(ID "bias")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "+=")
(ID "digit")
(PUNCT "*")
(ID "w")
(NEWLINE)
(KEYWORD if)
(ID "digit")
(PUNCT "<")
(ID "t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "extpos")
(PUNCT ",")
(ID "result")
(NEWLINE)
(DEDENT)
(ID "w")
(PUNCT "=")
(ID "w")
(PUNCT "*")
(PUNCT "(")
(LIT 36)
(PUNCT "-")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "j")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "insertion_sort")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "extended")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "3.2 Insertion unsort coding")
(NEWLINE)
(ID "char")
(PUNCT "=")
(LIT 128)
(NEWLINE)
(ID "pos")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "bias")
(PUNCT "=")
(LIT 72)
(NEWLINE)
(ID "extpos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "extpos")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "extended")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newpos")
(PUNCT ",")
(ID "delta")
(PUNCT "=")
(ID "decode_generalized_number")
(PUNCT "(")
(ID "extended")
(PUNCT ",")
(ID "extpos")
(PUNCT ",")
(ID "bias")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "delta")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "base")
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "+=")
(ID "delta")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "char")
(PUNCT "+=")
(ID "pos")
(PUNCT "//")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "char")
(PUNCT ">")
(LIT 1114111)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "errors")
(PUNCT "==")
(LIT "strict")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnicodeError")
(PUNCT "(")
(LIT "Invalid character U+%x")
(PUNCT "%")
(ID "char")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "char")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(LIT "?")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "=")
(ID "pos")
(PUNCT "%")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "base")
(PUNCT "[")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT "+")
(ID "chr")
(PUNCT "(")
(ID "char")
(PUNCT ")")
(PUNCT "+")
(ID "base")
(PUNCT "[")
(ID "pos")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "bias")
(PUNCT "=")
(ID "adapt")
(PUNCT "(")
(ID "delta")
(PUNCT ",")
(PUNCT "(")
(ID "extpos")
(PUNCT "==")
(LIT 0)
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "extpos")
(PUNCT "=")
(ID "newpos")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "base")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "punycode_decode")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "memoryview")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pos")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT #"-")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pos")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "extended")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "text")
(PUNCT "[")
(PUNCT ":")
(ID "pos")
(PUNCT "]")
(PUNCT ",")
(LIT "ascii")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "extended")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "text")
(PUNCT "[")
(ID "pos")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "ascii")
(PUNCT ")")
(PUNCT ".")
(ID "upper")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "insertion_sort")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "extended")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Codec")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "Codec")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "punycode_encode")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "res")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT "=")
(LIT "strict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "errors")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "strict")
(PUNCT ",")
(LIT "replace")
(PUNCT ",")
(LIT "ignore")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnicodeError")
(PUNCT "(")
(LIT "Unsupported error handling ")
(PUNCT "+")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "punycode_decode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "res")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalEncoder")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "IncrementalEncoder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "punycode_encode")
(PUNCT "(")
(ID "input")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IncrementalDecoder")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "IncrementalDecoder")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "input")
(PUNCT ",")
(ID "final")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "errors")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "strict")
(PUNCT ",")
(LIT "replace")
(PUNCT ",")
(LIT "ignore")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnicodeError")
(PUNCT "(")
(LIT "Unsupported error handling ")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "punycode_decode")
(PUNCT "(")
(ID "input")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StreamWriter")
(PUNCT "(")
(ID "Codec")
(PUNCT ",")
(ID "codecs")
(PUNCT ".")
(ID "StreamWriter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "StreamReader")
(PUNCT "(")
(ID "Codec")
(PUNCT ",")
(ID "codecs")
(PUNCT ".")
(ID "StreamReader")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getregentry")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "codecs")
(PUNCT ".")
(ID "CodecInfo")
(PUNCT "(")
(ID "name")
(PUNCT "=")
(LIT "punycode")
(PUNCT ",")
(ID "encode")
(PUNCT "=")
(ID "Codec")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT ",")
(ID "decode")
(PUNCT "=")
(ID "Codec")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT ",")
(ID "incrementalencoder")
(PUNCT "=")
(ID "IncrementalEncoder")
(PUNCT ",")
(ID "incrementaldecoder")
(PUNCT "=")
(ID "IncrementalDecoder")
(PUNCT ",")
(ID "streamwriter")
(PUNCT "=")
(ID "StreamWriter")
(PUNCT ",")
(ID "streamreader")
(PUNCT "=")
(ID "StreamReader")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
