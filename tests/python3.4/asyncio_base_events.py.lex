(LIT "Base implementation of event loop.\n\nThe event loop can be broken up into a multiplexer (the part\nresponsible for notifying us of I/O events) and the event loop proper,\nwhich wraps a multiplexer with functionality for scheduling callbacks,\nimmediately or at a given time in the future.\n\nWhenever a public API takes a callback, subsequent positional\narguments will be passed to the callback if/when it is called.  This\navoids the proliferation of trivial lambdas implementing closures.\nKeyword arguments for the callback are not supported; this is a\nconscious design decision, leaving the door open for keyword arguments\nto modify the meaning of the API call itself.\n")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "concurrent")
(PUNCT ".")
(ID "futures")
(NEWLINE)
(KEYWORD import)
(ID "heapq")
(NEWLINE)
(KEYWORD import)
(ID "inspect")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "coroutines")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "events")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "futures")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "tasks")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "coroutines")
(KEYWORD import)
(ID "coroutine")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "log")
(KEYWORD import)
(ID "logger")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "BaseEventLoop")
(PUNCT "]")
(NEWLINE)
(ID "_MAX_WORKERS")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_MIN_SCHEDULED_TIMER_HANDLES")
(PUNCT "=")
(LIT 100)
(NEWLINE)
(ID "_MIN_CANCELLED_TIMER_HANDLES_FRACTION")
(PUNCT "=")
(LIT 0.5)
(NEWLINE)
(KEYWORD def)
(ID "_format_handle")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cb")
(PUNCT "=")
(ID "handle")
(PUNCT ".")
(ID "_callback")
(NEWLINE)
(KEYWORD if)
(ID "inspect")
(PUNCT ".")
(ID "ismethod")
(PUNCT "(")
(ID "cb")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "cb")
(PUNCT ".")
(ID "__self__")
(PUNCT ",")
(ID "tasks")
(PUNCT ".")
(ID "Task")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "cb")
(PUNCT ".")
(ID "__self__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_format_pipe")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "fd")
(PUNCT "==")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<pipe>")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "fd")
(PUNCT "==")
(ID "subprocess")
(PUNCT ".")
(ID "STDOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<stdout>")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_StopError")
(PUNCT "(")
(ID "BaseException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Raised to stop the event loop.")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_resolved_address")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "family")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "family")
(NEWLINE)
(KEYWORD if)
(ID "family")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "AF_INET")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "address")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "family")
(PUNCT "==")
(ID "socket")
(PUNCT ".")
(ID "AF_INET6")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "address")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "socket")
(PUNCT ",")
(LIT "inet_pton")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socket")
(PUNCT ".")
(ID "inet_pton")
(PUNCT "(")
(ID "family")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "address must be resolved (IP address), ")
(LIT "got host %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type_mask")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "socket")
(PUNCT ",")
(LIT "SOCK_NONBLOCK")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type_mask")
(PUNCT "|=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_NONBLOCK")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "socket")
(PUNCT ",")
(LIT "SOCK_CLOEXEC")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type_mask")
(PUNCT "|=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_CLOEXEC")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socket")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(PUNCT "(")
(ID "sock")
(PUNCT ".")
(ID "type")
(PUNCT "&")
(PUNCT "~")
(ID "type_mask")
(PUNCT ")")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AI_NUMERICHOST")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "gaierror")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "address must be resolved (IP address), ")
(LIT "got host %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "err")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_raise_stop_error")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "_StopError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_run_until_complete_cb")
(PUNCT "(")
(ID "fut")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc")
(PUNCT "=")
(ID "fut")
(PUNCT ".")
(ID "_exception")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "BaseException")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "Exception")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "_raise_stop_error")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Server")
(PUNCT "(")
(ID "events")
(PUNCT ".")
(ID "AbstractServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ",")
(ID "sockets")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sockets")
(PUNCT "=")
(ID "sockets")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_active_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_waiters")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s sockets=%r>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "sockets")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_attach")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "sockets")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_active_count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_detach")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_active_count")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_active_count")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_active_count")
(PUNCT "==")
(LIT 0)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "sockets")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_wakeup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sockets")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sockets")
(NEWLINE)
(KEYWORD if)
(ID "sockets")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sockets")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "sock")
(KEYWORD in)
(ID "sockets")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "_stop_serving")
(PUNCT "(")
(ID "sock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_active_count")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_wakeup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_wakeup")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "waiters")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_waiters")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_waiters")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "waiter")
(KEYWORD in)
(ID "waiters")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "waiter")
(PUNCT ".")
(ID "done")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "waiter")
(PUNCT ".")
(ID "set_result")
(PUNCT "(")
(ID "waiter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "wait_closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sockets")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_waiters")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "waiter")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_waiters")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "waiter")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(KEYWORD from)
(ID "waiter")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BaseEventLoop")
(PUNCT "(")
(ID "events")
(PUNCT ".")
(ID "AbstractEventLoop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_timer_cancelled_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_default_executor")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_internal_fds")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_thread_id")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clock_resolution")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "get_clock_info")
(PUNCT "(")
(LIT "monotonic")
(PUNCT ")")
(PUNCT ".")
(ID "resolution")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_exception_handler")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT "=")
(PUNCT "(")
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "ignore_environment")
(KEYWORD and)
(ID "bool")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "PYTHONASYNCIODEBUG")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "slow_callback_duration")
(PUNCT "=")
(LIT 0.1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_current_handle")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "<%s running=%s closed=%s debug=%s>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "is_running")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "is_closed")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_task")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "coro")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Schedule a coroutine object.\n\n        Return a task object.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "task")
(PUNCT "=")
(ID "tasks")
(PUNCT ".")
(ID "Task")
(PUNCT "(")
(ID "coro")
(PUNCT ",")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "task")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "task")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "task")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_socket_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create socket transport.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_ssl_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rawsock")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "sslcontext")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create SSL transport.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_datagram_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create datagram transport.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_read_pipe_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create read pipe transport.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_write_pipe_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create write pipe transport.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "_make_subprocess_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "bufsize")
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create subprocess transport.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_to_self")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write a byte to self-pipe, to wake up the event loop.\n\n        This may be called from a different thread.\n\n        The subclass is responsible for implementing the self-pipe.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_events")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process selector events.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Event loop is closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run_forever")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run until stop() is called.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_running")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Event loop is running.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_thread_id")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "get_ident")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_run_once")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "_StopError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_thread_id")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run_until_complete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "future")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run until the Future is done.\n\n        If the argument is a coroutine, it is wrapped in a Task.\n\n        WARNING: It would be disastrous to call run_until_complete()\n        with the same coroutine twice -- it would wrap it in two\n        different Tasks and that can't be good.\n\n        Return the Future's result, or raise its exception.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "new_task")
(PUNCT "=")
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "future")
(PUNCT ",")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT ")")
(NEWLINE)
(ID "future")
(PUNCT "=")
(ID "tasks")
(PUNCT ".")
(ID "async")
(PUNCT "(")
(ID "future")
(PUNCT ",")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "new_task")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "future")
(PUNCT ".")
(ID "_log_destroy_pending")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "future")
(PUNCT ".")
(ID "add_done_callback")
(PUNCT "(")
(ID "_run_until_complete_cb")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "run_forever")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "new_task")
(KEYWORD and)
(ID "future")
(PUNCT ".")
(ID "done")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "future")
(PUNCT ".")
(ID "cancelled")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "future")
(PUNCT ".")
(ID "exception")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "future")
(PUNCT ".")
(ID "remove_done_callback")
(PUNCT "(")
(ID "_run_until_complete_cb")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "future")
(PUNCT ".")
(ID "done")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Event loop stopped before Future completed.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "future")
(PUNCT ".")
(ID "result")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop running the event loop.\n\n        Every callback scheduled before stop() is called will run. Callbacks\n        scheduled after stop() is called will not run. However, those callbacks\n        will run if run_forever is called again later.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "_raise_stop_error")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the event loop.\n\n        This clears the queues and shuts down the executor,\n        but does not wait for the executor to finish.\n\n        The event loop must not be running.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "is_running")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Cannot close a running event loop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Close %r")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "executor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_default_executor")
(NEWLINE)
(KEYWORD if)
(ID "executor")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_default_executor")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "executor")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(ID "wait")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns True if the event loop was closed.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_closed")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT ">=")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_closed")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "unclosed event loop %r")
(PUNCT "%")
(ID "self")
(PUNCT ",")
(ID "ResourceWarning")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "is_running")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_running")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns True if the event loop is running.")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_thread_id")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "time")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the time according to the event loop's clock.\n\n        This is a float expressed in seconds since an epoch, but the\n        epoch, precision, accuracy and drift are unspecified and may\n        differ per event loop.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "time")
(PUNCT ".")
(ID "monotonic")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_later")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delay")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Arrange for a callback to be called at a given time.\n\n        Return a Handle: an opaque object with a cancel() method that\n        can be used to cancel the call.\n\n        The delay can be an int or float, expressed in seconds.  It is\n        always relative to the current time.\n\n        Each callback will be called exactly once.  If two callbacks\n        are scheduled for exactly the same time, it undefined which\n        will be called first.\n\n        Any positional arguments after the callback will be passed to\n        the callback when it is called.\n        ")
(NEWLINE)
(ID "timer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "call_at")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "delay")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "timer")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "timer")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "timer")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_at")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "when")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like call_later(), but uses an absolute time.\n\n        Absolute time corresponds to the event loop's time() method.\n        ")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutine")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(KEYWORD or)
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutinefunction")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "coroutines cannot be used with call_at()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_check_thread")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "timer")
(PUNCT "=")
(ID "events")
(PUNCT ".")
(ID "TimerHandle")
(PUNCT "(")
(ID "when")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "timer")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "timer")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "heapq")
(PUNCT ".")
(ID "heappush")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ",")
(ID "timer")
(PUNCT ")")
(NEWLINE)
(ID "timer")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD return)
(ID "timer")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Arrange for a callback to be called as soon as possible.\n\n        This operates as a FIFO queue: callbacks are called in the\n        order in which they are registered.  Each callback will be\n        called exactly once.\n\n        Any positional arguments after the callback will be passed to\n        the callback when it is called.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_check_thread")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_soon")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "handle")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutine")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(KEYWORD or)
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutinefunction")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "coroutines cannot be used with call_soon()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT "=")
(ID "events")
(PUNCT ".")
(ID "Handle")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "handle")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_thread")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Check that the current thread is the thread running the event loop.\n\n        Non-thread-safe methods of this class make this assumption and will\n        likely behave incorrectly when the assumption is violated.\n\n        Should only be called when (self._debug == True).  The caller is\n        responsible for checking this condition for performance reasons.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_thread_id")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "thread_id")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "get_ident")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "thread_id")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_thread_id")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Non-thread-safe operation invoked on an event loop other ")
(LIT "than the current one")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "call_soon_threadsafe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like call_soon(), but thread-safe.")
(NEWLINE)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_call_soon")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_write_to_self")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "handle")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_in_executor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "executor")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutine")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(KEYWORD or)
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutinefunction")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "coroutines cannot be used with run_in_executor()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "events")
(PUNCT ".")
(ID "Handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "args")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "events")
(PUNCT ".")
(ID "TimerHandle")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "callback")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT ".")
(ID "set_result")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "callback")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(ID "callback")
(PUNCT ".")
(ID "_args")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "executor")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executor")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_default_executor")
(NEWLINE)
(KEYWORD if)
(ID "executor")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "executor")
(PUNCT "=")
(ID "concurrent")
(PUNCT ".")
(ID "futures")
(PUNCT ".")
(ID "ThreadPoolExecutor")
(PUNCT "(")
(ID "_MAX_WORKERS")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_default_executor")
(PUNCT "=")
(ID "executor")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "futures")
(PUNCT ".")
(ID "wrap_future")
(PUNCT "(")
(ID "executor")
(PUNCT ".")
(ID "submit")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ",")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_default_executor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "executor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_default_executor")
(PUNCT "=")
(ID "executor")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getaddrinfo_debug")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(PUNCT "[")
(LIT "%s:%r")
(PUNCT "%")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "family")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "family=%r")
(PUNCT "%")
(ID "family")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "type")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "type=%r")
(PUNCT "%")
(ID "type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "proto")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "proto=%r")
(PUNCT "%")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "flags")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "flags=%r")
(PUNCT "%")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "msg")
(PUNCT "=")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Get address info %s")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "t0")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "addrinfo")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "dt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "t0")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "Getting address info %s took %.3f ms: %r")
(PUNCT "%")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "dt")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ",")
(ID "addrinfo")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dt")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "slow_callback_duration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "addrinfo")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getaddrinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run_in_executor")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_getaddrinfo_debug")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run_in_executor")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getnameinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sockaddr")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "run_in_executor")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "getnameinfo")
(PUNCT ",")
(ID "sockaddr")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "create_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "family")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "local_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connect to a TCP server.\n\n        Create a streaming transport connection to a given Internet host and\n        port: socket family AF_INET or socket.AF_INET6 depending on host (or\n        family if specified), socket type SOCK_STREAM. protocol_factory must be\n        a callable returning a protocol instance.\n\n        This method is a coroutine which will try to establish the connection\n        in the background.  When successful, the coroutine returns a\n        (transport, protocol) pair.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "server_hostname")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "server_hostname is only meaningful with ssl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "server_hostname")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "You must set server_hostname ")
(LIT "when using ssl without a host")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "server_hostname")
(PUNCT "=")
(ID "host")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "host")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "port")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "host/port and sock can not be specified at the same time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "f1")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "fs")
(PUNCT "=")
(PUNCT "[")
(ID "f1")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "local_addr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(PUNCT "*")
(ID "local_addr")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(ID "fs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "f2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f2")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "tasks")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(ID "fs")
(PUNCT ",")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "infos")
(PUNCT "=")
(ID "f1")
(PUNCT ".")
(ID "result")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "getaddrinfo() returned empty list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "f2")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "laddr_infos")
(PUNCT "=")
(ID "f2")
(PUNCT ".")
(ID "result")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "laddr_infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "getaddrinfo() returned empty list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "exceptions")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "cname")
(PUNCT ",")
(ID "address")
(KEYWORD in)
(ID "infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "type")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "f2")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "_")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "laddr")
(KEYWORD in)
(ID "laddr_infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "laddr")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc")
(PUNCT "=")
(ID "OSError")
(PUNCT "(")
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT ",")
(LIT "error while ")
(LIT "attempting to bind on address ")
(LIT "{!r}: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "laddr")
(PUNCT ",")
(ID "exc")
(PUNCT ".")
(ID "strerror")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "exceptions")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "connect %r to %r")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "sock_connect")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "exceptions")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "exceptions")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "exceptions")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "model")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "exceptions")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "all")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(PUNCT "==")
(ID "model")
(KEYWORD for)
(ID "exc")
(KEYWORD in)
(ID "exceptions")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "exceptions")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "Multiple exceptions: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(KEYWORD for)
(ID "exc")
(KEYWORD in)
(ID "exceptions")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "host and port was not specified and no sock specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT "=")
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "_create_connection_transport")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "ssl")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(ID "transport")
(PUNCT ".")
(ID "get_extra_info")
(PUNCT "(")
(LIT "socket")
(PUNCT ")")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r connected to %s:%r: (%r, %r)")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "_create_connection_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "ssl")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protocol")
(PUNCT "=")
(ID "protocol_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "waiter")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sslcontext")
(PUNCT "=")
(KEYWORD None)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "ssl")
(PUNCT ",")
(ID "bool")
(PUNCT ")")
(KEYWORD else)
(ID "ssl")
(NEWLINE)
(ID "transport")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_ssl_transport")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "sslcontext")
(PUNCT ",")
(ID "waiter")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transport")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_socket_transport")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "waiter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "create_datagram_endpoint")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "local_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "remote_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create datagram connection.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "local_addr")
(KEYWORD or)
(ID "remote_addr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "family")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected address family")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "addr_pairs_info")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(PUNCT "(")
(ID "family")
(PUNCT ",")
(ID "proto")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr_infos")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "idx")
(PUNCT ",")
(ID "addr")
(KEYWORD in)
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "local_addr")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(ID "remote_addr")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "addr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "addr")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "addr")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ",")
(PUNCT "(")
(LIT "2-tuple is expected")
(PUNCT ")")
(NEWLINE)
(ID "infos")
(PUNCT "=")
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(PUNCT "*")
(ID "addr")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_DGRAM")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "proto")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "getaddrinfo() returned empty list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "fam")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "pro")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "address")
(KEYWORD in)
(ID "infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(PUNCT "(")
(ID "fam")
(PUNCT ",")
(ID "pro")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD not)
(KEYWORD in)
(ID "addr_infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "addr_infos")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "addr_infos")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "[")
(ID "idx")
(PUNCT "]")
(PUNCT "=")
(ID "address")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "addr_pairs_info")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "addr_pair")
(PUNCT ")")
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "addr_pair")
(KEYWORD in)
(ID "addr_infos")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(PUNCT "(")
(ID "local_addr")
(KEYWORD and)
(ID "addr_pair")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "remote_addr")
(KEYWORD and)
(ID "addr_pair")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "addr_pairs_info")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "can not get address information")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "exceptions")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(PUNCT "(")
(ID "family")
(PUNCT ",")
(ID "proto")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "local_address")
(PUNCT ",")
(ID "remote_address")
(PUNCT ")")
(PUNCT ")")
(KEYWORD in)
(ID "addr_pairs_info")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "r_addr")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_DGRAM")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "setsockopt")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "SOL_SOCKET")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SO_REUSEADDR")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "local_addr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "local_address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "remote_addr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "sock_connect")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "remote_address")
(PUNCT ")")
(NEWLINE)
(ID "r_addr")
(PUNCT "=")
(ID "remote_address")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "exceptions")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "exceptions")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "protocol")
(PUNCT "=")
(ID "protocol_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "waiter")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "transport")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_datagram_transport")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "r_addr")
(PUNCT ",")
(ID "waiter")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "local_addr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Datagram endpoint local_addr=%r remote_addr=%r ")
(LIT "created: (%r, %r)")
(PUNCT ",")
(ID "local_addr")
(PUNCT ",")
(ID "remote_addr")
(PUNCT ",")
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Datagram endpoint remote_addr=%r created: ")
(LIT "(%r, %r)")
(PUNCT ",")
(ID "remote_addr")
(PUNCT ",")
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "waiter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "create_server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AF_UNSPEC")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AI_PASSIVE")
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "backlog")
(PUNCT "=")
(LIT 100)
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "reuse_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a TCP server bound to host and port.\n\n        Return a Server object which can be used to stop the service.\n\n        This method is a coroutine.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "ssl")
(PUNCT ",")
(ID "bool")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "ssl argument must be an SSLContext or None")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "host")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD or)
(ID "port")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "host/port and sock can not be specified at the same time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "AF_INET6")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "socket")
(PUNCT ",")
(LIT "AF_INET6")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reuse_address")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reuse_address")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "!=")
(LIT "cygwin")
(NEWLINE)
(DEDENT)
(ID "sockets")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "host")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "infos")
(PUNCT "=")
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "getaddrinfo")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "family")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "getaddrinfo() returned empty list")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "completed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "res")
(KEYWORD in)
(ID "infos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "af")
(PUNCT ",")
(ID "socktype")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "canonname")
(PUNCT ",")
(ID "sa")
(PUNCT "=")
(ID "res")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "af")
(PUNCT ",")
(ID "socktype")
(PUNCT ",")
(ID "proto")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "socket")
(PUNCT ".")
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "create_server() failed to create ")
(LIT "socket.socket(%r, %r, %r)")
(PUNCT ",")
(ID "af")
(PUNCT ",")
(ID "socktype")
(PUNCT ",")
(ID "proto")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "sockets")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sock")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reuse_address")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "setsockopt")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "SOL_SOCKET")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SO_REUSEADDR")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "af")
(PUNCT "==")
(ID "AF_INET6")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "socket")
(PUNCT ",")
(LIT "IPPROTO_IPV6")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "setsockopt")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "IPPROTO_IPV6")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "IPV6_V6ONLY")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "sa")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(ID "err")
(PUNCT ".")
(ID "errno")
(PUNCT ",")
(LIT "error while attempting ")
(LIT "to bind on address %r: %s")
(PUNCT "%")
(PUNCT "(")
(ID "sa")
(PUNCT ",")
(ID "err")
(PUNCT ".")
(ID "strerror")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "completed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "completed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "sock")
(KEYWORD in)
(ID "sockets")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Neither host/port nor sock were specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sockets")
(PUNCT "=")
(PUNCT "[")
(ID "sock")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "server")
(PUNCT "=")
(ID "Server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sockets")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "sock")
(KEYWORD in)
(ID "sockets")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "listen")
(PUNCT "(")
(ID "backlog")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_start_serving")
(PUNCT "(")
(ID "protocol_factory")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "ssl")
(PUNCT ",")
(ID "server")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "%r is serving")
(PUNCT ",")
(ID "server")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "server")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "connect_read_pipe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "pipe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protocol")
(PUNCT "=")
(ID "protocol_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "waiter")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "transport")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_read_pipe_transport")
(PUNCT "(")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "waiter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Read pipe %r connected: (%r, %r)")
(PUNCT ",")
(ID "pipe")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "connect_write_pipe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "pipe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "protocol")
(PUNCT "=")
(ID "protocol_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "waiter")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "transport")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_make_write_pipe_transport")
(PUNCT "(")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "waiter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Write pipe %r connected: (%r, %r)")
(PUNCT ",")
(ID "pipe")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_log_subprocess")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "=")
(PUNCT "[")
(ID "msg")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "stdin")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "stdin=%s")
(PUNCT "%")
(ID "_format_pipe")
(PUNCT "(")
(ID "stdin")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "stderr")
(PUNCT "==")
(ID "subprocess")
(PUNCT ".")
(ID "STDOUT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "stdout=stderr=%s")
(PUNCT "%")
(ID "_format_pipe")
(PUNCT "(")
(ID "stdout")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "stdout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "stdout=%s")
(PUNCT "%")
(ID "_format_pipe")
(PUNCT "(")
(ID "stdout")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "stderr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "stderr=%s")
(PUNCT "%")
(ID "_format_pipe")
(PUNCT "(")
(ID "stderr")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "info")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "subprocess_shell")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "universal_newlines")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "cmd must be a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "universal_newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "universal_newlines must be False")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "shell must be True")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bufsize")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "bufsize must be 0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "protocol")
(PUNCT "=")
(ID "protocol_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debug_log")
(PUNCT "=")
(LIT "run shell command %r")
(PUNCT "%")
(ID "cmd")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_log_subprocess")
(PUNCT "(")
(ID "debug_log")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "transport")
(PUNCT "=")
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "_make_subprocess_transport")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "bufsize")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "%s: %r")
(PUNCT "%")
(PUNCT "(")
(ID "debug_log")
(PUNCT ",")
(ID "transport")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "subprocess_exec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "program")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "universal_newlines")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "universal_newlines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "universal_newlines must be False")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "shell")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "shell must be False")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bufsize")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "bufsize must be 0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "popen_args")
(PUNCT "=")
(PUNCT "(")
(ID "program")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(NEWLINE)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "popen_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "arg")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "program arguments must be ")
(LIT "a bytes or text string, not %s")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "protocol")
(PUNCT "=")
(ID "protocol_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "debug_log")
(PUNCT "=")
(LIT "execute program %r")
(PUNCT "%")
(ID "program")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_log_subprocess")
(PUNCT "(")
(ID "debug_log")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "transport")
(PUNCT "=")
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "_make_subprocess_transport")
(PUNCT "(")
(ID "protocol")
(PUNCT ",")
(ID "popen_args")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "bufsize")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "%s: %r")
(PUNCT "%")
(PUNCT "(")
(ID "debug_log")
(PUNCT ",")
(ID "transport")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set handler as the new event loop exception handler.\n\n        If handler is None, the default exception handler will\n        be set.\n\n        If handler is a callable object, it should have a\n        signature matching '(loop, context)', where 'loop'\n        will be a reference to the active event loop, 'context'\n        will be a dict object (see `call_exception_handler()`\n        documentation for details about context).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "handler")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "callable")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "A callable object or None is expected, ")
(LIT "got {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_exception_handler")
(PUNCT "=")
(ID "handler")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "default_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default exception handler.\n\n        This is called when an exception occurs and no exception\n        handler is set, and can be called by a custom exception\n        handler that wants to defer to the default behavior.\n\n        The context parameter has the same meaning as in\n        `call_exception_handler()`.\n        ")
(NEWLINE)
(ID "message")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "message")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "message")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "Unhandled exception in event loop")
(NEWLINE)
(DEDENT)
(ID "exception")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "exception")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exception")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_info")
(PUNCT "=")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "exception")
(PUNCT ")")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "exception")
(PUNCT ".")
(ID "__traceback__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc_info")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(LIT "source_traceback")
(KEYWORD not)
(KEYWORD in)
(ID "context")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_current_handle")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_current_handle")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "[")
(LIT "handle_traceback")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_current_handle")
(PUNCT ".")
(ID "_source_traceback")
(NEWLINE)
(DEDENT)
(ID "log_lines")
(PUNCT "=")
(PUNCT "[")
(ID "message")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(PUNCT "{")
(LIT "message")
(PUNCT ",")
(LIT "exception")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "context")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "key")
(PUNCT "==")
(LIT "source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tb")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "traceback")
(PUNCT ".")
(ID "format_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(LIT "Object created at (most recent call last):\n")
(NEWLINE)
(ID "value")
(PUNCT "+=")
(ID "tb")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "key")
(PUNCT "==")
(LIT "handle_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tb")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "traceback")
(PUNCT ".")
(ID "format_list")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(LIT "Handle created at (most recent call last):\n")
(NEWLINE)
(ID "value")
(PUNCT "+=")
(ID "tb")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "log_lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "{}: {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "logger")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "log_lines")
(PUNCT ")")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(ID "exc_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call the current event loop's exception handler.\n\n        The context argument is a dict containing the following keys:\n\n        - 'message': Error message;\n        - 'exception' (optional): Exception object;\n        - 'future' (optional): Future instance;\n        - 'handle' (optional): Handle instance;\n        - 'protocol' (optional): Protocol instance;\n        - 'transport' (optional): Transport instance;\n        - 'socket' (optional): Socket instance.\n\n        New keys maybe introduced in the future.\n\n        Note: do not overload this method in an event loop subclass.\n        For custom exception handling, use the\n        `set_exception_handler()` method.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_exception_handler")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "default_exception_handler")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Exception in default exception handler")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "default_exception_handler")
(PUNCT "(")
(PUNCT "{")
(LIT "message")
(PUNCT ":")
(LIT "Unhandled error in exception handler")
(PUNCT ",")
(LIT "exception")
(PUNCT ":")
(ID "exc")
(PUNCT ",")
(LIT "context")
(PUNCT ":")
(ID "context")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "error")
(PUNCT "(")
(LIT "Exception in default exception handler ")
(LIT "while handling an unexpected error ")
(LIT "in custom exception handler")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_add_callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a Handle to _scheduled (TimerHandle) or _ready.")
(NEWLINE)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "handle")
(PUNCT ",")
(ID "events")
(PUNCT ".")
(ID "Handle")
(PUNCT ")")
(PUNCT ",")
(LIT "A Handle is required here")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "handle")
(PUNCT ",")
(ID "events")
(PUNCT ".")
(ID "TimerHandle")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_add_callback_signalsafe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Like _add_callback() but called from a signal handler.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_add_callback")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_to_self")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_timer_handle_cancelled")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Notification that a TimerHandle has been cancelled.")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_timer_cancelled_count")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_run_once")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run one full iteration of the event loop.\n\n        This calls all currently ready callbacks, polls for I/O,\n        schedules the resulting callbacks, and finally schedules\n        'call_later' callbacks.\n        ")
(NEWLINE)
(ID "sched_count")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "sched_count")
(PUNCT ">")
(ID "_MIN_SCHEDULED_TIMER_HANDLES")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_timer_cancelled_count")
(PUNCT "/")
(ID "sched_count")
(PUNCT ">")
(ID "_MIN_CANCELLED_TIMER_HANDLES_FRACTION")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_scheduled")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "handle")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_scheduled")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "heapq")
(PUNCT ".")
(ID "heapify")
(PUNCT "(")
(ID "new_scheduled")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(ID "new_scheduled")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_timer_cancelled_count")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_timer_cancelled_count")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(ID "handle")
(PUNCT "=")
(ID "heapq")
(PUNCT ".")
(ID "heappop")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "timeout")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "when")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "_when")
(NEWLINE)
(ID "timeout")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "when")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(KEYWORD and)
(ID "timeout")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t0")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "event_list")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_selector")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "dt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "t0")
(NEWLINE)
(KEYWORD if)
(ID "dt")
(PUNCT ">=")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "INFO")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "DEBUG")
(NEWLINE)
(DEDENT)
(ID "nevent")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "event_list")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "timeout")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(LIT "poll took %.3f ms: %s events")
(PUNCT ",")
(ID "dt")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ",")
(ID "nevent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "nevent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(LIT "poll %.3f ms took %.3f ms: %s events")
(PUNCT ",")
(ID "timeout")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ",")
(ID "dt")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ",")
(ID "nevent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "dt")
(PUNCT ">=")
(LIT 1.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(LIT "poll %.3f ms took %.3f ms: timeout")
(PUNCT ",")
(ID "timeout")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ",")
(ID "dt")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "event_list")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_selector")
(PUNCT ".")
(ID "select")
(PUNCT "(")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_process_events")
(PUNCT "(")
(ID "event_list")
(PUNCT ")")
(NEWLINE)
(ID "end_time")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_clock_resolution")
(NEWLINE)
(KEYWORD while)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_when")
(PUNCT ">=")
(ID "end_time")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "handle")
(PUNCT "=")
(ID "heapq")
(PUNCT ".")
(ID "heappop")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ntodo")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "ntodo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_ready")
(PUNCT ".")
(ID "popleft")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_current_handle")
(PUNCT "=")
(ID "handle")
(NEWLINE)
(ID "t0")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT ".")
(ID "_run")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "t0")
(NEWLINE)
(KEYWORD if)
(ID "dt")
(PUNCT ">=")
(ID "self")
(PUNCT ".")
(ID "slow_callback_duration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "Executing %s took %.3f seconds")
(PUNCT ",")
(ID "_format_handle")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(PUNCT ",")
(ID "dt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_current_handle")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT ".")
(ID "_run")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "handle")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_debug")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_debug")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_debug")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "enabled")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_debug")
(PUNCT "=")
(ID "enabled")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
