(LIT "Fixer for generator.throw(E, V, T).\n\ng.throw(E)       -> g.throw(E)\ng.throw(E, V)    -> g.throw(E(V))\ng.throw(E, V, T) -> g.throw(E(V).with_traceback(T))\n\ng.throw(\"foo\"[, V[, T]]) will warn about string exceptions.")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "pytree")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(PUNCT ",")
(ID "Call")
(PUNCT ",")
(ID "ArgList")
(PUNCT ",")
(ID "Attr")
(PUNCT ",")
(ID "is_tuple")
(NEWLINE)
(KEYWORD class)
(ID "FixThrow")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n    power< any trailer< '.' 'throw' >\n           trailer< '(' args=arglist< exc=any ',' val=any [',' tb=any] > ')' >\n    >\n    |\n    power< any trailer< '.' 'throw' > trailer< '(' exc=any ')' > >\n    ")
(NEWLINE)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "syms")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "syms")
(NEWLINE)
(ID "exc")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "exc")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "type")
(KEYWORD is)
(ID "token")
(PUNCT ".")
(ID "STRING")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cannot_convert")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(LIT "Python 3 does not support string exceptions")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "val")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "val")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "val")
(PUNCT "=")
(ID "val")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "is_tuple")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "c")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "val")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "val")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "throw_args")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "args")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "tb")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tb")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "tb")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "tb")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "e")
(PUNCT "=")
(ID "Call")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "with_tb")
(PUNCT "=")
(ID "Attr")
(PUNCT "(")
(ID "e")
(PUNCT ",")
(ID "Name")
(PUNCT "(")
(LIT "with_traceback")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(PUNCT "[")
(ID "ArgList")
(PUNCT "(")
(PUNCT "[")
(ID "tb")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "throw_args")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "pytree")
(PUNCT ".")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "power")
(PUNCT ",")
(ID "with_tb")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "throw_args")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Call")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
