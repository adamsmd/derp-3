(LIT "distutils.dir_util\n\nUtility functions for manipulating directories and directory trees.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsFileError")
(PUNCT ",")
(ID "DistutilsInternalError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(ID "_path_created")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "mkpath")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 511)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, print a one-line summary of each mkdir to stdout.\n    Return the list of directories actually created.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_path_created")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsInternalError")
(PUNCT "(")
(LIT "mkpath: 'name' must be a string (got %r)")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "created_dirs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD or)
(ID "name")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "created_dirs")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_path_created")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "created_dirs")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "tails")
(PUNCT "=")
(PUNCT "[")
(ID "tail")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "head")
(KEYWORD and)
(ID "tail")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(NEWLINE)
(ID "tails")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "tail")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "tails")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "d")
(PUNCT ")")
(NEWLINE)
(ID "abs_head")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_path_created")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "abs_head")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "verbose")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "creating %s")
(PUNCT ",")
(ID "head")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "mkdir")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EEXIST")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsFileError")
(PUNCT "(")
(LIT "could not create '%s': %s")
(PUNCT "%")
(PUNCT "(")
(ID "head")
(PUNCT ",")
(ID "exc")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "created_dirs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_path_created")
(PUNCT "[")
(ID "abs_head")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "created_dirs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_tree")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "files")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(LIT 511)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create all the empty directories under 'base_dir' needed to put 'files'\n    there.\n\n    'base_dir' is just the name of a directory which doesn't necessarily\n    exist yet; 'files' is a list of filenames to be interpreted relative to\n    'base_dir'.  'base_dir' + the directory portion of every file in 'files'\n    will be created if it doesn't already exist.  'mode', 'verbose' and\n    'dry_run' flags are as for 'mkpath()'.\n    ")
(NEWLINE)
(ID "need_dir")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "file")
(KEYWORD in)
(ID "files")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "need_dir")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "sorted")
(PUNCT "(")
(ID "need_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mkpath")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD import)
(ID "sysconfig")
(NEWLINE)
(ID "_multiarch")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "copy_tree")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "dst")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "preserve_times")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "preserve_symlinks")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "update")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Copy an entire directory tree 'src' to a new location 'dst'.\n\n    Both 'src' and 'dst' must be directory names.  If 'src' is not a\n    directory, raise DistutilsFileError.  If 'dst' does not exist, it is\n    created with 'mkpath()'.  The end result of the copy is that every\n    file in 'src' is copied to 'dst', and directories under 'src' are\n    recursively copied to 'dst'.  Return the list of files that were\n    copied or might have been copied, using their output name.  The\n    return value is unaffected by 'update' or 'dry_run': it is simply\n    the list of all files under 'src', with the names changed to be\n    under 'dst'.\n\n    'preserve_mode' and 'preserve_times' are the same as for\n    'copy_file'; note that they only apply to regular files, not to\n    directories.  If 'preserve_symlinks' is true, symlinks will be\n    copied as symlinks (on platforms that support them!); otherwise\n    (the default), the destination of the symlink will be copied.\n    'update' and 'verbose' are the same as for 'copy_file'.\n    ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "file_util")
(KEYWORD import)
(ID "copy_file")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsFileError")
(PUNCT "(")
(LIT "cannot copy tree '%s': not a directory")
(PUNCT "%")
(ID "src")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsFileError")
(PUNCT "(")
(LIT "error listing files in '%s': %s")
(PUNCT "%")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "strerror")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "ext_suffix")
(PUNCT "=")
(ID "sysconfig")
(PUNCT ".")
(ID "get_config_var")
(PUNCT "(")
(LIT "EXT_SUFFIX")
(PUNCT ")")
(NEWLINE)
(ID "new_suffix")
(PUNCT "=")
(LIT "%s-%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "ext_suffix")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(ID "_multiarch")
(PUNCT ",")
(ID "ext_suffix")
(PUNCT "[")
(PUNCT "-")
(LIT 3)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mkpath")
(PUNCT "(")
(ID "dst")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "outputs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(NEWLINE)
(ID "dst_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dst")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_multiarch")
(KEYWORD and)
(ID "n")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "ext_suffix")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "n")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "new_suffix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dst_name")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dst")
(PUNCT ",")
(ID "n")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "ext_suffix")
(PUNCT ",")
(ID "new_suffix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "renaming extension %s -> %s")
(PUNCT ",")
(ID "n")
(PUNCT ",")
(ID "n")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "ext_suffix")
(PUNCT ",")
(ID "new_suffix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ".nfs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "preserve_symlinks")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "src_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "link_dest")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "readlink")
(PUNCT "(")
(ID "src_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "verbose")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "linking %s -> %s")
(PUNCT ",")
(ID "dst_name")
(PUNCT ",")
(ID "link_dest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "symlink")
(PUNCT "(")
(ID "link_dest")
(PUNCT ",")
(ID "dst_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "outputs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dst_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "src_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "outputs")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "copy_tree")
(PUNCT "(")
(ID "src_name")
(PUNCT ",")
(ID "dst_name")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT ",")
(ID "preserve_times")
(PUNCT ",")
(ID "preserve_symlinks")
(PUNCT ",")
(ID "update")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "copy_file")
(PUNCT "(")
(ID "src_name")
(PUNCT ",")
(ID "dst_name")
(PUNCT ",")
(ID "preserve_mode")
(PUNCT ",")
(ID "preserve_times")
(PUNCT ",")
(ID "update")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "dry_run")
(PUNCT ")")
(NEWLINE)
(ID "outputs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "dst_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "outputs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_build_cmdtuple")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "cmdtuples")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper for remove_tree().")
(NEWLINE)
(KEYWORD for)
(ID "f")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "real_f")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "real_f")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "islink")
(PUNCT "(")
(ID "real_f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_build_cmdtuple")
(PUNCT "(")
(ID "real_f")
(PUNCT ",")
(ID "cmdtuples")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmdtuples")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "remove")
(PUNCT ",")
(ID "real_f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "cmdtuples")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "rmdir")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_tree")
(PUNCT "(")
(ID "directory")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Recursively remove an entire directory tree.\n\n    Any errors are ignored (apart from being reported to stdout if 'verbose'\n    is true).\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_path_created")
(NEWLINE)
(KEYWORD if)
(ID "verbose")
(PUNCT ">=")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "removing '%s' (and everything under it)")
(PUNCT ",")
(ID "directory")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "cmdtuples")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "_build_cmdtuple")
(PUNCT "(")
(ID "directory")
(PUNCT ",")
(ID "cmdtuples")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "cmdtuples")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "(")
(ID "cmd")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "abspath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "cmd")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "abspath")
(KEYWORD in)
(ID "_path_created")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "_path_created")
(PUNCT "[")
(ID "abspath")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "error removing %s: %s")
(PUNCT ",")
(ID "directory")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "ensure_relative")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Take the full path 'path', and make it a relative path.\n\n    This is useful to make 'path' the second argument to os.path.join().\n    ")
(NEWLINE)
(ID "drive")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "path")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "drive")
(PUNCT "+")
(ID "path")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "path")
(NEWLINE)
(DEDENT)
(ENDMARKER)
