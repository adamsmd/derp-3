(LIT "Fixer for __metaclass__ = X -> (metaclass=X) methods.\n\n   The various forms of classef (inherits nothing, inherits once, inherints\n   many) don't parse the same in the CST so we look at ALL classes for\n   a __metaclass__ and if we find one normalize the inherits to all be\n   an arglist.\n\n   For one-liner classes ('class X: pass') there is no indent/dedent so\n   we normalize those into having a suite.\n\n   Moving the __metaclass__ into the classdef can also cause the class\n   body to be empty so there is some special casing for that as well.\n\n   This fixer also tries very hard to keep original indenting and spacing\n   in all those corner cases.\n\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pygram")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(PUNCT ",")
(ID "syms")
(PUNCT ",")
(ID "Node")
(PUNCT ",")
(ID "Leaf")
(NEWLINE)
(KEYWORD def)
(ID "has_metaclass")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " we have to check the cls_node without changing it.\n        There are two possiblities:\n          1)  clsdef => suite => simple_stmt => expr_stmt => Leaf('__meta')\n          2)  clsdef => simple_stmt => expr_stmt => Leaf('__meta')\n    ")
(NEWLINE)
(KEYWORD for)
(ID "node")
(KEYWORD in)
(ID "parent")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "suite")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "has_metaclass")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "simple_stmt")
(KEYWORD and)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expr_node")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "expr_node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "expr_stmt")
(KEYWORD and)
(ID "expr_node")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "left_side")
(PUNCT "=")
(ID "expr_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "left_side")
(PUNCT ",")
(ID "Leaf")
(PUNCT ")")
(KEYWORD and)
(ID "left_side")
(PUNCT ".")
(ID "value")
(PUNCT "==")
(LIT "__metaclass__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fixup_parse_tree")
(PUNCT "(")
(ID "cls_node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " one-line classes don't get a suite in the parse tree so we add\n        one to normalize the tree\n    ")
(NEWLINE)
(KEYWORD for)
(ID "node")
(KEYWORD in)
(ID "cls_node")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "suite")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "node")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "cls_node")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "COLON")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "No class suite and no ':'!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "suite")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "suite")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "cls_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "move_node")
(PUNCT "=")
(ID "cls_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "suite")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "move_node")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "move_node")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "cls_node")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "suite")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT "=")
(ID "suite")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fixup_simple_stmt")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "i")
(PUNCT ",")
(ID "stmt_node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " if there is a semi-colon all the parts count as part of the same\n        simple_stmt.  We just want the __metaclass__ part so we move\n        everything after the semi-colon into its own simple_stmt node\n    ")
(NEWLINE)
(KEYWORD for)
(ID "semi_ind")
(PUNCT ",")
(ID "node")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "stmt_node")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "SEMI")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "node")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "new_expr")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "expr_stmt")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "new_stmt")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "simple_stmt")
(PUNCT ",")
(PUNCT "[")
(ID "new_expr")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "stmt_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "semi_ind")
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "move_node")
(PUNCT "=")
(ID "stmt_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "semi_ind")
(PUNCT "]")
(NEWLINE)
(ID "new_expr")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "move_node")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "move_node")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parent")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "new_stmt")
(PUNCT ")")
(NEWLINE)
(ID "new_leaf1")
(PUNCT "=")
(ID "new_stmt")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "old_leaf1")
(PUNCT "=")
(ID "stmt_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "new_leaf1")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "old_leaf1")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_trailing_newline")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "children")
(KEYWORD and)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "NEWLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_metas")
(PUNCT "(")
(ID "cls_node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "node")
(KEYWORD in)
(ID "cls_node")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "suite")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "No class suite!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "simple_node")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "enumerate")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "simple_node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "simple_stmt")
(KEYWORD and)
(ID "simple_node")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "expr_node")
(PUNCT "=")
(ID "simple_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "expr_node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "expr_stmt")
(KEYWORD and)
(ID "expr_node")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "left_node")
(PUNCT "=")
(ID "expr_node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "left_node")
(PUNCT ",")
(ID "Leaf")
(PUNCT ")")
(KEYWORD and)
(ID "left_node")
(PUNCT ".")
(ID "value")
(PUNCT "==")
(LIT "__metaclass__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fixup_simple_stmt")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "i")
(PUNCT ",")
(ID "simple_node")
(PUNCT ")")
(NEWLINE)
(ID "remove_trailing_newline")
(PUNCT "(")
(ID "simple_node")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "i")
(PUNCT ",")
(ID "simple_node")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "fixup_indent")
(PUNCT "(")
(ID "suite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " If an INDENT is followed by a thing with a prefix then nuke the prefix\n        Otherwise we get in trouble when removing __metaclass__ at suite start\n    ")
(NEWLINE)
(ID "kids")
(PUNCT "=")
(ID "suite")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "kids")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT "=")
(ID "kids")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "INDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(ID "kids")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT "=")
(ID "kids")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "Leaf")
(PUNCT ")")
(KEYWORD and)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "!=")
(ID "token")
(PUNCT ".")
(ID "DEDENT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kids")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT ":")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FixMetaclass")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n    classdef<any*>\n    ")
(NEWLINE)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "has_metaclass")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "fixup_parse_tree")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(NEWLINE)
(ID "last_metaclass")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD for)
(ID "suite")
(PUNCT ",")
(ID "i")
(PUNCT ",")
(ID "stmt")
(KEYWORD in)
(ID "find_metas")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last_metaclass")
(PUNCT "=")
(ID "stmt")
(NEWLINE)
(ID "stmt")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text_type")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT "==")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "arglist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arglist")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "arglist")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "arglist")
(PUNCT ",")
(PUNCT "[")
(ID "parent")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "set_child")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(ID "arglist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT "==")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arglist")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "arglist")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(ID "arglist")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arglist")
(PUNCT "=")
(ID "Node")
(PUNCT "(")
(ID "syms")
(PUNCT ".")
(ID "arglist")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "RPAR")
(PUNCT ",")
(LIT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(ID "arglist")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "LPAR")
(PUNCT ",")
(LIT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unexpected class definition")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "meta_txt")
(PUNCT "=")
(ID "last_metaclass")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "meta_txt")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(LIT "metaclass")
(NEWLINE)
(ID "orig_meta_prefix")
(PUNCT "=")
(ID "meta_txt")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD if)
(ID "arglist")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "arglist")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "COMMA")
(PUNCT ",")
(LIT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "meta_txt")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT " ")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meta_txt")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "expr_stmt")
(PUNCT "=")
(ID "last_metaclass")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD assert)
(ID "expr_stmt")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "expr_stmt")
(NEWLINE)
(ID "expr_stmt")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "expr_stmt")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "arglist")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "last_metaclass")
(PUNCT ")")
(NEWLINE)
(ID "fixup_indent")
(PUNCT "(")
(ID "suite")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "suite")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suite")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pass_leaf")
(PUNCT "=")
(ID "Leaf")
(PUNCT "(")
(ID "text_type")
(PUNCT ",")
(LIT "pass")
(PUNCT ")")
(NEWLINE)
(ID "pass_leaf")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "orig_meta_prefix")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "pass_leaf")
(PUNCT ")")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "append_child")
(PUNCT "(")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "NEWLINE")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "suite")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(KEYWORD and)
(PUNCT "(")
(ID "suite")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "INDENT")
(KEYWORD and)
(ID "suite")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "DEDENT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pass_leaf")
(PUNCT "=")
(ID "Leaf")
(PUNCT "(")
(ID "text_type")
(PUNCT ",")
(LIT "pass")
(PUNCT ")")
(NEWLINE)
(ID "suite")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "pass_leaf")
(PUNCT ")")
(NEWLINE)
(ID "suite")
(PUNCT ".")
(ID "insert_child")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "Leaf")
(PUNCT "(")
(ID "token")
(PUNCT ".")
(ID "NEWLINE")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
