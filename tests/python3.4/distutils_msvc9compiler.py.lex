(LIT "distutils.msvc9compiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor the Microsoft Visual Studio 2008.\n\nThe module is compatible with VS 2005 and VS 2008. You can find legacy support\nfor older versions of VS in distutils.msvccompiler.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(ID "DistutilsExecError")
(PUNCT ",")
(ID "DistutilsPlatformError")
(PUNCT ",")
(ID "CompileError")
(PUNCT ",")
(ID "LibError")
(PUNCT ",")
(ID "LinkError")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "CCompiler")
(PUNCT ",")
(ID "gen_preprocess_options")
(PUNCT ",")
(ID "gen_lib_options")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "get_platform")
(NEWLINE)
(KEYWORD import)
(ID "winreg")
(NEWLINE)
(ID "RegOpenKeyEx")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "OpenKeyEx")
(NEWLINE)
(ID "RegEnumKey")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "EnumKey")
(NEWLINE)
(ID "RegEnumValue")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "EnumValue")
(NEWLINE)
(ID "RegError")
(PUNCT "=")
(ID "winreg")
(PUNCT ".")
(ID "error")
(NEWLINE)
(ID "HKEYS")
(PUNCT "=")
(PUNCT "(")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_USERS")
(PUNCT ",")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_CURRENT_USER")
(PUNCT ",")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_LOCAL_MACHINE")
(PUNCT ",")
(ID "winreg")
(PUNCT ".")
(ID "HKEY_CLASSES_ROOT")
(PUNCT ")")
(NEWLINE)
(ID "NATIVE_WIN64")
(PUNCT "=")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT ">")
(LIT 2)
(PUNCT "**")
(LIT 32)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "NATIVE_WIN64")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "VS_BASE")
(PUNCT "=")
(LIT "Software\\Wow6432Node\\Microsoft\\VisualStudio\\%0.1f")
(NEWLINE)
(ID "WINSDK_BASE")
(PUNCT "=")
(LIT "Software\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows")
(NEWLINE)
(ID "NET_BASE")
(PUNCT "=")
(LIT "Software\\Wow6432Node\\Microsoft\\.NETFramework")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "VS_BASE")
(PUNCT "=")
(LIT "Software\\Microsoft\\VisualStudio\\%0.1f")
(NEWLINE)
(ID "WINSDK_BASE")
(PUNCT "=")
(LIT "Software\\Microsoft\\Microsoft SDKs\\Windows")
(NEWLINE)
(ID "NET_BASE")
(PUNCT "=")
(LIT "Software\\Microsoft\\.NETFramework")
(NEWLINE)
(DEDENT)
(ID "PLAT_TO_VCVARS")
(PUNCT "=")
(PUNCT "{")
(LIT "win32")
(PUNCT ":")
(LIT "x86")
(PUNCT ",")
(LIT "win-amd64")
(PUNCT ":")
(LIT "amd64")
(PUNCT ",")
(LIT "win-ia64")
(PUNCT ":")
(LIT "ia64")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "Reg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Helper class to read values from the registry\n    ")
(NEWLINE)
(KEYWORD def)
(ID "get_value")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "HKEYS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "read_values")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "d")
(KEYWORD and)
(ID "key")
(KEYWORD in)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "d")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "get_value")
(PUNCT "=")
(ID "classmethod")
(PUNCT "(")
(ID "get_value")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "read_keys")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of registry keys.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "L")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT "=")
(ID "RegEnumKey")
(PUNCT "(")
(ID "handle")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "L")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "L")
(NEWLINE)
(DEDENT)
(ID "read_keys")
(PUNCT "=")
(ID "classmethod")
(PUNCT "(")
(ID "read_keys")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "read_values")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict of registry keys and values.\n\n        All names are converted to lowercase.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handle")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "d")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "i")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "RegEnumValue")
(PUNCT "(")
(ID "handle")
(PUNCT ",")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "[")
(ID "cls")
(PUNCT ".")
(ID "convert_mbcs")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "cls")
(PUNCT ".")
(ID "convert_mbcs")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(ID "read_values")
(PUNCT "=")
(ID "classmethod")
(PUNCT "(")
(ID "read_values")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "convert_mbcs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dec")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(LIT "decode")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "dec")
(PUNCT "(")
(LIT "mbcs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(ID "convert_mbcs")
(PUNCT "=")
(ID "staticmethod")
(PUNCT "(")
(ID "convert_mbcs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MacroExpander")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "vsbase")
(PUNCT "=")
(ID "VS_BASE")
(PUNCT "%")
(ID "version")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "load_macros")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_macro")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "macro")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT "[")
(LIT "$(%s)")
(PUNCT "%")
(ID "macro")
(PUNCT "]")
(PUNCT "=")
(ID "Reg")
(PUNCT ".")
(ID "get_value")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "load_macros")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "VCInstallDir")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "vsbase")
(PUNCT "+")
(LIT "\\Setup\\VC")
(PUNCT ",")
(LIT "productdir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "VSInstallDir")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "vsbase")
(PUNCT "+")
(LIT "\\Setup\\VS")
(PUNCT ",")
(LIT "productdir")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "FrameworkDir")
(PUNCT ",")
(ID "NET_BASE")
(PUNCT ",")
(LIT "installroot")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "version")
(PUNCT ">=")
(LIT 8.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "FrameworkSDKDir")
(PUNCT ",")
(ID "NET_BASE")
(PUNCT ",")
(LIT "sdkinstallrootv2.0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "KeyError")
(PUNCT "(")
(LIT "sdkinstallrootv2.0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "Python was built with Visual Studio 2008;\nextensions must be built with a compiler than can generate compatible binaries.\nVisual Studio 2008 was not found on this system. If you have Cygwin installed,\nyou can try compiling with MingW32, by passing \"-c mingw32\" to setup.py.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "version")
(PUNCT ">=")
(LIT 9.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "FrameworkVersion")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "vsbase")
(PUNCT ",")
(LIT "clr version")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_macro")
(PUNCT "(")
(LIT "WindowsSdkDir")
(PUNCT ",")
(ID "WINSDK_BASE")
(PUNCT ",")
(LIT "currentinstallfolder")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "p")
(PUNCT "=")
(LIT "Software\\Microsoft\\NET Framework Setup\\Product")
(NEWLINE)
(KEYWORD for)
(ID "base")
(KEYWORD in)
(ID "HKEYS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT "=")
(ID "RegOpenKeyEx")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "RegError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "key")
(PUNCT "=")
(ID "RegEnumKey")
(PUNCT "(")
(ID "h")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "Reg")
(PUNCT ".")
(ID "get_value")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(LIT "%s\\%s")
(PUNCT "%")
(PUNCT "(")
(ID "p")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT "[")
(LIT "$(FrameworkVersion)")
(PUNCT "]")
(PUNCT "=")
(ID "d")
(PUNCT "[")
(LIT "version")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "sub")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "macros")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_build_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the version of MSVC that was used to build Python.\n\n    For Python 2.3 and up, the version number is included in\n    sys.version.  For earlier versions, assume the compiler is MSVC 6.\n    ")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(LIT "MSC v.")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 6)
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "i")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "s")
(PUNCT ",")
(ID "rest")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT " ")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "majorVersion")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(PUNCT "-")
(LIT 6)
(NEWLINE)
(ID "minorVersion")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT "/")
(LIT 10.0)
(NEWLINE)
(KEYWORD if)
(ID "majorVersion")
(PUNCT "==")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "minorVersion")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "majorVersion")
(PUNCT ">=")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "majorVersion")
(PUNCT "+")
(ID "minorVersion")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "normalize_and_reduce_paths")
(PUNCT "(")
(ID "paths")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of normalized paths with duplicates removed.\n\n    The current order of paths is maintained.\n    ")
(NEWLINE)
(ID "reduced_paths")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "np")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "np")
(KEYWORD not)
(KEYWORD in)
(ID "reduced_paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "reduced_paths")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "np")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "reduced_paths")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "removeDuplicates")
(PUNCT "(")
(ID "variable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove duplicate values of an environment variable.\n    ")
(NEWLINE)
(ID "oldList")
(PUNCT "=")
(ID "variable")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(ID "newList")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "oldList")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(KEYWORD not)
(KEYWORD in)
(ID "newList")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "newList")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "newVariable")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "newList")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "newVariable")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_vcvarsall")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find the vcvarsall.bat file\n\n    At first it tries to find the productdir of VS 2008 in the registry. If\n    that fails it falls back to the VS90COMNTOOLS env var.\n    ")
(NEWLINE)
(ID "vsbase")
(PUNCT "=")
(ID "VS_BASE")
(PUNCT "%")
(ID "version")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "productdir")
(PUNCT "=")
(ID "Reg")
(PUNCT ".")
(ID "get_value")
(PUNCT "(")
(LIT "%s\\Setup\\VC")
(PUNCT "%")
(ID "vsbase")
(PUNCT ",")
(LIT "productdir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Unable to find productdir in registry")
(PUNCT ")")
(NEWLINE)
(ID "productdir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "productdir")
(KEYWORD or)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "productdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "toolskey")
(PUNCT "=")
(LIT "VS%0.f0COMNTOOLS")
(PUNCT "%")
(ID "version")
(NEWLINE)
(ID "toolsdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "toolskey")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "toolsdir")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "toolsdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "productdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "toolsdir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "pardir")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "pardir")
(PUNCT ",")
(LIT "VC")
(PUNCT ")")
(NEWLINE)
(ID "productdir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "productdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "productdir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%s is not a valid directory")
(PUNCT "%")
(ID "productdir")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Env var %s is not set or invalid")
(PUNCT "%")
(ID "toolskey")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "productdir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "No productdir found")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "vcvarsall")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "productdir")
(PUNCT ",")
(LIT "vcvarsall.bat")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "vcvarsall")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "vcvarsall")
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Unable to find vcvarsall.bat")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "query_vcvarsall")
(PUNCT "(")
(ID "version")
(PUNCT ",")
(ID "arch")
(PUNCT "=")
(LIT "x86")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Launch vcvarsall.bat and read the settings from its environment\n    ")
(NEWLINE)
(ID "vcvarsall")
(PUNCT "=")
(ID "find_vcvarsall")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(ID "interesting")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(PUNCT "(")
(LIT "include")
(PUNCT ",")
(LIT "lib")
(PUNCT ",")
(LIT "libpath")
(PUNCT ",")
(LIT "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "vcvarsall")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "Unable to find vcvarsall.bat")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Calling 'vcvarsall.bat %s' (version=%s)")
(PUNCT ",")
(ID "arch")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(NEWLINE)
(ID "popen")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "Popen")
(PUNCT "(")
(LIT "\"%s\" %s & set")
(PUNCT "%")
(PUNCT "(")
(ID "vcvarsall")
(PUNCT ",")
(ID "arch")
(PUNCT ")")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "popen")
(PUNCT ".")
(ID "communicate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "popen")
(PUNCT ".")
(ID "wait")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(ID "stderr")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "mbcs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "stdout")
(PUNCT "=")
(ID "stdout")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "mbcs")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "stdout")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "Reg")
(PUNCT ".")
(ID "convert_mbcs")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "=")
(KEYWORD not)
(KEYWORD in)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "=")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "key")
(PUNCT "=")
(ID "key")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "key")
(KEYWORD in)
(ID "interesting")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "value")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "removeDuplicates")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "popen")
(PUNCT ".")
(ID "stdout")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "popen")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT "!=")
(ID "len")
(PUNCT "(")
(ID "interesting")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "result")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ID "VERSION")
(PUNCT "=")
(ID "get_build_version")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "VERSION")
(PUNCT "<")
(LIT 8.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "VC %0.1f is not supported by this module")
(PUNCT "%")
(ID "VERSION")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MSVCCompiler")
(PUNCT "(")
(ID "CCompiler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Concrete class that implements an interface to Microsoft Visual C++,\n       as defined by the CCompiler abstract class.")
(NEWLINE)
(ID "compiler_type")
(PUNCT "=")
(LIT "msvc")
(NEWLINE)
(ID "executables")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "_c_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".c")
(PUNCT "]")
(NEWLINE)
(ID "_cpp_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".cc")
(PUNCT ",")
(LIT ".cpp")
(PUNCT ",")
(LIT ".cxx")
(PUNCT "]")
(NEWLINE)
(ID "_rc_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".rc")
(PUNCT "]")
(NEWLINE)
(ID "_mc_extensions")
(PUNCT "=")
(PUNCT "[")
(LIT ".mc")
(PUNCT "]")
(NEWLINE)
(ID "src_extensions")
(PUNCT "=")
(PUNCT "(")
(ID "_c_extensions")
(PUNCT "+")
(ID "_cpp_extensions")
(PUNCT "+")
(ID "_rc_extensions")
(PUNCT "+")
(ID "_mc_extensions")
(PUNCT ")")
(NEWLINE)
(ID "res_extension")
(PUNCT "=")
(LIT ".res")
(NEWLINE)
(ID "obj_extension")
(PUNCT "=")
(LIT ".obj")
(NEWLINE)
(ID "static_lib_extension")
(PUNCT "=")
(LIT ".lib")
(NEWLINE)
(ID "shared_lib_extension")
(PUNCT "=")
(LIT ".dll")
(NEWLINE)
(ID "static_lib_format")
(PUNCT "=")
(ID "shared_lib_format")
(PUNCT "=")
(LIT "%s%s")
(NEWLINE)
(ID "exe_extension")
(PUNCT "=")
(LIT ".exe")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "CCompiler")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "verbose")
(PUNCT ",")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT "=")
(ID "VERSION")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__root")
(PUNCT "=")
(LIT "Software\\Microsoft\\VisualStudio")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "plat_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__arch")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "initialize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "plat_name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ",")
(LIT "don't init multiple times")
(NEWLINE)
(KEYWORD if)
(ID "plat_name")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plat_name")
(PUNCT "=")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ok_plats")
(PUNCT "=")
(LIT "win32")
(PUNCT ",")
(LIT "win-amd64")
(PUNCT ",")
(LIT "win-ia64")
(NEWLINE)
(KEYWORD if)
(ID "plat_name")
(KEYWORD not)
(KEYWORD in)
(ID "ok_plats")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "--plat-name must be one of %s")
(PUNCT "%")
(PUNCT "(")
(ID "ok_plats")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "DISTUTILS_USE_SDK")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(LIT "MSSdk")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "cl.exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "=")
(LIT "cl.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linker")
(PUNCT "=")
(LIT "link.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lib")
(PUNCT "=")
(LIT "lib.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "=")
(LIT "rc.exe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mc")
(PUNCT "=")
(LIT "mc.exe")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "plat_name")
(PUNCT "==")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "plat_name")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plat_spec")
(PUNCT "=")
(ID "PLAT_TO_VCVARS")
(PUNCT "[")
(ID "plat_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "plat_spec")
(PUNCT "=")
(ID "PLAT_TO_VCVARS")
(PUNCT "[")
(ID "get_platform")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT "+")
(LIT "_")
(PUNCT "+")
(ID "PLAT_TO_VCVARS")
(PUNCT "[")
(ID "plat_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "vc_env")
(PUNCT "=")
(ID "query_vcvarsall")
(PUNCT "(")
(ID "VERSION")
(PUNCT ",")
(ID "plat_spec")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT "=")
(ID "vc_env")
(PUNCT "[")
(LIT "path")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "lib")
(PUNCT "]")
(PUNCT "=")
(ID "vc_env")
(PUNCT "[")
(LIT "lib")
(PUNCT "]")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "include")
(PUNCT "]")
(PUNCT "=")
(ID "vc_env")
(PUNCT "[")
(LIT "include")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "Python was built with %s, ")
(LIT "and extensions need to be built with the same ")
(LIT "version of the compiler, but it isn't installed.")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "__product")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "cl.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "linker")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "link.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lib")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "lib.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "rc.exe")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "mc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_exe")
(PUNCT "(")
(LIT "mc.exe")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "path")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT "=")
(ID "normalize_and_reduce_paths")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ")")
(NEWLINE)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "path")
(PUNCT "]")
(PUNCT "=")
(LIT ";")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "preprocess_options")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__arch")
(PUNCT "==")
(LIT "x86")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compile_options")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Ox")
(PUNCT ",")
(LIT "/MD")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/DNDEBUG")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compile_options_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Od")
(PUNCT ",")
(LIT "/MDd")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/Z7")
(PUNCT ",")
(LIT "/D_DEBUG")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compile_options")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Ox")
(PUNCT ",")
(LIT "/MD")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/GS-")
(PUNCT ",")
(LIT "/DNDEBUG")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compile_options_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT ",")
(LIT "/Od")
(PUNCT ",")
(LIT "/MDd")
(PUNCT ",")
(LIT "/W3")
(PUNCT ",")
(LIT "/GS-")
(PUNCT ",")
(LIT "/Z7")
(PUNCT ",")
(LIT "/D_DEBUG")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_shared")
(PUNCT "=")
(PUNCT "[")
(LIT "/DLL")
(PUNCT ",")
(LIT "/nologo")
(PUNCT ",")
(LIT "/INCREMENTAL:NO")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__version")
(PUNCT ">=")
(LIT 7)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(PUNCT "=")
(PUNCT "[")
(LIT "/DLL")
(PUNCT ",")
(LIT "/nologo")
(PUNCT ",")
(LIT "/INCREMENTAL:no")
(PUNCT ",")
(LIT "/DEBUG")
(PUNCT ",")
(LIT "/pdb:None")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "ldflags_static")
(PUNCT "=")
(PUNCT "[")
(LIT "/nologo")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "object_filenames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "source_filenames")
(PUNCT ",")
(ID "strip_dir")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "output_dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(ID "output_dir")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "obj_names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "src_name")
(KEYWORD in)
(ID "source_filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "base")
(PUNCT ",")
(ID "ext")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "src_name")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitdrive")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "base")
(PUNCT "[")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isabs")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "src_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(LIT "Don't know how to compile %s")
(PUNCT "%")
(ID "src_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "strip_dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_rc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "res_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "res_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "obj_extension")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "obj_names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sources")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "macros")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "extra_preargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "depends")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "compile_info")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_setup_compile")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "macros")
(PUNCT ",")
(ID "include_dirs")
(PUNCT ",")
(ID "sources")
(PUNCT ",")
(ID "depends")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(ID "macros")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "extra_postargs")
(PUNCT ",")
(ID "pp_opts")
(PUNCT ",")
(ID "build")
(PUNCT "=")
(ID "compile_info")
(NEWLINE)
(ID "compile_opts")
(PUNCT "=")
(ID "extra_preargs")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "compile_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/c")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile_opts")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compile_options_debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "compile_opts")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compile_options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(ID "objects")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "build")
(PUNCT "[")
(ID "obj")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "src")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_c_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_opt")
(PUNCT "=")
(LIT "/Tc")
(PUNCT "+")
(ID "src")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_cpp_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_opt")
(PUNCT "=")
(LIT "/Tp")
(PUNCT "+")
(ID "src")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_rc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "input_opt")
(PUNCT "=")
(ID "src")
(NEWLINE)
(ID "output_opt")
(PUNCT "=")
(LIT "/fo")
(PUNCT "+")
(ID "obj")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "]")
(PUNCT "+")
(ID "pp_opts")
(PUNCT "+")
(PUNCT "[")
(ID "output_opt")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "input_opt")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "ext")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_mc_extensions")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(NEWLINE)
(ID "rc_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "mc")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(LIT "-h")
(PUNCT ",")
(ID "h_dir")
(PUNCT ",")
(LIT "-r")
(PUNCT ",")
(ID "rc_dir")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "src")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "src")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "rc_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "rc_dir")
(PUNCT ",")
(ID "base")
(PUNCT "+")
(LIT ".rc")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "rc")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(LIT "/fo")
(PUNCT "+")
(ID "obj")
(PUNCT "]")
(PUNCT "+")
(PUNCT "[")
(ID "rc_file")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(LIT "Don't know how to compile %s to %s")
(PUNCT "%")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "output_opt")
(PUNCT "=")
(LIT "/Fo")
(PUNCT "+")
(ID "obj")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "cc")
(PUNCT "]")
(PUNCT "+")
(ID "compile_opts")
(PUNCT "+")
(ID "pp_opts")
(PUNCT "+")
(PUNCT "[")
(ID "input_opt")
(PUNCT ",")
(ID "output_opt")
(PUNCT "]")
(PUNCT "+")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CompileError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "objects")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_static_lib")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "output_libname")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fix_object_args")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(ID "output_filename")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "output_libname")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_need_link")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib_args")
(PUNCT "=")
(ID "objects")
(PUNCT "+")
(PUNCT "[")
(LIT "/OUT:")
(PUNCT "+")
(ID "output_filename")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "lib")
(PUNCT "]")
(PUNCT "+")
(ID "lib_args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LibError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "skipping %s (up-to-date)")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "link")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target_desc")
(PUNCT ",")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "export_symbols")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "extra_preargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra_postargs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "build_temp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "target_lang")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "initialized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fix_object_args")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_dir")
(PUNCT ")")
(NEWLINE)
(ID "fixed_args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fix_lib_args")
(PUNCT "(")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "libraries")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ")")
(PUNCT "=")
(ID "fixed_args")
(NEWLINE)
(KEYWORD if)
(ID "runtime_library_dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "I don't know what to do with 'runtime_library_dirs': ")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "runtime_library_dirs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lib_opts")
(PUNCT "=")
(ID "gen_lib_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "library_dirs")
(PUNCT ",")
(ID "runtime_library_dirs")
(PUNCT ",")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "output_dir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "output_filename")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "output_dir")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_need_link")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "target_desc")
(PUNCT "==")
(ID "CCompiler")
(PUNCT ".")
(ID "EXECUTABLE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared_debug")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ldflags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "ldflags_shared")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "export_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "sym")
(KEYWORD in)
(PUNCT "(")
(ID "export_symbols")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "export_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/EXPORT:")
(PUNCT "+")
(ID "sym")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ld_args")
(PUNCT "=")
(PUNCT "(")
(ID "ldflags")
(PUNCT "+")
(ID "lib_opts")
(PUNCT "+")
(ID "export_opts")
(PUNCT "+")
(ID "objects")
(PUNCT "+")
(PUNCT "[")
(LIT "/OUT:")
(PUNCT "+")
(ID "output_filename")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "build_temp")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "objects")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "export_symbols")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "(")
(ID "dll_name")
(PUNCT ",")
(ID "dll_ext")
(PUNCT ")")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "implib_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "build_temp")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "dll_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "ld_args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/IMPLIB:")
(PUNCT "+")
(ID "implib_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "manifest_setup_ldargs")
(PUNCT "(")
(ID "output_filename")
(PUNCT ",")
(ID "build_temp")
(PUNCT ",")
(ID "ld_args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "extra_preargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ld_args")
(PUNCT "[")
(PUNCT ":")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "extra_preargs")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "extra_postargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ld_args")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "extra_postargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "mkpath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "linker")
(PUNCT "]")
(PUNCT "+")
(ID "ld_args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LinkError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "mfinfo")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "manifest_get_embed_info")
(PUNCT "(")
(ID "target_desc")
(PUNCT ",")
(ID "ld_args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mfinfo")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mffilename")
(PUNCT ",")
(ID "mfid")
(PUNCT "=")
(ID "mfinfo")
(NEWLINE)
(ID "out_arg")
(PUNCT "=")
(LIT "-outputresource:%s;%s")
(PUNCT "%")
(PUNCT "(")
(ID "output_filename")
(PUNCT ",")
(ID "mfid")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "spawn")
(PUNCT "(")
(PUNCT "[")
(LIT "mt.exe")
(PUNCT ",")
(LIT "-nologo")
(PUNCT ",")
(LIT "-manifest")
(PUNCT ",")
(ID "mffilename")
(PUNCT ",")
(ID "out_arg")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsExecError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LinkError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "skipping %s (up-to-date)")
(PUNCT ",")
(ID "output_filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "manifest_setup_ldargs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "output_filename")
(PUNCT ",")
(ID "build_temp")
(PUNCT ",")
(ID "ld_args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "temp_manifest")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "build_temp")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "output_filename")
(PUNCT ")")
(PUNCT "+")
(LIT ".manifest")
(PUNCT ")")
(NEWLINE)
(ID "ld_args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "/MANIFESTFILE:")
(PUNCT "+")
(ID "temp_manifest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "manifest_get_embed_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "target_desc")
(PUNCT ",")
(ID "ld_args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "ld_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "arg")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "/MANIFESTFILE:")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "temp_manifest")
(PUNCT "=")
(ID "arg")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "target_desc")
(PUNCT "==")
(ID "CCompiler")
(PUNCT ".")
(ID "EXECUTABLE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mfid")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mfid")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "temp_manifest")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_remove_visual_c_ref")
(PUNCT "(")
(ID "temp_manifest")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "temp_manifest")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "temp_manifest")
(PUNCT ",")
(ID "mfid")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_remove_visual_c_ref")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "manifest_file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "manifest_f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "manifest_file")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "manifest_buf")
(PUNCT "=")
(ID "manifest_f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "manifest_f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pattern")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "<assemblyIdentity.*?name=(\"|')Microsoft\\.")
(LIT "VC\\d{2}\\.CRT(\"|').*?(/>|</assemblyIdentity>)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "DOTALL")
(PUNCT ")")
(NEWLINE)
(ID "manifest_buf")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "manifest_buf")
(PUNCT ")")
(NEWLINE)
(ID "pattern")
(PUNCT "=")
(LIT "<dependentAssembly>\\s*</dependentAssembly>")
(NEWLINE)
(ID "manifest_buf")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(LIT "")
(PUNCT ",")
(ID "manifest_buf")
(PUNCT ")")
(NEWLINE)
(ID "pattern")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "<assemblyIdentity.*?name=(?:\"|')(.+?)(?:\"|')")
(LIT ".*?(?:/>|</assemblyIdentity>)")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "DOTALL")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "pattern")
(PUNCT ",")
(ID "manifest_buf")
(PUNCT ")")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "manifest_f")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "manifest_file")
(PUNCT ",")
(LIT "w")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "manifest_f")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "manifest_buf")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "manifest_file")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "manifest_f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "library_dir_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "/LIBPATH:")
(PUNCT "+")
(ID "dir")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "runtime_library_dir_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsPlatformError")
(PUNCT "(")
(LIT "don't know how to set runtime library search path for MSVC++")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "library_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lib")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "lib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_library_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dirs")
(PUNCT ",")
(ID "lib")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "try_names")
(PUNCT "=")
(PUNCT "[")
(ID "lib")
(PUNCT "+")
(LIT "_d")
(PUNCT ",")
(ID "lib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "try_names")
(PUNCT "=")
(PUNCT "[")
(ID "lib")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "try_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "libfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "library_filename")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "libfile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "libfile")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_exe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return path to an MSVC executable program.\n\n        Tries to find the program in several places: first, one of the\n        MSVC program search paths from the registry; next, the directories\n        in the PATH environment variable.  If any of those work, return an\n        absolute path that is known to exist.  If none of them work, just\n        return the original program name, 'exe'.\n        ")
(NEWLINE)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "__paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "exe")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fn")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "p")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "Path")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ";")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fn")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "p")
(PUNCT ")")
(PUNCT ",")
(ID "exe")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "fn")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fn")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "exe")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
