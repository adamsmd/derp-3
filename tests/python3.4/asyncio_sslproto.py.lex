(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "protocols")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "transports")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "log")
(KEYWORD import)
(ID "logger")
(NEWLINE)
(KEYWORD def)
(ID "_create_transport_context")
(PUNCT "(")
(ID "server_side")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "server_side")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Server side SSL needs a valid SSLContext")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "ssl")
(PUNCT ",")
(LIT "create_default_context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sslcontext")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "create_default_context")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "server_hostname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sslcontext")
(PUNCT ".")
(ID "check_hostname")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sslcontext")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "SSLContext")
(PUNCT "(")
(ID "ssl")
(PUNCT ".")
(ID "PROTOCOL_SSLv23")
(PUNCT ")")
(NEWLINE)
(ID "sslcontext")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "ssl")
(PUNCT ".")
(ID "OP_NO_SSLv2")
(NEWLINE)
(ID "sslcontext")
(PUNCT ".")
(ID "options")
(PUNCT "|=")
(ID "ssl")
(PUNCT ".")
(ID "OP_NO_SSLv3")
(NEWLINE)
(ID "sslcontext")
(PUNCT ".")
(ID "set_default_verify_paths")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sslcontext")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "CERT_REQUIRED")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "sslcontext")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_is_sslproto_available")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hasattr")
(PUNCT "(")
(ID "ssl")
(PUNCT ",")
(LIT "MemoryBIO")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_UNWRAPPED")
(PUNCT "=")
(LIT "UNWRAPPED")
(NEWLINE)
(ID "_DO_HANDSHAKE")
(PUNCT "=")
(LIT "DO_HANDSHAKE")
(NEWLINE)
(ID "_WRAPPED")
(PUNCT "=")
(LIT "WRAPPED")
(NEWLINE)
(ID "_SHUTDOWN")
(PUNCT "=")
(LIT "SHUTDOWN")
(NEWLINE)
(KEYWORD class)
(ID "_SSLPipe")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An SSL \"Pipe\".\n\n    An SSL pipe allows you to communicate with an SSL/TLS protocol instance\n    through memory buffers. It can be used to implement a security layer for an\n    existing connection where you don't have access to the connection's file\n    descriptor, or for some reason you don't want to use it.\n\n    An SSL pipe can be in \"wrapped\" and \"unwrapped\" mode. In unwrapped mode,\n    data is passed through untransformed. In wrapped mode, application level\n    data is encrypted to SSL record level data and vice versa. The SSL record\n    level is the lowest level in the SSL protocol suite and is what travels\n    as-is over the wire.\n\n    An SslPipe initially is in \"unwrapped\" mode. To start SSL, call\n    do_handshake(). To shutdown SSL again, call unwrap().\n    ")
(NEWLINE)
(ID "max_size")
(PUNCT "=")
(LIT 256)
(PUNCT "*")
(LIT 1024)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ",")
(ID "server_side")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        The *context* argument specifies the ssl.SSLContext to use.\n\n        The *server_side* argument indicates whether this is a server side or\n        client side transport.\n\n        The optional *server_hostname* argument can be used to specify the\n        hostname you are connecting to. You may only specify this parameter if\n        the _ssl module supports Server Name Indication (SNI).\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_server_side")
(PUNCT "=")
(ID "server_side")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(PUNCT "=")
(ID "server_hostname")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "=")
(ID "_UNWRAPPED")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_incoming")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "MemoryBIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_outgoing")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "MemoryBIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handshake_cb")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shutdown_cb")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "context")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The SSL context passed to the constructor.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_context")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "ssl_object")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The internal ssl.SSLObject instance.\n\n        Return None if the pipe is not wrapped.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "need_ssldata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Whether more record level data is needed to complete a handshake\n        that is currently in progress.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "wrapped")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        Whether a security layer is currently in effect.\n\n        Return False during handshake.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_WRAPPED")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "do_handshake")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Start the SSL handshake.\n\n        Return a list of ssldata. A ssldata element is a list of buffers\n\n        The optional *callback* argument can be used to install a callback that\n        will be called when the handshake is complete. The callback will be\n        called with None if successful, else an exception instance.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "!=")
(ID "_UNWRAPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "handshake in progress or completed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "wrap_bio")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_incoming")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_outgoing")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_server_side")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "=")
(ID "_DO_HANDSHAKE")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handshake_cb")
(PUNCT "=")
(ID "callback")
(NEWLINE)
(ID "ssldata")
(PUNCT ",")
(ID "appdata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "feed_ssldata")
(PUNCT "(")
(LIT #"")
(PUNCT ",")
(ID "only_handshake")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "appdata")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(NEWLINE)
(KEYWORD return)
(ID "ssldata")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Start the SSL shutdown sequence.\n\n        Return a list of ssldata. A ssldata element is a list of buffers\n\n        The optional *callback* argument can be used to install a callback that\n        will be called when the shutdown is complete. The callback will be\n        called without arguments.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_UNWRAPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "no security layer present")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_SHUTDOWN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "shutdown in progress")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_state")
(KEYWORD in)
(PUNCT "(")
(ID "_WRAPPED")
(PUNCT ",")
(ID "_DO_HANDSHAKE")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "=")
(ID "_SHUTDOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_shutdown_cb")
(PUNCT "=")
(ID "callback")
(NEWLINE)
(ID "ssldata")
(PUNCT ",")
(ID "appdata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "feed_ssldata")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "appdata")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(KEYWORD or)
(ID "appdata")
(PUNCT "==")
(PUNCT "[")
(LIT #"")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "ssldata")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "feed_eof")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a potentially \"ragged\" EOF.\n\n        This method will raise an SSL_ERROR_EOF exception if the EOF is\n        unexpected.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_incoming")
(PUNCT ".")
(ID "write_eof")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ssldata")
(PUNCT ",")
(ID "appdata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "feed_ssldata")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "appdata")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(KEYWORD or)
(ID "appdata")
(PUNCT "==")
(PUNCT "[")
(LIT #"")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "feed_ssldata")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "only_handshake")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Feed SSL record level data into the pipe.\n\n        The data must be a bytes instance. It is OK to send an empty bytes\n        instance. This can be used to get ssldata for a handshake initiated by\n        this endpoint.\n\n        Return a (ssldata, appdata) tuple. The ssldata element is a list of\n        buffers containing SSL data that needs to be sent to the remote SSL.\n\n        The appdata element is a list of buffers containing plaintext data that\n        needs to be forwarded to the application. The appdata list may contain\n        an empty buffer indicating an SSL \"close_notify\" alert. This alert must\n        be acknowledged by calling shutdown().\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_UNWRAPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "appdata")
(PUNCT "=")
(PUNCT "[")
(ID "data")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "appdata")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(ID "appdata")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_incoming")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ssldata")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "appdata")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_DO_HANDSHAKE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "do_handshake")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "=")
(ID "_WRAPPED")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_handshake_cb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handshake_cb")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "only_handshake")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "ssldata")
(PUNCT ",")
(ID "appdata")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_WRAPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "max_size")
(PUNCT ")")
(NEWLINE)
(ID "appdata")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_SHUTDOWN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "=")
(ID "_UNWRAPPED")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_shutdown_cb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_shutdown_cb")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_UNWRAPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "appdata")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_incoming")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ssl")
(PUNCT ".")
(ID "SSLError")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "CertificateError")
(PUNCT ")")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(LIT "errno")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_READ")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_WRITE")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_SYSCALL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_DO_HANDSHAKE")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_handshake_cb")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handshake_cb")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(PUNCT "=")
(PUNCT "(")
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_READ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_outgoing")
(PUNCT ".")
(ID "pending")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_outgoing")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "ssldata")
(PUNCT ",")
(ID "appdata")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "feed_appdata")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "offset")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Feed plaintext data into the pipe.\n\n        Return an (ssldata, offset) tuple. The ssldata element is a list of\n        buffers containing record level data that needs to be sent to the\n        remote SSL instance. The offset is the number of plaintext bytes that\n        were processed, which may be less than the length of data.\n\n        NOTE: In case of short writes, this call MUST be retried with the SAME\n        buffer passed into the *data* argument (i.e. the id() must be the\n        same). This is an OpenSSL requirement. A further particularity is that\n        a short write will always have offset == 0, because the _ssl module\n        does not enable partial writes. And even though the offset is zero,\n        there will still be encrypted data in ssldata.\n        ")
(NEWLINE)
(KEYWORD assert)
(LIT 0)
(PUNCT "<=")
(ID "offset")
(PUNCT "<=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_state")
(PUNCT "==")
(ID "_UNWRAPPED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "offset")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT "=")
(PUNCT "[")
(ID "data")
(PUNCT "[")
(ID "offset")
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "ssldata")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "ssldata")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "view")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "offset")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "view")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "offset")
(PUNCT "+=")
(ID "self")
(PUNCT ".")
(ID "_sslobj")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "view")
(PUNCT "[")
(ID "offset")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ssl")
(PUNCT ".")
(ID "SSLError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "reason")
(PUNCT "==")
(LIT "PROTOCOL_IS_SHUTDOWN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_READ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "errno")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_READ")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_WRITE")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_SYSCALL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(PUNCT "=")
(PUNCT "(")
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "ssl")
(PUNCT ".")
(ID "SSL_ERROR_WANT_READ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_outgoing")
(PUNCT ".")
(ID "pending")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_outgoing")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "offset")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "view")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_need_ssldata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "ssldata")
(PUNCT ",")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_SSLProtocolTransport")
(PUNCT "(")
(ID "transports")
(PUNCT ".")
(ID "_FlowControlMixin")
(PUNCT ",")
(ID "transports")
(PUNCT ".")
(ID "Transport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ",")
(ID "ssl_protocol")
(PUNCT ",")
(ID "app_protocol")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT "=")
(ID "ssl_protocol")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT "=")
(ID "app_protocol")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_extra_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get optional transport information.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_get_extra_info")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the transport.\n\n        Buffered data will be flushed asynchronously.  No more data\n        will be received.  After all buffered data is flushed, the\n        protocol's connection_lost() method will (eventually) called\n        with None as its argument.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_start_shutdown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT ">=")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_closed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "unclosed transport %r")
(PUNCT "%")
(ID "self")
(PUNCT ",")
(ID "ResourceWarning")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pause_reading")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pause the receiving end.\n\n        No data will be passed to the protocol's data_received()\n        method until resume_reading() is called.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "pause_reading")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resume_reading")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Resume the receiving end.\n\n        Data received will once again be passed to the protocol's\n        data_received() method.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "resume_reading")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_write_buffer_limits")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "high")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "low")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the high- and low-water limits for write flow control.\n\n        These two values control when to call the protocol's\n        pause_writing() and resume_writing() methods.  If specified,\n        the low-water limit must be less than or equal to the\n        high-water limit.  Neither value can be negative.\n\n        The defaults are implementation-specific.  If only the\n        high-water limit is given, the low-water limit defaults to a\n        implementation-specific value less than or equal to the\n        high-water limit.  Setting high to zero forces low to zero as\n        well, and causes pause_writing() to be called whenever the\n        buffer becomes non-empty.  Setting low to zero causes\n        resume_writing() to be called only once the buffer is empty.\n        Use of zero for either limit is generally sub-optimal as it\n        reduces opportunities for doing I/O and computation\n        concurrently.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "set_write_buffer_limits")
(PUNCT "(")
(ID "high")
(PUNCT ",")
(ID "low")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_write_buffer_size")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current size of the write buffer.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "get_write_buffer_size")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write some data bytes to the transport.\n\n        This does not block; it buffers the data and arranges for it\n        to be sent out asynchronously.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ",")
(ID "memoryview")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "data: expecting a bytes-like instance, got {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_write_appdata")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "can_write_eof")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if this transport supports write_eof(), False if not.")
(NEWLINE)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "abort")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the transport immediately.\n\n        Buffered data will be lost.  No more data will be received.\n        The protocol's connection_lost() method will (eventually) be\n        called with None as its argument.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ssl_protocol")
(PUNCT ".")
(ID "_abort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SSLProtocol")
(PUNCT "(")
(ID "protocols")
(PUNCT ".")
(ID "Protocol")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "SSL protocol.\n\n    Implementation of SSL on top of a socket using incoming and outgoing\n    buffers which are ssl.MemoryBIO objects.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ",")
(ID "app_protocol")
(PUNCT ",")
(ID "sslcontext")
(PUNCT ",")
(ID "waiter")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ssl")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "stdlib ssl module not available")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sslcontext")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sslcontext")
(PUNCT "=")
(ID "_create_transport_context")
(PUNCT "(")
(ID "server_side")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_server_side")
(PUNCT "=")
(ID "server_side")
(NEWLINE)
(KEYWORD if)
(ID "server_hostname")
(KEYWORD and)
(KEYWORD not)
(ID "server_side")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(PUNCT "=")
(ID "server_hostname")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_sslcontext")
(PUNCT "=")
(ID "sslcontext")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extra")
(PUNCT "=")
(ID "dict")
(PUNCT "(")
(ID "sslcontext")
(PUNCT "=")
(ID "sslcontext")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "deque")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_buffer_size")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_waiter")
(PUNCT "=")
(ID "waiter")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT "=")
(ID "app_protocol")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_transport")
(PUNCT "=")
(ID "_SSLProtocolTransport")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_session_established")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_in_handshake")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_in_shutdown")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_wakeup_waiter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_waiter")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_waiter")
(PUNCT ".")
(ID "cancelled")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exc")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_waiter")
(PUNCT ".")
(ID "set_exception")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_waiter")
(PUNCT ".")
(ID "set_result")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_waiter")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connection_made")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "transport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called when the low-level connection is made.\n\n        Start the SSL handshake.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT "=")
(ID "transport")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT "=")
(ID "_SSLPipe")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_sslcontext")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_server_side")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_start_handshake")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connection_lost")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called when the low-level connection is lost or closed.\n\n        The argument is an exception object or None (the latter\n        meaning a regular EOF is received or the connection was\n        aborted or closed).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_session_established")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_session_established")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ".")
(ID "connection_lost")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_transport")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pause_writing")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called when the low-level transport's buffer goes over\n        the high-water mark.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ".")
(ID "pause_writing")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resume_writing")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called when the low-level transport's buffer drains below\n        the low-water mark.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ".")
(ID "resume_writing")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "data_received")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called when some SSL data is received.\n\n        The argument is a bytes object.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT ",")
(ID "appdata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT ".")
(ID "feed_ssldata")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ssl")
(PUNCT ".")
(ID "SSLError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "%r: SSL error %s (reason %s)")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "errno")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "reason")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_abort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "chunk")
(KEYWORD in)
(ID "ssldata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "chunk")
(KEYWORD in)
(ID "appdata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ".")
(ID "data_received")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_start_shutdown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "eof_received")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Called when the other end of the low-level stream\n        is half-closed.\n\n        If this returns a false value (including None), the transport\n        will close itself.  If it returns a true value, closing the\n        transport is up to the protocol.\n        ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r received EOF")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_wakeup_waiter")
(PUNCT "(")
(ID "ConnectionResetError")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_in_handshake")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keep_open")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ".")
(ID "eof_received")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "keep_open")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "returning true from eof_received() ")
(LIT "has no effect when using ssl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_extra_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_extra")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_extra")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "get_extra_info")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_start_shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_in_shutdown")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_in_shutdown")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_appdata")
(PUNCT "(")
(LIT #"")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_appdata")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_buffer_size")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_process_write_backlog")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_start_handshake")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r starts SSL handshake")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_handshake_start_time")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handshake_start_time")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_in_handshake")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(LIT #"")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_process_write_backlog")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_on_handshake_complete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handshake_exc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_in_handshake")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "sslobj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT ".")
(ID "ssl_object")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "handshake_exc")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "handshake_exc")
(NEWLINE)
(DEDENT)
(ID "peercert")
(PUNCT "=")
(ID "sslobj")
(PUNCT ".")
(ID "getpeercert")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_sslcontext")
(PUNCT ",")
(LIT "check_hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_sslcontext")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "!=")
(ID "ssl")
(PUNCT ".")
(ID "CERT_NONE")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssl")
(PUNCT ".")
(ID "match_hostname")
(PUNCT "(")
(ID "peercert")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_server_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "BaseException")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "ssl")
(PUNCT ".")
(ID "CertificateError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "%r: SSL handshake failed ")
(LIT "on verifying the certificate")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "%r: SSL handshake failed")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_wakeup_waiter")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "_handshake_start_time")
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r: SSL handshake took %.1f ms")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "dt")
(PUNCT "*")
(LIT 1000.0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_extra")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "peercert")
(PUNCT "=")
(ID "peercert")
(PUNCT ",")
(ID "cipher")
(PUNCT "=")
(ID "sslobj")
(PUNCT ".")
(ID "cipher")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "compression")
(PUNCT "=")
(ID "sslobj")
(PUNCT ".")
(ID "compression")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_app_protocol")
(PUNCT ".")
(ID "connection_made")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_app_transport")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_wakeup_waiter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_session_established")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_process_write_backlog")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_write_backlog")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_transport")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT ",")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT ",")
(ID "offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT ".")
(ID "feed_appdata")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "offset")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT ".")
(ID "do_handshake")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_on_handshake_complete")
(PUNCT ")")
(NEWLINE)
(ID "offset")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssldata")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_finalize")
(PUNCT ")")
(NEWLINE)
(ID "offset")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "chunk")
(KEYWORD in)
(ID "ssldata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "offset")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_sslpipe")
(PUNCT ".")
(ID "need_ssldata")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "_paused")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "resume_reading")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_write_backlog")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_buffer_size")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "BaseException")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_in_handshake")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_on_handshake_complete")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fatal_error")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(LIT "Fatal error on SSL transport")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_fatal_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(LIT "Fatal error on transport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(PUNCT "(")
(ID "BrokenPipeError")
(PUNCT ",")
(ID "ConnectionResetError")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r: %s")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_exception_handler")
(PUNCT "(")
(PUNCT "{")
(LIT "message")
(PUNCT ":")
(ID "message")
(PUNCT ",")
(LIT "exception")
(PUNCT ":")
(ID "exc")
(PUNCT ",")
(LIT "transport")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ",")
(LIT "protocol")
(PUNCT ":")
(ID "self")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "_force_close")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_finalize")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_transport")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_abort")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_transport")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_transport")
(PUNCT ".")
(ID "abort")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_finalize")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
