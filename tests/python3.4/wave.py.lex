(LIT "Stuff to parse WAVE files.\n\nUsage.\n\nReading WAVE files:\n      f = wave.open(file, 'r')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods read(), seek(), and close().\nWhen the setpos() and rewind() methods are not used, the seek()\nmethod is not  necessary.\n\nThis returns an instance of a class with the following public methods:\n      getnchannels()  -- returns number of audio channels (1 for\n                         mono, 2 for stereo)\n      getsampwidth()  -- returns sample width in bytes\n      getframerate()  -- returns sampling frequency\n      getnframes()    -- returns number of audio frames\n      getcomptype()   -- returns compression type ('NONE' for linear samples)\n      getcompname()   -- returns human-readable version of\n                         compression type ('not compressed' linear samples)\n      getparams()     -- returns a namedtuple consisting of all of the\n                         above in the above order\n      getmarkers()    -- returns None (for compatibility with the\n                         aifc module)\n      getmark(id)     -- raises an error since the mark does not\n                         exist (for compatibility with the aifc module)\n      readframes(n)   -- returns at most n frames of audio\n      rewind()        -- rewind to the beginning of the audio stream\n      setpos(pos)     -- seek to the specified position\n      tell()          -- return the current position\n      close()         -- close the instance (make it unusable)\nThe position returned by tell() and the position given to setpos()\nare compatible and have nothing to do with the actual position in the\nfile.\nThe close() method is called automatically when the class instance\nis destroyed.\n\nWriting WAVE files:\n      f = wave.open(file, 'w')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods write(), tell(), seek(), and\nclose().\n\nThis returns an instance of a class with the following public methods:\n      setnchannels(n) -- set the number of channels\n      setsampwidth(n) -- set the sample width\n      setframerate(n) -- set the frame rate\n      setnframes(n)   -- set the number of frames\n      setcomptype(type, name)\n                      -- set the compression type and the\n                         human-readable compression type\n      setparams(tuple)\n                      -- set all parameters at once\n      tell()          -- return current position in output file\n      writeframesraw(data)\n                      -- write audio frames without pathing up the\n                         file header\n      writeframes(data)\n                      -- write audio frames and patch up the file header\n      close()         -- patch up the file header and close the\n                         output file\nYou should set the parameters before the first writeframesraw or\nwriteframes.  The total number of frames does not need to be set,\nbut when it is set to the correct value, the header does not have to\nbe patched up.\nIt is best to first set all parameters, perhaps possibly the\ncompression type, and then write audio frames using writeframesraw.\nWhen all frames have been written, either call writeframes('') or\nclose() to patch up the sizes in the header.\nThe close() method is called automatically when the class instance\nis destroyed.\n")
(NEWLINE)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "open")
(PUNCT ",")
(LIT "openfp")
(PUNCT ",")
(LIT "Error")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "Error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "WAVE_FORMAT_PCM")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_array_fmts")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(LIT "b")
(PUNCT ",")
(LIT "h")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "i")
(NEWLINE)
(KEYWORD import)
(ID "audioop")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "chunk")
(KEYWORD import)
(ID "Chunk")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "namedtuple")
(NEWLINE)
(ID "_wave_params")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "_wave_params")
(PUNCT ",")
(LIT "nchannels sampwidth framerate nframes comptype compname")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Wave_read")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Variables used in this class:\n\n    These variables are available to the user though appropriate\n    methods of this class:\n    _file -- the open file with methods read(), close(), and seek()\n              set through the __init__() method\n    _nchannels -- the number of audio channels\n              available through the getnchannels() method\n    _nframes -- the number of audio frames\n              available through the getnframes() method\n    _sampwidth -- the number of bytes per audio sample\n              available through the getsampwidth() method\n    _framerate -- the sampling frequency\n              available through the getframerate() method\n    _comptype -- the AIFF-C compression type ('NONE' if AIFF)\n              available through the getcomptype() method\n    _compname -- the human-readable AIFF-C compression type\n              available through the getcomptype() method\n    _soundpos -- the position in the audio stream\n              available through the tell() method, set through the\n              setpos() method\n\n    These variables are used internally only:\n    _fmt_chunk_read -- 1 iff the FMT chunk has been read\n    _data_seek_needed -- 1 iff positioned correctly in audio\n              file for readframes()\n    _data_chunk -- instantiation of a chunk class for the DATA chunk\n    _framesize -- size of one frame in the file\n    ")
(NEWLINE)
(KEYWORD def)
(ID "initfp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_convert")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "Chunk")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "bigendian")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "getname")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(LIT #"RIFF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "file does not start with RIFF id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT "!=")
(LIT #"WAVE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "not a WAVE file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_fmt_chunk_read")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_data_chunk")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_seek_needed")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "Chunk")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "bigendian")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "EOFError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "chunkname")
(PUNCT "=")
(ID "chunk")
(PUNCT ".")
(ID "getname")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "chunkname")
(PUNCT "==")
(LIT #"fmt ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_read_fmt_chunk")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fmt_chunk_read")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "chunkname")
(PUNCT "==")
(LIT #"data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_fmt_chunk_read")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "data chunk before fmt chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_data_chunk")
(PUNCT "=")
(ID "chunk")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "=")
(ID "chunk")
(PUNCT ".")
(ID "chunksize")
(PUNCT "//")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_data_seek_needed")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "chunk")
(PUNCT ".")
(ID "skip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_fmt_chunk_read")
(KEYWORD or)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_data_chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "fmt chunk and/or data chunk missing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "builtins")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT "=")
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initfp")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getfp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rewind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_seek_needed")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnchannels")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnframes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsampwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getframerate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcompname")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_compname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getparams")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_wave_params")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getnchannels")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getsampwidth")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getframerate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getnframes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getcomptype")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getcompname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmarkers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "no marks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setpos")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pos")
(PUNCT "<")
(LIT 0)
(KEYWORD or)
(ID "pos")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "position not in range")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_data_seek_needed")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readframes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nframes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_data_seek_needed")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_chunk")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(NEWLINE)
(KEYWORD if)
(ID "pos")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_chunk")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "pos")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_data_seek_needed")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nframes")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_data_chunk")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "nframes")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "!=")
(LIT 1)
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "byteorder")
(PUNCT "==")
(LIT "big")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "audioop")
(PUNCT ".")
(ID "byteswap")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_convert")
(KEYWORD and)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_convert")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "//")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_fmt_chunk")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "chunk")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wFormatTag")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ",")
(ID "dwAvgBytesPerSec")
(PUNCT ",")
(ID "wBlockAlign")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack_from")
(PUNCT "(")
(LIT "<HHLLH")
(PUNCT ",")
(ID "chunk")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 14)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "wFormatTag")
(PUNCT "==")
(ID "WAVE_FORMAT_PCM")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sampwidth")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack_from")
(PUNCT "(")
(LIT "<H")
(PUNCT ",")
(ID "chunk")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(PUNCT "(")
(ID "sampwidth")
(PUNCT "+")
(LIT 7)
(PUNCT ")")
(PUNCT "//")
(LIT 8)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "unknown format: %r")
(PUNCT "%")
(PUNCT "(")
(ID "wFormatTag")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "=")
(LIT "NONE")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_compname")
(PUNCT "=")
(LIT "not compressed")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Wave_write")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Variables used in this class:\n\n    These variables are user settable through appropriate methods\n    of this class:\n    _file -- the open file with methods write(), close(), tell(), seek()\n              set through the __init__() method\n    _comptype -- the AIFF-C compression type ('NONE' in AIFF)\n              set through the setcomptype() or setparams() method\n    _compname -- the human-readable AIFF-C compression type\n              set through the setcomptype() or setparams() method\n    _nchannels -- the number of audio channels\n              set through the setnchannels() or setparams() method\n    _sampwidth -- the number of bytes per audio sample\n              set through the setsampwidth() or setparams() method\n    _framerate -- the sampling frequency\n              set through the setframerate() or setparams() method\n    _nframes -- the number of audio frames written to the header\n              set through the setnframes() or setparams() method\n\n    These variables are used internally only:\n    _datalength -- the size of the audio samples written to the header\n    _nframeswritten -- the number of frames actually written\n    _datawritten -- the size of the audio samples actually written\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "builtins")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT "=")
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initfp")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "initfp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_convert")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_headerwritten")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setnchannels")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nchannels")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nchannels")
(PUNCT "<")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "bad # of channels")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "=")
(ID "nchannels")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnchannels")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "number of channels not set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setsampwidth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sampwidth")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sampwidth")
(PUNCT "<")
(LIT 1)
(KEYWORD or)
(ID "sampwidth")
(PUNCT ">")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "bad sample width")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(ID "sampwidth")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsampwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "sample width not set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setframerate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "framerate")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "framerate")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "bad frame rate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "round")
(PUNCT "(")
(ID "framerate")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getframerate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "frame rate not set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setnframes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nframes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "=")
(ID "nframes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnframes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "comptype")
(PUNCT ",")
(ID "compname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "comptype")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "NONE")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "unsupported compression type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "=")
(ID "comptype")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_compname")
(PUNCT "=")
(ID "compname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcompname")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_compname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setparams")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nchannels")
(PUNCT ",")
(ID "sampwidth")
(PUNCT ",")
(ID "framerate")
(PUNCT ",")
(ID "nframes")
(PUNCT ",")
(ID "comptype")
(PUNCT ",")
(ID "compname")
(PUNCT "=")
(ID "params")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "setnchannels")
(PUNCT "(")
(ID "nchannels")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setsampwidth")
(PUNCT "(")
(ID "sampwidth")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setframerate")
(PUNCT "(")
(ID "framerate")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setnframes")
(PUNCT "(")
(ID "nframes")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setcomptype")
(PUNCT "(")
(ID "comptype")
(PUNCT ",")
(ID "compname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getparams")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(KEYWORD or)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(KEYWORD or)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "not all parameters set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_wave_params")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_compname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setmark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "setmark() not supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "no marks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmarkers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writeframesraw")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ".")
(ID "cast")
(PUNCT "(")
(LIT "B")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_ensure_header_written")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "nframes")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "//")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_convert")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_convert")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "!=")
(LIT 1)
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "byteorder")
(PUNCT "==")
(LIT "big")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "audioop")
(PUNCT ".")
(ID "byteswap")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "+")
(ID "nframes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writeframes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writeframesraw")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_patchheader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ensure_header_written")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_patchheader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_i_opened_the_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ensure_header_written")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "datasize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_headerwritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "# channels not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "sample width not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "sampling rate not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_write_header")
(PUNCT "(")
(ID "datasize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_write_header")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "initlength")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_headerwritten")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"RIFF")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "=")
(ID "initlength")
(PUNCT "//")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L4s4sLHHLLHH4s")
(PUNCT ",")
(LIT 36)
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT ",")
(LIT #"WAVE")
(PUNCT ",")
(LIT #"fmt ")
(PUNCT ",")
(LIT 16)
(PUNCT ",")
(ID "WAVE_FORMAT_PCM")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "*")
(LIT 8)
(PUNCT ",")
(LIT #"data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_length_pos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_headerwritten")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_patchheader")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_headerwritten")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "curpos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L")
(PUNCT ",")
(LIT 36)
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_data_length_pos")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT "<L")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "curpos")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "mode")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT "rb")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Wave_read")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "w")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Wave_write")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "mode must be 'r', 'rb', 'w', or 'wb'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "openfp")
(PUNCT "=")
(ID "open")
(NEWLINE)
(ENDMARKER)
