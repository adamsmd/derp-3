(LIT "create and manipulate C data types in Python")
(NEWLINE)
(KEYWORD import)
(ID "os")
(KEYWORD as)
(ID "_os")
(PUNCT ",")
(ID "sys")
(KEYWORD as)
(ID "_sys")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "1.1.0")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "Union")
(PUNCT ",")
(ID "Structure")
(PUNCT ",")
(ID "Array")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "_Pointer")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "CFuncPtr")
(KEYWORD as)
(ID "_CFuncPtr")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "__version__")
(KEYWORD as)
(ID "_ctypes_version")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "RTLD_LOCAL")
(PUNCT ",")
(ID "RTLD_GLOBAL")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "ArgumentError")
(NEWLINE)
(KEYWORD from)
(ID "struct")
(KEYWORD import)
(ID "calcsize")
(KEYWORD as)
(ID "_calcsize")
(NEWLINE)
(KEYWORD if)
(ID "__version__")
(PUNCT "!=")
(ID "_ctypes_version")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Exception")
(PUNCT "(")
(LIT "Version number mismatch")
(PUNCT ",")
(ID "__version__")
(PUNCT ",")
(ID "_ctypes_version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "FormatError")
(NEWLINE)
(DEDENT)
(ID "DEFAULT_MODE")
(PUNCT "=")
(ID "RTLD_LOCAL")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(KEYWORD and)
(ID "_sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "int")
(PUNCT "(")
(ID "_os")
(PUNCT ".")
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "release")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT "<")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "DEFAULT_MODE")
(PUNCT "=")
(ID "RTLD_GLOBAL")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "FUNCFLAG_CDECL")
(KEYWORD as)
(ID "_FUNCFLAG_CDECL")
(PUNCT ",")
(ID "FUNCFLAG_PYTHONAPI")
(KEYWORD as)
(ID "_FUNCFLAG_PYTHONAPI")
(PUNCT ",")
(ID "FUNCFLAG_USE_ERRNO")
(KEYWORD as)
(ID "_FUNCFLAG_USE_ERRNO")
(PUNCT ",")
(ID "FUNCFLAG_USE_LASTERROR")
(KEYWORD as)
(ID "_FUNCFLAG_USE_LASTERROR")
(NEWLINE)
(KEYWORD def)
(ID "create_string_buffer")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "create_string_buffer(aBytes) -> character array\n    create_string_buffer(anInteger) -> character array\n    create_string_buffer(aString, anInteger) -> character array\n    ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "init")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "buftype")
(PUNCT "=")
(ID "c_char")
(PUNCT "*")
(ID "size")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "buftype")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "init")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buftype")
(PUNCT "=")
(ID "c_char")
(PUNCT "*")
(ID "init")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "buftype")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "init")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "c_buffer")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "create_string_buffer")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_c_functype_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "CFUNCTYPE")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(PUNCT "*")
(ID "argtypes")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "CFUNCTYPE(restype, *argtypes,\n                 use_errno=False, use_last_error=False) -> function prototype.\n\n    restype: the result type\n    argtypes: a sequence specifying the argument types\n\n    The function prototype can be called in different ways to create a\n    callable object:\n\n    prototype(integer address) -> foreign function\n    prototype(callable) -> create and return a C callable function from callable\n    prototype(integer index, method name[, paramflags]) -> foreign function calling a COM method\n    prototype((ordinal number, dll object)[, paramflags]) -> foreign function exported by ordinal\n    prototype((function name, dll object)[, paramflags]) -> foreign function exported by name\n    ")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "_FUNCFLAG_CDECL")
(NEWLINE)
(KEYWORD if)
(ID "kw")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "use_errno")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_FUNCFLAG_USE_ERRNO")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kw")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "use_last_error")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_FUNCFLAG_USE_LASTERROR")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected keyword argument(s) %s")
(PUNCT "%")
(ID "kw")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_c_functype_cache")
(PUNCT "[")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(ID "argtypes")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "CFunctionType")
(PUNCT "(")
(ID "_CFuncPtr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_argtypes_")
(PUNCT "=")
(ID "argtypes")
(NEWLINE)
(ID "_restype_")
(PUNCT "=")
(ID "restype")
(NEWLINE)
(ID "_flags_")
(PUNCT "=")
(ID "flags")
(NEWLINE)
(DEDENT)
(ID "_c_functype_cache")
(PUNCT "[")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(ID "argtypes")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "CFunctionType")
(NEWLINE)
(KEYWORD return)
(ID "CFunctionType")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "LoadLibrary")
(KEYWORD as)
(ID "_dlopen")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "FUNCFLAG_STDCALL")
(KEYWORD as)
(ID "_FUNCFLAG_STDCALL")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "ce")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_FUNCFLAG_STDCALL")
(PUNCT "=")
(ID "_FUNCFLAG_CDECL")
(NEWLINE)
(DEDENT)
(ID "_win_functype_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "WINFUNCTYPE")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(PUNCT "*")
(ID "argtypes")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "_FUNCFLAG_STDCALL")
(NEWLINE)
(KEYWORD if)
(ID "kw")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "use_errno")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_FUNCFLAG_USE_ERRNO")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kw")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "use_last_error")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_FUNCFLAG_USE_LASTERROR")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected keyword argument(s) %s")
(PUNCT "%")
(ID "kw")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_win_functype_cache")
(PUNCT "[")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(ID "argtypes")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "WinFunctionType")
(PUNCT "(")
(ID "_CFuncPtr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_argtypes_")
(PUNCT "=")
(ID "argtypes")
(NEWLINE)
(ID "_restype_")
(PUNCT "=")
(ID "restype")
(NEWLINE)
(ID "_flags_")
(PUNCT "=")
(ID "flags")
(NEWLINE)
(DEDENT)
(ID "_win_functype_cache")
(PUNCT "[")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(ID "argtypes")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "WinFunctionType")
(NEWLINE)
(KEYWORD return)
(ID "WinFunctionType")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "WINFUNCTYPE")
(PUNCT ".")
(ID "__doc__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "WINFUNCTYPE")
(PUNCT ".")
(ID "__doc__")
(PUNCT "=")
(ID "CFUNCTYPE")
(PUNCT ".")
(ID "__doc__")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "CFUNCTYPE")
(PUNCT ",")
(LIT "WINFUNCTYPE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "dlopen")
(KEYWORD as)
(ID "_dlopen")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "sizeof")
(PUNCT ",")
(ID "byref")
(PUNCT ",")
(ID "addressof")
(PUNCT ",")
(ID "alignment")
(PUNCT ",")
(ID "resize")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "get_errno")
(PUNCT ",")
(ID "set_errno")
(NEWLINE)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "_SimpleCData")
(NEWLINE)
(KEYWORD def)
(ID "_check_size")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "typecode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "struct")
(KEYWORD import)
(ID "calcsize")
(NEWLINE)
(KEYWORD if)
(ID "typecode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typecode")
(PUNCT "=")
(ID "typ")
(PUNCT ".")
(ID "_type_")
(NEWLINE)
(DEDENT)
(ID "actual")
(PUNCT ",")
(ID "required")
(PUNCT "=")
(ID "sizeof")
(PUNCT "(")
(ID "typ")
(PUNCT ")")
(PUNCT ",")
(ID "calcsize")
(PUNCT "(")
(ID "typecode")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "actual")
(PUNCT "!=")
(ID "required")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemError")
(PUNCT "(")
(LIT "sizeof(%s) wrong: %d instead of %d")
(PUNCT "%")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "actual")
(PUNCT ",")
(ID "required")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "py_object")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "O")
(NEWLINE)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__repr__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s(<NULL>)")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "py_object")
(PUNCT ",")
(LIT "P")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_short")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "h")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_short")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_ushort")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "H")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_ushort")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_long")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "l")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_long")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_ulong")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "L")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_ulong")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_calcsize")
(PUNCT "(")
(LIT "i")
(PUNCT ")")
(PUNCT "==")
(ID "_calcsize")
(PUNCT "(")
(LIT "l")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_int")
(PUNCT "=")
(ID "c_long")
(NEWLINE)
(ID "c_uint")
(PUNCT "=")
(ID "c_ulong")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "c_int")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "i")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_int")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_uint")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "I")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_uint")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "c_float")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "f")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_float")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_double")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "d")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_double")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_longdouble")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "g")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sizeof")
(PUNCT "(")
(ID "c_longdouble")
(PUNCT ")")
(PUNCT "==")
(ID "sizeof")
(PUNCT "(")
(ID "c_double")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_longdouble")
(PUNCT "=")
(ID "c_double")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_calcsize")
(PUNCT "(")
(LIT "l")
(PUNCT ")")
(PUNCT "==")
(ID "_calcsize")
(PUNCT "(")
(LIT "q")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_longlong")
(PUNCT "=")
(ID "c_long")
(NEWLINE)
(ID "c_ulonglong")
(PUNCT "=")
(ID "c_ulong")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "c_longlong")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "q")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_longlong")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_ulonglong")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "Q")
(NEWLINE)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_ulonglong")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "c_ubyte")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "B")
(NEWLINE)
(DEDENT)
(ID "c_ubyte")
(PUNCT ".")
(ID "__ctype_le__")
(PUNCT "=")
(ID "c_ubyte")
(PUNCT ".")
(ID "__ctype_be__")
(PUNCT "=")
(ID "c_ubyte")
(NEWLINE)
(ID "_check_size")
(PUNCT "(")
(ID "c_ubyte")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_byte")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "b")
(NEWLINE)
(DEDENT)
(ID "c_byte")
(PUNCT ".")
(ID "__ctype_le__")
(PUNCT "=")
(ID "c_byte")
(PUNCT ".")
(ID "__ctype_be__")
(PUNCT "=")
(ID "c_byte")
(NEWLINE)
(ID "_check_size")
(PUNCT "(")
(ID "c_byte")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_char")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "c")
(NEWLINE)
(DEDENT)
(ID "c_char")
(PUNCT ".")
(ID "__ctype_le__")
(PUNCT "=")
(ID "c_char")
(PUNCT ".")
(ID "__ctype_be__")
(PUNCT "=")
(ID "c_char")
(NEWLINE)
(ID "_check_size")
(PUNCT "(")
(ID "c_char")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_char_p")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "z")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "windll")
(PUNCT ".")
(ID "kernel32")
(PUNCT ".")
(ID "IsBadStringPtrA")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s(%r)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s(%s)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "cast")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ")")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s(%s)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "cast")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ")")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_check_size")
(PUNCT "(")
(ID "c_char_p")
(PUNCT ",")
(LIT "P")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_void_p")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "P")
(NEWLINE)
(DEDENT)
(ID "c_voidp")
(PUNCT "=")
(ID "c_void_p")
(NEWLINE)
(ID "_check_size")
(PUNCT "(")
(ID "c_void_p")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "c_bool")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "?")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "POINTER")
(PUNCT ",")
(ID "pointer")
(PUNCT ",")
(ID "_pointer_type_cache")
(NEWLINE)
(KEYWORD class)
(ID "c_wchar_p")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "Z")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "c_wchar")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "u")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_reset_cache")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_pointer_type_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_c_functype_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_win_functype_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "POINTER")
(PUNCT "(")
(ID "c_wchar")
(PUNCT ")")
(PUNCT ".")
(ID "from_param")
(PUNCT "=")
(ID "c_wchar_p")
(PUNCT ".")
(ID "from_param")
(NEWLINE)
(ID "POINTER")
(PUNCT "(")
(ID "c_char")
(PUNCT ")")
(PUNCT ".")
(ID "from_param")
(PUNCT "=")
(ID "c_char_p")
(PUNCT ".")
(ID "from_param")
(NEWLINE)
(ID "_pointer_type_cache")
(PUNCT "[")
(KEYWORD None)
(PUNCT "]")
(PUNCT "=")
(ID "c_void_p")
(NEWLINE)
(ID "CFUNCTYPE")
(PUNCT "(")
(ID "c_int")
(PUNCT ")")
(PUNCT "(")
(KEYWORD lambda)
(PUNCT ":")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_unicode_buffer")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "create_unicode_buffer(aString) -> character array\n    create_unicode_buffer(anInteger) -> character array\n    create_unicode_buffer(aString, anInteger) -> character array\n    ")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "size")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "init")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "buftype")
(PUNCT "=")
(ID "c_wchar")
(PUNCT "*")
(ID "size")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "buftype")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "buf")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "init")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "init")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "buftype")
(PUNCT "=")
(ID "c_wchar")
(PUNCT "*")
(ID "init")
(NEWLINE)
(ID "buf")
(PUNCT "=")
(ID "buftype")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "buf")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "init")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "SetPointerType")
(PUNCT "(")
(ID "pointer")
(PUNCT ",")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_pointer_type_cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "This type already exists in the cache")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "id")
(PUNCT "(")
(ID "pointer")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(ID "_pointer_type_cache")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "What's this???")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pointer")
(PUNCT ".")
(ID "set_type")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(NEWLINE)
(ID "_pointer_type_cache")
(PUNCT "[")
(ID "cls")
(PUNCT "]")
(PUNCT "=")
(ID "pointer")
(NEWLINE)
(KEYWORD del)
(ID "_pointer_type_cache")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "pointer")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ARRAY")
(PUNCT "(")
(ID "typ")
(PUNCT ",")
(ID "len")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "typ")
(PUNCT "*")
(ID "len")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CDLL")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "An instance of this class represents a loaded dll/shared\n    library, exporting functions using the standard C calling\n    convention (named 'cdecl' on Windows).\n\n    The exported functions can be accessed as attributes, or by\n    indexing with the function name.  Examples:\n\n    <obj>.qsort -> callable object\n    <obj>['qsort'] -> callable object\n\n    Calling the functions releases the Python GIL during the call and\n    reacquires it afterwards.\n    ")
(NEWLINE)
(ID "_func_flags_")
(PUNCT "=")
(ID "_FUNCFLAG_CDECL")
(NEWLINE)
(ID "_func_restype_")
(PUNCT "=")
(ID "c_int")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(ID "DEFAULT_MODE")
(PUNCT ",")
(ID "handle")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_errno")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "use_last_error")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_func_flags_")
(NEWLINE)
(KEYWORD if)
(ID "use_errno")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_FUNCFLAG_USE_ERRNO")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "use_last_error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "|=")
(ID "_FUNCFLAG_USE_LASTERROR")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_FuncPtr")
(PUNCT "(")
(ID "_CFuncPtr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_flags_")
(PUNCT "=")
(ID "flags")
(NEWLINE)
(ID "_restype_")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_func_restype_")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_FuncPtr")
(PUNCT "=")
(ID "_FuncPtr")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT "=")
(ID "_dlopen")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT "=")
(ID "handle")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "<%s '%s', handle %x at %x>")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_handle")
(PUNCT "&")
(PUNCT "(")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT "*")
(LIT 2)
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "&")
(PUNCT "(")
(ID "_sys")
(PUNCT ".")
(ID "maxsize")
(PUNCT "*")
(LIT 2)
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "__")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "func")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name_or_ordinal")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_FuncPtr")
(PUNCT "(")
(PUNCT "(")
(ID "name_or_ordinal")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "name_or_ordinal")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT ".")
(ID "__name__")
(PUNCT "=")
(ID "name_or_ordinal")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "func")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PyDLL")
(PUNCT "(")
(ID "CDLL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class represents the Python library itself.  It allows to\n    access Python API functions.  The GIL is not released, and\n    Python exceptions are handled correctly.\n    ")
(NEWLINE)
(ID "_func_flags_")
(PUNCT "=")
(ID "_FUNCFLAG_CDECL")
(PUNCT "|")
(ID "_FUNCFLAG_PYTHONAPI")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "WinDLL")
(PUNCT "(")
(ID "CDLL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class represents a dll exporting functions using the\n        Windows stdcall calling convention.\n        ")
(NEWLINE)
(ID "_func_flags_")
(PUNCT "=")
(ID "_FUNCFLAG_STDCALL")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "_check_HRESULT")
(PUNCT ",")
(ID "_SimpleCData")
(NEWLINE)
(KEYWORD class)
(ID "HRESULT")
(PUNCT "(")
(ID "_SimpleCData")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_type_")
(PUNCT "=")
(LIT "l")
(NEWLINE)
(ID "_check_retval_")
(PUNCT "=")
(ID "_check_HRESULT")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "OleDLL")
(PUNCT "(")
(ID "CDLL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class represents a dll exporting functions using the\n        Windows stdcall calling convention, and returning HRESULT.\n        HRESULT error values are automatically raised as OSError\n        exceptions.\n        ")
(NEWLINE)
(ID "_func_flags_")
(PUNCT "=")
(ID "_FUNCFLAG_STDCALL")
(NEWLINE)
(ID "_func_restype_")
(PUNCT "=")
(ID "HRESULT")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LibraryLoader")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "dlltype")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_dlltype")
(PUNCT "=")
(ID "dlltype")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dll")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_dlltype")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "dll")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "dll")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "LoadLibrary")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_dlltype")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "cdll")
(PUNCT "=")
(ID "LibraryLoader")
(PUNCT "(")
(ID "CDLL")
(PUNCT ")")
(NEWLINE)
(ID "pydll")
(PUNCT "=")
(ID "LibraryLoader")
(PUNCT "(")
(ID "PyDLL")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pythonapi")
(PUNCT "=")
(ID "PyDLL")
(PUNCT "(")
(LIT "python dll")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "_sys")
(PUNCT ".")
(ID "dllhandle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "cygwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pythonapi")
(PUNCT "=")
(ID "PyDLL")
(PUNCT "(")
(LIT "libpython%d.%d.dll")
(PUNCT "%")
(ID "_sys")
(PUNCT ".")
(ID "version_info")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pythonapi")
(PUNCT "=")
(ID "PyDLL")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "windll")
(PUNCT "=")
(ID "LibraryLoader")
(PUNCT "(")
(ID "WinDLL")
(PUNCT ")")
(NEWLINE)
(ID "oledll")
(PUNCT "=")
(ID "LibraryLoader")
(PUNCT "(")
(ID "OleDLL")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "nt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "GetLastError")
(PUNCT "=")
(ID "windll")
(PUNCT ".")
(ID "kernel32")
(PUNCT ".")
(ID "GetLastError")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "GetLastError")
(PUNCT "=")
(ID "windll")
(PUNCT ".")
(ID "coredll")
(PUNCT ".")
(ID "GetLastError")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "get_last_error")
(PUNCT ",")
(ID "set_last_error")
(NEWLINE)
(KEYWORD def)
(ID "WinError")
(PUNCT "(")
(ID "code")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "descr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "code")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "GetLastError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "descr")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "descr")
(PUNCT "=")
(ID "FormatError")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "OSError")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(ID "descr")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sizeof")
(PUNCT "(")
(ID "c_uint")
(PUNCT ")")
(PUNCT "==")
(ID "sizeof")
(PUNCT "(")
(ID "c_void_p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_size_t")
(PUNCT "=")
(ID "c_uint")
(NEWLINE)
(ID "c_ssize_t")
(PUNCT "=")
(ID "c_int")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sizeof")
(PUNCT "(")
(ID "c_ulong")
(PUNCT ")")
(PUNCT "==")
(ID "sizeof")
(PUNCT "(")
(ID "c_void_p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_size_t")
(PUNCT "=")
(ID "c_ulong")
(NEWLINE)
(ID "c_ssize_t")
(PUNCT "=")
(ID "c_long")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sizeof")
(PUNCT "(")
(ID "c_ulonglong")
(PUNCT ")")
(PUNCT "==")
(ID "sizeof")
(PUNCT "(")
(ID "c_void_p")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c_size_t")
(PUNCT "=")
(ID "c_ulonglong")
(NEWLINE)
(ID "c_ssize_t")
(PUNCT "=")
(ID "c_longlong")
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "_memmove_addr")
(PUNCT ",")
(ID "_memset_addr")
(PUNCT ",")
(ID "_string_at_addr")
(PUNCT ",")
(ID "_cast_addr")
(NEWLINE)
(ID "memmove")
(PUNCT "=")
(ID "CFUNCTYPE")
(PUNCT "(")
(ID "c_void_p")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ",")
(ID "c_size_t")
(PUNCT ")")
(PUNCT "(")
(ID "_memmove_addr")
(PUNCT ")")
(NEWLINE)
(ID "memset")
(PUNCT "=")
(ID "CFUNCTYPE")
(PUNCT "(")
(ID "c_void_p")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ",")
(ID "c_int")
(PUNCT ",")
(ID "c_size_t")
(PUNCT ")")
(PUNCT "(")
(ID "_memset_addr")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "PYFUNCTYPE")
(PUNCT "(")
(ID "restype")
(PUNCT ",")
(PUNCT "*")
(ID "argtypes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "CFunctionType")
(PUNCT "(")
(ID "_CFuncPtr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_argtypes_")
(PUNCT "=")
(ID "argtypes")
(NEWLINE)
(ID "_restype_")
(PUNCT "=")
(ID "restype")
(NEWLINE)
(ID "_flags_")
(PUNCT "=")
(ID "_FUNCFLAG_CDECL")
(PUNCT "|")
(ID "_FUNCFLAG_PYTHONAPI")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "CFunctionType")
(NEWLINE)
(DEDENT)
(ID "_cast")
(PUNCT "=")
(ID "PYFUNCTYPE")
(PUNCT "(")
(ID "py_object")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ",")
(ID "py_object")
(PUNCT ",")
(ID "py_object")
(PUNCT ")")
(PUNCT "(")
(ID "_cast_addr")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "cast")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "typ")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_cast")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "obj")
(PUNCT ",")
(ID "typ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_string_at")
(PUNCT "=")
(ID "PYFUNCTYPE")
(PUNCT "(")
(ID "py_object")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ",")
(ID "c_int")
(PUNCT ")")
(PUNCT "(")
(ID "_string_at_addr")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "string_at")
(PUNCT "(")
(ID "ptr")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "string_at(addr[, size]) -> string\n\n    Return the string at addr.")
(NEWLINE)
(KEYWORD return)
(ID "_string_at")
(PUNCT "(")
(ID "ptr")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_ctypes")
(KEYWORD import)
(ID "_wstring_at_addr")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_wstring_at")
(PUNCT "=")
(ID "PYFUNCTYPE")
(PUNCT "(")
(ID "py_object")
(PUNCT ",")
(ID "c_void_p")
(PUNCT ",")
(ID "c_int")
(PUNCT ")")
(PUNCT "(")
(ID "_wstring_at_addr")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "wstring_at")
(PUNCT "(")
(ID "ptr")
(PUNCT ",")
(ID "size")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "wstring_at(addr[, size]) -> string\n\n        Return the string at addr.")
(NEWLINE)
(KEYWORD return)
(ID "_wstring_at")
(PUNCT "(")
(ID "ptr")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_os")
(PUNCT ".")
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "nt")
(PUNCT ",")
(LIT "ce")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "DllGetClassObject")
(PUNCT "(")
(ID "rclsid")
(PUNCT ",")
(ID "riid")
(PUNCT ",")
(ID "ppv")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ccom")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(LIT "comtypes.server.inprocserver")
(PUNCT ",")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "locals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(LIT "*")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "-")
(LIT 2147221231)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ccom")
(PUNCT ".")
(ID "DllGetClassObject")
(PUNCT "(")
(ID "rclsid")
(PUNCT ",")
(ID "riid")
(PUNCT ",")
(ID "ppv")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "DllCanUnloadNow")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ccom")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(LIT "comtypes.server.inprocserver")
(PUNCT ",")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "locals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(LIT "*")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "ccom")
(PUNCT ".")
(ID "DllCanUnloadNow")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD from)
(ID "ctypes")
(PUNCT ".")
(ID "_endian")
(KEYWORD import)
(ID "BigEndianStructure")
(PUNCT ",")
(ID "LittleEndianStructure")
(NEWLINE)
(ID "c_int8")
(PUNCT "=")
(ID "c_byte")
(NEWLINE)
(ID "c_uint8")
(PUNCT "=")
(ID "c_ubyte")
(NEWLINE)
(KEYWORD for)
(ID "kind")
(KEYWORD in)
(PUNCT "[")
(ID "c_short")
(PUNCT ",")
(ID "c_int")
(PUNCT ",")
(ID "c_long")
(PUNCT ",")
(ID "c_longlong")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sizeof")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(ID "c_int16")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(KEYWORD elif)
(ID "sizeof")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(ID "c_int32")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(KEYWORD elif)
(ID "sizeof")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(PUNCT "==")
(LIT 8)
(PUNCT ":")
(ID "c_int64")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "kind")
(KEYWORD in)
(PUNCT "[")
(ID "c_ushort")
(PUNCT ",")
(ID "c_uint")
(PUNCT ",")
(ID "c_ulong")
(PUNCT ",")
(ID "c_ulonglong")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sizeof")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(ID "c_uint16")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(KEYWORD elif)
(ID "sizeof")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(ID "c_uint32")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(KEYWORD elif)
(ID "sizeof")
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(PUNCT "==")
(LIT 8)
(PUNCT ":")
(ID "c_uint64")
(PUNCT "=")
(ID "kind")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(PUNCT "(")
(ID "kind")
(PUNCT ")")
(NEWLINE)
(ID "_reset_cache")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ENDMARKER)
