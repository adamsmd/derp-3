(LIT "distutils.fancy_getopt\n\nWrapper around the standard getopt module that provides the following\nadditional features:\n  * short and long options are tied together\n  * options have help strings, so fancy_getopt could potentially\n    create a complete usage summary\n  * options set attributes of a passed-in object\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "getopt")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(ID "longopt_pat")
(PUNCT "=")
(LIT "[a-zA-Z](?:[a-zA-Z0-9-]*)")
(NEWLINE)
(ID "longopt_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^%s$")
(PUNCT "%")
(ID "longopt_pat")
(PUNCT ")")
(NEWLINE)
(ID "neg_alias_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(%s)=!(%s)$")
(PUNCT "%")
(PUNCT "(")
(ID "longopt_pat")
(PUNCT ",")
(ID "longopt_pat")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "longopt_xlate")
(PUNCT "=")
(ID "str")
(PUNCT ".")
(ID "maketrans")
(PUNCT "(")
(LIT "-")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "FancyGetopt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wrapper around the standard 'getopt()' module that provides some\n    handy extra functionality:\n      * short and long options are tied together\n      * options have help strings, and help text can be assembled\n        from them\n      * options set attributes of a passed-in object\n      * boolean options can have \"negative aliases\" -- eg. if\n        --quiet is the \"negative alias\" of --verbose, then \"--quiet\"\n        on the command line sets 'verbose' to false\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_table")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT "=")
(ID "option_table")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_build_index")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "alias")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "negative_alias")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "short_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "long_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "short2long")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "attr_name")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_order")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_build_index")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT "[")
(ID "option")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "option")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_option_table")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_table")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT "=")
(ID "option_table")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_build_index")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "long_option")
(PUNCT ",")
(ID "short_option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "help_string")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "long_option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(LIT "option conflict: already an option '%s'")
(PUNCT "%")
(ID "long_option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(PUNCT "(")
(ID "long_option")
(PUNCT ",")
(ID "short_option")
(PUNCT ",")
(ID "help_string")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT "[")
(ID "long_option")
(PUNCT "]")
(PUNCT "=")
(ID "option")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "has_option")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "long_option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the option table for this parser has an\n        option with long name 'long_option'.")
(NEWLINE)
(KEYWORD return)
(ID "long_option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_index")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_attr_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "long_option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Translate long option name 'long_option' to the form it\n        has as an attribute of some object: ie., translate hyphens\n        to underscores.")
(NEWLINE)
(KEYWORD return)
(ID "long_option")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "longopt_xlate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_alias_dict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "aliases")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "aliases")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "alias")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(KEYWORD in)
(ID "aliases")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "alias")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(PUNCT "(")
(LIT "invalid %s '%s': ")
(LIT "option '%s' not defined")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(ID "what")
(PUNCT ",")
(ID "alias")
(PUNCT ",")
(ID "alias")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opt")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_index")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(PUNCT "(")
(LIT "invalid %s '%s': ")
(LIT "aliased option '%s' not defined")
(PUNCT ")")
(PUNCT "%")
(PUNCT "(")
(ID "what")
(PUNCT ",")
(ID "alias")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_aliases")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "alias")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the aliases for this option parser.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_alias_dict")
(PUNCT "(")
(ID "alias")
(PUNCT ",")
(LIT "alias")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "alias")
(PUNCT "=")
(ID "alias")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_negative_aliases")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "negative_alias")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the negative aliases for this option parser.\n        'negative_alias' should be a dictionary mapping option names to\n        option names, both the key and value must already be defined\n        in the option table.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_alias_dict")
(PUNCT "(")
(ID "negative_alias")
(PUNCT ",")
(LIT "negative alias")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "negative_alias")
(PUNCT "=")
(ID "negative_alias")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_grok_option_table")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Populate the various data structures that keep tabs on the\n        option table.  Called by 'getopt()' before it can do anything\n        worthwhile.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "long_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "short_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "short2long")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "repeat")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "long")
(PUNCT ",")
(ID "short")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(ID "option")
(NEWLINE)
(ID "repeat")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "option")
(PUNCT ")")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "long")
(PUNCT ",")
(ID "short")
(PUNCT ",")
(ID "help")
(PUNCT ",")
(ID "repeat")
(PUNCT "=")
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid option tuple: %r")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "long")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(PUNCT "<")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(PUNCT "(")
(LIT "invalid long option '%s': ")
(LIT "must be a string of length >= 2")
(PUNCT ")")
(PUNCT "%")
(ID "long")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(PUNCT "(")
(PUNCT "(")
(ID "short")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "short")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "short")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(LIT "invalid short option '%s': ")
(LIT "must a single character or None")
(PUNCT "%")
(ID "short")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "repeat")
(PUNCT "[")
(ID "long")
(PUNCT "]")
(PUNCT "=")
(ID "repeat")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "long_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "long")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "=")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "short")
(PUNCT ":")
(ID "short")
(PUNCT "=")
(ID "short")
(PUNCT "+")
(LIT ":")
(NEWLINE)
(ID "long")
(PUNCT "=")
(ID "long")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "[")
(ID "long")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alias_to")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "negative_alias")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "alias_to")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "[")
(ID "alias_to")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(LIT "invalid negative alias '%s': ")
(LIT "aliased option '%s' takes a value")
(PUNCT "%")
(PUNCT "(")
(ID "long")
(PUNCT ",")
(ID "alias_to")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "long_opts")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "long")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "[")
(ID "long")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "alias_to")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "alias")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "alias_to")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "[")
(ID "long")
(PUNCT "]")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "[")
(ID "alias_to")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(LIT "invalid alias '%s': inconsistent with ")
(LIT "aliased option '%s' (one of them takes a value, ")
(LIT "the other doesn't")
(PUNCT "%")
(PUNCT "(")
(ID "long")
(PUNCT ",")
(ID "alias_to")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "longopt_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsGetoptError")
(PUNCT "(")
(LIT "invalid long option name '%s' ")
(LIT "(must be letters, numbers, hyphens only")
(PUNCT "%")
(ID "long")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "attr_name")
(PUNCT "[")
(ID "long")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_attr_name")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "short")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "short_opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "short")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "short2long")
(PUNCT "[")
(ID "short")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "long")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getopt")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "object")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse command-line options in args. Store as attributes on object.\n\n        If 'args' is None or not supplied, uses 'sys.argv[1:]'.  If\n        'object' is None or not supplied, creates a new OptionDummy\n        object, stores option values there, and returns a tuple (args,\n        object).  If 'object' is supplied, it is modified in place and\n        'getopt()' just returns 'args'; in both cases, the returned\n        'args' is a modified copy of the passed-in 'args' list, which\n        is left untouched.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "object")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "object")
(PUNCT "=")
(ID "OptionDummy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "created_object")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "created_object")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_grok_option_table")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "short_opts")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "short_opts")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "getopt")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "short_opts")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "long_opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "getopt")
(PUNCT ".")
(ID "error")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsArgError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT "==")
(LIT 2)
(KEYWORD and)
(ID "opt")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "short2long")
(PUNCT "[")
(ID "opt")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "len")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT ">")
(LIT 2)
(KEYWORD and)
(ID "opt")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT "==")
(LIT "--")
(NEWLINE)
(ID "opt")
(PUNCT "=")
(ID "opt")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "alias")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "alias")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "alias")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(ID "alias")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "takes_arg")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "val")
(PUNCT "==")
(LIT "")
(PUNCT ",")
(LIT "boolean option can't have value")
(NEWLINE)
(ID "alias")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "negative_alias")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "alias")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(ID "alias")
(NEWLINE)
(ID "val")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "attr")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "attr_name")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "repeat")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "setattr")
(PUNCT "(")
(ID "object")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "option_order")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "created_object")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "args")
(PUNCT ",")
(ID "object")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "args")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_option_order")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the list of (option, value) tuples processed by the\n        previous run of 'getopt()'.  Raises RuntimeError if\n        'getopt()' hasn't been called yet.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "option_order")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "'getopt()' hasn't been called yet")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "option_order")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "generate_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate help text (a list of strings, one per suggested line of\n        output) from the option table for this FancyGetopt object.\n        ")
(NEWLINE)
(ID "max_opt")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "long")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "short")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "long")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "long")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "=")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "l")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "short")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "l")
(PUNCT "+")
(LIT 5)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "l")
(PUNCT ">")
(ID "max_opt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_opt")
(PUNCT "=")
(ID "l")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "opt_width")
(PUNCT "=")
(ID "max_opt")
(PUNCT "+")
(LIT 2)
(PUNCT "+")
(LIT 2)
(PUNCT "+")
(LIT 2)
(NEWLINE)
(ID "line_width")
(PUNCT "=")
(LIT 78)
(NEWLINE)
(ID "text_width")
(PUNCT "=")
(ID "line_width")
(PUNCT "-")
(ID "opt_width")
(NEWLINE)
(ID "big_indent")
(PUNCT "=")
(LIT " ")
(PUNCT "*")
(ID "opt_width")
(NEWLINE)
(KEYWORD if)
(ID "header")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(ID "header")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(LIT "Option summary:")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "option_table")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "long")
(PUNCT ",")
(ID "short")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "wrap_text")
(PUNCT "(")
(ID "help")
(PUNCT ",")
(ID "text_width")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "long")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "=")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "long")
(PUNCT "=")
(ID "long")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "short")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "text")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "  --%-*s  %s")
(PUNCT "%")
(PUNCT "(")
(ID "max_opt")
(PUNCT ",")
(ID "long")
(PUNCT ",")
(ID "text")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "  --%-*s  ")
(PUNCT "%")
(PUNCT "(")
(ID "max_opt")
(PUNCT ",")
(ID "long")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_names")
(PUNCT "=")
(LIT "%s (-%s)")
(PUNCT "%")
(PUNCT "(")
(ID "long")
(PUNCT ",")
(ID "short")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "text")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "  --%-*s  %s")
(PUNCT "%")
(PUNCT "(")
(ID "max_opt")
(PUNCT ",")
(ID "opt_names")
(PUNCT ",")
(ID "text")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "  --%-*s")
(PUNCT "%")
(ID "opt_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "l")
(KEYWORD in)
(ID "text")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "big_indent")
(PUNCT "+")
(ID "l")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "lines")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "generate_help")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "fancy_getopt")
(PUNCT "(")
(ID "options")
(PUNCT ",")
(ID "negative_opt")
(PUNCT ",")
(ID "object")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT "=")
(ID "FancyGetopt")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_negative_aliases")
(PUNCT "(")
(ID "negative_opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "parser")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "object")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "WS_TRANS")
(PUNCT "=")
(PUNCT "{")
(ID "ord")
(PUNCT "(")
(ID "_wschar")
(PUNCT ")")
(PUNCT ":")
(LIT " ")
(KEYWORD for)
(ID "_wschar")
(KEYWORD in)
(ID "string")
(PUNCT ".")
(ID "whitespace")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "wrap_text")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "width")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "wrap_text(text : string, width : int) -> [string]\n\n    Split 'text' into multiple lines of no more than 'width' characters\n    each, and return the list of strings that results.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "text")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT "<=")
(ID "width")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "text")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "expandtabs")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "WS_TRANS")
(PUNCT ")")
(NEWLINE)
(ID "chunks")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "( +|-+)")
(PUNCT ",")
(ID "text")
(PUNCT ")")
(NEWLINE)
(ID "chunks")
(PUNCT "=")
(PUNCT "[")
(ID "ch")
(KEYWORD for)
(ID "ch")
(KEYWORD in)
(ID "chunks")
(KEYWORD if)
(ID "ch")
(PUNCT "]")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cur_line")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "cur_len")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "l")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cur_len")
(PUNCT "+")
(ID "l")
(PUNCT "<=")
(ID "width")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cur_line")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "cur_len")
(PUNCT "=")
(ID "cur_len")
(PUNCT "+")
(ID "l")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cur_line")
(KEYWORD and)
(ID "cur_line")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT " ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "cur_line")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "chunks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cur_len")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cur_line")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "width")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(ID "width")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT " ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "chunks")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "cur_line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "lines")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "translate_longopt")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a long option name to a valid Python identifier by\n    changing \"-\" to \"_\".\n    ")
(NEWLINE)
(KEYWORD return)
(ID "opt")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "longopt_xlate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "OptionDummy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dummy class just used as a place to hold command-line option\n    values as instance attributes.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new OptionDummy instance.  The attributes listed in\n        'options' will be initialized to None.")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "=")
(LIT "Tra-la-la, supercalifragilisticexpialidocious.\nHow *do* you spell that odd word, anyways?\n(Someone ask Mary -- she'll know [or she'll\nsay, \"How should I know?\"].)")
(NEWLINE)
(KEYWORD for)
(ID "w")
(KEYWORD in)
(PUNCT "(")
(LIT 10)
(PUNCT ",")
(LIT 20)
(PUNCT ",")
(LIT 30)
(PUNCT ",")
(LIT 40)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "width: %d")
(PUNCT "%")
(ID "w")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "wrap_text")
(PUNCT "(")
(ID "text")
(PUNCT ",")
(ID "w")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
