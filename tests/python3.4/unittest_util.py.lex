(LIT "Various utility functions.")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "namedtuple")
(PUNCT ",")
(ID "OrderedDict")
(NEWLINE)
(KEYWORD from)
(ID "os")
(PUNCT ".")
(ID "path")
(KEYWORD import)
(ID "commonprefix")
(NEWLINE)
(ID "__unittest")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "_MAX_LENGTH")
(PUNCT "=")
(LIT 80)
(NEWLINE)
(ID "_PLACEHOLDER_LEN")
(PUNCT "=")
(LIT 12)
(NEWLINE)
(ID "_MIN_BEGIN_LEN")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_MIN_END_LEN")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_MIN_COMMON_LEN")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_MIN_DIFF_LEN")
(PUNCT "=")
(ID "_MAX_LENGTH")
(PUNCT "-")
(PUNCT "(")
(ID "_MIN_BEGIN_LEN")
(PUNCT "+")
(ID "_PLACEHOLDER_LEN")
(PUNCT "+")
(ID "_MIN_COMMON_LEN")
(PUNCT "+")
(ID "_PLACEHOLDER_LEN")
(PUNCT "+")
(ID "_MIN_END_LEN")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "_MIN_DIFF_LEN")
(PUNCT ">=")
(LIT 0)
(NEWLINE)
(KEYWORD def)
(ID "_shorten")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "prefixlen")
(PUNCT ",")
(ID "suffixlen")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "-")
(ID "prefixlen")
(PUNCT "-")
(ID "suffixlen")
(NEWLINE)
(KEYWORD if)
(ID "skip")
(PUNCT ">")
(ID "_PLACEHOLDER_LEN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT "%s[%d chars]%s")
(PUNCT "%")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "prefixlen")
(PUNCT "]")
(PUNCT ",")
(ID "skip")
(PUNCT ",")
(ID "s")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT "-")
(ID "suffixlen")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_common_shorten_repr")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "tuple")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "safe_repr")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "maxlen")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "len")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "maxlen")
(PUNCT "<=")
(ID "_MAX_LENGTH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "args")
(NEWLINE)
(DEDENT)
(ID "prefix")
(PUNCT "=")
(ID "commonprefix")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "prefixlen")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "common_len")
(PUNCT "=")
(ID "_MAX_LENGTH")
(PUNCT "-")
(PUNCT "(")
(ID "maxlen")
(PUNCT "-")
(ID "prefixlen")
(PUNCT "+")
(ID "_MIN_BEGIN_LEN")
(PUNCT "+")
(ID "_PLACEHOLDER_LEN")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "common_len")
(PUNCT ">")
(ID "_MIN_COMMON_LEN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "_MIN_BEGIN_LEN")
(PUNCT "+")
(ID "_PLACEHOLDER_LEN")
(PUNCT "+")
(ID "_MIN_COMMON_LEN")
(PUNCT "+")
(PUNCT "(")
(ID "maxlen")
(PUNCT "-")
(ID "prefixlen")
(PUNCT ")")
(PUNCT "<")
(ID "_MAX_LENGTH")
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(ID "_shorten")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "_MIN_BEGIN_LEN")
(PUNCT ",")
(ID "common_len")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "prefix")
(PUNCT "+")
(ID "s")
(PUNCT "[")
(ID "prefixlen")
(PUNCT ":")
(PUNCT "]")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "prefix")
(PUNCT "=")
(ID "_shorten")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "_MIN_BEGIN_LEN")
(PUNCT ",")
(ID "_MIN_COMMON_LEN")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "prefix")
(PUNCT "+")
(ID "_shorten")
(PUNCT "(")
(ID "s")
(PUNCT "[")
(ID "prefixlen")
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(ID "_MIN_DIFF_LEN")
(PUNCT ",")
(ID "_MIN_END_LEN")
(PUNCT ")")
(KEYWORD for)
(ID "s")
(KEYWORD in)
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "safe_repr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "short")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "object")
(PUNCT ".")
(ID "__repr__")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "short")
(KEYWORD or)
(ID "len")
(PUNCT "(")
(ID "result")
(PUNCT ")")
(PUNCT "<")
(ID "_MAX_LENGTH")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(PUNCT "[")
(PUNCT ":")
(ID "_MAX_LENGTH")
(PUNCT "]")
(PUNCT "+")
(LIT " [truncated]...")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "strclass")
(PUNCT "(")
(ID "cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "cls")
(PUNCT ".")
(ID "__module__")
(PUNCT ",")
(ID "cls")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sorted_list_difference")
(PUNCT "(")
(ID "expected")
(PUNCT ",")
(ID "actual")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Finds elements in only one or the other of two, sorted input lists.\n\n    Returns a two-element tuple of lists.    The first list contains those\n    elements in the \"expected\" list but not in the \"actual\" list, and the\n    second contains those elements in the \"actual\" list but not in the\n    \"expected\" list.    Duplicate elements in either input list are ignored.\n    ")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "j")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "missing")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "unexpected")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT "=")
(ID "expected")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "a")
(PUNCT "=")
(ID "actual")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "e")
(PUNCT "<")
(ID "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(NEWLINE)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "expected")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "==")
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "e")
(PUNCT ">")
(ID "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "unexpected")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(NEWLINE)
(ID "j")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "actual")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "==")
(ID "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(ID "expected")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "==")
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "actual")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "==")
(ID "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "j")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "expected")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "unexpected")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "actual")
(PUNCT "[")
(ID "j")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "missing")
(PUNCT ",")
(ID "unexpected")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unorderable_list_difference")
(PUNCT "(")
(ID "expected")
(PUNCT ",")
(ID "actual")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Same behavior as sorted_list_difference but\n    for lists of unorderable items (like dicts).\n\n    As it does a linear search per item (remove) it\n    has O(n*n) performance.")
(NEWLINE)
(ID "missing")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "expected")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "item")
(PUNCT "=")
(ID "expected")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "actual")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "missing")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "missing")
(PUNCT ",")
(ID "actual")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "three_way_cmp")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return -1 if x < y, 0 if x == y and 1 if x > y")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "x")
(PUNCT ">")
(ID "y")
(PUNCT ")")
(PUNCT "-")
(PUNCT "(")
(ID "x")
(PUNCT "<")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_Mismatch")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "Mismatch")
(PUNCT ",")
(LIT "actual expected value")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_count_diff_all_purpose")
(PUNCT "(")
(ID "actual")
(PUNCT ",")
(ID "expected")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ")
(NEWLINE)
(ID "s")
(PUNCT ",")
(ID "t")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "actual")
(PUNCT ")")
(PUNCT ",")
(ID "list")
(PUNCT "(")
(ID "expected")
(PUNCT ")")
(NEWLINE)
(ID "m")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "NULL")
(PUNCT "=")
(ID "object")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "elem")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "elem")
(KEYWORD is)
(ID "NULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "cnt_s")
(PUNCT "=")
(ID "cnt_t")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "j")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "m")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "s")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "==")
(ID "elem")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnt_s")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "s")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "=")
(ID "NULL")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "j")
(PUNCT ",")
(ID "other_elem")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "other_elem")
(PUNCT "==")
(ID "elem")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnt_t")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "t")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "=")
(ID "NULL")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "cnt_s")
(PUNCT "!=")
(ID "cnt_t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "diff")
(PUNCT "=")
(ID "_Mismatch")
(PUNCT "(")
(ID "cnt_s")
(PUNCT ",")
(ID "cnt_t")
(PUNCT ",")
(ID "elem")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "diff")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "elem")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "elem")
(KEYWORD is)
(ID "NULL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "cnt_t")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "j")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "t")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "==")
(ID "elem")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnt_t")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "t")
(PUNCT "[")
(ID "j")
(PUNCT "]")
(PUNCT "=")
(ID "NULL")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "diff")
(PUNCT "=")
(ID "_Mismatch")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "cnt_t")
(PUNCT ",")
(ID "elem")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "diff")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_ordered_count")
(PUNCT "(")
(ID "iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return dict of element counts, in the order they were first seen")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "OrderedDict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(KEYWORD in)
(ID "iterable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "[")
(ID "elem")
(PUNCT "]")
(PUNCT "=")
(ID "c")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "elem")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "c")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_count_diff_hashable")
(PUNCT "(")
(ID "actual")
(PUNCT ",")
(ID "expected")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ")
(NEWLINE)
(ID "s")
(PUNCT ",")
(ID "t")
(PUNCT "=")
(ID "_ordered_count")
(PUNCT "(")
(ID "actual")
(PUNCT ")")
(PUNCT ",")
(ID "_ordered_count")
(PUNCT "(")
(ID "expected")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "cnt_s")
(KEYWORD in)
(ID "s")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnt_t")
(PUNCT "=")
(ID "t")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "elem")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cnt_s")
(PUNCT "!=")
(ID "cnt_t")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "diff")
(PUNCT "=")
(ID "_Mismatch")
(PUNCT "(")
(ID "cnt_s")
(PUNCT ",")
(ID "cnt_t")
(PUNCT ",")
(ID "elem")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "diff")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "elem")
(PUNCT ",")
(ID "cnt_t")
(KEYWORD in)
(ID "t")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "elem")
(KEYWORD not)
(KEYWORD in)
(ID "s")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "diff")
(PUNCT "=")
(ID "_Mismatch")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "cnt_t")
(PUNCT ",")
(ID "elem")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "diff")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(ENDMARKER)
