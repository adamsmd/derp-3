(LIT "Fixer that changes map(F, ...) into list(map(F, ...)) unless there\nexists a 'from future_builtins import map' statement in the top-level\nnamespace.\n\nAs a special case, map(None, X) is changed into list(X).  (This is\nnecessary because the semantics are changed in this case -- the new\nmap(None, X) is equivalent to [(x,) for x in X].)\n\nWe avoid the transformation (except for the special case mentioned\nabove) if the map() call is directly contained in iter(<>), list(<>),\ntuple(<>), sorted(<>), ...join(<>), or for V in <>:.\n\nNOTE: This is still not correct if the original code was depending on\nmap(F, X, Y, ...) to go on until the longest argument is exhausted,\nsubstituting None for missing values -- like zip(), it now stops as\nsoon as the shortest argument is exhausted.\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(PUNCT ",")
(ID "Call")
(PUNCT ",")
(ID "ListComp")
(PUNCT ",")
(ID "in_special_context")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pygram")
(KEYWORD import)
(ID "python_symbols")
(KEYWORD as)
(ID "syms")
(NEWLINE)
(KEYWORD class)
(ID "FixMap")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "ConditionalFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n    map_none=power<\n        'map'\n        trailer< '(' arglist< 'None' ',' arg=any [','] > ')' >\n    >\n    |\n    map_lambda=power<\n        'map'\n        trailer<\n            '('\n            arglist<\n                lambdef< 'lambda'\n                         (fp=NAME | vfpdef< '(' fp=NAME ')'> ) ':' xp=any\n                >\n                ','\n                it=any\n            >\n            ')'\n        >\n    >\n    |\n    power<\n        'map' trailer< '(' [arglist=any] ')' >\n    >\n    ")
(NEWLINE)
(ID "skip_on")
(PUNCT "=")
(LIT "future_builtins.map")
(NEWLINE)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "should_skip")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "parent")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "simple_stmt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(LIT "You should use a for loop here")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "list")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(ID "new")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "map_lambda")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "ListComp")
(PUNCT "(")
(ID "results")
(PUNCT "[")
(LIT "xp")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "results")
(PUNCT "[")
(LIT "fp")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "results")
(PUNCT "[")
(LIT "it")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "map_none")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "arg")
(PUNCT "]")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "arglist")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "arglist")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "args")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "arglist")
(KEYWORD and)
(ID "args")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "NAME")
(KEYWORD and)
(ID "args")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "value")
(PUNCT "==")
(LIT "None")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(LIT "cannot convert map(None, ...) ")
(LIT "with multiple arguments because map() ")
(LIT "now truncates to the shortest sequence")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "in_special_context")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "list")
(PUNCT ")")
(PUNCT ",")
(PUNCT "[")
(ID "new")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "new")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(NEWLINE)
(KEYWORD return)
(ID "new")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
