(LIT "Ttk wrapper.\n\nThis module provides classes to allow using Tk themed widget set.\n\nTtk is based on a revised and enhanced version of\nTIP #48 (http://tip.tcl.tk/48) specified style engine.\n\nIts basic idea is to separate, to the extent possible, the code\nimplementing a widget's behavior from the code implementing its\nappearance. Widget class bindings are primarily responsible for\nmaintaining the widget state and invoking callbacks, all aspects\nof the widgets appearance lies at Themes.\n")
(NEWLINE)
(ID "__version__")
(PUNCT "=")
(LIT "0.3.1")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Guilherme Polo <ggpolo@gmail.com>")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Button")
(PUNCT ",")
(LIT "Checkbutton")
(PUNCT ",")
(LIT "Combobox")
(PUNCT ",")
(LIT "Entry")
(PUNCT ",")
(LIT "Frame")
(PUNCT ",")
(LIT "Label")
(PUNCT ",")
(LIT "Labelframe")
(PUNCT ",")
(LIT "LabelFrame")
(PUNCT ",")
(LIT "Menubutton")
(PUNCT ",")
(LIT "Notebook")
(PUNCT ",")
(LIT "Panedwindow")
(PUNCT ",")
(LIT "PanedWindow")
(PUNCT ",")
(LIT "Progressbar")
(PUNCT ",")
(LIT "Radiobutton")
(PUNCT ",")
(LIT "Scale")
(PUNCT ",")
(LIT "Scrollbar")
(PUNCT ",")
(LIT "Separator")
(PUNCT ",")
(LIT "Sizegrip")
(PUNCT ",")
(LIT "Style")
(PUNCT ",")
(LIT "Treeview")
(PUNCT ",")
(LIT "LabeledScale")
(PUNCT ",")
(LIT "OptionMenu")
(PUNCT ",")
(LIT "tclobjs_to_py")
(PUNCT ",")
(LIT "setup_master")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "tkinter")
(NEWLINE)
(KEYWORD from)
(ID "tkinter")
(KEYWORD import)
(ID "_flatten")
(PUNCT ",")
(ID "_join")
(PUNCT ",")
(ID "_stringify")
(PUNCT ",")
(ID "_splitdict")
(NEWLINE)
(ID "_REQUIRE_TILE")
(PUNCT "=")
(KEYWORD True)
(KEYWORD if)
(ID "tkinter")
(PUNCT ".")
(ID "TkVersion")
(PUNCT "<")
(LIT 8.5)
(KEYWORD else)
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "_load_tile")
(PUNCT "(")
(ID "master")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_REQUIRE_TILE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "os")
(NEWLINE)
(ID "tilelib")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "TILE_LIBRARY")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tilelib")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "master")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "eval")
(PUNCT "(")
(LIT "global auto_path; ")
(LIT "lappend auto_path {%s}")
(PUNCT "%")
(ID "tilelib")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "master")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "eval")
(PUNCT "(")
(LIT "package require tile")
(PUNCT ")")
(NEWLINE)
(ID "master")
(PUNCT ".")
(ID "_tile_loaded")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_format_optvalue")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "script")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "script")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_stringify")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_optdict")
(PUNCT "(")
(ID "optdict")
(PUNCT ",")
(ID "script")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "ignore")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Formats optdict to a tuple to pass it to tk.call.\n\n    E.g. (script=False):\n      {'foreground': 'blue', 'padding': [1, 2, 3, 4]} returns:\n      ('-foreground', 'blue', '-padding', '1 2 3 4')")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "optdict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "ignore")
(KEYWORD or)
(ID "opt")
(KEYWORD not)
(KEYWORD in)
(ID "ignore")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-%s")
(PUNCT "%")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_format_optvalue")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "_flatten")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_mapdict_values")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_val")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(PUNCT "*")
(ID "state")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "=")
(ID "state")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(KEYWORD or)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "state")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "opt_val")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_val")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "opt_val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_mapdict")
(PUNCT "(")
(ID "mapdict")
(PUNCT ",")
(ID "script")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Formats mapdict to pass it to tk.call.\n\n    E.g. (script=False):\n      {'expand': [('active', 'selected', 'grey'), ('focus', [1, 2, 3, 4])]}\n\n      returns:\n\n      ('-expand', '{active selected} grey focus {1, 2, 3, 4}')")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "mapdict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "(")
(LIT "-%s")
(PUNCT "%")
(ID "opt")
(PUNCT ",")
(ID "_format_optvalue")
(PUNCT "(")
(ID "_mapdict_values")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_flatten")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_elemcreate")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(ID "script")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Formats args and kw according to the given element factory etype.")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "opts")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "etype")
(KEYWORD in)
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "vsapi")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "etype")
(PUNCT "==")
(LIT "image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "iname")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "imagespec")
(PUNCT "=")
(ID "_join")
(PUNCT "(")
(ID "_mapdict_values")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(LIT "%s %s")
(PUNCT "%")
(PUNCT "(")
(ID "iname")
(PUNCT ",")
(ID "imagespec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "class_name")
(PUNCT ",")
(ID "part_id")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(ID "statemap")
(PUNCT "=")
(ID "_join")
(PUNCT "(")
(ID "_mapdict_values")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "spec")
(PUNCT "=")
(LIT "%s %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "class_name")
(PUNCT ",")
(ID "part_id")
(PUNCT ",")
(ID "statemap")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "opts")
(PUNCT "=")
(ID "_format_optdict")
(PUNCT "(")
(ID "kw")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "etype")
(PUNCT "==")
(LIT "from")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opts")
(PUNCT "=")
(PUNCT "(")
(ID "_format_optvalue")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "script")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(LIT "{%s}")
(PUNCT "%")
(ID "spec")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "spec")
(PUNCT ",")
(ID "opts")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_layoutlist")
(PUNCT "(")
(ID "layout")
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "indent_size")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Formats a layout list so we can pass the result to ttk::style\n    layout and ttk::style settings. Note that the layout doesn't has to\n    be a list necessarily.\n\n    E.g.:\n      [(\"Menubutton.background\", None),\n       (\"Menubutton.button\", {\"children\":\n           [(\"Menubutton.focus\", {\"children\":\n               [(\"Menubutton.padding\", {\"children\":\n                [(\"Menubutton.label\", {\"side\": \"left\", \"expand\": 1})]\n               })]\n           })]\n       }),\n       (\"Menubutton.indicator\", {\"side\": \"right\"})\n      ]\n\n      returns:\n\n      Menubutton.background\n      Menubutton.button -children {\n        Menubutton.focus -children {\n          Menubutton.padding -children {\n            Menubutton.label -side left -expand 1\n          }\n        }\n      }\n      Menubutton.indicator -side right")
(NEWLINE)
(ID "script")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "layout_elem")
(KEYWORD in)
(ID "layout")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "elem")
(PUNCT ",")
(ID "opts")
(PUNCT "=")
(ID "layout_elem")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(ID "opts")
(KEYWORD or)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "fopts")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_format_optdict")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(PUNCT "(")
(LIT "children")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "head")
(PUNCT "=")
(LIT "%s%s%s")
(PUNCT "%")
(PUNCT "(")
(LIT " ")
(PUNCT "*")
(ID "indent")
(PUNCT ",")
(ID "elem")
(PUNCT ",")
(PUNCT "(")
(LIT " %s")
(PUNCT "%")
(ID "fopts")
(PUNCT ")")
(KEYWORD if)
(ID "fopts")
(KEYWORD else)
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "children")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "head")
(PUNCT "+")
(LIT " -children {")
(PUNCT ")")
(NEWLINE)
(ID "indent")
(PUNCT "+=")
(ID "indent_size")
(NEWLINE)
(ID "newscript")
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(ID "_format_layoutlist")
(PUNCT "(")
(ID "opts")
(PUNCT "[")
(LIT "children")
(PUNCT "]")
(PUNCT ",")
(ID "indent")
(PUNCT ",")
(ID "indent_size")
(PUNCT ")")
(NEWLINE)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "newscript")
(PUNCT ")")
(NEWLINE)
(ID "indent")
(PUNCT "-=")
(ID "indent_size")
(NEWLINE)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "%s}")
(PUNCT "%")
(PUNCT "(")
(LIT " ")
(PUNCT "*")
(ID "indent")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "head")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "script")
(PUNCT ")")
(PUNCT ",")
(ID "indent")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_script_from_settings")
(PUNCT "(")
(ID "settings")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns an appropriate script, based on settings, according to\n    theme_settings definition to be used by theme_settings and\n    theme_create.")
(NEWLINE)
(ID "script")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(PUNCT ",")
(ID "opts")
(KEYWORD in)
(ID "settings")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opts")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "configure")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_format_optdict")
(PUNCT "(")
(ID "opts")
(PUNCT "[")
(LIT "configure")
(PUNCT "]")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "ttk::style configure %s %s;")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opts")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "map")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_format_mapdict")
(PUNCT "(")
(ID "opts")
(PUNCT "[")
(LIT "map")
(PUNCT "]")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "ttk::style map %s %s;")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "layout")
(KEYWORD in)
(ID "opts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "opts")
(PUNCT "[")
(LIT "layout")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(LIT "null")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ",")
(ID "_")
(PUNCT "=")
(ID "_format_layoutlist")
(PUNCT "(")
(ID "opts")
(PUNCT "[")
(LIT "layout")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "ttk::style layout %s {\n%s\n}")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "opts")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "element create")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "eopts")
(PUNCT "=")
(ID "opts")
(PUNCT "[")
(LIT "element create")
(PUNCT "]")
(NEWLINE)
(ID "etype")
(PUNCT "=")
(ID "eopts")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "argc")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "argc")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "eopts")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "eopts")
(PUNCT "[")
(ID "argc")
(PUNCT "]")
(PUNCT ",")
(LIT "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "argc")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "elemargs")
(PUNCT "=")
(ID "eopts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(ID "argc")
(PUNCT "]")
(NEWLINE)
(ID "elemkw")
(PUNCT "=")
(ID "eopts")
(PUNCT "[")
(ID "argc")
(PUNCT "]")
(KEYWORD if)
(ID "argc")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "eopts")
(PUNCT ")")
(KEYWORD and)
(ID "eopts")
(PUNCT "[")
(ID "argc")
(PUNCT "]")
(KEYWORD else)
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "spec")
(PUNCT ",")
(ID "opts")
(PUNCT "=")
(ID "_format_elemcreate")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(KEYWORD True)
(PUNCT ",")
(PUNCT "*")
(ID "elemargs")
(PUNCT ",")
(PUNCT "**")
(ID "elemkw")
(PUNCT ")")
(NEWLINE)
(ID "script")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "ttk::style element create %s %s %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "etype")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_list_from_statespec")
(PUNCT "(")
(ID "stuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a list from the given statespec tuple according to the\n    accepted statespec accepted by _format_mapdict.")
(NEWLINE)
(ID "nval")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "val")
(KEYWORD in)
(ID "stuple")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "typename")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(LIT "typename")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nval")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "typename")
(PUNCT "==")
(LIT "StateSpec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "val")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nval")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "it")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "nval")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "_flatten")
(PUNCT "(")
(ID "spec")
(PUNCT ")")
(KEYWORD for)
(ID "spec")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "it")
(PUNCT ",")
(ID "it")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_list_from_layouttuple")
(PUNCT "(")
(ID "tk")
(PUNCT ",")
(ID "ltuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a list from the tuple returned by ttk::layout, this is\n    somewhat the reverse of _format_layoutlist.")
(NEWLINE)
(ID "ltuple")
(PUNCT "=")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "ltuple")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "indx")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD while)
(ID "indx")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "ltuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "ltuple")
(PUNCT "[")
(ID "indx")
(PUNCT "]")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "res")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "indx")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD while)
(ID "indx")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "ltuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT ",")
(ID "val")
(PUNCT "=")
(ID "ltuple")
(PUNCT "[")
(ID "indx")
(PUNCT ":")
(ID "indx")
(PUNCT "+")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "opt")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "opt")
(PUNCT "=")
(ID "opt")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "indx")
(PUNCT "+=")
(LIT 2)
(NEWLINE)
(KEYWORD if)
(ID "opt")
(PUNCT "==")
(LIT "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "_list_from_layouttuple")
(PUNCT "(")
(ID "tk")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "opts")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(ID "val")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_val_or_dict")
(PUNCT "(")
(ID "tk")
(PUNCT ",")
(ID "options")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format options then call Tk command with args and options and return\n    the appropriate result.\n\n    If no option is specified, a dict is returned. If a option is\n    specified with the None value, the value for that option is returned.\n    Otherwise, the function just sets the passed options and the caller\n    shouldn't be expecting a return value anyway.")
(NEWLINE)
(ID "options")
(PUNCT "=")
(ID "_format_optdict")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "*")
(PUNCT "(")
(ID "args")
(PUNCT "+")
(ID "options")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(PUNCT "%")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_splitdict")
(PUNCT "(")
(ID "tk")
(PUNCT ",")
(ID "res")
(PUNCT ",")
(ID "conv")
(PUNCT "=")
(ID "_tclobj_to_py")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_convert_stringval")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Converts a value to, hopefully, a more appropriate Python object.")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_to_number")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT ".")
(KEYWORD in)
(ID "x")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_tclobj_to_py")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return value converted from Tcl object to Python object.")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(LIT "__len__")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "getattr")
(PUNCT "(")
(ID "val")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(LIT "typename")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "==")
(LIT "StateSpec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "_list_from_statespec")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "_convert_stringval")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "val")
(PUNCT ",")
(LIT "typename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "_convert_stringval")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "val")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tclobjs_to_py")
(PUNCT "(")
(ID "adict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns adict with its values converted from Tcl objects to Python\n    objects.")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(PUNCT ",")
(ID "val")
(KEYWORD in)
(ID "adict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "adict")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(ID "_tclobj_to_py")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "adict")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setup_master")
(PUNCT "(")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If master is not None, itself is returned. If master is None,\n    the default master is returned if there is one, otherwise a new\n    master is created and returned.\n\n    If it is not allowed to use the default root and master is None,\n    RuntimeError is raised.")
(NEWLINE)
(KEYWORD if)
(ID "master")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tkinter")
(PUNCT ".")
(ID "_support_default_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "master")
(PUNCT "=")
(ID "tkinter")
(PUNCT ".")
(ID "_default_root")
(KEYWORD or)
(ID "tkinter")
(PUNCT ".")
(ID "Tk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "No master specified and tkinter is ")
(LIT "configured to not support default root")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "master")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Style")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Manipulate style database.")
(NEWLINE)
(ID "_name")
(PUNCT "=")
(LIT "ttk::style")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "master")
(PUNCT "=")
(ID "setup_master")
(PUNCT "(")
(ID "master")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "getattr")
(PUNCT "(")
(ID "master")
(PUNCT ",")
(LIT "_tile_loaded")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_load_tile")
(PUNCT "(")
(ID "master")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT "=")
(ID "master")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(ID "query_opt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or sets the default value of the specified option(s) in\n        style.\n\n        Each key in kw is an option and each value is either a string or\n        a sequence identifying the value for that option.")
(NEWLINE)
(KEYWORD if)
(ID "query_opt")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "query_opt")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "style")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "map")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(ID "query_opt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or sets dynamic values of the specified option(s) in\n        style.\n\n        Each key in kw is an option and each value should be a list or a\n        tuple (usually) containing statespecs grouped in tuples, or list,\n        or something else of your preference. A statespec is compound of\n        one or more states and then a value.")
(NEWLINE)
(KEYWORD if)
(ID "query_opt")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_list_from_statespec")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "map")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(LIT "-%s")
(PUNCT "%")
(ID "query_opt")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_splitdict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "map")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(PUNCT "*")
(ID "_format_mapdict")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "conv")
(PUNCT "=")
(ID "_tclobj_to_py")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lookup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "state")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the value specified for option in style.\n\n        If state is specified it is expected to be a sequence of one\n        or more states. If the default argument is set, it is used as\n        a fallback value in case no specification for option is found.")
(NEWLINE)
(ID "state")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "state")
(PUNCT ")")
(KEYWORD if)
(ID "state")
(KEYWORD else)
(LIT "")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "lookup")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(LIT "-%s")
(PUNCT "%")
(ID "option")
(PUNCT ",")
(ID "state")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "layout")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(ID "layoutspec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Define the widget layout for given style. If layoutspec is\n        omitted, return the layout specification for given style.\n\n        layoutspec is expected to be a list or an object different than\n        None that evaluates to False if you want to \"turn off\" that style.\n        If it is a list (or tuple, or something else), each item should be\n        a tuple where the first item is the layout name and the second item\n        should have the format described below:\n\n        LAYOUTS\n\n            A layout can contain the value None, if takes no options, or\n            a dict of options specifying how to arrange the element.\n            The layout mechanism uses a simplified version of the pack\n            geometry manager: given an initial cavity, each element is\n            allocated a parcel. Valid options/values are:\n\n                side: whichside\n                    Specifies which side of the cavity to place the\n                    element; one of top, right, bottom or left. If\n                    omitted, the element occupies the entire cavity.\n\n                sticky: nswe\n                    Specifies where the element is placed inside its\n                    allocated parcel.\n\n                children: [sublayout... ]\n                    Specifies a list of elements to place inside the\n                    element. Each element is a tuple (or other sequence)\n                    where the first item is the layout name, and the other\n                    is a LAYOUT.")
(NEWLINE)
(ID "lspec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "layoutspec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lspec")
(PUNCT "=")
(ID "_format_layoutlist")
(PUNCT "(")
(ID "layoutspec")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "layoutspec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lspec")
(PUNCT "=")
(LIT "null")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_list_from_layouttuple")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "layout")
(PUNCT ",")
(ID "style")
(PUNCT ",")
(ID "lspec")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "element_create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "elementname")
(PUNCT ",")
(ID "etype")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new element in the current theme of given etype.")
(NEWLINE)
(ID "spec")
(PUNCT ",")
(ID "opts")
(PUNCT "=")
(ID "_format_elemcreate")
(PUNCT "(")
(ID "etype")
(PUNCT ",")
(KEYWORD False)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "element")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "elementname")
(PUNCT ",")
(ID "etype")
(PUNCT ",")
(ID "spec")
(PUNCT ",")
(PUNCT "*")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "element_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the list of elements defined in the current theme.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "element")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "element_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "elementname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the list of elementname's options.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "element")
(PUNCT ",")
(LIT "options")
(PUNCT ",")
(ID "elementname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "theme_create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "themename")
(PUNCT ",")
(ID "parent")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "settings")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates a new theme.\n\n        It is an error if themename already exists. If parent is\n        specified, the new theme will inherit styles, elements and\n        layouts from the specified parent theme. If settings are present,\n        they are expected to have the same syntax used for theme_settings.")
(NEWLINE)
(ID "script")
(PUNCT "=")
(ID "_script_from_settings")
(PUNCT "(")
(ID "settings")
(PUNCT ")")
(KEYWORD if)
(ID "settings")
(KEYWORD else)
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "parent")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "theme")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "themename")
(PUNCT ",")
(LIT "-parent")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(LIT "-settings")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "theme")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "themename")
(PUNCT ",")
(LIT "-settings")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "theme_settings")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "themename")
(PUNCT ",")
(ID "settings")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Temporarily sets the current theme to themename, apply specified\n        settings and then restore the previous theme.\n\n        Each key in settings is a style and each value may contain the\n        keys 'configure', 'map', 'layout' and 'element create' and they\n        are expected to have the same format as specified by the methods\n        configure, map, layout and element_create respectively.")
(NEWLINE)
(ID "script")
(PUNCT "=")
(ID "_script_from_settings")
(PUNCT "(")
(ID "settings")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "theme")
(PUNCT ",")
(LIT "settings")
(PUNCT ",")
(ID "themename")
(PUNCT ",")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "theme_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a list of all known themes.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(LIT "theme")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "theme_use")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "themename")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If themename is None, returns the theme in use, otherwise, set\n        the current theme to themename, refreshes all widgets and emits\n        a <<ThemeChanged>> event.")
(NEWLINE)
(KEYWORD if)
(ID "themename")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "eval")
(PUNCT "(")
(LIT "return $ttk::currentTheme")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "ttk::setTheme")
(PUNCT ",")
(ID "themename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Widget")
(PUNCT "(")
(ID "tkinter")
(PUNCT ".")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for Tk themed widgets.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "widgetname")
(PUNCT ",")
(ID "kw")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructs a Ttk Widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, takefocus, style\n\n        SCROLLABLE WIDGET OPTIONS\n\n            xscrollcommand, yscrollcommand\n\n        LABEL WIDGET OPTIONS\n\n            text, textvariable, underline, image, compound, width\n\n        WIDGET STATES\n\n            active, disabled, focus, pressed, selected, background,\n            readonly, alternate, invalid\n        ")
(NEWLINE)
(ID "master")
(PUNCT "=")
(ID "setup_master")
(PUNCT "(")
(ID "master")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "getattr")
(PUNCT "(")
(ID "master")
(PUNCT ",")
(LIT "_tile_loaded")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_load_tile")
(PUNCT "(")
(ID "master")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tkinter")
(PUNCT ".")
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "widgetname")
(PUNCT ",")
(ID "kw")
(PUNCT "=")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the name of the element at position x, y, or the empty\n        string if the point does not lie within any element.\n\n        x and y are pixel coordinates relative to the widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "instate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "statespec")
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Test the widget's state.\n\n        If callback is not specified, returns True if the widget state\n        matches statespec and False otherwise. If callback is specified,\n        then it will be invoked with *args, **kw if the widget state\n        matches statespec. statespec is expected to be a sequence.")
(NEWLINE)
(ID "ret")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "instate")
(PUNCT ",")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "statespec")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ret")
(KEYWORD and)
(ID "callback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "callback")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "ret")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "state")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "statespec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Modify or inquire widget state.\n\n        Widget state is returned if statespec is None, otherwise it is\n        set according to the statespec flags and then a new state spec\n        is returned indicating which flags were changed. statespec is\n        expected to be a sequence.")
(NEWLINE)
(KEYWORD if)
(ID "statespec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "statespec")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "statespec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "state")
(PUNCT ",")
(ID "statespec")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Button")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Button widget, displays a textual label and/or image, and\n    evaluates a command when pressed.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Button widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, default, width\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::button")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Invokes the command associated with the button.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Checkbutton")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Checkbutton widget which is either in on- or off-state.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Checkbutton widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, offvalue, onvalue, variable\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::checkbutton")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toggles between the selected and deselected states and\n        invokes the associated command. If the widget is currently\n        selected, sets the option variable to the offvalue option\n        and deselects the widget; otherwise, sets the option variable\n        to the option onvalue.\n\n        Returns the result of the associated command.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Entry")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "Entry")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Entry widget displays a one-line text string and allows that\n    string to be edited by the user.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "widget")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Constructs a Ttk Entry widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus, xscrollcommand\n\n        WIDGET-SPECIFIC OPTIONS\n\n            exportselection, invalidcommand, justify, show, state,\n            textvariable, validate, validatecommand, width\n\n        VALIDATION MODES\n\n            none, key, focus, focusin, focusout, all\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "widget")
(KEYWORD or)
(LIT "ttk::entry")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of (x, y, width, height) which describes the\n        bounding box of the character given by index.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bbox")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the name of the element at position x, y, or the\n        empty string if the coordinates are outside the window.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "validate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Force revalidation, independent of the conditions specified\n        by the validate option. Returns False if validation fails, True\n        if it succeeds. Sets or clears the invalid state accordingly.")
(NEWLINE)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "validate")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Combobox")
(PUNCT "(")
(ID "Entry")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Combobox widget combines a text field with a pop-down list of\n    values.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Combobox widget with the parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            exportselection, justify, height, postcommand, state,\n            textvariable, values, width\n        ")
(NEWLINE)
(ID "Entry")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::combobox")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "current")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newindex")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If newindex is supplied, sets the combobox value to the\n        element at position newindex in the list of values. Otherwise,\n        returns the index of the current value in the list of values\n        or -1 if the current value does not appear in the list.")
(NEWLINE)
(KEYWORD if)
(ID "newindex")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "current")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "current")
(PUNCT ",")
(ID "newindex")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the value of the combobox to value.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Frame")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Frame widget is a container, used to group other widgets\n    together.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Frame with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            borderwidth, relief, padding, width, height\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::frame")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Label")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Label widget displays a textual label and/or image.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Label with parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, style, takefocus, text,\n            textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            anchor, background, font, foreground, justify, padding,\n            relief, text, wraplength\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::label")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Labelframe")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Labelframe widget is a container used to group other widgets\n    together. It has an optional label, which may be a plain text string\n    or another widget.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Labelframe with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n            labelanchor, text, underline, padding, labelwidget, width,\n            height\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::labelframe")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "LabelFrame")
(PUNCT "=")
(ID "Labelframe")
(NEWLINE)
(KEYWORD class)
(ID "Menubutton")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Menubutton widget displays a textual label and/or image, and\n    displays a menu when pressed.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Menubutton with parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            direction, menu\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::menubutton")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Notebook")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Notebook widget manages a collection of windows and displays\n    a single one at a time. Each child window is associated with a tab,\n    which the user may select to change the currently-displayed window.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Notebook with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            height, padding, width\n\n        TAB OPTIONS\n\n            state, sticky, padding, text, image, compound, underline\n\n        TAB IDENTIFIERS (tab_id)\n\n            The tab_id argument found in several methods may take any of\n            the following forms:\n\n                * An integer between zero and the number of tabs\n                * The name of a child window\n                * A positional specification of the form \"@x,y\", which\n                  defines the tab\n                * The string \"current\", which identifies the\n                  currently-selected tab\n                * The string \"end\", which returns the number of tabs (only\n                  valid for method index)\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::notebook")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adds a new tab to the notebook.\n\n        If window is currently managed by the notebook but hidden, it is\n        restored to its previous position.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "add")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "*")
(PUNCT "(")
(ID "_format_optdict")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "forget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Removes the tab specified by tab_id, unmaps and unmanages the\n        associated window.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "forget")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "hide")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Hides the tab specified by tab_id.\n\n        The tab will not be displayed, but the associated window remains\n        managed by the notebook and its configuration remembered. Hidden\n        tabs may be restored with the add command.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "hide")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the name of the tab element at position x, y, or the\n        empty string if none.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the numeric index of the tab specified by tab_id, or\n        the total number of tabs if tab_id is the string \"end\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inserts a pane at the specified position.\n\n        pos is either the string end, an integer index, or the name of\n        a managed child. If child is already managed by the notebook,\n        moves it to the specified position.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "*")
(PUNCT "(")
(ID "_format_optdict")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tab_id")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Selects the specified tab.\n\n        The associated child window will be displayed, and the\n        previously-selected window (if different) is unmapped. If tab_id\n        is omitted, returns the widget name of the currently selected\n        pane.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tab")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tab_id")
(PUNCT ",")
(ID "option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the options of the specific tab_id.\n\n        If kw is not given, returns a dict of the tab option values. If option\n        is specified, returns the value of that option. Otherwise, sets the\n        options to the corresponding values.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tab")
(PUNCT ",")
(ID "tab_id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tabs")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a list of windows managed by the notebook.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tabs")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "enable_traversal")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Enable keyboard traversal for a toplevel window containing\n        this notebook.\n\n        This will extend the bindings for the toplevel window containing\n        this notebook as follows:\n\n            Control-Tab: selects the tab following the currently selected\n                         one\n\n            Shift-Control-Tab: selects the tab preceding the currently\n                               selected one\n\n            Alt-K: where K is the mnemonic (underlined) character of any\n                   tab, will select that tab.\n\n        Multiple notebooks in a single toplevel may be enabled for\n        traversal, including nested notebooks. However, notebook traversal\n        only works properly if all panes are direct children of the\n        notebook.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "ttk::notebook::enableTraversal")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Panedwindow")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "PanedWindow")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Panedwindow widget displays a number of subwindows, stacked\n    either vertically or horizontally.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Panedwindow with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            orient, width, height\n\n        PANE OPTIONS\n\n            weight\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::panedwindow")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "forget")
(PUNCT "=")
(ID "tkinter")
(PUNCT ".")
(ID "PanedWindow")
(PUNCT ".")
(ID "forget")
(NEWLINE)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inserts a pane at the specified positions.\n\n        pos is either the string end, and integer index, or the name\n        of a child. If child is already managed by the paned window,\n        moves it to the specified position.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "pos")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "*")
(PUNCT "(")
(ID "_format_optdict")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pane")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pane")
(PUNCT ",")
(ID "option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the options of the specified pane.\n\n        pane is either an integer index or the name of a managed subwindow.\n        If kw is not given, returns a dict of the pane option values. If\n        option is specified then the value for that option is returned.\n        Otherwise, sets the options to the corresponding values.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "pane")
(PUNCT ",")
(ID "pane")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sashpos")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "newpos")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If newpos is specified, sets the position of sash number index.\n\n        May adjust the positions of adjacent sashes to ensure that\n        positions are monotonically increasing. Sash positions are further\n        constrained to be between 0 and the total size of the widget.\n\n        Returns the new position of sash number index.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "sashpos")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "newpos")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "PanedWindow")
(PUNCT "=")
(ID "Panedwindow")
(NEWLINE)
(KEYWORD class)
(ID "Progressbar")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Progressbar widget shows the status of a long-running\n    operation. They can operate in two modes: determinate mode shows the\n    amount completed relative to the total amount of work to be done, and\n    indeterminate mode provides an animated display to let the user know\n    that something is happening.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Progressbar with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            orient, length, mode, maximum, value, variable, phase\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::progressbar")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "start")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "interval")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Begin autoincrement mode: schedules a recurring timer event\n        that calls method step every interval milliseconds.\n\n        interval defaults to 50 milliseconds (20 steps/second) if ommited.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "start")
(PUNCT ",")
(ID "interval")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "step")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "amount")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Increments the value option by amount.\n\n        amount defaults to 1.0 if omitted.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "step")
(PUNCT ",")
(ID "amount")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop autoincrement mode: cancels any recurring timer event\n        initiated by start.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "stop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Radiobutton")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Radiobutton widgets are used in groups to show or change a\n    set of mutually-exclusive options.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Radiobutton with parent master.\n\n        STANDARD OPTIONS\n\n            class, compound, cursor, image, state, style, takefocus,\n            text, textvariable, underline, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, value, variable\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::radiobutton")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the option variable to the option value, selects the\n        widget, and invokes the associated command.\n\n        Returns the result of the command, or an empty string if\n        no command is specified.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Scale")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "Scale")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Scale widget is typically used to control the numeric value of\n    a linked variable that varies uniformly over some range.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Scale with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, from, length, orient, to, value, variable\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::scale")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Modify or query scale options.\n\n        Setting a value for any of the \"from\", \"from_\" or \"to\" options\n        generates a <<RangeChanged>> event.")
(NEWLINE)
(KEYWORD if)
(ID "cnf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "cnf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "Widget")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "any")
(PUNCT "(")
(PUNCT "[")
(LIT "from")
(KEYWORD in)
(ID "kw")
(PUNCT ",")
(LIT "from_")
(KEYWORD in)
(ID "kw")
(PUNCT ",")
(LIT "to")
(KEYWORD in)
(ID "kw")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "event_generate")
(PUNCT "(")
(LIT "<<RangeChanged>>")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "y")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the current value of the value option, or the value\n        corresponding to the coordinates x, y if they are specified.\n\n        x and y are pixel coordinates relative to the scale widget\n        origin.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Scrollbar")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "Scrollbar")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Scrollbar controls the viewport of a scrollable widget.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Scrollbar with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, orient\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::scrollbar")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Separator")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Separator widget displays a horizontal or vertical separator\n    bar.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Separator with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus\n\n        WIDGET-SPECIFIC OPTIONS\n\n            orient\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::separator")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Sizegrip")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Sizegrip allows the user to resize the containing toplevel\n    window by pressing and dragging the grip.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Sizegrip with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, state, style, takefocus\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::sizegrip")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Treeview")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "XView")
(PUNCT ",")
(ID "tkinter")
(PUNCT ".")
(ID "YView")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ttk Treeview widget displays a hierarchical collection of items.\n\n    Each item has a textual label, an optional image, and an optional list\n    of data values. The data values are displayed in successive columns\n    after the tree label.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a Ttk Treeview with parent master.\n\n        STANDARD OPTIONS\n\n            class, cursor, style, takefocus, xscrollcommand,\n            yscrollcommand\n\n        WIDGET-SPECIFIC OPTIONS\n\n            columns, displaycolumns, height, padding, selectmode, show\n\n        ITEM OPTIONS\n\n            text, image, values, open, tags\n\n        TAG OPTIONS\n\n            foreground, background, font, image\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "ttk::treeview")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the bounding box (relative to the treeview widget's\n        window) of the specified item in the form x y width height.\n\n        If column is specified, returns the bounding box of that cell.\n        If the item is not visible (i.e., if it is a descendant of a\n        closed item or is scrolled offscreen), returns an empty string.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bbox")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_children")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a tuple of children belonging to item.\n\n        If item is not specified, returns root children.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "children")
(PUNCT ",")
(ID "item")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_children")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(PUNCT "*")
(ID "newchildren")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replaces item's child with newchildren.\n\n        Children present in item that are not present in newchildren\n        are detached from tree. No items in newchildren may be an\n        ancestor of item.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "children")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "newchildren")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "column")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "column")
(PUNCT ",")
(ID "option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the options for the specified column.\n\n        If kw is not given, returns a dict of the column option values. If\n        option is specified then the value for that option is returned.\n        Otherwise, sets the options to the corresponding values.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "column")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete all specified items and all their descendants. The root\n        item may not be deleted.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "detach")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unlinks all of the specified items from the tree.\n\n        The items and all of their descendants are still present, and may\n        be reinserted at another point in the tree, but will not be\n        displayed. The root item may not be detached.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "detach")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "exists")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns True if the specified item is present in the tree,\n        False otherwise.")
(NEWLINE)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "focus")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If item is specified, sets the focus item to item. Otherwise,\n        returns the current focus item, or '' if there is none.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "focus")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "heading")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "column")
(PUNCT ",")
(ID "option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the heading options for the specified column.\n\n        If kw is not given, returns a dict of the heading option values. If\n        option is specified then the value for that option is returned.\n        Otherwise, sets the options to the corresponding values.\n\n        Valid options/values are:\n            text: text\n                The text to display in the column heading\n            image: image_name\n                Specifies an image to display to the right of the column\n                heading\n            anchor: anchor\n                Specifies how the heading text should be aligned. One of\n                the standard Tk anchor values\n            command: callback\n                A callback to be invoked when the heading label is\n                pressed.\n\n        To configure the tree column heading, call this with column = \"#0\" ")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(ID "kw")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cmd")
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(LIT "command")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_substitute")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "heading")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "component")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a description of the specified component under the\n        point given by x and y, or the empty string if no such component\n        is present at that position.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "component")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify_row")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the item ID of the item at position y.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "identify")
(PUNCT "(")
(LIT "row")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify_column")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the data column identifier of the cell at position x.\n\n        The tree column has ID #0.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "identify")
(PUNCT "(")
(LIT "column")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify_region")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns one of:\n\n        heading: Tree heading area.\n        separator: Space between two columns headings;\n        tree: The tree area.\n        cell: A data cell.\n\n        * Availability: Tk 8.6")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "identify")
(PUNCT "(")
(LIT "region")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the element at position x, y.\n\n        * Availability: Tk 8.6")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "identify")
(PUNCT "(")
(LIT "element")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the integer index of item within its parent's list\n        of children.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "iid")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates a new item and return the item identifier of the newly\n        created item.\n\n        parent is the item ID of the parent item, or the empty string\n        to create a new top-level item. index is an integer, or the value\n        end, specifying where in the list of parent's children to insert\n        the new item. If index is less than or equal to zero, the new node\n        is inserted at the beginning, if index is greater than or equal to\n        the current number of children, it is inserted at the end. If iid\n        is specified, it is used as the item identifier, iid must not\n        already exist in the tree. Otherwise, a new unique identifier\n        is generated.")
(NEWLINE)
(ID "opts")
(PUNCT "=")
(ID "_format_optdict")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "iid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(LIT "-id")
(PUNCT ",")
(ID "iid")
(PUNCT ",")
(PUNCT "*")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(PUNCT "*")
(ID "opts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "item")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the options for the specified item.\n\n        If no options are given, a dict with options/values for the item\n        is returned. If option is specified then the value for that option\n        is returned. Otherwise, sets the options to the corresponding\n        values as given by kw.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "item")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "move")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Moves item to position index in parent's list of children.\n\n        It is illegal to move an item under one of its descendants. If\n        index is less than or equal to zero, item is moved to the\n        beginning, if greater than or equal to the number of children,\n        it is moved to the end. If item was detached it is reattached.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "move")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "parent")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "reattach")
(PUNCT "=")
(ID "move")
(NEWLINE)
(KEYWORD def)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the identifier of item's next sibling, or '' if item\n        is the last child of its parent.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "next")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parent")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the ID of the parent of item, or '' if item is at the\n        top level of the hierarchy.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "parent")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "prev")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the identifier of item's previous sibling, or '' if\n        item is the first child of its parent.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "prev")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "see")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensure that item is visible.\n\n        Sets all of item's ancestors open option to True, and scrolls\n        the widget if necessary so that item is within the visible\n        portion of the tree.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "see")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "selop")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "items")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If selop is not specified, returns selected items.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(ID "selop")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "items becomes the new selection.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "set")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add items to the selection.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "add")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_remove")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove items from the selection.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "remove")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_toggle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toggle the selection state of each item in items.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "toggle")
(PUNCT ",")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or set the value of given item.\n\n        With one argument, return a dictionary of column/value pairs\n        for the specified item. With two arguments, return the current\n        value of the specified column. With three arguments, set the\n        value of given column in given item to the specified value.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(ID "item")
(PUNCT ",")
(ID "column")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "column")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_splitdict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "res")
(PUNCT ",")
(ID "cut_minus")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "conv")
(PUNCT "=")
(ID "_tclobj_to_py")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tag_bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagname")
(PUNCT ",")
(ID "sequence")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind a callback for the given event sequence to the tag tagname.\n        When an event is delivered to an item, the callbacks for each\n        of the item's tags option are called.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "bind")
(PUNCT ",")
(ID "tagname")
(PUNCT ")")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "add")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagname")
(PUNCT ",")
(ID "option")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the options for the specified tagname.\n\n        If kw is not given, returns a dict of the option settings for tagname.\n        If option is specified, returns the value for that option for the\n        specified tagname. Otherwise, sets the options to the corresponding\n        values for the given tagname.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_val_or_dict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "kw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "tagname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_has")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagname")
(PUNCT ",")
(ID "item")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If item is specified, returns 1 or 0 depending on whether the\n        specified item has the given tagname. Otherwise, returns a list of\n        all items which have the specified tag.\n\n        * Availability: Tk 8.6")
(NEWLINE)
(KEYWORD if)
(ID "item")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "has")
(PUNCT ",")
(ID "tagname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "has")
(PUNCT ",")
(ID "tagname")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LabeledScale")
(PUNCT "(")
(ID "Frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A Ttk Scale widget with a Ttk Label widget indicating its\n    current value.\n\n    The Ttk Scale can be accessed through instance.scale, and Ttk Label\n    can be accessed through instance.label")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "variable")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "from_")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "to")
(PUNCT "=")
(LIT 10)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct an horizontal LabeledScale with parent master, a\n        variable to be associated with the Ttk Scale widget and its range.\n        If variable is not specified, a tkinter.IntVar is created.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            compound: 'top' or 'bottom'\n                Specifies how to display the label relative to the scale.\n                Defaults to 'top'.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_label_top")
(PUNCT "=")
(ID "kw")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "compound")
(PUNCT ",")
(LIT "top")
(PUNCT ")")
(PUNCT "==")
(LIT "top")
(NEWLINE)
(ID "Frame")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT "=")
(ID "variable")
(KEYWORD or)
(ID "tkinter")
(PUNCT ".")
(ID "IntVar")
(PUNCT "(")
(ID "master")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(ID "from_")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_last_valid")
(PUNCT "=")
(ID "from_")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "label")
(PUNCT "=")
(ID "Label")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT "=")
(ID "Scale")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "variable")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ",")
(ID "from_")
(PUNCT "=")
(ID "from_")
(PUNCT ",")
(ID "to")
(PUNCT "=")
(ID "to")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<<RangeChanged>>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_adjust")
(PUNCT ")")
(NEWLINE)
(ID "scale_side")
(PUNCT "=")
(LIT "bottom")
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_label_top")
(KEYWORD else)
(LIT "top")
(NEWLINE)
(ID "label_side")
(PUNCT "=")
(LIT "top")
(KEYWORD if)
(ID "scale_side")
(PUNCT "==")
(LIT "bottom")
(KEYWORD else)
(LIT "bottom")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "side")
(PUNCT "=")
(ID "scale_side")
(PUNCT ",")
(ID "fill")
(PUNCT "=")
(LIT "x")
(PUNCT ")")
(NEWLINE)
(ID "tmp")
(PUNCT "=")
(ID "Label")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "side")
(PUNCT "=")
(ID "label_side")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "label")
(PUNCT ".")
(ID "place")
(PUNCT "(")
(ID "anchor")
(PUNCT "=")
(LIT "n")
(KEYWORD if)
(ID "label_side")
(PUNCT "==")
(LIT "top")
(KEYWORD else)
(LIT "s")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__tracecb")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "trace_variable")
(PUNCT "(")
(LIT "w")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_adjust")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Configure>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_adjust")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Map>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_adjust")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Destroy this widget and possibly its associated variable.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "trace_vdelete")
(PUNCT "(")
(LIT "w")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__tracecb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_variable")
(NEWLINE)
(ID "Frame")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_adjust")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the label position according to the scale.")
(NEWLINE)
(KEYWORD def)
(ID "adjust_label")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "update_idletasks")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT ".")
(ID "coords")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_label_top")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT ".")
(ID "winfo_y")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "self")
(PUNCT ".")
(ID "label")
(PUNCT ".")
(ID "winfo_reqheight")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT ".")
(ID "winfo_reqheight")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "label")
(PUNCT ".")
(ID "winfo_reqheight")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "label")
(PUNCT ".")
(ID "place_configure")
(PUNCT "(")
(ID "x")
(PUNCT "=")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "from_")
(PUNCT "=")
(ID "_to_number")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT "[")
(LIT "from")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "to")
(PUNCT "=")
(ID "_to_number")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "scale")
(PUNCT "[")
(LIT "to")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "to")
(PUNCT "<")
(ID "from_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "from_")
(PUNCT ",")
(ID "to")
(PUNCT "=")
(ID "to")
(PUNCT ",")
(ID "from_")
(NEWLINE)
(DEDENT)
(ID "newval")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "from_")
(PUNCT "<=")
(ID "newval")
(PUNCT "<=")
(ID "to")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_last_valid")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_last_valid")
(PUNCT "=")
(ID "newval")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "label")
(PUNCT "[")
(LIT "text")
(PUNCT "]")
(PUNCT "=")
(ID "newval")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "after_idle")
(PUNCT "(")
(ID "adjust_label")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_value")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return current scale value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set new scale value.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "value")
(PUNCT "=")
(ID "property")
(PUNCT "(")
(ID "_get_value")
(PUNCT ",")
(ID "_set_value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "OptionMenu")
(PUNCT "(")
(ID "Menubutton")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Themed OptionMenu, based after tkinter's OptionMenu, which allows\n    the user to select a value from a menu.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "variable")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "values")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a themed OptionMenu widget with master as the parent,\n        the resource textvariable set to variable, the initially selected\n        value specified by the default parameter, the menu values given by\n        *values and additional keywords.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            style: stylename\n                Menubutton style.\n            direction: 'above', 'below', 'left', 'right', or 'flush'\n                Menubutton direction.\n            command: callback\n                A callback that will be invoked after selecting an item.\n        ")
(NEWLINE)
(ID "kw")
(PUNCT "=")
(PUNCT "{")
(LIT "textvariable")
(PUNCT ":")
(ID "variable")
(PUNCT ",")
(LIT "style")
(PUNCT ":")
(ID "kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "style")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(LIT "direction")
(PUNCT ":")
(ID "kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "direction")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "Menubutton")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT "[")
(LIT "menu")
(PUNCT "]")
(PUNCT "=")
(ID "tkinter")
(PUNCT ".")
(ID "Menu")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tearoff")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT "=")
(ID "variable")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "=")
(ID "kwargs")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(LIT "command")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "tkinter")
(PUNCT ".")
(ID "TclError")
(PUNCT "(")
(LIT "unknown option -%s")
(PUNCT "%")
(PUNCT "(")
(ID "next")
(PUNCT "(")
(ID "iter")
(PUNCT "(")
(ID "kwargs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "set_menu")
(PUNCT "(")
(ID "default")
(PUNCT ",")
(PUNCT "*")
(ID "values")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "item")
(PUNCT "==")
(LIT "menu")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "nametowidget")
(PUNCT "(")
(ID "Menubutton")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Menubutton")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_menu")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Build a new menu of radiobuttons with *values and optionally\n        a default value.")
(NEWLINE)
(ID "menu")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(LIT "menu")
(PUNCT "]")
(NEWLINE)
(ID "menu")
(PUNCT ".")
(ID "delete")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT "end")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "val")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "menu")
(PUNCT ".")
(ID "add_radiobutton")
(PUNCT "(")
(ID "label")
(PUNCT "=")
(ID "val")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(ID "tkinter")
(PUNCT ".")
(ID "_setit")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ",")
(ID "val")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_variable")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Destroy this widget and its associated variable.")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_variable")
(NEWLINE)
(ID "Menubutton")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
