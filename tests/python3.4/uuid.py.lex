(LIT "UUID objects (universally unique identifiers) according to RFC 4122.\n\nThis module provides immutable UUID objects (class UUID) and the functions\nuuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5\nUUIDs as specified in RFC 4122.\n\nIf all you want is a unique ID, you should probably call uuid1() or uuid4().\nNote that uuid1() may compromise privacy since it creates a UUID containing\nthe computer's network address.  uuid4() creates a random UUID.\n\nTypical usage:\n\n    >>> import uuid\n\n    # make a UUID based on the host ID and current time\n    >>> uuid.uuid1()    # doctest: +SKIP\n    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n\n    # make a UUID using an MD5 hash of a namespace UUID and a name\n    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n\n    # make a random UUID\n    >>> uuid.uuid4()    # doctest: +SKIP\n    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n\n    # make a UUID using a SHA-1 hash of a namespace UUID and a name\n    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n\n    # make a UUID from a string of hex digits (braces and hyphens ignored)\n    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')\n\n    # convert a UUID to a string of hex digits in standard form\n    >>> str(x)\n    '00010203-0405-0607-0809-0a0b0c0d0e0f'\n\n    # get the raw 16 bytes of the UUID\n    >>> x.bytes\n    b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n\n    # make a UUID from a 16-byte string\n    >>> uuid.UUID(bytes=x.bytes)\n    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')\n")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Ka-Ping Yee <ping@zesty.ca>")
(NEWLINE)
(ID "RESERVED_NCS")
(PUNCT ",")
(ID "RFC_4122")
(PUNCT ",")
(ID "RESERVED_MICROSOFT")
(PUNCT ",")
(ID "RESERVED_FUTURE")
(PUNCT "=")
(PUNCT "[")
(LIT "reserved for NCS compatibility")
(PUNCT ",")
(LIT "specified in RFC 4122")
(PUNCT ",")
(LIT "reserved for Microsoft compatibility")
(PUNCT ",")
(LIT "reserved for future definition")
(PUNCT "]")
(NEWLINE)
(ID "int_")
(PUNCT "=")
(ID "int")
(NEWLINE)
(ID "bytes_")
(PUNCT "=")
(ID "bytes")
(NEWLINE)
(KEYWORD class)
(ID "UUID")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instances of the UUID class represent UUIDs as specified in RFC 4122.\n    UUID objects are immutable, hashable, and usable as dictionary keys.\n    Converting a UUID to a string with str() yields something in the form\n    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\n    five possible forms: a similar string of hexadecimal digits, or a tuple\n    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n    48-bit values respectively) as an argument named 'fields', or a string\n    of 16 bytes (with all the integer fields in big-endian order) as an\n    argument named 'bytes', or a string of 16 bytes (with the first three\n    fields in little-endian order) as an argument named 'bytes_le', or a\n    single 128-bit integer as an argument named 'int'.\n\n    UUIDs have these read-only attributes:\n\n        bytes       the UUID as a 16-byte string (containing the six\n                    integer fields in big-endian byte order)\n\n        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,\n                    and time_hi_version in little-endian byte order)\n\n        fields      a tuple of the six integer fields of the UUID,\n                    which are also available as six individual attributes\n                    and two derived attributes:\n\n            time_low                the first 32 bits of the UUID\n            time_mid                the next 16 bits of the UUID\n            time_hi_version         the next 16 bits of the UUID\n            clock_seq_hi_variant    the next 8 bits of the UUID\n            clock_seq_low           the next 8 bits of the UUID\n            node                    the last 48 bits of the UUID\n\n            time                    the 60-bit timestamp\n            clock_seq               the 14-bit sequence number\n\n        hex         the UUID as a 32-character hexadecimal string\n\n        int         the UUID as a 128-bit integer\n\n        urn         the UUID as a URN as specified in RFC 4122\n\n        variant     the UUID variant (one of the constants RESERVED_NCS,\n                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)\n\n        version     the UUID version number (1 through 5, meaningful only\n                    when the variant is RFC_4122)\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "hex")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bytes")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "bytes_le")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "fields")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "int")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "version")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a UUID from either a string of 32 hexadecimal digits,\n        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes\n        in little-endian order as the 'bytes_le' argument, a tuple of six\n        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,\n        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as\n        the 'fields' argument, or a single 128-bit integer as the 'int'\n        argument.  When a string of hex digits is given, curly braces,\n        hyphens, and a URN prefix are all optional.  For example, these\n        expressions all yield the same UUID:\n\n        UUID('{12345678-1234-5678-1234-567812345678}')\n        UUID('12345678123456781234567812345678')\n        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')\n        UUID(bytes='\\x12\\x34\\x56\\x78'*4)\n        UUID(bytes_le='\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +\n                      '\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')\n        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))\n        UUID(int=0x12345678123456781234567812345678)\n\n        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must\n        be given.  The 'version' argument is optional; if given, the resulting\n        UUID will have its variant and version set according to RFC 4122,\n        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.\n        ")
(NEWLINE)
(KEYWORD if)
(PUNCT "[")
(ID "hex")
(PUNCT ",")
(ID "bytes")
(PUNCT ",")
(ID "bytes_le")
(PUNCT ",")
(ID "fields")
(PUNCT ",")
(ID "int")
(PUNCT "]")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT "!=")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "need one of hex, bytes, bytes_le, fields, or int")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hex")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hex")
(PUNCT "=")
(ID "hex")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "urn:")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "uuid:")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "hex")
(PUNCT "=")
(ID "hex")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(LIT "{}")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "hex")
(PUNCT ")")
(PUNCT "!=")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "badly formed hexadecimal UUID string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "int")
(PUNCT "=")
(ID "int_")
(PUNCT "(")
(ID "hex")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bytes_le")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "bytes_le")
(PUNCT ")")
(PUNCT "!=")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "bytes_le is not a 16-char string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bytes")
(PUNCT "=")
(PUNCT "(")
(ID "bytes_")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "bytes_le")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "bytes_")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "bytes_le")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "bytes_")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "bytes_le")
(PUNCT "[")
(LIT 6)
(PUNCT ":")
(LIT 8)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "bytes_le")
(PUNCT "[")
(LIT 8)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "bytes")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "bytes")
(PUNCT ")")
(PUNCT "!=")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "bytes is not a 16-char string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytes_")
(PUNCT ")")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "bytes")
(PUNCT ")")
(NEWLINE)
(ID "int")
(PUNCT "=")
(ID "int_")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "byteorder")
(PUNCT "=")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fields")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "fields")
(PUNCT ")")
(PUNCT "!=")
(LIT 6)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "fields is not a 6-tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "time_low")
(PUNCT ",")
(ID "time_mid")
(PUNCT ",")
(ID "time_hi_version")
(PUNCT ",")
(ID "clock_seq_hi_variant")
(PUNCT ",")
(ID "clock_seq_low")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT "=")
(ID "fields")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "time_low")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "field 1 out of range (need a 32-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "time_mid")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "field 2 out of range (need a 16-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "time_hi_version")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "field 3 out of range (need a 16-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "clock_seq_hi_variant")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "field 4 out of range (need an 8-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "clock_seq_low")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "field 5 out of range (need an 8-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "node")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 48)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "field 6 out of range (need a 48-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "clock_seq")
(PUNCT "=")
(PUNCT "(")
(ID "clock_seq_hi_variant")
(PUNCT "<<")
(LIT 8)
(PUNCT ")")
(PUNCT "|")
(ID "clock_seq_low")
(NEWLINE)
(ID "int")
(PUNCT "=")
(PUNCT "(")
(PUNCT "(")
(ID "time_low")
(PUNCT "<<")
(LIT 96)
(PUNCT ")")
(PUNCT "|")
(PUNCT "(")
(ID "time_mid")
(PUNCT "<<")
(LIT 80)
(PUNCT ")")
(PUNCT "|")
(PUNCT "(")
(ID "time_hi_version")
(PUNCT "<<")
(LIT 64)
(PUNCT ")")
(PUNCT "|")
(PUNCT "(")
(ID "clock_seq")
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(PUNCT "|")
(ID "node")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "int")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 0)
(PUNCT "<=")
(ID "int")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 128)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "int is out of range (need a 128-bit value)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "version")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(LIT 1)
(PUNCT "<=")
(ID "version")
(PUNCT "<=")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "illegal version number")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "int")
(PUNCT "&=")
(PUNCT "~")
(PUNCT "(")
(LIT 49152)
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(NEWLINE)
(ID "int")
(PUNCT "|=")
(LIT 32768)
(PUNCT "<<")
(LIT 48)
(NEWLINE)
(ID "int")
(PUNCT "&=")
(PUNCT "~")
(PUNCT "(")
(LIT 61440)
(PUNCT "<<")
(LIT 64)
(PUNCT ")")
(NEWLINE)
(ID "int")
(PUNCT "|=")
(ID "version")
(PUNCT "<<")
(LIT 76)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__dict__")
(PUNCT "[")
(LIT "int")
(PUNCT "]")
(PUNCT "=")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UUID")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UUID")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "!=")
(ID "other")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UUID")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "<")
(ID "other")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__gt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UUID")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">")
(ID "other")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__le__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UUID")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "<=")
(ID "other")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ge__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "UUID")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">=")
(ID "other")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__int__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "UUID(%r)")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "UUID objects are immutable")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hex")
(PUNCT "=")
(LIT "%032x")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "int")
(NEWLINE)
(KEYWORD return)
(LIT "%s-%s-%s-%s-%s")
(PUNCT "%")
(PUNCT "(")
(ID "hex")
(PUNCT "[")
(PUNCT ":")
(LIT 8)
(PUNCT "]")
(PUNCT ",")
(ID "hex")
(PUNCT "[")
(LIT 8)
(PUNCT ":")
(LIT 12)
(PUNCT "]")
(PUNCT ",")
(ID "hex")
(PUNCT "[")
(LIT 12)
(PUNCT ":")
(LIT 16)
(PUNCT "]")
(PUNCT ",")
(ID "hex")
(PUNCT "[")
(LIT 16)
(PUNCT ":")
(LIT 20)
(PUNCT "]")
(PUNCT ",")
(ID "hex")
(PUNCT "[")
(LIT 20)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "bytes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes")
(PUNCT "=")
(ID "bytearray")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "shift")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 128)
(PUNCT ",")
(LIT 8)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(ID "shift")
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "bytes_")
(PUNCT "(")
(ID "bytes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "bytes_le")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bytes")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "bytes")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "bytes_")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "bytes_")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "bytes_")
(PUNCT "(")
(ID "reversed")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 6)
(PUNCT ":")
(LIT 8)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "bytes")
(PUNCT "[")
(LIT 8)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "fields")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "time_low")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "time_mid")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "time_hi_version")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "clock_seq_hi_variant")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "clock_seq_low")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "node")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "time_low")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(LIT 96)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "time_mid")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(LIT 80)
(PUNCT ")")
(PUNCT "&")
(LIT 65535)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "time_hi_version")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(LIT 64)
(PUNCT ")")
(PUNCT "&")
(LIT 65535)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "clock_seq_hi_variant")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(LIT 56)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "clock_seq_low")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(LIT 48)
(PUNCT ")")
(PUNCT "&")
(LIT 255)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "time")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "time_hi_version")
(PUNCT "&")
(LIT 4095)
(PUNCT ")")
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(PUNCT "|")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "time_mid")
(PUNCT "<<")
(LIT 32)
(PUNCT ")")
(PUNCT "|")
(ID "self")
(PUNCT ".")
(ID "time_low")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "clock_seq")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "clock_seq_hi_variant")
(PUNCT "&")
(LIT 63)
(PUNCT ")")
(PUNCT "<<")
(LIT 8)
(PUNCT ")")
(PUNCT "|")
(ID "self")
(PUNCT ".")
(ID "clock_seq_low")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "node")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "&")
(LIT 281474976710655)
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "hex")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%032x")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "int")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "urn")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "urn:uuid:")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "variant")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "&")
(PUNCT "(")
(LIT 32768)
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "RESERVED_NCS")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "&")
(PUNCT "(")
(LIT 16384)
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "RFC_4122")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT "&")
(PUNCT "(")
(LIT 8192)
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "RESERVED_MICROSOFT")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "RESERVED_FUTURE")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "version")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "variant")
(PUNCT "==")
(ID "RFC_4122")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "int")
(PUNCT ">>")
(LIT 76)
(PUNCT ")")
(PUNCT "&")
(LIT 15)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_popen")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "os")
(PUNCT ",")
(ID "shutil")
(NEWLINE)
(ID "executable")
(PUNCT "=")
(ID "shutil")
(PUNCT ".")
(ID "which")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "executable")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "(")
(LIT "/sbin")
(PUNCT ",")
(LIT "/usr/sbin")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "executable")
(PUNCT "=")
(ID "shutil")
(PUNCT ".")
(ID "which")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "executable")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "cmd")
(PUNCT "=")
(LIT "LC_ALL=C %s %s 2>/dev/null")
(PUNCT "%")
(PUNCT "(")
(ID "executable")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "popen")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_mac")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "hw_identifiers")
(PUNCT ",")
(ID "get_index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pipe")
(PUNCT "=")
(ID "_popen")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "words")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "words")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(KEYWORD in)
(ID "hw_identifiers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "word")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(ID "get_index")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "mac")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "word")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mac")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mac")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ifconfig_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Unix by running ifconfig.")
(NEWLINE)
(KEYWORD for)
(ID "args")
(KEYWORD in)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(LIT "-a")
(PUNCT ",")
(LIT "-av")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mac")
(PUNCT "=")
(ID "_find_mac")
(PUNCT "(")
(LIT "ifconfig")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(PUNCT "[")
(LIT "hwaddr")
(PUNCT ",")
(LIT "ether")
(PUNCT "]")
(PUNCT ",")
(KEYWORD lambda)
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mac")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mac")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_arp_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Unix by running arp.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(PUNCT ",")
(ID "socket")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ip_addr")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "gethostbyname")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "gethostname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_find_mac")
(PUNCT "(")
(LIT "arp")
(PUNCT ",")
(LIT "-an")
(PUNCT ",")
(PUNCT "[")
(ID "ip_addr")
(PUNCT "]")
(PUNCT ",")
(KEYWORD lambda)
(ID "i")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_lanscan_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Unix by running lanscan.")
(NEWLINE)
(KEYWORD return)
(ID "_find_mac")
(PUNCT "(")
(LIT "lanscan")
(PUNCT ",")
(LIT "-ai")
(PUNCT ",")
(PUNCT "[")
(LIT "lan0")
(PUNCT "]")
(PUNCT ",")
(KEYWORD lambda)
(ID "i")
(PUNCT ":")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_netstat_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Unix by running netstat.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pipe")
(PUNCT "=")
(ID "_popen")
(PUNCT "(")
(LIT "netstat")
(PUNCT ",")
(LIT "-ia")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "words")
(PUNCT "=")
(ID "pipe")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "words")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "Address")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "words")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "word")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "word")
(PUNCT ")")
(PUNCT "==")
(LIT 17)
(KEYWORD and)
(ID "word")
(PUNCT ".")
(ID "count")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(PUNCT "==")
(LIT 5)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mac")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "word")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ":")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "mac")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mac")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ipconfig_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Windows by running ipconfig.exe.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(PUNCT ",")
(ID "re")
(NEWLINE)
(ID "dirs")
(PUNCT "=")
(PUNCT "[")
(LIT "")
(PUNCT ",")
(LIT "c:\\windows\\system32")
(PUNCT ",")
(LIT "c:\\winnt\\system32")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ctypes")
(NEWLINE)
(ID "buffer")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "create_string_buffer")
(PUNCT "(")
(LIT 300)
(PUNCT ")")
(NEWLINE)
(ID "ctypes")
(PUNCT ".")
(ID "windll")
(PUNCT ".")
(ID "kernel32")
(PUNCT ".")
(ID "GetSystemDirectoryA")
(PUNCT "(")
(ID "buffer")
(PUNCT ",")
(LIT 300)
(PUNCT ")")
(NEWLINE)
(ID "dirs")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "buffer")
(PUNCT ".")
(ID "value")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "mbcs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "dir")
(KEYWORD in)
(ID "dirs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pipe")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "popen")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "dir")
(PUNCT ",")
(LIT "ipconfig")
(PUNCT ")")
(PUNCT "+")
(LIT " /all")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "pipe")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(LIT "([0-9a-f][0-9a-f]-){5}[0-9a-f][0-9a-f]")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_netbios_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Windows using NetBIOS calls.\n    See http://support.microsoft.com/kb/118623 for details.")
(NEWLINE)
(KEYWORD import)
(ID "win32wnet")
(PUNCT ",")
(ID "netbios")
(NEWLINE)
(ID "ncb")
(PUNCT "=")
(ID "netbios")
(PUNCT ".")
(ID "NCB")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Command")
(PUNCT "=")
(ID "netbios")
(PUNCT ".")
(ID "NCBENUM")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Buffer")
(PUNCT "=")
(ID "adapters")
(PUNCT "=")
(ID "netbios")
(PUNCT ".")
(ID "LANA_ENUM")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "adapters")
(PUNCT ".")
(ID "_pack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "win32wnet")
(PUNCT ".")
(ID "Netbios")
(PUNCT "(")
(ID "ncb")
(PUNCT ")")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "adapters")
(PUNCT ".")
(ID "_unpack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "adapters")
(PUNCT ".")
(ID "length")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ncb")
(PUNCT ".")
(ID "Reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Command")
(PUNCT "=")
(ID "netbios")
(PUNCT ".")
(ID "NCBRESET")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Lana_num")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "adapters")
(PUNCT ".")
(ID "lana")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "win32wnet")
(PUNCT ".")
(ID "Netbios")
(PUNCT "(")
(ID "ncb")
(PUNCT ")")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "ncb")
(PUNCT ".")
(ID "Reset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Command")
(PUNCT "=")
(ID "netbios")
(PUNCT ".")
(ID "NCBASTAT")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Lana_num")
(PUNCT "=")
(ID "ord")
(PUNCT "(")
(ID "adapters")
(PUNCT ".")
(ID "lana")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Callname")
(PUNCT "=")
(LIT "*")
(PUNCT ".")
(ID "ljust")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "ncb")
(PUNCT ".")
(ID "Buffer")
(PUNCT "=")
(ID "status")
(PUNCT "=")
(ID "netbios")
(PUNCT ".")
(ID "ADAPTER_STATUS")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "win32wnet")
(PUNCT ".")
(ID "Netbios")
(PUNCT "(")
(ID "ncb")
(PUNCT ")")
(PUNCT "!=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "status")
(PUNCT ".")
(ID "_unpack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "bytes")
(PUNCT "=")
(ID "status")
(PUNCT ".")
(ID "adapter_address")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "<<")
(LIT 40)
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "<<")
(LIT 32)
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "<<")
(LIT 24)
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT "<<")
(LIT 16)
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "bytes")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT "<<")
(LIT 8)
(PUNCT ")")
(PUNCT "+")
(ID "bytes")
(PUNCT "[")
(LIT 5)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_uuid_generate_random")
(PUNCT "=")
(ID "_uuid_generate_time")
(PUNCT "=")
(ID "_UuidCreate")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ctypes")
(PUNCT ",")
(ID "ctypes")
(PUNCT ".")
(ID "util")
(NEWLINE)
(KEYWORD for)
(ID "libname")
(KEYWORD in)
(PUNCT "[")
(LIT "uuid")
(PUNCT ",")
(LIT "c")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "CDLL")
(PUNCT "(")
(ID "ctypes")
(PUNCT ".")
(ID "util")
(PUNCT ".")
(ID "find_library")
(PUNCT "(")
(ID "libname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "lib")
(PUNCT ",")
(LIT "uuid_generate_random")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_uuid_generate_random")
(PUNCT "=")
(ID "lib")
(PUNCT ".")
(ID "uuid_generate_random")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "lib")
(PUNCT ",")
(LIT "uuid_generate_time")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_uuid_generate_time")
(PUNCT "=")
(ID "lib")
(PUNCT ".")
(ID "uuid_generate_time")
(NEWLINE)
(KEYWORD if)
(ID "_uuid_generate_random")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "darwin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD if)
(ID "int")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "uname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "release")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ">=")
(LIT 9)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_uuid_generate_random")
(PUNCT "=")
(ID "_uuid_generate_time")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "windll")
(PUNCT ".")
(ID "rpcrt4")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "_UuidCreate")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "lib")
(PUNCT ",")
(LIT "UuidCreateSequential")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "lib")
(PUNCT ",")
(LIT "UuidCreate")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_unixdll_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Unix using ctypes.")
(NEWLINE)
(ID "_buffer")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "create_string_buffer")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "_uuid_generate_time")
(PUNCT "(")
(ID "_buffer")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "bytes_")
(PUNCT "(")
(ID "_buffer")
(PUNCT ".")
(ID "raw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "node")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_windll_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address on Windows using ctypes.")
(NEWLINE)
(ID "_buffer")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "create_string_buffer")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_UuidCreate")
(PUNCT "(")
(ID "_buffer")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "bytes_")
(PUNCT "(")
(ID "_buffer")
(PUNCT ".")
(ID "raw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "node")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_random_getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a random node ID, with eighth bit set as suggested by RFC 4122.")
(NEWLINE)
(KEYWORD import)
(ID "random")
(NEWLINE)
(KEYWORD return)
(ID "random")
(PUNCT ".")
(ID "randrange")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 1)
(PUNCT "<<")
(LIT 48)
(PUNCT ")")
(PUNCT "|")
(LIT 1099511627776)
(NEWLINE)
(DEDENT)
(ID "_node")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "getnode")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the hardware address as a 48-bit positive integer.\n\n    The first time this runs, it may launch a separate program, which could\n    be quite slow.  If all attempts to obtain the hardware address fail, we\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\n    in RFC 4122.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_node")
(NEWLINE)
(KEYWORD if)
(ID "_node")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_node")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getters")
(PUNCT "=")
(PUNCT "[")
(ID "_windll_getnode")
(PUNCT ",")
(ID "_netbios_getnode")
(PUNCT ",")
(ID "_ipconfig_getnode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getters")
(PUNCT "=")
(PUNCT "[")
(ID "_unixdll_getnode")
(PUNCT ",")
(ID "_ifconfig_getnode")
(PUNCT ",")
(ID "_arp_getnode")
(PUNCT ",")
(ID "_lanscan_getnode")
(PUNCT ",")
(ID "_netstat_getnode")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "getter")
(KEYWORD in)
(ID "getters")
(PUNCT "+")
(PUNCT "[")
(ID "_random_getnode")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_node")
(PUNCT "=")
(ID "getter")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_node")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_node")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "_last_timestamp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "uuid1")
(PUNCT "(")
(ID "node")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "clock_seq")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate a UUID from a host ID, sequence number, and the current time.\n    If 'node' is not given, getnode() is used to obtain the hardware\n    address.  If 'clock_seq' is given, it is used as the sequence number;\n    otherwise a random 14-bit sequence number is chosen.")
(NEWLINE)
(KEYWORD if)
(ID "_uuid_generate_time")
(KEYWORD and)
(ID "node")
(KEYWORD is)
(ID "clock_seq")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_buffer")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "create_string_buffer")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "_uuid_generate_time")
(PUNCT "(")
(ID "_buffer")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "bytes_")
(PUNCT "(")
(ID "_buffer")
(PUNCT ".")
(ID "raw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD global)
(ID "_last_timestamp")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(ID "nanoseconds")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "*")
(LIT 1000000000.0)
(PUNCT ")")
(NEWLINE)
(ID "timestamp")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "nanoseconds")
(PUNCT "/")
(LIT 100)
(PUNCT ")")
(PUNCT "+")
(LIT 122192928000000000)
(NEWLINE)
(KEYWORD if)
(ID "_last_timestamp")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "timestamp")
(PUNCT "<=")
(ID "_last_timestamp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timestamp")
(PUNCT "=")
(ID "_last_timestamp")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "_last_timestamp")
(PUNCT "=")
(ID "timestamp")
(NEWLINE)
(KEYWORD if)
(ID "clock_seq")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "random")
(NEWLINE)
(ID "clock_seq")
(PUNCT "=")
(ID "random")
(PUNCT ".")
(ID "randrange")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(LIT 14)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "time_low")
(PUNCT "=")
(ID "timestamp")
(PUNCT "&")
(LIT 4294967295)
(NEWLINE)
(ID "time_mid")
(PUNCT "=")
(PUNCT "(")
(ID "timestamp")
(PUNCT ">>")
(LIT 32)
(PUNCT ")")
(PUNCT "&")
(LIT 65535)
(NEWLINE)
(ID "time_hi_version")
(PUNCT "=")
(PUNCT "(")
(ID "timestamp")
(PUNCT ">>")
(LIT 48)
(PUNCT ")")
(PUNCT "&")
(LIT 4095)
(NEWLINE)
(ID "clock_seq_low")
(PUNCT "=")
(ID "clock_seq")
(PUNCT "&")
(LIT 255)
(NEWLINE)
(ID "clock_seq_hi_variant")
(PUNCT "=")
(PUNCT "(")
(ID "clock_seq")
(PUNCT ">>")
(LIT 8)
(PUNCT ")")
(PUNCT "&")
(LIT 63)
(NEWLINE)
(KEYWORD if)
(ID "node")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "node")
(PUNCT "=")
(ID "getnode")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "fields")
(PUNCT "=")
(PUNCT "(")
(ID "time_low")
(PUNCT ",")
(ID "time_mid")
(PUNCT ",")
(ID "time_hi_version")
(PUNCT ",")
(ID "clock_seq_hi_variant")
(PUNCT ",")
(ID "clock_seq_low")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "uuid3")
(PUNCT "(")
(ID "namespace")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate a UUID from the MD5 hash of a namespace UUID and a name.")
(NEWLINE)
(KEYWORD from)
(ID "hashlib")
(KEYWORD import)
(ID "md5")
(NEWLINE)
(ID "hash")
(PUNCT "=")
(ID "md5")
(PUNCT "(")
(ID "namespace")
(PUNCT ".")
(ID "bytes")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "hash")
(PUNCT "[")
(PUNCT ":")
(LIT 16)
(PUNCT "]")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "uuid4")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate a random UUID.")
(NEWLINE)
(KEYWORD if)
(ID "_uuid_generate_random")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_buffer")
(PUNCT "=")
(ID "ctypes")
(PUNCT ".")
(ID "create_string_buffer")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(ID "_uuid_generate_random")
(PUNCT "(")
(ID "_buffer")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "bytes_")
(PUNCT "(")
(ID "_buffer")
(PUNCT ".")
(ID "raw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "urandom")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "random")
(NEWLINE)
(ID "bytes")
(PUNCT "=")
(ID "bytes_")
(PUNCT "(")
(ID "random")
(PUNCT ".")
(ID "randrange")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 16)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "bytes")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "uuid5")
(PUNCT "(")
(ID "namespace")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate a UUID from the SHA-1 hash of a namespace UUID and a name.")
(NEWLINE)
(KEYWORD from)
(ID "hashlib")
(KEYWORD import)
(ID "sha1")
(NEWLINE)
(ID "hash")
(PUNCT "=")
(ID "sha1")
(PUNCT "(")
(ID "namespace")
(PUNCT ".")
(ID "bytes")
(PUNCT "+")
(ID "bytes")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "UUID")
(PUNCT "(")
(ID "bytes")
(PUNCT "=")
(ID "hash")
(PUNCT "[")
(PUNCT ":")
(LIT 16)
(PUNCT "]")
(PUNCT ",")
(ID "version")
(PUNCT "=")
(LIT 5)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "NAMESPACE_DNS")
(PUNCT "=")
(ID "UUID")
(PUNCT "(")
(LIT "6ba7b810-9dad-11d1-80b4-00c04fd430c8")
(PUNCT ")")
(NEWLINE)
(ID "NAMESPACE_URL")
(PUNCT "=")
(ID "UUID")
(PUNCT "(")
(LIT "6ba7b811-9dad-11d1-80b4-00c04fd430c8")
(PUNCT ")")
(NEWLINE)
(ID "NAMESPACE_OID")
(PUNCT "=")
(ID "UUID")
(PUNCT "(")
(LIT "6ba7b812-9dad-11d1-80b4-00c04fd430c8")
(PUNCT ")")
(NEWLINE)
(ID "NAMESPACE_X500")
(PUNCT "=")
(ID "UUID")
(PUNCT "(")
(LIT "6ba7b814-9dad-11d1-80b4-00c04fd430c8")
(PUNCT ")")
(NEWLINE)
(ENDMARKER)
