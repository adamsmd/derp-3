(LIT "Selector event loop for Unix with signal handling.")
(NEWLINE)
(KEYWORD import)
(ID "errno")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "signal")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "stat")
(NEWLINE)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "base_events")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "base_subprocess")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "constants")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "coroutines")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "events")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "futures")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "selector_events")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "selectors")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "transports")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "coroutines")
(KEYWORD import)
(ID "coroutine")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "log")
(KEYWORD import)
(ID "logger")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "SelectorEventLoop")
(PUNCT ",")
(LIT "AbstractChildWatcher")
(PUNCT ",")
(LIT "SafeChildWatcher")
(PUNCT ",")
(LIT "FastChildWatcher")
(PUNCT ",")
(LIT "DefaultEventLoopPolicy")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "Signals are not really supported on Windows")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_sighandler_noop")
(PUNCT "(")
(ID "signum")
(PUNCT ",")
(ID "frame")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dummy signal handler.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_UnixSelectorEventLoop")
(PUNCT "(")
(ID "selector_events")
(PUNCT ".")
(ID "BaseSelectorEventLoop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unix event loop.\n\n    Adds signal handling and UNIX Domain Socket support to SelectorEventLoop.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "selector")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "selector")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_socketpair")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "socket")
(PUNCT ".")
(ID "socketpair")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "sig")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_signal_handler")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_process_self_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "signum")
(KEYWORD in)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "signum")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_handle_signal")
(PUNCT "(")
(ID "signum")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "add_signal_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a handler for a signal.  UNIX only.\n\n        Raise ValueError if the signal number is invalid or uncatchable.\n        Raise RuntimeError if there is a problem setting up the handler.\n        ")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutine")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(KEYWORD or)
(ID "coroutines")
(PUNCT ".")
(ID "iscoroutinefunction")
(PUNCT "(")
(ID "callback")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "coroutines cannot be used ")
(LIT "with add_signal_handler()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_signal")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_closed")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signal")
(PUNCT ".")
(ID "set_wakeup_fd")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_csock")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "handle")
(PUNCT "=")
(ID "events")
(PUNCT ".")
(ID "Handle")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT "[")
(ID "sig")
(PUNCT "]")
(PUNCT "=")
(ID "handle")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signal")
(PUNCT ".")
(ID "signal")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "_sighandler_noop")
(PUNCT ")")
(NEWLINE)
(ID "signal")
(PUNCT ".")
(ID "siginterrupt")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT "[")
(ID "sig")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signal")
(PUNCT ".")
(ID "set_wakeup_fd")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(KEYWORD as)
(ID "nexc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "set_wakeup_fd(-1) failed: %s")
(PUNCT ",")
(ID "nexc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EINVAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "sig {} cannot be caught")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_handle_signal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal helper that is the actual signal handler.")
(NEWLINE)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handle")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "handle")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_signal_handler")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_add_callback_signalsafe")
(PUNCT "(")
(ID "handle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "remove_signal_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove a handler for a signal.  UNIX only.\n\n        Return True if a signal handler was removed, False if not.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_signal")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT "[")
(ID "sig")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sig")
(PUNCT "==")
(ID "signal")
(PUNCT ".")
(ID "SIGINT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "signal")
(PUNCT ".")
(ID "default_int_handler")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "signal")
(PUNCT ".")
(ID "SIG_DFL")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signal")
(PUNCT ".")
(ID "signal")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EINVAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "sig {} cannot be caught")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_signal_handlers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "signal")
(PUNCT ".")
(ID "set_wakeup_fd")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "ValueError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "set_wakeup_fd(-1) failed: %s")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_check_signal")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal helper to validate a signal.\n\n        Raise ValueError if the signal number is invalid or uncatchable.\n        Raise RuntimeError if there is a problem setting up the handler.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "sig must be an int, not {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sig")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(LIT 1)
(PUNCT "<=")
(ID "sig")
(PUNCT "<")
(ID "signal")
(PUNCT ".")
(ID "NSIG")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "sig {} out of range(1, {})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sig")
(PUNCT ",")
(ID "signal")
(PUNCT ".")
(ID "NSIG")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_make_read_pipe_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_UnixReadPipeTransport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT ",")
(ID "extra")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_write_pipe_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_UnixWritePipeTransport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT ",")
(ID "extra")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "_make_subprocess_transport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "bufsize")
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "events")
(PUNCT ".")
(ID "get_child_watcher")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "watcher")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "waiter")
(PUNCT "=")
(ID "futures")
(PUNCT ".")
(ID "Future")
(PUNCT "(")
(ID "loop")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "transp")
(PUNCT "=")
(ID "_UnixSubprocessTransport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "bufsize")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(ID "waiter")
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(ID "extra")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(ID "watcher")
(PUNCT ".")
(ID "add_child_handler")
(PUNCT "(")
(ID "transp")
(PUNCT ".")
(ID "get_pid")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_child_watcher_callback")
(PUNCT ",")
(ID "transp")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "waiter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err")
(PUNCT "=")
(ID "exc")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "err")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "err")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "transp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(KEYWORD from)
(ID "transp")
(PUNCT ".")
(ID "_wait")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "err")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "transp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_child_watcher_callback")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ",")
(ID "transp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "call_soon_threadsafe")
(PUNCT "(")
(ID "transp")
(PUNCT ".")
(ID "_process_exited")
(PUNCT ",")
(ID "returncode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "create_unix_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "server_hostname")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "server_hostname")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "server_hostname")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "you have to pass server_hostname when using ssl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "server_hostname")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "server_hostname is only meaningful with ssl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "path and sock can not be specified at the same time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "sock_connect")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "no path and sock were specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(PUNCT "=")
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "_create_connection_transport")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "ssl")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "transport")
(PUNCT ",")
(ID "protocol")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "create_unix_server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "backlog")
(PUNCT "=")
(LIT 100)
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "ssl")
(PUNCT ",")
(ID "bool")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "ssl argument must be an SSLContext or None")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "path and sock can not be specified at the same time")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ",")
(ID "socket")
(PUNCT ".")
(ID "SOCK_STREAM")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EADDRINUSE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "Address {!r} is already in use")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(ID "errno")
(PUNCT ".")
(ID "EADDRINUSE")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "path was not specified, and no sock specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sock")
(PUNCT ".")
(ID "family")
(PUNCT "!=")
(ID "socket")
(PUNCT ".")
(ID "AF_UNIX")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "A UNIX Domain Socket was expected, got {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "sock")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "server")
(PUNCT "=")
(ID "base_events")
(PUNCT ".")
(ID "Server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "[")
(ID "sock")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "listen")
(PUNCT "(")
(ID "backlog")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "setblocking")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_start_serving")
(PUNCT "(")
(ID "protocol_factory")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "ssl")
(PUNCT ",")
(ID "server")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "server")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "set_blocking")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_set_nonblocking")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "set_blocking")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "fcntl")
(NEWLINE)
(KEYWORD def)
(ID "_set_nonblocking")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "flags")
(PUNCT "=")
(ID "fcntl")
(PUNCT ".")
(ID "fcntl")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "fcntl")
(PUNCT ".")
(ID "F_GETFL")
(PUNCT ")")
(NEWLINE)
(ID "flags")
(PUNCT "=")
(ID "flags")
(PUNCT "|")
(ID "os")
(PUNCT ".")
(ID "O_NONBLOCK")
(NEWLINE)
(ID "fcntl")
(PUNCT ".")
(ID "fcntl")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "fcntl")
(PUNCT ".")
(ID "F_SETFL")
(PUNCT ",")
(ID "flags")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_UnixReadPipeTransport")
(PUNCT "(")
(ID "transports")
(PUNCT ".")
(ID "ReadTransport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_size")
(PUNCT "=")
(LIT 256)
(PUNCT "*")
(LIT 1024)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "extra")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extra")
(PUNCT "[")
(LIT "pipe")
(PUNCT "]")
(PUNCT "=")
(ID "pipe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT "=")
(ID "pipe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT "=")
(ID "pipe")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "stat")
(PUNCT ".")
(ID "S_ISFIFO")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(KEYWORD or)
(ID "stat")
(PUNCT ".")
(ID "S_ISSOCK")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(KEYWORD or)
(ID "stat")
(PUNCT ".")
(ID "S_ISCHR")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Pipe transport is for pipes/sockets only.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_set_nonblocking")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ".")
(ID "connection_made")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "add_reader")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_read_ready")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "waiter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "waiter")
(PUNCT ".")
(ID "_set_result_unless_cancelled")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "closing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "fd=%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "polling")
(PUNCT "=")
(ID "selector_events")
(PUNCT ".")
(ID "_test_selector_event")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "_selector")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_READ")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "polling")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "polling")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "idle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "<%s>")
(PUNCT "%")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_ready")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "max_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "BlockingIOError")
(PUNCT ",")
(ID "InterruptedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fatal_error")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(LIT "Fatal read error on pipe transport")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ".")
(ID "data_received")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "%r was closed by peer")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ".")
(ID "eof_received")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_call_connection_lost")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "pause_reading")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "resume_reading")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "add_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_read_ready")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT ">=")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "unclosed transport %r")
(PUNCT "%")
(ID "self")
(PUNCT ",")
(ID "ResourceWarning")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_fatal_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(LIT "Fatal error on pipe transport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(KEYWORD and)
(ID "exc")
(PUNCT ".")
(ID "errno")
(PUNCT "==")
(ID "errno")
(PUNCT ".")
(ID "EIO")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r: %s")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_exception_handler")
(PUNCT "(")
(PUNCT "{")
(LIT "message")
(PUNCT ":")
(ID "message")
(PUNCT ",")
(LIT "exception")
(PUNCT ":")
(ID "exc")
(PUNCT ",")
(LIT "transport")
(PUNCT ":")
(ID "self")
(PUNCT ",")
(LIT "protocol")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_call_connection_lost")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_call_connection_lost")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ".")
(ID "connection_lost")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_UnixWritePipeTransport")
(PUNCT "(")
(ID "transports")
(PUNCT ".")
(ID "_FlowControlMixin")
(PUNCT ",")
(ID "transports")
(PUNCT ".")
(ID "WriteTransport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ",")
(ID "pipe")
(PUNCT ",")
(ID "protocol")
(PUNCT ",")
(ID "waiter")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "extra")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_extra")
(PUNCT "[")
(LIT "pipe")
(PUNCT "]")
(PUNCT "=")
(ID "pipe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT "=")
(ID "pipe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT "=")
(ID "pipe")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "mode")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(PUNCT ".")
(ID "st_mode")
(NEWLINE)
(ID "is_socket")
(PUNCT "=")
(ID "stat")
(PUNCT ".")
(ID "S_ISSOCK")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "is_socket")
(KEYWORD or)
(ID "stat")
(PUNCT ".")
(ID "S_ISFIFO")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(KEYWORD or)
(ID "stat")
(PUNCT ".")
(ID "S_ISCHR")
(PUNCT "(")
(ID "mode")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Pipe transport is only for ")
(LIT "pipes, sockets and character devices")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_set_nonblocking")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT "=")
(ID "protocol")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_conn_lost")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ".")
(ID "connection_made")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "is_socket")
(KEYWORD or)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "aix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "add_reader")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_read_ready")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "waiter")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "waiter")
(PUNCT ".")
(ID "_set_result_unless_cancelled")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "closing")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "fd=%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "polling")
(PUNCT "=")
(ID "selector_events")
(PUNCT ".")
(ID "_test_selector_event")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "_selector")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "selectors")
(PUNCT ".")
(ID "EVENT_WRITE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "polling")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "polling")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "idle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "bufsize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_write_buffer_size")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "bufsize=%s")
(PUNCT "%")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "closed")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "<%s>")
(PUNCT "%")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_write_buffer_size")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "sum")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(KEYWORD for)
(ID "data")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_ready")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "%r was closed by peer")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "BrokenPipeError")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ",")
(ID "memoryview")
(PUNCT ")")
(PUNCT ")")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_conn_lost")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_conn_lost")
(PUNCT ">=")
(ID "constants")
(PUNCT ".")
(ID "LOG_THRESHOLD_FOR_CONNLOST_WRITES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "pipe closed by peer or ")
(LIT "os.write(pipe, data) raised exception.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_conn_lost")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "BlockingIOError")
(PUNCT ",")
(ID "InterruptedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_conn_lost")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fatal_error")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(LIT "Fatal write error on pipe transport")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "add_writer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_write_ready")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_maybe_pause_protocol")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_ready")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "data")
(PUNCT ",")
(LIT "Data should not be empty")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "BlockingIOError")
(PUNCT ",")
(ID "InterruptedError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_conn_lost")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_writer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fatal_error")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(LIT "Fatal write error on pipe transport")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "n")
(PUNCT "==")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_writer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_maybe_resume_protocol")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_call_connection_lost")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "n")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "can_write_eof")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_eof")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_call_connection_lost")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_eof")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT ">=")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "unclosed transport %r")
(PUNCT "%")
(ID "self")
(PUNCT ",")
(ID "ResourceWarning")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "abort")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_fatal_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(LIT "Fatal error on pipe transport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(PUNCT "(")
(ID "BrokenPipeError")
(PUNCT ",")
(ID "ConnectionResetError")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%r: %s")
(PUNCT ",")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_exception_handler")
(PUNCT "(")
(PUNCT "{")
(LIT "message")
(PUNCT ":")
(ID "message")
(PUNCT ",")
(LIT "exception")
(PUNCT ":")
(ID "exc")
(PUNCT ",")
(LIT "transport")
(PUNCT ":")
(ID "self")
(PUNCT ",")
(LIT "protocol")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_closing")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_writer")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fileno")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_call_connection_lost")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_call_connection_lost")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT ".")
(ID "connection_lost")
(PUNCT "(")
(ID "exc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_pipe")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_protocol")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "os")
(PUNCT ",")
(LIT "set_inheritable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_set_inheritable")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "set_inheritable")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "fcntl")
(NEWLINE)
(KEYWORD def)
(ID "_set_inheritable")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "inheritable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cloexec_flag")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "fcntl")
(PUNCT ",")
(LIT "FD_CLOEXEC")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "old")
(PUNCT "=")
(ID "fcntl")
(PUNCT ".")
(ID "fcntl")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "fcntl")
(PUNCT ".")
(ID "F_GETFD")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "inheritable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fcntl")
(PUNCT ".")
(ID "fcntl")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "fcntl")
(PUNCT ".")
(ID "F_SETFD")
(PUNCT ",")
(ID "old")
(PUNCT "|")
(ID "cloexec_flag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fcntl")
(PUNCT ".")
(ID "fcntl")
(PUNCT "(")
(ID "fd")
(PUNCT ",")
(ID "fcntl")
(PUNCT ".")
(ID "F_SETFD")
(PUNCT ",")
(ID "old")
(PUNCT "&")
(PUNCT "~")
(ID "cloexec_flag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_UnixSubprocessTransport")
(PUNCT "(")
(ID "base_subprocess")
(PUNCT ".")
(ID "BaseSubprocessTransport")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_start")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "shell")
(PUNCT ",")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT ",")
(ID "bufsize")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdin_w")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "stdin")
(PUNCT "==")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdin")
(PUNCT ",")
(ID "stdin_w")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "_socketpair")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_set_inheritable")
(PUNCT "(")
(ID "stdin_w")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_proc")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "Popen")
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "shell")
(PUNCT "=")
(ID "shell")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "stdin")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "stdout")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "stderr")
(PUNCT ",")
(ID "universal_newlines")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "bufsize")
(PUNCT "=")
(ID "bufsize")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stdin_w")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stdin")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_proc")
(PUNCT ".")
(ID "stdin")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "stdin_w")
(PUNCT ".")
(ID "detach")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "wb")
(PUNCT ",")
(ID "buffering")
(PUNCT "=")
(ID "bufsize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AbstractChildWatcher")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract base class for monitoring child processes.\n\n    Objects derived from this class monitor a collection of subprocesses and\n    report their termination or interruption by a signal.\n\n    New callbacks are registered with .add_child_handler(). Starting a new\n    process must be done within a 'with' block to allow the watcher to suspend\n    its activity until the new process if fully registered (this is needed to\n    prevent a race condition in some implementations).\n\n    Example:\n        with watcher:\n            proc = subprocess.Popen(\"sleep 1\")\n            watcher.add_child_handler(proc.pid, callback)\n\n    Notes:\n        Implementations of this class must be thread-safe.\n\n        Since child watcher objects may catch the SIGCHLD signal and call\n        waitpid(-1), there should be only one active object per process.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "add_child_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register a new child handler.\n\n        Arrange for callback(pid, returncode, *args) to be called when\n        process 'pid' terminates. Specifying another callback for the same\n        process replaces the previous handler.\n\n        Note: callback() must be thread-safe.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_child_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Removes the handler for process 'pid'.\n\n        The function returns True if the handler was successfully removed,\n        False if there was nothing to remove.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "attach_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Attach the watcher to an event loop.\n\n        If the watcher was previously attached to an event loop, then it is\n        first detached before attaching to the new loop.\n\n        Note: loop may be None.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the watcher.\n\n        This must be called to make sure that any underlying resource is freed.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Enter the watcher's context and allow starting new processes\n\n        This function must return self")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Exit the watcher's context")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BaseChildWatcher")
(PUNCT "(")
(ID "AbstractChildWatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "attach_loop")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_do_waitpid")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expected_pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_do_waitpid_all")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "attach_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "loop")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "loop")
(PUNCT ",")
(ID "events")
(PUNCT ".")
(ID "AbstractEventLoop")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "remove_signal_handler")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGCHLD")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(KEYWORD if)
(ID "loop")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loop")
(PUNCT ".")
(ID "add_signal_handler")
(PUNCT "(")
(ID "signal")
(PUNCT ".")
(ID "SIGCHLD")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sig_chld")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_do_waitpid_all")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_sig_chld")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_do_waitpid_all")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_exception_handler")
(PUNCT "(")
(PUNCT "{")
(LIT "message")
(PUNCT ":")
(LIT "Unknown exception in SIGCHLD handler")
(PUNCT ",")
(LIT "exception")
(PUNCT ":")
(ID "exc")
(PUNCT ",")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_compute_returncode")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "status")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "WIFSIGNALED")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "-")
(ID "os")
(PUNCT ".")
(ID "WTERMSIG")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "WIFEXITED")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "WEXITSTATUS")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "status")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SafeChildWatcher")
(PUNCT "(")
(ID "BaseChildWatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "'Safe' child watcher implementation.\n\n    This implementation avoids disrupting other code spawning processes by\n    polling explicitly each process in the SIGCHLD handler instead of calling\n    os.waitpid(-1).\n\n    This is a safe solution but it has a significant overhead when handling a\n    big number of children (O(n) each time SIGCHLD is raised)\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_child_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT "[")
(ID "pid")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_do_waitpid")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_child_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT "[")
(ID "pid")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_do_waitpid_all")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "pid")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_do_waitpid")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_do_waitpid")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "expected_pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "expected_pid")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT ",")
(ID "status")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT "(")
(ID "expected_pid")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "WNOHANG")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ChildProcessError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT "=")
(ID "expected_pid")
(NEWLINE)
(ID "returncode")
(PUNCT "=")
(LIT 255)
(NEWLINE)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "Unknown child process pid %d, will report returncode 255")
(PUNCT ",")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pid")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "returncode")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_compute_returncode")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "process %s exited with returncode %s")
(PUNCT ",")
(ID "expected_pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "Child watcher got an unexpected pid: %r")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "exc_info")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "FastChildWatcher")
(PUNCT "(")
(ID "BaseChildWatcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "'Fast' child watcher implementation.\n\n    This implementation reaps every terminated processes by calling\n    os.waitpid(-1) directly, possibly breaking other code spawning processes\n    and waiting for their termination.\n\n    There is no noticeable overhead when handling a big number of children\n    (O(1) each time a child terminates).\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_forks")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_forks")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_forks")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_forks")
(KEYWORD or)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "collateral_victims")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "Caught subprocesses termination from unknown pids: %s")
(PUNCT ",")
(ID "collateral_victims")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_child_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_forks")
(PUNCT ",")
(LIT "Must use the context manager")
(NEWLINE)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "returncode")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT "[")
(ID "pid")
(PUNCT "]")
(PUNCT "=")
(ID "callback")
(PUNCT ",")
(ID "args")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "callback")
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_child_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT "[")
(ID "pid")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_do_waitpid_all")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pid")
(PUNCT ",")
(ID "status")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "waitpid")
(PUNCT "(")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "WNOHANG")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ChildProcessError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pid")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "returncode")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_compute_returncode")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "self")
(PUNCT ".")
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_callbacks")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "pid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_forks")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_zombies")
(PUNCT "[")
(ID "pid")
(PUNCT "]")
(PUNCT "=")
(ID "returncode")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "unknown process %s exited ")
(LIT "with returncode %s")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "process %s exited with returncode %s")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "callback")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(LIT "Caught subprocess termination from unknown pid: ")
(LIT "%d -> %d")
(PUNCT ",")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT "(")
(ID "pid")
(PUNCT ",")
(ID "returncode")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_UnixDefaultEventLoopPolicy")
(PUNCT "(")
(ID "events")
(PUNCT ".")
(ID "BaseDefaultEventLoopPolicy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "UNIX event loop policy with a watcher for child processes.")
(NEWLINE)
(ID "_loop_factory")
(PUNCT "=")
(ID "_UnixSelectorEventLoop")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_init_watcher")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "events")
(PUNCT ".")
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(PUNCT "=")
(ID "SafeChildWatcher")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "threading")
(PUNCT ".")
(ID "current_thread")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "threading")
(PUNCT ".")
(ID "_MainThread")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(PUNCT ".")
(ID "attach_loop")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_loop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the event loop.\n\n        As a side effect, if a child watcher was set before, then calling\n        .set_event_loop() from the main thread will call .attach_loop(loop) on\n        the child watcher.\n        ")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "set_event_loop")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "threading")
(PUNCT ".")
(ID "current_thread")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "threading")
(PUNCT ".")
(ID "_MainThread")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(PUNCT ".")
(ID "attach_loop")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_child_watcher")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the watcher for child processes.\n\n        If not yet set, a SafeChildWatcher object is automatically created.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_init_watcher")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_child_watcher")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "watcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the watcher for child processes.")
(NEWLINE)
(KEYWORD assert)
(ID "watcher")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "watcher")
(PUNCT ",")
(ID "AbstractChildWatcher")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_watcher")
(PUNCT "=")
(ID "watcher")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "SelectorEventLoop")
(PUNCT "=")
(ID "_UnixSelectorEventLoop")
(NEWLINE)
(ID "DefaultEventLoopPolicy")
(PUNCT "=")
(ID "_UnixDefaultEventLoopPolicy")
(NEWLINE)
(ENDMARKER)
