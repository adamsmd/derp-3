(LIT "Fixer for it.next() -> next(it), per PEP 3114.")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pygram")
(KEYWORD import)
(ID "python_symbols")
(KEYWORD as)
(ID "syms")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(PUNCT ",")
(ID "Call")
(PUNCT ",")
(ID "find_binding")
(NEWLINE)
(ID "bind_warning")
(PUNCT "=")
(LIT "Calls to builtin next() possibly shadowed by global binding")
(NEWLINE)
(KEYWORD class)
(ID "FixNext")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "\n    power< base=any+ trailer< '.' attr='next' > trailer< '(' ')' > >\n    |\n    power< head=any+ trailer< '.' attr='next' > not trailer< '(' ')' > >\n    |\n    classdef< 'class' any+ ':'\n              suite< any*\n                     funcdef< 'def'\n                              name='next'\n                              parameters< '(' NAME ')' > any+ >\n                     any* > >\n    |\n    global=global_stmt< 'global' any* 'next' any* >\n    ")
(NEWLINE)
(ID "order")
(PUNCT "=")
(LIT "pre")
(NEWLINE)
(KEYWORD def)
(ID "start_tree")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tree")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(ID "FixNext")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "start_tree")
(PUNCT "(")
(ID "tree")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "find_binding")
(PUNCT "(")
(LIT "next")
(PUNCT ",")
(ID "tree")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "bind_warning")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "shadowed_next")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "shadowed_next")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "results")
(NEWLINE)
(ID "base")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "base")
(PUNCT ")")
(NEWLINE)
(ID "attr")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "attr")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "results")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "base")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "shadowed_next")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attr")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "__next__")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "attr")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "base")
(PUNCT "=")
(PUNCT "[")
(ID "n")
(PUNCT ".")
(ID "clone")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "base")
(PUNCT "]")
(NEWLINE)
(ID "base")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "node")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Call")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "next")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(PUNCT ",")
(ID "base")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "Name")
(PUNCT "(")
(LIT "__next__")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "attr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "is_assign_target")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT "=")
(ID "results")
(PUNCT "[")
(LIT "head")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT "[")
(ID "str")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "head")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "__builtin__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "bind_warning")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "attr")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "Name")
(PUNCT "(")
(LIT "__next__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "global")
(KEYWORD in)
(ID "results")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "warning")
(PUNCT "(")
(ID "node")
(PUNCT ",")
(ID "bind_warning")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "shadowed_next")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "is_assign_target")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "assign")
(PUNCT "=")
(ID "find_assign")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "assign")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "child")
(KEYWORD in)
(ID "assign")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "child")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "EQUAL")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "is_subtree")
(PUNCT "(")
(ID "child")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_assign")
(PUNCT "(")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "expr_stmt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "node")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "node")
(PUNCT ".")
(ID "type")
(PUNCT "==")
(ID "syms")
(PUNCT ".")
(ID "simple_stmt")
(KEYWORD or)
(ID "node")
(PUNCT ".")
(ID "parent")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "find_assign")
(PUNCT "(")
(ID "node")
(PUNCT ".")
(ID "parent")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_subtree")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "root")
(PUNCT "==")
(ID "node")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "any")
(PUNCT "(")
(ID "is_subtree")
(PUNCT "(")
(ID "c")
(PUNCT ",")
(ID "node")
(PUNCT ")")
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "root")
(PUNCT ".")
(ID "children")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
