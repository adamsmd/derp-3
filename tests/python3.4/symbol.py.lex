(LIT "Non-terminal symbols of Python grammar (from \"graminit.h\").")
(NEWLINE)
(ID "single_input")
(PUNCT "=")
(LIT 256)
(NEWLINE)
(ID "file_input")
(PUNCT "=")
(LIT 257)
(NEWLINE)
(ID "eval_input")
(PUNCT "=")
(LIT 258)
(NEWLINE)
(ID "decorator")
(PUNCT "=")
(LIT 259)
(NEWLINE)
(ID "decorators")
(PUNCT "=")
(LIT 260)
(NEWLINE)
(ID "decorated")
(PUNCT "=")
(LIT 261)
(NEWLINE)
(ID "funcdef")
(PUNCT "=")
(LIT 262)
(NEWLINE)
(ID "parameters")
(PUNCT "=")
(LIT 263)
(NEWLINE)
(ID "typedargslist")
(PUNCT "=")
(LIT 264)
(NEWLINE)
(ID "tfpdef")
(PUNCT "=")
(LIT 265)
(NEWLINE)
(ID "varargslist")
(PUNCT "=")
(LIT 266)
(NEWLINE)
(ID "vfpdef")
(PUNCT "=")
(LIT 267)
(NEWLINE)
(ID "stmt")
(PUNCT "=")
(LIT 268)
(NEWLINE)
(ID "simple_stmt")
(PUNCT "=")
(LIT 269)
(NEWLINE)
(ID "small_stmt")
(PUNCT "=")
(LIT 270)
(NEWLINE)
(ID "expr_stmt")
(PUNCT "=")
(LIT 271)
(NEWLINE)
(ID "testlist_star_expr")
(PUNCT "=")
(LIT 272)
(NEWLINE)
(ID "augassign")
(PUNCT "=")
(LIT 273)
(NEWLINE)
(ID "del_stmt")
(PUNCT "=")
(LIT 274)
(NEWLINE)
(ID "pass_stmt")
(PUNCT "=")
(LIT 275)
(NEWLINE)
(ID "flow_stmt")
(PUNCT "=")
(LIT 276)
(NEWLINE)
(ID "break_stmt")
(PUNCT "=")
(LIT 277)
(NEWLINE)
(ID "continue_stmt")
(PUNCT "=")
(LIT 278)
(NEWLINE)
(ID "return_stmt")
(PUNCT "=")
(LIT 279)
(NEWLINE)
(ID "yield_stmt")
(PUNCT "=")
(LIT 280)
(NEWLINE)
(ID "raise_stmt")
(PUNCT "=")
(LIT 281)
(NEWLINE)
(ID "import_stmt")
(PUNCT "=")
(LIT 282)
(NEWLINE)
(ID "import_name")
(PUNCT "=")
(LIT 283)
(NEWLINE)
(ID "import_from")
(PUNCT "=")
(LIT 284)
(NEWLINE)
(ID "import_as_name")
(PUNCT "=")
(LIT 285)
(NEWLINE)
(ID "dotted_as_name")
(PUNCT "=")
(LIT 286)
(NEWLINE)
(ID "import_as_names")
(PUNCT "=")
(LIT 287)
(NEWLINE)
(ID "dotted_as_names")
(PUNCT "=")
(LIT 288)
(NEWLINE)
(ID "dotted_name")
(PUNCT "=")
(LIT 289)
(NEWLINE)
(ID "global_stmt")
(PUNCT "=")
(LIT 290)
(NEWLINE)
(ID "nonlocal_stmt")
(PUNCT "=")
(LIT 291)
(NEWLINE)
(ID "assert_stmt")
(PUNCT "=")
(LIT 292)
(NEWLINE)
(ID "compound_stmt")
(PUNCT "=")
(LIT 293)
(NEWLINE)
(ID "if_stmt")
(PUNCT "=")
(LIT 294)
(NEWLINE)
(ID "while_stmt")
(PUNCT "=")
(LIT 295)
(NEWLINE)
(ID "for_stmt")
(PUNCT "=")
(LIT 296)
(NEWLINE)
(ID "try_stmt")
(PUNCT "=")
(LIT 297)
(NEWLINE)
(ID "with_stmt")
(PUNCT "=")
(LIT 298)
(NEWLINE)
(ID "with_item")
(PUNCT "=")
(LIT 299)
(NEWLINE)
(ID "except_clause")
(PUNCT "=")
(LIT 300)
(NEWLINE)
(ID "suite")
(PUNCT "=")
(LIT 301)
(NEWLINE)
(ID "test")
(PUNCT "=")
(LIT 302)
(NEWLINE)
(ID "test_nocond")
(PUNCT "=")
(LIT 303)
(NEWLINE)
(ID "lambdef")
(PUNCT "=")
(LIT 304)
(NEWLINE)
(ID "lambdef_nocond")
(PUNCT "=")
(LIT 305)
(NEWLINE)
(ID "or_test")
(PUNCT "=")
(LIT 306)
(NEWLINE)
(ID "and_test")
(PUNCT "=")
(LIT 307)
(NEWLINE)
(ID "not_test")
(PUNCT "=")
(LIT 308)
(NEWLINE)
(ID "comparison")
(PUNCT "=")
(LIT 309)
(NEWLINE)
(ID "comp_op")
(PUNCT "=")
(LIT 310)
(NEWLINE)
(ID "star_expr")
(PUNCT "=")
(LIT 311)
(NEWLINE)
(ID "expr")
(PUNCT "=")
(LIT 312)
(NEWLINE)
(ID "xor_expr")
(PUNCT "=")
(LIT 313)
(NEWLINE)
(ID "and_expr")
(PUNCT "=")
(LIT 314)
(NEWLINE)
(ID "shift_expr")
(PUNCT "=")
(LIT 315)
(NEWLINE)
(ID "arith_expr")
(PUNCT "=")
(LIT 316)
(NEWLINE)
(ID "term")
(PUNCT "=")
(LIT 317)
(NEWLINE)
(ID "factor")
(PUNCT "=")
(LIT 318)
(NEWLINE)
(ID "power")
(PUNCT "=")
(LIT 319)
(NEWLINE)
(ID "atom")
(PUNCT "=")
(LIT 320)
(NEWLINE)
(ID "testlist_comp")
(PUNCT "=")
(LIT 321)
(NEWLINE)
(ID "trailer")
(PUNCT "=")
(LIT 322)
(NEWLINE)
(ID "subscriptlist")
(PUNCT "=")
(LIT 323)
(NEWLINE)
(ID "subscript")
(PUNCT "=")
(LIT 324)
(NEWLINE)
(ID "sliceop")
(PUNCT "=")
(LIT 325)
(NEWLINE)
(ID "exprlist")
(PUNCT "=")
(LIT 326)
(NEWLINE)
(ID "testlist")
(PUNCT "=")
(LIT 327)
(NEWLINE)
(ID "dictorsetmaker")
(PUNCT "=")
(LIT 328)
(NEWLINE)
(ID "classdef")
(PUNCT "=")
(LIT 329)
(NEWLINE)
(ID "arglist")
(PUNCT "=")
(LIT 330)
(NEWLINE)
(ID "argument")
(PUNCT "=")
(LIT 331)
(NEWLINE)
(ID "comp_iter")
(PUNCT "=")
(LIT 332)
(NEWLINE)
(ID "comp_for")
(PUNCT "=")
(LIT 333)
(NEWLINE)
(ID "comp_if")
(PUNCT "=")
(LIT 334)
(NEWLINE)
(ID "encoding_decl")
(PUNCT "=")
(LIT 335)
(NEWLINE)
(ID "yield_expr")
(PUNCT "=")
(LIT 336)
(NEWLINE)
(ID "yield_arg")
(PUNCT "=")
(LIT 337)
(NEWLINE)
(ID "sym_name")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "_name")
(PUNCT ",")
(ID "_value")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "_value")
(PUNCT ")")
(KEYWORD is)
(ID "type")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sym_name")
(PUNCT "[")
(ID "_value")
(PUNCT "]")
(PUNCT "=")
(ID "_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "+")
(PUNCT "[")
(LIT "Include/graminit.h")
(PUNCT ",")
(LIT "Lib/symbol.py")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT ".")
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_main")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
