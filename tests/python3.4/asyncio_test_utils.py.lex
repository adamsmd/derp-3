(LIT "Utilities shared by tests.")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "contextlib")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "socketserver")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "tempfile")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "unittest")
(NEWLINE)
(KEYWORD from)
(ID "unittest")
(KEYWORD import)
(ID "mock")
(NEWLINE)
(KEYWORD from)
(ID "http")
(PUNCT ".")
(ID "server")
(KEYWORD import)
(ID "HTTPServer")
(NEWLINE)
(KEYWORD from)
(ID "wsgiref")
(PUNCT ".")
(ID "simple_server")
(KEYWORD import)
(ID "WSGIRequestHandler")
(PUNCT ",")
(ID "WSGIServer")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "base_events")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "events")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "futures")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "selectors")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "tasks")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "coroutines")
(KEYWORD import)
(ID "coroutine")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "log")
(KEYWORD import)
(ID "logger")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(ID "windows_utils")
(KEYWORD import)
(ID "socketpair")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "socket")
(KEYWORD import)
(ID "socketpair")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dummy_ssl_context")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "ssl")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "ssl")
(PUNCT ".")
(ID "SSLContext")
(PUNCT "(")
(ID "ssl")
(PUNCT ".")
(ID "PROTOCOL_SSLv23")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run_briefly")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "coroutine")
(NEWLINE)
(KEYWORD def)
(ID "once")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "gen")
(PUNCT "=")
(ID "once")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "loop")
(PUNCT ".")
(ID "create_task")
(PUNCT "(")
(ID "gen")
(PUNCT ")")
(NEWLINE)
(ID "t")
(PUNCT ".")
(ID "_log_destroy_pending")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loop")
(PUNCT ".")
(ID "run_until_complete")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gen")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run_until")
(PUNCT "(")
(ID "loop")
(PUNCT ",")
(ID "pred")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(LIT 30)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "deadline")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(ID "timeout")
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "pred")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "timeout")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "timeout")
(PUNCT "=")
(ID "deadline")
(PUNCT "-")
(ID "time")
(PUNCT ".")
(ID "time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "timeout")
(PUNCT "<=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "futures")
(PUNCT ".")
(ID "TimeoutError")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "loop")
(PUNCT ".")
(ID "run_until_complete")
(PUNCT "(")
(ID "tasks")
(PUNCT ".")
(ID "sleep")
(PUNCT "(")
(LIT 0.001)
(PUNCT ",")
(ID "loop")
(PUNCT "=")
(ID "loop")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run_once")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "loop.stop() schedules _raise_stop_error()\n    and run_forever() runs until _raise_stop_error() callback.\n    this wont work if test waits for some IO events, because\n    _raise_stop_error() runs before any of io events callbacks.\n    ")
(NEWLINE)
(ID "loop")
(PUNCT ".")
(ID "stop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "loop")
(PUNCT ".")
(ID "run_forever")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "SilentWSGIRequestHandler")
(PUNCT "(")
(ID "WSGIRequestHandler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "get_stderr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "log_message")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "format")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SilentWSGIServer")
(PUNCT "(")
(ID "WSGIServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request_timeout")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(KEYWORD def)
(ID "get_request")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ",")
(ID "client_addr")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get_request")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "request")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "request_timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "request")
(PUNCT ",")
(ID "client_addr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "client_address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SSLWSGIServerMixin")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "finish_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "client_address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "here")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "__file__")
(PUNCT ")")
(PUNCT ",")
(LIT "..")
(PUNCT ",")
(LIT "tests")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "here")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "here")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(PUNCT ",")
(LIT "test")
(PUNCT ",")
(LIT "test_asyncio")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "keyfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "here")
(PUNCT ",")
(LIT "ssl_key.pem")
(PUNCT ")")
(NEWLINE)
(ID "certfile")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "here")
(PUNCT ",")
(LIT "ssl_cert.pem")
(PUNCT ")")
(NEWLINE)
(ID "ssock")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "request")
(PUNCT ",")
(ID "keyfile")
(PUNCT "=")
(ID "keyfile")
(PUNCT ",")
(ID "certfile")
(PUNCT "=")
(ID "certfile")
(PUNCT ",")
(ID "server_side")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "RequestHandlerClass")
(PUNCT "(")
(ID "ssock")
(PUNCT ",")
(ID "client_address")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "ssock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SSLWSGIServer")
(PUNCT "(")
(ID "SSLWSGIServerMixin")
(PUNCT ",")
(ID "SilentWSGIServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_run_test_server")
(PUNCT "(")
(PUNCT "*")
(PUNCT ",")
(ID "address")
(PUNCT ",")
(ID "use_ssl")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "server_cls")
(PUNCT ",")
(ID "server_ssl_cls")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "app")
(PUNCT "(")
(ID "environ")
(PUNCT ",")
(ID "start_response")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(LIT "200 OK")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "Content-type")
(PUNCT ",")
(LIT "text/plain")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "start_response")
(PUNCT "(")
(ID "status")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(LIT #"Test message")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "server_class")
(PUNCT "=")
(ID "server_ssl_cls")
(KEYWORD if)
(ID "use_ssl")
(KEYWORD else)
(ID "server_cls")
(NEWLINE)
(ID "httpd")
(PUNCT "=")
(ID "server_class")
(PUNCT "(")
(ID "address")
(PUNCT ",")
(ID "SilentWSGIRequestHandler")
(PUNCT ")")
(NEWLINE)
(ID "httpd")
(PUNCT ".")
(ID "set_app")
(PUNCT "(")
(ID "app")
(PUNCT ")")
(NEWLINE)
(ID "httpd")
(PUNCT ".")
(ID "address")
(PUNCT "=")
(ID "httpd")
(PUNCT ".")
(ID "server_address")
(NEWLINE)
(ID "server_thread")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Thread")
(PUNCT "(")
(ID "target")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "httpd")
(PUNCT ".")
(ID "serve_forever")
(PUNCT "(")
(ID "poll_interval")
(PUNCT "=")
(LIT 0.05)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "server_thread")
(PUNCT ".")
(ID "start")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "httpd")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "httpd")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "httpd")
(PUNCT ".")
(ID "server_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "server_thread")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "socket")
(PUNCT ",")
(LIT "AF_UNIX")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "UnixHTTPServer")
(PUNCT "(")
(ID "socketserver")
(PUNCT ".")
(ID "UnixStreamServer")
(PUNCT ",")
(ID "HTTPServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "server_bind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "socketserver")
(PUNCT ".")
(ID "UnixStreamServer")
(PUNCT ".")
(ID "server_bind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_name")
(PUNCT "=")
(LIT "127.0.0.1")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "server_port")
(PUNCT "=")
(LIT 80)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UnixWSGIServer")
(PUNCT "(")
(ID "UnixHTTPServer")
(PUNCT ",")
(ID "WSGIServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request_timeout")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(KEYWORD def)
(ID "server_bind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "UnixHTTPServer")
(PUNCT ".")
(ID "server_bind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setup_environ")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_request")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "request")
(PUNCT ",")
(ID "client_addr")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get_request")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "request")
(PUNCT ".")
(ID "settimeout")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "request_timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "request")
(PUNCT ",")
(PUNCT "(")
(LIT "127.0.0.1")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "SilentUnixWSGIServer")
(PUNCT "(")
(ID "UnixWSGIServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "handle_error")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "request")
(PUNCT ",")
(ID "client_address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UnixSSLWSGIServer")
(PUNCT "(")
(ID "SSLWSGIServerMixin")
(PUNCT ",")
(ID "SilentUnixWSGIServer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gen_unix_socket_path")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "tempfile")
(PUNCT ".")
(ID "NamedTemporaryFile")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "file")
(PUNCT ".")
(ID "name")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "unix_socket_path")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "gen_unix_socket_path")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "path")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "os")
(PUNCT ".")
(ID "unlink")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "run_test_unix_server")
(PUNCT "(")
(PUNCT "*")
(PUNCT ",")
(ID "use_ssl")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "unix_socket_path")
(PUNCT "(")
(PUNCT ")")
(KEYWORD as)
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "_run_test_server")
(PUNCT "(")
(ID "address")
(PUNCT "=")
(ID "path")
(PUNCT ",")
(ID "use_ssl")
(PUNCT "=")
(ID "use_ssl")
(PUNCT ",")
(ID "server_cls")
(PUNCT "=")
(ID "SilentUnixWSGIServer")
(PUNCT ",")
(ID "server_ssl_cls")
(PUNCT "=")
(ID "UnixSSLWSGIServer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "run_test_server")
(PUNCT "(")
(PUNCT "*")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(LIT "127.0.0.1")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "use_ssl")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "_run_test_server")
(PUNCT "(")
(ID "address")
(PUNCT "=")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "use_ssl")
(PUNCT "=")
(ID "use_ssl")
(PUNCT ",")
(ID "server_cls")
(PUNCT "=")
(ID "SilentWSGIServer")
(PUNCT ",")
(ID "server_ssl_cls")
(PUNCT "=")
(ID "SSLWSGIServer")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_test_protocol")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dct")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "base")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "__")
(PUNCT ")")
(KEYWORD and)
(ID "name")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "dct")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "MockCallback")
(PUNCT "(")
(ID "return_value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "type")
(PUNCT "(")
(LIT "TestProtocol")
(PUNCT ",")
(PUNCT "(")
(ID "base")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "base")
(PUNCT ".")
(ID "__bases__")
(PUNCT ",")
(ID "dct")
(PUNCT ")")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TestSelector")
(PUNCT "(")
(ID "selectors")
(PUNCT ".")
(ID "BaseSelector")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "keys")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileobj")
(PUNCT ",")
(ID "events")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "selectors")
(PUNCT ".")
(ID "SelectorKey")
(PUNCT "(")
(ID "fileobj")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "events")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "keys")
(PUNCT "[")
(ID "fileobj")
(PUNCT "]")
(PUNCT "=")
(ID "key")
(NEWLINE)
(KEYWORD return)
(ID "key")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unregister")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileobj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "keys")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_map")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "keys")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TestLoop")
(PUNCT "(")
(ID "base_events")
(PUNCT ".")
(ID "BaseEventLoop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Loop for unittests.\n\n    It manages self time directly.\n    If something scheduled to be executed later then\n    on next loop iteration after all ready handlers done\n    generator passed to __init__ is calling.\n\n    Generator should be like this:\n\n        def gen():\n            ...\n            when = yield ...\n            ... = yield time_advance\n\n    Value returned by yield is absolute time of next scheduled handler.\n    Value passed to yield is time advance to move loop's time forward.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "gen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "gen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "gen")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_check_on_close")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_check_on_close")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_gen")
(PUNCT "=")
(ID "gen")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_gen")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_time")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_clock_resolution")
(PUNCT "=")
(LIT 1e-09)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_timers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_selector")
(PUNCT "=")
(ID "TestSelector")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "readers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reset_counters")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "time")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_time")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "advance_time")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "advance")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move test time forward.")
(NEWLINE)
(KEYWORD if)
(ID "advance")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_time")
(PUNCT "+=")
(ID "advance")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_check_on_close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_gen")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "StopIteration")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AssertionError")
(PUNCT "(")
(LIT "Time generator is not finished")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "add_reader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "readers")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(PUNCT "=")
(ID "events")
(PUNCT ".")
(ID "Handle")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_reader_count")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "fd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "readers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "readers")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assert_reader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "fd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "readers")
(PUNCT ",")
(LIT "fd {} is not registered")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "readers")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(NEWLINE)
(KEYWORD assert)
(ID "handle")
(PUNCT ".")
(ID "_callback")
(PUNCT "==")
(ID "callback")
(PUNCT ",")
(LIT "{!r} != {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "handle")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(ID "callback")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "handle")
(PUNCT ".")
(ID "_args")
(PUNCT "==")
(ID "args")
(PUNCT ",")
(LIT "{!r} != {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "handle")
(PUNCT ".")
(ID "_args")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_writer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writers")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(PUNCT "=")
(ID "events")
(PUNCT ".")
(ID "Handle")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_writer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_writer_count")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "fd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "writers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "writers")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "assert_writer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "fd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "writers")
(PUNCT ",")
(LIT "fd {} is not registered")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "fd")
(PUNCT ")")
(NEWLINE)
(ID "handle")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "writers")
(PUNCT "[")
(ID "fd")
(PUNCT "]")
(NEWLINE)
(KEYWORD assert)
(ID "handle")
(PUNCT ".")
(ID "_callback")
(PUNCT "==")
(ID "callback")
(PUNCT ",")
(LIT "{!r} != {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "handle")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(ID "callback")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "handle")
(PUNCT ".")
(ID "_args")
(PUNCT "==")
(ID "args")
(PUNCT ",")
(LIT "{!r} != {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "handle")
(PUNCT ".")
(ID "_args")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "reset_counters")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "remove_reader_count")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "defaultdict")
(PUNCT "(")
(ID "int")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "remove_writer_count")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "defaultdict")
(PUNCT "(")
(ID "int")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_run_once")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_run_once")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "when")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_timers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "advance")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_gen")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "when")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "advance_time")
(PUNCT "(")
(ID "advance")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_timers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_at")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "when")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_timers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "when")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "call_at")
(PUNCT "(")
(ID "when")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_process_events")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "event_list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_to_self")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "MockCallback")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mock")
(PUNCT ".")
(ID "Mock")
(PUNCT "(")
(ID "spec")
(PUNCT "=")
(PUNCT "[")
(LIT "__call__")
(PUNCT "]")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "MockPattern")
(PUNCT "(")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A regex based str with a fuzzy __eq__.\n\n    Use this helper with 'mock.assert_called_with', or anywhere\n    where a regex comparison between strings is needed.\n\n    For instance:\n       mock_call.assert_called_with(MockPattern('spam.*ham'))\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "bool")
(PUNCT "(")
(ID "re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ",")
(ID "other")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "S")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_function_source")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "source")
(PUNCT "=")
(ID "events")
(PUNCT ".")
(ID "_get_function_source")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "source")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unable to get the source of %r")
(PUNCT "%")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "source")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TestCase")
(PUNCT "(")
(ID "unittest")
(PUNCT ".")
(ID "TestCase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "set_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "cleanup")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "loop")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(ID "events")
(PUNCT ".")
(ID "set_event_loop")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cleanup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "addCleanup")
(PUNCT "(")
(ID "loop")
(PUNCT ".")
(ID "close")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "new_test_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "gen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loop")
(PUNCT "=")
(ID "TestLoop")
(PUNCT "(")
(ID "gen")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "set_event_loop")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "loop")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tearDown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "events")
(PUNCT ".")
(ID "set_event_loop")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "assertEqual")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "disable_logger")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Context manager to disable asyncio logger.\n\n    For example, it can be used to ignore warnings in debug mode.\n    ")
(NEWLINE)
(ID "old_level")
(PUNCT "=")
(ID "logger")
(PUNCT ".")
(ID "level")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "logging")
(PUNCT ".")
(ID "CRITICAL")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD yield)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "setLevel")
(PUNCT "(")
(ID "old_level")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "mock_nonblocking_socket")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a mock of a non-blocking socket.")
(NEWLINE)
(ID "sock")
(PUNCT "=")
(ID "mock")
(PUNCT ".")
(ID "Mock")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "socket")
(PUNCT ")")
(NEWLINE)
(ID "sock")
(PUNCT ".")
(ID "gettimeout")
(PUNCT ".")
(ID "return_value")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(KEYWORD return)
(ID "sock")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "force_legacy_ssl_support")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "mock")
(PUNCT ".")
(ID "patch")
(PUNCT "(")
(LIT "asyncio.sslproto._is_sslproto_available")
(PUNCT ",")
(ID "return_value")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
