(LIT "Fixer for removing uses of the types module.\n\nThese work for only the known names in the types module.  The forms above\ncan include types. or not.  ie, It is assumed the module is imported either as:\n\n    import types\n    from types import ... # either * or specific types\n\nThe import statements are not modified.\n\nThere should be another fixer that handles at least the following constants:\n\n   type([]) -> list\n   type(()) -> tuple\n   type('') -> str\n\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "pgen2")
(KEYWORD import)
(ID "token")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(KEYWORD import)
(ID "fixer_base")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(PUNCT ".")
(ID "fixer_util")
(KEYWORD import)
(ID "Name")
(NEWLINE)
(ID "_TYPE_MAPPING")
(PUNCT "=")
(PUNCT "{")
(LIT "BooleanType")
(PUNCT ":")
(LIT "bool")
(PUNCT ",")
(LIT "BufferType")
(PUNCT ":")
(LIT "memoryview")
(PUNCT ",")
(LIT "ClassType")
(PUNCT ":")
(LIT "type")
(PUNCT ",")
(LIT "ComplexType")
(PUNCT ":")
(LIT "complex")
(PUNCT ",")
(LIT "DictType")
(PUNCT ":")
(LIT "dict")
(PUNCT ",")
(LIT "DictionaryType")
(PUNCT ":")
(LIT "dict")
(PUNCT ",")
(LIT "EllipsisType")
(PUNCT ":")
(LIT "type(Ellipsis)")
(PUNCT ",")
(LIT "FloatType")
(PUNCT ":")
(LIT "float")
(PUNCT ",")
(LIT "IntType")
(PUNCT ":")
(LIT "int")
(PUNCT ",")
(LIT "ListType")
(PUNCT ":")
(LIT "list")
(PUNCT ",")
(LIT "LongType")
(PUNCT ":")
(LIT "int")
(PUNCT ",")
(LIT "ObjectType")
(PUNCT ":")
(LIT "object")
(PUNCT ",")
(LIT "NoneType")
(PUNCT ":")
(LIT "type(None)")
(PUNCT ",")
(LIT "NotImplementedType")
(PUNCT ":")
(LIT "type(NotImplemented)")
(PUNCT ",")
(LIT "SliceType")
(PUNCT ":")
(LIT "slice")
(PUNCT ",")
(LIT "StringType")
(PUNCT ":")
(LIT "bytes")
(PUNCT ",")
(LIT "StringTypes")
(PUNCT ":")
(LIT "str")
(PUNCT ",")
(LIT "TupleType")
(PUNCT ":")
(LIT "tuple")
(PUNCT ",")
(LIT "TypeType")
(PUNCT ":")
(LIT "type")
(PUNCT ",")
(LIT "UnicodeType")
(PUNCT ":")
(LIT "str")
(PUNCT ",")
(LIT "XRangeType")
(PUNCT ":")
(LIT "range")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_pats")
(PUNCT "=")
(PUNCT "[")
(LIT "power< 'types' trailer< '.' name='%s' > >")
(PUNCT "%")
(ID "t")
(KEYWORD for)
(ID "t")
(KEYWORD in)
(ID "_TYPE_MAPPING")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "FixTypes")
(PUNCT "(")
(ID "fixer_base")
(PUNCT ".")
(ID "BaseFix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "BM_compatible")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "PATTERN")
(PUNCT "=")
(LIT "|")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_pats")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "transform")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "node")
(PUNCT ",")
(ID "results")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_value")
(PUNCT "=")
(ID "_TYPE_MAPPING")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "results")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ".")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "new_value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Name")
(PUNCT "(")
(ID "new_value")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "node")
(PUNCT ".")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
