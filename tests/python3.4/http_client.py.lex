(LIT "HTTP/1.1 client library\n\n<intro stuff goes here>\n<other stuff, too>\n\nHTTPConnection goes through a number of \"states\", which define when a client\nmay legally make another request or fetch the response for a particular\nrequest. This diagram details these state transitions:\n\n    (null)\n      |\n      | HTTPConnection()\n      v\n    Idle\n      |\n      | putrequest()\n      v\n    Request-started\n      |\n      | ( putheader() )*  endheaders()\n      v\n    Request-sent\n      |\n      | response = getresponse()\n      v\n    Unread-response   [Response-headers-read]\n      |\\____________________\n      |                     |\n      | response.read()     | putrequest()\n      v                     v\n    Idle                  Req-started-unread-response\n                     ______/|\n                   /        |\n   response.read() |        | ( putheader() )*  endheaders()\n                   v        v\n       Request-started    Req-sent-unread-response\n                            |\n                            | response.read()\n                            v\n                          Request-sent\n\nThis diagram presents the following rules:\n  -- a second request may not be started until {response-headers-read}\n  -- a response [object] cannot be retrieved until {request-sent}\n  -- there is no differentiation between an unread response body and a\n     partially read response body\n\nNote: this enforcement is applied by the HTTPConnection class. The\n      HTTPResponse class does not enforce this state machine, which\n      implies sophisticated clients may accelerate the request/response\n      pipeline. Caution should be taken, though: accelerating the states\n      beyond the above pattern may imply knowledge of the server's\n      connection-close behavior for certain requests. For example, it\n      is impossible to tell whether the server will close the connection\n      UNTIL the response headers have been read; this means that further\n      requests cannot be placed into the pipeline until it is known that\n      the server will NOT be closing the connection.\n\nLogical State                  __state            __response\n-------------                  -------            ----------\nIdle                           _CS_IDLE           None\nRequest-started                _CS_REQ_STARTED    None\nRequest-sent                   _CS_REQ_SENT       None\nUnread-response                _CS_IDLE           <response_class>\nReq-started-unread-response    _CS_REQ_STARTED    <response_class>\nReq-sent-unread-response       _CS_REQ_SENT       <response_class>\n")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "parser")
(NEWLINE)
(KEYWORD import)
(ID "email")
(PUNCT ".")
(ID "message")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD from)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(KEYWORD import)
(ID "urlsplit")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "HTTPResponse")
(PUNCT ",")
(LIT "HTTPConnection")
(PUNCT ",")
(LIT "HTTPException")
(PUNCT ",")
(LIT "NotConnected")
(PUNCT ",")
(LIT "UnknownProtocol")
(PUNCT ",")
(LIT "UnknownTransferEncoding")
(PUNCT ",")
(LIT "UnimplementedFileMode")
(PUNCT ",")
(LIT "IncompleteRead")
(PUNCT ",")
(LIT "InvalidURL")
(PUNCT ",")
(LIT "ImproperConnectionState")
(PUNCT ",")
(LIT "CannotSendRequest")
(PUNCT ",")
(LIT "CannotSendHeader")
(PUNCT ",")
(LIT "ResponseNotReady")
(PUNCT ",")
(LIT "BadStatusLine")
(PUNCT ",")
(LIT "error")
(PUNCT ",")
(LIT "responses")
(PUNCT "]")
(NEWLINE)
(ID "HTTP_PORT")
(PUNCT "=")
(LIT 80)
(NEWLINE)
(ID "HTTPS_PORT")
(PUNCT "=")
(LIT 443)
(NEWLINE)
(ID "_UNKNOWN")
(PUNCT "=")
(LIT "UNKNOWN")
(NEWLINE)
(ID "_CS_IDLE")
(PUNCT "=")
(LIT "Idle")
(NEWLINE)
(ID "_CS_REQ_STARTED")
(PUNCT "=")
(LIT "Request-started")
(NEWLINE)
(ID "_CS_REQ_SENT")
(PUNCT "=")
(LIT "Request-sent")
(NEWLINE)
(ID "CONTINUE")
(PUNCT "=")
(LIT 100)
(NEWLINE)
(ID "SWITCHING_PROTOCOLS")
(PUNCT "=")
(LIT 101)
(NEWLINE)
(ID "PROCESSING")
(PUNCT "=")
(LIT 102)
(NEWLINE)
(ID "OK")
(PUNCT "=")
(LIT 200)
(NEWLINE)
(ID "CREATED")
(PUNCT "=")
(LIT 201)
(NEWLINE)
(ID "ACCEPTED")
(PUNCT "=")
(LIT 202)
(NEWLINE)
(ID "NON_AUTHORITATIVE_INFORMATION")
(PUNCT "=")
(LIT 203)
(NEWLINE)
(ID "NO_CONTENT")
(PUNCT "=")
(LIT 204)
(NEWLINE)
(ID "RESET_CONTENT")
(PUNCT "=")
(LIT 205)
(NEWLINE)
(ID "PARTIAL_CONTENT")
(PUNCT "=")
(LIT 206)
(NEWLINE)
(ID "MULTI_STATUS")
(PUNCT "=")
(LIT 207)
(NEWLINE)
(ID "IM_USED")
(PUNCT "=")
(LIT 226)
(NEWLINE)
(ID "MULTIPLE_CHOICES")
(PUNCT "=")
(LIT 300)
(NEWLINE)
(ID "MOVED_PERMANENTLY")
(PUNCT "=")
(LIT 301)
(NEWLINE)
(ID "FOUND")
(PUNCT "=")
(LIT 302)
(NEWLINE)
(ID "SEE_OTHER")
(PUNCT "=")
(LIT 303)
(NEWLINE)
(ID "NOT_MODIFIED")
(PUNCT "=")
(LIT 304)
(NEWLINE)
(ID "USE_PROXY")
(PUNCT "=")
(LIT 305)
(NEWLINE)
(ID "TEMPORARY_REDIRECT")
(PUNCT "=")
(LIT 307)
(NEWLINE)
(ID "BAD_REQUEST")
(PUNCT "=")
(LIT 400)
(NEWLINE)
(ID "UNAUTHORIZED")
(PUNCT "=")
(LIT 401)
(NEWLINE)
(ID "PAYMENT_REQUIRED")
(PUNCT "=")
(LIT 402)
(NEWLINE)
(ID "FORBIDDEN")
(PUNCT "=")
(LIT 403)
(NEWLINE)
(ID "NOT_FOUND")
(PUNCT "=")
(LIT 404)
(NEWLINE)
(ID "METHOD_NOT_ALLOWED")
(PUNCT "=")
(LIT 405)
(NEWLINE)
(ID "NOT_ACCEPTABLE")
(PUNCT "=")
(LIT 406)
(NEWLINE)
(ID "PROXY_AUTHENTICATION_REQUIRED")
(PUNCT "=")
(LIT 407)
(NEWLINE)
(ID "REQUEST_TIMEOUT")
(PUNCT "=")
(LIT 408)
(NEWLINE)
(ID "CONFLICT")
(PUNCT "=")
(LIT 409)
(NEWLINE)
(ID "GONE")
(PUNCT "=")
(LIT 410)
(NEWLINE)
(ID "LENGTH_REQUIRED")
(PUNCT "=")
(LIT 411)
(NEWLINE)
(ID "PRECONDITION_FAILED")
(PUNCT "=")
(LIT 412)
(NEWLINE)
(ID "REQUEST_ENTITY_TOO_LARGE")
(PUNCT "=")
(LIT 413)
(NEWLINE)
(ID "REQUEST_URI_TOO_LONG")
(PUNCT "=")
(LIT 414)
(NEWLINE)
(ID "UNSUPPORTED_MEDIA_TYPE")
(PUNCT "=")
(LIT 415)
(NEWLINE)
(ID "REQUESTED_RANGE_NOT_SATISFIABLE")
(PUNCT "=")
(LIT 416)
(NEWLINE)
(ID "EXPECTATION_FAILED")
(PUNCT "=")
(LIT 417)
(NEWLINE)
(ID "UNPROCESSABLE_ENTITY")
(PUNCT "=")
(LIT 422)
(NEWLINE)
(ID "LOCKED")
(PUNCT "=")
(LIT 423)
(NEWLINE)
(ID "FAILED_DEPENDENCY")
(PUNCT "=")
(LIT 424)
(NEWLINE)
(ID "UPGRADE_REQUIRED")
(PUNCT "=")
(LIT 426)
(NEWLINE)
(ID "PRECONDITION_REQUIRED")
(PUNCT "=")
(LIT 428)
(NEWLINE)
(ID "TOO_MANY_REQUESTS")
(PUNCT "=")
(LIT 429)
(NEWLINE)
(ID "REQUEST_HEADER_FIELDS_TOO_LARGE")
(PUNCT "=")
(LIT 431)
(NEWLINE)
(ID "INTERNAL_SERVER_ERROR")
(PUNCT "=")
(LIT 500)
(NEWLINE)
(ID "NOT_IMPLEMENTED")
(PUNCT "=")
(LIT 501)
(NEWLINE)
(ID "BAD_GATEWAY")
(PUNCT "=")
(LIT 502)
(NEWLINE)
(ID "SERVICE_UNAVAILABLE")
(PUNCT "=")
(LIT 503)
(NEWLINE)
(ID "GATEWAY_TIMEOUT")
(PUNCT "=")
(LIT 504)
(NEWLINE)
(ID "HTTP_VERSION_NOT_SUPPORTED")
(PUNCT "=")
(LIT 505)
(NEWLINE)
(ID "INSUFFICIENT_STORAGE")
(PUNCT "=")
(LIT 507)
(NEWLINE)
(ID "NOT_EXTENDED")
(PUNCT "=")
(LIT 510)
(NEWLINE)
(ID "NETWORK_AUTHENTICATION_REQUIRED")
(PUNCT "=")
(LIT 511)
(NEWLINE)
(ID "responses")
(PUNCT "=")
(PUNCT "{")
(LIT 100)
(PUNCT ":")
(LIT "Continue")
(PUNCT ",")
(LIT 101)
(PUNCT ":")
(LIT "Switching Protocols")
(PUNCT ",")
(LIT 200)
(PUNCT ":")
(LIT "OK")
(PUNCT ",")
(LIT 201)
(PUNCT ":")
(LIT "Created")
(PUNCT ",")
(LIT 202)
(PUNCT ":")
(LIT "Accepted")
(PUNCT ",")
(LIT 203)
(PUNCT ":")
(LIT "Non-Authoritative Information")
(PUNCT ",")
(LIT 204)
(PUNCT ":")
(LIT "No Content")
(PUNCT ",")
(LIT 205)
(PUNCT ":")
(LIT "Reset Content")
(PUNCT ",")
(LIT 206)
(PUNCT ":")
(LIT "Partial Content")
(PUNCT ",")
(LIT 300)
(PUNCT ":")
(LIT "Multiple Choices")
(PUNCT ",")
(LIT 301)
(PUNCT ":")
(LIT "Moved Permanently")
(PUNCT ",")
(LIT 302)
(PUNCT ":")
(LIT "Found")
(PUNCT ",")
(LIT 303)
(PUNCT ":")
(LIT "See Other")
(PUNCT ",")
(LIT 304)
(PUNCT ":")
(LIT "Not Modified")
(PUNCT ",")
(LIT 305)
(PUNCT ":")
(LIT "Use Proxy")
(PUNCT ",")
(LIT 306)
(PUNCT ":")
(LIT "(Unused)")
(PUNCT ",")
(LIT 307)
(PUNCT ":")
(LIT "Temporary Redirect")
(PUNCT ",")
(LIT 400)
(PUNCT ":")
(LIT "Bad Request")
(PUNCT ",")
(LIT 401)
(PUNCT ":")
(LIT "Unauthorized")
(PUNCT ",")
(LIT 402)
(PUNCT ":")
(LIT "Payment Required")
(PUNCT ",")
(LIT 403)
(PUNCT ":")
(LIT "Forbidden")
(PUNCT ",")
(LIT 404)
(PUNCT ":")
(LIT "Not Found")
(PUNCT ",")
(LIT 405)
(PUNCT ":")
(LIT "Method Not Allowed")
(PUNCT ",")
(LIT 406)
(PUNCT ":")
(LIT "Not Acceptable")
(PUNCT ",")
(LIT 407)
(PUNCT ":")
(LIT "Proxy Authentication Required")
(PUNCT ",")
(LIT 408)
(PUNCT ":")
(LIT "Request Timeout")
(PUNCT ",")
(LIT 409)
(PUNCT ":")
(LIT "Conflict")
(PUNCT ",")
(LIT 410)
(PUNCT ":")
(LIT "Gone")
(PUNCT ",")
(LIT 411)
(PUNCT ":")
(LIT "Length Required")
(PUNCT ",")
(LIT 412)
(PUNCT ":")
(LIT "Precondition Failed")
(PUNCT ",")
(LIT 413)
(PUNCT ":")
(LIT "Request Entity Too Large")
(PUNCT ",")
(LIT 414)
(PUNCT ":")
(LIT "Request-URI Too Long")
(PUNCT ",")
(LIT 415)
(PUNCT ":")
(LIT "Unsupported Media Type")
(PUNCT ",")
(LIT 416)
(PUNCT ":")
(LIT "Requested Range Not Satisfiable")
(PUNCT ",")
(LIT 417)
(PUNCT ":")
(LIT "Expectation Failed")
(PUNCT ",")
(LIT 428)
(PUNCT ":")
(LIT "Precondition Required")
(PUNCT ",")
(LIT 429)
(PUNCT ":")
(LIT "Too Many Requests")
(PUNCT ",")
(LIT 431)
(PUNCT ":")
(LIT "Request Header Fields Too Large")
(PUNCT ",")
(LIT 500)
(PUNCT ":")
(LIT "Internal Server Error")
(PUNCT ",")
(LIT 501)
(PUNCT ":")
(LIT "Not Implemented")
(PUNCT ",")
(LIT 502)
(PUNCT ":")
(LIT "Bad Gateway")
(PUNCT ",")
(LIT 503)
(PUNCT ":")
(LIT "Service Unavailable")
(PUNCT ",")
(LIT 504)
(PUNCT ":")
(LIT "Gateway Timeout")
(PUNCT ",")
(LIT 505)
(PUNCT ":")
(LIT "HTTP Version Not Supported")
(PUNCT ",")
(LIT 511)
(PUNCT ":")
(LIT "Network Authentication Required")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "MAXAMOUNT")
(PUNCT "=")
(LIT 1048576)
(NEWLINE)
(ID "_MAXLINE")
(PUNCT "=")
(LIT 65536)
(NEWLINE)
(ID "_MAXHEADERS")
(PUNCT "=")
(LIT 100)
(NEWLINE)
(KEYWORD class)
(ID "HTTPMessage")
(PUNCT "(")
(ID "email")
(PUNCT ".")
(ID "message")
(PUNCT ".")
(ID "Message")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "getallmatchingheaders")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find all header lines matching a given header name.\n\n        Look through the list of headers and find all lines matching a given\n        header name (and their continuation lines).  A list of the lines is\n        returned, without interpretation.  If the header does not occur, an\n        empty list is returned.  If the header occurs multiple times, all\n        occurrences are returned.  Case is not important in the header name.\n\n        ")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(LIT ":")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "lst")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "hit")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "n")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hit")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "line")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "isspace")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hit")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lst")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "lst")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "parse_headers")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "_class")
(PUNCT "=")
(ID "HTTPMessage")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parses only RFC2822 headers from a file pointer.\n\n    email Parser wants to see strings rather than bytes.\n    But a TextIOWrapper around self.rfile would buffer too many bytes\n    from the stream, bytes which we later need to read as bytes.\n    So we read the correct bytes here, as bytes, for email Parser\n    to parse.\n\n    ")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LineTooLong")
(PUNCT "(")
(LIT "header line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "headers")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXHEADERS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "HTTPException")
(PUNCT "(")
(LIT "got more than %d headers")
(PUNCT "%")
(ID "_MAXHEADERS")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(KEYWORD in)
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ",")
(LIT #"\n")
(PUNCT ",")
(LIT #"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "hstring")
(PUNCT "=")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "headers")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "iso-8859-1")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "email")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "Parser")
(PUNCT "(")
(ID "_class")
(PUNCT "=")
(ID "_class")
(PUNCT ")")
(PUNCT ".")
(ID "parsestr")
(PUNCT "(")
(ID "hstring")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HTTPResponse")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "RawIOBase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "debuglevel")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "method")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "url")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT "=")
(ID "debuglevel")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT "=")
(ID "method")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "status")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reason")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chunk_left")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "will_close")
(PUNCT "=")
(ID "_UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_status")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(LIT "iso-8859-1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LineTooLong")
(PUNCT "(")
(LIT "status line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "reply:")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadStatusLine")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT ",")
(ID "status")
(PUNCT ",")
(ID "reason")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT ",")
(ID "status")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(KEYWORD None)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "reason")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "version")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "HTTP/")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "BadStatusLine")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "status")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "status")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "status")
(PUNCT "<")
(LIT 100)
(KEYWORD or)
(ID "status")
(PUNCT ">")
(LIT 999)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadStatusLine")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "BadStatusLine")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "version")
(PUNCT ",")
(ID "status")
(PUNCT ",")
(ID "reason")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "begin")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "headers")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT ",")
(ID "status")
(PUNCT ",")
(ID "reason")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_status")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "status")
(PUNCT "!=")
(ID "CONTINUE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skip")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "skip")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LineTooLong")
(PUNCT "(")
(LIT "header line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "skip")
(PUNCT "=")
(ID "skip")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "skip")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "header:")
(PUNCT ",")
(ID "skip")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "code")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "status")
(PUNCT "=")
(ID "status")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "reason")
(PUNCT "=")
(ID "reason")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "version")
(KEYWORD in)
(PUNCT "(")
(LIT "HTTP/1.0")
(PUNCT ",")
(LIT "HTTP/0.9")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(LIT 10)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "version")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "HTTP/1.")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(LIT 11)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "UnknownProtocol")
(PUNCT "(")
(ID "version")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "msg")
(PUNCT "=")
(ID "parse_headers")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "hdr")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "header:")
(PUNCT ",")
(ID "hdr")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(LIT " ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "tr_enc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "transfer-encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tr_enc")
(KEYWORD and)
(ID "tr_enc")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "chunked")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chunk_left")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "will_close")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_check_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "length")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "content-length")
(PUNCT ")")
(NEWLINE)
(ID "tr_enc")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "transfer-encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "length")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "status")
(PUNCT "==")
(ID "NO_CONTENT")
(KEYWORD or)
(ID "status")
(PUNCT "==")
(ID "NOT_MODIFIED")
(KEYWORD or)
(LIT 100)
(PUNCT "<=")
(ID "status")
(PUNCT "<")
(LIT 200)
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT "==")
(LIT "HEAD")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "will_close")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "chunked")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "length")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "will_close")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_check_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "connection")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "==")
(LIT 11)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "conn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "connection")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "conn")
(KEYWORD and)
(LIT "close")
(KEYWORD in)
(ID "conn")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "keep-alive")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "conn")
(KEYWORD and)
(LIT "keep-alive")
(KEYWORD in)
(ID "conn")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "pconn")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "proxy-connection")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pconn")
(KEYWORD and)
(LIT "keep-alive")
(KEYWORD in)
(ID "pconn")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close_conn")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "flush")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "isclosed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "True if the connection is closed.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "fp")
(KEYWORD is)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "amt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT "==")
(LIT "HEAD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "amt")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "super")
(PUNCT "(")
(ID "HTTPResponse")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "amt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_readall_chunked")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "length")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_safe_read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IncompleteRead")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readinto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "fp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT "==")
(LIT "HEAD")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_readinto_chunked")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "length")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "b")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readinto")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "n")
(KEYWORD and)
(ID "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "length")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT "-=")
(ID "n")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "length")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_next_chunk_size")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LineTooLong")
(PUNCT "(")
(LIT "chunk size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "i")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT #";")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(LIT 16)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_read_and_discard_trailer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LineTooLong")
(PUNCT "(")
(LIT "trailer line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(KEYWORD in)
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ",")
(LIT #"\n")
(PUNCT ",")
(LIT #"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_readall_chunked")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT "!=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "chunk_left")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "chunk_left")
(NEWLINE)
(ID "value")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "chunk_left")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk_left")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_next_chunk_size")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "chunk_left")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IncompleteRead")
(PUNCT "(")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "value")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_safe_read")
(PUNCT "(")
(ID "chunk_left")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_safe_read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "chunk_left")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_read_and_discard_trailer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_readinto_chunked")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "chunked")
(PUNCT "!=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "chunk_left")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "chunk_left")
(NEWLINE)
(ID "total_bytes")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "mvb")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "chunk_left")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk_left")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_next_chunk_size")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "chunk_left")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IncompleteRead")
(PUNCT "(")
(ID "bytes")
(PUNCT "(")
(ID "b")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "total_bytes")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "mvb")
(PUNCT ")")
(PUNCT "<")
(ID "chunk_left")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_safe_readinto")
(PUNCT "(")
(ID "mvb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chunk_left")
(PUNCT "=")
(ID "chunk_left")
(PUNCT "-")
(ID "n")
(NEWLINE)
(KEYWORD return)
(ID "total_bytes")
(PUNCT "+")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "len")
(PUNCT "(")
(ID "mvb")
(PUNCT ")")
(PUNCT "==")
(ID "chunk_left")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_safe_readinto")
(PUNCT "(")
(ID "mvb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_safe_read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "chunk_left")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "total_bytes")
(PUNCT "+")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "temp_mvb")
(PUNCT "=")
(ID "mvb")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "chunk_left")
(PUNCT "]")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_safe_readinto")
(PUNCT "(")
(ID "temp_mvb")
(PUNCT ")")
(NEWLINE)
(ID "mvb")
(PUNCT "=")
(ID "mvb")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "total_bytes")
(PUNCT "+=")
(ID "n")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_safe_read")
(PUNCT "(")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "chunk_left")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_read_and_discard_trailer")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_close_conn")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "total_bytes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_safe_read")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "amt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read the number of bytes requested, compensating for partial reads.\n\n        Normally, we have a blocking socket, but a read() can be interrupted\n        by a signal (resulting in a partial read).\n\n        Note that we cannot distinguish between EOF and an interrupt when zero\n        bytes have been read. IncompleteRead() will be raised in this\n        situation.\n\n        This function should be used when <amt> bytes \"should\" be present for\n        reading. If the bytes are truly not available (due to EOF), then the\n        IncompleteRead exception can be used to detect the problem.\n        ")
(NEWLINE)
(ID "s")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "amt")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "min")
(PUNCT "(")
(ID "amt")
(PUNCT ",")
(ID "MAXAMOUNT")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "chunk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IncompleteRead")
(PUNCT "(")
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ",")
(ID "amt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(ID "amt")
(PUNCT "-=")
(ID "len")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_safe_readinto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Same as _safe_read, but for reading into a buffer.")
(NEWLINE)
(ID "total_bytes")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "mvb")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "total_bytes")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "MAXAMOUNT")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "mvb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "temp_mvb")
(PUNCT "=")
(ID "mvb")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "MAXAMOUNT")
(PUNCT "]")
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readinto")
(PUNCT "(")
(ID "temp_mvb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "n")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readinto")
(PUNCT "(")
(ID "mvb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "IncompleteRead")
(PUNCT "(")
(ID "bytes")
(PUNCT "(")
(ID "mvb")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(ID "total_bytes")
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "mvb")
(PUNCT "=")
(ID "mvb")
(PUNCT "[")
(ID "n")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "total_bytes")
(PUNCT "+=")
(ID "n")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "total_bytes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fileno")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getheader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "headers")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ResponseNotReady")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "headers")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "get_all")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(KEYWORD or)
(ID "default")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "headers")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD or)
(KEYWORD not)
(ID "hasattr")
(PUNCT "(")
(ID "headers")
(PUNCT ",")
(LIT "__iter__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "headers")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getheaders")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return list of (header, value) tuples.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "headers")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ResponseNotReady")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__iter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "headers")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "geturl")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "url")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "status")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "HTTPConnection")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_http_vsn")
(PUNCT "=")
(LIT 11)
(NEWLINE)
(ID "_http_vsn_str")
(PUNCT "=")
(LIT "HTTP/1.1")
(NEWLINE)
(ID "response_class")
(PUNCT "=")
(ID "HTTPResponse")
(NEWLINE)
(ID "default_port")
(PUNCT "=")
(ID "HTTP_PORT")
(NEWLINE)
(ID "auto_open")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "debuglevel")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "mss")
(PUNCT "=")
(LIT 16384)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT "=")
(ID "source_address")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "=")
(ID "_CS_IDLE")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tunnel_port")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tunnel_headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_hostport")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_create_connection")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_tunnel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set up host and port for HTTP CONNECT tunnelling.\n\n        In a connection that uses HTTP CONNECT tunneling, the host passed to the\n        constructor is used as a proxy server that relays all communication to\n        the endpoint passed to `set_tunnel`. This done by sending an HTTP\n        CONNECT request to the proxy server when the connection is established.\n\n        This method must be called before the HTML connection has been\n        established.\n\n        The headers argument should be a mapping of extra HTTP headers to send\n        with the CONNECT request.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Can't set up tunnel for established connection")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_tunnel_port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_hostport")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "headers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tunnel_headers")
(PUNCT "=")
(ID "headers")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tunnel_headers")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_hostport")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "port")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "i")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(ID "j")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "rfind")
(PUNCT "(")
(LIT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">")
(ID "j")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "default_port")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidURL")
(PUNCT "(")
(LIT "nonnumeric port: '%s'")
(PUNCT "%")
(ID "host")
(PUNCT "[")
(ID "i")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "host")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "default_port")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "host")
(KEYWORD and)
(ID "host")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "[")
(KEYWORD and)
(ID "host")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "host")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_debuglevel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT "=")
(ID "level")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_tunnel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "connect_str")
(PUNCT "=")
(LIT "CONNECT %s:%d HTTP/1.0\r\n")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_tunnel_port")
(PUNCT ")")
(NEWLINE)
(ID "connect_bytes")
(PUNCT "=")
(ID "connect_str")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "connect_bytes")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "header")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_tunnel_headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header_str")
(PUNCT "=")
(LIT "%s: %s\r\n")
(PUNCT "%")
(PUNCT "(")
(ID "header")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "header_bytes")
(PUNCT "=")
(ID "header_str")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "header_bytes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ")")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "response_class")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "version")
(PUNCT ",")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(PUNCT "=")
(ID "response")
(PUNCT ".")
(ID "_read_status")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 200)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "Tunnel connection failed: %d %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "message")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "response")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "LineTooLong")
(PUNCT "(")
(LIT "header line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(KEYWORD in)
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ",")
(LIT #"\n")
(PUNCT ",")
(LIT #"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connect to the host and port specified in __init__.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "timeout")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tunnel")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the connection to the HTTP server.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "=")
(ID "_CS_IDLE")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sock")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "auto_open")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotConnected")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "send:")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "blocksize")
(PUNCT "=")
(LIT 8192)
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(LIT "read")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "sendIng a read()able")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "encode")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "mode")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "b")
(KEYWORD not)
(KEYWORD in)
(ID "mode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encode")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "encoding file using iso-8859-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "datablock")
(PUNCT "=")
(ID "data")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "blocksize")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "datablock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "encode")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "datablock")
(PUNCT "=")
(ID "datablock")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "iso-8859-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "datablock")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "collections")
(PUNCT ".")
(ID "Iterable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "d")
(KEYWORD in)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "sendall")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "data should be a bytes-like object ")
(LIT "or an iterable, got %r")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_output")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a line of output to the current request buffer.\n\n        Assumes that the line does *not* end with \\r\\n.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_send_output")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_body")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send the currently buffered request and clear the buffer.\n\n        Appends an extra \\r\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "(")
(LIT #"")
(PUNCT ",")
(LIT #"")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT #"\r\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_buffer")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "message_body")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "message_body")
(PUNCT ")")
(PUNCT "<")
(ID "self")
(PUNCT ".")
(ID "mss")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "+=")
(ID "message_body")
(NEWLINE)
(ID "message_body")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "message_body")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send")
(PUNCT "(")
(ID "message_body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "putrequest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "skip_host")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "skip_accept_encoding")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a request to the server.\n\n        `method' specifies an HTTP request method, e.g. 'GET'.\n        `url' specifies the object being requested, e.g. '/index.html'.\n        `skip_host' if True does not add automatically a 'Host:' header\n        `skip_accept_encoding' if True does not add automatically an\n           'Accept-Encoding:' header\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__response")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT ".")
(ID "isclosed")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "==")
(ID "_CS_IDLE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "=")
(ID "_CS_REQ_STARTED")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CannotSendRequest")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT "=")
(ID "method")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "url")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "url")
(PUNCT "=")
(LIT "/")
(NEWLINE)
(DEDENT)
(ID "request")
(PUNCT "=")
(LIT "%s %s %s")
(PUNCT "%")
(PUNCT "(")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_http_vsn_str")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_output")
(PUNCT "(")
(ID "request")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_http_vsn")
(PUNCT "==")
(LIT 11)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "skip_host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "netloc")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD if)
(ID "url")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "http")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nil")
(PUNCT ",")
(ID "netloc")
(PUNCT ",")
(ID "nil")
(PUNCT ",")
(ID "nil")
(PUNCT ",")
(ID "nil")
(PUNCT "=")
(ID "urlsplit")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "netloc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "netloc_enc")
(PUNCT "=")
(ID "netloc")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "netloc_enc")
(PUNCT "=")
(ID "netloc")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "idna")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(ID "netloc_enc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tunnel_port")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "port")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host_enc")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host_enc")
(PUNCT "=")
(ID "host")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "idna")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "host")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(PUNCT ">=")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host_enc")
(PUNCT "=")
(LIT #"[")
(PUNCT "+")
(ID "host_enc")
(PUNCT "+")
(LIT #"]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "port")
(PUNCT "==")
(ID "self")
(PUNCT ".")
(ID "default_port")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(ID "host_enc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "host_enc")
(PUNCT "=")
(ID "host_enc")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Host")
(PUNCT ",")
(LIT "%s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "host_enc")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "skip_accept_encoding")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Accept-Encoding")
(PUNCT ",")
(LIT "identity")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "putheader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header")
(PUNCT ",")
(PUNCT "*")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a request header line to the server.\n\n        For example: h.putheader('Accept', 'text/html')\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "!=")
(ID "_CS_REQ_STARTED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CannotSendHeader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "header")
(PUNCT ",")
(LIT "encode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "values")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "values")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "one_value")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "one_value")
(PUNCT ",")
(LIT "encode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "one_value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "latin-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "one_value")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "one_value")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "value")
(PUNCT "=")
(LIT #"\r\n\t")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "values")
(PUNCT ")")
(NEWLINE)
(ID "header")
(PUNCT "=")
(ID "header")
(PUNCT "+")
(LIT #": ")
(PUNCT "+")
(ID "value")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_output")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "endheaders")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_body")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Indicate that the last header line has been sent to the server.\n\n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.  The message body will be sent in the same packet as the\n        message headers if it is a string, otherwise it is sent as a separate\n        packet.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "==")
(ID "_CS_REQ_STARTED")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "=")
(ID "_CS_REQ_SENT")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "CannotSendHeader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_send_output")
(PUNCT "(")
(ID "message_body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "body")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "headers")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send a complete request to the server.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_send_request")
(PUNCT "(")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set_content_length")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "body")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thelen")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thelen")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(KEYWORD as)
(ID "te")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "thelen")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "fstat")
(PUNCT "(")
(ID "body")
(PUNCT ".")
(ID "fileno")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "st_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "Cannot stat!!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "thelen")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(LIT "Content-Length")
(PUNCT ",")
(ID "thelen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_send_request")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header_names")
(PUNCT "=")
(ID "dict")
(PUNCT ".")
(ID "fromkeys")
(PUNCT "(")
(PUNCT "[")
(ID "k")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(KEYWORD in)
(ID "headers")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "skips")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(LIT "host")
(KEYWORD in)
(ID "header_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skips")
(PUNCT "[")
(LIT "skip_host")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "accept-encoding")
(KEYWORD in)
(ID "header_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "skips")
(PUNCT "[")
(LIT "skip_accept_encoding")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "putrequest")
(PUNCT "(")
(ID "method")
(PUNCT ",")
(ID "url")
(PUNCT ",")
(PUNCT "**")
(ID "skips")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "body")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(PUNCT "(")
(LIT "content-length")
(KEYWORD not)
(KEYWORD in)
(ID "header_names")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_set_content_length")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "hdr")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "headers")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "putheader")
(PUNCT "(")
(ID "hdr")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "body")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "body")
(PUNCT "=")
(ID "body")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "iso-8859-1")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "endheaders")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getresponse")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the response from the server.\n\n        If the HTTPConnection is in the correct state, returns an\n        instance of HTTPResponse or of whatever object is returned by\n        class the response_class variable.\n\n        If a request has not been sent or if a previous response has\n        not be handled, ResponseNotReady is raised.  If the HTTP\n        response indicates that the connection should be closed, then\n        it will be closed before the response is returned.  When the\n        connection is closed, the underlying socket is closed.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__response")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT ".")
(ID "isclosed")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "!=")
(ID "_CS_REQ_SENT")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ResponseNotReady")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ">")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "response_class")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "debuglevel")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "response_class")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "method")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_method")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT ".")
(ID "begin")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(ID "response")
(PUNCT ".")
(ID "will_close")
(PUNCT "!=")
(ID "_UNKNOWN")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__state")
(PUNCT "=")
(ID "_CS_IDLE")
(NEWLINE)
(KEYWORD if)
(ID "response")
(PUNCT ".")
(ID "will_close")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__response")
(PUNCT "=")
(ID "response")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "response")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "response")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "HTTPSConnection")
(PUNCT "(")
(ID "HTTPConnection")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class allows communication via SSL.")
(NEWLINE)
(ID "default_port")
(PUNCT "=")
(ID "HTTPS_PORT")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "key_file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cert_file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ",")
(ID "source_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "check_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "super")
(PUNCT "(")
(ID "HTTPSConnection")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(ID "timeout")
(PUNCT ",")
(ID "source_address")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "key_file")
(PUNCT "=")
(ID "key_file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "cert_file")
(PUNCT "=")
(ID "cert_file")
(NEWLINE)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_default_https_context")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "will_verify")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "verify_mode")
(PUNCT "!=")
(ID "ssl")
(PUNCT ".")
(ID "CERT_NONE")
(NEWLINE)
(KEYWORD if)
(ID "check_hostname")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "check_hostname")
(PUNCT "=")
(ID "context")
(PUNCT ".")
(ID "check_hostname")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "check_hostname")
(KEYWORD and)
(KEYWORD not)
(ID "will_verify")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "check_hostname needs a SSL context with ")
(LIT "either CERT_OPTIONAL or CERT_REQUIRED")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "key_file")
(KEYWORD or)
(ID "cert_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT ".")
(ID "load_cert_chain")
(PUNCT "(")
(ID "cert_file")
(PUNCT ",")
(ID "key_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT "=")
(ID "context")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_check_hostname")
(PUNCT "=")
(ID "check_hostname")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Connect to a host on a given (SSL) port.")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "connect")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tunnel_host")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "server_hostname")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "host")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_context")
(PUNCT ".")
(ID "check_hostname")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_check_hostname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ssl")
(PUNCT ".")
(ID "match_hostname")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "getpeercert")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "server_hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "shutdown")
(PUNCT "(")
(ID "socket")
(PUNCT ".")
(ID "SHUT_RDWR")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "HTTPSConnection")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "HTTPException")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "NotConnected")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "InvalidURL")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "UnknownProtocol")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "version")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(ID "version")
(PUNCT ",")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(ID "version")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "UnknownTransferEncoding")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "UnimplementedFileMode")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "IncompleteRead")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "partial")
(PUNCT ",")
(ID "expected")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(ID "partial")
(PUNCT ",")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "partial")
(PUNCT "=")
(ID "partial")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "expected")
(PUNCT "=")
(ID "expected")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "expected")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT "=")
(LIT ", %i more expected")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "expected")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "IncompleteRead(%i bytes read%s)")
(PUNCT "%")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "partial")
(PUNCT ")")
(PUNCT ",")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "ImproperConnectionState")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CannotSendRequest")
(PUNCT "(")
(ID "ImproperConnectionState")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "CannotSendHeader")
(PUNCT "(")
(ID "ImproperConnectionState")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "ResponseNotReady")
(PUNCT "(")
(ID "ImproperConnectionState")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BadStatusLine")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "args")
(PUNCT "=")
(ID "line")
(PUNCT ",")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "line")
(PUNCT "=")
(ID "line")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LineTooLong")
(PUNCT "(")
(ID "HTTPException")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "HTTPException")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "got more than %d bytes when reading %s")
(PUNCT "%")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT ",")
(ID "line_type")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "error")
(PUNCT "=")
(ID "HTTPException")
(NEWLINE)
(ENDMARKER)
