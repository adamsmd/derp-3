(KEYWORD from)
(ID "tkinter")
(KEYWORD import)
(ID "TclError")
(NEWLINE)
(KEYWORD class)
(ID "WidgetRedirector")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Support for redirecting arbitrary widget subcommands.\n\n    Some Tk operations don't normally pass through tkinter.  For example, if a\n    character is inserted into a Text widget by pressing a key, a default Tk\n    binding to the widget's 'insert' operation is activated, and the Tk library\n    processes the insert without calling back into tkinter.\n\n    Although a binding to <Key> could be made via tkinter, what we really want\n    to do is to hook the Tk 'insert' operation itself.  For one thing, we want\n    a text.insert call in idle code to have the same effect as a key press.\n\n    When a widget is instantiated, a Tcl command is created whose name is the\n    same as the pathname widget._w.  This command is used to invoke the various\n    widget operations, e.g. insert (for a Text widget). We are going to hook\n    this command and provide a facility ('register') to intercept the widget\n    operation.  We will also intercept method calls on the tkinter class\n    instance that represents the tk widget.\n\n    In IDLE, WidgetRedirector is used in Percolator to intercept Text\n    commands.  The function being registered provides access to the top\n    of a Percolator chain.  At the bottom of the chain is a call to the\n    original Tk widget operation.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize attributes and setup redirection.\n\n        _operations: dict mapping operation name to new function.\n        widget: the widget whose tcl command is to be intercepted.\n        tk: widget.tk, a convenience attribute, probably not needed.\n        orig: new name of the original tcl command.\n\n        Since renaming to orig fails with TclError when orig already\n        exists, only one WidgetDirector can exist for a given widget.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT "=")
(ID "widget")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(ID "tk")
(PUNCT "=")
(ID "widget")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(ID "w")
(PUNCT "=")
(ID "widget")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "orig")
(PUNCT "=")
(ID "w")
(PUNCT "+")
(LIT "_orig")
(NEWLINE)
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "rename")
(PUNCT ",")
(ID "w")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "orig")
(PUNCT ")")
(NEWLINE)
(ID "tk")
(PUNCT ".")
(ID "createcommand")
(PUNCT "(")
(ID "w")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "dispatch")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "WidgetRedirector(%s<%s>)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unregister operations and revert redirection created by .__init__.")
(NEWLINE)
(KEYWORD for)
(ID "operation")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "unregister")
(PUNCT "(")
(ID "operation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "widget")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "widget")
(NEWLINE)
(ID "tk")
(PUNCT "=")
(ID "widget")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(ID "w")
(PUNCT "=")
(ID "widget")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "tk")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(NEWLINE)
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "rename")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "orig")
(PUNCT ",")
(ID "w")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "register")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "operation")
(PUNCT ",")
(ID "function")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return OriginalCommand(operation) after registering function.\n\n        Registration adds an operation: function pair to ._operations.\n        It also adds an widget function attribute that masks the tkinter\n        class instance method.  Method masking operates independently\n        from command dispatch.\n\n        If a second function is registered for the same operation, the\n        first function is replaced in both places.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT "[")
(ID "operation")
(PUNCT "]")
(PUNCT "=")
(ID "function")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ",")
(ID "operation")
(PUNCT ",")
(ID "function")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "OriginalCommand")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "operation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unregister")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "operation")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the function for the operation, or None.\n\n        Deleting the instance attribute unmasks the class attribute.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "operation")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "function")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT "[")
(ID "operation")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT "[")
(ID "operation")
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "delattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ",")
(ID "operation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "function")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "dispatch")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "operation")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Callback from Tcl which runs when the widget is referenced.\n\n        If an operation has been registered in self._operations, apply the\n        associated function to the args passed into Tcl. Otherwise, pass the\n        operation through to Tk via the original Tcl function.\n\n        Note that if a registered function is called, the operation is not\n        passed through to Tk.  Apply the function returned by self.register()\n        to *args to accomplish that.  For an example, see ColorDelegator.py.\n\n        ")
(NEWLINE)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_operations")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "operation")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "m")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "orig")
(PUNCT ",")
(ID "operation")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OriginalCommand")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Callable for original tk command that has been redirected.\n\n    Returned by .register; can be used in the function registered.\n    redir = WidgetRedirector(text)\n    def my_insert(*args):\n        print(\"insert\", args)\n        original_insert(*args)\n    original_insert = redir.register(\"insert\", my_insert)\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "redir")
(PUNCT ",")
(ID "operation")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create .tk_call and .orig_and_operation for .__call__ method.\n\n        .redir and .operation store the input args for __repr__.\n        .tk and .orig copy attributes of .redir (probably not needed).\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "redir")
(PUNCT "=")
(ID "redir")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "operation")
(PUNCT "=")
(ID "operation")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(ID "redir")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "orig")
(PUNCT "=")
(ID "redir")
(PUNCT ".")
(ID "orig")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk_call")
(PUNCT "=")
(ID "redir")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "orig_and_operation")
(PUNCT "=")
(PUNCT "(")
(ID "redir")
(PUNCT ".")
(ID "orig")
(PUNCT ",")
(ID "operation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "OriginalCommand(%r, %r)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "redir")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "operation")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk_call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "orig_and_operation")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_widget_redirector")
(PUNCT "(")
(ID "parent")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "tkinter")
(KEYWORD import)
(ID "Tk")
(PUNCT ",")
(ID "Text")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "Tk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(LIT "Test WidgetRedirector")
(PUNCT ")")
(NEWLINE)
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "[x+]")
(PUNCT ",")
(ID "parent")
(PUNCT ".")
(ID "geometry")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "geometry")
(PUNCT "(")
(LIT "+%d+%d")
(PUNCT "%")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "+")
(LIT 150)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "Text")
(PUNCT "(")
(ID "root")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT ".")
(ID "focus_set")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "redir")
(PUNCT "=")
(ID "WidgetRedirector")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "my_insert")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "original_insert")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "original_insert")
(PUNCT "=")
(ID "redir")
(PUNCT ".")
(ID "register")
(PUNCT "(")
(LIT "insert")
(PUNCT ",")
(ID "my_insert")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "unittest")
(NEWLINE)
(ID "unittest")
(PUNCT ".")
(ID "main")
(PUNCT "(")
(LIT "idlelib.idle_test.test_widgetredir")
(PUNCT ",")
(ID "verbosity")
(PUNCT "=")
(LIT 2)
(PUNCT ",")
(ID "exit")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD from)
(ID "idlelib")
(PUNCT ".")
(ID "idle_test")
(PUNCT ".")
(ID "htest")
(KEYWORD import)
(ID "run")
(NEWLINE)
(ID "run")
(PUNCT "(")
(ID "_widget_redirector")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
