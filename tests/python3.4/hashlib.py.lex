(ID "__doc__")
(PUNCT "=")
(LIT "hashlib module - A common interface to many hash functions.\n\nnew(name, data=b'') - returns a new hash object implementing the\n                      given hash function; initializing the hash\n                      using the given binary data.\n\nNamed constructor functions are also available, these are faster\nthan using new(name):\n\nmd5(), sha1(), sha224(), sha256(), sha384(), and sha512()\n\nMore algorithms may be available on your platform but the above are guaranteed\nto exist.  See the algorithms_guaranteed and algorithms_available attributes\nto find out what algorithm names can be passed to new().\n\nNOTE: If you want the adler32 or crc32 hash functions they are available in\nthe zlib module.\n\nChoose your hash function wisely.  Some have known collision weaknesses.\nsha384 and sha512 will be slow on 32 bit platforms.\n\nHash objects have these methods:\n - update(arg): Update the hash object with the bytes in arg. Repeated calls\n                are equivalent to a single call with the concatenation of all\n                the arguments.\n - digest():    Return the digest of the bytes passed to the update() method\n                so far.\n - hexdigest(): Like digest() except the digest is returned as a unicode\n                object of double length, containing only hexadecimal digits.\n - copy():      Return a copy (clone) of the hash object. This can be used to\n                efficiently compute the digests of strings that share a common\n                initial substring.\n\nFor example, to obtain the digest of the string 'Nobody inspects the\nspammish repetition':\n\n    >>> import hashlib\n    >>> m = hashlib.md5()\n    >>> m.update(b\"Nobody inspects\")\n    >>> m.update(b\" the spammish repetition\")\n    >>> m.digest()\n    b'\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9'\n\nMore condensed:\n\n    >>> hashlib.sha224(b\"Nobody inspects the spammish repetition\").hexdigest()\n    'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'\n\n")
(NEWLINE)
(ID "__always_supported")
(PUNCT "=")
(PUNCT "(")
(LIT "md5")
(PUNCT ",")
(LIT "sha1")
(PUNCT ",")
(LIT "sha224")
(PUNCT ",")
(LIT "sha256")
(PUNCT ",")
(LIT "sha384")
(PUNCT ",")
(LIT "sha512")
(PUNCT ")")
(NEWLINE)
(ID "algorithms_guaranteed")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "__always_supported")
(PUNCT ")")
(NEWLINE)
(ID "algorithms_available")
(PUNCT "=")
(ID "set")
(PUNCT "(")
(ID "__always_supported")
(PUNCT ")")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(ID "__always_supported")
(PUNCT "+")
(PUNCT "(")
(LIT "new")
(PUNCT ",")
(LIT "algorithms_guaranteed")
(PUNCT ",")
(LIT "algorithms_available")
(PUNCT ",")
(LIT "pbkdf2_hmac")
(PUNCT ")")
(NEWLINE)
(ID "__builtin_constructor_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "__get_builtin_constructor")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cache")
(PUNCT "=")
(ID "__builtin_constructor_cache")
(NEWLINE)
(ID "constructor")
(PUNCT "=")
(ID "cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "constructor")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "constructor")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "SHA1")
(PUNCT ",")
(LIT "sha1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_sha1")
(NEWLINE)
(ID "cache")
(PUNCT "[")
(LIT "SHA1")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(LIT "sha1")
(PUNCT "]")
(PUNCT "=")
(ID "_sha1")
(PUNCT ".")
(ID "sha1")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "MD5")
(PUNCT ",")
(LIT "md5")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_md5")
(NEWLINE)
(ID "cache")
(PUNCT "[")
(LIT "MD5")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(LIT "md5")
(PUNCT "]")
(PUNCT "=")
(ID "_md5")
(PUNCT ".")
(ID "md5")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "SHA256")
(PUNCT ",")
(LIT "sha256")
(PUNCT ",")
(LIT "SHA224")
(PUNCT ",")
(LIT "sha224")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_sha256")
(NEWLINE)
(ID "cache")
(PUNCT "[")
(LIT "SHA224")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(LIT "sha224")
(PUNCT "]")
(PUNCT "=")
(ID "_sha256")
(PUNCT ".")
(ID "sha224")
(NEWLINE)
(ID "cache")
(PUNCT "[")
(LIT "SHA256")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(LIT "sha256")
(PUNCT "]")
(PUNCT "=")
(ID "_sha256")
(PUNCT ".")
(ID "sha256")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "name")
(KEYWORD in)
(PUNCT "(")
(LIT "SHA512")
(PUNCT ",")
(LIT "sha512")
(PUNCT ",")
(LIT "SHA384")
(PUNCT ",")
(LIT "sha384")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_sha512")
(NEWLINE)
(ID "cache")
(PUNCT "[")
(LIT "SHA384")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(LIT "sha384")
(PUNCT "]")
(PUNCT "=")
(ID "_sha512")
(PUNCT ".")
(ID "sha384")
(NEWLINE)
(ID "cache")
(PUNCT "[")
(LIT "SHA512")
(PUNCT "]")
(PUNCT "=")
(ID "cache")
(PUNCT "[")
(LIT "sha512")
(PUNCT "]")
(PUNCT "=")
(ID "_sha512")
(PUNCT ".")
(ID "sha512")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "constructor")
(PUNCT "=")
(ID "cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "constructor")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "constructor")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unsupported hash type ")
(PUNCT "+")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__get_openssl_constructor")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "_hashlib")
(PUNCT ",")
(LIT "openssl_")
(PUNCT "+")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "f")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "__get_builtin_constructor")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__py_new")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(LIT #"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "new(name, data=b'') - Return a new hashing object using the named algorithm;\n    optionally initialized with data (which must be bytes).\n    ")
(NEWLINE)
(KEYWORD return)
(ID "__get_builtin_constructor")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash_new")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "data")
(PUNCT "=")
(LIT #"")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "new(name, data=b'') - Return a new hashing object using the named algorithm;\n    optionally initialized with data (which must be bytes).\n    ")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_hashlib")
(PUNCT ".")
(ID "new")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "__get_builtin_constructor")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_hashlib")
(NEWLINE)
(ID "new")
(PUNCT "=")
(ID "__hash_new")
(NEWLINE)
(ID "__get_hash")
(PUNCT "=")
(ID "__get_openssl_constructor")
(NEWLINE)
(ID "algorithms_available")
(PUNCT "=")
(ID "algorithms_available")
(PUNCT ".")
(ID "union")
(PUNCT "(")
(ID "_hashlib")
(PUNCT ".")
(ID "openssl_md_meth_names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new")
(PUNCT "=")
(ID "__py_new")
(NEWLINE)
(ID "__get_hash")
(PUNCT "=")
(ID "__get_builtin_constructor")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_hashlib")
(KEYWORD import)
(ID "pbkdf2_hmac")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_trans_5C")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT "^")
(LIT 92)
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_trans_36")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(PUNCT "(")
(ID "x")
(PUNCT "^")
(LIT 54)
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 256)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "pbkdf2_hmac")
(PUNCT "(")
(ID "hash_name")
(PUNCT ",")
(ID "password")
(PUNCT ",")
(ID "salt")
(PUNCT ",")
(ID "iterations")
(PUNCT ",")
(ID "dklen")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Password based key derivation function 2 (PKCS #5 v2.0)\n\n        This Python implementations based on the hmac module about as fast\n        as OpenSSL's PKCS5_PBKDF2_HMAC for short passwords and much faster\n        for long passwords.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "hash_name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "hash_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "password")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "password")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "memoryview")
(PUNCT "(")
(ID "password")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "salt")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "salt")
(PUNCT "=")
(ID "bytes")
(PUNCT "(")
(ID "memoryview")
(PUNCT "(")
(ID "salt")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "inner")
(PUNCT "=")
(ID "new")
(PUNCT "(")
(ID "hash_name")
(PUNCT ")")
(NEWLINE)
(ID "outer")
(PUNCT "=")
(ID "new")
(PUNCT "(")
(ID "hash_name")
(PUNCT ")")
(NEWLINE)
(ID "blocksize")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "inner")
(PUNCT ",")
(LIT "block_size")
(PUNCT ",")
(LIT 64)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "password")
(PUNCT ")")
(PUNCT ">")
(ID "blocksize")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "password")
(PUNCT "=")
(ID "new")
(PUNCT "(")
(ID "hash_name")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "password")
(PUNCT "=")
(ID "password")
(PUNCT "+")
(LIT #"\0")
(PUNCT "*")
(PUNCT "(")
(ID "blocksize")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "password")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "inner")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "password")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "_trans_36")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "outer")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "password")
(PUNCT ".")
(ID "translate")
(PUNCT "(")
(ID "_trans_5C")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "prf")
(PUNCT "(")
(ID "msg")
(PUNCT ",")
(ID "inner")
(PUNCT "=")
(ID "inner")
(PUNCT ",")
(ID "outer")
(PUNCT "=")
(ID "outer")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "icpy")
(PUNCT "=")
(ID "inner")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "ocpy")
(PUNCT "=")
(ID "outer")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "icpy")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(ID "ocpy")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "icpy")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ocpy")
(PUNCT ".")
(ID "digest")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "iterations")
(PUNCT "<")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "iterations")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dklen")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dklen")
(PUNCT "=")
(ID "outer")
(PUNCT ".")
(ID "digest_size")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "dklen")
(PUNCT "<")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(ID "dklen")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dkey")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "loop")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "from_bytes")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(NEWLINE)
(KEYWORD while)
(ID "len")
(PUNCT "(")
(ID "dkey")
(PUNCT ")")
(PUNCT "<")
(ID "dklen")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prev")
(PUNCT "=")
(ID "prf")
(PUNCT "(")
(ID "salt")
(PUNCT "+")
(ID "loop")
(PUNCT ".")
(ID "to_bytes")
(PUNCT "(")
(LIT 4)
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "rkey")
(PUNCT "=")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "prev")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "iterations")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prev")
(PUNCT "=")
(ID "prf")
(PUNCT "(")
(ID "prev")
(PUNCT ")")
(NEWLINE)
(ID "rkey")
(PUNCT "^=")
(ID "from_bytes")
(PUNCT "(")
(ID "prev")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "loop")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "dkey")
(PUNCT "+=")
(ID "rkey")
(PUNCT ".")
(ID "to_bytes")
(PUNCT "(")
(ID "inner")
(PUNCT ".")
(ID "digest_size")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dkey")
(PUNCT "[")
(PUNCT ":")
(ID "dklen")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "__func_name")
(KEYWORD in)
(ID "__always_supported")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(ID "__func_name")
(PUNCT "]")
(PUNCT "=")
(ID "__get_hash")
(PUNCT "(")
(ID "__func_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(ID "logging")
(PUNCT ".")
(ID "exception")
(PUNCT "(")
(LIT "code for hash %s was not found.")
(PUNCT ",")
(ID "__func_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "__always_supported")
(PUNCT ",")
(ID "__func_name")
(PUNCT ",")
(ID "__get_hash")
(NEWLINE)
(KEYWORD del)
(ID "__py_new")
(PUNCT ",")
(ID "__hash_new")
(PUNCT ",")
(ID "__get_openssl_constructor")
(NEWLINE)
(ENDMARKER)
