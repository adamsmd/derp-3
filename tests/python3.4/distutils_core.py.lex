(LIT "distutils.core\n\nThe only module that needs to be imported to use the Distutils; provides\nthe 'setup' function (which is to be called from the setup script).  Also\nindirectly provides the Distribution and Command classes, although they are\nreally defined in distutils.dist and distutils.cmd.\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "debug")
(KEYWORD import)
(ID "DEBUG")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "dist")
(KEYWORD import)
(ID "Distribution")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "cmd")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "config")
(KEYWORD import)
(ID "PyPIRCCommand")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "extension")
(KEYWORD import)
(ID "Extension")
(NEWLINE)
(ID "USAGE")
(PUNCT "=")
(LIT "usage: %(script)s [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n   or: %(script)s --help [cmd1 cmd2 ...]\n   or: %(script)s --help-commands\n   or: %(script)s cmd --help\n")
(NEWLINE)
(KEYWORD def)
(ID "gen_usage")
(PUNCT "(")
(ID "script_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "script")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "script_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "USAGE")
(PUNCT "%")
(ID "vars")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_setup_stop_after")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_setup_distribution")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "setup_keywords")
(PUNCT "=")
(PUNCT "(")
(LIT "distclass")
(PUNCT ",")
(LIT "script_name")
(PUNCT ",")
(LIT "script_args")
(PUNCT ",")
(LIT "options")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(LIT "version")
(PUNCT ",")
(LIT "author")
(PUNCT ",")
(LIT "author_email")
(PUNCT ",")
(LIT "maintainer")
(PUNCT ",")
(LIT "maintainer_email")
(PUNCT ",")
(LIT "url")
(PUNCT ",")
(LIT "license")
(PUNCT ",")
(LIT "description")
(PUNCT ",")
(LIT "long_description")
(PUNCT ",")
(LIT "keywords")
(PUNCT ",")
(LIT "platforms")
(PUNCT ",")
(LIT "classifiers")
(PUNCT ",")
(LIT "download_url")
(PUNCT ",")
(LIT "requires")
(PUNCT ",")
(LIT "provides")
(PUNCT ",")
(LIT "obsoletes")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(ID "extension_keywords")
(PUNCT "=")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "sources")
(PUNCT ",")
(LIT "include_dirs")
(PUNCT ",")
(LIT "define_macros")
(PUNCT ",")
(LIT "undef_macros")
(PUNCT ",")
(LIT "library_dirs")
(PUNCT ",")
(LIT "libraries")
(PUNCT ",")
(LIT "runtime_library_dirs")
(PUNCT ",")
(LIT "extra_objects")
(PUNCT ",")
(LIT "extra_compile_args")
(PUNCT ",")
(LIT "extra_link_args")
(PUNCT ",")
(LIT "swig_opts")
(PUNCT ",")
(LIT "export_symbols")
(PUNCT ",")
(LIT "depends")
(PUNCT ",")
(LIT "language")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "setup")
(PUNCT "(")
(PUNCT "**")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The gateway to the Distutils: do everything your setup script needs\n    to do, in a highly flexible and user-driven way.  Briefly: create a\n    Distribution instance; find and parse config files; parse the command\n    line; run each Distutils command found there, customized by the options\n    supplied to 'setup()' (as keyword arguments), in config files, and on\n    the command line.\n\n    The Distribution instance might be an instance of a class supplied via\n    the 'distclass' keyword argument to 'setup'; if no such class is\n    supplied, then the Distribution class (in dist.py) is instantiated.\n    All other arguments to 'setup' (except for 'cmdclass') are used to set\n    attributes of the Distribution instance.\n\n    The 'cmdclass' argument, if supplied, is a dictionary mapping command\n    names to command classes.  Each command encountered on the command line\n    will be turned into a command class, which is in turn instantiated; any\n    class found in 'cmdclass' is used in place of the default, which is\n    (for command 'foo_bar') class 'foo_bar' in module\n    'distutils.command.foo_bar'.  The command class must provide a\n    'user_options' attribute which is a list of option specifiers for\n    'distutils.fancy_getopt'.  Any command-line options between the current\n    and the next command are used to set attributes of the current command\n    object.\n\n    When the entire command-line has been successfully parsed, calls the\n    'run()' method on each command object in turn.  This method will be\n    driven entirely by the Distribution object (which each command object\n    has a reference to, thanks to its constructor), and the\n    command-specific options that became attributes of each command\n    object.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_setup_stop_after")
(PUNCT ",")
(ID "_setup_distribution")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "attrs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "distclass")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "klass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "attrs")
(PUNCT "[")
(LIT "distclass")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "Distribution")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "script_name")
(KEYWORD not)
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT "[")
(LIT "script_name")
(PUNCT "]")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "script_args")
(KEYWORD not)
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT "[")
(LIT "script_args")
(PUNCT "]")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_setup_distribution")
(PUNCT "=")
(ID "dist")
(PUNCT "=")
(ID "klass")
(PUNCT "(")
(ID "attrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsSetupError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "name")
(KEYWORD not)
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(LIT "error in setup command: %s")
(PUNCT "%")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(LIT "error in %s setup command: %s")
(PUNCT "%")
(PUNCT "(")
(ID "attrs")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_setup_stop_after")
(PUNCT "==")
(LIT "init")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dist")
(NEWLINE)
(DEDENT)
(ID "dist")
(PUNCT ".")
(ID "parse_config_files")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "options (after parsing config files):")
(PUNCT ")")
(NEWLINE)
(ID "dist")
(PUNCT ".")
(ID "dump_option_dicts")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_setup_stop_after")
(PUNCT "==")
(LIT "config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dist")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ok")
(PUNCT "=")
(ID "dist")
(PUNCT ".")
(ID "parse_command_line")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsArgError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(ID "gen_usage")
(PUNCT "(")
(ID "dist")
(PUNCT ".")
(ID "script_name")
(PUNCT ")")
(PUNCT "+")
(LIT "\nerror: %s")
(PUNCT "%")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "options (after parsing command line):")
(PUNCT ")")
(NEWLINE)
(ID "dist")
(PUNCT ".")
(ID "dump_option_dicts")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_setup_stop_after")
(PUNCT "==")
(LIT "commandline")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "dist")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "ok")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dist")
(PUNCT ".")
(ID "run_commands")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyboardInterrupt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(LIT "interrupted")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "error: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(LIT "error: %s")
(PUNCT "%")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "DistutilsError")
(PUNCT ",")
(ID "CCompilerError")
(PUNCT ")")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(LIT "error: ")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "dist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_setup")
(PUNCT "(")
(ID "script_name")
(PUNCT ",")
(ID "script_args")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "stop_after")
(PUNCT "=")
(LIT "run")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run a setup script in a somewhat controlled environment, and\n    return the Distribution instance that drives things.  This is useful\n    if you need to find out the distribution meta-data (passed as\n    keyword args from 'script' to 'setup()', or the contents of the\n    config files or command-line.\n\n    'script_name' is a file that will be read and run with 'exec()';\n    'sys.argv[0]' will be replaced with 'script' for the duration of the\n    call.  'script_args' is a list of strings; if supplied,\n    'sys.argv[1:]' will be replaced by 'script_args' for the duration of\n    the call.\n\n    'stop_after' tells 'setup()' when to stop processing; possible\n    values:\n      init\n        stop after the Distribution instance has been created and\n        populated with the keyword arguments to 'setup()'\n      config\n        stop after config files have been parsed (and their data\n        stored in the Distribution instance)\n      commandline\n        stop after the command-line ('sys.argv[1:]' or 'script_args')\n        have been parsed (and the data stored in the Distribution)\n      run [default]\n        stop after all commands have been run (the same as if 'setup()'\n        had been called in the usual way\n\n    Returns the Distribution instance, which provides all information\n    used to drive the Distutils.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "stop_after")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "init")
(PUNCT ",")
(LIT "config")
(PUNCT ",")
(LIT "commandline")
(PUNCT ",")
(LIT "run")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid value for 'stop_after': %r")
(PUNCT "%")
(PUNCT "(")
(ID "stop_after")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD global)
(ID "_setup_stop_after")
(PUNCT ",")
(ID "_setup_distribution")
(NEWLINE)
(ID "_setup_stop_after")
(PUNCT "=")
(ID "stop_after")
(NEWLINE)
(ID "save_argv")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(NEWLINE)
(ID "g")
(PUNCT "=")
(PUNCT "{")
(LIT "__file__")
(PUNCT ":")
(ID "script_name")
(PUNCT "}")
(NEWLINE)
(ID "l")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "script_name")
(NEWLINE)
(KEYWORD if)
(ID "script_args")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "=")
(ID "script_args")
(NEWLINE)
(DEDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "script_name")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "f")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "g")
(PUNCT ",")
(ID "l")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "=")
(ID "save_argv")
(NEWLINE)
(ID "_setup_stop_after")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "SystemExit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_setup_distribution")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(PUNCT "(")
(LIT "'distutils.core.setup()' was never called -- ")
(LIT "perhaps '%s' is not a Distutils setup script?")
(PUNCT ")")
(PUNCT "%")
(ID "script_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_setup_distribution")
(NEWLINE)
(DEDENT)
(ENDMARKER)
