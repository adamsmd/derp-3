(LIT "Loading unittests.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(KEYWORD import)
(ID "types")
(NEWLINE)
(KEYWORD import)
(ID "functools")
(NEWLINE)
(KEYWORD from)
(ID "fnmatch")
(KEYWORD import)
(ID "fnmatch")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "case")
(PUNCT ",")
(ID "suite")
(PUNCT ",")
(ID "util")
(NEWLINE)
(ID "__unittest")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "VALID_MODULE_NAME")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[_a-z]\\w*\\.py$")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "IGNORECASE")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_make_failed_import_test")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "message")
(PUNCT "=")
(LIT "Failed to import test module: %s\n%s")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "traceback")
(PUNCT ".")
(ID "format_exc")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "_make_failed_test")
(PUNCT "(")
(LIT "ModuleImportFailure")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "ImportError")
(PUNCT "(")
(ID "message")
(PUNCT ")")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_failed_load_tests")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_make_failed_test")
(PUNCT "(")
(LIT "LoadTestsFailure")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_failed_test")
(PUNCT "(")
(ID "classname")
(PUNCT ",")
(ID "methodname")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "testFailure")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "exception")
(NEWLINE)
(DEDENT)
(ID "attrs")
(PUNCT "=")
(PUNCT "{")
(ID "methodname")
(PUNCT ":")
(ID "testFailure")
(PUNCT "}")
(NEWLINE)
(ID "TestClass")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(ID "classname")
(PUNCT ",")
(PUNCT "(")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "suiteClass")
(PUNCT "(")
(PUNCT "(")
(ID "TestClass")
(PUNCT "(")
(ID "methodname")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_make_skipped_test")
(PUNCT "(")
(ID "methodname")
(PUNCT ",")
(ID "exception")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "@")
(ID "case")
(PUNCT ".")
(ID "skip")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "exception")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "testSkipped")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "attrs")
(PUNCT "=")
(PUNCT "{")
(ID "methodname")
(PUNCT ":")
(ID "testSkipped")
(PUNCT "}")
(NEWLINE)
(ID "TestClass")
(PUNCT "=")
(ID "type")
(PUNCT "(")
(LIT "ModuleSkipped")
(PUNCT ",")
(PUNCT "(")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "suiteClass")
(PUNCT "(")
(PUNCT "(")
(ID "TestClass")
(PUNCT "(")
(ID "methodname")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_jython_aware_splitext")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "path")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "$py.class")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "path")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 9)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "TestLoader")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    This class is responsible for loading tests according to various criteria\n    and returning them wrapped in a TestSuite\n    ")
(NEWLINE)
(ID "testMethodPrefix")
(PUNCT "=")
(LIT "test")
(NEWLINE)
(ID "sortTestMethodsUsing")
(PUNCT "=")
(ID "staticmethod")
(PUNCT "(")
(ID "util")
(PUNCT ".")
(ID "three_way_cmp")
(PUNCT ")")
(NEWLINE)
(ID "suiteClass")
(PUNCT "=")
(ID "suite")
(PUNCT ".")
(ID "TestSuite")
(NEWLINE)
(ID "_top_level_dir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "loadTestsFromTestCase")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "testCaseClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a suite of all tests cases contained in testCaseClass")
(NEWLINE)
(KEYWORD if)
(ID "issubclass")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ",")
(ID "suite")
(PUNCT ".")
(ID "TestSuite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Test cases should not be derived from ")
(LIT "TestSuite. Maybe you meant to derive from ")
(LIT "TestCase?")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "testCaseNames")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "getTestCaseNames")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "testCaseNames")
(KEYWORD and)
(ID "hasattr")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ",")
(LIT "runTest")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "testCaseNames")
(PUNCT "=")
(PUNCT "[")
(LIT "runTest")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "loaded_suite")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ",")
(ID "testCaseNames")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "loaded_suite")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "loadTestsFromModule")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module")
(PUNCT ",")
(ID "use_load_tests")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a suite of all tests cases contained in the given module")
(NEWLINE)
(ID "tests")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "dir")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "obj")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tests")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "loadTestsFromTestCase")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "load_tests")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "load_tests")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "tests")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "use_load_tests")
(KEYWORD and)
(ID "load_tests")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "load_tests")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tests")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_make_failed_load_tests")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "tests")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "loadTestsFromName")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "module")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a suite of all tests cases given a string specifier.\n\n        The name may resolve either to a module, a test case class, a\n        test method within a test case class, or a callable object which\n        returns a TestCase or TestSuite instance.\n\n        The method optionally resolves the names relative to a given module.\n        ")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "module")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts_copy")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(KEYWORD while)
(ID "parts_copy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "parts_copy")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "parts_copy")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "parts_copy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "parts")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "obj")
(PUNCT "=")
(ID "module")
(NEWLINE)
(KEYWORD for)
(ID "part")
(KEYWORD in)
(ID "parts")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parent")
(PUNCT ",")
(ID "obj")
(PUNCT "=")
(ID "obj")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "part")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "ModuleType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "loadTestsFromModule")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "loadTestsFromTestCase")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(PUNCT "(")
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "FunctionType")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "parent")
(PUNCT ",")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "parts")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "inst")
(PUNCT "=")
(ID "parent")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "inst")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ",")
(ID "types")
(PUNCT ".")
(ID "FunctionType")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "(")
(PUNCT "[")
(ID "inst")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "suite")
(PUNCT ".")
(ID "TestSuite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "obj")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "test")
(PUNCT "=")
(ID "obj")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "suite")
(PUNCT ".")
(ID "TestSuite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "test")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "test")
(PUNCT ",")
(ID "case")
(PUNCT ".")
(ID "TestCase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "(")
(PUNCT "[")
(ID "test")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "calling %s returned %s, not a test")
(PUNCT "%")
(PUNCT "(")
(ID "obj")
(PUNCT ",")
(ID "test")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "don't know how to make test from: %s")
(PUNCT "%")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "loadTestsFromNames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "names")
(PUNCT ",")
(ID "module")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a suite of all tests cases found using the given sequence\n        of string specifiers. See 'loadTestsFromName()'.\n        ")
(NEWLINE)
(ID "suites")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "loadTestsFromName")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "module")
(PUNCT ")")
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "names")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "(")
(ID "suites")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getTestCaseNames")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "testCaseClass")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a sorted sequence of method names found within testCaseClass\n        ")
(NEWLINE)
(KEYWORD def)
(ID "isTestMethod")
(PUNCT "(")
(ID "attrname")
(PUNCT ",")
(ID "testCaseClass")
(PUNCT "=")
(ID "testCaseClass")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "testMethodPrefix")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "attrname")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(KEYWORD and)
(ID "callable")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ",")
(ID "attrname")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "testFnNames")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "filter")
(PUNCT "(")
(ID "isTestMethod")
(PUNCT ",")
(ID "dir")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "sortTestMethodsUsing")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "testFnNames")
(PUNCT ".")
(ID "sort")
(PUNCT "(")
(ID "key")
(PUNCT "=")
(ID "functools")
(PUNCT ".")
(ID "cmp_to_key")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sortTestMethodsUsing")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "testFnNames")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "discover")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start_dir")
(PUNCT ",")
(ID "pattern")
(PUNCT "=")
(LIT "test*.py")
(PUNCT ",")
(ID "top_level_dir")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find and return all test modules from the specified start\n        directory, recursing into subdirectories to find them and return all\n        tests found within them. Only test files that match the pattern will\n        be loaded. (Using shell style pattern matching.)\n\n        All test modules must be importable from the top level of the project.\n        If the start directory is not the top level directory then the top\n        level directory must be specified separately.\n\n        If a test package name (directory with '__init__.py') matches the\n        pattern then the package will be checked for a 'load_tests' function. If\n        this exists then it will be called with loader, tests, pattern.\n\n        If load_tests exists then discovery does  *not* recurse into the package,\n        load_tests is responsible for loading all tests in the package.\n\n        The pattern is deliberately not stored as a loader attribute so that\n        packages can continue discovery themselves. top_level_dir is stored so\n        load_tests does not need to pass this argument in to loader.discover().\n\n        Paths are sorted before being imported to ensure reproducible execution\n        order even on filesystems with non-alphabetical ordering like ext3/4.\n        ")
(NEWLINE)
(ID "set_implicit_top")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "top_level_dir")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_top_level_dir")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "top_level_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_top_level_dir")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "top_level_dir")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "set_implicit_top")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "top_level_dir")
(PUNCT "=")
(ID "start_dir")
(NEWLINE)
(DEDENT)
(ID "top_level_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "top_level_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "top_level_dir")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "top_level_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_top_level_dir")
(PUNCT "=")
(ID "top_level_dir")
(NEWLINE)
(ID "is_not_importable")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "is_namespace")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "tests")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "start_dir")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "start_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "start_dir")
(PUNCT "!=")
(ID "top_level_dir")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_not_importable")
(PUNCT "=")
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "start_dir")
(PUNCT ",")
(LIT "__init__.py")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "start_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_not_importable")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "the_module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "start_dir")
(PUNCT "]")
(NEWLINE)
(ID "top_part")
(PUNCT "=")
(ID "start_dir")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(PUNCT "(")
(ID "the_module")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(ID "the_module")
(PUNCT ".")
(ID "__spec__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "spec")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "spec")
(KEYWORD and)
(ID "spec")
(PUNCT ".")
(ID "loader")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "spec")
(PUNCT ".")
(ID "submodule_search_locations")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_namespace")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD for)
(ID "path")
(KEYWORD in)
(ID "the_module")
(PUNCT ".")
(ID "__path__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "set_implicit_top")
(KEYWORD and)
(KEYWORD not)
(ID "path")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "top_level_dir")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_top_level_dir")
(PUNCT "=")
(PUNCT "(")
(ID "path")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "the_module")
(PUNCT ".")
(ID "__name__")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ".")
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "tests")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_find_tests")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "namespace")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "the_module")
(PUNCT ".")
(ID "__name__")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "builtin_module_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "Can not use builtin modules ")
(LIT "as dotted module names")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "don't know how to discover from {!r}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "the_module")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "set_implicit_top")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_namespace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_top_level_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_directory_containing_module")
(PUNCT "(")
(ID "top_part")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "top_level_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "top_level_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "is_not_importable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(LIT "Start directory is not importable: %r")
(PUNCT "%")
(ID "start_dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_namespace")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tests")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_find_tests")
(PUNCT "(")
(ID "start_dir")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "(")
(ID "tests")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_directory_containing_module")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "module_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "module_name")
(PUNCT "]")
(NEWLINE)
(ID "full_path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "module")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "__init__.py")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_name_from_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "path")
(PUNCT "=")
(ID "_jython_aware_splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "normpath")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "_relpath")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "relpath")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_top_level_dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isabs")
(PUNCT "(")
(ID "_relpath")
(PUNCT ")")
(PUNCT ",")
(LIT "Path must be within the project")
(NEWLINE)
(KEYWORD assert)
(KEYWORD not)
(ID "_relpath")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "..")
(PUNCT ")")
(PUNCT ",")
(LIT "Path must be within the project")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "_relpath")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "sep")
(PUNCT ",")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_module_from_name")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_match_path")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(ID "full_path")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "fnmatch")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_find_tests")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start_dir")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "namespace")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Used by discovery. Yields test suites it loads.")
(NEWLINE)
(ID "paths")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "listdir")
(PUNCT "(")
(ID "start_dir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "path")
(KEYWORD in)
(ID "paths")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "full_path")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "start_dir")
(PUNCT ",")
(ID "path")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "VALID_MODULE_NAME")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_match_path")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "full_path")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_name_from_path")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_module_from_name")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "case")
(PUNCT ".")
(ID "SkipTest")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_make_skipped_test")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_make_failed_import_test")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mod_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "abspath")
(PUNCT "(")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(LIT "__file__")
(PUNCT ",")
(ID "full_path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "realpath")
(PUNCT "=")
(ID "_jython_aware_splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "realpath")
(PUNCT "(")
(ID "mod_file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fullpath_noext")
(PUNCT "=")
(ID "_jython_aware_splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "realpath")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "realpath")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "fullpath_noext")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "realpath")
(PUNCT ")")
(NEWLINE)
(ID "mod_name")
(PUNCT "=")
(ID "_jython_aware_splitext")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "expected_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(PUNCT "(")
(LIT "%r module incorrectly imported from %r. Expected %r. ")
(LIT "Is this module globally installed?")
(PUNCT ")")
(NEWLINE)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "msg")
(PUNCT "%")
(PUNCT "(")
(ID "mod_name")
(PUNCT ",")
(ID "module_dir")
(PUNCT ",")
(ID "expected_dir")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(ID "self")
(PUNCT ".")
(ID "loadTestsFromModule")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isdir")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(KEYWORD not)
(ID "namespace")
(KEYWORD and)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "full_path")
(PUNCT ",")
(LIT "__init__.py")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "load_tests")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "tests")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "fnmatch")
(PUNCT "(")
(ID "path")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_name_from_path")
(PUNCT "(")
(ID "full_path")
(PUNCT ")")
(NEWLINE)
(ID "package")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_module_from_name")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "load_tests")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "package")
(PUNCT ",")
(LIT "load_tests")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(ID "tests")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "loadTestsFromModule")
(PUNCT "(")
(ID "package")
(PUNCT ",")
(ID "use_load_tests")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "load_tests")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "tests")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "tests")
(NEWLINE)
(DEDENT)
(KEYWORD yield)
(KEYWORD from)
(ID "self")
(PUNCT ".")
(ID "_find_tests")
(PUNCT "(")
(ID "full_path")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "namespace")
(PUNCT "=")
(ID "namespace")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "load_tests")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tests")
(PUNCT ",")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "_make_failed_load_tests")
(PUNCT "(")
(ID "package")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "e")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "suiteClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "defaultTestLoader")
(PUNCT "=")
(ID "TestLoader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_makeLoader")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "sortUsing")
(PUNCT ",")
(ID "suiteClass")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT "=")
(ID "TestLoader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "loader")
(PUNCT ".")
(ID "sortTestMethodsUsing")
(PUNCT "=")
(ID "sortUsing")
(NEWLINE)
(ID "loader")
(PUNCT ".")
(ID "testMethodPrefix")
(PUNCT "=")
(ID "prefix")
(NEWLINE)
(KEYWORD if)
(ID "suiteClass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "loader")
(PUNCT ".")
(ID "suiteClass")
(PUNCT "=")
(ID "suiteClass")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "loader")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getTestCaseNames")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ",")
(ID "prefix")
(PUNCT ",")
(ID "sortUsing")
(PUNCT "=")
(ID "util")
(PUNCT ".")
(ID "three_way_cmp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_makeLoader")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "sortUsing")
(PUNCT ")")
(PUNCT ".")
(ID "getTestCaseNames")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "makeSuite")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(LIT "test")
(PUNCT ",")
(ID "sortUsing")
(PUNCT "=")
(ID "util")
(PUNCT ".")
(ID "three_way_cmp")
(PUNCT ",")
(ID "suiteClass")
(PUNCT "=")
(ID "suite")
(PUNCT ".")
(ID "TestSuite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_makeLoader")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "sortUsing")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(PUNCT ".")
(ID "loadTestsFromTestCase")
(PUNCT "(")
(ID "testCaseClass")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "findTestCases")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "prefix")
(PUNCT "=")
(LIT "test")
(PUNCT ",")
(ID "sortUsing")
(PUNCT "=")
(ID "util")
(PUNCT ".")
(ID "three_way_cmp")
(PUNCT ",")
(ID "suiteClass")
(PUNCT "=")
(ID "suite")
(PUNCT ".")
(ID "TestSuite")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_makeLoader")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "sortUsing")
(PUNCT ",")
(ID "suiteClass")
(PUNCT ")")
(PUNCT ".")
(ID "loadTestsFromModule")
(PUNCT "(")
(ID "module")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
