(LIT "An NNTP client class based on:\n- RFC 977: Network News Transfer Protocol\n- RFC 2980: Common NNTP Extensions\n- RFC 3977: Network News Transfer Protocol (version 2)\n\nExample:\n\n>>> from nntplib import NNTP\n>>> s = NNTP('news')\n>>> resp, count, first, last, name = s.group('comp.lang.python')\n>>> print('Group', name, 'has', count, 'articles, range', first, 'to', last)\nGroup comp.lang.python has 51 articles, range 5770 to 5821\n>>> resp, subs = s.xhdr('subject', '{0}-{1}'.format(first, last))\n>>> resp = s.quit()\n>>>\n\nHere 'resp' is the server response line.\nError responses are turned into exceptions.\n\nTo post an article from a file:\n>>> f = open(filename, 'rb') # file containing article, including header\n>>> resp = s.post(f)\n>>>\n\nFor descriptions of all methods, read the comments in the code below.\nNote that all arguments and return values representing article numbers\nare strings, not numbers, since they are rarely used for calculations.\n")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "collections")
(NEWLINE)
(KEYWORD import)
(ID "datetime")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "ssl")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_have_ssl")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_have_ssl")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "email")
(PUNCT ".")
(ID "header")
(KEYWORD import)
(ID "decode_header")
(KEYWORD as)
(ID "_email_decode_header")
(NEWLINE)
(KEYWORD from)
(ID "socket")
(KEYWORD import)
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "NNTP")
(PUNCT ",")
(LIT "NNTPError")
(PUNCT ",")
(LIT "NNTPReplyError")
(PUNCT ",")
(LIT "NNTPTemporaryError")
(PUNCT ",")
(LIT "NNTPPermanentError")
(PUNCT ",")
(LIT "NNTPProtocolError")
(PUNCT ",")
(LIT "NNTPDataError")
(PUNCT ",")
(LIT "decode_header")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "_MAXLINE")
(PUNCT "=")
(LIT 2048)
(NEWLINE)
(KEYWORD class)
(ID "NNTPError")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for all nntplib exceptions")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Exception")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "response")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "response")
(PUNCT "=")
(LIT "No response given")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "NNTPError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unexpected [123]xx reply")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "NNTPTemporaryError")
(PUNCT "(")
(ID "NNTPError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "4xx errors")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "NNTPPermanentError")
(PUNCT "(")
(ID "NNTPError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "5xx errors")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "NNTPProtocolError")
(PUNCT "(")
(ID "NNTPError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Response does not begin with [1-5]")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "NNTPDataError")
(PUNCT "(")
(ID "NNTPError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Error in response data")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "NNTP_PORT")
(PUNCT "=")
(LIT 119)
(NEWLINE)
(ID "NNTP_SSL_PORT")
(PUNCT "=")
(LIT 563)
(NEWLINE)
(ID "_LONGRESP")
(PUNCT "=")
(PUNCT "{")
(LIT "100")
(PUNCT ",")
(LIT "101")
(PUNCT ",")
(LIT "211")
(PUNCT ",")
(LIT "215")
(PUNCT ",")
(LIT "220")
(PUNCT ",")
(LIT "221")
(PUNCT ",")
(LIT "222")
(PUNCT ",")
(LIT "224")
(PUNCT ",")
(LIT "225")
(PUNCT ",")
(LIT "230")
(PUNCT ",")
(LIT "231")
(PUNCT ",")
(LIT "282")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_DEFAULT_OVERVIEW_FMT")
(PUNCT "=")
(PUNCT "[")
(LIT "subject")
(PUNCT ",")
(LIT "from")
(PUNCT ",")
(LIT "date")
(PUNCT ",")
(LIT "message-id")
(PUNCT ",")
(LIT "references")
(PUNCT ",")
(LIT ":bytes")
(PUNCT ",")
(LIT ":lines")
(PUNCT "]")
(NEWLINE)
(ID "_OVERVIEW_FMT_ALTERNATIVES")
(PUNCT "=")
(PUNCT "{")
(LIT "bytes")
(PUNCT ":")
(LIT ":bytes")
(PUNCT ",")
(LIT "lines")
(PUNCT ":")
(LIT ":lines")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(ID "_CRLF")
(PUNCT "=")
(LIT #"\r\n")
(NEWLINE)
(ID "GroupInfo")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "namedtuple")
(PUNCT "(")
(LIT "GroupInfo")
(PUNCT ",")
(PUNCT "[")
(LIT "group")
(PUNCT ",")
(LIT "last")
(PUNCT ",")
(LIT "first")
(PUNCT ",")
(LIT "flag")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "ArticleInfo")
(PUNCT "=")
(ID "collections")
(PUNCT ".")
(ID "namedtuple")
(PUNCT "(")
(LIT "ArticleInfo")
(PUNCT ",")
(PUNCT "[")
(LIT "number")
(PUNCT ",")
(LIT "message_id")
(PUNCT ",")
(LIT "lines")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "decode_header")
(PUNCT "(")
(ID "header_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Takes an unicode string representing a munged header value\n    and decodes it as a (possibly non-ASCII) readable value.")
(NEWLINE)
(ID "parts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "v")
(PUNCT ",")
(ID "enc")
(KEYWORD in)
(ID "_email_decode_header")
(PUNCT "(")
(ID "header_str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "v")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "enc")
(KEYWORD or)
(LIT "ascii")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parts")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "parts")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_overview_fmt")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a list of string representing the response to LIST OVERVIEW.FMT\n    and return a list of header/metadata names.\n    Raises NNTPDataError if the response is not compliant\n    (cf. RFC 3977, section 8.4).")
(NEWLINE)
(ID "fmt")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT ":")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT ":")
(PUNCT "+")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "_")
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "partition")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "_OVERVIEW_FMT_ALTERNATIVES")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(ID "fmt")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "defaults")
(PUNCT "=")
(ID "_DEFAULT_OVERVIEW_FMT")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "fmt")
(PUNCT ")")
(PUNCT "<")
(ID "len")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPDataError")
(PUNCT "(")
(LIT "LIST OVERVIEW.FMT response too short")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "fmt")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "defaults")
(PUNCT ")")
(PUNCT "]")
(PUNCT "!=")
(ID "defaults")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPDataError")
(PUNCT "(")
(LIT "LIST OVERVIEW.FMT redefines default fields")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "fmt")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_overview")
(PUNCT "(")
(ID "lines")
(PUNCT ",")
(ID "fmt")
(PUNCT ",")
(ID "data_process_func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the response to a OVER or XOVER command according to the\n    overview format `fmt`.")
(NEWLINE)
(ID "n_defaults")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "_DEFAULT_OVERVIEW_FMT")
(PUNCT ")")
(NEWLINE)
(ID "overview")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fields")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "article_number")
(PUNCT ",")
(PUNCT "*")
(ID "tokens")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\t")
(PUNCT ")")
(NEWLINE)
(ID "article_number")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "article_number")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(PUNCT ",")
(ID "token")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "tokens")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(ID "len")
(PUNCT "(")
(ID "fmt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(ID "field_name")
(PUNCT "=")
(ID "fmt")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(NEWLINE)
(ID "is_metadata")
(PUNCT "=")
(ID "field_name")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT ">=")
(ID "n_defaults")
(KEYWORD and)
(KEYWORD not)
(ID "is_metadata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "h")
(PUNCT "=")
(ID "field_name")
(PUNCT "+")
(LIT ": ")
(NEWLINE)
(KEYWORD if)
(ID "token")
(KEYWORD and)
(ID "token")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "h")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPDataError")
(PUNCT "(")
(LIT "OVER/XOVER response doesn't include ")
(LIT "names of additional headers")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "token")
(PUNCT "=")
(ID "token")
(PUNCT "[")
(ID "len")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(KEYWORD if)
(ID "token")
(KEYWORD else)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "fields")
(PUNCT "[")
(ID "fmt")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(ID "token")
(NEWLINE)
(DEDENT)
(ID "overview")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "article_number")
(PUNCT ",")
(ID "fields")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "overview")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_datetime")
(PUNCT "(")
(ID "date_str")
(PUNCT ",")
(ID "time_str")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a pair of (date, time) strings, and return a datetime object.\n    If only the date is given, it is assumed to be date and time\n    concatenated together (e.g. response to the DATE command).\n    ")
(NEWLINE)
(KEYWORD if)
(ID "time_str")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time_str")
(PUNCT "=")
(ID "date_str")
(PUNCT "[")
(PUNCT "-")
(LIT 6)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "date_str")
(PUNCT "=")
(ID "date_str")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 6)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "hours")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time_str")
(PUNCT "[")
(PUNCT ":")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "minutes")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time_str")
(PUNCT "[")
(LIT 2)
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "seconds")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "time_str")
(PUNCT "[")
(LIT 4)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "year")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "date_str")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 4)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "month")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "date_str")
(PUNCT "[")
(PUNCT "-")
(LIT 4)
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "day")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "date_str")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "year")
(PUNCT "<")
(LIT 70)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "+=")
(LIT 2000)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "year")
(PUNCT "<")
(LIT 100)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "+=")
(LIT 1900)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hours")
(PUNCT ",")
(ID "minutes")
(PUNCT ",")
(ID "seconds")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_unparse_datetime")
(PUNCT "(")
(ID "dt")
(PUNCT ",")
(ID "legacy")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format a date or datetime object as a pair of (date, time) strings\n    in the format required by the NEWNEWS and NEWGROUPS commands.  If a\n    date object is passed, the time is assumed to be midnight (00h00).\n\n    The returned representation depends on the legacy flag:\n    * if legacy is False (the default):\n      date has the YYYYMMDD format and time the HHMMSS format\n    * if legacy is True:\n      date has the YYMMDD format and time the HHMMSS format.\n    RFC 3977 compliant servers should understand both formats; therefore,\n    legacy is only needed when talking to old servers.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "dt")
(PUNCT ",")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time_str")
(PUNCT "=")
(LIT "000000")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time_str")
(PUNCT "=")
(LIT "{0.hour:02d}{0.minute:02d}{0.second:02d}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "dt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "y")
(PUNCT "=")
(ID "dt")
(PUNCT ".")
(ID "year")
(NEWLINE)
(KEYWORD if)
(ID "legacy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "y")
(PUNCT "=")
(ID "y")
(PUNCT "%")
(LIT 100)
(NEWLINE)
(ID "date_str")
(PUNCT "=")
(LIT "{0:02d}{1.month:02d}{1.day:02d}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "y")
(PUNCT ",")
(ID "dt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "date_str")
(PUNCT "=")
(LIT "{0:04d}{1.month:02d}{1.day:02d}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "y")
(PUNCT ",")
(ID "dt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "date_str")
(PUNCT ",")
(ID "time_str")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_encrypt_on")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "context")
(PUNCT ",")
(ID "hostname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wrap a socket in SSL/TLS. Arguments:\n        - sock: Socket to wrap\n        - context: SSL context to use for the encrypted connection\n        Returns:\n        - sock: New, encrypted socket.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "context")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "=")
(ID "ssl")
(PUNCT ".")
(ID "_create_stdlib_context")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "context")
(PUNCT ".")
(ID "wrap_socket")
(PUNCT "(")
(ID "sock")
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(ID "hostname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_NNTPBase")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(LIT "utf-8")
(NEWLINE)
(ID "errors")
(PUNCT "=")
(LIT "surrogateescape")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "readermode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize an instance.  Arguments:\n        - file: file-like object (open for read/write in binary mode)\n        - host: hostname of the server\n        - readermode: if true, send 'mode reader' command after\n                      connecting.\n        - timeout: timeout (in seconds) used for socket connections\n\n        readermode is sometimes necessary if you are connecting to an\n        NNTP server on the local machine and intend to call\n        reader-specific commands, such as `group'.  If you get\n        unexpected NNTPPermanentErrors, you might need to set\n        readermode.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "getcapabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "readermode_afterauth")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "readermode")
(KEYWORD and)
(LIT "READER")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_setreadermode")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "readermode_afterauth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "getcapabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tls_on")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "authenticated")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_connected")
(PUNCT "=")
(KEYWORD lambda)
(PUNCT ":")
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "is_connected")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "EOFError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "is_connected")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getwelcome")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the welcome message from the server\n        (this is read and squirreled away by __init__()).\n        If the response code is 200, posting is allowed;\n        if it 201, posting is not allowed.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "*welcome*")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "welcome")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcapabilities")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the server capabilities, as read by __init__().\n        If the CAPABILITIES command is not supported, an empty dict is\n        returned.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_caps")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "nntp_version")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "nntp_implementation")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT ",")
(ID "caps")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "capabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "NNTPPermanentError")
(PUNCT ",")
(ID "NNTPTemporaryError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(ID "caps")
(NEWLINE)
(KEYWORD if)
(LIT "VERSION")
(KEYWORD in)
(ID "caps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "nntp_version")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "int")
(PUNCT ",")
(ID "caps")
(PUNCT "[")
(LIT "VERSION")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "IMPLEMENTATION")
(KEYWORD in)
(ID "caps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "nntp_implementation")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "caps")
(PUNCT "[")
(LIT "IMPLEMENTATION")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_caps")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_debuglevel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "level")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the debugging level.  Argument 'level' means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT "=")
(ID "level")
(NEWLINE)
(DEDENT)
(ID "debug")
(PUNCT "=")
(ID "set_debuglevel")
(NEWLINE)
(KEYWORD def)
(ID "_putline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: send one line to the server, appending CRLF.\n        The `line` must be a bytes-like object.")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "+")
(ID "_CRLF")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "*put*")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_putcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: send one command to the server (through _putline()).\n        The `line` must be an unicode string.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "*cmd*")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_putline")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getline")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "strip_crlf")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: return one line from the server, stripping _CRLF.\n        Raise EOFError if the connection is closed.\n        Returns a bytes object.")
(NEWLINE)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "readline")
(PUNCT "(")
(ID "_MAXLINE")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ">")
(ID "_MAXLINE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPDataError")
(PUNCT "(")
(LIT "line too long")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "*get*")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ":")
(KEYWORD raise)
(ID "EOFError")
(NEWLINE)
(KEYWORD if)
(ID "strip_crlf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(ID "_CRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "line")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(KEYWORD in)
(ID "_CRLF")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getresp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: get a response from the server.\n        Raise various errors if the response indicates an error.\n        Returns an unicode string.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "debugging")
(PUNCT ":")
(ID "print")
(PUNCT "(")
(LIT "*resp*")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(NEWLINE)
(ID "c")
(PUNCT "=")
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "4")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPTemporaryError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c")
(PUNCT "==")
(LIT "5")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPPermanentError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "c")
(KEYWORD not)
(KEYWORD in)
(LIT "123")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPProtocolError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getlongresp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: get a response plus following text from the server.\n        Raise various errors if the response indicates an error.\n\n        Returns a (response, lines) tuple where `response` is an unicode\n        string and `lines` is a list of bytes objects.\n        If `file` is a file-like object, it must be open in binary mode.\n        ")
(NEWLINE)
(ID "openedFile")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "openedFile")
(PUNCT "=")
(ID "file")
(PUNCT "=")
(ID "open")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT "[")
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(KEYWORD not)
(KEYWORD in)
(ID "_LONGRESP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "file")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "terminators")
(PUNCT "=")
(PUNCT "(")
(LIT #".")
(PUNCT "+")
(ID "_CRLF")
(PUNCT ",")
(LIT #".\n")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getline")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(KEYWORD in)
(ID "terminators")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT #"..")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "terminator")
(PUNCT "=")
(LIT #".")
(NEWLINE)
(KEYWORD while)
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getline")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "line")
(PUNCT "==")
(ID "terminator")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT #"..")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "openedFile")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "openedFile")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "lines")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_shortcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: send a command and get the response.\n        Same return value as _getresp().")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_putcmd")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_longcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: send a command and get the response plus following text.\n        Same return value as _getlongresp().")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_putcmd")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getlongresp")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_longcmdstring")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: send a command and get the response plus following text.\n        Same as _longcmd() and _getlongresp(), except that the returned `lines`\n        are unicode strings rather than bytes objects.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_putcmd")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "list")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getlongresp")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(PUNCT "[")
(ID "line")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "encoding")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "errors")
(PUNCT ")")
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "list")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getoverviewfmt")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: get the overview format. Queries the server if not\n        already done, else returns the cached value.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_cachedoverviewfmt")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "LIST OVERVIEW.FMT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NNTPPermanentError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(ID "_DEFAULT_OVERVIEW_FMT")
(PUNCT "[")
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "fmt")
(PUNCT "=")
(ID "_parse_overview_fmt")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_cachedoverviewfmt")
(PUNCT "=")
(ID "fmt")
(NEWLINE)
(KEYWORD return)
(ID "fmt")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_grouplist")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "lines")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "GroupInfo")
(PUNCT "(")
(PUNCT "*")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "capabilities")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a CAPABILITIES command.  Not supported by all servers.\n        Return:\n        - resp: server response if successful\n        - caps: a dictionary mapping capability names to lists of tokens\n        (for example {'VERSION': ['2'], 'OVER': [], LIST: ['ACTIVE', 'HEADERS'] })\n        ")
(NEWLINE)
(ID "caps")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "CAPABILITIES")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(PUNCT "*")
(ID "tokens")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "caps")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "tokens")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "caps")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "newgroups")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "date")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a NEWGROUPS command.  Arguments:\n        - date: a date or datetime object\n        Return:\n        - resp: server response if successful\n        - list: list of newsgroup names\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "date")
(PUNCT ",")
(PUNCT "(")
(ID "datetime")
(PUNCT ".")
(ID "date")
(PUNCT ",")
(ID "datetime")
(PUNCT ".")
(ID "date")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "the date parameter must be a date or datetime object, ")
(LIT "not '{:40}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "date")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "date_str")
(PUNCT ",")
(ID "time_str")
(PUNCT "=")
(ID "_unparse_datetime")
(PUNCT "(")
(ID "date")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "nntp_version")
(PUNCT "<")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "NEWGROUPS {0} {1}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "date_str")
(PUNCT ",")
(ID "time_str")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_grouplist")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "newnews")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group")
(PUNCT ",")
(ID "date")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a NEWNEWS command.  Arguments:\n        - group: group name or '*'\n        - date: a date or datetime object\n        Return:\n        - resp: server response if successful\n        - list: list of message ids\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "date")
(PUNCT ",")
(PUNCT "(")
(ID "datetime")
(PUNCT ".")
(ID "date")
(PUNCT ",")
(ID "datetime")
(PUNCT ".")
(ID "date")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "the date parameter must be a date or datetime object, ")
(LIT "not '{:40}'")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "date")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "date_str")
(PUNCT ",")
(ID "time_str")
(PUNCT "=")
(ID "_unparse_datetime")
(PUNCT "(")
(ID "date")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "nntp_version")
(PUNCT "<")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "NEWNEWS {0} {1} {2}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "group")
(PUNCT ",")
(ID "date_str")
(PUNCT ",")
(ID "time_str")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group_pattern")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a LIST or LIST ACTIVE command. Arguments:\n        - group_pattern: a pattern indicating which groups to query\n        - file: Filename string or file object to store the result in\n        Returns:\n        - resp: server response if successful\n        - list: list of (group, last, first, flag) (strings)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "group_pattern")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT "=")
(LIT "LIST ACTIVE ")
(PUNCT "+")
(ID "group_pattern")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT "=")
(LIT "LIST")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_grouplist")
(PUNCT "(")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getdescriptions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group_pattern")
(PUNCT ",")
(ID "return_all")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line_pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^(?P<group>[^ \t]+)[ \t]+(.*)$")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "LIST NEWSGROUPS ")
(PUNCT "+")
(ID "group_pattern")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "215")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "XGTITLE ")
(PUNCT "+")
(ID "group_pattern")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "groups")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "raw_line")
(KEYWORD in)
(ID "lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "line_pat")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "raw_line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT ",")
(ID "desc")
(PUNCT "=")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "return_all")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "desc")
(NEWLINE)
(DEDENT)
(ID "groups")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(ID "desc")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "return_all")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "groups")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "description")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a description for a single group.  If more than one\n        group matches ('group' is a pattern), return the first.  If no\n        group matches, return an empty string.\n\n        This elides the response code from the server, since it can\n        only be '215' or '285' (for xgtitle) anyway.  If the response\n        code is needed, use the 'descriptions' method.\n\n        NOTE: This neither checks for a wildcard in 'group' nor does\n        it check whether the group actually exists.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getdescriptions")
(PUNCT "(")
(ID "group")
(PUNCT ",")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "descriptions")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group_pattern")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get descriptions for a range of groups.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getdescriptions")
(PUNCT "(")
(ID "group_pattern")
(PUNCT ",")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "group")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a GROUP command.  Argument:\n        - group: the group name\n        Returns:\n        - resp: server response if successful\n        - count: number of articles\n        - first: first article number\n        - last: last article number\n        - name: the group name\n        ")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "GROUP ")
(PUNCT "+")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "211")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "words")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "count")
(PUNCT "=")
(ID "first")
(PUNCT "=")
(ID "last")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "n")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "words")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "count")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "last")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "n")
(PUNCT ">")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 4)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "first")
(PUNCT ")")
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "last")
(PUNCT ")")
(PUNCT ",")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a HELP command. Argument:\n        - file: Filename string or file object to store the result in\n        Returns:\n        - resp: server response if successful\n        - list: list of strings returned by the server in response to the\n                HELP command\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "HELP")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_statparse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "resp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: parse the response line of a STAT, NEXT, LAST,\n        ARTICLE, HEAD or BODY command.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "22")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "words")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "art_num")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "words")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "message_id")
(PUNCT "=")
(ID "words")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "art_num")
(PUNCT ",")
(ID "message_id")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_statcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: process a STAT, NEXT or LAST command.")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_statparse")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stat")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a STAT command.  Argument:\n        - message_spec: article number or message id (if not specified,\n          the current article is selected)\n        Returns:\n        - resp: server response if successful\n        - art_num: the article number\n        - message_id: the message id\n        ")
(NEWLINE)
(KEYWORD if)
(ID "message_spec")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_statcmd")
(PUNCT "(")
(LIT "STAT {0}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "message_spec")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_statcmd")
(PUNCT "(")
(LIT "STAT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "next")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a NEXT command.  No arguments.  Return as for STAT.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_statcmd")
(PUNCT "(")
(LIT "NEXT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "last")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a LAST command.  No arguments.  Return as for STAT.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_statcmd")
(PUNCT "(")
(LIT "LAST")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_artcmd")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal: process a HEAD, BODY or ARTICLE command.")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmd")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "art_num")
(PUNCT ",")
(ID "message_id")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_statparse")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "ArticleInfo")
(PUNCT "(")
(ID "art_num")
(PUNCT ",")
(ID "message_id")
(PUNCT ",")
(ID "lines")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "head")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a HEAD command.  Argument:\n        - message_spec: article number or message id\n        - file: filename string or file object to store the headers in\n        Returns:\n        - resp: server response if successful\n        - ArticleInfo: (article number, message id, list of header lines)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "message_spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "HEAD {0}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "message_spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "HEAD")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_artcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "body")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a BODY command.  Argument:\n        - message_spec: article number or message id\n        - file: filename string or file object to store the body in\n        Returns:\n        - resp: server response if successful\n        - ArticleInfo: (article number, message id, list of body lines)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "message_spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "BODY {0}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "message_spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "BODY")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_artcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "article")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_spec")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an ARTICLE command.  Argument:\n        - message_spec: article number or message id\n        - file: filename string or file object to store the article in\n        Returns:\n        - resp: server response if successful\n        - ArticleInfo: (article number, message id, list of article lines)\n        ")
(NEWLINE)
(KEYWORD if)
(ID "message_spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "ARTICLE {0}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "message_spec")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(LIT "ARTICLE")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_artcmd")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "slave")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a SLAVE command.  Returns:\n        - resp: server response if successful\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "SLAVE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xhdr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "hdr")
(PUNCT ",")
(ID "str")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an XHDR command (optional server extension).  Arguments:\n        - hdr: the header type (e.g. 'subject')\n        - str: an article nr, a message id, or a range nr1-nr2\n        - file: Filename string or file object to store the result in\n        Returns:\n        - resp: server response if successful\n        - list: list of (nr, value) strings\n        ")
(NEWLINE)
(ID "pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^([0-9]+) ?(.*)\n?")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "XHDR {0} {1}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "hdr")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "remove_number")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "pat")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "m")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(KEYWORD if)
(ID "m")
(KEYWORD else)
(ID "line")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(PUNCT "[")
(ID "remove_number")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "lines")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xover")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an XOVER command (optional server extension) Arguments:\n        - start: start of range\n        - end: end of range\n        - file: Filename string or file object to store the result in\n        Returns:\n        - resp: server response if successful\n        - list: list of dicts containing the response fields\n        ")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "XOVER {0}-{1}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "fmt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getoverviewfmt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "_parse_overview")
(PUNCT "(")
(ID "lines")
(PUNCT ",")
(ID "fmt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "over")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_spec")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an OVER command.  If the command isn't supported, fall\n        back to XOVER. Arguments:\n        - message_spec:\n            - either a message id, indicating the article to fetch\n              information about\n            - or a (start, end) tuple, indicating a range of article numbers;\n              if end is None, information up to the newest message will be\n              retrieved\n            - or None, indicating the current article number must be used\n        - file: Filename string or file object to store the result in\n        Returns:\n        - resp: server response if successful\n        - list: list of dicts containing the response fields\n\n        NOTE: the \"message id\" form isn't supported by XOVER\n        ")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(LIT "OVER")
(KEYWORD if)
(LIT "OVER")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_caps")
(KEYWORD else)
(LIT "XOVER")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "message_spec")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT "=")
(ID "message_spec")
(NEWLINE)
(ID "cmd")
(PUNCT "+=")
(LIT " {0}-{1}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "start")
(PUNCT ",")
(ID "end")
(KEYWORD or)
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "message_spec")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd")
(PUNCT "=")
(ID "cmd")
(PUNCT "+")
(LIT " ")
(PUNCT "+")
(ID "message_spec")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT ",")
(ID "lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "fmt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getoverviewfmt")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "_parse_overview")
(PUNCT "(")
(ID "lines")
(PUNCT ",")
(ID "fmt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xgtitle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "group")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an XGTITLE command (optional server extension) Arguments:\n        - group: group name wildcard (i.e. news.*)\n        Returns:\n        - resp: server response if successful\n        - list: list of (name,title) strings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "The XGTITLE extension is not actively used, ")
(LIT "use descriptions() instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "line_pat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^([^ \t]+)[ \t]+(.*)$")
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "raw_lines")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_longcmdstring")
(PUNCT "(")
(LIT "XGTITLE ")
(PUNCT "+")
(ID "group")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "raw_line")
(KEYWORD in)
(ID "raw_lines")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "match")
(PUNCT "=")
(ID "line_pat")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "raw_line")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "match")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lines")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "match")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "lines")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xpath")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an XPATH command (optional server extension) Arguments:\n        - id: Message id of article\n        Returns:\n        resp: server response if successful\n        path: directory path to article\n        ")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "The XPATH extension is not actively used")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "XPATH {0}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "id")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "223")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(PUNCT "[")
(ID "resp_num")
(PUNCT ",")
(ID "path")
(PUNCT "]")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "path")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "date")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process the DATE command.\n        Returns:\n        - resp: server response if successful\n        - date: datetime object\n        ")
(NEWLINE)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "DATE")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "111")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "elem")
(PUNCT "=")
(ID "resp")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "elem")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPDataError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "date")
(PUNCT "=")
(ID "elem")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "date")
(PUNCT ")")
(PUNCT "!=")
(LIT 14)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPDataError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(PUNCT ",")
(ID "_parse_datetime")
(PUNCT "(")
(ID "date")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_post")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "3")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "splitlines")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "line")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(ID "_CRLF")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "rstrip")
(PUNCT "(")
(LIT #"\r\n")
(PUNCT ")")
(PUNCT "+")
(ID "_CRLF")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "line")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT #".")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(LIT #".")
(PUNCT "+")
(ID "line")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #".\r\n")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getresp")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "post")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a POST command.  Arguments:\n        - data: bytes object, iterable or file containing the article\n        Returns:\n        - resp: server response if successful")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_post")
(PUNCT "(")
(LIT "POST")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "ihave")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message_id")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process an IHAVE command.  Arguments:\n        - message_id: message-id of the article\n        - data: file containing the article\n        Returns:\n        - resp: server response if successful\n        Note that if the server refuses the article an exception is raised.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_post")
(PUNCT "(")
(LIT "IHAVE {0}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "message_id")
(PUNCT ")")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "file")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quit")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a QUIT command and close the socket.  Returns:\n        - resp: server response if successful")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "QUIT")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "resp")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "login")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "password")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "usenetrc")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "authenticated")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Already logged in.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "user")
(KEYWORD and)
(KEYWORD not)
(ID "usenetrc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "At least one of `user` and `usenetrc` must be specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "usenetrc")
(KEYWORD and)
(KEYWORD not)
(ID "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "netrc")
(NEWLINE)
(ID "credentials")
(PUNCT "=")
(ID "netrc")
(PUNCT ".")
(ID "netrc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "auth")
(PUNCT "=")
(ID "credentials")
(PUNCT ".")
(ID "authenticators")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "auth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user")
(PUNCT "=")
(ID "auth")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "password")
(PUNCT "=")
(ID "auth")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "user")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "authinfo user ")
(PUNCT "+")
(ID "user")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "381")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "password")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPReplyError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "authinfo pass ")
(PUNCT "+")
(ID "password")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "281")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPPermanentError")
(PUNCT "(")
(ID "resp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "getcapabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "readermode_afterauth")
(KEYWORD and)
(LIT "READER")
(KEYWORD not)
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_setreadermode")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "getcapabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_setreadermode")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "welcome")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "mode reader")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NNTPPermanentError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "NNTPTemporaryError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "e")
(PUNCT ".")
(ID "response")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "480")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "readermode_afterauth")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "starttls")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Process a STARTTLS command. Arguments:\n            - context: SSL context to use for the encrypted connection\n            ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "tls_on")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "TLS is already enabled.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "authenticated")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "TLS cannot be started after authentication.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_shortcmd")
(PUNCT "(")
(LIT "STARTTLS")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "resp")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "382")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "_encrypt_on")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "context")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rwb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tls_on")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_caps")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "getcapabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NNTPError")
(PUNCT "(")
(LIT "TLS failed to start.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "NNTP")
(PUNCT "(")
(ID "_NNTPBase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "NNTP_PORT")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "password")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "readermode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "usenetrc")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Initialize an instance.  Arguments:\n        - host: hostname to connect to\n        - port: port to connect to (default the standard NNTP port)\n        - user: username to authenticate with\n        - password: password to use with username\n        - readermode: if true, send 'mode reader' command after\n                      connecting.\n        - usenetrc: allow loading username and password from ~/.netrc file\n                    if not specified explicitly\n        - timeout: timeout (in seconds) used for socket connections\n\n        readermode is sometimes necessary if you are connecting to an\n        NNTP server on the local machine and intend to call\n        reader-specific commands, such as `group'.  If you get\n        unexpected NNTPPermanentErrors, you might need to set\n        readermode.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "host")
(PUNCT "=")
(ID "host")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "port")
(PUNCT "=")
(ID "port")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rwb")
(PUNCT ")")
(NEWLINE)
(ID "_NNTPBase")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "readermode")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(KEYWORD or)
(ID "usenetrc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ",")
(ID "usenetrc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_NNTPBase")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "_have_ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD class)
(ID "NNTP_SSL")
(PUNCT "(")
(ID "_NNTPBase")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "NNTP_SSL_PORT")
(PUNCT ",")
(ID "user")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "password")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "ssl_context")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "readermode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "usenetrc")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "_GLOBAL_DEFAULT_TIMEOUT")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This works identically to NNTP.__init__, except for the change\n            in default port and the `ssl_context` argument for SSL connections.\n            ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "create_connection")
(PUNCT "(")
(PUNCT "(")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ")")
(PUNCT ",")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT "=")
(ID "_encrypt_on")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ",")
(ID "ssl_context")
(PUNCT ",")
(ID "host")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "makefile")
(PUNCT "(")
(LIT "rwb")
(PUNCT ")")
(NEWLINE)
(ID "_NNTPBase")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "readermode")
(PUNCT "=")
(ID "readermode")
(PUNCT ",")
(ID "timeout")
(PUNCT "=")
(ID "timeout")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "user")
(KEYWORD or)
(ID "usenetrc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "login")
(PUNCT "(")
(ID "user")
(PUNCT ",")
(ID "password")
(PUNCT ",")
(ID "usenetrc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_NNTPBase")
(PUNCT ".")
(ID "_close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "sock")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "__all__")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "NNTP_SSL")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "argparse")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "argparse")
(PUNCT ".")
(ID "ArgumentParser")
(PUNCT "(")
(ID "description")
(PUNCT "=")
(LIT "        nntplib built-in demo - display the latest articles in a newsgroup")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-g")
(PUNCT ",")
(LIT "--group")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "gmane.comp.python.general")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "group to fetch messages from (default: %(default)s)")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-s")
(PUNCT ",")
(LIT "--server")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT "news.gmane.org")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "NNTP server hostname (default: %(default)s)")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-p")
(PUNCT ",")
(LIT "--port")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "NNTP port number (default: %s / %s)")
(PUNCT "%")
(PUNCT "(")
(ID "NNTP_PORT")
(PUNCT ",")
(ID "NNTP_SSL_PORT")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-n")
(PUNCT ",")
(LIT "--nb-articles")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(LIT 10)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(ID "int")
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "number of articles to fetch (default: %(default)s)")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "add_argument")
(PUNCT "(")
(LIT "-S")
(PUNCT ",")
(LIT "--ssl")
(PUNCT ",")
(ID "action")
(PUNCT "=")
(LIT "store_true")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "help")
(PUNCT "=")
(LIT "use NNTP over SSL")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "parse_args")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "port")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "port")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ".")
(ID "ssl")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "port")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "NNTP_PORT")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "NNTP")
(PUNCT "(")
(ID "host")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "server")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "port")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "port")
(PUNCT "=")
(ID "NNTP_SSL_PORT")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "NNTP_SSL")
(PUNCT "(")
(ID "host")
(PUNCT "=")
(ID "args")
(PUNCT ".")
(ID "server")
(PUNCT ",")
(ID "port")
(PUNCT "=")
(ID "port")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "caps")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "getcapabilities")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "STARTTLS")
(KEYWORD in)
(ID "caps")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT ".")
(ID "starttls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resp")
(PUNCT ",")
(ID "count")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "group")
(PUNCT "(")
(ID "args")
(PUNCT ".")
(ID "group")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Group")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(LIT "has")
(PUNCT ",")
(ID "count")
(PUNCT ",")
(LIT "articles, range")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(LIT "to")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "cut")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "lim")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ">")
(ID "lim")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(PUNCT ":")
(ID "lim")
(PUNCT "-")
(LIT 4)
(PUNCT "]")
(PUNCT "+")
(LIT "...")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(ID "first")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "last")
(PUNCT ")")
(PUNCT "-")
(ID "args")
(PUNCT ".")
(ID "nb_articles")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(ID "resp")
(PUNCT ",")
(ID "overviews")
(PUNCT "=")
(ID "s")
(PUNCT ".")
(ID "xover")
(PUNCT "(")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "artnum")
(PUNCT ",")
(ID "over")
(KEYWORD in)
(ID "overviews")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "author")
(PUNCT "=")
(ID "decode_header")
(PUNCT "(")
(ID "over")
(PUNCT "[")
(LIT "from")
(PUNCT "]")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "<")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "subject")
(PUNCT "=")
(ID "decode_header")
(PUNCT "(")
(ID "over")
(PUNCT "[")
(LIT "subject")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "lines")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "over")
(PUNCT "[")
(LIT ":lines")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "{:7} {:20} {:42} ({})")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "artnum")
(PUNCT ",")
(ID "cut")
(PUNCT "(")
(ID "author")
(PUNCT ",")
(LIT 20)
(PUNCT ")")
(PUNCT ",")
(ID "cut")
(PUNCT "(")
(ID "subject")
(PUNCT ",")
(LIT 42)
(PUNCT ")")
(PUNCT ",")
(ID "lines")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
