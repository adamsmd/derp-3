(LIT "distutils.command.register\n\nImplements the Distutils 'register' command (register with the repository).\n")
(NEWLINE)
(KEYWORD import)
(ID "os")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(ID "getpass")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ",")
(ID "urllib")
(PUNCT ".")
(ID "request")
(NEWLINE)
(KEYWORD from)
(ID "warnings")
(KEYWORD import)
(ID "warn")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "PyPIRCCommand")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD class)
(ID "register")
(PUNCT "(")
(ID "PyPIRCCommand")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(PUNCT "(")
(LIT "register the distribution with the Python package index")
(PUNCT ")")
(NEWLINE)
(ID "user_options")
(PUNCT "=")
(ID "PyPIRCCommand")
(PUNCT ".")
(ID "user_options")
(PUNCT "+")
(PUNCT "[")
(PUNCT "(")
(LIT "list-classifiers")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list the valid Trove classifiers")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "strict")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "Will stop the registering if the meta-data are not fully compliant")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "boolean_options")
(PUNCT "=")
(ID "PyPIRCCommand")
(PUNCT ".")
(ID "boolean_options")
(PUNCT "+")
(PUNCT "[")
(LIT "verify")
(PUNCT ",")
(LIT "list-classifiers")
(PUNCT ",")
(LIT "strict")
(PUNCT "]")
(NEWLINE)
(ID "sub_commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "check")
(PUNCT ",")
(KEYWORD lambda)
(ID "self")
(PUNCT ":")
(KEYWORD True)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PyPIRCCommand")
(PUNCT ".")
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "list_classifiers")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "strict")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "PyPIRCCommand")
(PUNCT ".")
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "check_options")
(PUNCT "=")
(PUNCT "{")
(LIT "strict")
(PUNCT ":")
(PUNCT "(")
(LIT "register")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "strict")
(PUNCT ")")
(PUNCT ",")
(LIT "restructuredtext")
(PUNCT ":")
(PUNCT "(")
(LIT "register")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "command_options")
(PUNCT "[")
(LIT "check")
(PUNCT "]")
(PUNCT "=")
(ID "check_options")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "finalize_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_set_config")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cmd_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "get_sub_commands")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "run_command")
(PUNCT "(")
(ID "cmd_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "verify_metadata")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "list_classifiers")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "classifiers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "send_metadata")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "check_metadata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deprecated API.")
(NEWLINE)
(ID "warn")
(PUNCT "(")
(LIT "distutils.command.register.check_metadata is deprecated,               use the check command instead")
(PUNCT ",")
(ID "PendingDeprecationWarning")
(PUNCT ")")
(NEWLINE)
(ID "check")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "get_command_obj")
(PUNCT "(")
(LIT "check")
(PUNCT ")")
(NEWLINE)
(ID "check")
(PUNCT ".")
(ID "ensure_finalized")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "check")
(PUNCT ".")
(ID "strict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "strict")
(NEWLINE)
(ID "check")
(PUNCT ".")
(ID "restructuredtext")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "check")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set_config")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Reads the configuration file and set attributes.\n        ")
(NEWLINE)
(ID "config")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_pypirc")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "config")
(PUNCT "!=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "username")
(PUNCT "=")
(ID "config")
(PUNCT "[")
(LIT "username")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT "=")
(ID "config")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT "=")
(ID "config")
(PUNCT "[")
(LIT "repository")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "realm")
(PUNCT "=")
(ID "config")
(PUNCT "[")
(LIT "realm")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "has_config")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "repository")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "pypi")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "DEFAULT_REPOSITORY")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "%s not found in .pypirc")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT "==")
(LIT "pypi")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "DEFAULT_REPOSITORY")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "has_config")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "classifiers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Fetch the list of classifiers from the server.\n        ")
(NEWLINE)
(ID "url")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT "+")
(LIT "?:action=list_classifiers")
(NEWLINE)
(ID "response")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ".")
(ID "urlopen")
(PUNCT "(")
(ID "url")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_read_pypi_response")
(PUNCT "(")
(ID "response")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "verify_metadata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Send the metadata to the package index server to be checked.\n        ")
(NEWLINE)
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "post_to_server")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "build_post_data")
(PUNCT "(")
(LIT "verify")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Server response (%s): %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send_metadata")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Send the metadata to the package index server.\n\n            Well, do the following:\n            1. figure who the user is, and then\n            2. send the data as a Basic auth'ed POST.\n\n            First we try to read the username/password from $HOME/.pypirc,\n            which is a ConfigParser-formatted file with a section\n            [distutils] containing username and password entries (both\n            in clear text). Eg:\n\n                [distutils]\n                index-servers =\n                    pypi\n\n                [pypi]\n                username: fred\n                password: sekrit\n\n            Otherwise, to figure who the user is, we offer the user three\n            choices:\n\n             1. use existing login,\n             2. register as a new user, or\n             3. set the password to a random string and email the user.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "choice")
(PUNCT "=")
(LIT "1")
(NEWLINE)
(ID "username")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "username")
(NEWLINE)
(ID "password")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "password")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "choice")
(PUNCT "=")
(LIT "x")
(NEWLINE)
(ID "username")
(PUNCT "=")
(ID "password")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "choices")
(PUNCT "=")
(LIT "1 2 3 4")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(ID "choice")
(KEYWORD not)
(KEYWORD in)
(ID "choices")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "We need to know who you are, so please choose either:\n 1. use your existing login,\n 2. register as a new user,\n 3. have the server generate a new password for you (and email it to you), or\n 4. quit\nYour selection [default 1]: ")
(PUNCT ",")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(ID "choice")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "choice")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "choice")
(PUNCT "=")
(LIT "1")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "choice")
(KEYWORD not)
(KEYWORD in)
(ID "choices")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "Please choose one of the four options!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "choice")
(PUNCT "==")
(LIT "1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD not)
(ID "username")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "username")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(LIT "Username: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD not)
(ID "password")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "password")
(PUNCT "=")
(ID "getpass")
(PUNCT ".")
(ID "getpass")
(PUNCT "(")
(LIT "Password: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "auth")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ".")
(ID "HTTPPasswordMgr")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "host")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "parse")
(PUNCT ".")
(ID "urlparse")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT ")")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "auth")
(PUNCT ".")
(ID "add_password")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "realm")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "username")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(NEWLINE)
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "post_to_server")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "build_post_data")
(PUNCT "(")
(LIT "submit")
(PUNCT ")")
(PUNCT ",")
(ID "auth")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "Server response (%s): %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ",")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "==")
(LIT 200)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "has_config")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "password")
(PUNCT "=")
(ID "password")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(PUNCT "(")
(LIT "I can store your PyPI login so future ")
(LIT "submissions will be faster.")
(PUNCT ")")
(PUNCT ",")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "(the login will be stored in %s)")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_get_rc_file")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(ID "choice")
(PUNCT "=")
(LIT "X")
(NEWLINE)
(KEYWORD while)
(ID "choice")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(LIT "yn")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "choice")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(LIT "Save your login (y/N)?")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "choice")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "choice")
(PUNCT "=")
(LIT "n")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "choice")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(LIT "y")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_store_pypirc")
(PUNCT "(")
(ID "username")
(PUNCT ",")
(ID "password")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "choice")
(PUNCT "==")
(LIT "2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "{")
(LIT ":action")
(PUNCT ":")
(LIT "user")
(PUNCT "}")
(NEWLINE)
(ID "data")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(PUNCT "=")
(ID "data")
(PUNCT "[")
(LIT "email")
(PUNCT "]")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "data")
(PUNCT "[")
(LIT "confirm")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "data")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(LIT "Username: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "data")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(PUNCT "!=")
(ID "data")
(PUNCT "[")
(LIT "confirm")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD while)
(KEYWORD not)
(ID "data")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(PUNCT "=")
(ID "getpass")
(PUNCT ".")
(ID "getpass")
(PUNCT "(")
(LIT "Password: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD while)
(KEYWORD not)
(ID "data")
(PUNCT "[")
(LIT "confirm")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "confirm")
(PUNCT "]")
(PUNCT "=")
(ID "getpass")
(PUNCT ".")
(ID "getpass")
(PUNCT "(")
(LIT " Confirm: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "data")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(PUNCT "!=")
(ID "data")
(PUNCT "[")
(LIT "confirm")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "password")
(PUNCT "]")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "data")
(PUNCT "[")
(LIT "confirm")
(PUNCT "]")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Password and confirm don't match!")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD while)
(KEYWORD not)
(ID "data")
(PUNCT "[")
(LIT "email")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "email")
(PUNCT "]")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(LIT "   EMail: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "post_to_server")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "code")
(PUNCT "!=")
(LIT 200)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Server response (%s): %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "You will receive an email shortly.")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(PUNCT "(")
(LIT "Follow the instructions in it to ")
(LIT "complete registration.")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "choice")
(PUNCT "==")
(LIT "3")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "{")
(LIT ":action")
(PUNCT ":")
(LIT "password_reset")
(PUNCT "}")
(NEWLINE)
(ID "data")
(PUNCT "[")
(LIT "email")
(PUNCT "]")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD while)
(KEYWORD not)
(ID "data")
(PUNCT "[")
(LIT "email")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "email")
(PUNCT "]")
(PUNCT "=")
(ID "input")
(PUNCT "(")
(LIT "Your email address: ")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "post_to_server")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Server response (%s): %s")
(PUNCT "%")
(PUNCT "(")
(ID "code")
(PUNCT ",")
(ID "result")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "build_post_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "action")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "meta")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "metadata")
(NEWLINE)
(ID "data")
(PUNCT "=")
(PUNCT "{")
(LIT ":action")
(PUNCT ":")
(ID "action")
(PUNCT ",")
(LIT "metadata_version")
(PUNCT ":")
(LIT "1.0")
(PUNCT ",")
(LIT "name")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_name")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "version")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "summary")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_description")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "home_page")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_url")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "author")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_contact")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "author_email")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_contact_email")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "license")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_licence")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "description")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_long_description")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "keywords")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_keywords")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "platform")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_platforms")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "classifiers")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_classifiers")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "download_url")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_download_url")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "provides")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_provides")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "requires")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_requires")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(LIT "obsoletes")
(PUNCT ":")
(ID "meta")
(PUNCT ".")
(ID "get_obsoletes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "data")
(PUNCT "[")
(LIT "provides")
(PUNCT "]")
(KEYWORD or)
(ID "data")
(PUNCT "[")
(LIT "requires")
(PUNCT "]")
(KEYWORD or)
(ID "data")
(PUNCT "[")
(LIT "obsoletes")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "[")
(LIT "metadata_version")
(PUNCT "]")
(PUNCT "=")
(LIT "1.1")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "post_to_server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "auth")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " Post a query to the server, and return a string response.\n        ")
(NEWLINE)
(KEYWORD if)
(LIT "name")
(KEYWORD in)
(ID "data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "Registering %s to %s")
(PUNCT "%")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT ")")
(PUNCT ",")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "boundary")
(PUNCT "=")
(LIT "--------------GHSKFJDLGDS7543FJKLFHRE75642756743254")
(NEWLINE)
(ID "sep_boundary")
(PUNCT "=")
(LIT "\n--")
(PUNCT "+")
(ID "boundary")
(NEWLINE)
(ID "end_boundary")
(PUNCT "=")
(ID "sep_boundary")
(PUNCT "+")
(LIT "--")
(NEWLINE)
(ID "body")
(PUNCT "=")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "data")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(ID "type")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(PUNCT "[")
(ID "value")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "sep_boundary")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\nContent-Disposition: form-data; name=\"%s\"")
(PUNCT "%")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n\n")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD and)
(ID "value")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "\r")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "end_boundary")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "body")
(PUNCT "=")
(ID "body")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(ID "headers")
(PUNCT "=")
(PUNCT "{")
(LIT "Content-type")
(PUNCT ":")
(LIT "multipart/form-data; boundary=%s; charset=utf-8")
(PUNCT "%")
(ID "boundary")
(PUNCT ",")
(LIT "Content-length")
(PUNCT ":")
(ID "str")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "body")
(PUNCT ")")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(ID "req")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ".")
(ID "Request")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "repository")
(PUNCT ",")
(ID "body")
(PUNCT ",")
(ID "headers")
(PUNCT ")")
(NEWLINE)
(ID "opener")
(PUNCT "=")
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ".")
(ID "build_opener")
(PUNCT "(")
(ID "urllib")
(PUNCT ".")
(ID "request")
(PUNCT ".")
(ID "HTTPBasicAuthHandler")
(PUNCT "(")
(ID "password_mgr")
(PUNCT "=")
(ID "auth")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(ID "opener")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "req")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "urllib")
(PUNCT ".")
(ID "error")
(PUNCT ".")
(ID "HTTPError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "show_response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "e")
(PUNCT ".")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(ID "e")
(PUNCT ".")
(ID "code")
(PUNCT ",")
(ID "e")
(PUNCT ".")
(ID "msg")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "urllib")
(PUNCT ".")
(ID "error")
(PUNCT ".")
(ID "URLError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(LIT 500)
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "show_response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "result")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "result")
(PUNCT "=")
(LIT 200)
(PUNCT ",")
(LIT "OK")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "show_response")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dashes")
(PUNCT "=")
(LIT "-")
(PUNCT "*")
(LIT 75)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "%s%r%s")
(PUNCT "%")
(PUNCT "(")
(ID "dashes")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "dashes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(DEDENT)
(ENDMARKER)
