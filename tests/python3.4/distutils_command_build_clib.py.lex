(LIT "distutils.command.build_clib\n\nImplements the Distutils 'build_clib' command, to build a C/C++ library\nthat is included in the module distribution and needed by an extension\nmodule.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "sysconfig")
(KEYWORD import)
(ID "customize_compiler")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD def)
(ID "show_compilers")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "show_compilers")
(NEWLINE)
(ID "show_compilers")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "build_clib")
(PUNCT "(")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(LIT "build C/C++ libraries used by Python extensions")
(NEWLINE)
(ID "user_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "build-clib=")
(PUNCT ",")
(LIT "b")
(PUNCT ",")
(LIT "directory to build C/C++ libraries to")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "build-temp=")
(PUNCT ",")
(LIT "t")
(PUNCT ",")
(LIT "directory to put temporary build by-products")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "debug")
(PUNCT ",")
(LIT "g")
(PUNCT ",")
(LIT "compile with debugging information")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "force")
(PUNCT ",")
(LIT "f")
(PUNCT ",")
(LIT "forcibly build everything (ignore file timestamps)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "compiler=")
(PUNCT ",")
(LIT "c")
(PUNCT ",")
(LIT "specify the compiler type")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "boolean_options")
(PUNCT "=")
(PUNCT "[")
(LIT "debug")
(PUNCT ",")
(LIT "force")
(PUNCT "]")
(NEWLINE)
(ID "help_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "help-compiler")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list available compilers")
(PUNCT ",")
(ID "show_compilers")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "initialize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "build_clib")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_undefined_options")
(PUNCT "(")
(LIT "build")
(PUNCT ",")
(PUNCT "(")
(LIT "build_temp")
(PUNCT ",")
(LIT "build_clib")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "build_temp")
(PUNCT ",")
(LIT "build_temp")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "compiler")
(PUNCT ",")
(LIT "compiler")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "debug")
(PUNCT ",")
(LIT "debug")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "force")
(PUNCT ",")
(LIT "force")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "libraries")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_library_list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "distribution")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "pathsep")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "ccompiler")
(KEYWORD import)
(ID "new_compiler")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT "=")
(ID "new_compiler")
(PUNCT "(")
(ID "compiler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ",")
(ID "dry_run")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT ",")
(ID "force")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "force")
(PUNCT ")")
(NEWLINE)
(ID "customize_compiler")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "set_include_dirs")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "define")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "define")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "define_macro")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "undef")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "macro")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "undef")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "undefine_macro")
(PUNCT "(")
(ID "macro")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "build_libraries")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "check_library_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "libraries")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ensure that the list of libraries is valid.\n\n        `library` is presumably provided as a command option 'libraries'.\n        This method checks that it is a list of 2-tuples, where the tuples\n        are (library_name, build_info_dict).\n\n        Raise DistutilsSetupError if the structure is invalid anywhere;\n        just returns otherwise.\n        ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "libraries")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "'libraries' option must be a list of tuples")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "lib")
(KEYWORD in)
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "lib")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "lib")
(PUNCT ")")
(PUNCT "!=")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "each element of 'libraries' must a 2-tuple")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "name")
(PUNCT ",")
(ID "build_info")
(PUNCT "=")
(ID "lib")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "first element of each tuple in 'libraries' ")
(LIT "must be a string (the library name)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "/")
(KEYWORD in)
(ID "name")
(KEYWORD or)
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "sep")
(PUNCT "!=")
(LIT "/")
(KEYWORD and)
(ID "os")
(PUNCT ".")
(ID "sep")
(KEYWORD in)
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "bad library name '%s': ")
(LIT "may not contain directory separators")
(PUNCT "%")
(ID "lib")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "build_info")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "second element of each tuple in 'libraries' ")
(LIT "must be a dictionary (build info)")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_library_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "lib_names")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "lib_name")
(PUNCT ",")
(ID "build_info")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lib_names")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "lib_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "lib_names")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_source_files")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "check_library_list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ")")
(NEWLINE)
(ID "filenames")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "lib_name")
(PUNCT ",")
(ID "build_info")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sources")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "sources")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sources")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "sources")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "in 'libraries' option (library '%s'), ")
(LIT "'sources' must be present and must be ")
(LIT "a list of source filenames")
(PUNCT "%")
(ID "lib_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "filenames")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(ID "sources")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "filenames")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "build_libraries")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "libraries")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "lib_name")
(PUNCT ",")
(ID "build_info")
(PUNCT ")")
(KEYWORD in)
(ID "libraries")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sources")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "sources")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "sources")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "sources")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsSetupError")
(PUNCT "(")
(LIT "in 'libraries' option (library '%s'), ")
(LIT "'sources' must be present and must be ")
(LIT "a list of source filenames")
(PUNCT "%")
(ID "lib_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sources")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "sources")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "building '%s' library")
(PUNCT ",")
(ID "lib_name")
(PUNCT ")")
(NEWLINE)
(ID "macros")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "macros")
(PUNCT ")")
(NEWLINE)
(ID "include_dirs")
(PUNCT "=")
(ID "build_info")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "include_dirs")
(PUNCT ")")
(NEWLINE)
(ID "objects")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "sources")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "build_temp")
(PUNCT ",")
(ID "macros")
(PUNCT "=")
(ID "macros")
(PUNCT ",")
(ID "include_dirs")
(PUNCT "=")
(ID "include_dirs")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "compiler")
(PUNCT ".")
(ID "create_static_lib")
(PUNCT "(")
(ID "objects")
(PUNCT ",")
(ID "lib_name")
(PUNCT ",")
(ID "output_dir")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "build_clib")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ENDMARKER)
