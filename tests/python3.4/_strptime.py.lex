(LIT "Strptime-related classes and functions.\n\nCLASSES:\n    LocaleTime -- Discovers and stores locale-specific time information\n    TimeRE -- Creates regexes for pattern matching a string of text containing\n                time information\n\nFUNCTIONS:\n    _getlang -- Figure out what language is being used for the locale\n    strptime -- Calculates the time struct represented by the passed-in string\n\n")
(NEWLINE)
(KEYWORD import)
(ID "time")
(NEWLINE)
(KEYWORD import)
(ID "locale")
(NEWLINE)
(KEYWORD import)
(ID "calendar")
(NEWLINE)
(KEYWORD from)
(ID "re")
(KEYWORD import)
(ID "compile")
(KEYWORD as)
(ID "re_compile")
(NEWLINE)
(KEYWORD from)
(ID "re")
(KEYWORD import)
(ID "IGNORECASE")
(NEWLINE)
(KEYWORD from)
(ID "re")
(KEYWORD import)
(ID "escape")
(KEYWORD as)
(ID "re_escape")
(NEWLINE)
(KEYWORD from)
(ID "datetime")
(KEYWORD import)
(PUNCT "(")
(ID "date")
(KEYWORD as)
(ID "datetime_date")
(PUNCT ",")
(ID "timedelta")
(KEYWORD as)
(ID "datetime_timedelta")
(PUNCT ",")
(ID "timezone")
(KEYWORD as)
(ID "datetime_timezone")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_thread")
(KEYWORD import)
(ID "allocate_lock")
(KEYWORD as)
(ID "_thread_allocate_lock")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "_dummy_thread")
(KEYWORD import)
(ID "allocate_lock")
(KEYWORD as)
(ID "_thread_allocate_lock")
(NEWLINE)
(DEDENT)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "_getlang")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "locale")
(PUNCT ".")
(ID "getlocale")
(PUNCT "(")
(ID "locale")
(PUNCT ".")
(ID "LC_TIME")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "LocaleTime")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stores and handles locale-specific information related to time.\n\n    ATTRIBUTES:\n        f_weekday -- full weekday names (7-item list)\n        a_weekday -- abbreviated weekday names (7-item list)\n        f_month -- full month names (13-item list; dummy value in [0], which\n                    is added by code)\n        a_month -- abbreviated month names (13-item list, dummy value in\n                    [0], which is added by code)\n        am_pm -- AM/PM representation (2-item list)\n        LC_date_time -- format string for date/time representation (string)\n        LC_date -- format string for date representation (string)\n        LC_time -- format string for time representation (string)\n        timezone -- daylight- and non-daylight-savings timezone representation\n                    (2-item list of sets)\n        lang -- Language used by instance (2-item tuple)\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set all attributes.\n\n        Order of methods called matters for dependency reasons.\n\n        The locale language is set at the offset and then checked again before\n        exiting.  This is to make sure that the attributes were not set with a\n        mix of information from more than one locale.  This would most likely\n        happen when using threads where one thread calls a locale-dependent\n        function while another thread changes the locale while the function in\n        the other thread is still running.  Proper coding would call for\n        locks to prevent changing the locale while locale-dependent code is\n        running.  The check here is done in case someone does not think about\n        doing this.\n\n        Only other possible issue is if someone changed the timezone and did\n        not call tz.tzset .  That is an issue for the programmer, though,\n        since changing the timezone is worthless without that call.\n\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "lang")
(PUNCT "=")
(ID "_getlang")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__calc_weekday")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__calc_month")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__calc_am_pm")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__calc_timezone")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__calc_date_time")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_getlang")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "lang")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "locale changed during initialization")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__pad")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "seq")
(PUNCT ",")
(ID "front")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seq")
(PUNCT "=")
(ID "list")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "front")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seq")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "seq")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "seq")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__calc_weekday")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a_weekday")
(PUNCT "=")
(PUNCT "[")
(ID "calendar")
(PUNCT ".")
(ID "day_abbr")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 7)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "f_weekday")
(PUNCT "=")
(PUNCT "[")
(ID "calendar")
(PUNCT ".")
(ID "day_name")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 7)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "a_weekday")
(PUNCT "=")
(ID "a_weekday")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "f_weekday")
(PUNCT "=")
(ID "f_weekday")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__calc_month")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a_month")
(PUNCT "=")
(PUNCT "[")
(ID "calendar")
(PUNCT ".")
(ID "month_abbr")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 13)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "f_month")
(PUNCT "=")
(PUNCT "[")
(ID "calendar")
(PUNCT ".")
(ID "month_name")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 13)
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "a_month")
(PUNCT "=")
(ID "a_month")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "f_month")
(PUNCT "=")
(ID "f_month")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__calc_am_pm")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "am_pm")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "hour")
(KEYWORD in)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 22)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time_tuple")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "struct_time")
(PUNCT "(")
(PUNCT "(")
(LIT 1999)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 17)
(PUNCT ",")
(ID "hour")
(PUNCT ",")
(LIT 44)
(PUNCT ",")
(LIT 55)
(PUNCT ",")
(LIT 2)
(PUNCT ",")
(LIT 76)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "am_pm")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%p")
(PUNCT ",")
(ID "time_tuple")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "am_pm")
(PUNCT "=")
(ID "am_pm")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__calc_date_time")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time_tuple")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "struct_time")
(PUNCT "(")
(PUNCT "(")
(LIT 1999)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 17)
(PUNCT ",")
(LIT 22)
(PUNCT ",")
(LIT 44)
(PUNCT ",")
(LIT 55)
(PUNCT ",")
(LIT 2)
(PUNCT ",")
(LIT 76)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "date_time")
(PUNCT "=")
(PUNCT "[")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(KEYWORD None)
(PUNCT "]")
(NEWLINE)
(ID "date_time")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%c")
(PUNCT ",")
(ID "time_tuple")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "date_time")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%x")
(PUNCT ",")
(ID "time_tuple")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "date_time")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(LIT "%X")
(PUNCT ",")
(ID "time_tuple")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "replacement_pairs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "%")
(PUNCT ",")
(LIT "%%")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "f_weekday")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(LIT "%A")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "f_month")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "%B")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "a_weekday")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(PUNCT ",")
(LIT "%a")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "a_month")
(PUNCT "[")
(LIT 3)
(PUNCT "]")
(PUNCT ",")
(LIT "%b")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "am_pm")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(LIT "%p")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "1999")
(PUNCT ",")
(LIT "%Y")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "99")
(PUNCT ",")
(LIT "%y")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "22")
(PUNCT ",")
(LIT "%H")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "44")
(PUNCT ",")
(LIT "%M")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "55")
(PUNCT ",")
(LIT "%S")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "76")
(PUNCT ",")
(LIT "%j")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "17")
(PUNCT ",")
(LIT "%d")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "03")
(PUNCT ",")
(LIT "%m")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "3")
(PUNCT ",")
(LIT "%m")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "2")
(PUNCT ",")
(LIT "%w")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "10")
(PUNCT ",")
(LIT "%I")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "replacement_pairs")
(PUNCT ".")
(ID "extend")
(PUNCT "(")
(PUNCT "[")
(PUNCT "(")
(ID "tz")
(PUNCT ",")
(LIT "%Z")
(PUNCT ")")
(KEYWORD for)
(ID "tz_values")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "timezone")
(KEYWORD for)
(ID "tz")
(KEYWORD in)
(ID "tz_values")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "offset")
(PUNCT ",")
(ID "directive")
(KEYWORD in)
(PUNCT "(")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT "%c")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT "%x")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT 2)
(PUNCT ",")
(LIT "%X")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "current_format")
(PUNCT "=")
(ID "date_time")
(PUNCT "[")
(ID "offset")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "old")
(PUNCT ",")
(ID "new")
(KEYWORD in)
(ID "replacement_pairs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "old")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "current_format")
(PUNCT "=")
(ID "current_format")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(ID "old")
(PUNCT ",")
(ID "new")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "time_tuple")
(PUNCT "=")
(ID "time")
(PUNCT ".")
(ID "struct_time")
(PUNCT "(")
(PUNCT "(")
(LIT 1999)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 6)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "00")
(KEYWORD in)
(ID "time")
(PUNCT ".")
(ID "strftime")
(PUNCT "(")
(ID "directive")
(PUNCT ",")
(ID "time_tuple")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "U_W")
(PUNCT "=")
(LIT "%W")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "U_W")
(PUNCT "=")
(LIT "%U")
(NEWLINE)
(DEDENT)
(ID "date_time")
(PUNCT "[")
(ID "offset")
(PUNCT "]")
(PUNCT "=")
(ID "current_format")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "11")
(PUNCT ",")
(ID "U_W")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "LC_date_time")
(PUNCT "=")
(ID "date_time")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "LC_date")
(PUNCT "=")
(ID "date_time")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "LC_time")
(PUNCT "=")
(ID "date_time")
(PUNCT "[")
(LIT 2)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__calc_timezone")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "time")
(PUNCT ".")
(ID "tzset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "no_saving")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(PUNCT "[")
(LIT "utc")
(PUNCT ",")
(LIT "gmt")
(PUNCT ",")
(ID "time")
(PUNCT ".")
(ID "tzname")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "time")
(PUNCT ".")
(ID "daylight")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "has_saving")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(PUNCT "[")
(ID "time")
(PUNCT ".")
(ID "tzname")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "has_saving")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "timezone")
(PUNCT "=")
(PUNCT "(")
(ID "no_saving")
(PUNCT ",")
(ID "has_saving")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TimeRE")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Handle conversion from format directives to regexes.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "locale_time")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create keys/values.\n\n        Order of execution is important for dependency reasons.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "locale_time")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT "=")
(ID "locale_time")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT "=")
(ID "LocaleTime")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "base")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT "{")
(LIT "d")
(PUNCT ":")
(LIT "(?P<d>3[0-1]|[1-2]\\d|0[1-9]|[1-9]| [1-9])")
(PUNCT ",")
(LIT "f")
(PUNCT ":")
(LIT "(?P<f>[0-9]{1,6})")
(PUNCT ",")
(LIT "H")
(PUNCT ":")
(LIT "(?P<H>2[0-3]|[0-1]\\d|\\d)")
(PUNCT ",")
(LIT "I")
(PUNCT ":")
(LIT "(?P<I>1[0-2]|0[1-9]|[1-9])")
(PUNCT ",")
(LIT "j")
(PUNCT ":")
(LIT "(?P<j>36[0-6]|3[0-5]\\d|[1-2]\\d\\d|0[1-9]\\d|00[1-9]|[1-9]\\d|0[1-9]|[1-9])")
(PUNCT ",")
(LIT "m")
(PUNCT ":")
(LIT "(?P<m>1[0-2]|0[1-9]|[1-9])")
(PUNCT ",")
(LIT "M")
(PUNCT ":")
(LIT "(?P<M>[0-5]\\d|\\d)")
(PUNCT ",")
(LIT "S")
(PUNCT ":")
(LIT "(?P<S>6[0-1]|[0-5]\\d|\\d)")
(PUNCT ",")
(LIT "U")
(PUNCT ":")
(LIT "(?P<U>5[0-3]|[0-4]\\d|\\d)")
(PUNCT ",")
(LIT "w")
(PUNCT ":")
(LIT "(?P<w>[0-6])")
(PUNCT ",")
(LIT "y")
(PUNCT ":")
(LIT "(?P<y>\\d\\d)")
(PUNCT ",")
(LIT "Y")
(PUNCT ":")
(LIT "(?P<Y>\\d\\d\\d\\d)")
(PUNCT ",")
(LIT "z")
(PUNCT ":")
(LIT "(?P<z>[+-]\\d\\d[0-5]\\d)")
(PUNCT ",")
(LIT "A")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__seqToRE")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "f_weekday")
(PUNCT ",")
(LIT "A")
(PUNCT ")")
(PUNCT ",")
(LIT "a")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__seqToRE")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "a_weekday")
(PUNCT ",")
(LIT "a")
(PUNCT ")")
(PUNCT ",")
(LIT "B")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__seqToRE")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "f_month")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "B")
(PUNCT ")")
(PUNCT ",")
(LIT "b")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__seqToRE")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "a_month")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(LIT "b")
(PUNCT ")")
(PUNCT ",")
(LIT "p")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__seqToRE")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "am_pm")
(PUNCT ",")
(LIT "p")
(PUNCT ")")
(PUNCT ",")
(LIT "Z")
(PUNCT ":")
(ID "self")
(PUNCT ".")
(ID "__seqToRE")
(PUNCT "(")
(PUNCT "(")
(ID "tz")
(KEYWORD for)
(ID "tz_names")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "timezone")
(KEYWORD for)
(ID "tz")
(KEYWORD in)
(ID "tz_names")
(PUNCT ")")
(PUNCT ",")
(LIT "Z")
(PUNCT ")")
(PUNCT ",")
(LIT "%")
(PUNCT ":")
(LIT "%")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ".")
(ID "__setitem__")
(PUNCT "(")
(LIT "W")
(PUNCT ",")
(ID "base")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(LIT "U")
(PUNCT ")")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "U")
(PUNCT ",")
(LIT "W")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ".")
(ID "__setitem__")
(PUNCT "(")
(LIT "c")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "pattern")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "LC_date_time")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ".")
(ID "__setitem__")
(PUNCT "(")
(LIT "x")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "pattern")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "LC_date")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "base")
(PUNCT ".")
(ID "__setitem__")
(PUNCT "(")
(LIT "X")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "pattern")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "LC_time")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__seqToRE")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "to_convert")
(PUNCT ",")
(ID "directive")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a list to a regex string for matching a directive.\n\n        Want possible matching values to be from longest to shortest.  This\n        prevents the possibility of a match occurring for a value that also\n        a substring of a larger value that should have matched (e.g., 'abc'\n        matching when 'abcdef' should have been the match).\n\n        ")
(NEWLINE)
(ID "to_convert")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "to_convert")
(PUNCT ",")
(ID "key")
(PUNCT "=")
(ID "len")
(PUNCT ",")
(ID "reverse")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "to_convert")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "!=")
(LIT "")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "")
(NEWLINE)
(DEDENT)
(ID "regex")
(PUNCT "=")
(LIT "|")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "re_escape")
(PUNCT "(")
(ID "stuff")
(PUNCT ")")
(KEYWORD for)
(ID "stuff")
(KEYWORD in)
(ID "to_convert")
(PUNCT ")")
(NEWLINE)
(ID "regex")
(PUNCT "=")
(LIT "(?P<%s>%s")
(PUNCT "%")
(PUNCT "(")
(ID "directive")
(PUNCT ",")
(ID "regex")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "%s)")
(PUNCT "%")
(ID "regex")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "pattern")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return regex pattern for the format string.\n\n        Need to make sure that any characters that might be interpreted as\n        regex syntax are escaped.\n\n        ")
(NEWLINE)
(ID "processed_format")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "regex_chars")
(PUNCT "=")
(ID "re_compile")
(PUNCT "(")
(LIT "([\\\\.^$*+?\\(\\){}\\[\\]|])")
(PUNCT ")")
(NEWLINE)
(ID "format")
(PUNCT "=")
(ID "regex_chars")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\\\\\1")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(NEWLINE)
(ID "whitespace_replacement")
(PUNCT "=")
(ID "re_compile")
(PUNCT "(")
(LIT "\\s+")
(PUNCT ")")
(NEWLINE)
(ID "format")
(PUNCT "=")
(ID "whitespace_replacement")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\s+")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(NEWLINE)
(KEYWORD while)
(LIT "%")
(KEYWORD in)
(ID "format")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "directive_index")
(PUNCT "=")
(ID "format")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(LIT "%")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(ID "processed_format")
(PUNCT "=")
(LIT "%s%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "processed_format")
(PUNCT ",")
(ID "format")
(PUNCT "[")
(PUNCT ":")
(ID "directive_index")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "self")
(PUNCT "[")
(ID "format")
(PUNCT "[")
(ID "directive_index")
(PUNCT "]")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "format")
(PUNCT "=")
(ID "format")
(PUNCT "[")
(ID "directive_index")
(PUNCT "+")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT "%s%s")
(PUNCT "%")
(PUNCT "(")
(ID "processed_format")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a compiled re object for the format string.")
(NEWLINE)
(KEYWORD return)
(ID "re_compile")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "pattern")
(PUNCT "(")
(ID "format")
(PUNCT ")")
(PUNCT ",")
(ID "IGNORECASE")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_cache_lock")
(PUNCT "=")
(ID "_thread_allocate_lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_TimeRE_cache")
(PUNCT "=")
(ID "TimeRE")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_CACHE_MAX_SIZE")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "_regex_cache")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "_calc_julian_from_U_or_W")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "week_of_year")
(PUNCT ",")
(ID "day_of_week")
(PUNCT ",")
(ID "week_starts_Mon")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Calculate the Julian day based on the year, week of the year, and day of\n    the week, with week_start_day representing whether the week of the year\n    assumes the week starts on Sunday or Monday (6 or 0).")
(NEWLINE)
(ID "first_weekday")
(PUNCT "=")
(ID "datetime_date")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "weekday")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "week_starts_Mon")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "first_weekday")
(PUNCT "=")
(PUNCT "(")
(ID "first_weekday")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(LIT 7)
(NEWLINE)
(ID "day_of_week")
(PUNCT "=")
(PUNCT "(")
(ID "day_of_week")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT "%")
(LIT 7)
(NEWLINE)
(DEDENT)
(ID "week_0_length")
(PUNCT "=")
(PUNCT "(")
(LIT 7)
(PUNCT "-")
(ID "first_weekday")
(PUNCT ")")
(PUNCT "%")
(LIT 7)
(NEWLINE)
(KEYWORD if)
(ID "week_of_year")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(PUNCT "+")
(ID "day_of_week")
(PUNCT "-")
(ID "first_weekday")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "days_to_week")
(PUNCT "=")
(ID "week_0_length")
(PUNCT "+")
(PUNCT "(")
(LIT 7)
(PUNCT "*")
(PUNCT "(")
(ID "week_of_year")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 1)
(PUNCT "+")
(ID "days_to_week")
(PUNCT "+")
(ID "day_of_week")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_strptime")
(PUNCT "(")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT "=")
(LIT "%a %b %d %H:%M:%S %Y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a 2-tuple consisting of a time struct and an int containing\n    the number of microseconds based on the input string and the\n    format string.")
(NEWLINE)
(KEYWORD for)
(ID "index")
(PUNCT ",")
(ID "arg")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(PUNCT "[")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "arg")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "strptime() argument {} must be str, not {}")
(NEWLINE)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "msg")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(ID "arg")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD global)
(ID "_TimeRE_cache")
(PUNCT ",")
(ID "_regex_cache")
(NEWLINE)
(KEYWORD with)
(ID "_cache_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_getlang")
(PUNCT "(")
(PUNCT ")")
(PUNCT "!=")
(ID "_TimeRE_cache")
(PUNCT ".")
(ID "locale_time")
(PUNCT ".")
(ID "lang")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_TimeRE_cache")
(PUNCT "=")
(ID "TimeRE")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "_regex_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "_regex_cache")
(PUNCT ")")
(PUNCT ">")
(ID "_CACHE_MAX_SIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_regex_cache")
(PUNCT ".")
(ID "clear")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "locale_time")
(PUNCT "=")
(ID "_TimeRE_cache")
(PUNCT ".")
(ID "locale_time")
(NEWLINE)
(ID "format_regex")
(PUNCT "=")
(ID "_regex_cache")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "format")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "format_regex")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "format_regex")
(PUNCT "=")
(ID "_TimeRE_cache")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(ID "format")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(KEYWORD as)
(ID "err")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bad_directive")
(PUNCT "=")
(ID "err")
(PUNCT ".")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "bad_directive")
(PUNCT "==")
(LIT "\\")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bad_directive")
(PUNCT "=")
(LIT "%")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "err")
(NEWLINE)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "'%s' is a bad directive in format '%s'")
(PUNCT "%")
(PUNCT "(")
(ID "bad_directive")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "IndexError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "stray %% in format '%s'")
(PUNCT "%")
(ID "format")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "_regex_cache")
(PUNCT "[")
(ID "format")
(PUNCT "]")
(PUNCT "=")
(ID "format_regex")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "found")
(PUNCT "=")
(ID "format_regex")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "data_string")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "time data %r does not match format %r")
(PUNCT "%")
(PUNCT "(")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "data_string")
(PUNCT ")")
(PUNCT "!=")
(ID "found")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unconverted data remains: %s")
(PUNCT "%")
(ID "data_string")
(PUNCT "[")
(ID "found")
(PUNCT ".")
(ID "end")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "year")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "month")
(PUNCT "=")
(ID "day")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "hour")
(PUNCT "=")
(ID "minute")
(PUNCT "=")
(ID "second")
(PUNCT "=")
(ID "fraction")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "tz")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "tzoffset")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "week_of_year")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "week_of_year_start")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "weekday")
(PUNCT "=")
(ID "julian")
(PUNCT "=")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(ID "found_dict")
(PUNCT "=")
(ID "found")
(PUNCT ".")
(ID "groupdict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "group_key")
(KEYWORD in)
(ID "found_dict")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "group_key")
(PUNCT "==")
(LIT "y")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "y")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "year")
(PUNCT "<=")
(LIT 68)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "+=")
(LIT 2000)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "+=")
(LIT 1900)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "Y")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "Y")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "m")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "month")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "m")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "B")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "month")
(PUNCT "=")
(ID "locale_time")
(PUNCT ".")
(ID "f_month")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "B")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "b")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "month")
(PUNCT "=")
(ID "locale_time")
(PUNCT ".")
(ID "a_month")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "b")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "day")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "d")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "H")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hour")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "H")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "I")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hour")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "I")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "ampm")
(PUNCT "=")
(ID "found_dict")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "p")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ampm")
(KEYWORD in)
(PUNCT "(")
(LIT "")
(PUNCT ",")
(ID "locale_time")
(PUNCT ".")
(ID "am_pm")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hour")
(PUNCT "==")
(LIT 12)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hour")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "ampm")
(PUNCT "==")
(ID "locale_time")
(PUNCT ".")
(ID "am_pm")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hour")
(PUNCT "!=")
(LIT 12)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "hour")
(PUNCT "+=")
(LIT 12)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "M")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "minute")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "M")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "S")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "second")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "S")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "f")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "found_dict")
(PUNCT "[")
(LIT "f")
(PUNCT "]")
(NEWLINE)
(ID "s")
(PUNCT "+=")
(LIT "0")
(PUNCT "*")
(PUNCT "(")
(LIT 6)
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "fraction")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "A")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "weekday")
(PUNCT "=")
(ID "locale_time")
(PUNCT ".")
(ID "f_weekday")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "A")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "a")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "weekday")
(PUNCT "=")
(ID "locale_time")
(PUNCT ".")
(ID "a_weekday")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "a")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "w")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "weekday")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "w")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "weekday")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "weekday")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "weekday")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "j")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "julian")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(LIT "j")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(KEYWORD in)
(PUNCT "(")
(LIT "U")
(PUNCT ",")
(LIT "W")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "week_of_year")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "found_dict")
(PUNCT "[")
(ID "group_key")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "group_key")
(PUNCT "==")
(LIT "U")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "week_of_year_start")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "week_of_year_start")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "z")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "z")
(PUNCT "=")
(ID "found_dict")
(PUNCT "[")
(LIT "z")
(PUNCT "]")
(NEWLINE)
(ID "tzoffset")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "z")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(PUNCT "*")
(LIT 60)
(PUNCT "+")
(ID "int")
(PUNCT "(")
(ID "z")
(PUNCT "[")
(LIT 3)
(PUNCT ":")
(LIT 5)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "z")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzoffset")
(PUNCT "=")
(PUNCT "-")
(ID "tzoffset")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "group_key")
(PUNCT "==")
(LIT "Z")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "found_zone")
(PUNCT "=")
(ID "found_dict")
(PUNCT "[")
(LIT "Z")
(PUNCT "]")
(PUNCT ".")
(ID "lower")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "value")
(PUNCT ",")
(ID "tz_values")
(KEYWORD in)
(ID "enumerate")
(PUNCT "(")
(ID "locale_time")
(PUNCT ".")
(ID "timezone")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "found_zone")
(KEYWORD in)
(ID "tz_values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "time")
(PUNCT ".")
(ID "tzname")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(ID "time")
(PUNCT ".")
(ID "tzname")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(KEYWORD and)
(ID "time")
(PUNCT ".")
(ID "daylight")
(KEYWORD and)
(ID "found_zone")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT "utc")
(PUNCT ",")
(LIT "gmt")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tz")
(PUNCT "=")
(ID "value")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "leap_year_fix")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD if)
(ID "year")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(ID "month")
(PUNCT "==")
(LIT 2)
(KEYWORD and)
(ID "day")
(PUNCT "==")
(LIT 29)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "=")
(LIT 1904)
(NEWLINE)
(ID "leap_year_fix")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "year")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "=")
(LIT 1900)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "julian")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "week_of_year")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(KEYWORD and)
(ID "weekday")
(PUNCT "!=")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "week_starts_Mon")
(PUNCT "=")
(KEYWORD True)
(KEYWORD if)
(ID "week_of_year_start")
(PUNCT "==")
(LIT 0)
(KEYWORD else)
(KEYWORD False)
(NEWLINE)
(ID "julian")
(PUNCT "=")
(ID "_calc_julian_from_U_or_W")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "week_of_year")
(PUNCT ",")
(ID "weekday")
(PUNCT ",")
(ID "week_starts_Mon")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "julian")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "julian")
(PUNCT "=")
(ID "datetime_date")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "day")
(PUNCT ")")
(PUNCT ".")
(ID "toordinal")
(PUNCT "(")
(PUNCT ")")
(PUNCT "-")
(ID "datetime_date")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "toordinal")
(PUNCT "(")
(PUNCT ")")
(PUNCT "+")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "datetime_result")
(PUNCT "=")
(ID "datetime_date")
(PUNCT ".")
(ID "fromordinal")
(PUNCT "(")
(PUNCT "(")
(ID "julian")
(PUNCT "-")
(LIT 1)
(PUNCT ")")
(PUNCT "+")
(ID "datetime_date")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ".")
(ID "toordinal")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "year")
(PUNCT "=")
(ID "datetime_result")
(PUNCT ".")
(ID "year")
(NEWLINE)
(ID "month")
(PUNCT "=")
(ID "datetime_result")
(PUNCT ".")
(ID "month")
(NEWLINE)
(ID "day")
(PUNCT "=")
(ID "datetime_result")
(PUNCT ".")
(ID "day")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "weekday")
(PUNCT "==")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "weekday")
(PUNCT "=")
(ID "datetime_date")
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "day")
(PUNCT ")")
(PUNCT ".")
(ID "weekday")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tzname")
(PUNCT "=")
(ID "found_dict")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "Z")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tzoffset")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gmtoff")
(PUNCT "=")
(ID "tzoffset")
(PUNCT "*")
(LIT 60)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "gmtoff")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "leap_year_fix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "year")
(PUNCT "=")
(LIT 1900)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "year")
(PUNCT ",")
(ID "month")
(PUNCT ",")
(ID "day")
(PUNCT ",")
(ID "hour")
(PUNCT ",")
(ID "minute")
(PUNCT ",")
(ID "second")
(PUNCT ",")
(ID "weekday")
(PUNCT ",")
(ID "julian")
(PUNCT ",")
(ID "tz")
(PUNCT ",")
(ID "tzname")
(PUNCT ",")
(ID "gmtoff")
(PUNCT ")")
(PUNCT ",")
(ID "fraction")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_strptime_time")
(PUNCT "(")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT "=")
(LIT "%a %b %d %H:%M:%S %Y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a time struct based on the input string and the\n    format string.")
(NEWLINE)
(ID "tt")
(PUNCT "=")
(ID "_strptime")
(PUNCT "(")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "time")
(PUNCT ".")
(ID "struct_time")
(PUNCT "(")
(ID "tt")
(PUNCT "[")
(PUNCT ":")
(ID "time")
(PUNCT ".")
(ID "_STRUCT_TM_ITEMS")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_strptime_datetime")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT "=")
(LIT "%a %b %d %H:%M:%S %Y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a class cls instance based on the input string and the\n    format string.")
(NEWLINE)
(ID "tt")
(PUNCT ",")
(ID "fraction")
(PUNCT "=")
(ID "_strptime")
(PUNCT "(")
(ID "data_string")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(NEWLINE)
(ID "tzname")
(PUNCT ",")
(ID "gmtoff")
(PUNCT "=")
(ID "tt")
(PUNCT "[")
(PUNCT "-")
(LIT 2)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "tt")
(PUNCT "[")
(PUNCT ":")
(LIT 6)
(PUNCT "]")
(PUNCT "+")
(PUNCT "(")
(ID "fraction")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "gmtoff")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tzdelta")
(PUNCT "=")
(ID "datetime_timedelta")
(PUNCT "(")
(ID "seconds")
(PUNCT "=")
(ID "gmtoff")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tzname")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tz")
(PUNCT "=")
(ID "datetime_timezone")
(PUNCT "(")
(ID "tzdelta")
(PUNCT ",")
(ID "tzname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tz")
(PUNCT "=")
(ID "datetime_timezone")
(PUNCT "(")
(ID "tzdelta")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "+=")
(PUNCT "(")
(ID "tz")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
