(LIT "Stuff to parse Sun and NeXT audio files.\n\nAn audio file consists of a header followed by the data.  The structure\nof the header is as follows.\n\n        +---------------+\n        | magic word    |\n        +---------------+\n        | header size   |\n        +---------------+\n        | data size     |\n        +---------------+\n        | encoding      |\n        +---------------+\n        | sample rate   |\n        +---------------+\n        | # of channels |\n        +---------------+\n        | info          |\n        |               |\n        +---------------+\n\nThe magic word consists of the 4 characters '.snd'.  Apart from the\ninfo field, all header fields are 4 bytes in size.  They are all\n32-bit unsigned integers encoded in big-endian byte order.\n\nThe header size really gives the start of the data.\nThe data size is the physical size of the data.  From the other\nparameters the number of frames can be calculated.\nThe encoding gives the way in which audio samples are encoded.\nPossible values are listed below.\nThe info field currently consists of an ASCII string giving a\nhuman-readable description of the audio file.  The info field is\npadded with NUL bytes to the header size.\n\nUsage.\n\nReading audio files:\n        f = sunau.open(file, 'r')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods read(), seek(), and close().\nWhen the setpos() and rewind() methods are not used, the seek()\nmethod is not  necessary.\n\nThis returns an instance of a class with the following public methods:\n        getnchannels()  -- returns number of audio channels (1 for\n                           mono, 2 for stereo)\n        getsampwidth()  -- returns sample width in bytes\n        getframerate()  -- returns sampling frequency\n        getnframes()    -- returns number of audio frames\n        getcomptype()   -- returns compression type ('NONE' or 'ULAW')\n        getcompname()   -- returns human-readable version of\n                           compression type ('not compressed' matches 'NONE')\n        getparams()     -- returns a namedtuple consisting of all of the\n                           above in the above order\n        getmarkers()    -- returns None (for compatibility with the\n                           aifc module)\n        getmark(id)     -- raises an error since the mark does not\n                           exist (for compatibility with the aifc module)\n        readframes(n)   -- returns at most n frames of audio\n        rewind()        -- rewind to the beginning of the audio stream\n        setpos(pos)     -- seek to the specified position\n        tell()          -- return the current position\n        close()         -- close the instance (make it unusable)\nThe position returned by tell() and the position given to setpos()\nare compatible and have nothing to do with the actual position in the\nfile.\nThe close() method is called automatically when the class instance\nis destroyed.\n\nWriting audio files:\n        f = sunau.open(file, 'w')\nwhere file is either the name of a file or an open file pointer.\nThe open file pointer must have methods write(), tell(), seek(), and\nclose().\n\nThis returns an instance of a class with the following public methods:\n        setnchannels(n) -- set the number of channels\n        setsampwidth(n) -- set the sample width\n        setframerate(n) -- set the frame rate\n        setnframes(n)   -- set the number of frames\n        setcomptype(type, name)\n                        -- set the compression type and the\n                           human-readable compression type\n        setparams(tuple)-- set all parameters at once\n        tell()          -- return current position in output file\n        writeframesraw(data)\n                        -- write audio frames without pathing up the\n                           file header\n        writeframes(data)\n                        -- write audio frames and patch up the file header\n        close()         -- patch up the file header and close the\n                           output file\nYou should set the parameters before the first writeframesraw or\nwriteframes.  The total number of frames does not need to be set,\nbut when it is set to the correct value, the header does not have to\nbe patched up.\nIt is best to first set all parameters, perhaps possibly the\ncompression type, and then write audio frames using writeframesraw.\nWhen all frames have been written, either call writeframes('') or\nclose() to patch up the sizes in the header.\nThe close() method is called automatically when the class instance\nis destroyed.\n")
(NEWLINE)
(KEYWORD from)
(ID "collections")
(KEYWORD import)
(ID "namedtuple")
(NEWLINE)
(ID "_sunau_params")
(PUNCT "=")
(ID "namedtuple")
(PUNCT "(")
(LIT "_sunau_params")
(PUNCT ",")
(LIT "nchannels sampwidth framerate nframes comptype compname")
(PUNCT ")")
(NEWLINE)
(ID "AUDIO_FILE_MAGIC")
(PUNCT "=")
(LIT 779316836)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_LINEAR_8")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_LINEAR_16")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_LINEAR_24")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_LINEAR_32")
(PUNCT "=")
(LIT 5)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_FLOAT")
(PUNCT "=")
(LIT 6)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_DOUBLE")
(PUNCT "=")
(LIT 7)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_ADPCM_G721")
(PUNCT "=")
(LIT 23)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_ADPCM_G722")
(PUNCT "=")
(LIT 24)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_ADPCM_G723_3")
(PUNCT "=")
(LIT 25)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_ADPCM_G723_5")
(PUNCT "=")
(LIT 26)
(NEWLINE)
(ID "AUDIO_FILE_ENCODING_ALAW_8")
(PUNCT "=")
(LIT 27)
(NEWLINE)
(ID "AUDIO_UNKNOWN_SIZE")
(PUNCT "=")
(LIT 4294967295)
(NEWLINE)
(ID "_simple_encodings")
(PUNCT "=")
(PUNCT "[")
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(PUNCT ",")
(ID "AUDIO_FILE_ENCODING_LINEAR_8")
(PUNCT ",")
(ID "AUDIO_FILE_ENCODING_LINEAR_16")
(PUNCT ",")
(ID "AUDIO_FILE_ENCODING_LINEAR_24")
(PUNCT ",")
(ID "AUDIO_FILE_ENCODING_LINEAR_32")
(PUNCT ",")
(ID "AUDIO_FILE_ENCODING_ALAW_8")
(PUNCT "]")
(NEWLINE)
(KEYWORD class)
(ID "Error")
(PUNCT "(")
(ID "Exception")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "byte")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "byte")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "EOFError")
(NEWLINE)
(DEDENT)
(ID "x")
(PUNCT "=")
(ID "x")
(PUNCT "*")
(LIT 256)
(PUNCT "+")
(ID "ord")
(PUNCT "(")
(ID "byte")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "x")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_u32")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT ",")
(ID "m")
(PUNCT "=")
(ID "divmod")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT 256)
(PUNCT ")")
(NEWLINE)
(ID "data")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "int")
(PUNCT "(")
(ID "m")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "x")
(PUNCT "=")
(ID "d")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "bytes")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Au_read")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "builtins")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_opened")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_opened")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "initfp")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "initfp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "magic")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "magic")
(PUNCT "!=")
(ID "AUDIO_FILE_MAGIC")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "bad magic number")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_hdr_size")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_hdr_size")
(PUNCT "<")
(LIT 24)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "header size too small")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_hdr_size")
(PUNCT ">")
(LIT 100)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "header size ridiculously large")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_data_size")
(PUNCT "=")
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_data_size")
(PUNCT "!=")
(ID "AUDIO_UNKNOWN_SIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_size")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_data_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(KEYWORD not)
(KEYWORD in)
(ID "_simple_encodings")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "encoding not (yet) supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(KEYWORD in)
(PUNCT "(")
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(PUNCT ",")
(ID "AUDIO_FILE_ENCODING_ALAW_8")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_LINEAR_8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_LINEAR_16")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_LINEAR_24")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_LINEAR_32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "unknown encoding")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "_read_u32")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_hdr_size")
(PUNCT ">")
(LIT 24)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_hdr_size")
(PUNCT "-")
(LIT 24)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT "[")
(ID "i")
(PUNCT "]")
(PUNCT "==")
(LIT #"\0")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT "[")
(PUNCT ":")
(ID "i")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_pos")
(PUNCT "=")
(ID "file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_data_pos")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getfp")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_file")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnchannels")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsampwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getframerate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnframes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_data_size")
(PUNCT "==")
(ID "AUDIO_UNKNOWN_SIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "AUDIO_UNKNOWN_SIZE")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(KEYWORD in)
(ID "_simple_encodings")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_data_size")
(PUNCT "//")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "ULAW")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_ALAW_8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "ALAW")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "NONE")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getcompname")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "CCITT G.711 u-law")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_ALAW_8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "CCITT G.711 A-law")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "not compressed")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getparams")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_sunau_params")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getnchannels")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getsampwidth")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getframerate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getnframes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getcomptype")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getcompname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmarkers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getmark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "no marks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "readframes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nframes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(KEYWORD in)
(ID "_simple_encodings")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "nframes")
(PUNCT "==")
(ID "AUDIO_UNKNOWN_SIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "nframes")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "+=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "//")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_encoding")
(PUNCT "==")
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "audioop")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "audioop")
(PUNCT ".")
(ID "ulaw2lin")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "rewind")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_data_pos")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "cannot seek")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_data_pos")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setpos")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pos")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pos")
(PUNCT "<")
(LIT 0)
(KEYWORD or)
(ID "pos")
(PUNCT ">")
(ID "self")
(PUNCT ".")
(ID "getnframes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "position not in range")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_data_pos")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "cannot seek")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_data_pos")
(PUNCT "+")
(ID "pos")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_soundpos")
(PUNCT "=")
(ID "pos")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_opened")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Au_write")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT "==")
(ID "type")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "builtins")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "builtins")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_opened")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_opened")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "initfp")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__enter__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__exit__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "initfp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "=")
(ID "AUDIO_UNKNOWN_SIZE")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT "=")
(LIT #"")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "=")
(LIT "ULAW")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setnchannels")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nchannels")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nchannels")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "only 1, 2, or 4 channels supported")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT "=")
(ID "nchannels")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnchannels")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "number of channels not set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setsampwidth")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sampwidth")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sampwidth")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT 1)
(PUNCT ",")
(LIT 2)
(PUNCT ",")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "bad sample width")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "=")
(ID "sampwidth")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getsampwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "sample width not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setframerate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "framerate")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT "=")
(ID "framerate")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getframerate")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "frame rate not set")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setnframes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "nframes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "cannot change parameters after starting to write")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "nframes")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "# of frames cannot be negative")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "=")
(ID "nframes")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnframes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "type")
(KEYWORD in)
(PUNCT "(")
(LIT "NONE")
(PUNCT ",")
(LIT "ULAW")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "=")
(ID "type")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "unknown compression type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "getcomptype")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getcompname")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "==")
(LIT "ULAW")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "CCITT G.711 u-law")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "==")
(LIT "ALAW")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "CCITT G.711 A-law")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "not compressed")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "setparams")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "params")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nchannels")
(PUNCT ",")
(ID "sampwidth")
(PUNCT ",")
(ID "framerate")
(PUNCT ",")
(ID "nframes")
(PUNCT ",")
(ID "comptype")
(PUNCT ",")
(ID "compname")
(PUNCT "=")
(ID "params")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setnchannels")
(PUNCT "(")
(ID "nchannels")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setsampwidth")
(PUNCT "(")
(ID "sampwidth")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setframerate")
(PUNCT "(")
(ID "framerate")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setnframes")
(PUNCT "(")
(ID "nframes")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "setcomptype")
(PUNCT "(")
(ID "comptype")
(PUNCT ",")
(ID "compname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getparams")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_sunau_params")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "getnchannels")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getsampwidth")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getframerate")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getnframes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getcomptype")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "getcompname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tell")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writeframesraw")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "memoryview")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ".")
(ID "cast")
(PUNCT "(")
(LIT "B")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_ensure_header_written")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "==")
(LIT "ULAW")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "audioop")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "audioop")
(PUNCT ".")
(ID "lin2ulaw")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "nframes")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "//")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "+")
(ID "nframes")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writeframes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writeframesraw")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_nframes")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_patchheader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_ensure_header_written")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_nframes")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "!=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_patchheader")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "flush")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_opened")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_ensure_header_written")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nframeswritten")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "# of channels not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "sample width not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "frame rate not specified")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_write_header")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_write_header")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "==")
(LIT "NONE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "AUDIO_FILE_ENCODING_LINEAR_8")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "==")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "AUDIO_FILE_ENCODING_LINEAR_16")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "==")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "AUDIO_FILE_ENCODING_LINEAR_24")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 3)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_sampwidth")
(PUNCT "==")
(LIT 4)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "AUDIO_FILE_ENCODING_LINEAR_32")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 4)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "internal error")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "self")
(PUNCT ".")
(ID "_comptype")
(PUNCT "==")
(LIT "ULAW")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "encoding")
(PUNCT "=")
(ID "AUDIO_FILE_ENCODING_MULAW_8")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "internal error")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(NEWLINE)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "AUDIO_FILE_MAGIC")
(PUNCT ")")
(NEWLINE)
(ID "header_size")
(PUNCT "=")
(LIT 25)
(PUNCT "+")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT ")")
(NEWLINE)
(ID "header_size")
(PUNCT "=")
(PUNCT "(")
(ID "header_size")
(PUNCT "+")
(LIT 7)
(PUNCT ")")
(PUNCT "&")
(PUNCT "~")
(LIT 7)
(NEWLINE)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "header_size")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "==")
(ID "AUDIO_UNKNOWN_SIZE")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "length")
(PUNCT "=")
(ID "AUDIO_UNKNOWN_SIZE")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "length")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_nframes")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_framesize")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "OSError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "length")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "=")
(ID "length")
(NEWLINE)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_framerate")
(PUNCT ")")
(NEWLINE)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_nchannels")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"\0")
(PUNCT "*")
(PUNCT "(")
(ID "header_size")
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_info")
(PUNCT ")")
(PUNCT "-")
(LIT 24)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_patchheader")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OSError")
(PUNCT "(")
(LIT "cannot seek")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_form_length_pos")
(PUNCT ")")
(NEWLINE)
(ID "_write_u32")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_datalength")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_datawritten")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_file")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "open")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "mode")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(LIT "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(ID "f")
(PUNCT ".")
(ID "mode")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "mode")
(PUNCT "=")
(LIT "rb")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "r")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Au_read")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "mode")
(KEYWORD in)
(PUNCT "(")
(LIT "w")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Au_write")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "Error")
(PUNCT "(")
(LIT "mode must be 'r', 'rb', 'w', or 'wb'")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "openfp")
(PUNCT "=")
(ID "open")
(NEWLINE)
(ENDMARKER)
