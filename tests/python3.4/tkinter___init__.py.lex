(LIT "Wrapper functions for Tcl/Tk.\n\nTkinter provides classes which allow the display, positioning and\ncontrol of widgets. Toplevel widgets are Tk and Toplevel. Other\nwidgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,\nCheckbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox\nLabelFrame and PanedWindow.\n\nProperties of the widgets are specified with keyword arguments.\nKeyword arguments have the same name as the corresponding resource\nunder Tk.\n\nWidgets are positioned with one of the geometry managers Place, Pack\nor Grid. These managers can be called with methods place, pack, grid\navailable in every Widget.\n\nActions are bound to events by resources (e.g. keyword argument\ncommand) or with the method bind.\n\nExample (Hello, World):\nimport tkinter\nfrom tkinter.constants import *\ntk = tkinter.Tk()\nframe = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)\nframe.pack(fill=BOTH,expand=1)\nlabel = tkinter.Label(frame, text=\"Hello, World\")\nlabel.pack(fill=X, expand=1)\nbutton = tkinter.Button(frame,text=\"Exit\",command=tk.destroy)\nbutton.pack(side=BOTTOM)\ntk.mainloop()\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "==")
(LIT "win32")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "tkinter")
(KEYWORD import)
(ID "_fix")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "_tkinter")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ImportError")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(PUNCT "+")
(LIT ", please install the python3-tk package")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "TclError")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "TclError")
(NEWLINE)
(KEYWORD from)
(ID "tkinter")
(PUNCT ".")
(ID "constants")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(ID "wantobjects")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "TkVersion")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "_tkinter")
(PUNCT ".")
(ID "TK_VERSION")
(PUNCT ")")
(NEWLINE)
(ID "TclVersion")
(PUNCT "=")
(ID "float")
(PUNCT "(")
(ID "_tkinter")
(PUNCT ".")
(ID "TCL_VERSION")
(PUNCT ")")
(NEWLINE)
(ID "READABLE")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "READABLE")
(NEWLINE)
(ID "WRITABLE")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "WRITABLE")
(NEWLINE)
(ID "EXCEPTION")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "EXCEPTION")
(NEWLINE)
(ID "_magic_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\\\{}])")
(PUNCT ")")
(NEWLINE)
(ID "_space_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "([\\s])")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "_stringify")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_stringify")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_stringify")
(PUNCT "(")
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "{")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT "{%s}")
(PUNCT "%")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT "{%s}")
(PUNCT "%")
(ID "_join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT "{}")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "_magic_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_magic_re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\\\\\1")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "_space_re")
(PUNCT ".")
(ID "sub")
(PUNCT "(")
(LIT "\\\\\\1")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "\"")
(KEYWORD or)
(ID "_space_re")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(LIT "{%s}")
(PUNCT "%")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_flatten")
(PUNCT "(")
(ID "seq")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "seq")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "res")
(PUNCT "+")
(ID "_flatten")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "item")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "res")
(PUNCT "=")
(ID "res")
(PUNCT "+")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(ID "_flatten")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "_flatten")
(NEWLINE)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD def)
(ID "_cnfmerge")
(PUNCT "(")
(ID "cnfs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "cnfs")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cnfs")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "cnfs")
(PUNCT ",")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(KEYWORD None)
(PUNCT ")")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cnfs")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "_flatten")
(PUNCT "(")
(ID "cnfs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "AttributeError")
(PUNCT ",")
(ID "TypeError")
(PUNCT ")")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "_cnfmerge: fallback due to:")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "c")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT "=")
(ID "v")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cnf")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(ID "_cnfmerge")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "_cnfmerge")
(NEWLINE)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(KEYWORD def)
(ID "_splitdict")
(PUNCT "(")
(ID "tk")
(PUNCT ",")
(ID "v")
(PUNCT ",")
(ID "cut_minus")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "conv")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a properly formatted dict built from Tcl list pairs.\n\n    If cut_minus is True, the supposed '-' prefix will be removed from\n    keys. If conv is specified, it is used to convert values.\n\n    Tcl list is expected to contain an even number of elements.\n    ")
(NEWLINE)
(ID "t")
(PUNCT "=")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(PUNCT "%")
(LIT 2)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Tcl list representing a dict is expected ")
(LIT "to contain an even number of elements")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "it")
(PUNCT "=")
(ID "iter")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "dict")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "it")
(PUNCT ",")
(ID "it")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "cut_minus")
(KEYWORD and)
(ID "key")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "key")
(PUNCT "=")
(ID "key")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "conv")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "conv")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "dict")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dict")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Event")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Container for the properties of an event.\n\n    Instances of this type are generated if one of the following events occurs:\n\n    KeyPress, KeyRelease - for keyboard events\n    ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events\n    Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,\n    Colormap, Gravity, Reparent, Property, Destroy, Activate,\n    Deactivate - for window events.\n\n    If a callback function for one of these events is registered\n    using bind, bind_all, bind_class, or tag_bind, the callback is\n    called with an Event as first argument. It will have the\n    following attributes (in braces are the event types for which\n    the attribute is valid):\n\n        serial - serial number of event\n    num - mouse button pressed (ButtonPress, ButtonRelease)\n    focus - whether the window has the focus (Enter, Leave)\n    height - height of the exposed window (Configure, Expose)\n    width - width of the exposed window (Configure, Expose)\n    keycode - keycode of the pressed key (KeyPress, KeyRelease)\n    state - state of the event as a number (ButtonPress, ButtonRelease,\n                            Enter, KeyPress, KeyRelease,\n                            Leave, Motion)\n    state - state as a string (Visibility)\n    time - when the event occurred\n    x - x-position of the mouse\n    y - y-position of the mouse\n    x_root - x-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    y_root - y-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    char - pressed character (KeyPress, KeyRelease)\n    send_event - see X/Windows documentation\n    keysym - keysym of the event as a string (KeyPress, KeyRelease)\n    keysym_num - keysym of the event as a number (KeyPress, KeyRelease)\n    type - type of the event as a number\n    widget - widget in which the event occurred\n    delta - delta of wheel movement (MouseWheel)\n    ")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "_support_default_root")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "_default_root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "NoDefaultRoot")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inhibit setting of default root window.\n\n    Call this function to inhibit that the first instance of\n    Tk is used for windows without an explicit parent window.\n    ")
(NEWLINE)
(KEYWORD global)
(ID "_support_default_root")
(NEWLINE)
(ID "_support_default_root")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD global)
(ID "_default_root")
(NEWLINE)
(ID "_default_root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD del)
(ID "_default_root")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_tkerror")
(PUNCT "(")
(ID "err")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_exit")
(PUNCT "(")
(ID "code")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function. Calling it will raise the exception SystemExit.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "int")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(ID "code")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_varnum")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD class)
(ID "Variable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Class to define value holders for e.g. buttons.\n\n    Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations\n    that constrain the type of the value returned from get().")
(NEWLINE)
(ID "_default")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "_tk")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_tclCommands")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a variable\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to \"\")\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "name")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "name must be a string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD global)
(ID "_varnum")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "master")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "master")
(PUNCT "=")
(ID "_default_root")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "=")
(ID "master")
(PUNCT ".")
(ID "_root")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT "=")
(ID "master")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(LIT "PY_VAR")
(PUNCT "+")
(ID "repr")
(PUNCT "(")
(ID "_varnum")
(PUNCT ")")
(NEWLINE)
(ID "_varnum")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "info")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "initialize")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unset the variable in Tcl.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tk")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "info")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalunsetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the variable in Tcl.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the variable to VALUE.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalsetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "initialize")
(PUNCT "=")
(ID "set")
(NEWLINE)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return value of variable.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalgetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "trace_variable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "callback")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Define a trace callback for the variable.\n\n        MODE is one of \"r\", \"w\", \"u\" for read, write, undefine.\n        CALLBACK must be a function which is called when\n        the variable is read, written or undefined.\n\n        Return the name of the callback.\n        ")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "CallWrapper")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__call__")
(NEWLINE)
(ID "cbname")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "callback")
(PUNCT "=")
(ID "callback")
(PUNCT ".")
(ID "__func__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cbname")
(PUNCT "=")
(ID "cbname")
(PUNCT "+")
(ID "callback")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "createcommand")
(PUNCT "(")
(ID "cbname")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cbname")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "trace")
(PUNCT ",")
(LIT "variable")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "cbname")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "cbname")
(NEWLINE)
(DEDENT)
(ID "trace")
(PUNCT "=")
(ID "trace_variable")
(NEWLINE)
(KEYWORD def)
(ID "trace_vdelete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "cbname")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete the trace callback for a variable.\n\n        MODE is one of \"r\", \"w\", \"u\" for read, write, undefine.\n        CBNAME is the name of the callback returned from trace_variable or trace.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "trace")
(PUNCT ",")
(LIT "vdelete")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ",")
(ID "mode")
(PUNCT ",")
(ID "cbname")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "cbname")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "cbname")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "trace_vinfo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all trace callback information.")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "trace")
(PUNCT ",")
(LIT "vinfo")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Comparison for equality (==).\n\n        Note: if the Variable's master matters to behavior\n        also compare self._master == other._master\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_name")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "StringVar")
(PUNCT "(")
(ID "Variable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Value holder for strings variables.")
(NEWLINE)
(ID "_default")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a string variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to \"\")\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ")
(NEWLINE)
(ID "Variable")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return value of variable as string.")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalgetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "IntVar")
(PUNCT "(")
(ID "Variable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Value holder for integer variables.")
(NEWLINE)
(ID "_default")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct an integer variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to 0)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ")
(NEWLINE)
(ID "Variable")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of the variable as an integer.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalgetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DoubleVar")
(PUNCT "(")
(ID "Variable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Value holder for float variables.")
(NEWLINE)
(ID "_default")
(PUNCT "=")
(LIT 0.0)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a float variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to 0.0)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ")
(NEWLINE)
(ID "Variable")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of the variable as a float.")
(NEWLINE)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalgetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BooleanVar")
(PUNCT "(")
(ID "Variable")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Value holder for boolean variables.")
(NEWLINE)
(ID "_default")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a boolean variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to False)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        ")
(NEWLINE)
(ID "Variable")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of the variable as a bool.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_tk")
(PUNCT ".")
(ID "globalgetvar")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid literal for getboolean()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "mainloop")
(PUNCT "(")
(ID "n")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the main loop of Tcl.")
(NEWLINE)
(ID "_default_root")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "getint")
(PUNCT "=")
(ID "int")
(NEWLINE)
(ID "getdouble")
(PUNCT "=")
(ID "float")
(NEWLINE)
(KEYWORD def)
(ID "getboolean")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert true and false to integer values 1 and 0.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_default_root")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid literal for getboolean()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Misc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal class.\n\n    Base class which defines methods common for interior widgets.")
(NEWLINE)
(ID "_tclCommands")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.\n\n        Delete all Tcl commands created for\n        this widget in the Tcl interpreter.")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "deletecommand")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.\n\n        Delete the Tcl command provided in NAME.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ".")
(ID "remove")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tk_strictMotif")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "boolean")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set Tcl internal variable, whether the look and feel\n        should adhere to Motif.\n\n        A parameter of 1 means adhere to Motif (e.g. no color\n        change if mouse passes over slider).\n        Returns the set value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "set")
(PUNCT ",")
(LIT "tk_strictMotif")
(PUNCT ",")
(ID "boolean")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_bisque")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Change the color scheme to light brown as used in Tk 3.6 and before.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_bisque")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_setPalette")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set a new color scheme for all widget elements.\n\n        A single color as argument will cause that all colors of Tk\n        widget elements are derived from this.\n        Alternatively several keyword parameters and its associated\n        colors can be given. The following keywords are valid:\n        activeBackground, foreground, selectColor,\n        activeForeground, highlightBackground, selectBackground,\n        background, highlightColor, selectForeground,\n        disabledForeground, insertBackground, troughColor.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "tk_setPalette")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "_flatten")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "+")
(ID "_flatten")
(PUNCT "(")
(ID "list")
(PUNCT "(")
(ID "kw")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_menuBar")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do not use. Needed in Tk 3.6 and earlier.")
(NEWLINE)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "tk_menuBar() does nothing and will be removed in 3.6")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wait_variable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "PY_VAR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wait until the variable is modified.\n\n        A parameter of type IntVar, StringVar, DoubleVar or\n        BooleanVar must be given.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkwait")
(PUNCT ",")
(LIT "variable")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "waitvar")
(PUNCT "=")
(ID "wait_variable")
(NEWLINE)
(KEYWORD def)
(ID "wait_window")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "window")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wait until a WIDGET is destroyed.\n\n        If no parameter is given self is used.")
(NEWLINE)
(KEYWORD if)
(ID "window")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "window")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkwait")
(PUNCT ",")
(LIT "window")
(PUNCT ",")
(ID "window")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wait_visibility")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "window")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Wait until the visibility of a WIDGET changes\n        (e.g. it appears).\n\n        If no parameter is given self is used.")
(NEWLINE)
(KEYWORD if)
(ID "window")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "window")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkwait")
(PUNCT ",")
(LIT "visibility")
(PUNCT ",")
(ID "window")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "setvar")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "PY_VAR")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(LIT "1")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set Tcl variable NAME to VALUE.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "setvar")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getvar")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "PY_VAR")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return value of Tcl variable NAME.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getvar")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "getint")
(PUNCT "=")
(ID "int")
(NEWLINE)
(ID "getdouble")
(PUNCT "=")
(ID "float")
(NEWLINE)
(KEYWORD def)
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a boolean value for Tcl boolean values true and false given as parameter.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "invalid literal for getboolean()")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "focus_set")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Direct input focus to this widget.\n\n        If the application currently does not have the focus\n        this widget will get the focus if the application gets\n        the focus through the window manager.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "focus")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "focus")
(PUNCT "=")
(ID "focus_set")
(NEWLINE)
(KEYWORD def)
(ID "focus_force")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Direct input focus to this widget even if the\n        application does not have the focus. Use with\n        caution!")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "focus")
(PUNCT ",")
(LIT "-force")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "focus_get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the widget which has currently the focus in the\n        application.\n\n        Use focus_displayof to allow working with several\n        displays. Return None if application does not have\n        the focus.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "focus")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "none")
(KEYWORD or)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "focus_displayof")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the widget which has currently the focus on the\n        display where this widget is located.\n\n        Return None if the application does not have the focus.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "focus")
(PUNCT ",")
(LIT "-displayof")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "none")
(KEYWORD or)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "focus_lastfor")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the widget which would have the focus if top level\n        for this widget gets the focus from the window manager.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "focus")
(PUNCT ",")
(LIT "-lastfor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "none")
(KEYWORD or)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_focusFollowsMouse")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The widget under mouse will get automatically focus. Can not\n        be disabled easily.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_focusFollowsMouse")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_focusNext")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the next widget in the focus order which follows\n        widget which has currently the focus.\n\n        The focus order first goes to the next child, then to\n        the children of the child recursively and then to the\n        next sibling which is higher in the stacking order.  A\n        widget is omitted if it has the takefocus resource set\n        to 0.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_focusNext")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_focusPrev")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return previous widget in the focus order. See tk_focusNext for details.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_focusPrev")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "after")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "ms")
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call function once after given time.\n\n        MS specifies the time in milliseconds. FUNC gives the\n        function which shall be called. Additional parameters\n        are given as parameters to the function call.  Return\n        identifier to cancel scheduling with after_cancel.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "func")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "after")
(PUNCT ",")
(ID "ms")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "callit")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "callit")
(PUNCT ".")
(ID "__name__")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "callit")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "after")
(PUNCT ",")
(ID "ms")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "after_idle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call FUNC once if the Tcl main loop has no event to\n        process.\n\n        Return an identifier to cancel the scheduling with\n        after_cancel.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "after")
(PUNCT "(")
(LIT "idle")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "after_cancel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Cancel scheduling of function identified with ID.\n\n        Identifier returned by after or after_idle must be\n        given as first parameter.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "after")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(NEWLINE)
(ID "script")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "script")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "after")
(PUNCT ",")
(LIT "cancel")
(PUNCT ",")
(ID "id")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bell")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "displayof")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Ring a display's bell.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "bell")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_displayof")
(PUNCT "(")
(ID "displayof")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clipboard_get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Retrieve data from the clipboard on window's display.\n\n        The window keyword defaults to the root window of the Tkinter\n        application.\n\n        The type keyword specifies the form in which the data is\n        to be returned and should be an atom name such as STRING\n        or FILE_NAME.  Type defaults to STRING, except on X11, where the default\n        is to try UTF8_STRING and fall back to STRING.\n\n        This command is equivalent to:\n\n        selection_get(CLIPBOARD)\n        ")
(NEWLINE)
(KEYWORD if)
(LIT "type")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_windowingsystem")
(PUNCT "==")
(LIT "x11")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(PUNCT "=")
(LIT "UTF8_STRING")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "clipboard")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "kw")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "clipboard")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clipboard_clear")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the data in the Tk clipboard.\n\n        A widget specified for the optional displayof keyword\n        argument specifies the target display.")
(NEWLINE)
(KEYWORD if)
(LIT "displayof")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(PUNCT ":")
(ID "kw")
(PUNCT "[")
(LIT "displayof")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "clipboard")
(PUNCT ",")
(LIT "clear")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "clipboard_append")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Append STRING to the Tk clipboard.\n\n        A widget specified at the optional displayof keyword\n        argument specifies the target display. The clipboard\n        can be retrieved with selection_get.")
(NEWLINE)
(KEYWORD if)
(LIT "displayof")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(PUNCT ":")
(ID "kw")
(PUNCT "[")
(LIT "displayof")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "clipboard")
(PUNCT ",")
(LIT "append")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(LIT "--")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grab_current")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return widget which has currently the grab in this application\n        or None.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grab")
(PUNCT ",")
(LIT "current")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grab_release")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Release grab for this widget if currently set.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grab")
(PUNCT ",")
(LIT "release")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grab_set")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set grab for this widget.\n\n        A grab directs all events to this and descendant\n        widgets in the application.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grab")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grab_set_global")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set global grab for this widget.\n\n        A global grab directs all events to this and\n        descendant widgets on the display. Use with caution -\n        other applications do not get events anymore.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grab")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(LIT "-global")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grab_status")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return None, \"local\" or \"global\" if this widget has\n        no, a local or a global grab.")
(NEWLINE)
(ID "status")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grab")
(PUNCT ",")
(LIT "status")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "status")
(PUNCT "==")
(LIT "none")
(PUNCT ":")
(ID "status")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "status")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "option_add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "priority")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set a VALUE (second parameter) for an option\n        PATTERN (first parameter).\n\n        An optional third parameter gives the numeric priority\n        (defaults to 80).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "option")
(PUNCT ",")
(LIT "add")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "priority")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "option_clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the option database.\n\n        It will be reloaded if option_add is called.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "option")
(PUNCT ",")
(LIT "clear")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "option_get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "className")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value for an option NAME for this widget\n        with CLASSNAME.\n\n        Values with higher priority override lower values.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "option")
(PUNCT ",")
(LIT "get")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "className")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "option_readfile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileName")
(PUNCT ",")
(ID "priority")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read file FILENAME into the option database.\n\n        An optional second parameter gives the numeric\n        priority.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "option")
(PUNCT ",")
(LIT "readfile")
(PUNCT ",")
(ID "fileName")
(PUNCT ",")
(ID "priority")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_clear")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the current X selection.")
(NEWLINE)
(KEYWORD if)
(LIT "displayof")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(PUNCT ":")
(ID "kw")
(PUNCT "[")
(LIT "displayof")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "selection")
(PUNCT ",")
(LIT "clear")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the contents of the current X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection and defaults to PRIMARY.  A keyword\n        parameter displayof specifies a widget on the display\n        to use. A keyword parameter type specifies the form of data to be\n        fetched, defaulting to STRING except on X11, where UTF8_STRING is tried\n        before STRING.")
(NEWLINE)
(KEYWORD if)
(LIT "displayof")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(PUNCT ":")
(ID "kw")
(PUNCT "[")
(LIT "displayof")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(KEYWORD if)
(LIT "type")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_windowingsystem")
(PUNCT "==")
(LIT "x11")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "kw")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(PUNCT "=")
(LIT "UTF8_STRING")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "selection")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "kw")
(PUNCT "[")
(LIT "type")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "selection")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_handle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Specify a function COMMAND to call if the X\n        selection owned by this widget is queried by another\n        application.\n\n        This function must return the contents of the\n        selection. The function will be called with the\n        arguments OFFSET and LENGTH which allows the chunking\n        of very long selections. The following keyword\n        parameters can be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "selection")
(PUNCT ",")
(LIT "handle")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_own")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Become owner of X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection (default PRIMARY).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "selection")
(PUNCT ",")
(LIT "own")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_own_get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return owner of X selection.\n\n        The following keyword parameter can\n        be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).")
(NEWLINE)
(KEYWORD if)
(LIT "displayof")
(KEYWORD not)
(KEYWORD in)
(ID "kw")
(PUNCT ":")
(ID "kw")
(PUNCT "[")
(LIT "displayof")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "selection")
(PUNCT ",")
(LIT "own")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "send")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "interp")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Send Tcl command CMD to different interpreter INTERP to be executed.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "send")
(PUNCT ",")
(ID "interp")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "lower")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "belowThis")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Lower this widget in the stacking order.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "lower")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "belowThis")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tkraise")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "aboveThis")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Raise this widget in the stacking order.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "raise")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "aboveThis")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lift")
(PUNCT "=")
(ID "tkraise")
(NEWLINE)
(KEYWORD def)
(ID "colormodel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Useless. Not implemented in Tk.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk")
(PUNCT ",")
(LIT "colormodel")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_atom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "displayof")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return integer which represents atom NAME.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "atom")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_displayof")
(PUNCT "(")
(ID "displayof")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_atomname")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ",")
(ID "displayof")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return name of atom with identifier ID.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "atomname")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_displayof")
(PUNCT "(")
(ID "displayof")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "id")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_cells")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return number of cells in the colormap for this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "cells")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_children")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all widgets which are children of this widget.")
(NEWLINE)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "child")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "children")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "child")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_class")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return window class name of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "class")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_colormapfull")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if at the last color request the colormap was full.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "colormapfull")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_containing")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "rootX")
(PUNCT ",")
(ID "rootY")
(PUNCT ",")
(ID "displayof")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the widget which is at the root coordinates ROOTX, ROOTY.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "containing")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_displayof")
(PUNCT "(")
(ID "displayof")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "rootX")
(PUNCT ",")
(ID "rootY")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_depth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of bits per pixel.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "depth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_exists")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if this widget exists.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "exists")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_fpixels")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "number")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of pixels for the given distance NUMBER\n        (e.g. \"3c\") as float.")
(NEWLINE)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "fpixels")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "number")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_geometry")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return geometry string for this widget in the form \"widthxheight+X+Y\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "geometry")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_height")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return height of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "height")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return identifier ID for this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "id")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_interps")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "displayof")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of all Tcl interpreters for this display.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "interps")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_displayof")
(PUNCT "(")
(ID "displayof")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_ismapped")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if this widget is mapped.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "ismapped")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_manager")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the window mananger name for this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "manager")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "name")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_parent")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the parent of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "parent")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_pathname")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "id")
(PUNCT ",")
(ID "displayof")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the pathname of the widget given by ID.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "pathname")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_displayof")
(PUNCT "(")
(ID "displayof")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "id")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_pixels")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "number")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Rounded integer value of winfo_fpixels.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "pixels")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "number")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_pointerx")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the x coordinate of the pointer on the root window.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "pointerx")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_pointerxy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of x and y coordinates of the pointer on the root window.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "pointerxy")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_pointery")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the y coordinate of the pointer on the root window.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "pointery")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_reqheight")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return requested height of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "reqheight")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_reqwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return requested width of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "reqwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_rgb")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "color")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return tuple of decimal values for red, green, blue for\n        COLOR in this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "rgb")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "color")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_rootx")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return x coordinate of upper left corner of this widget on the\n        root window.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "rootx")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_rooty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return y coordinate of upper left corner of this widget on the\n        root window.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "rooty")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screen")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the screen name of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screen")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screencells")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of the cells in the colormap of the screen\n        of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screencells")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screendepth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of bits per pixel of the root window of the\n        screen of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screendepth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screenheight")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of pixels of the height of the screen of this widget\n        in pixel.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screenheight")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screenmmheight")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of pixels of the height of the screen of\n        this widget in mm.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screenmmheight")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screenmmwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of pixels of the width of the screen of\n        this widget in mm.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screenmmwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screenvisual")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the default\n        colormodel of this screen.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screenvisual")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_screenwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of pixels of the width of the screen of\n        this widget in pixel.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "screenwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_server")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return information of the X-Server of the screen of this widget in\n        the form \"XmajorRminor vendor vendorVersion\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "server")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_toplevel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the toplevel widget of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "toplevel")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_viewable")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return true if the widget and all its higher ancestors are mapped.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "viewable")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_visual")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the\n        colormodel of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "visual")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_visualid")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the X identifier for the visual for this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "visualid")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_visualsavailable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "includeids")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all visuals available for the screen\n        of this widget.\n\n        Each item in the list consists of a visual name (see winfo_visual), a\n        depth and if INCLUDEIDS=1 is given also the X identifier.")
(NEWLINE)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "visualsavailable")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "includeids")
(KEYWORD and)
(LIT "includeids")
(KEYWORD or)
(KEYWORD None)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "__winfo_parseitem")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "data")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__winfo_parseitem")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "t")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "+")
(ID "tuple")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__winfo_getint")
(PUNCT ",")
(ID "t")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__winfo_getint")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "x")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_vrootheight")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the height of the virtual root window associated with this\n        widget in pixels. If there is no virtual root window return the\n        height of the screen.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "vrootheight")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_vrootwidth")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the width of the virtual root window associated with this\n        widget in pixel. If there is no virtual root window return the\n        width of the screen.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "vrootwidth")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_vrootx")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the x offset of the virtual root relative to the root\n        window of the screen of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "vrootx")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_vrooty")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the y offset of the virtual root relative to the root\n        window of the screen of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "vrooty")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_width")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the width of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "width")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_x")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the x coordinate of the upper left corner of this widget\n        in the parent.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "x")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "winfo_y")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the y coordinate of the upper left corner of this widget\n        in the parent.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "winfo")
(PUNCT ",")
(LIT "y")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "update")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Enter event loop until all pending events have been processed by Tcl.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "update")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "update_idletasks")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Enter event loop until all idle callbacks have been called. This\n        will update the display of windows but not process events caused by\n        the user.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "update")
(PUNCT ",")
(LIT "idletasks")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bindtags")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagList")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or get the list of bindtags for this widget.\n\n        With no argument return the list of all bindtags associated with\n        this widget. With a list of strings as argument the bindtags are\n        set to this list. The bindtags determine in which order events are\n        processed (see bind).")
(NEWLINE)
(KEYWORD if)
(ID "tagList")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "bindtags")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "bindtags")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "tagList")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "what")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ",")
(ID "needcleanup")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "what")
(PUNCT "+")
(PUNCT "(")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "func")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "funcid")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_substitute")
(PUNCT ",")
(ID "needcleanup")
(PUNCT ")")
(NEWLINE)
(ID "cmd")
(PUNCT "=")
(PUNCT "(")
(LIT "%sif {\"[%s %s]\" == \"break\"} break\n")
(PUNCT "%")
(PUNCT "(")
(ID "add")
(KEYWORD and)
(LIT "+")
(KEYWORD or)
(LIT "")
(PUNCT ",")
(ID "funcid")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_subst_format_str")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "what")
(PUNCT "+")
(PUNCT "(")
(ID "sequence")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "funcid")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "sequence")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "what")
(PUNCT "+")
(PUNCT "(")
(ID "sequence")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "what")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind to this widget at event SEQUENCE a call to function FUNC.\n\n        SEQUENCE is a string of concatenated event\n        patterns. An event pattern is of the form\n        <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one\n        of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,\n        Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,\n        B3, Alt, Button4, B4, Double, Button5, B5 Triple,\n        Mod1, M1. TYPE is one of Activate, Enter, Map,\n        ButtonPress, Button, Expose, Motion, ButtonRelease\n        FocusIn, MouseWheel, Circulate, FocusOut, Property,\n        Colormap, Gravity Reparent, Configure, KeyPress, Key,\n        Unmap, Deactivate, KeyRelease Visibility, Destroy,\n        Leave and DETAIL is the button number for ButtonPress,\n        ButtonRelease and DETAIL is the Keysym for KeyPress and\n        KeyRelease. Examples are\n        <Control-Button-1> for pressing Control and mouse button 1 or\n        <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).\n        An event pattern can also be a virtual event of the form\n        <<AString>> where AString can be arbitrary. This\n        event can be generated by event_generate.\n        If events are concatenated they must appear shortly\n        after each other.\n\n        FUNC will be called if the event sequence occurs with an\n        instance of Event as argument. If the return value of FUNC is\n        \"break\" no further bound function is invoked.\n\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function.\n\n        Bind will return an identifier to allow deletion of the bound function with\n        unbind without memory leak.\n\n        If FUNC or SEQUENCE is omitted the bound function or list\n        of bound events are returned.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(PUNCT "(")
(LIT "bind")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "funcid")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unbind for this widget for event SEQUENCE  the\n        function identified with FUNCID.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "bind")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "funcid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "funcid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "bind_all")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind to all widgets at an event SEQUENCE a call to function FUNC.\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function. See bind for the return value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(PUNCT "(")
(LIT "bind")
(PUNCT ",")
(LIT "all")
(PUNCT ")")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unbind_all")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unbind for all widgets for event SEQUENCE all functions.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "bind")
(PUNCT ",")
(LIT "all")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bind_class")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "className")
(PUNCT ",")
(ID "sequence")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind to widgets with bindtag CLASSNAME at event\n        SEQUENCE a call of function FUNC. An additional\n        boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or\n        whether it will replace the previous function. See bind for\n        the return value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(PUNCT "(")
(LIT "bind")
(PUNCT ",")
(ID "className")
(PUNCT ")")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unbind_class")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "className")
(PUNCT ",")
(ID "sequence")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE\n        all functions.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "bind")
(PUNCT ",")
(ID "className")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mainloop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call the mainloop of Tk.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(ID "n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "quit")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Quit the Tcl interpreter. All widgets will be destroyed.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "quit")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "getint")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_getdoubles")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "getdouble")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_displayof")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "displayof")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "displayof")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "-displayof")
(PUNCT ",")
(ID "displayof")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "displayof")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(LIT "-displayof")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "property")
(NEWLINE)
(KEYWORD def)
(ID "_windowingsystem")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_windowingsystem_cached")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ws")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_windowingsystem_cached")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk")
(PUNCT ",")
(LIT "windowingsystem")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "ws")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(ID "cnf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "cnf")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "k")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(ID "k")
(PUNCT "=")
(ID "k")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "v")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nv")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "item")
(KEYWORD in)
(ID "v")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nv")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "str")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "item")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "nv")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_stringify")
(PUNCT "(")
(ID "item")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "nv")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "res")
(PUNCT "+")
(PUNCT "(")
(LIT "-")
(PUNCT "+")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "nametowidget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the Tkinter instance of a widget identified by\n        its Tcl name NAME.")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ".")
(PUNCT ")")
(NEWLINE)
(ID "w")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "w")
(PUNCT "=")
(ID "w")
(PUNCT ".")
(ID "_root")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "n")
(KEYWORD in)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "n")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "w")
(PUNCT "=")
(ID "w")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "n")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "w")
(NEWLINE)
(DEDENT)
(ID "_nametowidget")
(PUNCT "=")
(ID "nametowidget")
(NEWLINE)
(KEYWORD def)
(ID "_register")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "subst")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "needcleanup")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a newly created Tcl function. If this\n        function is called, the Python function FUNC will\n        be executed. An optional function SUBST can\n        be given which will be executed before FUNC.")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "CallWrapper")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "subst")
(PUNCT ",")
(ID "self")
(PUNCT ")")
(PUNCT ".")
(ID "__call__")
(NEWLINE)
(ID "name")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__func__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "name")
(PUNCT "+")
(ID "func")
(PUNCT ".")
(ID "__name__")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "createcommand")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "needcleanup")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "name")
(NEWLINE)
(DEDENT)
(ID "register")
(PUNCT "=")
(ID "_register")
(NEWLINE)
(KEYWORD def)
(ID "_root")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "w")
(PUNCT "=")
(ID "self")
(NEWLINE)
(KEYWORD while)
(ID "w")
(PUNCT ".")
(ID "master")
(PUNCT ":")
(ID "w")
(PUNCT "=")
(ID "w")
(PUNCT ".")
(ID "master")
(NEWLINE)
(KEYWORD return)
(ID "w")
(NEWLINE)
(DEDENT)
(ID "_subst_format")
(PUNCT "=")
(PUNCT "(")
(LIT "%#")
(PUNCT ",")
(LIT "%b")
(PUNCT ",")
(LIT "%f")
(PUNCT ",")
(LIT "%h")
(PUNCT ",")
(LIT "%k")
(PUNCT ",")
(LIT "%s")
(PUNCT ",")
(LIT "%t")
(PUNCT ",")
(LIT "%w")
(PUNCT ",")
(LIT "%x")
(PUNCT ",")
(LIT "%y")
(PUNCT ",")
(LIT "%A")
(PUNCT ",")
(LIT "%E")
(PUNCT ",")
(LIT "%K")
(PUNCT ",")
(LIT "%N")
(PUNCT ",")
(LIT "%W")
(PUNCT ",")
(LIT "%T")
(PUNCT ",")
(LIT "%X")
(PUNCT ",")
(LIT "%Y")
(PUNCT ",")
(LIT "%D")
(PUNCT ")")
(NEWLINE)
(ID "_subst_format_str")
(PUNCT "=")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "_subst_format")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_substitute")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "!=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_subst_format")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "args")
(NEWLINE)
(ID "getboolean")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(NEWLINE)
(ID "getint")
(PUNCT "=")
(ID "int")
(NEWLINE)
(KEYWORD def)
(ID "getint_event")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Tk changed behavior in 8.4.2, returning \"??\" rather more often.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "int")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "s")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "nsign")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "f")
(PUNCT ",")
(ID "h")
(PUNCT ",")
(ID "k")
(PUNCT ",")
(ID "s")
(PUNCT ",")
(ID "t")
(PUNCT ",")
(ID "w")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "A")
(PUNCT ",")
(ID "E")
(PUNCT ",")
(ID "K")
(PUNCT ",")
(ID "N")
(PUNCT ",")
(ID "W")
(PUNCT ",")
(ID "T")
(PUNCT ",")
(ID "X")
(PUNCT ",")
(ID "Y")
(PUNCT ",")
(ID "D")
(PUNCT "=")
(ID "args")
(NEWLINE)
(ID "e")
(PUNCT "=")
(ID "Event")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "serial")
(PUNCT "=")
(ID "getint")
(PUNCT "(")
(ID "nsign")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "num")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(ID "e")
(PUNCT ".")
(ID "focus")
(PUNCT "=")
(ID "getboolean")
(PUNCT "(")
(ID "f")
(PUNCT ")")
(NEWLINE)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "height")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "h")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "keycode")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "state")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "time")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "width")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "w")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "x")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "y")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "y")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "char")
(PUNCT "=")
(ID "A")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(ID "e")
(PUNCT ".")
(ID "send_event")
(PUNCT "=")
(ID "getboolean")
(PUNCT "(")
(ID "E")
(PUNCT ")")
(NEWLINE)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(KEYWORD pass)
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "keysym")
(PUNCT "=")
(ID "K")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "keysym_num")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "N")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "type")
(PUNCT "=")
(ID "T")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT ".")
(ID "widget")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "W")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT ".")
(ID "widget")
(PUNCT "=")
(ID "W")
(NEWLINE)
(DEDENT)
(ID "e")
(PUNCT ".")
(ID "x_root")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "X")
(PUNCT ")")
(NEWLINE)
(ID "e")
(PUNCT ".")
(ID "y_root")
(PUNCT "=")
(ID "getint_event")
(PUNCT "(")
(ID "Y")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT ".")
(ID "delta")
(PUNCT "=")
(ID "getint")
(PUNCT "(")
(ID "D")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "e")
(PUNCT ".")
(ID "delta")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "(")
(ID "e")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_report_exception")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "exc")
(PUNCT ",")
(ID "val")
(PUNCT ",")
(ID "tb")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "exc_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "report_callback_exception")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "val")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Call Tcl configure command and return the result as a dict.")
(NEWLINE)
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(NEWLINE)
(ID "cnf")
(PUNCT "[")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "x")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "cnf")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_getconfigure1")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "x")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "x")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "cnf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(ID "cnf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cnf")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getconfigure")
(PUNCT "(")
(ID "_flatten")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getconfigure1")
(PUNCT "(")
(ID "_flatten")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "cnf")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "_flatten")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "cmd")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure resources of a widget.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method keys.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(LIT "configure")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "config")
(PUNCT "=")
(ID "configure")
(NEWLINE)
(KEYWORD def)
(ID "cget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the resource value for a KEY given as string.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "cget")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "__getitem__")
(PUNCT "=")
(ID "cget")
(NEWLINE)
(KEYWORD def)
(ID "__setitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(PUNCT "{")
(ID "key")
(PUNCT ":")
(ID "value")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "keys")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all resource names of this widget.")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "configure")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the window path name of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(DEDENT)
(ID "_noarg_")
(PUNCT "=")
(PUNCT "[")
(LIT "_noarg_")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "pack_propagate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flag")
(PUNCT "=")
(ID "_noarg_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given the current setting will be returned.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "flag")
(KEYWORD is)
(ID "Misc")
(PUNCT ".")
(ID "_noarg_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "pack")
(PUNCT ",")
(LIT "propagate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "pack")
(PUNCT ",")
(LIT "propagate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "flag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "propagate")
(PUNCT "=")
(ID "pack_propagate")
(NEWLINE)
(KEYWORD def)
(ID "pack_slaves")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all slaves of this widget\n        in its packing order.")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "pack")
(PUNCT ",")
(LIT "slaves")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "slaves")
(PUNCT "=")
(ID "pack_slaves")
(NEWLINE)
(KEYWORD def)
(ID "place_slaves")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all slaves of this widget\n        in its packing order.")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "place")
(PUNCT ",")
(LIT "slaves")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grid_anchor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "anchor")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The anchor value controls how to place the grid within the\n        master when no row/column has any weight.\n\n        The default anchor is nw.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "anchor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "anchor")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "anchor")
(PUNCT "=")
(ID "grid_anchor")
(NEWLINE)
(KEYWORD def)
(ID "grid_bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "row")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "col2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "row2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of integer coordinates for the bounding\n        box of this widget controlled by the geometry manager grid.\n\n        If COLUMN, ROW is given the bounding box applies from\n        the cell with row and column 0 to the specified\n        cell. If COL2 and ROW2 are given the bounding box\n        starts at that cell.\n\n        The returned integers specify the offset of the upper left\n        corner in the master widget and the width and height.\n        ")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "bbox")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "column")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "row")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(ID "column")
(PUNCT ",")
(ID "row")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "col2")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "row2")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(ID "col2")
(PUNCT ",")
(ID "row2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "bbox")
(PUNCT "=")
(ID "grid_bbox")
(NEWLINE)
(KEYWORD def)
(ID "_gridconvvalue")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "_tkinter")
(PUNCT ".")
(ID "Tcl_Obj")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "svalue")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "svalue")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT ".")
(KEYWORD in)
(ID "svalue")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "svalue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "svalue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_grid_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "cnf")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "cnf")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "cnf")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "cnf")
(NEWLINE)
(DEDENT)
(ID "options")
(PUNCT "=")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_splitdict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ",")
(ID "conv")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_gridconvvalue")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT "+")
(ID "options")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_gridconvvalue")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "grid_columnconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure column INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the column),\n        weight (how much does additional space propagate to this column)\n        and pad (how much space to let additionally).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_grid_configure")
(PUNCT "(")
(LIT "columnconfigure")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "columnconfigure")
(PUNCT "=")
(ID "grid_columnconfigure")
(NEWLINE)
(KEYWORD def)
(ID "grid_location")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of column and row which identify the cell\n        at which the pixel at position X and Y inside the master\n        widget is located.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "location")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grid_propagate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "flag")
(PUNCT "=")
(ID "_noarg_")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given, the current setting will be returned.\n        ")
(NEWLINE)
(KEYWORD if)
(ID "flag")
(KEYWORD is)
(ID "Misc")
(PUNCT ".")
(ID "_noarg_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "propagate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "propagate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "flag")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "grid_rowconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure row INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the row),\n        weight (how much does additional space propagate to this row)\n        and pad (how much space to let additionally).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_grid_configure")
(PUNCT "(")
(LIT "rowconfigure")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "rowconfigure")
(PUNCT "=")
(ID "grid_rowconfigure")
(NEWLINE)
(KEYWORD def)
(ID "grid_size")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of the number of column and rows in the grid.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "size")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "size")
(PUNCT "=")
(ID "grid_size")
(NEWLINE)
(KEYWORD def)
(ID "grid_slaves")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "row")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "column")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all slaves of this widget\n        in its packing order.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "row")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(LIT "-row")
(PUNCT ",")
(ID "row")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "column")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(LIT "-column")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "slaves")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "event_add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ",")
(PUNCT "*")
(ID "sequences")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind a virtual event VIRTUAL (of the form <<Name>>)\n        to an event SEQUENCE such that the virtual event is triggered\n        whenever SEQUENCE occurs.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "event")
(PUNCT ",")
(LIT "add")
(PUNCT ",")
(ID "virtual")
(PUNCT ")")
(PUNCT "+")
(ID "sequences")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "event_delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT ",")
(PUNCT "*")
(ID "sequences")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unbind a virtual event VIRTUAL from SEQUENCE.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "event")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "virtual")
(PUNCT ")")
(PUNCT "+")
(ID "sequences")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "event_generate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Generate an event SEQUENCE. Additional\n        keyword arguments specify parameter of the event\n        (e.g. x, y, rootx, rooty).")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "event")
(PUNCT ",")
(LIT "generate")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "sequence")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "kw")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(LIT "-%s")
(PUNCT "%")
(ID "k")
(PUNCT ",")
(ID "str")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "event_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "virtual")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all virtual events or the information\n        about the SEQUENCE bound to the virtual event VIRTUAL.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "event")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(ID "virtual")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all existing image names.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_types")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all available image types (e.g. phote bitmap).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "types")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "CallWrapper")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal class. Stores function to call when some user\n    defined Tcl function is called e.g. after an event occurred.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "subst")
(PUNCT ",")
(ID "widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store FUNC, SUBST and WIDGET as members.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "func")
(PUNCT "=")
(ID "func")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "subst")
(PUNCT "=")
(ID "subst")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT "=")
(ID "widget")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Apply first function SUBST to arguments, than FUNC.")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "subst")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "subst")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "func")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "SystemExit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "widget")
(PUNCT ".")
(ID "_report_exception")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "XView")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Mix-in class for querying and changing the horizontal position\n    of a widget's window.")
(NEWLINE)
(KEYWORD def)
(ID "xview")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query and change the horizontal position of the view.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "xview")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getdoubles")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "xview_moveto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fraction")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjusts the view in the window so that FRACTION of the\n        total width of the canvas is off-screen to the left.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "xview")
(PUNCT ",")
(LIT "moveto")
(PUNCT ",")
(ID "fraction")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xview_scroll")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "number")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shift the x-view according to NUMBER which is measured in \"units\"\n        or \"pages\" (WHAT).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "xview")
(PUNCT ",")
(LIT "scroll")
(PUNCT ",")
(ID "number")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "YView")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Mix-in class for querying and changing the vertical position\n    of a widget's window.")
(NEWLINE)
(KEYWORD def)
(ID "yview")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query and change the vertical position of the view.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "yview")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getdoubles")
(PUNCT "(")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "yview_moveto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fraction")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjusts the view in the window so that FRACTION of the\n        total height of the canvas is off-screen to the top.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "yview")
(PUNCT ",")
(LIT "moveto")
(PUNCT ",")
(ID "fraction")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "yview_scroll")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "number")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Shift the y-view according to NUMBER which is measured in\n        \"units\" or \"pages\" (WHAT).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "yview")
(PUNCT ",")
(LIT "scroll")
(PUNCT ",")
(ID "number")
(PUNCT ",")
(ID "what")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Wm")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Provides functions for the communication with the window manager.")
(NEWLINE)
(KEYWORD def)
(ID "wm_aspect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "minNumer")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "minDenom")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "maxNumer")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "maxDenom")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager to set the aspect ratio (width/height)\n        of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple\n        of the actual values if no argument is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "aspect")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "minNumer")
(PUNCT ",")
(ID "minDenom")
(PUNCT ",")
(ID "maxNumer")
(PUNCT ",")
(ID "maxDenom")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "aspect")
(PUNCT "=")
(ID "wm_aspect")
(NEWLINE)
(KEYWORD def)
(ID "wm_attributes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This subcommand returns or sets platform specific attributes\n\n        The first form returns a list of the platform specific flags and\n        their values. The second form returns the value for the specific\n        option. The third form sets one or more of the values. The values\n        are as follows:\n\n        On Windows, -disabled gets or sets whether the window is in a\n        disabled state. -toolwindow gets or sets the style of the window\n        to toolwindow (as defined in the MSDN). -topmost gets or sets\n        whether this is a topmost window (displays above all other\n        windows).\n\n        On Macintosh, XXXXX\n\n        On Unix, there are currently no special attribute values.\n        ")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "attributes")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "attributes")
(PUNCT "=")
(ID "wm_attributes")
(NEWLINE)
(KEYWORD def)
(ID "wm_client")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store NAME in WM_CLIENT_MACHINE property of this widget. Return\n        current value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "client")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "client")
(PUNCT "=")
(ID "wm_client")
(NEWLINE)
(KEYWORD def)
(ID "wm_colormapwindows")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "wlist")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store list of window names (WLIST) into WM_COLORMAPWINDOWS property\n        of this widget. This list contains windows whose colormaps differ from their\n        parents. Return current list of widgets if WLIST is empty.")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "wlist")
(PUNCT ")")
(PUNCT ">")
(LIT 1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "wlist")
(PUNCT "=")
(PUNCT "(")
(ID "wlist")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "colormapwindows")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "wlist")
(NEWLINE)
(KEYWORD if)
(ID "wlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_nametowidget")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "colormapwindows")
(PUNCT "=")
(ID "wm_colormapwindows")
(NEWLINE)
(KEYWORD def)
(ID "wm_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Store VALUE in WM_COMMAND property. It is the command\n        which shall be used to invoke the application. Return current\n        command if VALUE is None.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "command")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "command")
(PUNCT "=")
(ID "wm_command")
(NEWLINE)
(KEYWORD def)
(ID "wm_deiconify")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deiconify this widget. If it was never mapped it will not be mapped.\n        On Windows it will raise this widget and give it the focus.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "deiconify")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "deiconify")
(PUNCT "=")
(ID "wm_deiconify")
(NEWLINE)
(KEYWORD def)
(ID "wm_focusmodel")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "model")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set focus model to MODEL. \"active\" means that this widget will claim\n        the focus itself, \"passive\" means that the window manager shall give\n        the focus. Return current focus model if MODEL is None.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "focusmodel")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "model")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "focusmodel")
(PUNCT "=")
(ID "wm_focusmodel")
(NEWLINE)
(KEYWORD def)
(ID "wm_forget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "window")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The window will be unmappend from the screen and will no longer\n        be managed by wm. toplevel windows will be treated like frame\n        windows once they are no longer managed by wm, however, the menu\n        option configuration will be remembered and the menus will return\n        once the widget is managed again.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "forget")
(PUNCT ",")
(ID "window")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "forget")
(PUNCT "=")
(ID "wm_forget")
(NEWLINE)
(KEYWORD def)
(ID "wm_frame")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return identifier for decorative frame of this widget if present.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "frame")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "frame")
(PUNCT "=")
(ID "wm_frame")
(NEWLINE)
(KEYWORD def)
(ID "wm_geometry")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newGeometry")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return\n        current value if None is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "geometry")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "newGeometry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "geometry")
(PUNCT "=")
(ID "wm_geometry")
(NEWLINE)
(KEYWORD def)
(ID "wm_grid")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "baseWidth")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "baseHeight")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "widthInc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "heightInc")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager that this widget shall only be\n        resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and\n        height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the\n        number of grid units requested in Tk_GeometryRequest.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "grid")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "baseWidth")
(PUNCT ",")
(ID "baseHeight")
(PUNCT ",")
(ID "widthInc")
(PUNCT ",")
(ID "heightInc")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "grid")
(PUNCT "=")
(ID "wm_grid")
(NEWLINE)
(KEYWORD def)
(ID "wm_group")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pathName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the group leader widgets for related widgets to PATHNAME. Return\n        the group leader of this widget if None is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "group")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "pathName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "group")
(PUNCT "=")
(ID "wm_group")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconbitmap")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "bitmap")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set bitmap for the iconified widget to BITMAP. Return\n        the bitmap if None is given.\n\n        Under Windows, the DEFAULT parameter can be used to set the icon\n        for the widget and any descendents that don't have an icon set\n        explicitly.  DEFAULT can be the relative path to a .ico file\n        (example: root.iconbitmap(default='myicon.ico') ).  See Tk\n        documentation for more information.")
(NEWLINE)
(KEYWORD if)
(ID "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconbitmap")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "-default")
(PUNCT ",")
(ID "default")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconbitmap")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "bitmap")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "iconbitmap")
(PUNCT "=")
(ID "wm_iconbitmap")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconify")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display widget as icon.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconify")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iconify")
(PUNCT "=")
(ID "wm_iconify")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconmask")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "bitmap")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set mask for the icon bitmap of this widget. Return the\n        mask if None is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconmask")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "bitmap")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iconmask")
(PUNCT "=")
(ID "wm_iconmask")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconname")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the name of the icon for this widget. Return the name if\n        None is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconname")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "newName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iconname")
(PUNCT "=")
(ID "wm_iconname")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconphoto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "default")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets the titlebar icon for this window based on the named photo\n        images passed through args. If default is True, this is applied to\n        all future created toplevels as well.\n\n        The data in the images is taken as a snapshot at the time of\n        invocation. If the images are later changed, this is not reflected\n        to the titlebar icons. Multiple images are accepted to allow\n        different images sizes to be provided. The window manager may scale\n        provided icons to an appropriate size.\n\n        On Windows, the images are packed into a Windows icon structure.\n        This will override an icon specified to wm_iconbitmap, and vice\n        versa.\n\n        On X, the images are arranged into the _NET_WM_ICON X property,\n        which most modern window managers support. An icon specified by\n        wm_iconbitmap may exist simuultaneously.\n\n        On Macintosh, this currently does nothing.")
(NEWLINE)
(KEYWORD if)
(ID "default")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconphoto")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "-default")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconphoto")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "iconphoto")
(PUNCT "=")
(ID "wm_iconphoto")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconposition")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "y")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the position of the icon of this widget to X and Y. Return\n        a tuple of the current values of X and X if None is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconposition")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iconposition")
(PUNCT "=")
(ID "wm_iconposition")
(NEWLINE)
(KEYWORD def)
(ID "wm_iconwindow")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pathName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set widget PATHNAME to be displayed instead of icon. Return the current\n        value if None is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "iconwindow")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "pathName")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "iconwindow")
(PUNCT "=")
(ID "wm_iconwindow")
(NEWLINE)
(KEYWORD def)
(ID "wm_manage")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The widget specified will become a stand alone top-level window.\n        The window will be decorated with the window managers title bar,\n        etc.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "manage")
(PUNCT ",")
(ID "widget")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "manage")
(PUNCT "=")
(ID "wm_manage")
(NEWLINE)
(KEYWORD def)
(ID "wm_maxsize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "height")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set max WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "maxsize")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "maxsize")
(PUNCT "=")
(ID "wm_maxsize")
(NEWLINE)
(KEYWORD def)
(ID "wm_minsize")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "height")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set min WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "minsize")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "minsize")
(PUNCT "=")
(ID "wm_minsize")
(NEWLINE)
(KEYWORD def)
(ID "wm_overrideredirect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "boolean")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager to ignore this widget\n        if BOOLEAN is given with 1. Return the current value if None\n        is given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "overrideredirect")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "boolean")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "overrideredirect")
(PUNCT "=")
(ID "wm_overrideredirect")
(NEWLINE)
(KEYWORD def)
(ID "wm_positionfrom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "who")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager that the position of this widget shall\n        be defined by the user if WHO is \"user\", and by its own policy if WHO is\n        \"program\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "positionfrom")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "who")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "positionfrom")
(PUNCT "=")
(ID "wm_positionfrom")
(NEWLINE)
(KEYWORD def)
(ID "wm_protocol")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind function FUNC to command NAME for this widget.\n        Return the function bound to NAME if None is given. NAME could be\n        e.g. \"WM_SAVE_YOURSELF\" or \"WM_DELETE_WINDOW\".")
(NEWLINE)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command")
(PUNCT "=")
(ID "func")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "protocol")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "protocol")
(PUNCT "=")
(ID "wm_protocol")
(NEWLINE)
(KEYWORD def)
(ID "wm_resizable")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "width")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "height")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager whether this width can be resized\n        in WIDTH or HEIGHT. Both values are boolean values.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "resizable")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "width")
(PUNCT ",")
(ID "height")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "resizable")
(PUNCT "=")
(ID "wm_resizable")
(NEWLINE)
(KEYWORD def)
(ID "wm_sizefrom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "who")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager that the size of this widget shall\n        be defined by the user if WHO is \"user\", and by its own policy if WHO is\n        \"program\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "sizefrom")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "who")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "sizefrom")
(PUNCT "=")
(ID "wm_sizefrom")
(NEWLINE)
(KEYWORD def)
(ID "wm_state")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newstate")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or set the state of this widget as one of normal, icon,\n        iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "state")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "newstate")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "state")
(PUNCT "=")
(ID "wm_state")
(NEWLINE)
(KEYWORD def)
(ID "wm_title")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "string")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the title of this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "title")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "title")
(PUNCT "=")
(ID "wm_title")
(NEWLINE)
(KEYWORD def)
(ID "wm_transient")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Instruct the window manager that this widget is transient\n        with regard to widget MASTER.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "transient")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "master")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "transient")
(PUNCT "=")
(ID "wm_transient")
(NEWLINE)
(KEYWORD def)
(ID "wm_withdraw")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Withdraw this widget from the screen such that it is unmapped\n        and forgotten by the window manager. Re-draw it with wm_deiconify.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "wm")
(PUNCT ",")
(LIT "withdraw")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "withdraw")
(PUNCT "=")
(ID "wm_withdraw")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Tk")
(PUNCT "(")
(ID "Misc")
(PUNCT ",")
(ID "Wm")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toplevel widget of Tk which represents mostly the main window\n    of an application. It has an associated Tcl interpreter.")
(NEWLINE)
(ID "_w")
(PUNCT "=")
(LIT ".")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "screenName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "baseName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "className")
(PUNCT "=")
(LIT "Tk")
(PUNCT ",")
(ID "useTk")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sync")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "use")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will\n        be created. BASENAME will be used for the identification of the profile file (see\n        readprofile).\n        It is constructed from sys.argv[0] without extensions if None is given. CLASSNAME\n        is the name of the widget class.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "children")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tkloaded")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "baseName")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "os")
(NEWLINE)
(ID "baseName")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "basename")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(ID "baseName")
(PUNCT ",")
(ID "ext")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "baseName")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "ext")
(KEYWORD not)
(KEYWORD in)
(PUNCT "(")
(LIT ".py")
(PUNCT ",")
(LIT ".pyc")
(PUNCT ",")
(LIT ".pyo")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "baseName")
(PUNCT "=")
(ID "baseName")
(PUNCT "+")
(ID "ext")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "interactive")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(ID "_tkinter")
(PUNCT ".")
(ID "create")
(PUNCT "(")
(ID "screenName")
(PUNCT ",")
(ID "baseName")
(PUNCT ",")
(ID "className")
(PUNCT ",")
(ID "interactive")
(PUNCT ",")
(ID "wantobjects")
(PUNCT ",")
(ID "useTk")
(PUNCT ",")
(ID "sync")
(PUNCT ",")
(ID "use")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "useTk")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loadtk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "sys")
(PUNCT ".")
(ID "flags")
(PUNCT ".")
(ID "ignore_environment")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "readprofile")
(PUNCT "(")
(ID "baseName")
(PUNCT ",")
(ID "className")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "loadtk")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_tkloaded")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "loadtk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loadtk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_loadtk")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tkloaded")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD global)
(ID "_default_root")
(NEWLINE)
(ID "tk_version")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getvar")
(PUNCT "(")
(LIT "tk_version")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tk_version")
(PUNCT "!=")
(ID "_tkinter")
(PUNCT ".")
(ID "TK_VERSION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "tk.h version (%s) doesn't match libtk.a version (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "_tkinter")
(PUNCT ".")
(ID "TK_VERSION")
(PUNCT ",")
(ID "tk_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tcl_version")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getvar")
(PUNCT "(")
(LIT "tcl_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tcl_version")
(PUNCT "!=")
(ID "_tkinter")
(PUNCT ".")
(ID "TCL_VERSION")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "tcl.h version (%s) doesn't match libtcl.a version (%s)")
(PUNCT "%")
(PUNCT "(")
(ID "_tkinter")
(PUNCT ".")
(ID "TCL_VERSION")
(PUNCT ",")
(ID "tcl_version")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "TkVersion")
(PUNCT "<")
(LIT 4.0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Tk 4.0 or higher is required; found Tk %s")
(PUNCT "%")
(ID "str")
(PUNCT "(")
(ID "TkVersion")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "createcommand")
(PUNCT "(")
(LIT "tkerror")
(PUNCT ",")
(ID "_tkerror")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "createcommand")
(PUNCT "(")
(LIT "exit")
(PUNCT ",")
(ID "_exit")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "tkerror")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "exit")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "_support_default_root")
(KEYWORD and)
(KEYWORD not)
(ID "_default_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_default_root")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "protocol")
(PUNCT "(")
(LIT "WM_DELETE_WINDOW")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "destroy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Destroy this and all descendants widgets. This will\n        end the application of this Tcl interpreter.")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "children")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(ID "c")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "destroy")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(ID "Misc")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(KEYWORD global)
(ID "_default_root")
(NEWLINE)
(KEYWORD if)
(ID "_support_default_root")
(KEYWORD and)
(ID "_default_root")
(KEYWORD is)
(ID "self")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_default_root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readprofile")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "baseName")
(PUNCT ",")
(ID "className")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into\n        the Tcl Interpreter and calls exec on the contents of BASENAME.py and\n        CLASSNAME.py if such a file exists in the home directory.")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD if)
(LIT "HOME")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(ID "home")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "HOME")
(PUNCT "]")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "home")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "curdir")
(NEWLINE)
(ID "class_tcl")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "home")
(PUNCT ",")
(LIT ".%s.tcl")
(PUNCT "%")
(ID "className")
(PUNCT ")")
(NEWLINE)
(ID "class_py")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "home")
(PUNCT ",")
(LIT ".%s.py")
(PUNCT "%")
(ID "className")
(PUNCT ")")
(NEWLINE)
(ID "base_tcl")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "home")
(PUNCT ",")
(LIT ".%s.tcl")
(PUNCT "%")
(ID "baseName")
(PUNCT ")")
(NEWLINE)
(ID "base_py")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "home")
(PUNCT ",")
(LIT ".%s.py")
(PUNCT "%")
(ID "baseName")
(PUNCT ")")
(NEWLINE)
(ID "dir")
(PUNCT "=")
(PUNCT "{")
(LIT "self")
(PUNCT ":")
(ID "self")
(PUNCT "}")
(NEWLINE)
(ID "exec")
(PUNCT "(")
(LIT "from tkinter import *")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "class_tcl")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "source")
(PUNCT ",")
(ID "class_tcl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "class_py")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "class_py")
(PUNCT ")")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "base_tcl")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "source")
(PUNCT ",")
(ID "base_tcl")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "base_py")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "exec")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "base_py")
(PUNCT ")")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "dir")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "report_callback_exception")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "exc")
(PUNCT ",")
(ID "val")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Report callback exception on sys.stderr.\n\n        Applications may want to override this internal function, and\n        should when sys.stderr is None.")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "Exception in Tkinter callback")
(PUNCT ",")
(ID "file")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ")")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_type")
(PUNCT "=")
(ID "exc")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_value")
(PUNCT "=")
(ID "val")
(NEWLINE)
(ID "sys")
(PUNCT ".")
(ID "last_traceback")
(PUNCT "=")
(ID "tb")
(NEWLINE)
(ID "traceback")
(PUNCT ".")
(ID "print_exception")
(PUNCT "(")
(ID "exc")
(PUNCT ",")
(ID "val")
(PUNCT ",")
(ID "tb")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delegate attribute access to the interpreter object")
(NEWLINE)
(KEYWORD return)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "Tcl")
(PUNCT "(")
(ID "screenName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "baseName")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "className")
(PUNCT "=")
(LIT "Tk")
(PUNCT ",")
(ID "useTk")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Tk")
(PUNCT "(")
(ID "screenName")
(PUNCT ",")
(ID "baseName")
(PUNCT ",")
(ID "className")
(PUNCT ",")
(ID "useTk")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Pack")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Geometry manager Pack.\n\n    Base class to use the methods pack_* in every widget.")
(NEWLINE)
(KEYWORD def)
(ID "pack_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Pack a widget in the parent widget. Use as options:\n        after=widget - pack it after you have packed widget\n        anchor=NSEW (or subset) - position widget according to\n                                  given direction\n        before=widget - pack it before you will pack widget\n        expand=bool - expand widget if parent size grows\n        fill=NONE or X or Y or BOTH - fill widget if widget grows\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "pack")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "pack")
(PUNCT "=")
(ID "configure")
(PUNCT "=")
(ID "config")
(PUNCT "=")
(ID "pack_configure")
(NEWLINE)
(KEYWORD def)
(ID "pack_forget")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unmap this widget and do not use it for the packing order.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "pack")
(PUNCT ",")
(LIT "forget")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "forget")
(PUNCT "=")
(ID "pack_forget")
(NEWLINE)
(KEYWORD def)
(ID "pack_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return information about the packing options\n        for this widget.")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "_splitdict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "pack")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "in")
(KEYWORD in)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(LIT "in")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "nametowidget")
(PUNCT "(")
(ID "d")
(PUNCT "[")
(LIT "in")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(ID "pack_info")
(NEWLINE)
(ID "propagate")
(PUNCT "=")
(ID "pack_propagate")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "pack_propagate")
(NEWLINE)
(ID "slaves")
(PUNCT "=")
(ID "pack_slaves")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "pack_slaves")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Place")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Geometry manager Place.\n\n    Base class to use the methods place_* in every widget.")
(NEWLINE)
(KEYWORD def)
(ID "place_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Place a widget in the parent widget. Use as options:\n        in=master - master relative to which the widget is placed\n        in_=master - see 'in' option description\n        x=amount - locate anchor of this widget at position x of master\n        y=amount - locate anchor of this widget at position y of master\n        relx=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to width of master (1.0 is right edge)\n        rely=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to height of master (1.0 is bottom edge)\n        anchor=NSEW (or subset) - position anchor according to given direction\n        width=amount - width of this widget in pixel\n        height=amount - height of this widget in pixel\n        relwidth=amount - width of this widget between 0.0 and 1.0\n                          relative to width of master (1.0 is the same width\n                          as the master)\n        relheight=amount - height of this widget between 0.0 and 1.0\n                           relative to height of master (1.0 is the same\n                           height as the master)\n        bordermode=\"inside\" or \"outside\" - whether to take border width of\n                                           master widget into account\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "place")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "place")
(PUNCT "=")
(ID "configure")
(PUNCT "=")
(ID "config")
(PUNCT "=")
(ID "place_configure")
(NEWLINE)
(KEYWORD def)
(ID "place_forget")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unmap this widget.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "place")
(PUNCT ",")
(LIT "forget")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "forget")
(PUNCT "=")
(ID "place_forget")
(NEWLINE)
(KEYWORD def)
(ID "place_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return information about the placing options\n        for this widget.")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "_splitdict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "place")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "in")
(KEYWORD in)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(LIT "in")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "nametowidget")
(PUNCT "(")
(ID "d")
(PUNCT "[")
(LIT "in")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(ID "place_info")
(NEWLINE)
(ID "slaves")
(PUNCT "=")
(ID "place_slaves")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "place_slaves")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Grid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Geometry manager Grid.\n\n    Base class to use the methods grid_* in every widget.")
(NEWLINE)
(KEYWORD def)
(ID "grid_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Position a widget in the parent widget in a grid. Use as options:\n        column=number - use cell identified with given column (starting with 0)\n        columnspan=number - this widget will span several columns\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        row=number - use cell identified with given row (starting with 0)\n        rowspan=number - this widget will span several rows\n        sticky=NSEW - if cell is larger on which sides will this\n                      widget stick to the cell boundary\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "grid")
(PUNCT "=")
(ID "configure")
(PUNCT "=")
(ID "config")
(PUNCT "=")
(ID "grid_configure")
(NEWLINE)
(ID "bbox")
(PUNCT "=")
(ID "grid_bbox")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_bbox")
(NEWLINE)
(ID "columnconfigure")
(PUNCT "=")
(ID "grid_columnconfigure")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_columnconfigure")
(NEWLINE)
(KEYWORD def)
(ID "grid_forget")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unmap this widget.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "forget")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "forget")
(PUNCT "=")
(ID "grid_forget")
(NEWLINE)
(KEYWORD def)
(ID "grid_remove")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unmap this widget but remember the grid options.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "remove")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "grid_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return information about the options\n        for positioning this widget in a grid.")
(NEWLINE)
(ID "d")
(PUNCT "=")
(ID "_splitdict")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "grid")
(PUNCT ",")
(LIT "info")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "in")
(KEYWORD in)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "[")
(LIT "in")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "nametowidget")
(PUNCT "(")
(ID "d")
(PUNCT "[")
(LIT "in")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "d")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(ID "grid_info")
(NEWLINE)
(ID "location")
(PUNCT "=")
(ID "grid_location")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_location")
(NEWLINE)
(ID "propagate")
(PUNCT "=")
(ID "grid_propagate")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_propagate")
(NEWLINE)
(ID "rowconfigure")
(PUNCT "=")
(ID "grid_rowconfigure")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_rowconfigure")
(NEWLINE)
(ID "size")
(PUNCT "=")
(ID "grid_size")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_size")
(NEWLINE)
(ID "slaves")
(PUNCT "=")
(ID "grid_slaves")
(PUNCT "=")
(ID "Misc")
(PUNCT ".")
(ID "grid_slaves")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "BaseWidget")
(PUNCT "(")
(ID "Misc")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal class.")
(NEWLINE)
(KEYWORD def)
(ID "_setup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "cnf")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function. Sets up information about children.")
(NEWLINE)
(KEYWORD if)
(ID "_support_default_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_default_root")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "master")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "_default_root")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_default_root")
(PUNCT "=")
(ID "Tk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "master")
(PUNCT "=")
(ID "_default_root")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT "=")
(ID "master")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(ID "master")
(PUNCT ".")
(ID "tk")
(NEWLINE)
(ID "name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(LIT "name")
(KEYWORD in)
(ID "cnf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "cnf")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "cnf")
(PUNCT "[")
(LIT "name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "name")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(KEYWORD if)
(ID "master")
(PUNCT ".")
(ID "_w")
(PUNCT "==")
(LIT ".")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT "=")
(LIT ".")
(PUNCT "+")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT "=")
(ID "master")
(PUNCT ".")
(ID "_w")
(PUNCT "+")
(LIT ".")
(PUNCT "+")
(ID "name")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "children")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "]")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "widgetName")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "kw")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "extra")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a widget with the parent widget MASTER, a name WIDGETNAME\n        and appropriate options.")
(NEWLINE)
(KEYWORD if)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "widgetName")
(PUNCT "=")
(ID "widgetName")
(NEWLINE)
(ID "BaseWidget")
(PUNCT ".")
(ID "_setup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "cnf")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_tclCommands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "classes")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "cnf")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "cnf")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "widgetName")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(PUNCT "+")
(ID "extra")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "classes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "k")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Destroy this and all descendants widgets.")
(NEWLINE)
(KEYWORD for)
(ID "c")
(KEYWORD in)
(ID "list")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "children")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(ID "c")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "destroy")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_name")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "children")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "master")
(PUNCT ".")
(ID "children")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "Misc")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_do")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "args")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Widget")
(PUNCT "(")
(ID "BaseWidget")
(PUNCT ",")
(ID "Pack")
(PUNCT ",")
(ID "Place")
(PUNCT ",")
(ID "Grid")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal class.\n\n    Base class for a widget which can be positioned with the geometry managers\n    Pack, Place or Grid.")
(NEWLINE)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Toplevel")
(PUNCT "(")
(ID "BaseWidget")
(PUNCT ",")
(ID "Wm")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toplevel widget, e.g. for dialogs.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a toplevel widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, class,\n        colormap, container, cursor, height, highlightbackground,\n        highlightcolor, highlightthickness, menu, relief, screen, takefocus,\n        use, visual, width.")
(NEWLINE)
(KEYWORD if)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "extra")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "wmkey")
(KEYWORD in)
(PUNCT "[")
(LIT "screen")
(PUNCT ",")
(LIT "class_")
(PUNCT ",")
(LIT "class")
(PUNCT ",")
(LIT "visual")
(PUNCT ",")
(LIT "colormap")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "wmkey")
(KEYWORD in)
(ID "cnf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "cnf")
(PUNCT "[")
(ID "wmkey")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "wmkey")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(ID "opt")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "wmkey")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD else)
(PUNCT ":")
(ID "opt")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "wmkey")
(NEWLINE)
(ID "extra")
(PUNCT "=")
(ID "extra")
(PUNCT "+")
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "cnf")
(PUNCT "[")
(ID "wmkey")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "BaseWidget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "toplevel")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "extra")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_root")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "iconname")
(PUNCT "(")
(ID "root")
(PUNCT ".")
(ID "iconname")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(ID "root")
(PUNCT ".")
(ID "title")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "protocol")
(PUNCT "(")
(LIT "WM_DELETE_WINDOW")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "destroy")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Button")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Button widget.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a button widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, activeforeground, anchor,\n            background, bitmap, borderwidth, cursor,\n            disabledforeground, font, foreground\n            highlightbackground, highlightcolor,\n            highlightthickness, image, justify,\n            padx, pady, relief, repeatdelay,\n            repeatinterval, takefocus, text,\n            textvariable, underline, wraplength\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, compound, default, height,\n            overrelief, state, width\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "button")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tkButtonEnter")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "dummy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkButtonEnter")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tkButtonLeave")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "dummy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkButtonLeave")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tkButtonDown")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "dummy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkButtonDown")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tkButtonUp")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "dummy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkButtonUp")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tkButtonInvoke")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "dummy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tkButtonInvoke")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flash")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Flash the button.\n\n        This is accomplished by redisplaying\n        the button several times, alternating between active and\n        normal colors. At the end of the flash the button is left\n        in the same normal/active state as when the command was\n        invoked. This command is ignored if the button's state is\n        disabled.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "flash")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Invoke the command associated with the button.\n\n        The return value is the return value from the command,\n        or an empty string if there is no command associated with\n        the button. This command is ignored if the button's state\n        is disabled.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Canvas")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "XView")
(PUNCT ",")
(ID "YView")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Canvas widget to display graphical elements like lines or text.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a canvas widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, closeenough,\n        confine, cursor, height, highlightbackground, highlightcolor,\n        highlightthickness, insertbackground, insertborderwidth,\n        insertofftime, insertontime, insertwidth, offset, relief,\n        scrollregion, selectbackground, selectborderwidth, selectforeground,\n        state, takefocus, width, xscrollcommand, xscrollincrement,\n        yscrollcommand, yscrollincrement.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "canvas")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "addtag")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_above")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to all items above TAGORID.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "above")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_all")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to all items.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "all")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_below")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to all items below TAGORID.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "below")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_closest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "halo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "start")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "closest")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "halo")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_enclosed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to all items in the rectangle defined\n        by X1,Y1,X2,Y2.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "enclosed")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_overlapping")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "overlapping")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "addtag_withtag")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newtag")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag NEWTAG to all items with TAGORID.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "addtag")
(PUNCT "(")
(ID "newtag")
(PUNCT ",")
(LIT "withtag")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses all items with tags specified as arguments.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bbox")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "funcid")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unbind for all items with TAGORID for event SEQUENCE  the\n        function identified with FUNCID.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bind")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "funcid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "funcid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tag_bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "sequence")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "func")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bind")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "canvasx")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "screenx")
(PUNCT ",")
(ID "gridspacing")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the canvas x coordinate of pixel position SCREENX rounded\n        to nearest multiple of GRIDSPACING units.")
(NEWLINE)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "canvasx")
(PUNCT ",")
(ID "screenx")
(PUNCT ",")
(ID "gridspacing")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "canvasy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "screeny")
(PUNCT ",")
(ID "gridspacing")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the canvas y coordinate of pixel position SCREENY rounded\n        to nearest multiple of GRIDSPACING units.")
(NEWLINE)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "canvasy")
(PUNCT ",")
(ID "screeny")
(PUNCT ",")
(ID "gridspacing")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "coords")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of coordinates for the item given in ARGS.")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "getdouble")
(PUNCT "(")
(ID "x")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "coords")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "itemType")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "_flatten")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(ID "cnf")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(PUNCT "(")
(ID "dict")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "itemType")
(PUNCT ",")
(PUNCT "*")
(PUNCT "(")
(ID "args")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_arc")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create arc shaped region with coordinates x1,y1,x2,y2.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "arc")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_bitmap")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create bitmap with coordinates x1,y1.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "bitmap")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_image")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create image item with coordinates x1,y1.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_line")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create line with coordinates x1,y1,...,xn,yn.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "line")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_oval")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create oval with coordinates x1,y1,x2,y2.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "oval")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_polygon")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create polygon with coordinates x1,y1,...,xn,yn.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "polygon")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_rectangle")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create rectangle with coordinates x1,y1,x2,y2.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "rectangle")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_text")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create text with coordinates x1,y1.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "text")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_window")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create window with coordinates x1,y1,x2,y2.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_create")
(PUNCT "(")
(LIT "window")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dchars")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete characters of text items identified by tag or id in ARGS (possibly\n        several times) from FIRST to LAST character (including).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "dchars")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete items identified by all tag or ids contained in ARGS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dtag")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete tag or id given as last arguments in ARGS from items\n        identified by first argument in ARGS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "dtag")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "find")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_above")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return items above TAGORID.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "above")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_all")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all items.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "all")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_below")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all items below TAGORID.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "below")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_closest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "halo")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "start")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "closest")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "halo")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_enclosed")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all items in rectangle defined\n        by X1,Y1,X2,Y2.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "enclosed")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_overlapping")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "overlapping")
(PUNCT ",")
(ID "x1")
(PUNCT ",")
(ID "y1")
(PUNCT ",")
(ID "x2")
(PUNCT ",")
(ID "y2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "find_withtag")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all items with TAGORID.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "find")
(PUNCT "(")
(LIT "withtag")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "focus")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set focus to the first item specified in ARGS.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "focus")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "gettags")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return tags associated with the first item specified in ARGS.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "gettags")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "icursor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set cursor at position POS in the item identified by TAGORID.\n        In ARGS TAGORID must be first.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "icursor")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return position of cursor as integer in item specified in ARGS.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert TEXT in item TAGORID at position POS. ARGS must\n        be TAGORID POS TEXT.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "itemcget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the resource value for an OPTION for item TAGORID.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "itemcget")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "tagOrId")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "itemconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure resources of an item TAGORID.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method without arguments.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(PUNCT "(")
(LIT "itemconfigure")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "itemconfig")
(PUNCT "=")
(ID "itemconfigure")
(NEWLINE)
(KEYWORD def)
(ID "tag_lower")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Lower an item TAGORID given in ARGS\n        (optional below another item).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "lower")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lower")
(PUNCT "=")
(ID "tag_lower")
(NEWLINE)
(KEYWORD def)
(ID "move")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Move an item TAGORID given in ARGS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "move")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "postscript")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print the contents of the canvas to a postscript\n        file. Valid options: colormap, colormode, file, fontmap,\n        height, pageanchor, pageheight, pagewidth, pagex, pagey,\n        rotate, witdh, x, y.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "postscript")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_raise")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Raise an item TAGORID given in ARGS\n        (optional above another item).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "raise")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "lift")
(PUNCT "=")
(ID "tkraise")
(PUNCT "=")
(ID "tag_raise")
(NEWLINE)
(KEYWORD def)
(ID "scale")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scale")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remember the current X, Y coordinates.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_dragto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "gain")
(PUNCT "=")
(LIT 10)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the view of the canvas to GAIN times the\n        difference between X and Y and the coordinates given in\n        scan_mark.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "dragto")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "gain")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select_adjust")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the end of the selection near the cursor of an item TAGORID to index.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ",")
(LIT "adjust")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select_clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the selection if it is in this widget.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ",")
(LIT "clear")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the fixed end of a selection in item TAGORID to INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ",")
(LIT "from")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select_item")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the item which has the selection.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ",")
(LIT "item")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select_to")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the variable end of a selection in item TAGORID to INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ",")
(LIT "to")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the type of the item TAGORID.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "type")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Checkbutton")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Checkbutton widget which is either in on- or off-state.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a checkbutton widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeforeground, anchor,\n        background, bd, bg, bitmap, borderwidth, command, cursor,\n        disabledforeground, fg, font, foreground, height,\n        highlightbackground, highlightcolor, highlightthickness, image,\n        indicatoron, justify, offvalue, onvalue, padx, pady, relief,\n        selectcolor, selectimage, state, takefocus, text, textvariable,\n        underline, variable, width, wraplength.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "checkbutton")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "deselect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put the button in off-state.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "deselect")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flash")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Flash the button.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "flash")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toggle the button and invoke a command if given as resource.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put the button in on-state.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "toggle")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toggle the button.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "toggle")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Entry")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "XView")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Entry widget which allows to display simple text.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct an entry widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, cursor,\n        exportselection, fg, font, foreground, highlightbackground,\n        highlightcolor, highlightthickness, insertbackground,\n        insertborderwidth, insertofftime, insertontime, insertwidth,\n        invalidcommand, invcmd, justify, relief, selectbackground,\n        selectborderwidth, selectforeground, show, state, takefocus,\n        textvariable, validate, validatecommand, vcmd, width,\n        xscrollcommand.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "entry")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete text from FIRST to LAST (not included).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the text.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "icursor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert cursor at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "icursor")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return position of cursor.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert STRING at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "string")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remember the current X, Y coordinates.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_dragto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the view of the canvas to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "dragto")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_adjust")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the end of the selection near the cursor to INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "adjust")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_adjust")
(PUNCT "=")
(ID "selection_adjust")
(NEWLINE)
(KEYWORD def)
(ID "selection_clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the selection if it is in this widget.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "clear")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_clear")
(PUNCT "=")
(ID "selection_clear")
(NEWLINE)
(KEYWORD def)
(ID "selection_from")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the fixed end of a selection to INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "from")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_from")
(PUNCT "=")
(ID "selection_from")
(NEWLINE)
(KEYWORD def)
(ID "selection_present")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return True if there are characters selected in the entry, False\n        otherwise.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "present")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_present")
(PUNCT "=")
(ID "selection_present")
(NEWLINE)
(KEYWORD def)
(ID "selection_range")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the selection from START to END (not included).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "range")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_range")
(PUNCT "=")
(ID "selection_range")
(NEWLINE)
(KEYWORD def)
(ID "selection_to")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the variable end of a selection to INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "to")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_to")
(PUNCT "=")
(ID "selection_to")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Frame")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Frame widget which may contain other widgets and can have a 3D border.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a frame widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, class,\n        colormap, container, cursor, height, highlightbackground,\n        highlightcolor, highlightthickness, relief, takefocus, visual, width.")
(NEWLINE)
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "extra")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "class_")
(KEYWORD in)
(ID "cnf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT "=")
(PUNCT "(")
(LIT "-class")
(PUNCT ",")
(ID "cnf")
(PUNCT "[")
(LIT "class_")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "cnf")
(PUNCT "[")
(LIT "class_")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(LIT "class")
(KEYWORD in)
(ID "cnf")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra")
(PUNCT "=")
(PUNCT "(")
(LIT "-class")
(PUNCT ",")
(ID "cnf")
(PUNCT "[")
(LIT "class")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD del)
(ID "cnf")
(PUNCT "[")
(LIT "class")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "frame")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "extra")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Label")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Label widget which can display text and bitmaps.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a label widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, activeforeground, anchor,\n            background, bitmap, borderwidth, cursor,\n            disabledforeground, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, image, justify,\n            padx, pady, relief, takefocus, text,\n            textvariable, underline, wraplength\n\n        WIDGET-SPECIFIC OPTIONS\n\n            height, state, width\n\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "label")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Listbox")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "XView")
(PUNCT ",")
(ID "YView")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Listbox widget which can display a list of strings.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a listbox widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, cursor,\n        exportselection, fg, font, foreground, height, highlightbackground,\n        highlightcolor, highlightthickness, relief, selectbackground,\n        selectborderwidth, selectforeground, selectmode, setgrid, takefocus,\n        width, xscrollcommand, yscrollcommand, listvariable.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "listbox")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "activate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Activate item identified by INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "activate")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses the item identified by the given index.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bbox")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "curselection")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the indices of currently selected item.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "curselection")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete items from FIRST to LAST (included).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get list of items from FIRST to LAST (included).")
(NEWLINE)
(KEYWORD if)
(ID "last")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ",")
(ID "first")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return index of item identified with INDEX.")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(LIT "none")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(PUNCT "*")
(ID "elements")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert ELEMENTS at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT "+")
(ID "elements")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "nearest")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get index of item which is nearest to y coordinate Y.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "nearest")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remember the current X, Y coordinates.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_dragto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the view of the listbox to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "dragto")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "see")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scroll such that INDEX is visible.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "see")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_anchor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the fixed end oft the selection to INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "anchor")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_anchor")
(PUNCT "=")
(ID "selection_anchor")
(NEWLINE)
(KEYWORD def)
(ID "selection_clear")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the selection from FIRST to LAST (included).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "clear")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_clear")
(PUNCT "=")
(ID "selection_clear")
(NEWLINE)
(KEYWORD def)
(ID "selection_includes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return 1 if INDEX is part of the selection.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "includes")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_includes")
(PUNCT "=")
(ID "selection_includes")
(NEWLINE)
(KEYWORD def)
(ID "selection_set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the selection from FIRST to LAST (included) without\n        changing the currently selected elements.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "select_set")
(PUNCT "=")
(ID "selection_set")
(NEWLINE)
(KEYWORD def)
(ID "size")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the number of elements in the listbox.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "itemcget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the resource value for an ITEM and an OPTION.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "itemcget")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "itemconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure resources of an ITEM.\n\n        The values for resources are specified as keyword arguments.\n        To get an overview about the allowed keyword arguments\n        call the method without arguments.\n        Valid resource names: background, bg, foreground, fg,\n        selectbackground, selectforeground.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(PUNCT "(")
(LIT "itemconfigure")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "itemconfig")
(PUNCT "=")
(ID "itemconfigure")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Menu")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Menu widget which allows to display menu bars, pull-down menus and pop-up menus.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct menu widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeborderwidth,\n        activeforeground, background, bd, bg, borderwidth, cursor,\n        disabledforeground, fg, font, foreground, postcommand, relief,\n        selectcolor, takefocus, tearoff, tearoffcommand, title, type.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "menu")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_bindForTraversal")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(LIT "tk_bindForTraversal() does nothing and ")
(LIT "will be removed in 3.6")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(ID "stacklevel")
(PUNCT "=")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_mbPost")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_mbPost")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_mbUnpost")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_mbUnpost")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_traverseToMenu")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "char")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_traverseToMenu")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "char")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_traverseWithinMenu")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "char")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_traverseWithinMenu")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "char")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_getMenuButtons")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_getMenuButtons")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_nextMenu")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_nextMenu")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_nextMenuEntry")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_nextMenuEntry")
(PUNCT ",")
(ID "count")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_invokeMenu")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_invokeMenu")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_firstMenu")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_firstMenu")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_mbButtonDown")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_mbButtonDown")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_popup")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "entry")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Post the menu at position X,Y with entry ENTRY.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_popup")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ",")
(ID "entry")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "activate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Activate entry at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "activate")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "itemType")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "add")
(PUNCT ",")
(ID "itemType")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_cascade")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add hierarchical menu item.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(LIT "cascade")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_checkbutton")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add checkbutton menu item.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(LIT "checkbutton")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add command menu item.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(LIT "command")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_radiobutton")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Addd radio menu item.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(LIT "radiobutton")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_separator")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add separator.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add")
(PUNCT "(")
(LIT "separator")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "itemType")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "itemType")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert_cascade")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add hierarchical menu item at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "cascade")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert_checkbutton")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add checkbutton menu item at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "checkbutton")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add command menu item at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "command")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert_radiobutton")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Addd radio menu item at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "radiobutton")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert_separator")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add separator at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "index")
(PUNCT ",")
(LIT "separator")
(PUNCT ",")
(ID "cnf")
(KEYWORD or)
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete menu items between INDEX1 and INDEX2 (included).")
(NEWLINE)
(KEYWORD if)
(ID "index2")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "index2")
(PUNCT "=")
(ID "index1")
(NEWLINE)
(DEDENT)
(ID "num_index1")
(PUNCT ",")
(ID "num_index2")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "index1")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "index")
(PUNCT "(")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "num_index1")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(ID "num_index2")
(KEYWORD is)
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "num_index1")
(PUNCT ",")
(ID "num_index2")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(PUNCT "-")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(ID "num_index1")
(PUNCT ",")
(ID "num_index2")
(PUNCT "+")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(LIT "command")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "entryconfig")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "c")
(PUNCT "=")
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "entrycget")
(PUNCT "(")
(ID "i")
(PUNCT ",")
(LIT "command")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "c")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "entrycget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the resource value of an menu item for OPTION at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "entrycget")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "entryconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a menu item at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(PUNCT "(")
(LIT "entryconfigure")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "entryconfig")
(PUNCT "=")
(ID "entryconfigure")
(NEWLINE)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the index of a menu item identified by INDEX.")
(NEWLINE)
(ID "i")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "i")
(PUNCT "==")
(LIT "none")
(PUNCT ":")
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "i")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Invoke a menu item identified by INDEX and execute\n        the associated command.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "post")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display a menu at position X,Y.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "post")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the type of the menu item at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "type")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "unpost")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unmap a menu.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "unpost")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "xposition")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the x-position of the leftmost pixel of the menu item\n        at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "xposition")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "yposition")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the y-position of the topmost pixel of the menu item at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "yposition")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Menubutton")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Menubutton widget, obsolete since Tk8.0.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "menubutton")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Message")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Message widget to display multiline text. Obsolete since Label does it too.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "message")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Radiobutton")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Radiobutton widget which shows only one of several buttons in on-state.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a radiobutton widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeforeground, anchor,\n        background, bd, bg, bitmap, borderwidth, command, cursor,\n        disabledforeground, fg, font, foreground, height,\n        highlightbackground, highlightcolor, highlightthickness, image,\n        indicatoron, justify, padx, pady, relief, selectcolor, selectimage,\n        state, takefocus, text, textvariable, underline, value, variable,\n        width, wraplength.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "radiobutton")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "deselect")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put the button in off-state.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "deselect")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "flash")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Flash the button.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "flash")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Toggle the button and invoke a command if given as resource.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "select")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put the button in on-state.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "select")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Scale")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scale widget which can display a numerical scale.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a scale widget with the parent MASTER.\n\n        Valid resource names: activebackground, background, bigincrement, bd,\n        bg, borderwidth, command, cursor, digits, fg, font, foreground, from,\n        highlightbackground, highlightcolor, highlightthickness, label,\n        length, orient, relief, repeatdelay, repeatinterval, resolution,\n        showvalue, sliderlength, sliderrelief, state, takefocus,\n        tickinterval, to, troughcolor, variable, width.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "scale")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the current value as integer or float.")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the value to VALUE.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "coords")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple (X,Y) of the point along the centerline of the\n        trough that corresponds to VALUE or the current value if None is\n        given.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "coords")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return where the point X,Y lies. Valid return values are \"slider\",\n        \"though1\" and \"though2\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Scrollbar")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scrollbar widget which displays a slider at a certain position.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a scrollbar widget with the parent MASTER.\n\n        Valid resource names: activebackground, activerelief,\n        background, bd, bg, borderwidth, command, cursor,\n        elementborderwidth, highlightbackground,\n        highlightcolor, highlightthickness, jump, orient,\n        relief, repeatdelay, repeatinterval, takefocus,\n        troughcolor, width.")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "scrollbar")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "activate")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display the element at INDEX with activebackground and activerelief.\n        INDEX can be \"arrow1\",\"slider\" or \"arrow2\".")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "activate")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delta")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "deltax")
(PUNCT ",")
(ID "deltay")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the fractional change of the scrollbar setting if it\n        would be moved by DELTAX or DELTAY pixels.")
(NEWLINE)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delta")
(PUNCT ",")
(ID "deltax")
(PUNCT ",")
(ID "deltay")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "fraction")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the fractional value which corresponds to a slider\n        position of X,Y.")
(NEWLINE)
(KEYWORD return)
(ID "getdouble")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "fraction")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the element under position X,Y as one of\n        \"arrow1\",\"slider\",\"arrow2\" or \"\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current fractional values (upper and lower end)\n        of the slider position.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getdoubles")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the fractional values of the slider position (upper and\n        lower ends as value between 0 and 1).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "set")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Text")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "XView")
(PUNCT ",")
(ID "YView")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Text widget which can display text in various forms.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a text widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            background, borderwidth, cursor,\n            exportselection, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, insertbackground,\n            insertborderwidth, insertofftime,\n            insertontime, insertwidth, padx, pady,\n            relief, selectbackground,\n            selectborderwidth, selectforeground,\n            setgrid, takefocus,\n            xscrollcommand, yscrollcommand,\n\n        WIDGET-SPECIFIC OPTIONS\n\n            autoseparators, height, maxundo,\n            spacing1, spacing2, spacing3,\n            state, tabs, undo, width, wrap,\n\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "text")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of (x,y,width,height) which gives the bounding\n        box of the visible part of the character at the given index.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bbox")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_textSelectTo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_textSelectTo")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_textBackspace")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_textBackspace")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_textIndexCloser")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_textIndexCloser")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ",")
(ID "c")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tk_textResetAnchor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "tk_textResetAnchor")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "compare")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "op")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return whether between index INDEX1 and index INDEX2 the\n        relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "compare")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "op")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "count")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Counts the number of relevant things between the two indices.\n        If index1 is after index2, the result will be a negative number\n        (and this holds for each of the possible options).\n\n        The actual items which are counted depends on the options given by\n        args. The result is a list of integers, one for the result of each\n        counting option given. Valid counting options are \"chars\",\n        \"displaychars\", \"displayindices\", \"displaylines\", \"indices\",\n        \"lines\", \"xpixels\" and \"ypixels\". There is an additional possible\n        option \"update\", which if given then all subsequent options ensure\n        that any possible out of date information is recalculated.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(LIT "-%s")
(PUNCT "%")
(ID "arg")
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "args")
(KEYWORD if)
(KEYWORD not)
(ID "arg")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "args")
(PUNCT "+=")
(PUNCT "[")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "]")
(NEWLINE)
(ID "res")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "count")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "res")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "<=")
(LIT 3)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "res")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "res")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "debug")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "boolean")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Turn on the internal consistency checks of the B-Tree inside the text\n        widget according to BOOLEAN.")
(NEWLINE)
(KEYWORD if)
(ID "boolean")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "getboolean")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "debug")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "debug")
(PUNCT ",")
(ID "boolean")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete the characters between INDEX1 and INDEX2 (not included).")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dlineinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return tuple (x,y,width,height,baseline) giving the bounding box\n        and baseline position of the visible part of the line containing\n        the character at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "dlineinfo")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dump")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "command")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the contents of the widget between index1 and index2.\n\n        The type of contents returned in filtered based on the keyword\n        parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are\n        given and true, then the corresponding items are returned. The result\n        is a list of triples of the form (key, value, index). If none of the\n        keywords are true then 'all' is used by default.\n\n        If the 'command' argument is given, it is called once for each element\n        of the list of triples, with the values of each triple serving as the\n        arguments to the function. In this case the list is not returned.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "func_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "result")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "command")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "append_triple")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "result")
(PUNCT "=")
(ID "result")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "command")
(PUNCT "=")
(ID "append_triple")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func_name")
(PUNCT "=")
(ID "command")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "+=")
(PUNCT "[")
(LIT "-command")
(PUNCT ",")
(ID "command")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "kw")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-")
(PUNCT "+")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "index1")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "index2")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "dump")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "func_name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "func_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "edit")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal method\n\n        This method controls the undo mechanism and\n        the modified flag. The exact behavior of the\n        command depends on the option argument that\n        follows the edit argument. The following forms\n        of the command are currently supported:\n\n        edit_modified, edit_redo, edit_reset, edit_separator\n        and edit_undo\n\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "edit")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "edit_modified")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "arg")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get or Set the modified flag\n\n        If arg is not specified, returns the modified\n        flag of the widget. The insert, delete, edit undo and\n        edit redo commands or the user can set or clear the\n        modified flag. If boolean is specified, sets the\n        modified flag of the widget to arg.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "edit")
(PUNCT "(")
(LIT "modified")
(PUNCT ",")
(ID "arg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "edit_redo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Redo the last undone edit\n\n        When the undo option is true, reapplies the last\n        undone edits provided no other edits were done since\n        then. Generates an error when the redo stack is empty.\n        Does nothing when the undo option is false.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "edit")
(PUNCT "(")
(LIT "redo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "edit_reset")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clears the undo and redo stacks\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "edit")
(PUNCT "(")
(LIT "reset")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "edit_separator")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inserts a separator (boundary) on the undo stack.\n\n        Does nothing when the undo option is false\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "edit")
(PUNCT "(")
(LIT "separator")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "edit_undo")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Undoes the last edit action\n\n        If the undo option is true. An edit action is defined\n        as all the insert and delete commands that are recorded\n        on the undo stack in between two separators. Generates\n        an error when the undo stack is empty. Does nothing\n        when the undo option is false\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "edit")
(PUNCT "(")
(LIT "undo")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the text from INDEX1 to INDEX2 (not included).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_cget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of OPTION of an embedded image at INDEX.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "image")
(PUNCT ",")
(LIT "cget")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure an embedded image at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an embedded image at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "image")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all names of embedded images in this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "image")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the index in the form line.char for INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "chars")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert CHARS before the characters at INDEX. An additional\n        tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "chars")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mark_gravity")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "markName")
(PUNCT ",")
(ID "direction")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).\n        Return the current value if None is given for DIRECTION.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(LIT "gravity")
(PUNCT ",")
(ID "markName")
(PUNCT ",")
(ID "direction")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mark_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all mark names.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mark_set")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "markName")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set mark MARKNAME before the character at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(LIT "set")
(PUNCT ",")
(ID "markName")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mark_unset")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "markNames")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete all marks in MARKNAMES.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(LIT "unset")
(PUNCT ")")
(PUNCT "+")
(ID "markNames")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mark_next")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the next mark after INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(LIT "next")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "mark_previous")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the name of the previous mark before INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(LIT "previous")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "peer_create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "newPathName")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates a peer text widget with the given newPathName, and any\n        optional standard configuration options. By default the peer will\n        have the same start and end line as the parent widget, but\n        these can be overriden with the standard configuration options.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "peer")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "newPathName")
(PUNCT ",")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "peer_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns a list of peers of this widget (this does not include\n        the widget itself).")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "peer")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "replace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ",")
(ID "chars")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Replaces the range of characters between index1 and index2 with\n        the given characters and tags specified by args.\n\n        See the method insert for some more information about args, and the\n        method delete for information about the indices.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "replace")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ",")
(ID "chars")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remember the current X, Y coordinates.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "mark")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_dragto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Adjust the view of the text to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ",")
(LIT "dragto")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "search")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pattern")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "stopindex")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "forwards")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "backwards")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "exact")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "regexp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "nocase")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "count")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "elide")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Search PATTERN beginning from INDEX until STOPINDEX.\n        Return the index of the first character of a match or an\n        empty string.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "search")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "forwards")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-forwards")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "backwards")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-backwards")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "exact")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-exact")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "regexp")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-regexp")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "nocase")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-nocase")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "elide")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-elide")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "count")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "-count")
(PUNCT ")")
(PUNCT ";")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "pattern")
(KEYWORD and)
(ID "pattern")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "--")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "pattern")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "index")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "stopindex")
(PUNCT ":")
(ID "args")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "stopindex")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "str")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "tuple")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "see")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Scroll such that the character at INDEX is visible.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "see")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.\n        Additional pairs of indices may follow in ARGS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "add")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_unbind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "funcid")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Unbind for all characters with TAGNAME for event SEQUENCE  the\n        function identified with FUNCID.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "bind")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(LIT "")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "funcid")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "deletecommand")
(PUNCT "(")
(ID "funcid")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "tag_bind")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_bind")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "bind")
(PUNCT ",")
(ID "tagName")
(PUNCT ")")
(PUNCT ",")
(ID "sequence")
(PUNCT ",")
(ID "func")
(PUNCT ",")
(ID "add")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_cget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of OPTION for tag TAGNAME.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "cget")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure a tag TAGNAME.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(PUNCT "(")
(LIT "tag")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "tagName")
(PUNCT ")")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "tag_config")
(PUNCT "=")
(ID "tag_configure")
(NEWLINE)
(KEYWORD def)
(ID "tag_delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "tagNames")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete all tags in TAGNAMES.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "delete")
(PUNCT ")")
(PUNCT "+")
(ID "tagNames")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_lower")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "belowThis")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Change the priority of tag TAGNAME such that it is lower\n        than the priority of BELOWTHIS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "lower")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "belowThis")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_names")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of all tag names.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "names")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_nextrange")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched forward from INDEX1.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "nextrange")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_prevrange")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched backwards from INDEX1.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "prevrange")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_raise")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "aboveThis")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Change the priority of tag TAGNAME such that it is higher\n        than the priority of ABOVETHIS.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "raise")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "aboveThis")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_ranges")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of ranges of text which have tag TAGNAME.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "ranges")
(PUNCT ",")
(ID "tagName")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "tag_remove")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove tag TAGNAME from all characters between INDEX1 and INDEX2.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "tag")
(PUNCT ",")
(LIT "remove")
(PUNCT ",")
(ID "tagName")
(PUNCT ",")
(ID "index1")
(PUNCT ",")
(ID "index2")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "window_cget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of OPTION of an embedded window at INDEX.")
(NEWLINE)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT ":")
(LIT 1)
(PUNCT "]")
(PUNCT "!=")
(LIT "-")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(LIT "-")
(PUNCT "+")
(ID "option")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "option")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option")
(PUNCT "=")
(ID "option")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "window")
(PUNCT ",")
(LIT "cget")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "window_configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure an embedded window at INDEX.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_configure")
(PUNCT "(")
(PUNCT "(")
(LIT "window")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "window_config")
(PUNCT "=")
(ID "window_configure")
(NEWLINE)
(KEYWORD def)
(ID "window_create")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a window at INDEX.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "window")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "window_names")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return all names of embedded windows in this widget.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "window")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "yview_pickplace")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "what")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Obsolete function, use see.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "yview")
(PUNCT ",")
(LIT "-pickplace")
(PUNCT ")")
(PUNCT "+")
(ID "what")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_setit")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal class. It wraps the command in the widget OptionMenu.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "var")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "callback")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__value")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__var")
(PUNCT "=")
(ID "var")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__callback")
(PUNCT "=")
(ID "callback")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__call__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__var")
(PUNCT ".")
(ID "set")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__value")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "__callback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "__callback")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__value")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "OptionMenu")
(PUNCT "(")
(ID "Menubutton")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "OptionMenu which allows the user to select a value from a menu.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(ID "variable")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(PUNCT "*")
(ID "values")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct an optionmenu widget with the parent MASTER, with\n        the resource textvariable set to VARIABLE, the initially selected\n        value VALUE, the other menu values VALUES and an additional\n        keyword argument command.")
(NEWLINE)
(ID "kw")
(PUNCT "=")
(PUNCT "{")
(LIT "borderwidth")
(PUNCT ":")
(LIT 2)
(PUNCT ",")
(LIT "textvariable")
(PUNCT ":")
(ID "variable")
(PUNCT ",")
(LIT "indicatoron")
(PUNCT ":")
(LIT 1)
(PUNCT ",")
(LIT "relief")
(PUNCT ":")
(ID "RAISED")
(PUNCT ",")
(LIT "anchor")
(PUNCT ":")
(LIT "c")
(PUNCT ",")
(LIT "highlightthickness")
(PUNCT ":")
(LIT 2)
(PUNCT "}")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "menubutton")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "widgetName")
(PUNCT "=")
(LIT "tk_optionMenu")
(NEWLINE)
(ID "menu")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__menu")
(PUNCT "=")
(ID "Menu")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(LIT "menu")
(PUNCT ",")
(ID "tearoff")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "menuname")
(PUNCT "=")
(ID "menu")
(PUNCT ".")
(ID "_w")
(NEWLINE)
(ID "callback")
(PUNCT "=")
(ID "kwargs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "command")
(KEYWORD in)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "kwargs")
(PUNCT "[")
(LIT "command")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kwargs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TclError")
(PUNCT "(")
(LIT "unknown option -")
(PUNCT "+")
(ID "kwargs")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "menu")
(PUNCT ".")
(ID "add_command")
(PUNCT "(")
(ID "label")
(PUNCT "=")
(ID "value")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(ID "_setit")
(PUNCT "(")
(ID "variable")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "callback")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "menu")
(PUNCT ".")
(ID "add_command")
(PUNCT "(")
(ID "label")
(PUNCT "=")
(ID "v")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(ID "_setit")
(PUNCT "(")
(ID "variable")
(PUNCT ",")
(ID "v")
(PUNCT ",")
(ID "callback")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT "[")
(LIT "menu")
(PUNCT "]")
(PUNCT "=")
(ID "menu")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "name")
(PUNCT "==")
(LIT "menu")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__menu")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "Widget")
(PUNCT ".")
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Destroy this widget and the associated menu.")
(NEWLINE)
(ID "Menubutton")
(PUNCT ".")
(ID "destroy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "__menu")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Image")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Base class for images.")
(NEWLINE)
(ID "_last_id")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "imgtype")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "master")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "master")
(PUNCT "=")
(ID "_default_root")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "master")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "Too early to create image")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "master")
(PUNCT ",")
(LIT "tk")
(PUNCT ",")
(ID "master")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Image")
(PUNCT ".")
(ID "_last_id")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "name")
(PUNCT "=")
(LIT "pyimage%r")
(PUNCT "%")
(PUNCT "(")
(ID "Image")
(PUNCT ".")
(ID "_last_id")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "name")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-")
(PUNCT ":")
(ID "name")
(PUNCT "=")
(LIT "_")
(PUNCT "+")
(ID "name")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "kw")
(KEYWORD and)
(ID "cnf")
(PUNCT ":")
(ID "cnf")
(PUNCT "=")
(ID "_cnfmerge")
(PUNCT "(")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD elif)
(ID "kw")
(PUNCT ":")
(ID "cnf")
(PUNCT "=")
(ID "kw")
(NEWLINE)
(ID "options")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "cnf")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "options")
(PUNCT "=")
(ID "options")
(PUNCT "+")
(PUNCT "(")
(LIT "-")
(PUNCT "+")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "create")
(PUNCT ",")
(ID "imgtype")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "options")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "name")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__str__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "name")
(NEWLINE)
(KEYWORD def)
(ID "__del__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "TclError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__setitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "key")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "configure")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "configure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Configure the image.")
(NEWLINE)
(ID "res")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "_cnfmerge")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "v")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "k")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "==")
(LIT "_")
(PUNCT ":")
(ID "k")
(PUNCT "=")
(ID "k")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "v")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_register")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "res")
(PUNCT "=")
(ID "res")
(PUNCT "+")
(PUNCT "(")
(LIT "-")
(PUNCT "+")
(ID "k")
(PUNCT ",")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "config")
(PUNCT ")")
(PUNCT "+")
(ID "res")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "config")
(PUNCT "=")
(ID "configure")
(NEWLINE)
(KEYWORD def)
(ID "height")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the height of the image.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "height")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "type")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the type of the imgage, e.g. \"photo\" or \"bitmap\".")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "type")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "width")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the width of the image.")
(NEWLINE)
(KEYWORD return)
(ID "getint")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "width")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PhotoImage")
(PUNCT "(")
(ID "Image")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Widget which can display colored images in GIF, PPM/PGM format.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create an image with NAME.\n\n        Valid resource names: data, format, file, gamma, height, palette,\n        width.")
(NEWLINE)
(ID "Image")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "photo")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "blank")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Display a transparent image.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "blank")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the value of OPTION.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "cget")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "option")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__getitem__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "cget")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "key")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "copy")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new PhotoImage with the same image as this widget.")
(NEWLINE)
(ID "destImage")
(PUNCT "=")
(ID "PhotoImage")
(PUNCT "(")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "destImage")
(PUNCT ",")
(LIT "copy")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "destImage")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "zoom")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new PhotoImage with the same image as this widget\n        but zoom it with X and Y.")
(NEWLINE)
(ID "destImage")
(PUNCT "=")
(ID "PhotoImage")
(PUNCT "(")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "y")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(ID "y")
(PUNCT "=")
(ID "x")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "destImage")
(PUNCT ",")
(LIT "copy")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "-zoom")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "destImage")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "subsample")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a new PhotoImage based on the same image as this widget\n        but use only every Xth or Yth pixel.")
(NEWLINE)
(ID "destImage")
(PUNCT "=")
(ID "PhotoImage")
(PUNCT "(")
(ID "master")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "y")
(PUNCT "==")
(LIT "")
(PUNCT ":")
(ID "y")
(PUNCT "=")
(ID "x")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "destImage")
(PUNCT ",")
(LIT "copy")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "-subsample")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "destImage")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the color (red, green, blue) of the pixel at X,Y.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "get")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "put")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ",")
(ID "to")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Put row formatted colors to image starting from\n        position TO, e.g. image.put(\"{red green} {blue yellow}\", to=(4,6))")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "put")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "to")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "to")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "==")
(LIT "-to")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "to")
(PUNCT "=")
(ID "to")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(LIT "-to")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "tuple")
(PUNCT "(")
(ID "to")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "format")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "from_coords")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write image to file FILENAME in FORMAT starting from\n        position FROM_COORDS.")
(NEWLINE)
(ID "args")
(PUNCT "=")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT ",")
(LIT "write")
(PUNCT ",")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "format")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(LIT "-format")
(PUNCT ",")
(ID "format")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "from_coords")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "args")
(PUNCT "+")
(PUNCT "(")
(LIT "-from")
(PUNCT ",")
(PUNCT ")")
(PUNCT "+")
(ID "tuple")
(PUNCT "(")
(ID "from_coords")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BitmapImage")
(PUNCT "(")
(ID "Image")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Widget which can display a bitmap.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a bitmap with NAME.\n\n        Valid resource names: background, data, file, foreground, maskdata, maskfile.")
(NEWLINE)
(ID "Image")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "bitmap")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "image_names")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_default_root")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "_default_root")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "names")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "image_types")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_default_root")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "_default_root")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(LIT "image")
(PUNCT ",")
(LIT "types")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Spinbox")
(PUNCT "(")
(ID "Widget")
(PUNCT ",")
(ID "XView")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "spinbox widget.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a spinbox widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, background, borderwidth,\n            cursor, exportselection, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, insertbackground,\n            insertborderwidth, insertofftime,\n            insertontime, insertwidth, justify, relief,\n            repeatdelay, repeatinterval,\n            selectbackground, selectborderwidth\n            selectforeground, takefocus, textvariable\n            xscrollcommand.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            buttonbackground, buttoncursor,\n            buttondownrelief, buttonuprelief,\n            command, disabledbackground,\n            disabledforeground, format, from,\n            invalidcommand, increment,\n            readonlybackground, state, to,\n            validate, validatecommand values,\n            width, wrap,\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "spinbox")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "bbox")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a tuple of X1,Y1,X2,Y2 coordinates for a\n        rectangle which encloses the character given by index.\n\n        The first two elements of the list give the x and y\n        coordinates of the upper-left corner of the screen\n        area covered by the character (in pixels relative\n        to the widget) and the last two elements give the\n        width and height of the character, in pixels. The\n        bounding box may refer to a region outside the\n        visible area of the window.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "bbox")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "delete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Delete one or more elements of the spinbox.\n\n        First is the index of the first character to delete,\n        and last is the index of the character just after\n        the last one to delete. If last isn't specified it\n        defaults to first+1, i.e. a single character is\n        deleted.  This command returns an empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "delete")
(PUNCT ",")
(ID "first")
(PUNCT ",")
(ID "last")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the spinbox's string")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "get")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "icursor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Alter the position of the insertion cursor.\n\n        The insertion cursor will be displayed just before\n        the character given by index. Returns an empty string\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "icursor")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the name of the widget at position x, y\n\n        Return value is one of: none, buttondown, buttonup, entry\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "index")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns the numerical index corresponding to index\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "index")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "insert")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Insert string s at index\n\n         Returns an empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "insert")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "invoke")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Causes the specified element to be invoked\n\n        The element could be buttondown or buttonup\n        triggering the action associated with it.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "invoke")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "scan")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Records x and the current view in the spinbox window;\n\n        used in conjunction with later scan dragto commands.\n        Typically this command is associated with a mouse button\n        press in the widget. It returns an empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "scan")
(PUNCT "(")
(LIT "mark")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "scan_dragto")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Compute the difference between the given x argument\n        and the x argument to the last scan mark command\n\n        It then adjusts the view left or right by 10 times the\n        difference in x-coordinates. This command is typically\n        associated with mouse motion events in the widget, to\n        produce the effect of dragging the spinbox at high speed\n        through the window. The return value is an empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "scan")
(PUNCT "(")
(LIT "dragto")
(PUNCT ",")
(ID "x")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "selection")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_adjust")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Locate the end of the selection nearest to the character\n        given by index,\n\n        Then adjust that end of the selection to be at index\n        (i.e including but not going beyond index). The other\n        end of the selection is made the anchor point for future\n        select to commands. If the selection isn't currently in\n        the spinbox, then a new selection is created to include\n        the characters between index and the most recent selection\n        anchor point, inclusive. Returns an empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "adjust")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_clear")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Clear the selection\n\n        If the selection isn't in this widget then the\n        command has no effect. Returns an empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "clear")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "selection_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Sets or gets the currently selected element.\n\n        If a spinbutton element is specified, it will be\n        displayed depressed\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "selection")
(PUNCT "(")
(LIT "element")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "LabelFrame")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "labelframe widget.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a labelframe widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            borderwidth, cursor, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, padx, pady, relief,\n            takefocus, text\n\n        WIDGET-SPECIFIC OPTIONS\n\n            background, class, colormap, container,\n            height, labelanchor, labelwidget,\n            visual, width\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "labelframe")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "PanedWindow")
(PUNCT "(")
(ID "Widget")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "panedwindow widget.")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a panedwindow widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            background, borderwidth, cursor, height,\n            orient, relief, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            handlepad, handlesize, opaqueresize,\n            sashcursor, sashpad, sashrelief,\n            sashwidth, showhandle,\n        ")
(NEWLINE)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "panedwindow")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Add a child widget to the panedwindow in a new pane.\n\n        The child argument is the name of the child widget\n        followed by pairs of arguments that specify how to\n        manage the windows. The possible options and values\n        are the ones accepted by the paneconfigure method.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "add")
(PUNCT ",")
(ID "child")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove the pane containing child from the panedwindow\n\n        All geometry management options for child will be forgotten.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "forget")
(PUNCT ",")
(ID "child")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "forget")
(PUNCT "=")
(ID "remove")
(NEWLINE)
(KEYWORD def)
(ID "identify")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Identify the panedwindow component at point x, y\n\n        If the point is over a sash or a sash handle, the result\n        is a two element list containing the index of the sash or\n        handle, and a word indicating whether it is over a sash\n        or a handle, such as {0 sash} or {2 handle}. If the point\n        is over any other part of the panedwindow, the result is\n        an empty list.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "identify")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "proxy")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_coord")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the x and y pair of the most recent proxy location\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "proxy")
(PUNCT "(")
(LIT "coord")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_forget")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Remove the proxy from the display.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "proxy")
(PUNCT "(")
(LIT "forget")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "proxy_place")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Place the proxy at the given x and y coordinates.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "proxy")
(PUNCT "(")
(LIT "place")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sash")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Internal function.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getints")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "sash")
(PUNCT ")")
(PUNCT "+")
(ID "args")
(PUNCT ")")
(PUNCT ")")
(KEYWORD or)
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sash_coord")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the current x and y pair for the sash given by index.\n\n        Index must be an integer between 0 and 1 less than the\n        number of panes in the panedwindow. The coordinates given are\n        those of the top left corner of the region containing the sash.\n        pathName sash dragto index x y This command computes the\n        difference between the given coordinates and the coordinates\n        given to the last sash coord command for the given sash. It then\n        moves that sash the computed difference. The return value is the\n        empty string.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "sash")
(PUNCT "(")
(LIT "coord")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sash_mark")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Records x and y for the sash given by index;\n\n        Used in conjunction with later dragto commands to move the sash.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "sash")
(PUNCT "(")
(LIT "mark")
(PUNCT ",")
(ID "index")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sash_place")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Place the sash given by index at the given coordinates\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "sash")
(PUNCT "(")
(LIT "place")
(PUNCT ",")
(ID "index")
(PUNCT ",")
(ID "x")
(PUNCT ",")
(ID "y")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "panecget")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "child")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query a management option for window.\n\n        Option may be any value allowed by the paneconfigure subcommand\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "panecget")
(PUNCT ")")
(PUNCT "+")
(PUNCT "(")
(ID "child")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "paneconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Query or modify the management options for window.\n\n        If no option is specified, returns a list describing all\n        of the available options for pathName.  If option is\n        specified with no value, then the command returns a list\n        describing the one named option (this list will be identical\n        to the corresponding sublist of the value returned if no\n        option is specified). If one or more option-value pairs are\n        specified, then the command modifies the given widget\n        option(s) to have the given value(s); in this case the\n        command returns an empty string. The following options\n        are supported:\n\n        after window\n            Insert the window after the window specified. window\n            should be the name of a window already managed by pathName.\n        before window\n            Insert the window before the window specified. window\n            should be the name of a window already managed by pathName.\n        height size\n            Specify a height for the window. The height will be the\n            outer dimension of the window including its border, if\n            any. If size is an empty string, or if -height is not\n            specified, then the height requested internally by the\n            window will be used initially; the height may later be\n            adjusted by the movement of sashes in the panedwindow.\n            Size may be any value accepted by Tk_GetPixels.\n        minsize n\n            Specifies that the size of the window cannot be made\n            less than n. This constraint only affects the size of\n            the widget in the paned dimension -- the x dimension\n            for horizontal panedwindows, the y dimension for\n            vertical panedwindows. May be any value accepted by\n            Tk_GetPixels.\n        padx n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the X-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        pady n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the Y-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        sticky style\n            If a window's pane is larger than the requested\n            dimensions of the window, this option may be used\n            to position (or stretch) the window within its pane.\n            Style is a string that contains zero or more of the\n            characters n, s, e or w. The string can optionally\n            contains spaces or commas, but they are ignored. Each\n            letter refers to a side (north, south, east, or west)\n            that the window will \"stick\" to. If both n and s\n            (or e and w) are specified, the window will be\n            stretched to fill the entire height (or width) of\n            its cavity.\n        width size\n            Specify a width for the window. The width will be\n            the outer dimension of the window including its\n            border, if any. If size is an empty string, or\n            if -width is not specified, then the width requested\n            internally by the window will be used initially; the\n            width may later be adjusted by the movement of sashes\n            in the panedwindow. Size may be any value accepted by\n            Tk_GetPixels.\n\n        ")
(NEWLINE)
(KEYWORD if)
(ID "cnf")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getconfigure")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "paneconfigure")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "kw")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_getconfigure1")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "paneconfigure")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ",")
(LIT "-")
(PUNCT "+")
(ID "cnf")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "paneconfigure")
(PUNCT ",")
(ID "tagOrId")
(PUNCT ")")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_options")
(PUNCT "(")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "paneconfig")
(PUNCT "=")
(ID "paneconfigure")
(NEWLINE)
(KEYWORD def)
(ID "panes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns an ordered list of the child panes.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "splitlist")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "tk")
(PUNCT ".")
(ID "call")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_w")
(PUNCT ",")
(LIT "panes")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Studbutton")
(PUNCT "(")
(ID "Button")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "studbutton")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Any-Enter>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonEnter")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Any-Leave>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonLeave")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<1>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonDown")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<ButtonRelease-1>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonUp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Tributton")
(PUNCT "(")
(ID "Button")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "cnf")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "**")
(ID "kw")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "Widget")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "master")
(PUNCT ",")
(LIT "tributton")
(PUNCT ",")
(ID "cnf")
(PUNCT ",")
(ID "kw")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Any-Enter>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonEnter")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<Any-Leave>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonLeave")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<1>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonDown")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "bind")
(PUNCT "(")
(LIT "<ButtonRelease-1>")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "tkButtonUp")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT "[")
(LIT "fg")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(LIT "bg")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT "[")
(LIT "activebackground")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(LIT "bg")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "root")
(PUNCT "=")
(ID "Tk")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(LIT "This is Tcl/Tk version %s")
(PUNCT "%")
(ID "TclVersion")
(NEWLINE)
(KEYWORD if)
(ID "TclVersion")
(PUNCT ">=")
(LIT 8.1)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "text")
(PUNCT "+=")
(LIT "\nThis should be a cedilla: ç")
(NEWLINE)
(DEDENT)
(ID "label")
(PUNCT "=")
(ID "Label")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ")")
(NEWLINE)
(ID "label")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "test")
(PUNCT "=")
(ID "Button")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "text")
(PUNCT "=")
(LIT "Click me!")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(KEYWORD lambda)
(ID "root")
(PUNCT "=")
(ID "root")
(PUNCT ":")
(ID "root")
(PUNCT ".")
(ID "test")
(PUNCT ".")
(ID "configure")
(PUNCT "(")
(ID "text")
(PUNCT "=")
(LIT "[%s]")
(PUNCT "%")
(ID "root")
(PUNCT ".")
(ID "test")
(PUNCT "[")
(LIT "text")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "test")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "test")
(PUNCT "=")
(ID "test")
(NEWLINE)
(ID "quit")
(PUNCT "=")
(ID "Button")
(PUNCT "(")
(ID "root")
(PUNCT ",")
(ID "text")
(PUNCT "=")
(LIT "QUIT")
(PUNCT ",")
(ID "command")
(PUNCT "=")
(ID "root")
(PUNCT ".")
(ID "destroy")
(PUNCT ")")
(NEWLINE)
(ID "quit")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "iconify")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "deiconify")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "root")
(PUNCT ".")
(ID "mainloop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_test")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
