(LIT "plistlib.py -- a tool to generate and parse MacOSX .plist files.\n\nThe property list (.plist) file format is a simple XML pickle supporting\nbasic object types, like dictionaries, lists, numbers and strings.\nUsually the top level object is a dictionary.\n\nTo write out a plist file, use the dump(value, file)\nfunction. 'value' is the top level object, 'file' is\na (writable) file object.\n\nTo parse a plist from a file, use the load(file) function,\nwith a (readable) file object as the only argument. It\nreturns the top level object (again, usually a dictionary).\n\nTo work with plist data in bytes objects, you can use loads()\nand dumps().\n\nValues can be strings, integers, floats, booleans, tuples, lists,\ndictionaries (but only with string keys), Data, bytes, bytearray, or\ndatetime.datetime objects.\n\nGenerate Plist example:\n\n    pl = dict(\n        aString = \"Doodah\",\n        aList = [\"A\", \"B\", 12, 32.1, [1, 2, 3]],\n        aFloat = 0.1,\n        anInt = 728,\n        aDict = dict(\n            anotherString = \"<hello & hi there!>\",\n            aUnicodeValue = \"M\\xe4ssig, Ma\\xdf\",\n            aTrueValue = True,\n            aFalseValue = False,\n        ),\n        someData = b\"<binary gunk>\",\n        someMoreData = b\"<lots of binary gunk>\" * 10,\n        aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),\n    )\n    with open(fileName, 'wb') as fp:\n        dump(pl, fp)\n\nParse Plist example:\n\n    with open(fileName, 'rb') as fp:\n        pl = load(fp)\n    print(pl[\"aKey\"])\n")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "readPlist")
(PUNCT ",")
(LIT "writePlist")
(PUNCT ",")
(LIT "readPlistFromBytes")
(PUNCT ",")
(LIT "writePlistToBytes")
(PUNCT ",")
(LIT "Plist")
(PUNCT ",")
(LIT "Data")
(PUNCT ",")
(LIT "Dict")
(PUNCT ",")
(LIT "FMT_XML")
(PUNCT ",")
(LIT "FMT_BINARY")
(PUNCT ",")
(LIT "load")
(PUNCT ",")
(LIT "dump")
(PUNCT ",")
(LIT "loads")
(PUNCT ",")
(LIT "dumps")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "binascii")
(NEWLINE)
(KEYWORD import)
(ID "codecs")
(NEWLINE)
(KEYWORD import)
(ID "contextlib")
(NEWLINE)
(KEYWORD import)
(ID "datetime")
(NEWLINE)
(KEYWORD import)
(ID "enum")
(NEWLINE)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "BytesIO")
(NEWLINE)
(KEYWORD import)
(ID "itertools")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "re")
(NEWLINE)
(KEYWORD import)
(ID "struct")
(NEWLINE)
(KEYWORD from)
(ID "warnings")
(KEYWORD import)
(ID "warn")
(NEWLINE)
(KEYWORD from)
(ID "xml")
(PUNCT ".")
(ID "parsers")
(PUNCT ".")
(ID "expat")
(KEYWORD import)
(ID "ParserCreate")
(NEWLINE)
(ID "PlistFormat")
(PUNCT "=")
(ID "enum")
(PUNCT ".")
(ID "Enum")
(PUNCT "(")
(LIT "PlistFormat")
(PUNCT ",")
(LIT "FMT_XML FMT_BINARY")
(PUNCT ",")
(ID "module")
(PUNCT "=")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "PlistFormat")
(PUNCT ".")
(ID "__members__")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "_InternalDict")
(PUNCT "(")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__getattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "self")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "warn")
(PUNCT "(")
(LIT "Attribute access from plist dicts is deprecated, use d[key] ")
(LIT "notation instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__setattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "Attribute access from plist dicts is deprecated, use d[key] ")
(LIT "notation instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__delattr__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT "[")
(ID "attr")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "KeyError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "AttributeError")
(PUNCT "(")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "warn")
(PUNCT "(")
(LIT "Attribute access from plist dicts is deprecated, use d[key] ")
(LIT "notation instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Dict")
(PUNCT "(")
(ID "_InternalDict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "The plistlib.Dict class is deprecated, use builtin dict instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(PUNCT "@")
(ID "contextlib")
(PUNCT ".")
(ID "contextmanager")
(NEWLINE)
(KEYWORD def)
(ID "_maybe_open")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(ID "mode")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "fp")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD yield)
(ID "pathOrFile")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "Plist")
(PUNCT "(")
(ID "_InternalDict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "This class has been deprecated. Use dump() and load()\n    functions instead, together with regular dict objects.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warn")
(PUNCT "(")
(LIT "The Plist class is deprecated, use the load() and ")
(LIT "dump() functions instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromFile")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "pathOrFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deprecated. Use the load() function instead.")
(NEWLINE)
(KEYWORD with)
(ID "_maybe_open")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "load")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "plist")
(PUNCT "=")
(ID "cls")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "plist")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "plist")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "pathOrFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Deprecated. Use the dump() function instead.")
(NEWLINE)
(KEYWORD with)
(ID "_maybe_open")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dump")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readPlist")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Read a .plist from a path or file. pathOrFile should either\n    be a file name, or a readable binary file object.\n\n    This function is deprecated, use load instead.\n    ")
(NEWLINE)
(ID "warn")
(PUNCT "(")
(LIT "The readPlist function is deprecated, use load() instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "_maybe_open")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(LIT "rb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "load")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "dict_type")
(PUNCT "=")
(ID "_InternalDict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "writePlist")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "pathOrFile")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Write 'value' to a .plist file. 'pathOrFile' may either be a\n    file name or a (writable) file object.\n\n    This function is deprecated, use dump instead.\n    ")
(NEWLINE)
(ID "warn")
(PUNCT "(")
(LIT "The writePlist function is deprecated, use dump() instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD with)
(ID "_maybe_open")
(PUNCT "(")
(ID "pathOrFile")
(PUNCT ",")
(LIT "wb")
(PUNCT ")")
(KEYWORD as)
(ID "fp")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dump")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(ID "FMT_XML")
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "readPlistFromBytes")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Read a plist data from a bytes object. Return the root object.\n\n    This function is deprecated, use loads instead.\n    ")
(NEWLINE)
(ID "warn")
(PUNCT "(")
(LIT "The readPlistFromBytes function is deprecated, use loads() instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "load")
(PUNCT "(")
(ID "BytesIO")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "dict_type")
(PUNCT "=")
(ID "_InternalDict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "writePlistToBytes")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Return 'value' as a plist-formatted bytes object.\n\n    This function is deprecated, use dumps instead.\n    ")
(NEWLINE)
(ID "warn")
(PUNCT "(")
(LIT "The writePlistToBytes function is deprecated, use dumps() instead")
(PUNCT ",")
(ID "DeprecationWarning")
(PUNCT ",")
(LIT 2)
(PUNCT ")")
(NEWLINE)
(ID "f")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dump")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "f")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(ID "FMT_XML")
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "f")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Data")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Wrapper for binary data.\n\n    This class is deprecated, use a bytes object instead.\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "bytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "data must be as bytes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(ID "data")
(NEWLINE)
(DEDENT)
(PUNCT "@")
(ID "classmethod")
(NEWLINE)
(KEYWORD def)
(ID "fromBase64")
(PUNCT "(")
(ID "cls")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "cls")
(PUNCT "(")
(ID "_decode_base64")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "asBase64")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "maxlinelength")
(PUNCT "=")
(LIT 76)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_encode_base64")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ",")
(ID "maxlinelength")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "==")
(ID "other")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "id")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT "==")
(ID "id")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s(%s)")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "PLISTHEADER")
(PUNCT "=")
(LIT #"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n")
(NEWLINE)
(ID "_controlCharPat")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "[\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0b\\x0c\\x0e\\x0f")
(LIT "\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f]")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_encode_base64")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "maxlinelength")
(PUNCT "=")
(LIT 76)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "maxbinsize")
(PUNCT "=")
(PUNCT "(")
(ID "maxlinelength")
(PUNCT "//")
(LIT 4)
(PUNCT ")")
(PUNCT "*")
(LIT 3)
(NEWLINE)
(ID "pieces")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ",")
(ID "maxbinsize")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "chunk")
(PUNCT "=")
(ID "s")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(ID "maxbinsize")
(PUNCT "]")
(NEWLINE)
(ID "pieces")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "binascii")
(PUNCT ".")
(ID "b2a_base64")
(PUNCT "(")
(ID "chunk")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(LIT #"")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "pieces")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_decode_base64")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "s")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "binascii")
(PUNCT ".")
(ID "a2b_base64")
(PUNCT "(")
(ID "s")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "binascii")
(PUNCT ".")
(ID "a2b_base64")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_dateParser")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "(?P<year>\\d\\d\\d\\d)(?:-(?P<month>\\d\\d)(?:-(?P<day>\\d\\d)(?:T(?P<hour>\\d\\d)(?::(?P<minute>\\d\\d)(?::(?P<second>\\d\\d))?)?)?)?)?Z")
(PUNCT ",")
(ID "re")
(PUNCT ".")
(ID "ASCII")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_date_from_string")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "order")
(PUNCT "=")
(PUNCT "(")
(LIT "year")
(PUNCT ",")
(LIT "month")
(PUNCT ",")
(LIT "day")
(PUNCT ",")
(LIT "hour")
(PUNCT ",")
(LIT "minute")
(PUNCT ",")
(LIT "second")
(PUNCT ")")
(NEWLINE)
(ID "gd")
(PUNCT "=")
(ID "_dateParser")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ".")
(ID "groupdict")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "lst")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "key")
(KEYWORD in)
(ID "order")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "gd")
(PUNCT "[")
(ID "key")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "val")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "lst")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT "(")
(PUNCT "*")
(ID "lst")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_date_to_string")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%04d-%02d-%02dT%02d:%02d:%02dZ")
(PUNCT "%")
(PUNCT "(")
(ID "d")
(PUNCT ".")
(ID "year")
(PUNCT ",")
(ID "d")
(PUNCT ".")
(ID "month")
(PUNCT ",")
(ID "d")
(PUNCT ".")
(ID "day")
(PUNCT ",")
(ID "d")
(PUNCT ".")
(ID "hour")
(PUNCT ",")
(ID "d")
(PUNCT ".")
(ID "minute")
(PUNCT ",")
(ID "d")
(PUNCT ".")
(ID "second")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_escape")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "_controlCharPat")
(PUNCT ".")
(ID "search")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "m")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "strings can't contains control characters; ")
(LIT "use bytes instead")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\r\n")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "\r")
(PUNCT ",")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "&")
(PUNCT ",")
(LIT "&amp;")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "<")
(PUNCT ",")
(LIT "&lt;")
(PUNCT ")")
(NEWLINE)
(ID "text")
(PUNCT "=")
(ID "text")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT ">")
(PUNCT ",")
(LIT "&gt;")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "text")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "_PlistParser")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT ",")
(ID "dict_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current_key")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "root")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dict_type")
(PUNCT "=")
(ID "dict_type")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fileobj")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT "=")
(ID "ParserCreate")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "StartElementHandler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_begin_element")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "EndElementHandler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_end_element")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "CharacterDataHandler")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "handle_data")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "ParseFile")
(PUNCT "(")
(ID "fileobj")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "root")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_begin_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "handler")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "begin_")
(PUNCT "+")
(ID "element")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handler")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "(")
(ID "attrs")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "handle_end_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(LIT "end_")
(PUNCT "+")
(ID "element")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "handler")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "handler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "handle_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_object")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_key")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected element at line %d")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "CurrentLineNumber")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "current_key")
(PUNCT "]")
(PUNCT "=")
(ID "value")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "current_key")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "root")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected element at line %d")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "CurrentLineNumber")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_data")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(LIT "")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "data")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "data")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "begin_dict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "d")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_dict_type")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "d")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_dict")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_key")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "missing value for key '%s' at line %d")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "current_key")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "CurrentLineNumber")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_key")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "current_key")
(KEYWORD or)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(PUNCT ",")
(ID "type")
(PUNCT "(")
(PUNCT "{")
(PUNCT "}")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "unexpected key at line %d")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "parser")
(PUNCT ".")
(ID "CurrentLineNumber")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "current_key")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "begin_array")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "a")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_array")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_true")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_false")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(KEYWORD False)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_integer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_real")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "float")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_string")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_data")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_use_builtin_types")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "_decode_base64")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "Data")
(PUNCT ".")
(ID "fromBase64")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "end_date")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "add_object")
(PUNCT "(")
(ID "_date_from_string")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_data")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_DumbXMLWriter")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "indent_level")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "\t")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT "=")
(ID "file")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT "=")
(ID "indent_level")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT "=")
(ID "indent")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "begin_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "element")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(LIT "<%s>")
(PUNCT "%")
(ID "element")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "end_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(KEYWORD assert)
(ID "self")
(PUNCT ".")
(ID "stack")
(PUNCT ".")
(ID "pop")
(PUNCT "(")
(PUNCT ")")
(PUNCT "==")
(ID "element")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(LIT "</%s>")
(PUNCT "%")
(ID "element")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "simple_element")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "element")
(PUNCT ",")
(ID "value")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "_escape")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(LIT "<%s>%s</%s>")
(PUNCT "%")
(PUNCT "(")
(ID "element")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "element")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(LIT "<%s/>")
(PUNCT "%")
(ID "element")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "writeln")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "line")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "line")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "line")
(PUNCT "=")
(ID "line")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-8")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_PlistWriter")
(PUNCT "(")
(ID "_DumbXMLWriter")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "indent_level")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT #"\t")
(PUNCT ",")
(ID "writeHeader")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "writeHeader")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "PLISTHEADER")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "_DumbXMLWriter")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "indent_level")
(PUNCT ",")
(ID "indent")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sort_keys")
(PUNCT "=")
(ID "sort_keys")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_skipkeys")
(PUNCT "=")
(ID "skipkeys")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(LIT "<plist version=\"1.0\">")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(LIT "</plist>")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_value")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "string")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "true")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "false")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "-")
(LIT 1)
(PUNCT "<<")
(LIT 63)
(PUNCT "<=")
(ID "value")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 64)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "integer")
(PUNCT ",")
(LIT "%d")
(PUNCT "%")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OverflowError")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "real")
(PUNCT ",")
(ID "repr")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_dict")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "Data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_data")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_bytes")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "date")
(PUNCT ",")
(ID "_date_to_string")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "tuple")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_array")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "unsupported type: %s")
(PUNCT "%")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write_data")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_bytes")
(PUNCT "(")
(ID "data")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_bytes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "begin_element")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT "-=")
(LIT 1)
(NEWLINE)
(ID "maxlinelength")
(PUNCT "=")
(ID "max")
(PUNCT "(")
(LIT 16)
(PUNCT ",")
(LIT 76)
(PUNCT "-")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "indent")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT #"\t")
(PUNCT ",")
(LIT #" ")
(PUNCT "*")
(LIT 8)
(PUNCT ")")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "_encode_base64")
(PUNCT "(")
(ID "data")
(PUNCT ",")
(ID "maxlinelength")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT #"\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "line")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "writeln")
(PUNCT "(")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_indent_level")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "end_element")
(PUNCT "(")
(LIT "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write_dict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "d")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "d")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "begin_element")
(PUNCT "(")
(LIT "dict")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sort_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "d")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "d")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "key")
(PUNCT ",")
(ID "value")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_skipkeys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "keys must be strings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "key")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "write_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "end_element")
(PUNCT "(")
(LIT "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "dict")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write_array")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "array")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "array")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "begin_element")
(PUNCT "(")
(LIT "array")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "array")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_value")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "end_element")
(PUNCT "(")
(LIT "array")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "simple_element")
(PUNCT "(")
(LIT "array")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_is_fmt_xml")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefixes")
(PUNCT "=")
(PUNCT "(")
(LIT #"<?xml")
(PUNCT ",")
(LIT #"<plist")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "pfx")
(KEYWORD in)
(ID "prefixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "header")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "pfx")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(ID "bom")
(PUNCT ",")
(ID "encoding")
(KEYWORD in)
(PUNCT "(")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "BOM_UTF8")
(PUNCT ",")
(LIT "utf-8")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "BOM_UTF16_BE")
(PUNCT ",")
(LIT "utf-16-be")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(ID "codecs")
(PUNCT ".")
(ID "BOM_UTF16_LE")
(PUNCT ",")
(LIT "utf-16-le")
(PUNCT ")")
(PUNCT ",")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "header")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(ID "bom")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "start")
(KEYWORD in)
(ID "prefixes")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "=")
(ID "bom")
(PUNCT "+")
(ID "start")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "header")
(PUNCT "[")
(PUNCT ":")
(ID "len")
(PUNCT "(")
(ID "prefix")
(PUNCT ")")
(PUNCT "]")
(PUNCT "==")
(ID "prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "InvalidFileException")
(PUNCT "(")
(ID "ValueError")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT "=")
(LIT "Invalid file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ValueError")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "message")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_BINARY_FORMAT")
(PUNCT "=")
(PUNCT "{")
(LIT 1)
(PUNCT ":")
(LIT "B")
(PUNCT ",")
(LIT 2)
(PUNCT ":")
(LIT "H")
(PUNCT ",")
(LIT 4)
(PUNCT ":")
(LIT "L")
(PUNCT ",")
(LIT 8)
(PUNCT ":")
(LIT "Q")
(PUNCT "}")
(NEWLINE)
(KEYWORD class)
(ID "_BinaryPlistParser")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n    Read or write a binary plist file, following the description of the binary\n    format.  Raise InvalidFileException in case of error, otherwise return the\n    root object.\n\n    see also: http://opensource.apple.com/source/CF/CF-744.18/CFBinaryPList.c\n    ")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT ",")
(ID "dict_type")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_dict_type")
(PUNCT "=")
(ID "dict_type")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fp")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT "=")
(ID "fp")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(PUNCT "-")
(LIT 32)
(PUNCT ",")
(ID "os")
(PUNCT ".")
(ID "SEEK_END")
(PUNCT ")")
(NEWLINE)
(ID "trailer")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 32)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "trailer")
(PUNCT ")")
(PUNCT "!=")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidFileException")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(PUNCT "(")
(ID "offset_size")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_ref_size")
(PUNCT ",")
(ID "num_objects")
(PUNCT ",")
(ID "top_object")
(PUNCT ",")
(ID "offset_table_offset")
(PUNCT ")")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT ">6xBBQQQ")
(PUNCT ",")
(ID "trailer")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset_table_offset")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_ints")
(PUNCT "(")
(ID "num_objects")
(PUNCT ",")
(ID "offset_size")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_read_object")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "[")
(ID "top_object")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(PUNCT "(")
(ID "OSError")
(PUNCT ",")
(ID "IndexError")
(PUNCT ",")
(ID "struct")
(PUNCT ".")
(ID "error")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidFileException")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_get_size")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tokenL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT " return the size of the next object.")
(NEWLINE)
(KEYWORD if)
(ID "tokenL")
(PUNCT "==")
(LIT 15)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "m")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "&")
(LIT 3)
(NEWLINE)
(ID "s")
(PUNCT "=")
(LIT 1)
(PUNCT "<<")
(ID "m")
(NEWLINE)
(ID "f")
(PUNCT "=")
(LIT ">")
(PUNCT "+")
(ID "_BINARY_FORMAT")
(PUNCT "[")
(ID "s")
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(ID "f")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "tokenL")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_ints")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "data")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "size")
(PUNCT "*")
(ID "n")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "size")
(KEYWORD in)
(ID "_BINARY_FORMAT")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT ">")
(PUNCT "+")
(ID "_BINARY_FORMAT")
(PUNCT "[")
(ID "size")
(PUNCT "]")
(PUNCT "*")
(ID "n")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "tuple")
(PUNCT "(")
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "data")
(PUNCT "[")
(ID "i")
(PUNCT ":")
(ID "i")
(PUNCT "+")
(ID "size")
(PUNCT "]")
(PUNCT ",")
(LIT "big")
(PUNCT ")")
(KEYWORD for)
(ID "i")
(KEYWORD in)
(ID "range")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "size")
(PUNCT "*")
(ID "n")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_read_refs")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_read_ints")
(PUNCT "(")
(ID "n")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_ref_size")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_object")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "offset")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "\n        read the object at offset.\n\n        May recursively read sub-objects (content of an array/dict/set)\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(ID "offset")
(PUNCT ")")
(NEWLINE)
(ID "token")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(ID "tokenH")
(PUNCT ",")
(ID "tokenL")
(PUNCT "=")
(ID "token")
(PUNCT "&")
(LIT 240)
(PUNCT ",")
(ID "token")
(PUNCT "&")
(LIT 15)
(NEWLINE)
(KEYWORD if)
(ID "token")
(PUNCT "==")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(PUNCT "==")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(PUNCT "==")
(LIT 9)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(PUNCT "==")
(LIT 15)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT #"")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tokenH")
(PUNCT "==")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "int")
(PUNCT ".")
(ID "from_bytes")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 1)
(PUNCT "<<")
(ID "tokenL")
(PUNCT ")")
(PUNCT ",")
(LIT "big")
(PUNCT ",")
(ID "signed")
(PUNCT "=")
(ID "tokenL")
(PUNCT ">=")
(LIT 3)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(PUNCT "==")
(LIT 34)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT ">f")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 4)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(PUNCT "==")
(LIT 35)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT ">d")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "token")
(PUNCT "==")
(LIT 51)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(ID "struct")
(PUNCT ".")
(ID "unpack")
(PUNCT "(")
(LIT ">d")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 8)
(PUNCT ")")
(PUNCT ")")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD return)
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ".")
(ID "utcfromtimestamp")
(PUNCT "(")
(ID "f")
(PUNCT "+")
(PUNCT "(")
(LIT 31)
(PUNCT "*")
(LIT 365)
(PUNCT "+")
(LIT 8)
(PUNCT ")")
(PUNCT "*")
(LIT 86400)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tokenH")
(PUNCT "==")
(LIT 64)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_size")
(PUNCT "(")
(ID "tokenL")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_use_builtin_types")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "Data")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "tokenH")
(PUNCT "==")
(LIT 80)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_size")
(PUNCT "(")
(ID "tokenL")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tokenH")
(PUNCT "==")
(LIT 96)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_size")
(PUNCT "(")
(ID "tokenL")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "s")
(PUNCT "*")
(LIT 2)
(PUNCT ")")
(PUNCT ".")
(ID "decode")
(PUNCT "(")
(LIT "utf-16be")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tokenH")
(PUNCT "==")
(LIT 160)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_size")
(PUNCT "(")
(ID "tokenL")
(PUNCT ")")
(NEWLINE)
(ID "obj_refs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_refs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_read_object")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "[")
(ID "x")
(PUNCT "]")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "obj_refs")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "tokenH")
(PUNCT "==")
(LIT 208)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "s")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_size")
(PUNCT "(")
(ID "tokenL")
(PUNCT ")")
(NEWLINE)
(ID "key_refs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_refs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "obj_refs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_refs")
(PUNCT "(")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "result")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_dict_type")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "o")
(KEYWORD in)
(ID "zip")
(PUNCT "(")
(ID "key_refs")
(PUNCT ",")
(ID "obj_refs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "result")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_read_object")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "[")
(ID "k")
(PUNCT "]")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_read_object")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "[")
(ID "o")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "result")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "InvalidFileException")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_count_to_size")
(PUNCT "(")
(ID "count")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "count")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "count")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 2)
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "count")
(PUNCT "<<")
(LIT 1)
(PUNCT "<<")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 4)
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT 8)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "_BinaryPlistWriter")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "sort_keys")
(PUNCT ",")
(ID "skipkeys")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT "=")
(ID "fp")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_sort_keys")
(PUNCT "=")
(ID "sort_keys")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_skipkeys")
(PUNCT "=")
(ID "skipkeys")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "write")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_objlist")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_objidtable")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_flatten")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "num_objects")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_objlist")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "=")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "*")
(ID "num_objects")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ref_size")
(PUNCT "=")
(ID "_count_to_size")
(PUNCT "(")
(ID "num_objects")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_ref_format")
(PUNCT "=")
(ID "_BINARY_FORMAT")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_ref_size")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"bplist00")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "obj")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_objlist")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_write_object")
(PUNCT "(")
(ID "obj")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "top_object")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getrefnum")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "offset_table_offset")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "offset_size")
(PUNCT "=")
(ID "_count_to_size")
(PUNCT "(")
(ID "offset_table_offset")
(PUNCT ")")
(NEWLINE)
(ID "offset_format")
(PUNCT "=")
(LIT ">")
(PUNCT "+")
(ID "_BINARY_FORMAT")
(PUNCT "[")
(ID "offset_size")
(PUNCT "]")
(PUNCT "*")
(ID "num_objects")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(ID "offset_format")
(PUNCT ",")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "sort_version")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "trailer")
(PUNCT "=")
(PUNCT "(")
(ID "sort_version")
(PUNCT ",")
(ID "offset_size")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_ref_size")
(PUNCT ",")
(ID "num_objects")
(PUNCT ",")
(ID "top_object")
(PUNCT ",")
(ID "offset_table_offset")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">5xBBBQQQ")
(PUNCT ",")
(PUNCT "*")
(ID "trailer")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_flatten")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "int")
(PUNCT ",")
(ID "float")
(PUNCT ",")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ",")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "Data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "refnum")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_objlist")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_objlist")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "Data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT "[")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "refnum")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT "[")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "refnum")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_objidtable")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "]")
(PUNCT "=")
(ID "refnum")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keys")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "values")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "items")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sort_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "items")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "items")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "items")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_skipkeys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "keys must be strings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "keys")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(NEWLINE)
(ID "values")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "o")
(KEYWORD in)
(ID "itertools")
(PUNCT ".")
(ID "chain")
(PUNCT "(")
(ID "keys")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_flatten")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "o")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_flatten")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_getrefnum")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "Data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT "[")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_objtable")
(PUNCT "[")
(PUNCT "(")
(ID "type")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "TypeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_objidtable")
(PUNCT "[")
(ID "id")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_write_size")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "size")
(PUNCT "<")
(LIT 15)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">B")
(PUNCT ",")
(ID "token")
(PUNCT "|")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "size")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BBB")
(PUNCT ",")
(ID "token")
(PUNCT "|")
(LIT 15)
(PUNCT ",")
(LIT 16)
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "size")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BBH")
(PUNCT ",")
(ID "token")
(PUNCT "|")
(LIT 15)
(PUNCT ",")
(LIT 17)
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "size")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BBL")
(PUNCT ",")
(ID "token")
(PUNCT "|")
(LIT 15)
(PUNCT ",")
(LIT 18)
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BBQ")
(PUNCT ",")
(ID "token")
(PUNCT "|")
(LIT 15)
(PUNCT ",")
(LIT 19)
(PUNCT ",")
(ID "size")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_write_object")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ref")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_getrefnum")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_object_offsets")
(PUNCT "[")
(ID "ref")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "tell")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"\0")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"\b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(KEYWORD is)
(KEYWORD True)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"\t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "int")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "value")
(PUNCT "<")
(LIT 0)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">Bq")
(PUNCT ",")
(LIT 19)
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "struct")
(PUNCT ".")
(ID "error")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OverflowError")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(KEYWORD from)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 8)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BB")
(PUNCT ",")
(LIT 16)
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 16)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BH")
(PUNCT ",")
(LIT 17)
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 32)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BL")
(PUNCT ",")
(LIT 18)
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 63)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">BQ")
(PUNCT ",")
(LIT 19)
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "value")
(PUNCT "<")
(LIT 1)
(PUNCT "<<")
(LIT 64)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT #"\24")
(PUNCT "+")
(ID "value")
(PUNCT ".")
(ID "to_bytes")
(PUNCT "(")
(LIT 16)
(PUNCT ",")
(LIT "big")
(PUNCT ",")
(ID "signed")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "OverflowError")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "float")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">Bd")
(PUNCT ",")
(LIT 35)
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "f")
(PUNCT "=")
(PUNCT "(")
(ID "value")
(PUNCT "-")
(ID "datetime")
(PUNCT ".")
(ID "datetime")
(PUNCT "(")
(LIT 2001)
(PUNCT ",")
(LIT 1)
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(PUNCT ".")
(ID "total_seconds")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">Bd")
(PUNCT ",")
(LIT 51)
(PUNCT ",")
(ID "f")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "Data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_write_size")
(PUNCT "(")
(LIT 64)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "data")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "bytes")
(PUNCT ",")
(ID "bytearray")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_write_size")
(PUNCT "(")
(LIT 64)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "ascii")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_size")
(PUNCT "(")
(LIT 80)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "UnicodeEncodeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "t")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "encode")
(PUNCT "(")
(LIT "utf-16be")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_size")
(PUNCT "(")
(LIT 96)
(PUNCT ",")
(ID "len")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "t")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "list")
(PUNCT ",")
(ID "tuple")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "refs")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "_getrefnum")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(KEYWORD for)
(ID "o")
(KEYWORD in)
(ID "value")
(PUNCT "]")
(NEWLINE)
(ID "s")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "refs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_size")
(PUNCT "(")
(LIT 160)
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_ref_format")
(PUNCT "*")
(ID "s")
(PUNCT ",")
(PUNCT "*")
(ID "refs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "keyRefs")
(PUNCT ",")
(ID "valRefs")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ",")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_sort_keys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rootItems")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "value")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "rootItems")
(PUNCT "=")
(ID "value")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "k")
(PUNCT ",")
(ID "v")
(KEYWORD in)
(ID "rootItems")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "k")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_skipkeys")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(LIT "keys must be strings")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "keyRefs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_getrefnum")
(PUNCT "(")
(ID "k")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "valRefs")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_getrefnum")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "s")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "keyRefs")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_size")
(PUNCT "(")
(LIT 208)
(PUNCT ",")
(ID "s")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_ref_format")
(PUNCT "*")
(ID "s")
(PUNCT ",")
(PUNCT "*")
(ID "keyRefs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_fp")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "struct")
(PUNCT ".")
(ID "pack")
(PUNCT "(")
(LIT ">")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "_ref_format")
(PUNCT "*")
(ID "s")
(PUNCT ",")
(PUNCT "*")
(ID "valRefs")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "TypeError")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_is_fmt_binary")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "header")
(PUNCT "[")
(PUNCT ":")
(LIT 8)
(PUNCT "]")
(PUNCT "==")
(LIT #"bplist00")
(NEWLINE)
(DEDENT)
(ID "_FORMATS")
(PUNCT "=")
(PUNCT "{")
(ID "FMT_XML")
(PUNCT ":")
(ID "dict")
(PUNCT "(")
(ID "detect")
(PUNCT "=")
(ID "_is_fmt_xml")
(PUNCT ",")
(ID "parser")
(PUNCT "=")
(ID "_PlistParser")
(PUNCT ",")
(ID "writer")
(PUNCT "=")
(ID "_PlistWriter")
(PUNCT ",")
(PUNCT ")")
(PUNCT ",")
(ID "FMT_BINARY")
(PUNCT ":")
(ID "dict")
(PUNCT "(")
(ID "detect")
(PUNCT "=")
(ID "_is_fmt_binary")
(PUNCT ",")
(ID "parser")
(PUNCT "=")
(ID "_BinaryPlistParser")
(PUNCT ",")
(ID "writer")
(PUNCT "=")
(ID "_BinaryPlistWriter")
(PUNCT ",")
(PUNCT ")")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "load")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "dict_type")
(PUNCT "=")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read a .plist file. 'fp' should be (readable) file object.\n    Return the unpacked root object (which usually is a dictionary).\n    ")
(NEWLINE)
(KEYWORD if)
(ID "fmt")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "header")
(PUNCT "=")
(ID "fp")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(LIT 32)
(PUNCT ")")
(NEWLINE)
(ID "fp")
(PUNCT ".")
(ID "seek")
(PUNCT "(")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "info")
(KEYWORD in)
(ID "_FORMATS")
(PUNCT ".")
(ID "values")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "info")
(PUNCT "[")
(LIT "detect")
(PUNCT "]")
(PUNCT "(")
(ID "header")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "P")
(PUNCT "=")
(ID "info")
(PUNCT "[")
(LIT "parser")
(PUNCT "]")
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "InvalidFileException")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "P")
(PUNCT "=")
(ID "_FORMATS")
(PUNCT "[")
(ID "fmt")
(PUNCT "]")
(PUNCT "[")
(LIT "parser")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "p")
(PUNCT "=")
(ID "P")
(PUNCT "(")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(PUNCT ",")
(ID "dict_type")
(PUNCT "=")
(ID "dict_type")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "p")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "fp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "loads")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "dict_type")
(PUNCT "=")
(ID "dict")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Read a .plist file from a bytes object.\n    Return the unpacked root object (which usually is a dictionary).\n    ")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "load")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(ID "fmt")
(PUNCT ",")
(ID "use_builtin_types")
(PUNCT "=")
(ID "use_builtin_types")
(PUNCT ",")
(ID "dict_type")
(PUNCT "=")
(ID "dict_type")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dump")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(ID "FMT_XML")
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write 'value' to a .plist file. 'fp' should be a (writable)\n    file object.\n    ")
(NEWLINE)
(KEYWORD if)
(ID "fmt")
(KEYWORD not)
(KEYWORD in)
(ID "_FORMATS")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "ValueError")
(PUNCT "(")
(LIT "Unsupported format: %r")
(PUNCT "%")
(PUNCT "(")
(ID "fmt")
(PUNCT ",")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "writer")
(PUNCT "=")
(ID "_FORMATS")
(PUNCT "[")
(ID "fmt")
(PUNCT "]")
(PUNCT "[")
(LIT "writer")
(PUNCT "]")
(PUNCT "(")
(ID "fp")
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(ID "sort_keys")
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(ID "skipkeys")
(PUNCT ")")
(NEWLINE)
(ID "writer")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dumps")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(ID "FMT_XML")
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a bytes object with the contents for a .plist file.\n    ")
(NEWLINE)
(ID "fp")
(PUNCT "=")
(ID "BytesIO")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "dump")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "fp")
(PUNCT ",")
(ID "fmt")
(PUNCT "=")
(ID "fmt")
(PUNCT ",")
(ID "skipkeys")
(PUNCT "=")
(ID "skipkeys")
(PUNCT ",")
(ID "sort_keys")
(PUNCT "=")
(ID "sort_keys")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "fp")
(PUNCT ".")
(ID "getvalue")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
