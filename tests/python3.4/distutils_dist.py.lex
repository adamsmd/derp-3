(LIT "distutils.dist\n\nProvides the Distribution class, which represents the module distribution\nbeing built/installed/distributed.\n")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(PUNCT ",")
(ID "os")
(PUNCT ",")
(ID "re")
(NEWLINE)
(KEYWORD from)
(ID "email")
(KEYWORD import)
(ID "message_from_file")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "warnings")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "errors")
(KEYWORD import)
(PUNCT "*")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "fancy_getopt")
(KEYWORD import)
(ID "FancyGetopt")
(PUNCT ",")
(ID "translate_longopt")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "util")
(KEYWORD import)
(ID "check_environ")
(PUNCT ",")
(ID "strtobool")
(PUNCT ",")
(ID "rfc822_escape")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(KEYWORD import)
(ID "log")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "debug")
(KEYWORD import)
(ID "DEBUG")
(NEWLINE)
(ID "command_re")
(PUNCT "=")
(ID "re")
(PUNCT ".")
(ID "compile")
(PUNCT "(")
(LIT "^[a-zA-Z]([a-zA-Z0-9_]*)$")
(PUNCT ")")
(NEWLINE)
(KEYWORD class)
(ID "Distribution")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "The core of the Distutils.  Most of the work hiding behind 'setup'\n    is really done within a Distribution instance, which farms the work out\n    to the Distutils commands specified on the command line.\n\n    Setup scripts will almost never instantiate Distribution directly,\n    unless the 'setup()' function is totally inadequate to their needs.\n    However, it is conceivable that a setup script might wish to subclass\n    Distribution for some specialized purpose, and then pass the subclass\n    to 'setup()' as the 'distclass' keyword argument.  If so, it is\n    necessary to respect the expectations that 'setup' has of Distribution.\n    See the code for 'setup()', in core.py, for details.\n    ")
(NEWLINE)
(ID "global_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "verbose")
(PUNCT ",")
(LIT "v")
(PUNCT ",")
(LIT "run verbosely (default)")
(PUNCT ",")
(LIT 1)
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "quiet")
(PUNCT ",")
(LIT "q")
(PUNCT ",")
(LIT "run quietly (turns verbosity off)")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "dry-run")
(PUNCT ",")
(LIT "n")
(PUNCT ",")
(LIT "don't actually do anything")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "help")
(PUNCT ",")
(LIT "h")
(PUNCT ",")
(LIT "show detailed help message")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "no-user-cfg")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "ignore pydistutils.cfg in your home directory")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(ID "common_usage")
(PUNCT "=")
(LIT "Common commands: (see '--help-commands' for more)\n\n  setup.py build      will build the package underneath 'build/'\n  setup.py install    will install the package\n")
(NEWLINE)
(ID "display_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "(")
(LIT "help-commands")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list all available commands")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print package name")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "version")
(PUNCT ",")
(LIT "V")
(PUNCT ",")
(LIT "print package version")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "fullname")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print <package name>-<version>")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "author")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the author's name")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "author-email")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the author's email address")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "maintainer")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the maintainer's name")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "maintainer-email")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the maintainer's email address")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "contact")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the maintainer's name if known, else the author's")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "contact-email")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the maintainer's email address if known, else the author's")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "url")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the URL for this package")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "license")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the license of the package")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "licence")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "alias for --license")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "description")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the package description")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "long-description")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the long package description")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "platforms")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the list of platforms")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "classifiers")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the list of classifiers")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "keywords")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the list of keywords")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "provides")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the list of packages/modules provided")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "requires")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the list of packages/modules required")
(PUNCT ")")
(PUNCT ",")
(PUNCT "(")
(LIT "obsoletes")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "print the list of packages/modules made obsolete")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "display_option_names")
(PUNCT "=")
(PUNCT "[")
(ID "translate_longopt")
(PUNCT "(")
(ID "x")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ")")
(KEYWORD for)
(ID "x")
(KEYWORD in)
(ID "display_options")
(PUNCT "]")
(NEWLINE)
(ID "negative_opt")
(PUNCT "=")
(PUNCT "{")
(LIT "quiet")
(PUNCT ":")
(LIT "verbose")
(PUNCT "}")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attrs")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Construct a new Distribution instance: initialize all the\n        attributes of a Distribution, and then use 'attrs' (a dictionary\n        mapping attribute names to values) to assign some of those\n        attributes their \"real\" values.  (Any attributes not mentioned in\n        'attrs' will be assigned to some null value: 0, None, an empty list\n        or dictionary, etc.)  Most importantly, initialize the\n        'command_obj' attribute to the empty dictionary; this will be\n        filled in with real command objects by 'parse_command_line()'.\n        ")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dry_run")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "help")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "display_option_names")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(LIT 0)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT "=")
(ID "DistributionMetadata")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "basename")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ".")
(ID "_METHOD_BASENAMES")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "method_name")
(PUNCT "=")
(LIT "get_")
(PUNCT "+")
(ID "basename")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "method_name")
(PUNCT ",")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(ID "method_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "command_packages")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "script_name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "script_args")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "dist_files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "packages")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "package_data")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "package_dir")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "py_modules")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ext_modules")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "ext_package")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "include_dirs")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "extra_path")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "scripts")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "data_files")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "password")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "command_obj")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "have_run")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "attrs")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(LIT "options")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "options")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "attrs")
(PUNCT "[")
(LIT "options")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "cmd_options")
(PUNCT ")")
(KEYWORD in)
(ID "options")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_option_dict")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(KEYWORD in)
(ID "cmd_options")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_dict")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(LIT "setup script")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(LIT "licence")
(KEYWORD in)
(ID "attrs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "attrs")
(PUNCT "[")
(LIT "license")
(PUNCT "]")
(PUNCT "=")
(ID "attrs")
(PUNCT "[")
(LIT "licence")
(PUNCT "]")
(NEWLINE)
(KEYWORD del)
(ID "attrs")
(PUNCT "[")
(LIT "licence")
(PUNCT "]")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "'licence' distribution option is deprecated; use 'license'")
(NEWLINE)
(KEYWORD if)
(ID "warnings")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "msg")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD for)
(PUNCT "(")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(KEYWORD in)
(ID "attrs")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(LIT "set_")
(PUNCT "+")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(LIT "set_")
(PUNCT "+")
(ID "key")
(PUNCT ")")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "key")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "msg")
(PUNCT "=")
(LIT "Unknown distribution option: %s")
(PUNCT "%")
(ID "repr")
(PUNCT "(")
(ID "key")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "warnings")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "warnings")
(PUNCT ".")
(ID "warn")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "stderr")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(ID "msg")
(PUNCT "+")
(LIT "\n")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "want_user_cfg")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "script_args")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "arg")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "script_args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "arg")
(PUNCT ".")
(ID "startswith")
(PUNCT "(")
(LIT "-")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "arg")
(PUNCT "==")
(LIT "--no-user-cfg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "want_user_cfg")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "finalize_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_option_dict")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the option dictionary for a given command.  If that\n        command's option dictionary hasn't been created yet, then create it\n        and return the new dictionary; otherwise, return the existing\n        option dictionary.\n        ")
(NEWLINE)
(ID "dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "dict")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "dict")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "dump_option_dicts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "header")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "commands")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "indent")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "pprint")
(KEYWORD import)
(ID "pformat")
(NEWLINE)
(KEYWORD if)
(ID "commands")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "commands")
(PUNCT "=")
(ID "sorted")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "header")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(ID "header")
(PUNCT ")")
(NEWLINE)
(ID "indent")
(PUNCT "=")
(ID "indent")
(PUNCT "+")
(LIT "  ")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "no commands known yet")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "cmd_name")
(KEYWORD in)
(ID "commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cmd_name")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "opt_dict")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "no option dict for '%s' command")
(PUNCT "%")
(ID "cmd_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "option dict for '%s' command:")
(PUNCT "%")
(ID "cmd_name")
(PUNCT ")")
(NEWLINE)
(ID "out")
(PUNCT "=")
(ID "pformat")
(PUNCT "(")
(ID "opt_dict")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "line")
(KEYWORD in)
(ID "out")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(ID "indent")
(PUNCT "+")
(LIT "  ")
(PUNCT "+")
(ID "line")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "find_config_files")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Find as many configuration files as should be processed for this\n        platform, and return a list of filenames in the order in which they\n        should be parsed.  The filenames returned are guaranteed to exist\n        (modulo nasty race conditions).\n\n        There are three possible config files: distutils.cfg in the\n        Distutils installation directory (ie. where the top-level\n        Distutils __inst__.py file lives), a file in the user's home\n        directory named .pydistutils.cfg on Unix and pydistutils.cfg\n        on Windows/Mac; and setup.cfg in the current directory.\n\n        The file in the user's home directory can be disabled with the\n        --no-user-cfg option.\n        ")
(NEWLINE)
(ID "files")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "check_environ")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "sys_dir")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "dirname")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(LIT "distutils")
(PUNCT "]")
(PUNCT ".")
(ID "__file__")
(PUNCT ")")
(NEWLINE)
(ID "sys_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "sys_dir")
(PUNCT ",")
(LIT "distutils.cfg")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "sys_file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "sys_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "name")
(PUNCT "==")
(LIT "posix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_filename")
(PUNCT "=")
(LIT ".pydistutils.cfg")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_filename")
(PUNCT "=")
(LIT "pydistutils.cfg")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "want_user_cfg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "user_file")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "expanduser")
(PUNCT "(")
(LIT "~")
(PUNCT ")")
(PUNCT ",")
(ID "user_filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "user_file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "user_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "local_file")
(PUNCT "=")
(LIT "setup.cfg")
(NEWLINE)
(KEYWORD if)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "isfile")
(PUNCT "(")
(ID "local_file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "files")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "local_file")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "using config files: %s")
(PUNCT "%")
(LIT ", ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "files")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "files")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_config_files")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filenames")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "configparser")
(KEYWORD import)
(ID "ConfigParser")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "prefix")
(PUNCT "!=")
(ID "sys")
(PUNCT ".")
(ID "base_prefix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ignore_options")
(PUNCT "=")
(PUNCT "[")
(LIT "install-base")
(PUNCT ",")
(LIT "install-platbase")
(PUNCT ",")
(LIT "install-lib")
(PUNCT ",")
(LIT "install-platlib")
(PUNCT ",")
(LIT "install-purelib")
(PUNCT ",")
(LIT "install-headers")
(PUNCT ",")
(LIT "install-scripts")
(PUNCT ",")
(LIT "install-data")
(PUNCT ",")
(LIT "prefix")
(PUNCT ",")
(LIT "exec-prefix")
(PUNCT ",")
(LIT "home")
(PUNCT ",")
(LIT "user")
(PUNCT ",")
(LIT "root")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "ignore_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "ignore_options")
(PUNCT "=")
(ID "frozenset")
(PUNCT "(")
(ID "ignore_options")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "filenames")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "filenames")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "find_config_files")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "Distribution.parse_config_files():")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT "=")
(ID "ConfigParser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "filename")
(KEYWORD in)
(ID "filenames")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "  reading %s")
(PUNCT "%")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT ".")
(ID "read")
(PUNCT "(")
(ID "filename")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "section")
(KEYWORD in)
(ID "parser")
(PUNCT ".")
(ID "sections")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "options")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(ID "opt_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_option_dict")
(PUNCT "(")
(ID "section")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "opt")
(KEYWORD in)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "opt")
(PUNCT "!=")
(LIT "__name__")
(KEYWORD and)
(ID "opt")
(KEYWORD not)
(KEYWORD in)
(ID "ignore_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "val")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "section")
(PUNCT ",")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(ID "opt")
(PUNCT "=")
(ID "opt")
(PUNCT ".")
(ID "replace")
(PUNCT "(")
(LIT "-")
(PUNCT ",")
(LIT "_")
(PUNCT ")")
(NEWLINE)
(ID "opt_dict")
(PUNCT "[")
(ID "opt")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(ID "parser")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(LIT "global")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(PUNCT "(")
(ID "src")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT "[")
(LIT "global")
(PUNCT "]")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "alias")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "negative_opt")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "alias")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "alias")
(PUNCT ",")
(KEYWORD not)
(ID "strtobool")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opt")
(KEYWORD in)
(PUNCT "(")
(LIT "verbose")
(PUNCT ",")
(LIT "dry_run")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "strtobool")
(PUNCT "(")
(ID "val")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "opt")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "parse_command_line")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the setup script's command line, taken from the\n        'script_args' instance attribute (which defaults to 'sys.argv[1:]'\n        -- see 'setup()' in core.py).  This list is first processed for\n        \"global options\" -- options that set attributes of the Distribution\n        instance.  Then, it is alternately scanned for Distutils commands\n        and options for that command.  Each new command terminates the\n        options for the previous command.  The allowed options for a\n        command are determined by the 'user_options' attribute of the\n        command class -- thus, we have to be able to load command classes\n        in order to parse the command line.  Any error in that 'options'\n        attribute raises DistutilsGetoptError; any error on the\n        command-line raises DistutilsArgError.  If no Distutils commands\n        were found on the command line, raises DistutilsArgError.  Return\n        true if command-line was successfully parsed and we should carry\n        on with executing commands; false if no errors but we shouldn't\n        execute commands (currently, this only happens if user asks for\n        help).\n        ")
(NEWLINE)
(ID "toplevel_options")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_toplevel_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(ID "parser")
(PUNCT "=")
(ID "FancyGetopt")
(PUNCT "(")
(ID "toplevel_options")
(PUNCT "+")
(ID "self")
(PUNCT ".")
(ID "display_options")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_negative_aliases")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "negative_opt")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_aliases")
(PUNCT "(")
(PUNCT "{")
(LIT "licence")
(PUNCT ":")
(LIT "license")
(PUNCT "}")
(PUNCT ")")
(NEWLINE)
(ID "args")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "script_args")
(PUNCT ",")
(ID "object")
(PUNCT "=")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "option_order")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "get_option_order")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "log")
(PUNCT ".")
(ID "set_verbosity")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "verbose")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "handle_display_options")
(PUNCT "(")
(ID "option_order")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD while)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_parse_command_opts")
(PUNCT "(")
(ID "parser")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "help")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_show_help")
(PUNCT "(")
(ID "parser")
(PUNCT ",")
(ID "display_options")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT ")")
(PUNCT "==")
(LIT 0)
(PUNCT ",")
(ID "commands")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsArgError")
(PUNCT "(")
(LIT "no commands supplied")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_get_toplevel_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the non-display options recognized at the top level.\n\n        This includes options that are recognized *only* at the top\n        level as well as options recognized for commands.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "global_options")
(PUNCT "+")
(PUNCT "[")
(PUNCT "(")
(LIT "command-packages=")
(PUNCT ",")
(KEYWORD None)
(PUNCT ",")
(LIT "list of packages that provide distutils commands")
(PUNCT ")")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_parse_command_opts")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ",")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse the command-line options for a single command.\n        'parser' must be a FancyGetopt instance; 'args' must be the list\n        of arguments, starting with the current command (whose options\n        we are about to parse).  Returns a new version of 'args' with\n        the next command at the front of the list; will be the empty\n        list if there are no more commands on the command line.  Returns\n        None if the user asked for help on this command.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "cmd")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(ID "command")
(PUNCT "=")
(ID "args")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "command_re")
(PUNCT ".")
(ID "match")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "SystemExit")
(PUNCT "(")
(LIT "invalid command name '%s'")
(PUNCT "%")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cmd_class")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_class")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "DistutilsModuleError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsArgError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "issubclass")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ",")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsClassError")
(PUNCT "(")
(LIT "command class %s must subclass Command")
(PUNCT "%")
(ID "cmd_class")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ",")
(LIT "user_options")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ".")
(ID "user_options")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsClassError")
(PUNCT "(")
(PUNCT "(")
(LIT "command class %s must provide ")
(PUNCT "+")
(LIT "'user_options' attribute (a list of tuples)")
(PUNCT ")")
(PUNCT "%")
(ID "cmd_class")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "negative_opt")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "negative_opt")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ",")
(LIT "negative_opt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "negative_opt")
(PUNCT "=")
(ID "negative_opt")
(PUNCT ".")
(ID "copy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "negative_opt")
(PUNCT ".")
(ID "update")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ".")
(ID "negative_opt")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ",")
(LIT "help_options")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ".")
(ID "help_options")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "help_options")
(PUNCT "=")
(ID "fix_help_options")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ".")
(ID "help_options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "help_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT ".")
(ID "set_option_table")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "global_options")
(PUNCT "+")
(ID "cmd_class")
(PUNCT ".")
(ID "user_options")
(PUNCT "+")
(ID "help_options")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "set_negative_aliases")
(PUNCT "(")
(ID "negative_opt")
(PUNCT ")")
(NEWLINE)
(PUNCT "(")
(ID "args")
(PUNCT ",")
(ID "opts")
(PUNCT ")")
(PUNCT "=")
(ID "parser")
(PUNCT ".")
(ID "getopt")
(PUNCT "(")
(ID "args")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(LIT "help")
(PUNCT ")")
(KEYWORD and)
(ID "opts")
(PUNCT ".")
(ID "help")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_show_help")
(PUNCT "(")
(ID "parser")
(PUNCT ",")
(ID "display_options")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "commands")
(PUNCT "=")
(PUNCT "[")
(ID "cmd_class")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ",")
(LIT "help_options")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "cmd_class")
(PUNCT ".")
(ID "help_options")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "help_option_found")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "help_option")
(PUNCT ",")
(ID "short")
(PUNCT ",")
(ID "desc")
(PUNCT ",")
(ID "func")
(PUNCT ")")
(KEYWORD in)
(ID "cmd_class")
(PUNCT ".")
(ID "help_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "hasattr")
(PUNCT "(")
(ID "opts")
(PUNCT ",")
(ID "parser")
(PUNCT ".")
(ID "get_attr_name")
(PUNCT "(")
(ID "help_option")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "help_option_found")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(KEYWORD if)
(ID "callable")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsClassError")
(PUNCT "(")
(LIT "invalid help function %r for help option '%s': ")
(LIT "must be a callable object (function, etc.)")
(PUNCT "%")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "help_option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "help_option_found")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "opt_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_option_dict")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(KEYWORD in)
(ID "vars")
(PUNCT "(")
(ID "opts")
(PUNCT ")")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt_dict")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(PUNCT "=")
(PUNCT "(")
(LIT "command line")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "args")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "finalize_options")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set final values for all the options on the Distribution\n        instance, analogous to the .finalize_options() method of Command\n        objects.\n        ")
(NEWLINE)
(KEYWORD for)
(ID "attr")
(KEYWORD in)
(PUNCT "(")
(LIT "keywords")
(PUNCT ",")
(LIT "platforms")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(ID "attr")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "value")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(PUNCT "[")
(ID "elm")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "elm")
(KEYWORD in)
(ID "value")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(PUNCT "]")
(NEWLINE)
(ID "setattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(ID "attr")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_show_help")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "parser")
(PUNCT ",")
(ID "global_options")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "display_options")
(PUNCT "=")
(LIT 1)
(PUNCT ",")
(ID "commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Show help for the setup script command-line in the form of\n        several lists of command-line options.  'parser' should be a\n        FancyGetopt instance; do not expect it to be returned in the\n        same state, as its option table will be reset to make it\n        generate the correct help text.\n\n        If 'global_options' is true, lists the global options:\n        --verbose, --dry-run, etc.  If 'display_options' is true, lists\n        the \"display-only\" options: --name, --version, etc.  Finally,\n        lists per-command help for every command name or command class\n        in 'commands'.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "gen_usage")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "cmd")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD if)
(ID "global_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "display_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_get_toplevel_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "options")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "global_options")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT ".")
(ID "set_option_table")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "print_help")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "common_usage")
(PUNCT "+")
(LIT "\nGlobal options:")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "display_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "set_option_table")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "display_options")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "print_help")
(PUNCT "(")
(LIT "Information display options (just display ")
(PUNCT "+")
(LIT "information, ignore any commands)")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "command")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "type")
(PUNCT ")")
(KEYWORD and)
(ID "issubclass")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "command")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_class")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(PUNCT "(")
(ID "hasattr")
(PUNCT "(")
(ID "klass")
(PUNCT ",")
(LIT "help_options")
(PUNCT ")")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "klass")
(PUNCT ".")
(ID "help_options")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "set_option_table")
(PUNCT "(")
(ID "klass")
(PUNCT ".")
(ID "user_options")
(PUNCT "+")
(ID "fix_help_options")
(PUNCT "(")
(ID "klass")
(PUNCT ".")
(ID "help_options")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT ".")
(ID "set_option_table")
(PUNCT "(")
(ID "klass")
(PUNCT ".")
(ID "user_options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT ".")
(ID "print_help")
(PUNCT "(")
(LIT "Options for '%s' command:")
(PUNCT "%")
(ID "klass")
(PUNCT ".")
(ID "__name__")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(ID "gen_usage")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "script_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "handle_display_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "option_order")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "If there were any non-global \"display-only\" options\n        (--help-commands or the metadata display options) on the command\n        line, display the requested info and return true; else return\n        false.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "gen_usage")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "help_commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "print_commands")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(LIT "")
(PUNCT ")")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "gen_usage")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "script_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "any_display_options")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "is_display_option")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "option")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "display_options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_display_option")
(PUNCT "[")
(ID "option")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD for)
(PUNCT "(")
(ID "opt")
(PUNCT ",")
(ID "val")
(PUNCT ")")
(KEYWORD in)
(ID "option_order")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "val")
(KEYWORD and)
(ID "is_display_option")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "opt")
(PUNCT "=")
(ID "translate_longopt")
(PUNCT "(")
(ID "opt")
(PUNCT ")")
(NEWLINE)
(ID "value")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "metadata")
(PUNCT ",")
(LIT "get_")
(PUNCT "+")
(ID "opt")
(PUNCT ")")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "opt")
(KEYWORD in)
(PUNCT "[")
(LIT "keywords")
(PUNCT ",")
(LIT "platforms")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "opt")
(KEYWORD in)
(PUNCT "(")
(LIT "classifiers")
(PUNCT ",")
(LIT "provides")
(PUNCT ",")
(LIT "requires")
(PUNCT ",")
(LIT "obsoletes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(LIT "\n")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "any_display_options")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "any_display_options")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "print_command_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "commands")
(PUNCT ",")
(ID "header")
(PUNCT ",")
(ID "max_length")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print a subset of the list of all commands -- used by\n        'print_commands()'.\n        ")
(NEWLINE)
(ID "print")
(PUNCT "(")
(ID "header")
(PUNCT "+")
(LIT ":")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "klass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_class")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(ID "klass")
(PUNCT ".")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(LIT "(no description available)")
(NEWLINE)
(DEDENT)
(ID "print")
(PUNCT "(")
(LIT "  %-*s  %s")
(PUNCT "%")
(PUNCT "(")
(ID "max_length")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "print_commands")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Print out a help message listing all available commands with a\n        description of each.  The list is divided into \"standard commands\"\n        (listed in distutils.command.__all__) and \"extra commands\"\n        (mentioned in self.cmdclass, but not a standard command).  The\n        descriptions come from the command class attribute\n        'description'.\n        ")
(NEWLINE)
(KEYWORD import)
(ID "distutils")
(PUNCT ".")
(ID "command")
(NEWLINE)
(ID "std_commands")
(PUNCT "=")
(ID "distutils")
(PUNCT ".")
(ID "command")
(PUNCT ".")
(ID "__all__")
(NEWLINE)
(ID "is_std")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "std_commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_std")
(PUNCT "[")
(ID "cmd")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "extra_commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_std")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_commands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "max_length")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(PUNCT "(")
(ID "std_commands")
(PUNCT "+")
(ID "extra_commands")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ">")
(ID "max_length")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "max_length")
(PUNCT "=")
(ID "len")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "print_command_list")
(PUNCT "(")
(ID "std_commands")
(PUNCT ",")
(LIT "Standard commands")
(PUNCT ",")
(ID "max_length")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "extra_commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "print")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "print_command_list")
(PUNCT "(")
(ID "extra_commands")
(PUNCT ",")
(LIT "Extra commands")
(PUNCT ",")
(ID "max_length")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_command_list")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get a list of (command, description) tuples.\n        The list is divided into \"standard commands\" (listed in\n        distutils.command.__all__) and \"extra commands\" (mentioned in\n        self.cmdclass, but not a standard command).  The descriptions come\n        from the command class attribute 'description'.\n        ")
(NEWLINE)
(KEYWORD import)
(ID "distutils")
(PUNCT ".")
(ID "command")
(NEWLINE)
(ID "std_commands")
(PUNCT "=")
(ID "distutils")
(PUNCT ".")
(ID "command")
(PUNCT ".")
(ID "__all__")
(NEWLINE)
(ID "is_std")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "std_commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_std")
(PUNCT "[")
(ID "cmd")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(ID "extra_commands")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT ".")
(ID "keys")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "is_std")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "extra_commands")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "rv")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(PUNCT "(")
(ID "std_commands")
(PUNCT "+")
(ID "extra_commands")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "klass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_class")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(ID "klass")
(PUNCT ".")
(ID "description")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "description")
(PUNCT "=")
(LIT "(no description available)")
(NEWLINE)
(DEDENT)
(ID "rv")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(PUNCT "(")
(ID "cmd")
(PUNCT ",")
(ID "description")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "rv")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_command_packages")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return a list of packages from which commands are loaded.")
(NEWLINE)
(ID "pkgs")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_packages")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "pkgs")
(PUNCT ",")
(ID "list")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "pkgs")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pkgs")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "pkgs")
(PUNCT "=")
(PUNCT "[")
(ID "pkg")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "pkg")
(KEYWORD in)
(ID "pkgs")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(KEYWORD if)
(ID "pkg")
(PUNCT "!=")
(LIT "")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(LIT "distutils.command")
(KEYWORD not)
(KEYWORD in)
(ID "pkgs")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "pkgs")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(LIT "distutils.command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "command_packages")
(PUNCT "=")
(ID "pkgs")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "pkgs")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_command_class")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the class that implements the Distutils command named by\n        'command'.  First we check the 'cmdclass' dictionary; if the\n        command is mentioned there, we fetch the class object from the\n        dictionary and return it.  Otherwise we load the command module\n        (\"distutils.command.\" + command) and fetch the command class from\n        the module.  The loaded class is also stored in 'cmdclass'\n        to speed future calls to 'get_command_class()'.\n\n        Raises DistutilsModuleError if the expected module could not be\n        found, or if that module does not define the expected class.\n        ")
(NEWLINE)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "klass")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "klass")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(ID "pkgname")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "get_command_packages")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "module_name")
(PUNCT "=")
(LIT "%s.%s")
(PUNCT "%")
(PUNCT "(")
(ID "pkgname")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(NEWLINE)
(ID "klass_name")
(PUNCT "=")
(ID "command")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "__import__")
(PUNCT "(")
(ID "module_name")
(PUNCT ")")
(NEWLINE)
(ID "module")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT "[")
(ID "module_name")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "klass")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "module")
(PUNCT ",")
(ID "klass_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsModuleError")
(PUNCT "(")
(LIT "invalid command '%s' (no class '%s' in module '%s')")
(PUNCT "%")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "klass_name")
(PUNCT ",")
(ID "module_name")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "cmdclass")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT "=")
(ID "klass")
(NEWLINE)
(KEYWORD return)
(ID "klass")
(NEWLINE)
(DEDENT)
(KEYWORD raise)
(ID "DistutilsModuleError")
(PUNCT "(")
(LIT "invalid command '%s'")
(PUNCT "%")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_command_obj")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "create")
(PUNCT "=")
(LIT 1)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        ")
(NEWLINE)
(ID "cmd_obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_obj")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "cmd_obj")
(KEYWORD and)
(ID "create")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "Distribution.get_command_obj(): ")
(LIT "creating '%s' command object")
(PUNCT "%")
(ID "command")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "klass")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_class")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(ID "cmd_obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_obj")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT "=")
(ID "klass")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "have_run")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "options")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "command_options")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_set_command_options")
(PUNCT "(")
(ID "cmd_obj")
(PUNCT ",")
(ID "options")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "cmd_obj")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_set_command_options")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command_obj")
(PUNCT ",")
(ID "option_dict")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the options for 'command_obj' from 'option_dict'.  Basically\n        this means copying elements of a dictionary ('option_dict') to\n        attributes of an instance ('command').\n\n        'command_obj' must be a Command instance.  If 'option_dict' is not\n        supplied, uses the standard option dictionary for this command\n        (from 'self.command_options').\n        ")
(NEWLINE)
(ID "command_name")
(PUNCT "=")
(ID "command_obj")
(PUNCT ".")
(ID "get_command_name")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "option_dict")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "option_dict")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_option_dict")
(PUNCT "(")
(ID "command_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "  setting options for '%s' command:")
(PUNCT "%")
(ID "command_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD for)
(PUNCT "(")
(ID "option")
(PUNCT ",")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(KEYWORD in)
(ID "option_dict")
(PUNCT ".")
(ID "items")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "DEBUG")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "announce")
(PUNCT "(")
(LIT "    %s = %s (from %s)")
(PUNCT "%")
(PUNCT "(")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "source")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bool_opts")
(PUNCT "=")
(PUNCT "[")
(ID "translate_longopt")
(PUNCT "(")
(ID "o")
(PUNCT ")")
(KEYWORD for)
(ID "o")
(KEYWORD in)
(ID "command_obj")
(PUNCT ".")
(ID "boolean_options")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "bool_opts")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "neg_opt")
(PUNCT "=")
(ID "command_obj")
(PUNCT ".")
(ID "negative_opt")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "AttributeError")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "neg_opt")
(PUNCT "=")
(PUNCT "{")
(PUNCT "}")
(NEWLINE)
(DEDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "is_string")
(PUNCT "=")
(ID "isinstance")
(PUNCT "(")
(ID "value")
(PUNCT ",")
(ID "str")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "option")
(KEYWORD in)
(ID "neg_opt")
(KEYWORD and)
(ID "is_string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "command_obj")
(PUNCT ",")
(ID "neg_opt")
(PUNCT "[")
(ID "option")
(PUNCT "]")
(PUNCT ",")
(KEYWORD not)
(ID "strtobool")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "option")
(KEYWORD in)
(ID "bool_opts")
(KEYWORD and)
(ID "is_string")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "command_obj")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "strtobool")
(PUNCT "(")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "command_obj")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "setattr")
(PUNCT "(")
(ID "command_obj")
(PUNCT ",")
(ID "option")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(LIT "error in %s: command '%s' has no such option '%s'")
(PUNCT "%")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "command_name")
(PUNCT ",")
(ID "option")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "ValueError")
(KEYWORD as)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "DistutilsOptionError")
(PUNCT "(")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "reinitialize_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ",")
(ID "reinit_subcommands")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Reinitializes a command to the state it was in when first\n        returned by 'get_command_obj()': ie., initialized but not yet\n        finalized.  This provides the opportunity to sneak option\n        values in programmatically, overriding or supplementing\n        user-supplied values from the config files and command line.\n        You'll have to re-finalize the command object (by calling\n        'finalize_options()' or 'ensure_finalized()') before using it for\n        real.\n\n        'command' should be a command name (string) or command object.  If\n        'reinit_subcommands' is true, also reinitializes the command's\n        sub-commands, as declared by the 'sub_commands' class attribute (if\n        it has one).  See the \"install\" command for an example.  Only\n        reinitializes the sub-commands that actually matter, ie. those\n        whose test predicates return true.\n\n        Returns the reinitialized command object.\n        ")
(NEWLINE)
(KEYWORD from)
(ID "distutils")
(PUNCT ".")
(ID "cmd")
(KEYWORD import)
(ID "Command")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "command")
(PUNCT ",")
(ID "Command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command_name")
(PUNCT "=")
(ID "command")
(NEWLINE)
(ID "command")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_obj")
(PUNCT "(")
(ID "command_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "command_name")
(PUNCT "=")
(ID "command")
(PUNCT ".")
(ID "get_command_name")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "command")
(PUNCT ".")
(ID "finalized")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "command")
(NEWLINE)
(DEDENT)
(ID "command")
(PUNCT ".")
(ID "initialize_options")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "command")
(PUNCT ".")
(ID "finalized")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "have_run")
(PUNCT "[")
(ID "command_name")
(PUNCT "]")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_set_command_options")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "reinit_subcommands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "sub")
(KEYWORD in)
(ID "command")
(PUNCT ".")
(ID "get_sub_commands")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "reinitialize_command")
(PUNCT "(")
(ID "sub")
(PUNCT ",")
(ID "reinit_subcommands")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD return)
(ID "command")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "announce")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "msg")
(PUNCT ",")
(ID "level")
(PUNCT "=")
(ID "log")
(PUNCT ".")
(ID "INFO")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "log")
(PUNCT ".")
(ID "log")
(PUNCT "(")
(ID "level")
(PUNCT ",")
(ID "msg")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_commands")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run each command that was seen on the setup script command line.\n        Uses the list of commands found and cache of command objects\n        created by 'get_command_obj()'.\n        ")
(NEWLINE)
(KEYWORD for)
(ID "cmd")
(KEYWORD in)
(ID "self")
(PUNCT ".")
(ID "commands")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "run_command")
(PUNCT "(")
(ID "cmd")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "run_command")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Do whatever it takes to run a command (including nothing at all,\n        if the command has already been run).  Specifically: if we have\n        already created and run the command named by 'command', return\n        silently without doing anything.  If the command named by 'command'\n        doesn't even have a command object yet, create one.  Then invoke\n        'run()' on that command object (or an existing one).\n        ")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "have_run")
(PUNCT ".")
(ID "get")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(NEWLINE)
(DEDENT)
(ID "log")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "running %s")
(PUNCT ",")
(ID "command")
(PUNCT ")")
(NEWLINE)
(ID "cmd_obj")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "get_command_obj")
(PUNCT "(")
(ID "command")
(PUNCT ")")
(NEWLINE)
(ID "cmd_obj")
(PUNCT ".")
(ID "ensure_finalized")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "cmd_obj")
(PUNCT ".")
(ID "run")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "have_run")
(PUNCT "[")
(ID "command")
(PUNCT "]")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_pure_modules")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "packages")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "py_modules")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_ext_modules")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "ext_modules")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "ext_modules")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_c_libraries")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "libraries")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "libraries")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_modules")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "has_pure_modules")
(PUNCT "(")
(PUNCT ")")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "has_ext_modules")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_headers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "headers")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "headers")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_scripts")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "scripts")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "scripts")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "has_data_files")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "data_files")
(KEYWORD and)
(ID "len")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "data_files")
(PUNCT ")")
(PUNCT ">")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_pure")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "has_pure_modules")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_ext_modules")
(PUNCT "(")
(PUNCT ")")
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "has_c_libraries")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "DistributionMetadata")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Dummy class to hold the distribution meta-data: name, version,\n    author, and so forth.\n    ")
(NEWLINE)
(ID "_METHOD_BASENAMES")
(PUNCT "=")
(PUNCT "(")
(LIT "name")
(PUNCT ",")
(LIT "version")
(PUNCT ",")
(LIT "author")
(PUNCT ",")
(LIT "author_email")
(PUNCT ",")
(LIT "maintainer")
(PUNCT ",")
(LIT "maintainer_email")
(PUNCT ",")
(LIT "url")
(PUNCT ",")
(LIT "license")
(PUNCT ",")
(LIT "description")
(PUNCT ",")
(LIT "long_description")
(PUNCT ",")
(LIT "keywords")
(PUNCT ",")
(LIT "platforms")
(PUNCT ",")
(LIT "fullname")
(PUNCT ",")
(LIT "contact")
(PUNCT ",")
(LIT "contact_email")
(PUNCT ",")
(LIT "license")
(PUNCT ",")
(LIT "classifiers")
(PUNCT ",")
(LIT "download_url")
(PUNCT ",")
(LIT "provides")
(PUNCT ",")
(LIT "requires")
(PUNCT ",")
(LIT "obsoletes")
(PUNCT ",")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "path")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "path")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "read_pkg_file")
(PUNCT "(")
(ID "open")
(PUNCT "(")
(ID "path")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "author")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "author_email")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maintainer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maintainer_email")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "url")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "license")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "long_description")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "keywords")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "platforms")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "classifiers")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "download_url")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "provides")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "requires")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "obsoletes")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "read_pkg_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Reads the metadata values from a file object.")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(ID "message_from_file")
(PUNCT "(")
(ID "file")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_read_field")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(ID "msg")
(PUNCT "[")
(ID "name")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT "==")
(LIT "UNKNOWN")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_read_list")
(PUNCT "(")
(ID "name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "values")
(PUNCT "=")
(ID "msg")
(PUNCT ".")
(ID "get_all")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "values")
(PUNCT "==")
(PUNCT "[")
(PUNCT "]")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "values")
(NEWLINE)
(DEDENT)
(ID "metadata_version")
(PUNCT "=")
(ID "msg")
(PUNCT "[")
(LIT "metadata-version")
(PUNCT "]")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "name")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "name")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "version")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "version")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "summary")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "author")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "author")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maintainer")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "author_email")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "author-email")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "maintainer_email")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "url")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "home-page")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "license")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "license")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "download-url")
(KEYWORD in)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "download_url")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "download-url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "download_url")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "long_description")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "description")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "description")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "summary")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(LIT "keywords")
(KEYWORD in)
(ID "msg")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "keywords")
(PUNCT "=")
(ID "_read_field")
(PUNCT "(")
(LIT "keywords")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "platforms")
(PUNCT "=")
(ID "_read_list")
(PUNCT "(")
(LIT "platform")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "classifiers")
(PUNCT "=")
(ID "_read_list")
(PUNCT "(")
(LIT "classifier")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "metadata_version")
(PUNCT "==")
(LIT "1.1")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "requires")
(PUNCT "=")
(ID "_read_list")
(PUNCT "(")
(LIT "requires")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "provides")
(PUNCT "=")
(ID "_read_list")
(PUNCT "(")
(LIT "provides")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "obsoletes")
(PUNCT "=")
(ID "_read_list")
(PUNCT "(")
(LIT "obsoletes")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "requires")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "provides")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "obsoletes")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write_pkg_info")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "base_dir")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write the PKG-INFO file into the release tree.\n        ")
(NEWLINE)
(KEYWORD with)
(ID "open")
(PUNCT "(")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "base_dir")
(PUNCT ",")
(LIT "PKG-INFO")
(PUNCT ")")
(PUNCT ",")
(LIT "w")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(LIT "UTF-8")
(PUNCT ")")
(KEYWORD as)
(ID "pkg_info")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "write_pkg_file")
(PUNCT "(")
(ID "pkg_info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "write_pkg_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Write the PKG-INFO format data to a file object.\n        ")
(NEWLINE)
(ID "version")
(PUNCT "=")
(LIT "1.0")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "provides")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "requires")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "obsoletes")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "classifiers")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "download_url")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "version")
(PUNCT "=")
(LIT "1.1")
(NEWLINE)
(DEDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Metadata-Version: %s\n")
(PUNCT "%")
(ID "version")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Name: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_name")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Version: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Summary: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_description")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Home-page: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_url")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Author: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_contact")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Author-email: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_contact_email")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "License: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "get_license")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "download_url")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Download-URL: %s\n")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "download_url")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "long_desc")
(PUNCT "=")
(ID "rfc822_escape")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_long_description")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Description: %s\n")
(PUNCT "%")
(ID "long_desc")
(PUNCT ")")
(NEWLINE)
(ID "keywords")
(PUNCT "=")
(LIT ",")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_keywords")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "keywords")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "Keywords: %s\n")
(PUNCT "%")
(ID "keywords")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_write_list")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "Platform")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_platforms")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_list")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "Classifier")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_classifiers")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_list")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "Requires")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_requires")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_list")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "Provides")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_provides")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_write_list")
(PUNCT "(")
(ID "file")
(PUNCT ",")
(LIT "Obsoletes")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_obsoletes")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_write_list")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "file")
(PUNCT ",")
(ID "name")
(PUNCT ",")
(ID "values")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD for)
(ID "value")
(KEYWORD in)
(ID "values")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "file")
(PUNCT ".")
(ID "write")
(PUNCT "(")
(LIT "%s: %s\n")
(PUNCT "%")
(PUNCT "(")
(ID "name")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_name")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "name")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_version")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "version")
(KEYWORD or)
(LIT "0.0.0")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_fullname")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(LIT "%s-%s")
(PUNCT "%")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "get_name")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "get_version")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_author")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "author")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_author_email")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "author_email")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_maintainer")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "maintainer")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_maintainer_email")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "maintainer_email")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_contact")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "maintainer")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "author")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_contact_email")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "maintainer_email")
(KEYWORD or)
(ID "self")
(PUNCT ".")
(ID "author_email")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_url")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "url")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_license")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "license")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(ID "get_licence")
(PUNCT "=")
(ID "get_license")
(NEWLINE)
(KEYWORD def)
(ID "get_description")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "description")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_long_description")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "long_description")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_keywords")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "keywords")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_platforms")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "platforms")
(KEYWORD or)
(PUNCT "[")
(LIT "UNKNOWN")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_classifiers")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "classifiers")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_download_url")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "download_url")
(KEYWORD or)
(LIT "UNKNOWN")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_requires")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "requires")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_requires")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "distutils")
(PUNCT ".")
(ID "versionpredicate")
(NEWLINE)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "distutils")
(PUNCT ".")
(ID "versionpredicate")
(PUNCT ".")
(ID "VersionPredicate")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "requires")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_provides")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "provides")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_provides")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "value")
(PUNCT "=")
(PUNCT "[")
(ID "v")
(PUNCT ".")
(ID "strip")
(PUNCT "(")
(PUNCT ")")
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "distutils")
(PUNCT ".")
(ID "versionpredicate")
(NEWLINE)
(ID "distutils")
(PUNCT ".")
(ID "versionpredicate")
(PUNCT ".")
(ID "split_provision")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "provides")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_obsoletes")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "obsoletes")
(KEYWORD or)
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_obsoletes")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "value")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "distutils")
(PUNCT ".")
(ID "versionpredicate")
(NEWLINE)
(KEYWORD for)
(ID "v")
(KEYWORD in)
(ID "value")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "distutils")
(PUNCT ".")
(ID "versionpredicate")
(PUNCT ".")
(ID "VersionPredicate")
(PUNCT "(")
(ID "v")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "obsoletes")
(PUNCT "=")
(ID "value")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "fix_help_options")
(PUNCT "(")
(ID "options")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Convert a 4-tuple 'help_options' list as found in various command\n    classes to the 3-tuple form required by FancyGetopt.\n    ")
(NEWLINE)
(ID "new_options")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(NEWLINE)
(KEYWORD for)
(ID "help_tuple")
(KEYWORD in)
(ID "options")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "new_options")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "help_tuple")
(PUNCT "[")
(LIT 0)
(PUNCT ":")
(LIT 3)
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "new_options")
(NEWLINE)
(DEDENT)
(ENDMARKER)
