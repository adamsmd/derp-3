(LIT "Simple API for XML (SAX) implementation for Python.\n\nThis module provides an implementation of the SAX 2 interface;\ninformation about the Java version of the interface can be found at\nhttp://www.megginson.com/SAX/.  The Python version of the interface is\ndocumented at <...>.\n\nThis package contains the following modules:\n\nhandler -- Base classes and constants which define the SAX 2 API for\n           the 'client-side' of SAX for Python.\n\nsaxutils -- Implementation of the convenience classes commonly used to\n            work with SAX.\n\nxmlreader -- Base classes and constants which define the SAX 2 API for\n             the parsers used with SAX for Python.\n\nexpatreader -- Driver that allows use of the Expat parser with SAX.\n")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "xmlreader")
(KEYWORD import)
(ID "InputSource")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "handler")
(KEYWORD import)
(ID "ContentHandler")
(PUNCT ",")
(ID "ErrorHandler")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(ID "_exceptions")
(KEYWORD import)
(ID "SAXException")
(PUNCT ",")
(ID "SAXNotRecognizedException")
(PUNCT ",")
(ID "SAXParseException")
(PUNCT ",")
(ID "SAXNotSupportedException")
(PUNCT ",")
(ID "SAXReaderNotAvailable")
(NEWLINE)
(KEYWORD def)
(ID "parse")
(PUNCT "(")
(ID "source")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "errorHandler")
(PUNCT "=")
(ID "ErrorHandler")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "parser")
(PUNCT "=")
(ID "make_parser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "setContentHandler")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "setErrorHandler")
(PUNCT "(")
(ID "errorHandler")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "source")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parseString")
(PUNCT "(")
(ID "string")
(PUNCT ",")
(ID "handler")
(PUNCT ",")
(ID "errorHandler")
(PUNCT "=")
(ID "ErrorHandler")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "io")
(KEYWORD import)
(ID "BytesIO")
(NEWLINE)
(KEYWORD if)
(ID "errorHandler")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "errorHandler")
(PUNCT "=")
(ID "ErrorHandler")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "parser")
(PUNCT "=")
(ID "make_parser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "setContentHandler")
(PUNCT "(")
(ID "handler")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "setErrorHandler")
(PUNCT "(")
(ID "errorHandler")
(PUNCT ")")
(NEWLINE)
(ID "inpsrc")
(PUNCT "=")
(ID "InputSource")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "inpsrc")
(PUNCT ".")
(ID "setByteStream")
(PUNCT "(")
(ID "BytesIO")
(PUNCT "(")
(ID "string")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(ID "parser")
(PUNCT ".")
(ID "parse")
(PUNCT "(")
(ID "inpsrc")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "default_parser_list")
(PUNCT "=")
(PUNCT "[")
(LIT "xml.sax.expatreader")
(PUNCT "]")
(NEWLINE)
(ID "_false")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(KEYWORD if)
(ID "_false")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "xml")
(PUNCT ".")
(ID "sax")
(PUNCT ".")
(ID "expatreader")
(NEWLINE)
(DEDENT)
(KEYWORD import)
(ID "os")
(PUNCT ",")
(ID "sys")
(NEWLINE)
(KEYWORD if)
(LIT "PY_SAX_PARSER")
(KEYWORD in)
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_parser_list")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "environ")
(PUNCT "[")
(LIT "PY_SAX_PARSER")
(PUNCT "]")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD del)
(ID "os")
(NEWLINE)
(ID "_key")
(PUNCT "=")
(LIT "python.xml.sax.parser")
(NEWLINE)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "java")
(KEYWORD and)
(ID "sys")
(PUNCT ".")
(ID "registry")
(PUNCT ".")
(ID "containsKey")
(PUNCT "(")
(ID "_key")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "default_parser_list")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "registry")
(PUNCT ".")
(ID "getProperty")
(PUNCT "(")
(ID "_key")
(PUNCT ")")
(PUNCT ".")
(ID "split")
(PUNCT "(")
(LIT ",")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "make_parser")
(PUNCT "(")
(ID "parser_list")
(PUNCT "=")
(PUNCT "[")
(PUNCT "]")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Creates and returns a SAX parser.\n\n    Creates the first parser it is able to instantiate of the ones\n    given in the list created by doing parser_list +\n    default_parser_list.  The lists must contain the names of Python\n    modules containing both a SAX parser and a create_parser function.")
(NEWLINE)
(KEYWORD for)
(ID "parser_name")
(KEYWORD in)
(ID "parser_list")
(PUNCT "+")
(ID "default_parser_list")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_create_parser")
(PUNCT "(")
(ID "parser_name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "ImportError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD if)
(ID "parser_name")
(KEYWORD in)
(ID "sys")
(PUNCT ".")
(ID "modules")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD except)
(ID "SAXReaderNotAvailable")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD pass)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD raise)
(ID "SAXReaderNotAvailable")
(PUNCT "(")
(LIT "No parsers found")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "sys")
(PUNCT ".")
(ID "platform")
(PUNCT "[")
(PUNCT ":")
(LIT 4)
(PUNCT "]")
(PUNCT "==")
(LIT "java")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_create_parser")
(PUNCT "(")
(ID "parser_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(ID "org")
(PUNCT ".")
(ID "python")
(PUNCT ".")
(ID "core")
(KEYWORD import)
(ID "imp")
(NEWLINE)
(ID "drv_module")
(PUNCT "=")
(ID "imp")
(PUNCT ".")
(ID "importName")
(PUNCT "(")
(ID "parser_name")
(PUNCT ",")
(LIT 0)
(PUNCT ",")
(ID "globals")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "drv_module")
(PUNCT ".")
(ID "create_parser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "_create_parser")
(PUNCT "(")
(ID "parser_name")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "drv_module")
(PUNCT "=")
(ID "__import__")
(PUNCT "(")
(ID "parser_name")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "{")
(PUNCT "}")
(PUNCT ",")
(PUNCT "[")
(LIT "create_parser")
(PUNCT "]")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "drv_module")
(PUNCT ".")
(ID "create_parser")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD del)
(ID "sys")
(NEWLINE)
(ENDMARKER)
