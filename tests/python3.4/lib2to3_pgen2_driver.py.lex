(LIT "Parser driver.\n\nThis provides a high-level interface to parse a file into a syntax tree.\n\n")
(NEWLINE)
(ID "__author__")
(PUNCT "=")
(LIT "Guido van Rossum <guido@python.org>")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "Driver")
(PUNCT ",")
(LIT "load_grammar")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "codecs")
(NEWLINE)
(KEYWORD import)
(ID "io")
(NEWLINE)
(KEYWORD import)
(ID "os")
(NEWLINE)
(KEYWORD import)
(ID "logging")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "grammar")
(PUNCT ",")
(ID "parse")
(PUNCT ",")
(ID "token")
(PUNCT ",")
(ID "tokenize")
(PUNCT ",")
(ID "pgen")
(NEWLINE)
(KEYWORD class)
(ID "Driver")
(PUNCT "(")
(ID "object")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "grammar")
(PUNCT ",")
(ID "convert")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "logger")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "grammar")
(PUNCT "=")
(ID "grammar")
(NEWLINE)
(KEYWORD if)
(ID "logger")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT "=")
(ID "logger")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "convert")
(PUNCT "=")
(ID "convert")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_tokens")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "tokens")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a series of tokens and return the syntax tree.")
(NEWLINE)
(ID "p")
(PUNCT "=")
(ID "parse")
(PUNCT ".")
(ID "Parser")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "grammar")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "convert")
(PUNCT ")")
(NEWLINE)
(ID "p")
(PUNCT ".")
(ID "setup")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(LIT 1)
(NEWLINE)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(ID "type")
(PUNCT "=")
(ID "value")
(PUNCT "=")
(ID "start")
(PUNCT "=")
(ID "end")
(PUNCT "=")
(ID "line_text")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(KEYWORD for)
(ID "quintuple")
(KEYWORD in)
(ID "tokens")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "start")
(PUNCT ",")
(ID "end")
(PUNCT ",")
(ID "line_text")
(PUNCT "=")
(ID "quintuple")
(NEWLINE)
(KEYWORD if)
(ID "start")
(PUNCT "!=")
(PUNCT "(")
(ID "lineno")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(PUNCT "(")
(ID "lineno")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(PUNCT "<=")
(ID "start")
(PUNCT ",")
(PUNCT "(")
(PUNCT "(")
(ID "lineno")
(PUNCT ",")
(ID "column")
(PUNCT ")")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(NEWLINE)
(ID "s_lineno")
(PUNCT ",")
(ID "s_column")
(PUNCT "=")
(ID "start")
(NEWLINE)
(KEYWORD if)
(ID "lineno")
(PUNCT "<")
(ID "s_lineno")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "+=")
(LIT "\n")
(PUNCT "*")
(PUNCT "(")
(ID "s_lineno")
(PUNCT "-")
(ID "lineno")
(PUNCT ")")
(NEWLINE)
(ID "lineno")
(PUNCT "=")
(ID "s_lineno")
(NEWLINE)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "column")
(PUNCT "<")
(ID "s_column")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "+=")
(ID "line_text")
(PUNCT "[")
(ID "column")
(PUNCT ":")
(ID "s_column")
(PUNCT "]")
(NEWLINE)
(ID "column")
(PUNCT "=")
(ID "s_column")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD if)
(ID "type")
(KEYWORD in)
(PUNCT "(")
(ID "tokenize")
(PUNCT ".")
(ID "COMMENT")
(PUNCT ",")
(ID "tokenize")
(PUNCT ".")
(ID "NL")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "prefix")
(PUNCT "+=")
(ID "value")
(NEWLINE)
(ID "lineno")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(KEYWORD continue)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "type")
(PUNCT "==")
(ID "token")
(PUNCT ".")
(ID "OP")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "type")
(PUNCT "=")
(ID "grammar")
(PUNCT ".")
(ID "opmap")
(PUNCT "[")
(ID "value")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "%s %r (prefix=%r)")
(PUNCT ",")
(ID "token")
(PUNCT ".")
(ID "tok_name")
(PUNCT "[")
(ID "type")
(PUNCT "]")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(ID "prefix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "p")
(PUNCT ".")
(ID "addtoken")
(PUNCT "(")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "debug")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "logger")
(PUNCT ".")
(ID "debug")
(PUNCT "(")
(LIT "Stop.")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD break)
(NEWLINE)
(DEDENT)
(ID "prefix")
(PUNCT "=")
(LIT "")
(NEWLINE)
(ID "lineno")
(PUNCT ",")
(ID "column")
(PUNCT "=")
(ID "end")
(NEWLINE)
(KEYWORD if)
(ID "value")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT "\n")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "lineno")
(PUNCT "+=")
(LIT 1)
(NEWLINE)
(ID "column")
(PUNCT "=")
(LIT 0)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "parse")
(PUNCT ".")
(ID "ParseError")
(PUNCT "(")
(LIT "incomplete input")
(PUNCT ",")
(ID "type")
(PUNCT ",")
(ID "value")
(PUNCT ",")
(PUNCT "(")
(ID "prefix")
(PUNCT ",")
(ID "start")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "p")
(PUNCT ".")
(ID "rootnode")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_stream_raw")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a stream and return the syntax tree.")
(NEWLINE)
(ID "tokens")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "generate_tokens")
(PUNCT "(")
(ID "stream")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parse_tokens")
(PUNCT "(")
(ID "tokens")
(PUNCT ",")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_stream")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "stream")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a stream and return the syntax tree.")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parse_stream_raw")
(PUNCT "(")
(ID "stream")
(PUNCT ",")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "parse_file")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "filename")
(PUNCT ",")
(ID "encoding")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a file and return the syntax tree.")
(NEWLINE)
(ID "stream")
(PUNCT "=")
(ID "codecs")
(PUNCT ".")
(ID "open")
(PUNCT "(")
(ID "filename")
(PUNCT ",")
(LIT "r")
(PUNCT ",")
(ID "encoding")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parse_stream")
(PUNCT "(")
(ID "stream")
(PUNCT ",")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD finally)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "stream")
(PUNCT ".")
(ID "close")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "parse_string")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "text")
(PUNCT ",")
(ID "debug")
(PUNCT "=")
(KEYWORD False)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Parse a string and return the syntax tree.")
(NEWLINE)
(ID "tokens")
(PUNCT "=")
(ID "tokenize")
(PUNCT ".")
(ID "generate_tokens")
(PUNCT "(")
(ID "io")
(PUNCT ".")
(ID "StringIO")
(PUNCT "(")
(ID "text")
(PUNCT ")")
(PUNCT ".")
(ID "readline")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "parse_tokens")
(PUNCT "(")
(ID "tokens")
(PUNCT ",")
(ID "debug")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "load_grammar")
(PUNCT "(")
(ID "gt")
(PUNCT "=")
(LIT "Grammar.txt")
(PUNCT ",")
(ID "gp")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "save")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD False)
(PUNCT ",")
(ID "logger")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Load the grammar (maybe from a pickle).")
(NEWLINE)
(KEYWORD if)
(ID "logger")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "getLogger")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "gp")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "head")
(PUNCT ",")
(ID "tail")
(PUNCT "=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "splitext")
(PUNCT "(")
(ID "gt")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "tail")
(PUNCT "==")
(LIT ".txt")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "tail")
(PUNCT "=")
(LIT "")
(NEWLINE)
(DEDENT)
(ID "gp")
(PUNCT "=")
(ID "head")
(PUNCT "+")
(ID "tail")
(PUNCT "+")
(LIT ".")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "map")
(PUNCT "(")
(ID "str")
(PUNCT ",")
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT ")")
(PUNCT ")")
(PUNCT "+")
(LIT ".pickle")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "force")
(KEYWORD or)
(KEYWORD not)
(ID "_newer")
(PUNCT "(")
(ID "gp")
(PUNCT ",")
(ID "gt")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Generating grammar tables from %s")
(PUNCT ",")
(ID "gt")
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT "=")
(ID "pgen")
(PUNCT ".")
(ID "generate_grammar")
(PUNCT "(")
(ID "gt")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD False)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Writing grammar tables to %s")
(PUNCT ",")
(ID "gp")
(PUNCT ")")
(NEWLINE)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT ".")
(ID "dump")
(PUNCT "(")
(ID "gp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "OSError")
(KEYWORD as)
(ID "e")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "logger")
(PUNCT ".")
(ID "info")
(PUNCT "(")
(LIT "Writing failed:")
(PUNCT "+")
(ID "str")
(PUNCT "(")
(ID "e")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "g")
(PUNCT "=")
(ID "grammar")
(PUNCT ".")
(ID "Grammar")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "g")
(PUNCT ".")
(ID "load")
(PUNCT "(")
(ID "gp")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "g")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_newer")
(PUNCT "(")
(ID "a")
(PUNCT ",")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Inquire whether file a was written since file b.")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(KEYWORD not)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "exists")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "getmtime")
(PUNCT "(")
(ID "a")
(PUNCT ")")
(PUNCT ">=")
(ID "os")
(PUNCT ".")
(ID "path")
(PUNCT ".")
(ID "getmtime")
(PUNCT "(")
(ID "b")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "main")
(PUNCT "(")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Main program, when run as a script: produce grammar pickle files.\n\n    Calls load_grammar for each argument, a path to a grammar text file.\n    ")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "argv")
(PUNCT "[")
(LIT 1)
(PUNCT ":")
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "logging")
(PUNCT ".")
(ID "basicConfig")
(PUNCT "(")
(ID "level")
(PUNCT "=")
(ID "logging")
(PUNCT ".")
(ID "INFO")
(PUNCT ",")
(ID "stream")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "stdout")
(PUNCT ",")
(ID "format")
(PUNCT "=")
(LIT "%(message)s")
(PUNCT ")")
(NEWLINE)
(KEYWORD for)
(ID "gt")
(KEYWORD in)
(ID "args")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "load_grammar")
(PUNCT "(")
(ID "gt")
(PUNCT ",")
(ID "save")
(PUNCT "=")
(KEYWORD True)
(PUNCT ",")
(ID "force")
(PUNCT "=")
(KEYWORD True)
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "__name__")
(PUNCT "==")
(LIT "__main__")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "sys")
(PUNCT ".")
(ID "exit")
(PUNCT "(")
(ID "int")
(PUNCT "(")
(KEYWORD not)
(ID "main")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
