(LIT "Event loop and event loop policy.")
(NEWLINE)
(ID "__all__")
(PUNCT "=")
(PUNCT "[")
(LIT "AbstractEventLoopPolicy")
(PUNCT ",")
(LIT "AbstractEventLoop")
(PUNCT ",")
(LIT "AbstractServer")
(PUNCT ",")
(LIT "Handle")
(PUNCT ",")
(LIT "TimerHandle")
(PUNCT ",")
(LIT "get_event_loop_policy")
(PUNCT ",")
(LIT "set_event_loop_policy")
(PUNCT ",")
(LIT "get_event_loop")
(PUNCT ",")
(LIT "set_event_loop")
(PUNCT ",")
(LIT "new_event_loop")
(PUNCT ",")
(LIT "get_child_watcher")
(PUNCT ",")
(LIT "set_child_watcher")
(PUNCT ",")
(PUNCT "]")
(NEWLINE)
(KEYWORD import)
(ID "functools")
(NEWLINE)
(KEYWORD import)
(ID "inspect")
(NEWLINE)
(KEYWORD import)
(ID "reprlib")
(NEWLINE)
(KEYWORD import)
(ID "socket")
(NEWLINE)
(KEYWORD import)
(ID "subprocess")
(NEWLINE)
(KEYWORD import)
(ID "sys")
(NEWLINE)
(KEYWORD import)
(ID "threading")
(NEWLINE)
(KEYWORD import)
(ID "traceback")
(NEWLINE)
(ID "_PY34")
(PUNCT "=")
(ID "sys")
(PUNCT ".")
(ID "version_info")
(PUNCT ">=")
(PUNCT "(")
(LIT 3)
(PUNCT ",")
(LIT 4)
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_get_function_source")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_PY34")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "inspect")
(PUNCT ".")
(ID "unwrap")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD elif)
(ID "hasattr")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(LIT "__wrapped__")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__wrapped__")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "inspect")
(PUNCT ".")
(ID "isfunction")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "code")
(PUNCT "=")
(ID "func")
(PUNCT ".")
(ID "__code__")
(NEWLINE)
(KEYWORD return)
(PUNCT "(")
(ID "code")
(PUNCT ".")
(ID "co_filename")
(PUNCT ",")
(ID "code")
(PUNCT ".")
(ID "co_firstlineno")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "functools")
(PUNCT ".")
(ID "partial")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_get_function_source")
(PUNCT "(")
(ID "func")
(PUNCT ".")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "_PY34")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "functools")
(PUNCT ".")
(ID "partialmethod")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "_get_function_source")
(PUNCT "(")
(ID "func")
(PUNCT ".")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(KEYWORD None)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Format function arguments.\n\n    Special case for a single parameter: ('hello',) is formatted as ('hello').\n    ")
(NEWLINE)
(ID "args_repr")
(PUNCT "=")
(ID "reprlib")
(PUNCT ".")
(ID "repr")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "len")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "==")
(LIT 1)
(KEYWORD and)
(ID "args_repr")
(PUNCT ".")
(ID "endswith")
(PUNCT "(")
(LIT ",)")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "args_repr")
(PUNCT "=")
(ID "args_repr")
(PUNCT "[")
(PUNCT ":")
(PUNCT "-")
(LIT 2)
(PUNCT "]")
(PUNCT "+")
(LIT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "args_repr")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_format_callback")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "suffix")
(PUNCT "=")
(LIT "")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(ID "functools")
(PUNCT ".")
(ID "partial")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "suffix")
(PUNCT "=")
(ID "_format_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(PUNCT "+")
(ID "suffix")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_format_callback")
(PUNCT "(")
(ID "func")
(PUNCT ".")
(ID "func")
(PUNCT ",")
(ID "func")
(PUNCT ".")
(ID "args")
(PUNCT ",")
(ID "suffix")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "func_repr")
(PUNCT "=")
(ID "getattr")
(PUNCT "(")
(ID "func")
(PUNCT ",")
(LIT "__qualname__")
(PUNCT ",")
(KEYWORD None)
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(KEYWORD not)
(ID "func_repr")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func_repr")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "args")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func_repr")
(PUNCT "+=")
(ID "_format_args")
(PUNCT "(")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "suffix")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func_repr")
(PUNCT "+=")
(ID "suffix")
(NEWLINE)
(DEDENT)
(ID "source")
(PUNCT "=")
(ID "_get_function_source")
(PUNCT "(")
(ID "func")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "source")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "func_repr")
(PUNCT "+=")
(LIT " at %s:%s")
(PUNCT "%")
(ID "source")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "func_repr")
(NEWLINE)
(DEDENT)
(KEYWORD class)
(ID "Handle")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Object returned by callback registration methods.")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "(")
(LIT "_callback")
(PUNCT ",")
(LIT "_args")
(PUNCT ",")
(LIT "_cancelled")
(PUNCT ",")
(LIT "_loop")
(PUNCT ",")
(LIT "_source_traceback")
(PUNCT ",")
(LIT "_repr")
(PUNCT ",")
(LIT "__weakref__")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(KEYWORD not)
(ID "isinstance")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "Handle")
(PUNCT ")")
(PUNCT ",")
(LIT "A Handle is not a callback")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "=")
(ID "callback")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "=")
(ID "args")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_repr")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "=")
(ID "traceback")
(PUNCT ".")
(ID "extract_stack")
(PUNCT "(")
(ID "sys")
(PUNCT ".")
(ID "_getframe")
(PUNCT "(")
(LIT 1)
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD else)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_repr_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "=")
(PUNCT "[")
(ID "self")
(PUNCT ".")
(ID "__class__")
(PUNCT ".")
(ID "__name__")
(PUNCT "]")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "cancelled")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_callback")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(ID "_format_callback")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "frame")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(ID "info")
(PUNCT ".")
(ID "append")
(PUNCT "(")
(LIT "created at %s:%s")
(PUNCT "%")
(PUNCT "(")
(ID "frame")
(PUNCT "[")
(LIT 0)
(PUNCT "]")
(PUNCT ",")
(ID "frame")
(PUNCT "[")
(LIT 1)
(PUNCT "]")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "info")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__repr__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_repr")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_repr")
(NEWLINE)
(DEDENT)
(ID "info")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_repr_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(LIT "<%s>")
(PUNCT "%")
(LIT " ")
(PUNCT ".")
(ID "join")
(PUNCT "(")
(ID "info")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cancel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "get_debug")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_repr")
(PUNCT "=")
(ID "repr")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "_run")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD try)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "(")
(PUNCT "*")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD except)
(ID "Exception")
(KEYWORD as)
(ID "exc")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "cb")
(PUNCT "=")
(ID "_format_callback")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT ",")
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT ")")
(NEWLINE)
(ID "msg")
(PUNCT "=")
(LIT "Exception in callback {}")
(PUNCT ".")
(ID "format")
(PUNCT "(")
(ID "cb")
(PUNCT ")")
(NEWLINE)
(ID "context")
(PUNCT "=")
(PUNCT "{")
(LIT "message")
(PUNCT ":")
(ID "msg")
(PUNCT ",")
(LIT "exception")
(PUNCT ":")
(ID "exc")
(PUNCT ",")
(LIT "handle")
(PUNCT ":")
(ID "self")
(PUNCT ",")
(PUNCT "}")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "context")
(PUNCT "[")
(LIT "source_traceback")
(PUNCT "]")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "call_exception_handler")
(PUNCT "(")
(ID "context")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "TimerHandle")
(PUNCT "(")
(ID "Handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Object returned by timed callback registration methods.")
(NEWLINE)
(ID "__slots__")
(PUNCT "=")
(PUNCT "[")
(LIT "_scheduled")
(PUNCT ",")
(LIT "_when")
(PUNCT "]")
(NEWLINE)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "when")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD assert)
(ID "when")
(KEYWORD is)
(KEYWORD not)
(KEYWORD None)
(NEWLINE)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "__init__")
(PUNCT "(")
(ID "callback")
(PUNCT ",")
(ID "args")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(NEWLINE)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD del)
(ID "self")
(PUNCT ".")
(ID "_source_traceback")
(PUNCT "[")
(PUNCT "-")
(LIT 1)
(PUNCT "]")
(NEWLINE)
(DEDENT)
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT "=")
(ID "when")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_scheduled")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_repr_info")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "info")
(PUNCT "=")
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "_repr_info")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(ID "pos")
(PUNCT "=")
(LIT 2)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(KEYWORD else)
(LIT 1)
(NEWLINE)
(ID "info")
(PUNCT ".")
(ID "insert")
(PUNCT "(")
(ID "pos")
(PUNCT ",")
(LIT "when=%s")
(PUNCT "%")
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "info")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__hash__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "hash")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__lt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT "<")
(ID "other")
(PUNCT ".")
(ID "_when")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__le__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT "<")
(ID "other")
(PUNCT ".")
(ID "_when")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__gt__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT ">")
(ID "other")
(PUNCT ".")
(ID "_when")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ge__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT ">")
(ID "other")
(PUNCT ".")
(ID "_when")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(KEYWORD True)
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__eq__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "isinstance")
(PUNCT "(")
(ID "other")
(PUNCT ",")
(ID "TimerHandle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_when")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_when")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_callback")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_callback")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_args")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_args")
(KEYWORD and)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(PUNCT "==")
(ID "other")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__ne__")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "other")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "equal")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "__eq__")
(PUNCT "(")
(ID "other")
(PUNCT ")")
(NEWLINE)
(KEYWORD return)
(ID "NotImplemented")
(KEYWORD if)
(ID "equal")
(KEYWORD is)
(ID "NotImplemented")
(KEYWORD else)
(KEYWORD not)
(ID "equal")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "cancel")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_cancelled")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_loop")
(PUNCT ".")
(ID "_timer_handle_cancelled")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ID "super")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "cancel")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AbstractServer")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract server returned by create_server().")
(NEWLINE)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop serving.  This leaves existing connections open.")
(NEWLINE)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "wait_closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Coroutine to wait until service is closed.")
(NEWLINE)
(KEYWORD return)
(ID "NotImplemented")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AbstractEventLoop")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract event loop.")
(NEWLINE)
(KEYWORD def)
(ID "run_forever")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the event loop until stop() is called.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_until_complete")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "future")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Run the event loop until a Future is done.\n\n        Return the Future's result, or raise its exception.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "stop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Stop the event loop as soon as reasonable.\n\n        Exactly how soon that is may depend on the implementation, but\n        no more I/O callbacks should be scheduled.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_running")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Return whether the event loop is currently running.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "is_closed")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Returns True if the event loop was closed.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "close")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Close the loop.\n\n        The loop should not be running.\n\n        This is idempotent and irreversible.\n\n        No other methods should be called after this one.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "_timer_handle_cancelled")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handle")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Notification that a TimerHandle has been cancelled.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_soon")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "call_later")
(PUNCT "(")
(LIT 0)
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_later")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "delay")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_at")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "when")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "time")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_task")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "coro")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_soon_threadsafe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "run_in_executor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "executor")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_default_executor")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "executor")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getaddrinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "host")
(PUNCT ",")
(ID "port")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "type")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "getnameinfo")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sockaddr")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "family")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "local_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "host")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "port")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AF_UNSPEC")
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(ID "socket")
(PUNCT ".")
(ID "AI_PASSIVE")
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "backlog")
(PUNCT "=")
(LIT 100)
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "reuse_address")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A coroutine which creates a TCP server bound to host and port.\n\n        The return value is a Server object which can be used to stop\n        the service.\n\n        If host is an empty string or None all interfaces are assumed\n        and a list of multiple sockets will be returned (most likely\n        one for IPv4 and another one for IPv6).\n\n        family can be set to either AF_INET or AF_INET6 to force the\n        socket to use IPv4 or IPv6. If not set it will be determined\n        from host (defaults to AF_UNSPEC).\n\n        flags is a bitmask for getaddrinfo().\n\n        sock can optionally be specified in order to use a preexisting\n        socket object.\n\n        backlog is the maximum number of queued connections passed to\n        listen() (defaults to 100).\n\n        ssl can be set to an SSLContext to enable SSL over the\n        accepted connections.\n\n        reuse_address tells the kernel to reuse a local socket in\n        TIME_WAIT state, without waiting for its natural timeout to\n        expire. If not specified will automatically be set to True on\n        UNIX.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_unix_connection")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "server_hostname")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_unix_server")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "path")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "sock")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "backlog")
(PUNCT "=")
(LIT 100)
(PUNCT ",")
(ID "ssl")
(PUNCT "=")
(KEYWORD None)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "A coroutine which creates a UNIX Domain Socket server.\n\n        The return value is a Server object, which can be used to stop\n        the service.\n\n        path is a str, representing a file systsem path to bind the\n        server socket to.\n\n        sock can optionally be specified in order to use a preexisting\n        socket object.\n\n        backlog is the maximum number of queued connections passed to\n        listen() (defaults to 100).\n\n        ssl can be set to an SSLContext to enable SSL over the\n        accepted connections.\n        ")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "create_datagram_endpoint")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "local_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(ID "remote_addr")
(PUNCT "=")
(KEYWORD None)
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "family")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "proto")
(PUNCT "=")
(LIT 0)
(PUNCT ",")
(ID "flags")
(PUNCT "=")
(LIT 0)
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect_read_pipe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "pipe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register read pipe in event loop. Set the pipe to non-blocking mode.\n\n        protocol_factory should instantiate object with Protocol interface.\n        pipe is a file-like object.\n        Return pair (transport, protocol), where transport supports the\n        ReadTransport interface.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "connect_write_pipe")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "pipe")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Register write pipe in event loop.\n\n        protocol_factory should instantiate object with BaseProtocol interface.\n        Pipe is file-like object already switched to nonblocking.\n        Return pair (transport, protocol), where transport support\n        WriteTransport interface.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "subprocess_shell")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(ID "cmd")
(PUNCT ",")
(PUNCT "*")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "subprocess_exec")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "protocol_factory")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ",")
(ID "stdin")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stdout")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(ID "stderr")
(PUNCT "=")
(ID "subprocess")
(PUNCT ".")
(ID "PIPE")
(PUNCT ",")
(PUNCT "**")
(ID "kwargs")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_reader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_reader")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_writer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_writer")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "fd")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sock_recv")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "nbytes")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sock_sendall")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "data")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sock_connect")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ",")
(ID "address")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "sock_accept")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sock")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "add_signal_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ",")
(ID "callback")
(PUNCT ",")
(PUNCT "*")
(ID "args")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "remove_signal_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "sig")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "handler")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "default_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "call_exception_handler")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "context")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_debug")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_debug")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "enabled")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "AbstractEventLoopPolicy")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Abstract policy for accessing the event loop.")
(NEWLINE)
(KEYWORD def)
(ID "get_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the event loop for the current context.\n\n        Returns an event loop object implementing the BaseEventLoop interface,\n        or raises an exception in case no event loop has been set for the\n        current context and the current policy does not specify to create one.\n\n        It should never return None.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the event loop for the current context to loop.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "new_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create and return a new event loop object according to this\n        policy's rules. If there's need to set this loop as the event loop for\n        the current context, set_event_loop must be called explicitly.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_child_watcher")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the watcher for child processes.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_child_watcher")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "watcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the watcher for child processes.")
(NEWLINE)
(KEYWORD raise)
(ID "NotImplementedError")
(NEWLINE)
(DEDENT)
(DEDENT)
(KEYWORD class)
(ID "BaseDefaultEventLoopPolicy")
(PUNCT "(")
(ID "AbstractEventLoopPolicy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Default policy implementation for accessing the event loop.\n\n    In this policy, each thread has its own event loop.  However, we\n    only automatically create an event loop by default for the main\n    thread; other threads by default have no event loop.\n\n    Other policies may have different rules (e.g. a single global\n    event loop, or automatically creating an event loop per thread, or\n    using some other notion of context to which an event loop is\n    associated).\n    ")
(NEWLINE)
(ID "_loop_factory")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(KEYWORD class)
(ID "_Local")
(PUNCT "(")
(ID "threading")
(PUNCT ".")
(ID "local")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_loop")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_set_called")
(PUNCT "=")
(KEYWORD False)
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "__init__")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT "=")
(ID "self")
(PUNCT ".")
(ID "_Local")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the event loop.\n\n        This may be None or an instance of EventLoop.\n        ")
(NEWLINE)
(KEYWORD if)
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_loop")
(KEYWORD is)
(KEYWORD None)
(KEYWORD and)
(KEYWORD not)
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_set_called")
(KEYWORD and)
(ID "isinstance")
(PUNCT "(")
(ID "threading")
(PUNCT ".")
(ID "current_thread")
(PUNCT "(")
(PUNCT ")")
(PUNCT ",")
(ID "threading")
(PUNCT ".")
(ID "_MainThread")
(PUNCT ")")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "self")
(PUNCT ".")
(ID "set_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ".")
(ID "new_event_loop")
(PUNCT "(")
(PUNCT ")")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD if)
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_loop")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD raise)
(ID "RuntimeError")
(PUNCT "(")
(LIT "There is no current event loop in thread %r.")
(PUNCT "%")
(ID "threading")
(PUNCT ".")
(ID "current_thread")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "name")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_loop")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ",")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the event loop.")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_set_called")
(PUNCT "=")
(KEYWORD True)
(NEWLINE)
(KEYWORD assert)
(ID "loop")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "loop")
(PUNCT ",")
(ID "AbstractEventLoop")
(PUNCT ")")
(NEWLINE)
(ID "self")
(PUNCT ".")
(ID "_local")
(PUNCT ".")
(ID "_loop")
(PUNCT "=")
(ID "loop")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "new_event_loop")
(PUNCT "(")
(ID "self")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Create a new event loop.\n\n        You must call set_event_loop() to make this the current event\n        loop.\n        ")
(NEWLINE)
(KEYWORD return)
(ID "self")
(PUNCT ".")
(ID "_loop_factory")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(ID "_event_loop_policy")
(PUNCT "=")
(KEYWORD None)
(NEWLINE)
(ID "_lock")
(PUNCT "=")
(ID "threading")
(PUNCT ".")
(ID "Lock")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(KEYWORD def)
(ID "_init_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD global)
(ID "_event_loop_policy")
(NEWLINE)
(KEYWORD with)
(ID "_lock")
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD if)
(ID "_event_loop_policy")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(KEYWORD from)
(PUNCT ".")
(KEYWORD import)
(ID "DefaultEventLoopPolicy")
(NEWLINE)
(ID "_event_loop_policy")
(PUNCT "=")
(ID "DefaultEventLoopPolicy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(DEDENT)
(DEDENT)
(KEYWORD def)
(ID "get_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Get the current event loop policy.")
(NEWLINE)
(KEYWORD if)
(ID "_event_loop_policy")
(KEYWORD is)
(KEYWORD None)
(PUNCT ":")
(NEWLINE)
(INDENT)
(ID "_init_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD return)
(ID "_event_loop_policy")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_event_loop_policy")
(PUNCT "(")
(ID "policy")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Set the current event loop policy.\n\n    If policy is None, the default policy is restored.")
(NEWLINE)
(KEYWORD global)
(ID "_event_loop_policy")
(NEWLINE)
(KEYWORD assert)
(ID "policy")
(KEYWORD is)
(KEYWORD None)
(KEYWORD or)
(ID "isinstance")
(PUNCT "(")
(ID "policy")
(PUNCT ",")
(ID "AbstractEventLoopPolicy")
(PUNCT ")")
(NEWLINE)
(ID "_event_loop_policy")
(PUNCT "=")
(ID "policy")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_event_loop")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Equivalent to calling get_event_loop_policy().get_event_loop().")
(NEWLINE)
(KEYWORD return)
(ID "get_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get_event_loop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_event_loop")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Equivalent to calling get_event_loop_policy().set_event_loop(loop).")
(NEWLINE)
(ID "get_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "set_event_loop")
(PUNCT "(")
(ID "loop")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "new_event_loop")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Equivalent to calling get_event_loop_policy().new_event_loop().")
(NEWLINE)
(KEYWORD return)
(ID "get_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "new_event_loop")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "get_child_watcher")
(PUNCT "(")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Equivalent to calling get_event_loop_policy().get_child_watcher().")
(NEWLINE)
(KEYWORD return)
(ID "get_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "get_child_watcher")
(PUNCT "(")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(KEYWORD def)
(ID "set_child_watcher")
(PUNCT "(")
(ID "watcher")
(PUNCT ")")
(PUNCT ":")
(NEWLINE)
(INDENT)
(LIT "Equivalent to calling\n    get_event_loop_policy().set_child_watcher(watcher).")
(NEWLINE)
(KEYWORD return)
(ID "get_event_loop_policy")
(PUNCT "(")
(PUNCT ")")
(PUNCT ".")
(ID "set_child_watcher")
(PUNCT "(")
(ID "watcher")
(PUNCT ")")
(NEWLINE)
(DEDENT)
(ENDMARKER)
